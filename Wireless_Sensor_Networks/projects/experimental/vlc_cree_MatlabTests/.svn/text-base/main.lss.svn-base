
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000298  00800200  0000610a  0000619e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000610a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004da  00800498  00800498  00006436  2**0
                  ALLOC
  3 .stab         0000fd44  00000000  00000000  00006438  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008d55  00000000  00000000  0001617c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__ctors_end>
       4:	0c 94 d5 23 	jmp	0x47aa	; 0x47aa <__vector_1>
       8:	0c 94 07 24 	jmp	0x480e	; 0x480e <__vector_2>
       c:	0c 94 39 24 	jmp	0x4872	; 0x4872 <__vector_3>
      10:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      14:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      18:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      1c:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      20:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      24:	0c 94 a3 23 	jmp	0x4746	; 0x4746 <__vector_9>
      28:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      2c:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      30:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      34:	0c 94 01 22 	jmp	0x4402	; 0x4402 <__vector_13>
      38:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      3c:	0c 94 01 22 	jmp	0x4402	; 0x4402 <__vector_13>
      40:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      44:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      48:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      4c:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      50:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      54:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      58:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      5c:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      60:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      64:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      68:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      6c:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      70:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      74:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      78:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      7c:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      80:	0c 94 34 22 	jmp	0x4468	; 0x4468 <__vector_32>
      84:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      88:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      8c:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      90:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      94:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      98:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      9c:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      a0:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      a4:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      a8:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      ac:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      b0:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      b4:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      b8:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      bc:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      c0:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      c4:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      c8:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      cc:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      d0:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      d4:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      d8:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      dc:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      e0:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
      e4:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__vector_57>
      e8:	0c 94 0e 08 	jmp	0x101c	; 0x101c <__vector_58>
      ec:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__vector_59>
      f0:	0c 94 ed 08 	jmp	0x11da	; 0x11da <__vector_60>
      f4:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <__vector_61>
      f8:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__vector_62>
      fc:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <__vector_63>
     100:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__vector_64>
     104:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
     108:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
     10c:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
     110:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
     114:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
     118:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
     11c:	0c 94 19 02 	jmp	0x432	; 0x432 <__bad_interrupt>
     120:	69 12       	cpse	r6, r25
     122:	6f 12       	cpse	r6, r31
     124:	72 12       	cpse	r7, r18
     126:	75 12       	cpse	r7, r21
     128:	78 12       	cpse	r7, r24
     12a:	7b 12       	cpse	r7, r27
     12c:	81 12       	cpse	r8, r17
     12e:	7e 12       	cpse	r7, r30
     130:	84 12       	cpse	r8, r20
     132:	87 12       	cpse	r8, r23
     134:	8a 12       	cpse	r8, r26
     136:	93 12       	cpse	r9, r19
     138:	96 12       	cpse	r9, r22
     13a:	99 12       	cpse	r9, r25
     13c:	9c 12       	cpse	r9, r28
     13e:	90 12       	cpse	r9, r16
     140:	66 12       	cpse	r6, r22
     142:	6c 12       	cpse	r6, r28
     144:	9f 12       	cpse	r9, r31
     146:	a2 12       	cpse	r10, r18
     148:	8d 12       	cpse	r8, r29
     14a:	63 12       	cpse	r6, r19

0000014c <__c.2881>:
     14c:	45 72 72 6f 72 20 73 65 74 74 69 6e 67 20 75 70     Error setting up
     15c:	20 74 69 6d 65 72 20 63 61 6c 6c 62 61 63 6b 0d      timer callback.
     16c:	0a 00                                               ..

0000016e <__c.2879>:
     16e:	43 61 6c 6c 62 61 63 6b 20 74 69 6d 65 72 20 73     Callback timer s
     17e:	65 74 75 70 0d 0a 00                                etup...

00000185 <__c.2834>:
     185:	53 74 61 72 74 69 6e 67 20 75 70 2e 2e 2e 0d 0a     Starting up.....
	...

00000196 <__c.2918>:
     196:	55 4e 4b 4f 57 4e 00                                UNKOWN.

0000019d <__c.2915>:
     19d:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

000001ac <__c.2912>:
     1ac:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

000001bd <__c.2909>:
     1bd:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     1cd:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

000001d8 <__c.2906>:
     1d8:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     1e8:	20 53 69 67 6e 61 6c 00                              Signal.

000001f0 <__c.2903>:
     1f0:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     200:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

00000210 <__c.2900>:
     210:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     220:	72 6f 72 00                                         ror.

00000224 <__c.2897>:
     224:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

00000235 <__c.2894>:
     235:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     245:	61 72 74 00                                         art.

00000249 <__c.2891>:
     249:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

00000258 <__c.2888>:
     258:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     268:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

00000273 <__c.2885>:
     273:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

0000027f <__c.2882>:
     27f:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     28f:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     29f:	20 6f 6b 3f 00                                       ok?.

000002a4 <__c.2879>:
     2a4:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     2b4:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

000002c2 <__c.2876>:
     2c2:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     2d2:	72 74 00                                            rt.

000002d5 <__c.2873>:
     2d5:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     2e5:	49 44 00                                            ID.

000002e8 <__c.2870>:
     2e8:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     2f8:	20 57 61 6b 65 75 70 00                              Wakeup.

00000300 <__c.2867>:
     300:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     310:	6c 61 74 65 64 00                                   lated.

00000316 <__c.2864>:
     316:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     326:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

00000331 <__c.2861>:
     331:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     341:	69 6e 74 65 72 00                                   inter.

00000347 <__c.2858>:
     347:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     357:	6c 6f 77 00                                         low.

0000035b <__c.2855>:
     35b:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     36b:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     37b:	6e 6f 75 67 68 21 00                                nough!.

00000382 <__c.2851>:
     382:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     392:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     3a2:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     3b2:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

000003be <__c.2848>:
     3be:	29 3a 20 00                                         ): .

000003c2 <__c.2846>:
     3c2:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

000003ce <__c.2771>:
     3ce:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

000003dd <__c.1851>:
     3dd:	45 46 47 65 66 67 00                                EFGefg.

000003e4 <__c.1845>:
     3e4:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

000003f4 <__ctors_end>:
     3f4:	11 24       	eor	r1, r1
     3f6:	1f be       	out	0x3f, r1	; 63
     3f8:	cf ef       	ldi	r28, 0xFF	; 255
     3fa:	d1 e4       	ldi	r29, 0x41	; 65
     3fc:	de bf       	out	0x3e, r29	; 62
     3fe:	cd bf       	out	0x3d, r28	; 61

00000400 <__do_copy_data>:
     400:	14 e0       	ldi	r17, 0x04	; 4
     402:	a0 e0       	ldi	r26, 0x00	; 0
     404:	b2 e0       	ldi	r27, 0x02	; 2
     406:	ea e0       	ldi	r30, 0x0A	; 10
     408:	f1 e6       	ldi	r31, 0x61	; 97
     40a:	00 e0       	ldi	r16, 0x00	; 0
     40c:	0b bf       	out	0x3b, r16	; 59
     40e:	02 c0       	rjmp	.+4      	; 0x414 <__do_copy_data+0x14>
     410:	07 90       	elpm	r0, Z+
     412:	0d 92       	st	X+, r0
     414:	a8 39       	cpi	r26, 0x98	; 152
     416:	b1 07       	cpc	r27, r17
     418:	d9 f7       	brne	.-10     	; 0x410 <__do_copy_data+0x10>

0000041a <__do_clear_bss>:
     41a:	19 e0       	ldi	r17, 0x09	; 9
     41c:	a8 e9       	ldi	r26, 0x98	; 152
     41e:	b4 e0       	ldi	r27, 0x04	; 4
     420:	01 c0       	rjmp	.+2      	; 0x424 <.do_clear_bss_start>

00000422 <.do_clear_bss_loop>:
     422:	1d 92       	st	X+, r1

00000424 <.do_clear_bss_start>:
     424:	a2 37       	cpi	r26, 0x72	; 114
     426:	b1 07       	cpc	r27, r17
     428:	e1 f7       	brne	.-8      	; 0x422 <.do_clear_bss_loop>
     42a:	0e 94 4f 04 	call	0x89e	; 0x89e <main>
     42e:	0c 94 83 30 	jmp	0x6106	; 0x6106 <_exit>

00000432 <__bad_interrupt>:
     432:	0c 94 e9 21 	jmp	0x43d2	; 0x43d2 <__vector_default>

00000436 <my_timer_callback>:
//	TCNT3 = 0;//Ideally this should be happening automatically, but the count match gets missed sometimes. This may be due to the expected auto-clear of TCNT and a write to the Timer compare - both happening within the timeer ISR
	//nrk_led_toggle(ORANGE_LED);
	//PORTF ^= 0xff;
	//nrk_gpio_toggle(NRK_DEBUG_0);
//	nrk_led_set(ORANGE_LED);	
	PORTF ^= 0xff;
     436:	81 b3       	in	r24, 0x11	; 17
     438:	80 95       	com	r24
     43a:	81 bb       	out	0x11, r24	; 17
	PORTB ^= 0x40;
     43c:	85 b1       	in	r24, 0x05	; 5
     43e:	90 e4       	ldi	r25, 0x40	; 64
     440:	89 27       	eor	r24, r25
     442:	85 b9       	out	0x05, r24	; 5
	switch(freq_f)
     444:	80 91 99 04 	lds	r24, 0x0499
     448:	83 30       	cpi	r24, 0x03	; 3
     44a:	81 f0       	breq	.+32     	; 0x46c <my_timer_callback+0x36>
     44c:	84 30       	cpi	r24, 0x04	; 4
     44e:	28 f4       	brcc	.+10     	; 0x45a <my_timer_callback+0x24>
     450:	81 30       	cpi	r24, 0x01	; 1
     452:	31 f0       	breq	.+12     	; 0x460 <my_timer_callback+0x2a>
     454:	82 30       	cpi	r24, 0x02	; 2
     456:	81 f4       	brne	.+32     	; 0x478 <my_timer_callback+0x42>
     458:	06 c0       	rjmp	.+12     	; 0x466 <my_timer_callback+0x30>
     45a:	88 30       	cpi	r24, 0x08	; 8
     45c:	69 f4       	brne	.+26     	; 0x478 <my_timer_callback+0x42>
     45e:	09 c0       	rjmp	.+18     	; 0x472 <my_timer_callback+0x3c>
	{
		case 1://1k
			compare_vt = 8000;
     460:	80 e4       	ldi	r24, 0x40	; 64
     462:	9f e1       	ldi	r25, 0x1F	; 31
     464:	0b c0       	rjmp	.+22     	; 0x47c <my_timer_callback+0x46>
			break;

		case 2://2k
			compare_vt = 4000;
     466:	80 ea       	ldi	r24, 0xA0	; 160
     468:	9f e0       	ldi	r25, 0x0F	; 15
     46a:	08 c0       	rjmp	.+16     	; 0x47c <my_timer_callback+0x46>
			break;

		case 3://3k
			compare_vt = 2667;
     46c:	8b e6       	ldi	r24, 0x6B	; 107
     46e:	9a e0       	ldi	r25, 0x0A	; 10
     470:	05 c0       	rjmp	.+10     	; 0x47c <my_timer_callback+0x46>
			break;

		case 8://8k
			compare_vt = 1000;
     472:	88 ee       	ldi	r24, 0xE8	; 232
     474:	93 e0       	ldi	r25, 0x03	; 3
     476:	02 c0       	rjmp	.+4      	; 0x47c <my_timer_callback+0x46>
		case 10://10k
			compare_vt = 800;
			break;

		default://10k
			compare_vt = 800;
     478:	80 e2       	ldi	r24, 0x20	; 32
     47a:	93 e0       	ldi	r25, 0x03	; 3
     47c:	90 93 a1 04 	sts	0x04A1, r25
     480:	80 93 a0 04 	sts	0x04A0, r24
			break;
	}
//		if(compare_vt<TCNT3) printf( "TCNT3=%d cvt=%d\r\n",TCNT3,compare_vt );
		//Load new compare value to the Timer Compare registers
	OCR3AH = (compare_vt >> 8) & 0xFF;
     484:	80 91 a1 04 	lds	r24, 0x04A1
     488:	80 93 99 00 	sts	0x0099, r24
	OCR3AL = (compare_vt & 0xFF);
     48c:	80 91 a0 04 	lds	r24, 0x04A0
     490:	80 93 98 00 	sts	0x0098, r24
	nrk_led_clr(ORANGE_LED);
     494:	82 e0       	ldi	r24, 0x02	; 2
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <nrk_led_clr>
}
     49c:	08 95       	ret

0000049e <Task1>:

void Task1()
{
	

  printf( "VLC address is %d\r\n",VLC_ADDR);
     49e:	00 d0       	rcall	.+0      	; 0x4a0 <Task1+0x2>
     4a0:	00 d0       	rcall	.+0      	; 0x4a2 <Task1+0x4>
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	92 e0       	ldi	r25, 0x02	; 2
     4a6:	ad b7       	in	r26, 0x3d	; 61
     4a8:	be b7       	in	r27, 0x3e	; 62
     4aa:	12 96       	adiw	r26, 0x02	; 2
     4ac:	9c 93       	st	X, r25
     4ae:	8e 93       	st	-X, r24
     4b0:	11 97       	sbiw	r26, 0x01	; 1
     4b2:	14 96       	adiw	r26, 0x04	; 4
     4b4:	1c 92       	st	X, r1
     4b6:	1e 92       	st	-X, r1
     4b8:	13 97       	sbiw	r26, 0x03	; 3
     4ba:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <printf>
  printf( "Task1 PID=%d\r\n",nrk_get_pid());
     4be:	0f 90       	pop	r0
     4c0:	0f 90       	pop	r0
     4c2:	0f 90       	pop	r0
     4c4:	0f 90       	pop	r0
     4c6:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <nrk_get_pid>
     4ca:	00 d0       	rcall	.+0      	; 0x4cc <Task1+0x2e>
     4cc:	00 d0       	rcall	.+0      	; 0x4ce <Task1+0x30>
     4ce:	ed b7       	in	r30, 0x3d	; 61
     4d0:	fe b7       	in	r31, 0x3e	; 62
     4d2:	31 96       	adiw	r30, 0x01	; 1
     4d4:	24 e1       	ldi	r18, 0x14	; 20
     4d6:	32 e0       	ldi	r19, 0x02	; 2
     4d8:	ad b7       	in	r26, 0x3d	; 61
     4da:	be b7       	in	r27, 0x3e	; 62
     4dc:	12 96       	adiw	r26, 0x02	; 2
     4de:	3c 93       	st	X, r19
     4e0:	2e 93       	st	-X, r18
     4e2:	11 97       	sbiw	r26, 0x01	; 1
     4e4:	82 83       	std	Z+2, r24	; 0x02
     4e6:	13 82       	std	Z+3, r1	; 0x03
     4e8:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <printf>
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	0f 90       	pop	r0

		
	while(1)
		nrk_wait_until_next_period();
     4f4:	0e 94 43 1a 	call	0x3486	; 0x3486 <nrk_wait_until_next_period>
     4f8:	fd cf       	rjmp	.-6      	; 0x4f4 <Task1+0x56>

000004fa <spin_wait_ms>:
}

uint8_t spin_wait_ms(uint16_t t)
{
     4fa:	df 93       	push	r29
     4fc:	cf 93       	push	r28
     4fe:	00 d0       	rcall	.+0      	; 0x500 <spin_wait_ms+0x6>
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62

	// Counter seems to be going twice as fast?
	//y=t*2;
	// set the interrupt to trigger at a high value (i.e. don't let it fire)

	if(t>2) t=t-2;
     504:	83 30       	cpi	r24, 0x03	; 3
     506:	91 05       	cpc	r25, r1
     508:	08 f0       	brcs	.+2      	; 0x50c <spin_wait_ms+0x12>
     50a:	02 97       	sbiw	r24, 0x02	; 2
	TCCR2A = 0; // Start OS timer
     50c:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0;  // Start OS timer
     510:	10 92 b1 00 	sts	0x00B1, r1
	TCNT2=0;
     514:	10 92 b2 00 	sts	0x00B2, r1
	GTCCR |= BM(PSRASY);              // reset prescaler
     518:	23 b5       	in	r18, 0x23	; 35
     51a:	22 60       	ori	r18, 0x02	; 2
     51c:	23 bd       	out	0x23, r18	; 35
	GTCCR |= BM(PSRSYNC);
     51e:	23 b5       	in	r18, 0x23	; 35
     520:	21 60       	ori	r18, 0x01	; 1
     522:	23 bd       	out	0x23, r18	; 35
	//TCCR2A = 0; // Start OS timer
	//TCCR2A = BM(WGM21);
	TCCR2B = BM(CS21) | BM(CS20);  // Start OS timer
     524:	23 e0       	ldi	r18, 0x03	; 3
     526:	20 93 b1 00 	sts	0x00B1, r18
	//_nrk_os_timer_start();
	// spin on timer value
	while(1){ 
	x=(volatile)TCNT2;
     52a:	20 91 b2 00 	lds	r18, 0x00B2
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	3a 83       	std	Y+2, r19	; 0x02
     532:	29 83       	std	Y+1, r18	; 0x01
	//`printf( "Loop: T2=%d\r\n",TCNT2);
	if(x>t) break;
     534:	29 81       	ldd	r18, Y+1	; 0x01
     536:	3a 81       	ldd	r19, Y+2	; 0x02
     538:	82 17       	cp	r24, r18
     53a:	93 07       	cpc	r25, r19
     53c:	b0 f7       	brcc	.-20     	; 0x52a <spin_wait_ms+0x30>
	 } 
	TCCR2A = 0; 
     53e:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0;  
     542:	10 92 b1 00 	sts	0x00B1, r1
	TCNT2=0;
     546:	10 92 b2 00 	sts	0x00B2, r1
	nrk_spin_wait_us(2000);
     54a:	80 ed       	ldi	r24, 0xD0	; 208
     54c:	97 e0       	ldi	r25, 0x07	; 7
     54e:	0e 94 9e 20 	call	0x413c	; 0x413c <nrk_spin_wait_us>
	//printf( "%d\r\n",TCNT2);
}
     552:	0f 90       	pop	r0
     554:	0f 90       	pop	r0
     556:	cf 91       	pop	r28
     558:	df 91       	pop	r29
     55a:	08 95       	ret

0000055c <Task2>:

void Task2()
{
     55c:	4f 92       	push	r4
     55e:	5f 92       	push	r5
     560:	7f 92       	push	r7
     562:	8f 92       	push	r8
     564:	9f 92       	push	r9
     566:	af 92       	push	r10
     568:	bf 92       	push	r11
     56a:	cf 92       	push	r12
     56c:	df 92       	push	r13
     56e:	ef 92       	push	r14
     570:	ff 92       	push	r15
     572:	0f 93       	push	r16
     574:	1f 93       	push	r17
     576:	df 93       	push	r29
     578:	cf 93       	push	r28
     57a:	0f 92       	push	r0
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
	uint8_t f_high,f_low,f_default;
	uint16_t loop1,loop2,loop3,loop4;
	f_default = 8;

	// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
	ASSR = BM(AS2);
     580:	80 e2       	ldi	r24, 0x20	; 32
     582:	80 93 b6 00 	sts	0x00B6, r24
	OCR2A = 255; 
     586:	8f ef       	ldi	r24, 0xFF	; 255
     588:	80 93 b3 00 	sts	0x00B3, r24
	//OCR2B = 2;
	TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
     58c:	83 e0       	ldi	r24, 0x03	; 3
     58e:	87 bb       	out	0x17, r24	; 23
	TCCR2A = BM(WGM21);
     590:	92 e0       	ldi	r25, 0x02	; 2
     592:	90 93 b0 00 	sts	0x00B0, r25
	TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
     596:	80 93 b1 00 	sts	0x00B1, r24
	GTCCR |= BM(PSRASY);              // reset prescaler
     59a:	93 b5       	in	r25, 0x23	; 35
     59c:	92 60       	ori	r25, 0x02	; 2
     59e:	93 bd       	out	0x23, r25	; 35
	// Clear interrupt flag
	TIFR2 =   BM(OCF2A) | BM(TOV2);
     5a0:	87 bb       	out	0x17, r24	; 23
	// reset counter on interrupt, set divider to 128
	//TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00);
	// reset prescaler
	//GTCCR |= TSM;              
	GTCCR |= BM(PSRASY);              // reset prescaler
     5a2:	83 b5       	in	r24, 0x23	; 35
     5a4:	82 60       	ori	r24, 0x02	; 2
     5a6:	83 bd       	out	0x23, r24	; 35
	GTCCR |= BM(PSRSYNC);
     5a8:	83 b5       	in	r24, 0x23	; 35
     5aa:	81 60       	ori	r24, 0x01	; 1
     5ac:	83 bd       	out	0x23, r24	; 35

	_nrk_os_timer_stop();
     5ae:	0e 94 1f 21 	call	0x423e	; 0x423e <_nrk_os_timer_stop>


    printf( "My node's address is %d\r\n",VLC_ADDR);
     5b2:	00 d0       	rcall	.+0      	; 0x5b4 <Task2+0x58>
     5b4:	00 d0       	rcall	.+0      	; 0x5b6 <Task2+0x5a>
     5b6:	83 e2       	ldi	r24, 0x23	; 35
     5b8:	92 e0       	ldi	r25, 0x02	; 2
     5ba:	ad b7       	in	r26, 0x3d	; 61
     5bc:	be b7       	in	r27, 0x3e	; 62
     5be:	12 96       	adiw	r26, 0x02	; 2
     5c0:	9c 93       	st	X, r25
     5c2:	8e 93       	st	-X, r24
     5c4:	11 97       	sbiw	r26, 0x01	; 1
     5c6:	14 96       	adiw	r26, 0x04	; 4
     5c8:	1c 92       	st	X, r1
     5ca:	1e 92       	st	-X, r1
     5cc:	13 97       	sbiw	r26, 0x03	; 3
     5ce:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <printf>
	printf( "Task2 PID=%d\r\n",nrk_get_pid());
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <nrk_get_pid>
     5de:	00 d0       	rcall	.+0      	; 0x5e0 <Task2+0x84>
     5e0:	00 d0       	rcall	.+0      	; 0x5e2 <Task2+0x86>
     5e2:	ed b7       	in	r30, 0x3d	; 61
     5e4:	fe b7       	in	r31, 0x3e	; 62
     5e6:	31 96       	adiw	r30, 0x01	; 1
     5e8:	2d e3       	ldi	r18, 0x3D	; 61
     5ea:	32 e0       	ldi	r19, 0x02	; 2
     5ec:	ad b7       	in	r26, 0x3d	; 61
     5ee:	be b7       	in	r27, 0x3e	; 62
     5f0:	12 96       	adiw	r26, 0x02	; 2
     5f2:	3c 93       	st	X, r19
     5f4:	2e 93       	st	-X, r18
     5f6:	11 97       	sbiw	r26, 0x01	; 1
     5f8:	82 83       	std	Z+2, r24	; 0x02
     5fa:	13 82       	std	Z+3, r1	; 0x03
     5fc:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <printf>
	nrk_kprintf( PSTR("VLC address greated than total nodes\r\n"));
	nrk_led_set(RED_LED);	
	while(1);
	}

	nrk_int_enable(); 
     600:	0f 90       	pop	r0
     602:	0f 90       	pop	r0
     604:	0f 90       	pop	r0
     606:	0f 90       	pop	r0
     608:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <nrk_int_enable>
	val=nrk_timer_int_configure(NRK_APP_TIMER_0, 1, 800, &my_timer_callback );// this will give a 400HZ timer int
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	61 e0       	ldi	r22, 0x01	; 1
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	40 e2       	ldi	r20, 0x20	; 32
     614:	53 e0       	ldi	r21, 0x03	; 3
     616:	2b e1       	ldi	r18, 0x1B	; 27
     618:	32 e0       	ldi	r19, 0x02	; 2
     61a:	0e 94 a9 21 	call	0x4352	; 0x4352 <nrk_timer_int_configure>
	if(val==NRK_OK) nrk_kprintf( PSTR("Callback timer setup\r\n"));
     61e:	81 30       	cpi	r24, 0x01	; 1
     620:	19 f4       	brne	.+6      	; 0x628 <Task2+0xcc>
     622:	8e e6       	ldi	r24, 0x6E	; 110
     624:	91 e0       	ldi	r25, 0x01	; 1
     626:	02 c0       	rjmp	.+4      	; 0x62c <Task2+0xd0>
	else nrk_kprintf( PSTR("Error setting up timer callback\r\n"));
     628:	8c e4       	ldi	r24, 0x4C	; 76
     62a:	91 e0       	ldi	r25, 0x01	; 1
     62c:	0e 94 19 0a 	call	0x1432	; 0x1432 <nrk_kprintf>

	freq_f = f_default;
     630:	88 e0       	ldi	r24, 0x08	; 8
     632:	80 93 99 04 	sts	0x0499, r24
	nrk_timer_int_reset(NRK_APP_TIMER_0);
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	0e 94 8b 21 	call	0x4316	; 0x4316 <nrk_timer_int_reset>
	TCNT3 = 0;
     63c:	10 92 95 00 	sts	0x0095, r1
     640:	10 92 94 00 	sts	0x0094, r1
	nrk_timer_int_start(NRK_APP_TIMER_0);
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	0e 94 a0 21 	call	0x4340	; 0x4340 <nrk_timer_int_start>
	
	while(1)
	{
		freq_f = f_default;	
     64a:	e8 e0       	ldi	r30, 0x08	; 8
     64c:	be 2e       	mov	r11, r30
		//Waits to get #, this is to avoid the loop below getting stuck in case junk is received from serial port initially
		nrk_led_set(GREEN_LED);

		do {
		c=getchar();
		if(index==MSG_BUF_SIZE && c=='z' ) ready=1;//changed '\r' tp 'z'
     64e:	aa 24       	eor	r10, r10
     650:	a3 94       	inc	r10
				if(bcnt == 0)	//Let sync preamble length remain 1 symbol - so that preamble peak is clear
				{
				//		spin_wait_ms(33);
						//delayof 33ms				
						for(loop2=0;loop2<13;loop2++)
						printf("\r\nDummy printf for delay!!!!!!!!");//nrk_led_set(ORANGE_LED);
     652:	7c e4       	ldi	r23, 0x4C	; 76
     654:	47 2e       	mov	r4, r23
     656:	72 e0       	ldi	r23, 0x02	; 2
     658:	57 2e       	mov	r5, r23
				case 1://Send an ON - f2
					freq_f=f_low;
				break;
				default://Data bits
					//Send f2 of f_inf depending on bit
					bit = (tx_val>>(Nbits-1-bcnt))&0x01;//MSB first
     65a:	66 e2       	ldi	r22, 0x26	; 38
     65c:	86 2e       	mov	r8, r22
     65e:	91 2c       	mov	r9, r1
			
				switch(bcnt)
				{
				case 0:
					// preamble freq f1; 
					freq_f=2;
     660:	52 e0       	ldi	r21, 0x02	; 2
     662:	75 2e       	mov	r7, r21
				break;
				default://Data bits
					//Send f2 of f_inf depending on bit
					bit = (tx_val>>(Nbits-1-bcnt))&0x01;//MSB first
					if(bit==1)
						freq_f = f_low;
     664:	43 e0       	ldi	r20, 0x03	; 3
     666:	c4 2e       	mov	r12, r20
	TCNT3 = 0;
	nrk_timer_int_start(NRK_APP_TIMER_0);
	
	while(1)
	{
		freq_f = f_default;	
     668:	b0 92 99 04 	sts	0x0499, r11
//		nrk_led_clr(ORANGE_LED);
	//	PORTF = 0x0;

		index=0;
		ready=0;
		f_toggle=0;
     66c:	10 92 98 04 	sts	0x0498, r1

		
		// Polling UART receive to avoid timing overhead of using signals (up to 1ms)
		do{
		c = getchar();
     670:	80 91 68 09 	lds	r24, 0x0968
     674:	90 91 69 09 	lds	r25, 0x0969
     678:	0e 94 c2 2d 	call	0x5b84	; 0x5b84 <fgetc>
		}while(c!='#');
     67c:	83 32       	cpi	r24, 0x23	; 35
     67e:	c1 f7       	brne	.-16     	; 0x670 <Task2+0x114>
		//Waits to get #, this is to avoid the loop below getting stuck in case junk is received from serial port initially
		nrk_led_set(GREEN_LED);
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <nrk_led_set>
		//cree nrk_timer_int_stop(NRK_APP_TIMER_0);
		// turn off LED
//		nrk_led_clr(ORANGE_LED);
	//	PORTF = 0x0;

		index=0;
     688:	00 e0       	ldi	r16, 0x00	; 0
		}while(c!='#');
		//Waits to get #, this is to avoid the loop below getting stuck in case junk is received from serial port initially
		nrk_led_set(GREEN_LED);

		do {
		c=getchar();
     68a:	80 91 68 09 	lds	r24, 0x0968
     68e:	90 91 69 09 	lds	r25, 0x0969
     692:	0e 94 c2 2d 	call	0x5b84	; 0x5b84 <fgetc>
     696:	28 2f       	mov	r18, r24
		if(index==MSG_BUF_SIZE && c=='z' ) ready=1;//changed '\r' tp 'z'
     698:	03 30       	cpi	r16, 0x03	; 3
     69a:	11 f4       	brne	.+4      	; 0x6a0 <Task2+0x144>
     69c:	8a 37       	cpi	r24, 0x7A	; 122
     69e:	51 f0       	breq	.+20     	; 0x6b4 <Task2+0x158>
		else msg_buf[index]=c;	
     6a0:	e0 2f       	mov	r30, r16
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	e2 53       	subi	r30, 0x32	; 50
     6a6:	f9 4f       	sbci	r31, 0xF9	; 249
     6a8:	20 83       	st	Z, r18
		if(index<MSG_BUF_SIZE) index++;
     6aa:	03 30       	cpi	r16, 0x03	; 3
     6ac:	28 f4       	brcc	.+10     	; 0x6b8 <Task2+0x15c>
     6ae:	0f 5f       	subi	r16, 0xFF	; 255
     6b0:	10 e0       	ldi	r17, 0x00	; 0
     6b2:	0a c0       	rjmp	.+20     	; 0x6c8 <Task2+0x16c>
		//Waits to get #, this is to avoid the loop below getting stuck in case junk is received from serial port initially
		nrk_led_set(GREEN_LED);

		do {
		c=getchar();
		if(index==MSG_BUF_SIZE && c=='z' ) ready=1;//changed '\r' tp 'z'
     6b4:	11 e0       	ldi	r17, 0x01	; 1
     6b6:	01 c0       	rjmp	.+2      	; 0x6ba <Task2+0x15e>
		else msg_buf[index]=c;	
		if(index<MSG_BUF_SIZE) index++;
     6b8:	10 e0       	ldi	r17, 0x00	; 0
		else  { index=0; nrk_led_set(RED_LED); }
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	29 83       	std	Y+1, r18	; 0x01
     6c0:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <nrk_led_set>
     6c4:	00 e0       	ldi	r16, 0x00	; 0
     6c6:	29 81       	ldd	r18, Y+1	; 0x01
		if(c=='z' && ready==0) { index=0; nrk_led_set(RED_LED);  }
     6c8:	2a 37       	cpi	r18, 0x7A	; 122
     6ca:	29 f4       	brne	.+10     	; 0x6d6 <Task2+0x17a>
     6cc:	11 23       	and	r17, r17
     6ce:	29 f4       	brne	.+10     	; 0x6da <Task2+0x17e>
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	d7 cf       	rjmp	.-82     	; 0x684 <Task2+0x128>
		} while(!ready);
     6d6:	11 23       	and	r17, r17
     6d8:	c1 f2       	breq	.-80     	; 0x68a <Task2+0x12e>
		nrk_led_clr(RED_LED);
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <nrk_led_clr>
		nrk_led_clr(GREEN_LED);
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <nrk_led_clr>
		OCR3AL = 100;
		// Zero the timer...
		// Start the timer...
		nrk_timer_int_start(NRK_APP_TIMER_0);
*/ //cree
		led_active=1;		
     6ea:	a0 92 a3 04 	sts	0x04A3, r10
		nrk_led_toggle(BLUE_LED);
     6ee:	83 e0       	ldi	r24, 0x03	; 3
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <nrk_led_toggle>
//		_nrk_os_timer_reset();
//		nrk_wait_until_ticks(33);

		// It might be safer to call wait_until_next_period() except that it won't be phase-aligned between boards
		// nrk_wait_until_next_period();
		if(msg_buf[0]==200)	//To keep the light ON constant for 30 seconds, just send decimal 200 in the first byte; 
     6f6:	80 91 ce 06 	lds	r24, 0x06CE
     6fa:	88 3c       	cpi	r24, 0xC8	; 200
     6fc:	51 f4       	brne	.+20     	; 0x712 <Task2+0x1b6>
					//Since we are using only values 1-10 for the frequencies, using 200 as an identifier should be fine
		{
			freq_f = f_low; //We want the light ON at constant luminosity. Duty cycle matching has been done. 
     6fe:	c0 92 99 04 	sts	0x0499, r12
     702:	18 ec       	ldi	r17, 0xC8	; 200
					//So the freq does not matter. Just keep it constant
			//_nrk_os_timer_reset();
			//nrk_wait_until_ticks(30000);
			for(k=0; k<200; k++ ) spin_wait_ms(100);
     704:	84 e6       	ldi	r24, 0x64	; 100
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	0e 94 7d 02 	call	0x4fa	; 0x4fa <spin_wait_ms>
     70c:	11 50       	subi	r17, 0x01	; 1
     70e:	d1 f7       	brne	.-12     	; 0x704 <Task2+0x1a8>
     710:	ab cf       	rjmp	.-170    	; 0x668 <Task2+0x10c>
//		_nrk_os_timer_reset();
//		nrk_wait_until_ticks(33);

		// It might be safer to call wait_until_next_period() except that it won't be phase-aligned between boards
		// nrk_wait_until_next_period();
		if(msg_buf[0]==200)	//To keep the light ON constant for 30 seconds, just send decimal 200 in the first byte; 
     712:	07 e0       	ldi	r16, 0x07	; 7
     714:	10 e0       	ldi	r17, 0x00	; 0
     716:	dd 24       	eor	r13, r13
		{
			// Send data...	
			for(bcnt=0; bcnt<Nbits; bcnt++ )
			{	
			
				switch(bcnt)
     718:	dd 20       	and	r13, r13
     71a:	21 f0       	breq	.+8      	; 0x724 <Task2+0x1c8>
     71c:	bd 2d       	mov	r27, r13
     71e:	b1 30       	cpi	r27, 0x01	; 1
     720:	39 f4       	brne	.+14     	; 0x730 <Task2+0x1d4>
     722:	03 c0       	rjmp	.+6      	; 0x72a <Task2+0x1ce>
				{
				case 0:
					// preamble freq f1; 
					freq_f=2;
     724:	70 92 99 04 	sts	0x0499, r7
     728:	17 c0       	rjmp	.+46     	; 0x758 <Task2+0x1fc>
				break;
				case 1://Send an ON - f2
					freq_f=f_low;
     72a:	c0 92 99 04 	sts	0x0499, r12
     72e:	10 c0       	rjmp	.+32     	; 0x750 <Task2+0x1f4>
				break;
				default://Data bits
					//Send f2 of f_inf depending on bit
					bit = (tx_val>>(Nbits-1-bcnt))&0x01;//MSB first
     730:	c4 01       	movw	r24, r8
     732:	00 2e       	mov	r0, r16
     734:	02 c0       	rjmp	.+4      	; 0x73a <Task2+0x1de>
     736:	95 95       	asr	r25
     738:	87 95       	ror	r24
     73a:	0a 94       	dec	r0
     73c:	e2 f7       	brpl	.-8      	; 0x736 <Task2+0x1da>
					if(bit==1)
     73e:	80 ff       	sbrs	r24, 0
     740:	03 c0       	rjmp	.+6      	; 0x748 <Task2+0x1ec>
						freq_f = f_low;
     742:	c0 92 99 04 	sts	0x0499, r12
     746:	02 c0       	rjmp	.+4      	; 0x74c <Task2+0x1f0>
					else
						freq_f = f_high;
     748:	b0 92 99 04 	sts	0x0499, r11
//				printf("\r\nFreq %d",freq_f);
				// It might be safer to call wait_until_next_period() except that 
				// it won't be phase-aligned between boards
				//nrk_wait_until_next_period();
				//_nrk_os_timer_reset();
				if(bcnt == 0)	//Let sync preamble length remain 1 symbol - so that preamble peak is clear
     74c:	dd 20       	and	r13, r13
     74e:	21 f0       	breq	.+8      	; 0x758 <Task2+0x1fc>
				{
				//		spin_wait_ms(33);
						//delayof 33ms				
						for(loop2=0;loop2<13;loop2++)
     750:	3d e0       	ldi	r19, 0x0D	; 13
     752:	e3 2e       	mov	r14, r19
     754:	f1 2c       	mov	r15, r1
     756:	27 c0       	rjmp	.+78     	; 0x7a6 <Task2+0x24a>
//		_nrk_os_timer_reset();
//		nrk_wait_until_ticks(33);

		// It might be safer to call wait_until_next_period() except that it won't be phase-aligned between boards
		// nrk_wait_until_next_period();
		if(msg_buf[0]==200)	//To keep the light ON constant for 30 seconds, just send decimal 200 in the first byte; 
     758:	2d e0       	ldi	r18, 0x0D	; 13
     75a:	e2 2e       	mov	r14, r18
     75c:	f1 2c       	mov	r15, r1
				if(bcnt == 0)	//Let sync preamble length remain 1 symbol - so that preamble peak is clear
				{
				//		spin_wait_ms(33);
						//delayof 33ms				
						for(loop2=0;loop2<13;loop2++)
						printf("\r\nDummy printf for delay!!!!!!!!");//nrk_led_set(ORANGE_LED);
     75e:	00 d0       	rcall	.+0      	; 0x760 <Task2+0x204>
     760:	ed b7       	in	r30, 0x3d	; 61
     762:	fe b7       	in	r31, 0x3e	; 62
     764:	52 82       	std	Z+2, r5	; 0x02
     766:	41 82       	std	Z+1, r4	; 0x01
     768:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <printf>
     76c:	08 94       	sec
     76e:	e1 08       	sbc	r14, r1
     770:	f1 08       	sbc	r15, r1
				//_nrk_os_timer_reset();
				if(bcnt == 0)	//Let sync preamble length remain 1 symbol - so that preamble peak is clear
				{
				//		spin_wait_ms(33);
						//delayof 33ms				
						for(loop2=0;loop2<13;loop2++)
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	e1 14       	cp	r14, r1
     778:	f1 04       	cpc	r15, r1
     77a:	89 f7       	brne	.-30     	; 0x75e <Task2+0x202>
     77c:	9d e0       	ldi	r25, 0x0D	; 13
     77e:	e9 2e       	mov	r14, r25
     780:	f1 2c       	mov	r15, r1
						printf("\r\nDummy printf for delay!!!!!!!!");//nrk_led_set(ORANGE_LED);
						for(loop2=0;loop2<13;loop2++)
						printf("\r\nDummy printf for delay!!!!!!!!");//nrk_led_clr(ORANGE_LED);
     782:	00 d0       	rcall	.+0      	; 0x784 <Task2+0x228>
     784:	ad b7       	in	r26, 0x3d	; 61
     786:	be b7       	in	r27, 0x3e	; 62
     788:	12 96       	adiw	r26, 0x02	; 2
     78a:	5c 92       	st	X, r5
     78c:	4e 92       	st	-X, r4
     78e:	11 97       	sbiw	r26, 0x01	; 1
     790:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <printf>
     794:	08 94       	sec
     796:	e1 08       	sbc	r14, r1
     798:	f1 08       	sbc	r15, r1
				{
				//		spin_wait_ms(33);
						//delayof 33ms				
						for(loop2=0;loop2<13;loop2++)
						printf("\r\nDummy printf for delay!!!!!!!!");//nrk_led_set(ORANGE_LED);
						for(loop2=0;loop2<13;loop2++)
     79a:	0f 90       	pop	r0
     79c:	0f 90       	pop	r0
     79e:	e1 14       	cp	r14, r1
     7a0:	f1 04       	cpc	r15, r1
     7a2:	79 f7       	brne	.-34     	; 0x782 <Task2+0x226>
     7a4:	23 c0       	rjmp	.+70     	; 0x7ec <Task2+0x290>
				else		//Vary the symbol length. Set to 33 for symvol length = 1 frame length
				{	
				//		spin_wait_ms(SYMBOL_LEN);	
						//delay of 33ms								
						for(loop2=0;loop2<13;loop2++)
						printf("\r\nDummy printf for delay!!!!!!!!");//nrk_led_set(ORANGE_LED);
     7a6:	00 d0       	rcall	.+0      	; 0x7a8 <Task2+0x24c>
     7a8:	ed b7       	in	r30, 0x3d	; 61
     7aa:	fe b7       	in	r31, 0x3e	; 62
     7ac:	52 82       	std	Z+2, r5	; 0x02
     7ae:	41 82       	std	Z+1, r4	; 0x01
     7b0:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <printf>
     7b4:	08 94       	sec
     7b6:	e1 08       	sbc	r14, r1
     7b8:	f1 08       	sbc	r15, r1
				}	
				else		//Vary the symbol length. Set to 33 for symvol length = 1 frame length
				{	
				//		spin_wait_ms(SYMBOL_LEN);	
						//delay of 33ms								
						for(loop2=0;loop2<13;loop2++)
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	e1 14       	cp	r14, r1
     7c0:	f1 04       	cpc	r15, r1
     7c2:	89 f7       	brne	.-30     	; 0x7a6 <Task2+0x24a>
     7c4:	8d e0       	ldi	r24, 0x0D	; 13
     7c6:	e8 2e       	mov	r14, r24
     7c8:	f1 2c       	mov	r15, r1
						printf("\r\nDummy printf for delay!!!!!!!!");//nrk_led_set(ORANGE_LED);
						for(loop2=0;loop2<13;loop2++)
						printf("\r\nDummy printf for delay!!!!!!!!");//nrk_led_clr(ORANGE_LED);
     7ca:	00 d0       	rcall	.+0      	; 0x7cc <Task2+0x270>
     7cc:	ad b7       	in	r26, 0x3d	; 61
     7ce:	be b7       	in	r27, 0x3e	; 62
     7d0:	12 96       	adiw	r26, 0x02	; 2
     7d2:	5c 92       	st	X, r5
     7d4:	4e 92       	st	-X, r4
     7d6:	11 97       	sbiw	r26, 0x01	; 1
     7d8:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <printf>
     7dc:	08 94       	sec
     7de:	e1 08       	sbc	r14, r1
     7e0:	f1 08       	sbc	r15, r1
				{	
				//		spin_wait_ms(SYMBOL_LEN);	
						//delay of 33ms								
						for(loop2=0;loop2<13;loop2++)
						printf("\r\nDummy printf for delay!!!!!!!!");//nrk_led_set(ORANGE_LED);
						for(loop2=0;loop2<13;loop2++)
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
     7e6:	e1 14       	cp	r14, r1
     7e8:	f1 04       	cpc	r15, r1
     7ea:	79 f7       	brne	.-34     	; 0x7ca <Task2+0x26e>
			for(k=0; k<200; k++ ) spin_wait_ms(100);
		}
		else
		{
			// Send data...	
			for(bcnt=0; bcnt<Nbits; bcnt++ )
     7ec:	d3 94       	inc	r13
     7ee:	01 50       	subi	r16, 0x01	; 1
     7f0:	10 40       	sbci	r17, 0x00	; 0
     7f2:	bd 2d       	mov	r27, r13
     7f4:	b8 30       	cpi	r27, 0x08	; 8
     7f6:	09 f0       	breq	.+2      	; 0x7fa <Task2+0x29e>
     7f8:	8f cf       	rjmp	.-226    	; 0x718 <Task2+0x1bc>
     7fa:	36 cf       	rjmp	.-404    	; 0x668 <Task2+0x10c>

000007fc <nrk_create_taskset>:
  TaskOne.cpu_reserve.nano_secs = 50*NANOS_PER_MS;//50
  TaskOne.offset.secs = 0;
  TaskOne.offset.nano_secs= 0;
  nrk_activate_task (&TaskOne);
*/
  TaskTwo.task = Task2;
     7fc:	8e ea       	ldi	r24, 0xAE	; 174
     7fe:	92 e0       	ldi	r25, 0x02	; 2
     800:	90 93 df 07 	sts	0x07DF, r25
     804:	80 93 de 07 	sts	0x07DE, r24
  TaskTwo.Ptos = (void *) &Stack2[NRK_APP_STACKSIZE];
     808:	88 ec       	ldi	r24, 0xC8	; 200
     80a:	95 e0       	ldi	r25, 0x05	; 5
     80c:	90 93 db 07 	sts	0x07DB, r25
     810:	80 93 da 07 	sts	0x07DA, r24
  TaskTwo.Pbos = (void *) &Stack2[0];
     814:	88 ec       	ldi	r24, 0xC8	; 200
     816:	94 e0       	ldi	r25, 0x04	; 4
     818:	90 93 dd 07 	sts	0x07DD, r25
     81c:	80 93 dc 07 	sts	0x07DC, r24
  TaskTwo.prio = 2;
     820:	82 e0       	ldi	r24, 0x02	; 2
     822:	80 93 e1 07 	sts	0x07E1, r24
  TaskTwo.FirstActivation = TRUE;
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	80 93 e0 07 	sts	0x07E0, r24
  TaskTwo.Type = BASIC_TASK;
     82c:	80 93 e2 07 	sts	0x07E2, r24
  TaskTwo.SchType = PREEMPTIVE;
     830:	80 93 e3 07 	sts	0x07E3, r24
  TaskTwo.period.secs = 0;
     834:	10 92 e4 07 	sts	0x07E4, r1
     838:	10 92 e5 07 	sts	0x07E5, r1
     83c:	10 92 e6 07 	sts	0x07E6, r1
     840:	10 92 e7 07 	sts	0x07E7, r1
  //TaskTwo.period.nano_secs = 0;//*NANOS_PER_MS;
  TaskTwo.period.nano_secs = 0;//67
     844:	10 92 e8 07 	sts	0x07E8, r1
     848:	10 92 e9 07 	sts	0x07E9, r1
     84c:	10 92 ea 07 	sts	0x07EA, r1
     850:	10 92 eb 07 	sts	0x07EB, r1
  // Disable reserves
  TaskTwo.cpu_reserve.secs = 0;
     854:	10 92 ec 07 	sts	0x07EC, r1
     858:	10 92 ed 07 	sts	0x07ED, r1
     85c:	10 92 ee 07 	sts	0x07EE, r1
     860:	10 92 ef 07 	sts	0x07EF, r1
  TaskTwo.cpu_reserve.nano_secs = 0;
     864:	10 92 f0 07 	sts	0x07F0, r1
     868:	10 92 f1 07 	sts	0x07F1, r1
     86c:	10 92 f2 07 	sts	0x07F2, r1
     870:	10 92 f3 07 	sts	0x07F3, r1
  TaskTwo.offset.secs = 0;
     874:	10 92 f4 07 	sts	0x07F4, r1
     878:	10 92 f5 07 	sts	0x07F5, r1
     87c:	10 92 f6 07 	sts	0x07F6, r1
     880:	10 92 f7 07 	sts	0x07F7, r1
  TaskTwo.offset.nano_secs= 0;
     884:	10 92 f8 07 	sts	0x07F8, r1
     888:	10 92 f9 07 	sts	0x07F9, r1
     88c:	10 92 fa 07 	sts	0x07FA, r1
     890:	10 92 fb 07 	sts	0x07FB, r1
  nrk_activate_task (&TaskTwo);
     894:	89 ed       	ldi	r24, 0xD9	; 217
     896:	97 e0       	ldi	r25, 0x07	; 7
     898:	0e 94 7f 18 	call	0x30fe	; 0x30fe <nrk_activate_task>
  nrk_activate_task (&TaskThree);*/




}
     89c:	08 95       	ret

0000089e <main>:

int main ()
{
  uint8_t t;
  
  nrk_setup_ports();
     89e:	0e 94 36 0a 	call	0x146c	; 0x146c <nrk_setup_ports>
  nrk_setup_uart(UART_BAUDRATE_115K2);
     8a2:	80 e1       	ldi	r24, 0x10	; 16
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <nrk_setup_uart>
  
  DDRF = 0xff;
     8aa:	8f ef       	ldi	r24, 0xFF	; 255
     8ac:	80 bb       	out	0x10, r24	; 16
  DDRB = 0xff;	
     8ae:	84 b9       	out	0x04, r24	; 4
  nrk_kprintf( PSTR("Starting up...\r\n") );
     8b0:	85 e8       	ldi	r24, 0x85	; 133
     8b2:	91 e0       	ldi	r25, 0x01	; 1
     8b4:	0e 94 19 0a 	call	0x1432	; 0x1432 <nrk_kprintf>

  Task2();
     8b8:	0e 94 ae 02 	call	0x55c	; 0x55c <Task2>

  nrk_init();
     8bc:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <nrk_init>

 
  nrk_time_set(0,0);
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	cb 01       	movw	r24, r22
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	a9 01       	movw	r20, r18
     8cc:	0e 94 47 1c 	call	0x388e	; 0x388e <nrk_time_set>
  nrk_create_taskset ();
     8d0:	0e 94 fe 03 	call	0x7fc	; 0x7fc <nrk_create_taskset>
  nrk_start();
     8d4:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <nrk_start>
  return 0;
}
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	08 95       	ret

000008de <rf_cmd>:


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     8de:	90 91 41 01 	lds	r25, 0x0141
     8e2:	9f 71       	andi	r25, 0x1F	; 31
     8e4:	9f 31       	cpi	r25, 0x1F	; 31
     8e6:	d9 f3       	breq	.-10     	; 0x8de <rf_cmd>
		continue;
	TRX_STATE = cmd;
     8e8:	80 93 42 01 	sts	0x0142, r24
}
     8ec:	08 95       	ret

000008ee <rf_enable_glossy>:



void rf_enable_glossy()
{
	use_glossy = 1;
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	80 93 02 08 	sts	0x0802, r24
}
     8f4:	08 95       	ret

000008f6 <rf_disable_glossy>:

void rf_disable_glossy()
{
	use_glossy = 0;
     8f6:	10 92 02 08 	sts	0x0802, r1
}
     8fa:	08 95       	ret

000008fc <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     8fc:	80 91 41 01 	lds	r24, 0x0141
     900:	8f 71       	andi	r24, 0x1F	; 31
     902:	8f 31       	cpi	r24, 0x1F	; 31
     904:	d9 f3       	breq	.-10     	; 0x8fc <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
     906:	80 91 41 01 	lds	r24, 0x0141
     90a:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
     90c:	d1 f0       	breq	.+52     	; 0x942 <rf_power_down+0x46>
     90e:	8f 30       	cpi	r24, 0x0F	; 15
     910:	c1 f0       	breq	.+48     	; 0x942 <rf_power_down+0x46>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
     912:	80 91 41 01 	lds	r24, 0x0141
     916:	8f 71       	andi	r24, 0x1F	; 31
     918:	88 30       	cpi	r24, 0x08	; 8
     91a:	41 f0       	breq	.+16     	; 0x92c <rf_power_down+0x30>
		rf_cmd(TRX_OFF);
     91c:	88 e0       	ldi	r24, 0x08	; 8
     91e:	0e 94 6f 04 	call	0x8de	; 0x8de <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
     922:	80 91 41 01 	lds	r24, 0x0141
     926:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
     928:	88 30       	cpi	r24, 0x08	; 8
     92a:	d9 f7       	brne	.-10     	; 0x922 <rf_power_down+0x26>
	}

	TRXPR |= (1 << SLPTR);
     92c:	80 91 39 01 	lds	r24, 0x0139
     930:	82 60       	ori	r24, 0x02	; 2
     932:	80 93 39 01 	sts	0x0139, r24
	do{
		status = (TRX_STATUS & 0x1F);
     936:	80 91 41 01 	lds	r24, 0x0141
     93a:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
     93c:	11 f0       	breq	.+4      	; 0x942 <rf_power_down+0x46>
     93e:	8f 30       	cpi	r24, 0x0F	; 15
     940:	d1 f7       	brne	.-12     	; 0x936 <rf_power_down+0x3a>
     942:	08 95       	ret

00000944 <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     944:	80 91 41 01 	lds	r24, 0x0141
     948:	8f 71       	andi	r24, 0x1F	; 31
     94a:	8f 31       	cpi	r24, 0x1F	; 31
     94c:	d9 f3       	breq	.-10     	; 0x944 <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
     94e:	80 91 41 01 	lds	r24, 0x0141
     952:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
     954:	11 f0       	breq	.+4      	; 0x95a <rf_power_up+0x16>
     956:	8f 30       	cpi	r24, 0x0F	; 15
     958:	51 f4       	brne	.+20     	; 0x96e <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
     95a:	80 91 39 01 	lds	r24, 0x0139
     95e:	8d 7f       	andi	r24, 0xFD	; 253
     960:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
     964:	80 91 41 01 	lds	r24, 0x0141
     968:	8f 71       	andi	r24, 0x1F	; 31
     96a:	88 30       	cpi	r24, 0x08	; 8
     96c:	d9 f7       	brne	.-10     	; 0x964 <rf_power_up+0x20>
     96e:	08 95       	ret

00000970 <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
     970:	e5 e4       	ldi	r30, 0x45	; 69
     972:	f1 e0       	ldi	r31, 0x01	; 1
     974:	90 81       	ld	r25, Z
     976:	90 7f       	andi	r25, 0xF0	; 240
     978:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
     97a:	90 81       	ld	r25, Z
     97c:	8f 70       	andi	r24, 0x0F	; 15
     97e:	89 2b       	or	r24, r25
     980:	80 83       	st	Z, r24
}
     982:	08 95       	ret

00000984 <rf_addr_decode_enable>:

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
     984:	e7 e5       	ldi	r30, 0x57	; 87
     986:	f1 e0       	ldi	r31, 0x01	; 1
     988:	80 81       	ld	r24, Z
     98a:	8d 7f       	andi	r24, 0xFD	; 253
     98c:	80 83       	st	Z, r24
}
     98e:	08 95       	ret

00000990 <rf_addr_decode_disable>:


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
     990:	e7 e5       	ldi	r30, 0x57	; 87
     992:	f1 e0       	ldi	r31, 0x01	; 1
     994:	80 81       	ld	r24, Z
     996:	82 60       	ori	r24, 0x02	; 2
     998:	80 83       	st	Z, r24
}
     99a:	08 95       	ret

0000099c <rf_auto_ack_enable>:


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
     99c:	ee e6       	ldi	r30, 0x6E	; 110
     99e:	f1 e0       	ldi	r31, 0x01	; 1
     9a0:	80 81       	ld	r24, Z
     9a2:	8f 7e       	andi	r24, 0xEF	; 239
     9a4:	80 83       	st	Z, r24
}
     9a6:	08 95       	ret

000009a8 <rf_auto_ack_disable>:

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
     9a8:	ee e6       	ldi	r30, 0x6E	; 110
     9aa:	f1 e0       	ldi	r31, 0x01	; 1
     9ac:	80 81       	ld	r24, Z
     9ae:	80 61       	ori	r24, 0x10	; 16
     9b0:	80 83       	st	Z, r24
}
     9b2:	08 95       	ret

000009b4 <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
     9b4:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
     9b8:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
     9bc:	90 93 0c 08 	sts	0x080C, r25
     9c0:	80 93 0b 08 	sts	0x080B, r24
}
     9c4:	08 95       	ret

000009c6 <rf_set_rx>:


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
     9c6:	90 93 06 08 	sts	0x0806, r25
     9ca:	80 93 05 08 	sts	0x0805, r24
	PHY_CC_CCA &= ~(0x1F);
     9ce:	e8 e4       	ldi	r30, 0x48	; 72
     9d0:	f1 e0       	ldi	r31, 0x01	; 1
     9d2:	80 81       	ld	r24, Z
     9d4:	80 7e       	andi	r24, 0xE0	; 224
     9d6:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
     9d8:	80 81       	ld	r24, Z
     9da:	68 2b       	or	r22, r24
     9dc:	60 83       	st	Z, r22
}
     9de:	08 95       	ret

000009e0 <rx_start_callback>:

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
     9e0:	90 93 9b 04 	sts	0x049B, r25
     9e4:	80 93 9a 04 	sts	0x049A, r24
}
     9e8:	08 95       	ret

000009ea <rx_end_callback>:

void rx_end_callback(void (*func)(void)){
	rx_end_func = func;
     9ea:	90 93 9d 04 	sts	0x049D, r25
     9ee:	80 93 9c 04 	sts	0x049C, r24
}
     9f2:	08 95       	ret

000009f4 <rf_init>:


void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
     9f4:	1f 93       	push	r17

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
     9f6:	70 e2       	ldi	r23, 0x20	; 32
     9f8:	70 93 44 01 	sts	0x0144, r23
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
     9fc:	70 ec       	ldi	r23, 0xC0	; 192
     9fe:	70 93 45 01 	sts	0x0145, r23
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
     a02:	60 62       	ori	r22, 0x20	; 32
     a04:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
     a08:	65 ec       	ldi	r22, 0xC5	; 197
     a0a:	60 93 49 01 	sts	0x0149, r22
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
     a0e:	67 ea       	ldi	r22, 0xA7	; 167
     a10:	60 93 4b 01 	sts	0x014B, r22
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
     a14:	60 e8       	ldi	r22, 0x80	; 128
     a16:	60 93 4c 01 	sts	0x014C, r22
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
     a1a:	20 93 60 01 	sts	0x0160, r18
     a1e:	30 93 61 01 	sts	0x0161, r19
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
     a22:	40 93 62 01 	sts	0x0162, r20
     a26:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     a2a:	e6 e4       	ldi	r30, 0x46	; 70
     a2c:	f1 e0       	ldi	r31, 0x01	; 1
     a2e:	10 81       	ld	r17, Z
     a30:	a0 81       	ld	r26, Z
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
     a32:	60 81       	ld	r22, Z
     a34:	70 81       	ld	r23, Z
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     a36:	12 95       	swap	r17
     a38:	16 95       	lsr	r17
     a3a:	17 70       	andi	r17, 0x07	; 7
     a3c:	12 95       	swap	r17
     a3e:	11 0f       	add	r17, r17
     a40:	11 0f       	add	r17, r17
     a42:	10 7c       	andi	r17, 0xC0	; 192
     a44:	72 95       	swap	r23
     a46:	76 95       	lsr	r23
     a48:	73 70       	andi	r23, 0x03	; 3
     a4a:	17 2b       	or	r17, r23
     a4c:	a2 95       	swap	r26
     a4e:	a6 95       	lsr	r26
     a50:	a7 70       	andi	r26, 0x07	; 7
     a52:	b0 e0       	ldi	r27, 0x00	; 0
     a54:	a3 70       	andi	r26, 0x03	; 3
     a56:	b0 70       	andi	r27, 0x00	; 0
     a58:	74 e0       	ldi	r23, 0x04	; 4
     a5a:	aa 0f       	add	r26, r26
     a5c:	bb 1f       	adc	r27, r27
     a5e:	7a 95       	dec	r23
     a60:	e1 f7       	brne	.-8      	; 0xa5a <rf_init+0x66>
     a62:	1a 2b       	or	r17, r26
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
     a64:	62 95       	swap	r22
     a66:	66 95       	lsr	r22
     a68:	67 70       	andi	r22, 0x07	; 7
     a6a:	70 e0       	ldi	r23, 0x00	; 0
     a6c:	63 70       	andi	r22, 0x03	; 3
     a6e:	70 70       	andi	r23, 0x00	; 0
     a70:	66 0f       	add	r22, r22
     a72:	77 1f       	adc	r23, r23
     a74:	66 0f       	add	r22, r22
     a76:	77 1f       	adc	r23, r23
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     a78:	16 2b       	or	r17, r22
     a7a:	10 93 6d 01 	sts	0x016D, r17
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
     a7e:	60 81       	ld	r22, Z
     a80:	e0 81       	ld	r30, Z
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
     a82:	e2 95       	swap	r30
     a84:	e6 95       	lsr	r30
     a86:	e3 70       	andi	r30, 0x03	; 3
     a88:	e0 64       	ori	r30, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
     a8a:	62 95       	swap	r22
     a8c:	66 95       	lsr	r22
     a8e:	67 70       	andi	r22, 0x07	; 7
     a90:	70 e0       	ldi	r23, 0x00	; 0
     a92:	63 70       	andi	r22, 0x03	; 3
     a94:	70 70       	andi	r23, 0x00	; 0
     a96:	66 0f       	add	r22, r22
     a98:	77 1f       	adc	r23, r23
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
     a9a:	e6 2b       	or	r30, r22
     a9c:	e0 93 6e 01 	sts	0x016E, r30
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
     aa0:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
	/* Enable radio interrupts */
	IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
     aa4:	6f ef       	ldi	r22, 0xFF	; 255
     aa6:	60 93 4e 01 	sts	0x014E, r22
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN);

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
     aaa:	90 93 06 08 	sts	0x0806, r25
     aae:	80 93 05 08 	sts	0x0805, r24
	rfSettings.txSeqNumber = 0;
     ab2:	10 92 07 08 	sts	0x0807, r1
	rfSettings.ackReceived = 0;
     ab6:	10 92 08 08 	sts	0x0808, r1
	rfSettings.panId = panId;
     aba:	50 93 0a 08 	sts	0x080A, r21
     abe:	40 93 09 08 	sts	0x0809, r20
	rfSettings.myAddr = myAddr;
     ac2:	30 93 0c 08 	sts	0x080C, r19
     ac6:	20 93 0b 08 	sts	0x080B, r18
	rfSettings.receiveOn = 0;
     aca:	10 92 0d 08 	sts	0x080D, r1

	rf_ready = 1;
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	80 93 27 08 	sts	0x0827, r24
	rx_ready = 0;
     ad4:	10 92 46 08 	sts	0x0846, r1
	tx_done = 0;
     ad8:	10 92 16 08 	sts	0x0816, r1

	use_glossy = 0;
     adc:	10 92 02 08 	sts	0x0802, r1

} // rf_init() 
     ae0:	1f 91       	pop	r17
     ae2:	08 95       	ret

00000ae4 <rf_rx_on>:
	rf_cc2591_rx_on();
#endif
#ifdef GLOSSY_TESTING
	clear_packet_flags();
#endif
	rf_cmd(RX_AACK_ON);
     ae4:	86 e1       	ldi	r24, 0x16	; 22
     ae6:	0e 94 6f 04 	call	0x8de	; 0x8de <rf_cmd>
}
     aea:	08 95       	ret

00000aec <rf_polling_rx_on>:

#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	rf_cmd(RX_AACK_ON);
     aec:	86 e1       	ldi	r24, 0x16	; 22
     aee:	0e 94 6f 04 	call	0x8de	; 0x8de <rf_cmd>
}
     af2:	08 95       	ret

00000af4 <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
	rf_cmd(TRX_OFF);
     af4:	88 e0       	ldi	r24, 0x08	; 8
     af6:	0e 94 6f 04 	call	0x8de	; 0x8de <rf_cmd>
	rx_ready = 0;
     afa:	10 92 46 08 	sts	0x0846, r1
}
     afe:	08 95       	ret

00000b00 <rf_tx_packet_repeat>:
uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
}

uint8_t rf_tx_packet_repeat(RF_TX_INFO *pRTI, uint16_t ms)
{
     b00:	2f 92       	push	r2
     b02:	3f 92       	push	r3
     b04:	4f 92       	push	r4
     b06:	5f 92       	push	r5
     b08:	7f 92       	push	r7
     b0a:	8f 92       	push	r8
     b0c:	9f 92       	push	r9
     b0e:	af 92       	push	r10
     b10:	bf 92       	push	r11
     b12:	cf 92       	push	r12
     b14:	df 92       	push	r13
     b16:	ef 92       	push	r14
     b18:	ff 92       	push	r15
     b1a:	0f 93       	push	r16
     b1c:	1f 93       	push	r17
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	ec 01       	movw	r28, r24
     b24:	1b 01       	movw	r2, r22
	*/

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready) 
     b26:	80 91 27 08 	lds	r24, 0x0827
     b2a:	88 23       	and	r24, r24
     b2c:	09 f4       	brne	.+2      	; 0xb30 <rf_tx_packet_repeat+0x30>
     b2e:	0e c1       	rjmp	.+540    	; 0xd4c <rf_tx_packet_repeat+0x24c>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
     b30:	8e 81       	ldd	r24, Y+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
     b32:	90 91 07 08 	lds	r25, 0x0807
     b36:	9f 5f       	subi	r25, 0xFF	; 255
     b38:	90 93 07 08 	sts	0x0807, r25
	machead->fcf = fcf;
     b3c:	e1 e8       	ldi	r30, 0x81	; 129
     b3e:	f1 e0       	ldi	r31, 0x01	; 1
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
     b40:	81 70       	andi	r24, 0x01	; 1
     b42:	82 95       	swap	r24
     b44:	88 0f       	add	r24, r24
     b46:	80 72       	andi	r24, 0x20	; 32
     b48:	81 64       	ori	r24, 0x41	; 65
     b4a:	80 93 81 01 	sts	0x0181, r24
     b4e:	88 e8       	ldi	r24, 0x88	; 136
     b50:	81 83       	std	Z+1, r24	; 0x01
	machead->fcf = fcf;
	if (use_glossy) {
     b52:	80 91 02 08 	lds	r24, 0x0802
     b56:	88 23       	and	r24, r24
     b58:	49 f0       	breq	.+18     	; 0xb6c <rf_tx_packet_repeat+0x6c>
		machead->seq_num = 0xFF;
     b5a:	8f ef       	ldi	r24, 0xFF	; 255
     b5c:	82 83       	std	Z+2, r24	; 0x02
		machead->src_addr = 0xAAAA;
     b5e:	8a ea       	ldi	r24, 0xAA	; 170
     b60:	9a ea       	ldi	r25, 0xAA	; 170
     b62:	90 87       	std	Z+8, r25	; 0x08
     b64:	87 83       	std	Z+7, r24	; 0x07
		machead->dest_addr = 0xFFFF;
     b66:	8f ef       	ldi	r24, 0xFF	; 255
     b68:	9f ef       	ldi	r25, 0xFF	; 255
     b6a:	10 c0       	rjmp	.+32     	; 0xb8c <rf_tx_packet_repeat+0x8c>
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	} else {
		machead->seq_num = rfSettings.txSeqNumber;
     b6c:	80 91 07 08 	lds	r24, 0x0807
     b70:	82 83       	std	Z+2, r24	; 0x02
		machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
     b72:	90 91 61 01 	lds	r25, 0x0161
     b76:	80 91 60 01 	lds	r24, 0x0160
     b7a:	39 2f       	mov	r19, r25
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	82 2b       	or	r24, r18
     b82:	93 2b       	or	r25, r19
     b84:	90 87       	std	Z+8, r25	; 0x08
     b86:	87 83       	std	Z+7, r24	; 0x07
		machead->dest_addr = pRTI->destAddr;
     b88:	88 81       	ld	r24, Y
     b8a:	99 81       	ldd	r25, Y+1	; 0x01
     b8c:	96 83       	std	Z+6, r25	; 0x06
     b8e:	85 83       	std	Z+5, r24	; 0x05
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
     b90:	90 91 63 01 	lds	r25, 0x0163
     b94:	80 91 62 01 	lds	r24, 0x0162
     b98:	39 2f       	mov	r19, r25
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	82 2b       	or	r24, r18
     ba0:	93 2b       	or	r25, r19
     ba2:	94 83       	std	Z+4, r25	; 0x04
     ba4:	83 83       	std	Z+3, r24	; 0x03
	}
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
     ba6:	4a 81       	ldd	r20, Y+2	; 0x02
     ba8:	24 2f       	mov	r18, r20
     baa:	33 27       	eor	r19, r19
     bac:	27 fd       	sbrc	r18, 7
     bae:	30 95       	com	r19
     bb0:	6b 81       	ldd	r22, Y+3	; 0x03
     bb2:	7c 81       	ldd	r23, Y+4	; 0x04
     bb4:	8a e8       	ldi	r24, 0x8A	; 138
     bb6:	91 e0       	ldi	r25, 0x01	; 1
     bb8:	53 2f       	mov	r21, r19
     bba:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
     bbe:	8a 81       	ldd	r24, Y+2	; 0x02
     bc0:	85 5f       	subi	r24, 0xF5	; 245
     bc2:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
     bc6:	70 90 41 01 	lds	r7, 0x0141
     bca:	8f e1       	ldi	r24, 0x1F	; 31
     bcc:	78 22       	and	r7, r24
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
     bce:	87 2d       	mov	r24, r7
     bd0:	81 50       	subi	r24, 0x01	; 1
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	c0 f3       	brcs	.-16     	; 0xbc6 <rf_tx_packet_repeat+0xc6>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
     bd6:	87 2d       	mov	r24, r7
     bd8:	81 31       	cpi	r24, 0x11	; 17
     bda:	a9 f3       	breq	.-22     	; 0xbc6 <rf_tx_packet_repeat+0xc6>
     bdc:	82 31       	cpi	r24, 0x12	; 18
     bde:	99 f3       	breq	.-26     	; 0xbc6 <rf_tx_packet_repeat+0xc6>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
     be0:	8f 31       	cpi	r24, 0x1F	; 31
     be2:	89 f3       	breq	.-30     	; 0xbc6 <rf_tx_packet_repeat+0xc6>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
     be4:	88 30       	cpi	r24, 0x08	; 8
     be6:	39 f0       	breq	.+14     	; 0xbf6 <rf_tx_packet_repeat+0xf6>
     be8:	86 30       	cpi	r24, 0x06	; 6
     bea:	29 f0       	breq	.+10     	; 0xbf6 <rf_tx_packet_repeat+0xf6>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
     bec:	86 31       	cpi	r24, 0x16	; 22
     bee:	19 f0       	breq	.+6      	; 0xbf6 <rf_tx_packet_repeat+0xf6>
     bf0:	89 30       	cpi	r24, 0x09	; 9
     bf2:	09 f0       	breq	.+2      	; 0xbf6 <rf_tx_packet_repeat+0xf6>
     bf4:	ab c0       	rjmp	.+342    	; 0xd4c <rf_tx_packet_repeat+0x24c>
		return NRK_ERROR;
	}

	rf_cmd(RX_AACK_ON);
     bf6:	86 e1       	ldi	r24, 0x16	; 22
     bf8:	0e 94 6f 04 	call	0x8de	; 0x8de <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
     bfc:	8d 81       	ldd	r24, Y+5	; 0x05
     bfe:	88 23       	and	r24, r24
     c00:	69 f0       	breq	.+26     	; 0xc1c <rf_tx_packet_repeat+0x11c>
		PHY_CC_CCA |= (1 << CCA_REQUEST);
     c02:	80 91 48 01 	lds	r24, 0x0148
     c06:	80 68       	ori	r24, 0x80	; 128
     c08:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
     c0c:	80 91 41 01 	lds	r24, 0x0141
     c10:	87 ff       	sbrs	r24, 7
     c12:	fc cf       	rjmp	.-8      	; 0xc0c <rf_tx_packet_repeat+0x10c>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
     c14:	80 91 41 01 	lds	r24, 0x0141
     c18:	86 ff       	sbrs	r24, 6
     c1a:	98 c0       	rjmp	.+304    	; 0xd4c <rf_tx_packet_repeat+0x24c>
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
     c1c:	89 e0       	ldi	r24, 0x09	; 9
     c1e:	0e 94 6f 04 	call	0x8de	; 0x8de <rf_cmd>
	if(pRTI->ackRequest)
     c22:	8e 81       	ldd	r24, Y+6	; 0x06
     c24:	88 23       	and	r24, r24
     c26:	19 f0       	breq	.+6      	; 0xc2e <rf_tx_packet_repeat+0x12e>
		rf_cmd(TX_ARET_ON);
     c28:	89 e1       	ldi	r24, 0x19	; 25
     c2a:	0e 94 6f 04 	call	0x8de	; 0x8de <rf_cmd>
	
	if(ms != 0){
     c2e:	21 14       	cp	r2, r1
     c30:	31 04       	cpc	r3, r1
     c32:	a9 f1       	breq	.+106    	; 0xc9e <rf_tx_packet_repeat+0x19e>
		nrk_time_get(&curr_t);
     c34:	8e e0       	ldi	r24, 0x0E	; 14
     c36:	98 e0       	ldi	r25, 0x08	; 8
     c38:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <nrk_time_get>
		target_t.secs = curr_t.secs;
     c3c:	80 91 0e 08 	lds	r24, 0x080E
     c40:	90 91 0f 08 	lds	r25, 0x080F
     c44:	a0 91 10 08 	lds	r26, 0x0810
     c48:	b0 91 11 08 	lds	r27, 0x0811
     c4c:	80 93 28 08 	sts	0x0828, r24
     c50:	90 93 29 08 	sts	0x0829, r25
     c54:	a0 93 2a 08 	sts	0x082A, r26
     c58:	b0 93 2b 08 	sts	0x082B, r27
		target_t.nano_secs = curr_t.nano_secs + (ms * NANOS_PER_MS);
     c5c:	b1 01       	movw	r22, r2
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	20 e4       	ldi	r18, 0x40	; 64
     c64:	32 e4       	ldi	r19, 0x42	; 66
     c66:	4f e0       	ldi	r20, 0x0F	; 15
     c68:	50 e0       	ldi	r21, 0x00	; 0
     c6a:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <__mulsi3>
     c6e:	20 91 12 08 	lds	r18, 0x0812
     c72:	30 91 13 08 	lds	r19, 0x0813
     c76:	40 91 14 08 	lds	r20, 0x0814
     c7a:	50 91 15 08 	lds	r21, 0x0815
     c7e:	62 0f       	add	r22, r18
     c80:	73 1f       	adc	r23, r19
     c82:	84 1f       	adc	r24, r20
     c84:	95 1f       	adc	r25, r21
     c86:	60 93 2c 08 	sts	0x082C, r22
     c8a:	70 93 2d 08 	sts	0x082D, r23
     c8e:	80 93 2e 08 	sts	0x082E, r24
     c92:	90 93 2f 08 	sts	0x082F, r25
		nrk_time_compact_nanos(&target_t);
     c96:	88 e2       	ldi	r24, 0x28	; 40
     c98:	98 e0       	ldi	r25, 0x08	; 8
     c9a:	0e 94 c9 1b 	call	0x3792	; 0x3792 <nrk_time_compact_nanos>
	do{
#ifdef RADIO_CC2591
		rf_cc2591_tx_on();
#endif

		tx_done = 0;
     c9e:	10 92 16 08 	sts	0x0816, r1
		/* Send the packet. 0x2 is equivalent to TX_START */
		rf_cmd(0x2);
     ca2:	82 e0       	ldi	r24, 0x02	; 2
     ca4:	0e 94 6f 04 	call	0x8de	; 0x8de <rf_cmd>

		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
     ca8:	44 24       	eor	r4, r4
     caa:	55 24       	eor	r5, r5
     cac:	08 c0       	rjmp	.+16     	; 0xcbe <rf_tx_packet_repeat+0x1be>
     cae:	08 94       	sec
     cb0:	41 1c       	adc	r4, r1
     cb2:	51 1c       	adc	r5, r1
     cb4:	88 ee       	ldi	r24, 0xE8	; 232
     cb6:	48 16       	cp	r4, r24
     cb8:	8d ef       	ldi	r24, 0xFD	; 253
     cba:	58 06       	cpc	r5, r24
     cbc:	21 f0       	breq	.+8      	; 0xcc6 <rf_tx_packet_repeat+0x1c6>
     cbe:	80 91 16 08 	lds	r24, 0x0816
     cc2:	88 23       	and	r24, r24
     cc4:	a1 f3       	breq	.-24     	; 0xcae <rf_tx_packet_repeat+0x1ae>
			continue;
		if(ms == 0)
     cc6:	21 14       	cp	r2, r1
     cc8:	31 04       	cpc	r3, r1
     cca:	59 f1       	breq	.+86     	; 0xd22 <rf_tx_packet_repeat+0x222>
			break;
		nrk_time_get(&curr_t);
     ccc:	8e e0       	ldi	r24, 0x0E	; 14
     cce:	98 e0       	ldi	r25, 0x08	; 8
     cd0:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <nrk_time_get>
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);
     cd4:	87 e4       	ldi	r24, 0x47	; 71
     cd6:	98 e0       	ldi	r25, 0x08	; 8
     cd8:	00 91 28 08 	lds	r16, 0x0828
     cdc:	10 91 29 08 	lds	r17, 0x0829
     ce0:	20 91 2a 08 	lds	r18, 0x082A
     ce4:	30 91 2b 08 	lds	r19, 0x082B
     ce8:	40 91 2c 08 	lds	r20, 0x082C
     cec:	50 91 2d 08 	lds	r21, 0x082D
     cf0:	60 91 2e 08 	lds	r22, 0x082E
     cf4:	70 91 2f 08 	lds	r23, 0x082F
     cf8:	80 90 0e 08 	lds	r8, 0x080E
     cfc:	90 90 0f 08 	lds	r9, 0x080F
     d00:	a0 90 10 08 	lds	r10, 0x0810
     d04:	b0 90 11 08 	lds	r11, 0x0811
     d08:	c0 90 12 08 	lds	r12, 0x0812
     d0c:	d0 90 13 08 	lds	r13, 0x0813
     d10:	e0 90 14 08 	lds	r14, 0x0814
     d14:	f0 90 15 08 	lds	r15, 0x0815
     d18:	0e 94 3a 1b 	call	0x3674	; 0x3674 <nrk_time_sub>
     d1c:	8f 3f       	cpi	r24, 0xFF	; 255
     d1e:	09 f0       	breq	.+2      	; 0xd22 <rf_tx_packet_repeat+0x222>
     d20:	be cf       	rjmp	.-132    	; 0xc9e <rf_tx_packet_repeat+0x19e>

	trx_error = ((pRTI->ackRequest && 
     d22:	8e 81       	ldd	r24, Y+6	; 0x06
     d24:	88 23       	and	r24, r24
     d26:	31 f0       	breq	.+12     	; 0xd34 <rf_tx_packet_repeat+0x234>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
     d28:	80 91 42 01 	lds	r24, 0x0142
     d2c:	82 95       	swap	r24
     d2e:	86 95       	lsr	r24
     d30:	87 70       	andi	r24, 0x07	; 7
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
     d32:	29 f4       	brne	.+10     	; 0xd3e <rf_tx_packet_repeat+0x23e>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
     d34:	88 ee       	ldi	r24, 0xE8	; 232
     d36:	48 16       	cp	r4, r24
     d38:	8d ef       	ldi	r24, 0xFD	; 253
     d3a:	58 06       	cpc	r5, r24
     d3c:	11 f4       	brne	.+4      	; 0xd42 <rf_tx_packet_repeat+0x242>
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
     d3e:	1f ef       	ldi	r17, 0xFF	; 255
     d40:	01 c0       	rjmp	.+2      	; 0xd44 <rf_tx_packet_repeat+0x244>
     d42:	11 e0       	ldi	r17, 0x01	; 1
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
     d44:	87 2d       	mov	r24, r7
     d46:	0e 94 6f 04 	call	0x8de	; 0x8de <rf_cmd>

#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
     d4a:	01 c0       	rjmp	.+2      	; 0xd4e <rf_tx_packet_repeat+0x24e>
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
		while(!(TRX_STATUS & (1 << CCA_DONE)))
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
     d4c:	1f ef       	ldi	r17, 0xFF	; 255
#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
}
     d4e:	81 2f       	mov	r24, r17
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	1f 91       	pop	r17
     d56:	0f 91       	pop	r16
     d58:	ff 90       	pop	r15
     d5a:	ef 90       	pop	r14
     d5c:	df 90       	pop	r13
     d5e:	cf 90       	pop	r12
     d60:	bf 90       	pop	r11
     d62:	af 90       	pop	r10
     d64:	9f 90       	pop	r9
     d66:	8f 90       	pop	r8
     d68:	7f 90       	pop	r7
     d6a:	5f 90       	pop	r5
     d6c:	4f 90       	pop	r4
     d6e:	3f 90       	pop	r3
     d70:	2f 90       	pop	r2
     d72:	08 95       	ret

00000d74 <rf_tx_packet>:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------

uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	70 e0       	ldi	r23, 0x00	; 0
     d78:	0e 94 80 05 	call	0xb00	; 0xb00 <rf_tx_packet_repeat>
}
     d7c:	08 95       	ret

00000d7e <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
     d7e:	0f 93       	push	r16
     d80:	1f 93       	push	r17
	uint8_t trx_status, cca_value;

	if(!rf_ready)
     d82:	80 91 27 08 	lds	r24, 0x0827
     d86:	88 23       	and	r24, r24
     d88:	49 f1       	breq	.+82     	; 0xddc <rf_cca_check+0x5e>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
     d8a:	10 91 41 01 	lds	r17, 0x0141
     d8e:	1f 71       	andi	r17, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
     d90:	81 2f       	mov	r24, r17
     d92:	81 50       	subi	r24, 0x01	; 1
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
     d94:	82 30       	cpi	r24, 0x02	; 2
     d96:	c8 f3       	brcs	.-14     	; 0xd8a <rf_cca_check+0xc>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
     d98:	11 31       	cpi	r17, 0x11	; 17
     d9a:	b9 f3       	breq	.-18     	; 0xd8a <rf_cca_check+0xc>
     d9c:	12 31       	cpi	r17, 0x12	; 18
     d9e:	a9 f3       	breq	.-22     	; 0xd8a <rf_cca_check+0xc>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
     da0:	1f 31       	cpi	r17, 0x1F	; 31
     da2:	99 f3       	breq	.-26     	; 0xd8a <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
     da4:	18 30       	cpi	r17, 0x08	; 8
     da6:	21 f0       	breq	.+8      	; 0xdb0 <rf_cca_check+0x32>
     da8:	16 30       	cpi	r17, 0x06	; 6
     daa:	11 f0       	breq	.+4      	; 0xdb0 <rf_cca_check+0x32>
			&& (trx_status != RX_AACK_ON))
     dac:	16 31       	cpi	r17, 0x16	; 22
     dae:	b1 f4       	brne	.+44     	; 0xddc <rf_cca_check+0x5e>
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
     db0:	86 e1       	ldi	r24, 0x16	; 22
     db2:	0e 94 6f 04 	call	0x8de	; 0x8de <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
     db6:	80 91 48 01 	lds	r24, 0x0148
     dba:	80 68       	ori	r24, 0x80	; 128
     dbc:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
     dc0:	80 91 41 01 	lds	r24, 0x0141
     dc4:	87 ff       	sbrs	r24, 7
     dc6:	fc cf       	rjmp	.-8      	; 0xdc0 <rf_cca_check+0x42>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
     dc8:	00 91 41 01 	lds	r16, 0x0141
	rf_cmd(trx_status);
     dcc:	81 2f       	mov	r24, r17
     dce:	0e 94 6f 04 	call	0x8de	; 0x8de <rf_cmd>

	return cca_value;
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	06 fd       	sbrc	r16, 6
     dd6:	03 c0       	rjmp	.+6      	; 0xdde <rf_cca_check+0x60>
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	01 c0       	rjmp	.+2      	; 0xdde <rf_cca_check+0x60>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
     ddc:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
     dde:	1f 91       	pop	r17
     de0:	0f 91       	pop	r16
     de2:	08 95       	ret

00000de4 <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
     de4:	80 91 27 08 	lds	r24, 0x0827
     de8:	88 23       	and	r24, r24
     dea:	09 f4       	brne	.+2      	; 0xdee <rf_rx_packet_nonblock+0xa>
     dec:	a2 c0       	rjmp	.+324    	; 0xf32 <rf_rx_packet_nonblock+0x14e>
		return NRK_ERROR;

	if(!rx_ready)
     dee:	80 91 46 08 	lds	r24, 0x0846
     df2:	88 23       	and	r24, r24
     df4:	09 f4       	brne	.+2      	; 0xdf8 <rf_rx_packet_nonblock+0x14>
     df6:	9f c0       	rjmp	.+318    	; 0xf36 <rf_rx_packet_nonblock+0x152>
		return 0;
	else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
     df8:	80 91 7b 01 	lds	r24, 0x017B
     dfc:	e0 91 05 08 	lds	r30, 0x0805
     e00:	f0 91 06 08 	lds	r31, 0x0806
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	02 97       	sbiw	r24, 0x02	; 2
     e08:	24 81       	ldd	r18, Z+4	; 0x04
     e0a:	33 27       	eor	r19, r19
     e0c:	27 fd       	sbrc	r18, 7
     e0e:	30 95       	com	r19
     e10:	28 17       	cp	r18, r24
     e12:	39 07       	cpc	r19, r25
     e14:	0c f4       	brge	.+2      	; 0xe18 <rf_rx_packet_nonblock+0x34>
     e16:	91 c0       	rjmp	.+290    	; 0xf3a <rf_rx_packet_nonblock+0x156>
		return NRK_ERROR;

	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
     e18:	e0 91 05 08 	lds	r30, 0x0805
     e1c:	f0 91 06 08 	lds	r31, 0x0806
     e20:	80 91 82 01 	lds	r24, 0x0182
     e24:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
     e26:	e0 91 05 08 	lds	r30, 0x0805
     e2a:	f0 91 06 08 	lds	r31, 0x0806
     e2e:	80 91 87 01 	lds	r24, 0x0187
     e32:	90 91 88 01 	lds	r25, 0x0188
     e36:	92 83       	std	Z+2, r25	; 0x02
     e38:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
     e3a:	e0 91 05 08 	lds	r30, 0x0805
     e3e:	f0 91 06 08 	lds	r31, 0x0806
     e42:	80 91 7b 01 	lds	r24, 0x017B
     e46:	8b 50       	subi	r24, 0x0B	; 11
     e48:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
     e4a:	a0 91 05 08 	lds	r26, 0x0805
     e4e:	b0 91 06 08 	lds	r27, 0x0806
     e52:	e0 91 05 08 	lds	r30, 0x0805
     e56:	f0 91 06 08 	lds	r31, 0x0806
     e5a:	13 96       	adiw	r26, 0x03	; 3
     e5c:	9c 91       	ld	r25, X
     e5e:	13 97       	sbiw	r26, 0x03	; 3
     e60:	84 81       	ldd	r24, Z+4	; 0x04
     e62:	89 17       	cp	r24, r25
     e64:	3c f0       	brlt	.+14     	; 0xe74 <rf_rx_packet_nonblock+0x90>
			|| (rfSettings.pRxInfo->length < 0)){
     e66:	e0 91 05 08 	lds	r30, 0x0805
     e6a:	f0 91 06 08 	lds	r31, 0x0806
     e6e:	83 81       	ldd	r24, Z+3	; 0x03
     e70:	87 ff       	sbrs	r24, 7
     e72:	0d c0       	rjmp	.+26     	; 0xe8e <rf_rx_packet_nonblock+0xaa>
		rx_ready = 0;
     e74:	10 92 46 08 	sts	0x0846, r1
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
     e78:	80 91 4c 01 	lds	r24, 0x014C
     e7c:	8f 77       	andi	r24, 0x7F	; 127
     e7e:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
     e82:	80 91 4c 01 	lds	r24, 0x014C
     e86:	80 68       	ori	r24, 0x80	; 128
     e88:	80 93 4c 01 	sts	0x014C, r24
     e8c:	52 c0       	rjmp	.+164    	; 0xf32 <rf_rx_packet_nonblock+0x14e>
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
     e8e:	e0 91 05 08 	lds	r30, 0x0805
     e92:	f0 91 06 08 	lds	r31, 0x0806
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
     e96:	a0 91 05 08 	lds	r26, 0x0805
     e9a:	b0 91 06 08 	lds	r27, 0x0806
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
     e9e:	13 96       	adiw	r26, 0x03	; 3
     ea0:	4c 91       	ld	r20, X
     ea2:	24 2f       	mov	r18, r20
     ea4:	33 27       	eor	r19, r19
     ea6:	27 fd       	sbrc	r18, 7
     ea8:	30 95       	com	r19
     eaa:	85 81       	ldd	r24, Z+5	; 0x05
     eac:	96 81       	ldd	r25, Z+6	; 0x06
     eae:	69 e8       	ldi	r22, 0x89	; 137
     eb0:	71 e0       	ldi	r23, 0x01	; 1
     eb2:	53 2f       	mov	r21, r19
     eb4:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
	
	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
     eb8:	e0 91 05 08 	lds	r30, 0x0805
     ebc:	f0 91 06 08 	lds	r31, 0x0806
     ec0:	80 91 80 01 	lds	r24, 0x0180
     ec4:	82 95       	swap	r24
     ec6:	86 95       	lsr	r24
     ec8:	81 70       	andi	r24, 0x01	; 1
     eca:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
     ecc:	e0 91 05 08 	lds	r30, 0x0805
     ed0:	f0 91 06 08 	lds	r31, 0x0806
     ed4:	80 91 47 01 	lds	r24, 0x0147
     ed8:	80 87       	std	Z+8, r24	; 0x08
	rfSettings.pRxInfo->actualRssi = PHY_RSSI >> 3;
     eda:	e0 91 05 08 	lds	r30, 0x0805
     ede:	f0 91 06 08 	lds	r31, 0x0806
     ee2:	80 91 46 01 	lds	r24, 0x0146
     ee6:	86 95       	lsr	r24
     ee8:	86 95       	lsr	r24
     eea:	86 95       	lsr	r24
     eec:	81 87       	std	Z+9, r24	; 0x09
	rfSettings.pRxInfo->energyDetectionLevel = PHY_ED_LEVEL;
     eee:	e0 91 05 08 	lds	r30, 0x0805
     ef2:	f0 91 06 08 	lds	r31, 0x0806
     ef6:	80 91 47 01 	lds	r24, 0x0147
     efa:	82 87       	std	Z+10, r24	; 0x0a
	rfSettings.pRxInfo->linkQualityIndication = *(frame_start + TST_RX_LENGTH);
     efc:	a0 91 05 08 	lds	r26, 0x0805
     f00:	b0 91 06 08 	lds	r27, 0x0806
     f04:	e0 91 7b 01 	lds	r30, 0x017B
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	e0 58       	subi	r30, 0x80	; 128
     f0c:	fe 4f       	sbci	r31, 0xFE	; 254
     f0e:	80 81       	ld	r24, Z
     f10:	1b 96       	adiw	r26, 0x0b	; 11
     f12:	8c 93       	st	X, r24
     f14:	1b 97       	sbiw	r26, 0x0b	; 11

	/* Reset frame buffer protection */
	rx_ready = 0;
     f16:	10 92 46 08 	sts	0x0846, r1
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
     f1a:	80 91 4c 01 	lds	r24, 0x014C
     f1e:	8f 77       	andi	r24, 0x7F	; 127
     f20:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
     f24:	80 91 4c 01 	lds	r24, 0x014C
     f28:	80 68       	ori	r24, 0x80	; 128
     f2a:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	08 95       	ret
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
		return NRK_ERROR;
     f32:	8f ef       	ldi	r24, 0xFF	; 255
     f34:	08 95       	ret

	if(!rx_ready)
		return 0;
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	08 95       	ret
	else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
		return NRK_ERROR;
     f3a:	8f ef       	ldi	r24, 0xFF	; 255
	rx_ready = 0;
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);

	return NRK_OK;
}
     f3c:	08 95       	ret

00000f3e <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
     f3e:	1f 92       	push	r1
     f40:	0f 92       	push	r0
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	0f 92       	push	r0
     f46:	11 24       	eor	r1, r1
     f48:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
     f4a:	80 e8       	ldi	r24, 0x80	; 128
     f4c:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     f50:	8f 91       	pop	r24
     f52:	0f 90       	pop	r0
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	0f 90       	pop	r0
     f58:	1f 90       	pop	r1
     f5a:	18 95       	reti

00000f5c <__vector_63>:

SIGNAL(TRX24_TX_END_vect)
{
     f5c:	1f 92       	push	r1
     f5e:	0f 92       	push	r0
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	0f 92       	push	r0
     f64:	11 24       	eor	r1, r1
     f66:	8f 93       	push	r24
	vprintf("TX_END IRQ!\r\n");
	tx_done = 1;
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	80 93 16 08 	sts	0x0816, r24
	IRQ_STATUS = (1 << TX_END);
     f6e:	80 e4       	ldi	r24, 0x40	; 64
     f70:	80 93 4f 01 	sts	0x014F, r24
#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	return;
}
     f74:	8f 91       	pop	r24
     f76:	0f 90       	pop	r0
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	0f 90       	pop	r0
     f7c:	1f 90       	pop	r1
     f7e:	18 95       	reti

00000f80 <__vector_62>:

SIGNAL(TRX24_XAH_AMI_vect)
{
     f80:	1f 92       	push	r1
     f82:	0f 92       	push	r0
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	0f 92       	push	r0
     f88:	11 24       	eor	r1, r1
     f8a:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
     f8c:	80 e2       	ldi	r24, 0x20	; 32
     f8e:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     f92:	8f 91       	pop	r24
     f94:	0f 90       	pop	r0
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	0f 90       	pop	r0
     f9a:	1f 90       	pop	r1
     f9c:	18 95       	reti

00000f9e <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
     f9e:	1f 92       	push	r1
     fa0:	0f 92       	push	r0
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	0f 92       	push	r0
     fa6:	11 24       	eor	r1, r1
     fa8:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
     faa:	80 e1       	ldi	r24, 0x10	; 16
     fac:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     fb0:	8f 91       	pop	r24
     fb2:	0f 90       	pop	r0
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	0f 90       	pop	r0
     fb8:	1f 90       	pop	r1
     fba:	18 95       	reti

00000fbc <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
     fbc:	1f 92       	push	r1
     fbe:	0f 92       	push	r0
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	0f 92       	push	r0
     fc4:	0b b6       	in	r0, 0x3b	; 59
     fc6:	0f 92       	push	r0
     fc8:	11 24       	eor	r1, r1
     fca:	2f 93       	push	r18
     fcc:	3f 93       	push	r19
     fce:	4f 93       	push	r20
     fd0:	5f 93       	push	r21
     fd2:	6f 93       	push	r22
     fd4:	7f 93       	push	r23
     fd6:	8f 93       	push	r24
     fd8:	9f 93       	push	r25
     fda:	af 93       	push	r26
     fdc:	bf 93       	push	r27
     fde:	ef 93       	push	r30
     fe0:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
     fe2:	84 e0       	ldi	r24, 0x04	; 4
     fe4:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
     fe8:	e0 91 9a 04 	lds	r30, 0x049A
     fec:	f0 91 9b 04 	lds	r31, 0x049B
     ff0:	30 97       	sbiw	r30, 0x00	; 0
     ff2:	09 f0       	breq	.+2      	; 0xff6 <__vector_59+0x3a>
		rx_start_func();
     ff4:	09 95       	icall

	return;
}
     ff6:	ff 91       	pop	r31
     ff8:	ef 91       	pop	r30
     ffa:	bf 91       	pop	r27
     ffc:	af 91       	pop	r26
     ffe:	9f 91       	pop	r25
    1000:	8f 91       	pop	r24
    1002:	7f 91       	pop	r23
    1004:	6f 91       	pop	r22
    1006:	5f 91       	pop	r21
    1008:	4f 91       	pop	r20
    100a:	3f 91       	pop	r19
    100c:	2f 91       	pop	r18
    100e:	0f 90       	pop	r0
    1010:	0b be       	out	0x3b, r0	; 59
    1012:	0f 90       	pop	r0
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	0f 90       	pop	r0
    1018:	1f 90       	pop	r1
    101a:	18 95       	reti

0000101c <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
    101c:	1f 92       	push	r1
    101e:	0f 92       	push	r0
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	0f 92       	push	r0
    1024:	11 24       	eor	r1, r1
    1026:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
    1028:	82 e0       	ldi	r24, 0x02	; 2
    102a:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    102e:	8f 91       	pop	r24
    1030:	0f 90       	pop	r0
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	0f 90       	pop	r0
    1036:	1f 90       	pop	r1
    1038:	18 95       	reti

0000103a <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
    103a:	1f 92       	push	r1
    103c:	0f 92       	push	r0
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	0f 92       	push	r0
    1042:	11 24       	eor	r1, r1
    1044:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    104c:	8f 91       	pop	r24
    104e:	0f 90       	pop	r0
    1050:	0f be       	out	0x3f, r0	; 63
    1052:	0f 90       	pop	r0
    1054:	1f 90       	pop	r1
    1056:	18 95       	reti

00001058 <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
    1058:	e9 e4       	ldi	r30, 0x49	; 73
    105a:	f1 e0       	ldi	r31, 0x01	; 1
    105c:	90 81       	ld	r25, Z
    105e:	90 7f       	andi	r25, 0xF0	; 240
    1060:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
    1062:	90 81       	ld	r25, Z
    1064:	8f 70       	andi	r24, 0x0F	; 15
    1066:	89 2b       	or	r24, r25
    1068:	80 83       	st	Z, r24
	return;
}
    106a:	08 95       	ret

0000106c <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
    106c:	8f ef       	ldi	r24, 0xFF	; 255
    106e:	08 95       	ret

00001070 <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
	return;
}
    1070:	08 95       	ret

00001072 <rf_security_set_key>:


void rf_security_set_key(uint8_t *key)
{
	return;
}
    1072:	08 95       	ret

00001074 <rf_security_disable>:


void rf_security_disable()
{
	return;
}
    1074:	08 95       	ret

00001076 <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
    1076:	8f ef       	ldi	r24, 0xFF	; 255
    1078:	08 95       	ret

0000107a <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    107a:	80 91 00 08 	lds	r24, 0x0800
    107e:	90 91 01 08 	lds	r25, 0x0801
    1082:	08 95       	ret

00001084 <rf_rx_packet>:
	/*
	int8_t tmp;
	if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
	*/
	return 0;
}
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	08 95       	ret

00001088 <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
}
    1088:	08 95       	ret

0000108a <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	08 95       	ret

0000108e <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	08 95       	ret

00001092 <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	08 95       	ret

00001096 <rf_carrier_on>:
     
#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
}
    1096:	08 95       	ret

00001098 <rf_carrier_off>:
     
#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
}
    1098:	08 95       	ret

0000109a <rf_test_mode>:

#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
}
    109a:	08 95       	ret

0000109c <rf_data_mode>:

#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
}
    109c:	08 95       	ret

0000109e <rf_rx_set_serial>:
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
}
    109e:	08 95       	ret

000010a0 <rf_tx_set_serial>:
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
}
    10a0:	08 95       	ret

000010a2 <rf_set_preamble_length>:
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
}
    10a2:	08 95       	ret

000010a4 <rf_set_cca_mode>:


void rf_set_cca_mode(uint8_t mode)
{
}
    10a4:	08 95       	ret

000010a6 <rf_cc2591_tx_on>:


void rf_cc2591_tx_on()
{
	DPDS1	|= 0x3; 
    10a6:	e7 e3       	ldi	r30, 0x37	; 55
    10a8:	f1 e0       	ldi	r31, 0x01	; 1
    10aa:	80 81       	ld	r24, Z
    10ac:	83 60       	ori	r24, 0x03	; 3
    10ae:	80 83       	st	Z, r24
	DDRG	|= 0x1;
    10b0:	98 9a       	sbi	0x13, 0	; 19
	PORTG	|= 0x1;
    10b2:	a0 9a       	sbi	0x14, 0	; 20
	DDRE	|= 0xE0;
    10b4:	8d b1       	in	r24, 0x0d	; 13
    10b6:	80 6e       	ori	r24, 0xE0	; 224
    10b8:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
    10ba:	8e b1       	in	r24, 0x0e	; 14
    10bc:	80 6e       	ori	r24, 0xE0	; 224
    10be:	8e b9       	out	0x0e, r24	; 14

    //nrk_spin_wait_us(12);
}
    10c0:	08 95       	ret

000010c2 <rf_cc2591_rx_on>:

void rf_cc2591_rx_on()
{
	DPDS1	|= 0x3; 
    10c2:	e7 e3       	ldi	r30, 0x37	; 55
    10c4:	f1 e0       	ldi	r31, 0x01	; 1
    10c6:	80 81       	ld	r24, Z
    10c8:	83 60       	ori	r24, 0x03	; 3
    10ca:	80 83       	st	Z, r24
	DDRG	|= 0x1;
    10cc:	98 9a       	sbi	0x13, 0	; 19
	PORTG	&= ~(0x1);
    10ce:	a0 98       	cbi	0x14, 0	; 20
	DDRE	|= 0xE0;
    10d0:	8d b1       	in	r24, 0x0d	; 13
    10d2:	80 6e       	ori	r24, 0xE0	; 224
    10d4:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
    10d6:	8e b1       	in	r24, 0x0e	; 14
    10d8:	80 6e       	ori	r24, 0xE0	; 224
    10da:	8e b9       	out	0x0e, r24	; 14

    //nrk_spin_wait_us(12);
}
    10dc:	08 95       	ret

000010de <rf_glossy_interrupt>:
	curr_count = 0;
}
#endif

void rf_glossy_interrupt()
{
    10de:	cf 92       	push	r12
    10e0:	df 92       	push	r13
    10e2:	ef 92       	push	r14
    10e4:	ff 92       	push	r15
    10e6:	0f 93       	push	r16
    10e8:	1f 93       	push	r17
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
    10f2:	27 97       	sbiw	r28, 0x07	; 7
    10f4:	0f b6       	in	r0, 0x3f	; 63
    10f6:	f8 94       	cli
    10f8:	de bf       	out	0x3e, r29	; 62
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	cd bf       	out	0x3d, r28	; 61
	nrk_int_disable();
    10fe:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <nrk_int_disable>

	RF_RX_INFO rfRxInfo = *(rfSettings.pRxInfo);
    1102:	e0 91 05 08 	lds	r30, 0x0805
    1106:	f0 91 06 08 	lds	r31, 0x0806
    110a:	c0 80       	ld	r12, Z
    110c:	e3 80       	ldd	r14, Z+3	; 0x03
    110e:	05 81       	ldd	r16, Z+5	; 0x05
    1110:	16 81       	ldd	r17, Z+6	; 0x06
    1112:	d0 84       	ldd	r13, Z+8	; 0x08
	RF_TX_INFO rfTxInfo;

	/* Grab packet */
	int err = rf_rx_packet_nonblock();
    1114:	0e 94 f2 06 	call	0xde4	; 0xde4 <rf_rx_packet_nonblock>
	if (err < 1) {
    1118:	18 16       	cp	r1, r24
    111a:	1c f0       	brlt	.+6      	; 0x1122 <rf_glossy_interrupt+0x44>
		printf("rf_rx_packet_nonblock failed]\r\n");
    111c:	8d e6       	ldi	r24, 0x6D	; 109
    111e:	92 e0       	ldi	r25, 0x02	; 2
    1120:	06 c0       	rjmp	.+12     	; 0x112e <rf_glossy_interrupt+0x50>
		nrk_int_enable();
		return;
	}

	/* TTL should be the first byte of the payload */
	uint8_t ttl = rfRxInfo.pPayload[0];
    1122:	d8 01       	movw	r26, r16
    1124:	fc 90       	ld	r15, X
	if (ttl == 0) {
    1126:	ff 20       	and	r15, r15
    1128:	39 f4       	brne	.+14     	; 0x1138 <rf_glossy_interrupt+0x5a>
#ifndef GLOSSY_TESTING
		printf("Packet is done bouncing around!\r\n\n");
    112a:	8c e8       	ldi	r24, 0x8C	; 140
    112c:	92 e0       	ldi	r25, 0x02	; 2
    112e:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <puts>
#endif
		nrk_int_enable();
    1132:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <nrk_int_enable>
		return;
    1136:	42 c0       	rjmp	.+132    	; 0x11bc <rf_glossy_interrupt+0xde>
	} else if (ttl == 5) {
    1138:	bf 2d       	mov	r27, r15
    113a:	b5 30       	cpi	r27, 0x05	; 5
    113c:	21 f4       	brne	.+8      	; 0x1146 <rf_glossy_interrupt+0x68>
#ifndef GLOSSY_TESTING
		printf("\n");
    113e:	8a e0       	ldi	r24, 0x0A	; 10
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	0e 94 42 2e 	call	0x5c84	; 0x5c84 <putchar>

	/* Print packet information */
#ifndef GLOSSY_TESTING
	int8_t rssi = rfRxInfo.rssi;
	uint8_t snum = rfRxInfo.seqNumber;
	printf("SEQ:%4u\tTTL:%2d\tRSSI:%4d\tPayload: [%s]\r\n", 
    1146:	ed b7       	in	r30, 0x3d	; 61
    1148:	fe b7       	in	r31, 0x3e	; 62
    114a:	3a 97       	sbiw	r30, 0x0a	; 10
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	f8 94       	cli
    1150:	fe bf       	out	0x3e, r31	; 62
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	ed bf       	out	0x3d, r30	; 61
    1156:	31 96       	adiw	r30, 0x01	; 1
    1158:	2e ea       	ldi	r18, 0xAE	; 174
    115a:	32 e0       	ldi	r19, 0x02	; 2
    115c:	ad b7       	in	r26, 0x3d	; 61
    115e:	be b7       	in	r27, 0x3e	; 62
    1160:	12 96       	adiw	r26, 0x02	; 2
    1162:	3c 93       	st	X, r19
    1164:	2e 93       	st	-X, r18
    1166:	11 97       	sbiw	r26, 0x01	; 1
    1168:	c2 82       	std	Z+2, r12	; 0x02
    116a:	13 82       	std	Z+3, r1	; 0x03
    116c:	f4 82       	std	Z+4, r15	; 0x04
    116e:	15 82       	std	Z+5, r1	; 0x05
    1170:	8d 2d       	mov	r24, r13
    1172:	99 27       	eor	r25, r25
    1174:	87 fd       	sbrc	r24, 7
    1176:	90 95       	com	r25
    1178:	97 83       	std	Z+7, r25	; 0x07
    117a:	86 83       	std	Z+6, r24	; 0x06
    117c:	c8 01       	movw	r24, r16
    117e:	01 96       	adiw	r24, 0x01	; 1
    1180:	91 87       	std	Z+9, r25	; 0x09
    1182:	80 87       	std	Z+8, r24	; 0x08
    1184:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <printf>
					snum, ttl, rssi, rfRxInfo.pPayload + 1);
#endif
	/* Copy pointer to payload and length */
	rfTxInfo.pPayload = rfRxInfo.pPayload;
    1188:	1d 83       	std	Y+5, r17	; 0x05
    118a:	0c 83       	std	Y+4, r16	; 0x04
	rfTxInfo.pPayload[0] = ttl - 1;
    118c:	fa 94       	dec	r15
    118e:	f8 01       	movw	r30, r16
    1190:	f0 82       	st	Z, r15
	rfTxInfo.length = rfRxInfo.length;
    1192:	eb 82       	std	Y+3, r14	; 0x03
	rfTxInfo.cca = 0;
    1194:	1e 82       	std	Y+6, r1	; 0x06
	rfTxInfo.ackRequest = 0;
    1196:	1f 82       	std	Y+7, r1	; 0x07
	rfTxInfo.destAddr = 0xFFFF;
    1198:	8f ef       	ldi	r24, 0xFF	; 255
    119a:	9f ef       	ldi	r25, 0xFF	; 255
    119c:	9a 83       	std	Y+2, r25	; 0x02
    119e:	89 83       	std	Y+1, r24	; 0x01
		rf_tx_packet(&rfTxInfo);
	} else {
		nrk_int_enable();
	}
#else
	nrk_int_enable();
    11a0:	8d b7       	in	r24, 0x3d	; 61
    11a2:	9e b7       	in	r25, 0x3e	; 62
    11a4:	0a 96       	adiw	r24, 0x0a	; 10
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	f8 94       	cli
    11aa:	9e bf       	out	0x3e, r25	; 62
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	8d bf       	out	0x3d, r24	; 61
    11b0:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <nrk_int_enable>
	rf_tx_packet(&rfTxInfo);
    11b4:	ce 01       	movw	r24, r28
    11b6:	01 96       	adiw	r24, 0x01	; 1
    11b8:	0e 94 ba 06 	call	0xd74	; 0xd74 <rf_tx_packet>
#endif
	return;
}
    11bc:	27 96       	adiw	r28, 0x07	; 7
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	de bf       	out	0x3e, r29	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	cd bf       	out	0x3d, r28	; 61
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	1f 91       	pop	r17
    11ce:	0f 91       	pop	r16
    11d0:	ff 90       	pop	r15
    11d2:	ef 90       	pop	r14
    11d4:	df 90       	pop	r13
    11d6:	cf 90       	pop	r12
    11d8:	08 95       	ret

000011da <__vector_60>:
	return NRK_OK;
}


SIGNAL(TRX24_RX_END_vect)
{	
    11da:	1f 92       	push	r1
    11dc:	0f 92       	push	r0
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	0f 92       	push	r0
    11e2:	0b b6       	in	r0, 0x3b	; 59
    11e4:	0f 92       	push	r0
    11e6:	11 24       	eor	r1, r1
    11e8:	2f 93       	push	r18
    11ea:	3f 93       	push	r19
    11ec:	4f 93       	push	r20
    11ee:	5f 93       	push	r21
    11f0:	6f 93       	push	r22
    11f2:	7f 93       	push	r23
    11f4:	8f 93       	push	r24
    11f6:	9f 93       	push	r25
    11f8:	af 93       	push	r26
    11fa:	bf 93       	push	r27
    11fc:	ef 93       	push	r30
    11fe:	ff 93       	push	r31
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	01 c0       	rjmp	.+2      	; 0x1206 <__vector_60+0x2c>
    1204:	8f 5f       	subi	r24, 0xFF	; 255
    1206:	90 91 7b 01 	lds	r25, 0x017B
    120a:	89 17       	cp	r24, r25
    120c:	d8 f3       	brcs	.-10     	; 0x1204 <__vector_60+0x2a>
		if(((i+1) % 16) == 0)
			vprintf("\r\n");
	}
	vprintf("\r\n");

	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    120e:	80 91 46 01 	lds	r24, 0x0146
    1212:	87 ff       	sbrs	r24, 7
    1214:	04 c0       	rjmp	.+8      	; 0x121e <__vector_60+0x44>
		rx_ready = 1;
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	80 93 46 08 	sts	0x0846, r24
    121c:	04 c0       	rjmp	.+8      	; 0x1226 <__vector_60+0x4c>
	} else {
		printf("RX end failed checksum!\r\n");
    121e:	87 ed       	ldi	r24, 0xD7	; 215
    1220:	92 e0       	ldi	r25, 0x02	; 2
    1222:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <puts>
	}
	IRQ_STATUS = (1 << RX_END);
    1226:	88 e0       	ldi	r24, 0x08	; 8
    1228:	80 93 4f 01 	sts	0x014F, r24
	
	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    122c:	80 91 46 01 	lds	r24, 0x0146
    1230:	87 ff       	sbrs	r24, 7
    1232:	06 c0       	rjmp	.+12     	; 0x1240 <__vector_60+0x66>
		if (use_glossy) rf_glossy_interrupt();
    1234:	80 91 02 08 	lds	r24, 0x0802
    1238:	88 23       	and	r24, r24
    123a:	11 f0       	breq	.+4      	; 0x1240 <__vector_60+0x66>
    123c:	0e 94 6f 08 	call	0x10de	; 0x10de <rf_glossy_interrupt>
	}

	if(rx_end_func)
    1240:	e0 91 9c 04 	lds	r30, 0x049C
    1244:	f0 91 9d 04 	lds	r31, 0x049D
    1248:	30 97       	sbiw	r30, 0x00	; 0
    124a:	09 f0       	breq	.+2      	; 0x124e <__vector_60+0x74>
		rx_end_func();
    124c:	09 95       	icall

	return;
}
    124e:	ff 91       	pop	r31
    1250:	ef 91       	pop	r30
    1252:	bf 91       	pop	r27
    1254:	af 91       	pop	r26
    1256:	9f 91       	pop	r25
    1258:	8f 91       	pop	r24
    125a:	7f 91       	pop	r23
    125c:	6f 91       	pop	r22
    125e:	5f 91       	pop	r21
    1260:	4f 91       	pop	r20
    1262:	3f 91       	pop	r19
    1264:	2f 91       	pop	r18
    1266:	0f 90       	pop	r0
    1268:	0b be       	out	0x3b, r0	; 59
    126a:	0f 90       	pop	r0
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	0f 90       	pop	r0
    1270:	1f 90       	pop	r1
    1272:	18 95       	reti

00001274 <aes_setkey>:

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
    1274:	e7 e1       	ldi	r30, 0x17	; 23
    1276:	f8 e0       	ldi	r31, 0x08	; 8
    1278:	a8 2f       	mov	r26, r24
    127a:	b9 2f       	mov	r27, r25
      ekey[i] = key[i];
    127c:	8c 91       	ld	r24, X
    127e:	81 93       	st	Z+, r24
      AES_KEY = key[i];
    1280:	8d 91       	ld	r24, X+
    1282:	80 93 3f 01 	sts	0x013F, r24

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
    1286:	88 e0       	ldi	r24, 0x08	; 8
    1288:	e7 32       	cpi	r30, 0x27	; 39
    128a:	f8 07       	cpc	r31, r24
    128c:	b9 f7       	brne	.-18     	; 0x127c <aes_setkey+0x8>
    128e:	80 e1       	ldi	r24, 0x10	; 16
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
      AES_STATE = 0x00;
    1290:	10 92 3e 01 	sts	0x013E, r1
    1294:	81 50       	subi	r24, 0x01	; 1

   for(i=0; i<16; i++){
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
    1296:	e1 f7       	brne	.-8      	; 0x1290 <aes_setkey+0x1c>
      AES_STATE = 0x00;
   }
   AES_CTRL = (1 << AES_REQUEST);
    1298:	80 e8       	ldi	r24, 0x80	; 128
    129a:	80 93 3c 01 	sts	0x013C, r24

   while(!(AES_STATUS & (1 << AES_DONE))){
    129e:	80 91 3d 01 	lds	r24, 0x013D
    12a2:	80 ff       	sbrs	r24, 0
    12a4:	fc cf       	rjmp	.-8      	; 0x129e <aes_setkey+0x2a>
    12a6:	e0 e3       	ldi	r30, 0x30	; 48
    12a8:	f8 e0       	ldi	r31, 0x08	; 8
      continue;
   }
   for(i=0; i<16; i++){
      dkey[i] = AES_KEY;
    12aa:	80 91 3f 01 	lds	r24, 0x013F
    12ae:	81 93       	st	Z+, r24
   AES_CTRL = (1 << AES_REQUEST);

   while(!(AES_STATUS & (1 << AES_DONE))){
      continue;
   }
   for(i=0; i<16; i++){
    12b0:	88 e0       	ldi	r24, 0x08	; 8
    12b2:	e0 34       	cpi	r30, 0x40	; 64
    12b4:	f8 07       	cpc	r31, r24
    12b6:	c9 f7       	brne	.-14     	; 0x12aa <aes_setkey+0x36>
      dkey[i] = AES_KEY;
   }
}
    12b8:	08 95       	ret

000012ba <aes_encrypt>:

uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
    12ba:	66 23       	and	r22, r22
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <aes_encrypt+0x6>
    12be:	3d c0       	rjmp	.+122    	; 0x133a <aes_encrypt+0x80>
    12c0:	26 2f       	mov	r18, r22
    12c2:	2f 70       	andi	r18, 0x0F	; 15
    12c4:	e1 f5       	brne	.+120    	; 0x133e <aes_encrypt+0x84>
    12c6:	e7 e1       	ldi	r30, 0x17	; 23
    12c8:	f8 e0       	ldi	r31, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];
    12ca:	21 91       	ld	r18, Z+
    12cc:	20 93 3f 01 	sts	0x013F, r18
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    12d0:	28 e0       	ldi	r18, 0x08	; 8
    12d2:	e7 32       	cpi	r30, 0x27	; 39
    12d4:	f2 07       	cpc	r31, r18
    12d6:	c9 f7       	brne	.-14     	; 0x12ca <aes_encrypt+0x10>
    12d8:	40 e0       	ldi	r20, 0x00	; 0
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    12da:	70 e0       	ldi	r23, 0x00	; 0
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    12dc:	50 e2       	ldi	r21, 0x20	; 32
    12de:	21 c0       	rjmp	.+66     	; 0x1322 <aes_encrypt+0x68>

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
      if(i==0)
    12e0:	44 23       	and	r20, r20
    12e2:	19 f4       	brne	.+6      	; 0x12ea <aes_encrypt+0x30>
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
    12e4:	10 92 3c 01 	sts	0x013C, r1
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <aes_encrypt+0x34>
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    12ea:	50 93 3c 01 	sts	0x013C, r21
      dkey[i] = AES_KEY;
   }
}


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
    12ee:	fc 01       	movw	r30, r24
    12f0:	e2 0f       	add	r30, r18
    12f2:	f3 1f       	adc	r31, r19
    12f4:	df 01       	movw	r26, r30
    12f6:	20 e1       	ldi	r18, 0x10	; 16
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    12f8:	3d 91       	ld	r19, X+
    12fa:	30 93 3e 01 	sts	0x013E, r19
    12fe:	21 50       	subi	r18, 0x01	; 1
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
    1300:	d9 f7       	brne	.-10     	; 0x12f8 <aes_encrypt+0x3e>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    1302:	20 91 3c 01 	lds	r18, 0x013C
    1306:	20 68       	ori	r18, 0x80	; 128
    1308:	20 93 3c 01 	sts	0x013C, r18
      while(!(AES_STATUS & (1 << AES_DONE)))
    130c:	20 91 3d 01 	lds	r18, 0x013D
    1310:	20 ff       	sbrs	r18, 0
    1312:	fc cf       	rjmp	.-8      	; 0x130c <aes_encrypt+0x52>
    1314:	20 e1       	ldi	r18, 0x10	; 16
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
    1316:	30 91 3e 01 	lds	r19, 0x013E
    131a:	31 93       	st	Z+, r19
    131c:	21 50       	subi	r18, 0x01	; 1
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
    131e:	d9 f7       	brne	.-10     	; 0x1316 <aes_encrypt+0x5c>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    1320:	4f 5f       	subi	r20, 0xFF	; 255
    1322:	24 2f       	mov	r18, r20
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	e4 e0       	ldi	r30, 0x04	; 4
    1328:	22 0f       	add	r18, r18
    132a:	33 1f       	adc	r19, r19
    132c:	ea 95       	dec	r30
    132e:	e1 f7       	brne	.-8      	; 0x1328 <aes_encrypt+0x6e>
    1330:	26 17       	cp	r18, r22
    1332:	37 07       	cpc	r19, r23
    1334:	ac f2       	brlt	.-86     	; 0x12e0 <aes_encrypt+0x26>
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	08 95       	ret
uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	08 95       	ret
    133e:	81 e0       	ldi	r24, 0x01	; 1
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
}
    1340:	08 95       	ret

00001342 <aes_decrypt>:
uint8_t aes_decrypt(uint8_t *data, uint8_t len)
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
    1342:	61 30       	cpi	r22, 0x01	; 1
    1344:	09 f4       	brne	.+2      	; 0x1348 <aes_decrypt+0x6>
    1346:	48 c0       	rjmp	.+144    	; 0x13d8 <aes_decrypt+0x96>
    1348:	26 2f       	mov	r18, r22
    134a:	2f 70       	andi	r18, 0x0F	; 15
    134c:	09 f0       	breq	.+2      	; 0x1350 <aes_decrypt+0xe>
    134e:	46 c0       	rjmp	.+140    	; 0x13dc <aes_decrypt+0x9a>
    1350:	e0 e3       	ldi	r30, 0x30	; 48
    1352:	f8 e0       	ldi	r31, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];
    1354:	21 91       	ld	r18, Z+
    1356:	20 93 3f 01 	sts	0x013F, r18
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    135a:	28 e0       	ldi	r18, 0x08	; 8
    135c:	e0 34       	cpi	r30, 0x40	; 64
    135e:	f2 07       	cpc	r31, r18
    1360:	c9 f7       	brne	.-14     	; 0x1354 <aes_decrypt+0x12>
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    1362:	62 95       	swap	r22
    1364:	6f 70       	andi	r22, 0x0F	; 15
    1366:	61 50       	subi	r22, 0x01	; 1
         data[16*i+j] = AES_STATE;
   }
   return 0;
}

uint8_t aes_decrypt(uint8_t *data, uint8_t len)
    1368:	26 2f       	mov	r18, r22
    136a:	33 27       	eor	r19, r19
    136c:	27 fd       	sbrc	r18, 7
    136e:	30 95       	com	r19
    1370:	f4 e0       	ldi	r31, 0x04	; 4
    1372:	22 0f       	add	r18, r18
    1374:	33 1f       	adc	r19, r19
    1376:	fa 95       	dec	r31
    1378:	e1 f7       	brne	.-8      	; 0x1372 <aes_decrypt+0x30>
    137a:	28 0f       	add	r18, r24
    137c:	39 1f       	adc	r19, r25

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    137e:	78 e0       	ldi	r23, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    1380:	27 c0       	rjmp	.+78     	; 0x13d0 <aes_decrypt+0x8e>
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    1382:	70 93 3c 01 	sts	0x013C, r23
    1386:	f9 01       	movw	r30, r18
    1388:	80 e1       	ldi	r24, 0x10	; 16
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    138a:	91 91       	ld	r25, Z+
    138c:	90 93 3e 01 	sts	0x013E, r25
    1390:	81 50       	subi	r24, 0x01	; 1
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
      
      for(j=0; j<16; j++)
    1392:	d9 f7       	brne	.-10     	; 0x138a <aes_decrypt+0x48>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    1394:	80 91 3c 01 	lds	r24, 0x013C
    1398:	80 68       	ori	r24, 0x80	; 128
    139a:	80 93 3c 01 	sts	0x013C, r24
      while(!(AES_STATUS & (1 << AES_DONE)))
    139e:	80 91 3d 01 	lds	r24, 0x013D
    13a2:	80 ff       	sbrs	r24, 0
    13a4:	fc cf       	rjmp	.-8      	; 0x139e <aes_decrypt+0x5c>
    13a6:	d9 01       	movw	r26, r18
    13a8:	50 97       	sbiw	r26, 0x10	; 16
    13aa:	c9 01       	movw	r24, r18
    13ac:	40 96       	adiw	r24, 0x10	; 16
    13ae:	f9 01       	movw	r30, r18
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
    13b0:	50 91 3e 01 	lds	r21, 0x013E
    13b4:	50 83       	st	Z, r21
         if(i!=0)
    13b6:	66 23       	and	r22, r22
    13b8:	19 f0       	breq	.+6      	; 0x13c0 <aes_decrypt+0x7e>
            data[16*i+j] ^= data[16*(i-1)+j];
    13ba:	4c 91       	ld	r20, X
    13bc:	45 27       	eor	r20, r21
    13be:	40 83       	st	Z, r20
    13c0:	31 96       	adiw	r30, 0x01	; 1
    13c2:	11 96       	adiw	r26, 0x01	; 1
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
    13c4:	e8 17       	cp	r30, r24
    13c6:	f9 07       	cpc	r31, r25
    13c8:	99 f7       	brne	.-26     	; 0x13b0 <aes_decrypt+0x6e>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    13ca:	61 50       	subi	r22, 0x01	; 1
    13cc:	20 51       	subi	r18, 0x10	; 16
    13ce:	30 40       	sbci	r19, 0x00	; 0
    13d0:	67 ff       	sbrs	r22, 7
    13d2:	d7 cf       	rjmp	.-82     	; 0x1382 <aes_decrypt+0x40>
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	08 95       	ret
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	08 95       	ret
    13dc:	81 e0       	ldi	r24, 0x01	; 1
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
}
    13de:	08 95       	ret

000013e0 <getc0>:
return 0;
}

char getc0(void){
        unsigned char tmp;
        UART0_WAIT_AND_RECEIVE(tmp);
    13e0:	80 91 c0 00 	lds	r24, 0x00C0
    13e4:	87 ff       	sbrs	r24, 7
    13e6:	fc cf       	rjmp	.-8      	; 0x13e0 <getc0>
    13e8:	80 91 c0 00 	lds	r24, 0x00C0
    13ec:	8f 77       	andi	r24, 0x7F	; 127
    13ee:	80 93 c0 00 	sts	0x00C0, r24
    13f2:	80 91 c6 00 	lds	r24, 0x00C6
        return tmp;
}
    13f6:	08 95       	ret

000013f8 <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
    13f8:	90 91 c0 00 	lds	r25, 0x00C0
    13fc:	95 ff       	sbrs	r25, 5
    13fe:	fc cf       	rjmp	.-8      	; 0x13f8 <putc0>
    1400:	90 91 c0 00 	lds	r25, 0x00C0
    1404:	9f 7d       	andi	r25, 0xDF	; 223
    1406:	90 93 c0 00 	sts	0x00C0, r25
    140a:	80 93 c6 00 	sts	0x00C6, r24
}
    140e:	08 95       	ret

00001410 <nrk_uart_rx_signal_get>:
#else

nrk_sig_t nrk_uart_rx_signal_get()
{
   return NRK_ERROR;
}
    1410:	8f ef       	ldi	r24, 0xFF	; 255
    1412:	08 95       	ret

00001414 <nrk_uart_data_ready>:


uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==1)
    1414:	81 30       	cpi	r24, 0x01	; 1
    1416:	19 f4       	brne	.+6      	; 0x141e <nrk_uart_data_ready+0xa>
        {
        if( UCSR1A & BM(RXC1) ) return 1;
    1418:	80 91 c8 00 	lds	r24, 0x00C8
    141c:	04 c0       	rjmp	.+8      	; 0x1426 <nrk_uart_data_ready+0x12>
        }
if(uart_num==0)
    141e:	88 23       	and	r24, r24
    1420:	31 f4       	brne	.+12     	; 0x142e <nrk_uart_data_ready+0x1a>
        {
        if( UCSR0A & BM(RXC0) ) return 1;
    1422:	80 91 c0 00 	lds	r24, 0x00C0
{
   return NRK_ERROR;
}


uint8_t nrk_uart_data_ready(uint8_t uart_num)
    1426:	88 1f       	adc	r24, r24
    1428:	88 27       	eor	r24, r24
    142a:	88 1f       	adc	r24, r24
    142c:	08 95       	ret
        }
if(uart_num==0)
        {
        if( UCSR0A & BM(RXC0) ) return 1;
        }
return 0;
    142e:	80 e0       	ldi	r24, 0x00	; 0
}
    1430:	08 95       	ret

00001432 <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
    1436:	ec 01       	movw	r28, r24
 char c;
   while((c=pgm_read_byte(addr++)))
    1438:	07 c0       	rjmp	.+14     	; 0x1448 <nrk_kprintf+0x16>
        putchar(c);
    143a:	60 91 6a 09 	lds	r22, 0x096A
    143e:	70 91 6b 09 	lds	r23, 0x096B
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <fputc>
    1448:	fe 01       	movw	r30, r28
#endif

void nrk_kprintf( const char *addr)
{
 char c;
   while((c=pgm_read_byte(addr++)))
    144a:	21 96       	adiw	r28, 0x01	; 1
    144c:	84 91       	lpm	r24, Z+
    144e:	88 23       	and	r24, r24
    1450:	a1 f7       	brne	.-24     	; 0x143a <nrk_kprintf+0x8>
        putchar(c);
}
    1452:	df 91       	pop	r29
    1454:	cf 91       	pop	r28
    1456:	08 95       	ret

00001458 <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
    1458:	86 e0       	ldi	r24, 0x06	; 6
    145a:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
    145c:	85 b9       	out	0x05, r24	; 5
#endif
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
    145e:	88 ef       	ldi	r24, 0xF8	; 248
    1460:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
    1462:	80 ef       	ldi	r24, 0xF0	; 240
    1464:	8b b9       	out	0x0b, r24	; 11
        DDRE = BM(UART0_TXD); 
    1466:	82 e0       	ldi	r24, 0x02	; 2
    1468:	8d b9       	out	0x0d, r24	; 13
} 
    146a:	08 95       	ret

0000146c <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    146c:	0e 94 2c 0a 	call	0x1458	; 0x1458 <PORT_INIT>
//SPI_INIT();
}
    1470:	08 95       	ret

00001472 <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1472:	8f 3f       	cpi	r24, 0xFF	; 255
    1474:	09 f4       	brne	.+2      	; 0x1478 <nrk_gpio_set+0x6>
    1476:	83 c0       	rjmp	.+262    	; 0x157e <nrk_gpio_set+0x10c>
        switch (pin & 0x07) {
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	27 70       	andi	r18, 0x07	; 7
    147e:	30 70       	andi	r19, 0x00	; 0
    1480:	23 30       	cpi	r18, 0x03	; 3
    1482:	31 05       	cpc	r19, r1
    1484:	09 f4       	brne	.+2      	; 0x1488 <nrk_gpio_set+0x16>
    1486:	43 c0       	rjmp	.+134    	; 0x150e <nrk_gpio_set+0x9c>
    1488:	24 30       	cpi	r18, 0x04	; 4
    148a:	31 05       	cpc	r19, r1
    148c:	54 f4       	brge	.+20     	; 0x14a2 <nrk_gpio_set+0x30>
    148e:	21 30       	cpi	r18, 0x01	; 1
    1490:	31 05       	cpc	r19, r1
    1492:	11 f1       	breq	.+68     	; 0x14d8 <nrk_gpio_set+0x66>
    1494:	22 30       	cpi	r18, 0x02	; 2
    1496:	31 05       	cpc	r19, r1
    1498:	5c f5       	brge	.+86     	; 0x14f0 <nrk_gpio_set+0x7e>
    149a:	21 15       	cp	r18, r1
    149c:	31 05       	cpc	r19, r1
    149e:	71 f0       	breq	.+28     	; 0x14bc <nrk_gpio_set+0x4a>
    14a0:	70 c0       	rjmp	.+224    	; 0x1582 <nrk_gpio_set+0x110>
    14a2:	25 30       	cpi	r18, 0x05	; 5
    14a4:	31 05       	cpc	r19, r1
    14a6:	09 f4       	brne	.+2      	; 0x14aa <nrk_gpio_set+0x38>
    14a8:	4e c0       	rjmp	.+156    	; 0x1546 <nrk_gpio_set+0xd4>
    14aa:	25 30       	cpi	r18, 0x05	; 5
    14ac:	31 05       	cpc	r19, r1
    14ae:	0c f4       	brge	.+2      	; 0x14b2 <nrk_gpio_set+0x40>
    14b0:	3c c0       	rjmp	.+120    	; 0x152a <nrk_gpio_set+0xb8>
    14b2:	26 30       	cpi	r18, 0x06	; 6
    14b4:	31 05       	cpc	r19, r1
    14b6:	09 f0       	breq	.+2      	; 0x14ba <nrk_gpio_set+0x48>
    14b8:	64 c0       	rjmp	.+200    	; 0x1582 <nrk_gpio_set+0x110>
    14ba:	53 c0       	rjmp	.+166    	; 0x1562 <nrk_gpio_set+0xf0>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    14bc:	92 b1       	in	r25, 0x02	; 2
    14be:	86 95       	lsr	r24
    14c0:	86 95       	lsr	r24
    14c2:	86 95       	lsr	r24
    14c4:	41 e0       	ldi	r20, 0x01	; 1
    14c6:	50 e0       	ldi	r21, 0x00	; 0
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <nrk_gpio_set+0x5c>
    14ca:	44 0f       	add	r20, r20
    14cc:	55 1f       	adc	r21, r21
    14ce:	8a 95       	dec	r24
    14d0:	e2 f7       	brpl	.-8      	; 0x14ca <nrk_gpio_set+0x58>
    14d2:	94 2b       	or	r25, r20
    14d4:	92 b9       	out	0x02, r25	; 2
    14d6:	19 c0       	rjmp	.+50     	; 0x150a <nrk_gpio_set+0x98>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    14d8:	95 b1       	in	r25, 0x05	; 5
    14da:	86 95       	lsr	r24
    14dc:	86 95       	lsr	r24
    14de:	86 95       	lsr	r24
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <nrk_gpio_set+0x74>
    14e2:	22 0f       	add	r18, r18
    14e4:	33 1f       	adc	r19, r19
    14e6:	8a 95       	dec	r24
    14e8:	e2 f7       	brpl	.-8      	; 0x14e2 <nrk_gpio_set+0x70>
    14ea:	92 2b       	or	r25, r18
    14ec:	95 b9       	out	0x05, r25	; 5
    14ee:	0d c0       	rjmp	.+26     	; 0x150a <nrk_gpio_set+0x98>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    14f0:	98 b1       	in	r25, 0x08	; 8
    14f2:	86 95       	lsr	r24
    14f4:	86 95       	lsr	r24
    14f6:	86 95       	lsr	r24
    14f8:	41 e0       	ldi	r20, 0x01	; 1
    14fa:	50 e0       	ldi	r21, 0x00	; 0
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <nrk_gpio_set+0x90>
    14fe:	44 0f       	add	r20, r20
    1500:	55 1f       	adc	r21, r21
    1502:	8a 95       	dec	r24
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <nrk_gpio_set+0x8c>
    1506:	94 2b       	or	r25, r20
    1508:	98 b9       	out	0x08, r25	; 8
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
                default: return -1;
        }
        return 1;
    150a:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    150c:	08 95       	ret
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    150e:	9b b1       	in	r25, 0x0b	; 11
    1510:	86 95       	lsr	r24
    1512:	86 95       	lsr	r24
    1514:	86 95       	lsr	r24
    1516:	41 e0       	ldi	r20, 0x01	; 1
    1518:	50 e0       	ldi	r21, 0x00	; 0
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <nrk_gpio_set+0xae>
    151c:	44 0f       	add	r20, r20
    151e:	55 1f       	adc	r21, r21
    1520:	8a 95       	dec	r24
    1522:	e2 f7       	brpl	.-8      	; 0x151c <nrk_gpio_set+0xaa>
    1524:	94 2b       	or	r25, r20
    1526:	9b b9       	out	0x0b, r25	; 11
    1528:	f0 cf       	rjmp	.-32     	; 0x150a <nrk_gpio_set+0x98>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    152a:	9e b1       	in	r25, 0x0e	; 14
    152c:	86 95       	lsr	r24
    152e:	86 95       	lsr	r24
    1530:	86 95       	lsr	r24
    1532:	41 e0       	ldi	r20, 0x01	; 1
    1534:	50 e0       	ldi	r21, 0x00	; 0
    1536:	02 c0       	rjmp	.+4      	; 0x153c <nrk_gpio_set+0xca>
    1538:	44 0f       	add	r20, r20
    153a:	55 1f       	adc	r21, r21
    153c:	8a 95       	dec	r24
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <nrk_gpio_set+0xc6>
    1540:	94 2b       	or	r25, r20
    1542:	9e b9       	out	0x0e, r25	; 14
    1544:	e2 cf       	rjmp	.-60     	; 0x150a <nrk_gpio_set+0x98>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1546:	91 b3       	in	r25, 0x11	; 17
    1548:	86 95       	lsr	r24
    154a:	86 95       	lsr	r24
    154c:	86 95       	lsr	r24
    154e:	41 e0       	ldi	r20, 0x01	; 1
    1550:	50 e0       	ldi	r21, 0x00	; 0
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <nrk_gpio_set+0xe6>
    1554:	44 0f       	add	r20, r20
    1556:	55 1f       	adc	r21, r21
    1558:	8a 95       	dec	r24
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <nrk_gpio_set+0xe2>
    155c:	94 2b       	or	r25, r20
    155e:	91 bb       	out	0x11, r25	; 17
    1560:	d4 cf       	rjmp	.-88     	; 0x150a <nrk_gpio_set+0x98>
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1562:	94 b3       	in	r25, 0x14	; 20
    1564:	86 95       	lsr	r24
    1566:	86 95       	lsr	r24
    1568:	86 95       	lsr	r24
    156a:	41 e0       	ldi	r20, 0x01	; 1
    156c:	50 e0       	ldi	r21, 0x00	; 0
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <nrk_gpio_set+0x102>
    1570:	44 0f       	add	r20, r20
    1572:	55 1f       	adc	r21, r21
    1574:	8a 95       	dec	r24
    1576:	e2 f7       	brpl	.-8      	; 0x1570 <nrk_gpio_set+0xfe>
    1578:	94 2b       	or	r25, r20
    157a:	94 bb       	out	0x14, r25	; 20
    157c:	c6 cf       	rjmp	.-116    	; 0x150a <nrk_gpio_set+0x98>
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    157e:	8f ef       	ldi	r24, 0xFF	; 255
    1580:	08 95       	ret
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
                default: return -1;
    1582:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    1584:	08 95       	ret

00001586 <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1586:	8f 3f       	cpi	r24, 0xFF	; 255
    1588:	09 f4       	brne	.+2      	; 0x158c <nrk_gpio_clr+0x6>
    158a:	7b c0       	rjmp	.+246    	; 0x1682 <nrk_gpio_clr+0xfc>
        switch (pin & 0x07) {
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	27 70       	andi	r18, 0x07	; 7
    1592:	30 70       	andi	r19, 0x00	; 0
    1594:	23 30       	cpi	r18, 0x03	; 3
    1596:	31 05       	cpc	r19, r1
    1598:	09 f4       	brne	.+2      	; 0x159c <nrk_gpio_clr+0x16>
    159a:	46 c0       	rjmp	.+140    	; 0x1628 <nrk_gpio_clr+0xa2>
    159c:	24 30       	cpi	r18, 0x04	; 4
    159e:	31 05       	cpc	r19, r1
    15a0:	54 f4       	brge	.+20     	; 0x15b6 <nrk_gpio_clr+0x30>
    15a2:	21 30       	cpi	r18, 0x01	; 1
    15a4:	31 05       	cpc	r19, r1
    15a6:	19 f1       	breq	.+70     	; 0x15ee <nrk_gpio_clr+0x68>
    15a8:	22 30       	cpi	r18, 0x02	; 2
    15aa:	31 05       	cpc	r19, r1
    15ac:	6c f5       	brge	.+90     	; 0x1608 <nrk_gpio_clr+0x82>
    15ae:	21 15       	cp	r18, r1
    15b0:	31 05       	cpc	r19, r1
    15b2:	71 f0       	breq	.+28     	; 0x15d0 <nrk_gpio_clr+0x4a>
    15b4:	68 c0       	rjmp	.+208    	; 0x1686 <nrk_gpio_clr+0x100>
    15b6:	25 30       	cpi	r18, 0x05	; 5
    15b8:	31 05       	cpc	r19, r1
    15ba:	09 f4       	brne	.+2      	; 0x15be <nrk_gpio_clr+0x38>
    15bc:	53 c0       	rjmp	.+166    	; 0x1664 <nrk_gpio_clr+0xde>
    15be:	25 30       	cpi	r18, 0x05	; 5
    15c0:	31 05       	cpc	r19, r1
    15c2:	0c f4       	brge	.+2      	; 0x15c6 <nrk_gpio_clr+0x40>
    15c4:	40 c0       	rjmp	.+128    	; 0x1646 <nrk_gpio_clr+0xc0>
    15c6:	26 30       	cpi	r18, 0x06	; 6
    15c8:	31 05       	cpc	r19, r1
    15ca:	09 f0       	breq	.+2      	; 0x15ce <nrk_gpio_clr+0x48>
    15cc:	5c c0       	rjmp	.+184    	; 0x1686 <nrk_gpio_clr+0x100>
    15ce:	4a c0       	rjmp	.+148    	; 0x1664 <nrk_gpio_clr+0xde>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    15d0:	92 b1       	in	r25, 0x02	; 2
    15d2:	86 95       	lsr	r24
    15d4:	86 95       	lsr	r24
    15d6:	86 95       	lsr	r24
    15d8:	41 e0       	ldi	r20, 0x01	; 1
    15da:	50 e0       	ldi	r21, 0x00	; 0
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <nrk_gpio_clr+0x5c>
    15de:	44 0f       	add	r20, r20
    15e0:	55 1f       	adc	r21, r21
    15e2:	8a 95       	dec	r24
    15e4:	e2 f7       	brpl	.-8      	; 0x15de <nrk_gpio_clr+0x58>
    15e6:	40 95       	com	r20
    15e8:	49 23       	and	r20, r25
    15ea:	42 b9       	out	0x02, r20	; 2
    15ec:	1b c0       	rjmp	.+54     	; 0x1624 <nrk_gpio_clr+0x9e>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    15ee:	95 b1       	in	r25, 0x05	; 5
    15f0:	86 95       	lsr	r24
    15f2:	86 95       	lsr	r24
    15f4:	86 95       	lsr	r24
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <nrk_gpio_clr+0x76>
    15f8:	22 0f       	add	r18, r18
    15fa:	33 1f       	adc	r19, r19
    15fc:	8a 95       	dec	r24
    15fe:	e2 f7       	brpl	.-8      	; 0x15f8 <nrk_gpio_clr+0x72>
    1600:	20 95       	com	r18
    1602:	29 23       	and	r18, r25
    1604:	25 b9       	out	0x05, r18	; 5
    1606:	0e c0       	rjmp	.+28     	; 0x1624 <nrk_gpio_clr+0x9e>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1608:	98 b1       	in	r25, 0x08	; 8
    160a:	86 95       	lsr	r24
    160c:	86 95       	lsr	r24
    160e:	86 95       	lsr	r24
    1610:	41 e0       	ldi	r20, 0x01	; 1
    1612:	50 e0       	ldi	r21, 0x00	; 0
    1614:	02 c0       	rjmp	.+4      	; 0x161a <nrk_gpio_clr+0x94>
    1616:	44 0f       	add	r20, r20
    1618:	55 1f       	adc	r21, r21
    161a:	8a 95       	dec	r24
    161c:	e2 f7       	brpl	.-8      	; 0x1616 <nrk_gpio_clr+0x90>
    161e:	40 95       	com	r20
    1620:	49 23       	and	r20, r25
    1622:	48 b9       	out	0x08, r20	; 8
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                default: return -1;
        }
        return 1;
    1624:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1626:	08 95       	ret
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1628:	9b b1       	in	r25, 0x0b	; 11
    162a:	86 95       	lsr	r24
    162c:	86 95       	lsr	r24
    162e:	86 95       	lsr	r24
    1630:	41 e0       	ldi	r20, 0x01	; 1
    1632:	50 e0       	ldi	r21, 0x00	; 0
    1634:	02 c0       	rjmp	.+4      	; 0x163a <nrk_gpio_clr+0xb4>
    1636:	44 0f       	add	r20, r20
    1638:	55 1f       	adc	r21, r21
    163a:	8a 95       	dec	r24
    163c:	e2 f7       	brpl	.-8      	; 0x1636 <nrk_gpio_clr+0xb0>
    163e:	40 95       	com	r20
    1640:	49 23       	and	r20, r25
    1642:	4b b9       	out	0x0b, r20	; 11
    1644:	ef cf       	rjmp	.-34     	; 0x1624 <nrk_gpio_clr+0x9e>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1646:	9e b1       	in	r25, 0x0e	; 14
    1648:	86 95       	lsr	r24
    164a:	86 95       	lsr	r24
    164c:	86 95       	lsr	r24
    164e:	41 e0       	ldi	r20, 0x01	; 1
    1650:	50 e0       	ldi	r21, 0x00	; 0
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <nrk_gpio_clr+0xd2>
    1654:	44 0f       	add	r20, r20
    1656:	55 1f       	adc	r21, r21
    1658:	8a 95       	dec	r24
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <nrk_gpio_clr+0xce>
    165c:	40 95       	com	r20
    165e:	49 23       	and	r20, r25
    1660:	4e b9       	out	0x0e, r20	; 14
    1662:	e0 cf       	rjmp	.-64     	; 0x1624 <nrk_gpio_clr+0x9e>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1664:	91 b3       	in	r25, 0x11	; 17
    1666:	86 95       	lsr	r24
    1668:	86 95       	lsr	r24
    166a:	86 95       	lsr	r24
    166c:	41 e0       	ldi	r20, 0x01	; 1
    166e:	50 e0       	ldi	r21, 0x00	; 0
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <nrk_gpio_clr+0xf0>
    1672:	44 0f       	add	r20, r20
    1674:	55 1f       	adc	r21, r21
    1676:	8a 95       	dec	r24
    1678:	e2 f7       	brpl	.-8      	; 0x1672 <nrk_gpio_clr+0xec>
    167a:	40 95       	com	r20
    167c:	49 23       	and	r20, r25
    167e:	41 bb       	out	0x11, r20	; 17
    1680:	d1 cf       	rjmp	.-94     	; 0x1624 <nrk_gpio_clr+0x9e>
        return 1;
}

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1682:	8f ef       	ldi	r24, 0xFF	; 255
    1684:	08 95       	ret
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                default: return -1;
    1686:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    1688:	08 95       	ret

0000168a <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    168a:	8f 3f       	cpi	r24, 0xFF	; 255
    168c:	b1 f1       	breq	.+108    	; 0x16fa <nrk_gpio_get+0x70>
        switch (pin & 0x07) {
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	27 70       	andi	r18, 0x07	; 7
    1694:	30 70       	andi	r19, 0x00	; 0
    1696:	23 30       	cpi	r18, 0x03	; 3
    1698:	31 05       	cpc	r19, r1
    169a:	e9 f0       	breq	.+58     	; 0x16d6 <nrk_gpio_get+0x4c>
    169c:	24 30       	cpi	r18, 0x04	; 4
    169e:	31 05       	cpc	r19, r1
    16a0:	54 f4       	brge	.+20     	; 0x16b6 <nrk_gpio_get+0x2c>
    16a2:	21 30       	cpi	r18, 0x01	; 1
    16a4:	31 05       	cpc	r19, r1
    16a6:	99 f0       	breq	.+38     	; 0x16ce <nrk_gpio_get+0x44>
    16a8:	22 30       	cpi	r18, 0x02	; 2
    16aa:	31 05       	cpc	r19, r1
    16ac:	94 f4       	brge	.+36     	; 0x16d2 <nrk_gpio_get+0x48>
    16ae:	21 15       	cp	r18, r1
    16b0:	31 05       	cpc	r19, r1
    16b2:	59 f0       	breq	.+22     	; 0x16ca <nrk_gpio_get+0x40>
    16b4:	22 c0       	rjmp	.+68     	; 0x16fa <nrk_gpio_get+0x70>
    16b6:	25 30       	cpi	r18, 0x05	; 5
    16b8:	31 05       	cpc	r19, r1
    16ba:	89 f0       	breq	.+34     	; 0x16de <nrk_gpio_get+0x54>
    16bc:	25 30       	cpi	r18, 0x05	; 5
    16be:	31 05       	cpc	r19, r1
    16c0:	64 f0       	brlt	.+24     	; 0x16da <nrk_gpio_get+0x50>
    16c2:	26 30       	cpi	r18, 0x06	; 6
    16c4:	31 05       	cpc	r19, r1
    16c6:	c9 f4       	brne	.+50     	; 0x16fa <nrk_gpio_get+0x70>
    16c8:	0c c0       	rjmp	.+24     	; 0x16e2 <nrk_gpio_get+0x58>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    16ca:	20 b1       	in	r18, 0x00	; 0
    16cc:	0b c0       	rjmp	.+22     	; 0x16e4 <nrk_gpio_get+0x5a>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    16ce:	23 b1       	in	r18, 0x03	; 3
    16d0:	09 c0       	rjmp	.+18     	; 0x16e4 <nrk_gpio_get+0x5a>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    16d2:	26 b1       	in	r18, 0x06	; 6
    16d4:	07 c0       	rjmp	.+14     	; 0x16e4 <nrk_gpio_get+0x5a>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    16d6:	29 b1       	in	r18, 0x09	; 9
    16d8:	05 c0       	rjmp	.+10     	; 0x16e4 <nrk_gpio_get+0x5a>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    16da:	2c b1       	in	r18, 0x0c	; 12
    16dc:	03 c0       	rjmp	.+6      	; 0x16e4 <nrk_gpio_get+0x5a>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    16de:	2f b1       	in	r18, 0x0f	; 15
    16e0:	01 c0       	rjmp	.+2      	; 0x16e4 <nrk_gpio_get+0x5a>
                case NRK_PORTG:
                        return !!(PING & BM((pin & 0xF8) >> 3));
    16e2:	22 b3       	in	r18, 0x12	; 18
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	86 95       	lsr	r24
    16e8:	86 95       	lsr	r24
    16ea:	86 95       	lsr	r24
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <nrk_gpio_get+0x68>
    16ee:	35 95       	asr	r19
    16f0:	27 95       	ror	r18
    16f2:	8a 95       	dec	r24
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <nrk_gpio_get+0x64>
    16f6:	21 70       	andi	r18, 0x01	; 1
    16f8:	01 c0       	rjmp	.+2      	; 0x16fc <nrk_gpio_get+0x72>
                default: return -1;
    16fa:	2f ef       	ldi	r18, 0xFF	; 255
        }
        return 1;
}
    16fc:	82 2f       	mov	r24, r18
    16fe:	08 95       	ret

00001700 <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    1700:	8f 3f       	cpi	r24, 0xFF	; 255
    1702:	09 f4       	brne	.+2      	; 0x1706 <nrk_gpio_toggle+0x6>
    1704:	23 c1       	rjmp	.+582    	; 0x194c <nrk_gpio_toggle+0x24c>
        switch (pin & 0x07) {
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	27 70       	andi	r18, 0x07	; 7
    170c:	30 70       	andi	r19, 0x00	; 0
    170e:	23 30       	cpi	r18, 0x03	; 3
    1710:	31 05       	cpc	r19, r1
    1712:	09 f4       	brne	.+2      	; 0x1716 <nrk_gpio_toggle+0x16>
    1714:	82 c0       	rjmp	.+260    	; 0x181a <nrk_gpio_toggle+0x11a>
    1716:	24 30       	cpi	r18, 0x04	; 4
    1718:	31 05       	cpc	r19, r1
    171a:	5c f4       	brge	.+22     	; 0x1732 <nrk_gpio_toggle+0x32>
    171c:	21 30       	cpi	r18, 0x01	; 1
    171e:	31 05       	cpc	r19, r1
    1720:	d9 f1       	breq	.+118    	; 0x1798 <nrk_gpio_toggle+0x98>
    1722:	22 30       	cpi	r18, 0x02	; 2
    1724:	31 05       	cpc	r19, r1
    1726:	0c f0       	brlt	.+2      	; 0x172a <nrk_gpio_toggle+0x2a>
    1728:	52 c0       	rjmp	.+164    	; 0x17ce <nrk_gpio_toggle+0xce>
    172a:	21 15       	cp	r18, r1
    172c:	31 05       	cpc	r19, r1
    172e:	71 f0       	breq	.+28     	; 0x174c <nrk_gpio_toggle+0x4c>
    1730:	0f c1       	rjmp	.+542    	; 0x1950 <nrk_gpio_toggle+0x250>
    1732:	25 30       	cpi	r18, 0x05	; 5
    1734:	31 05       	cpc	r19, r1
    1736:	09 f4       	brne	.+2      	; 0x173a <nrk_gpio_toggle+0x3a>
    1738:	bd c0       	rjmp	.+378    	; 0x18b4 <nrk_gpio_toggle+0x1b4>
    173a:	25 30       	cpi	r18, 0x05	; 5
    173c:	31 05       	cpc	r19, r1
    173e:	0c f4       	brge	.+2      	; 0x1742 <nrk_gpio_toggle+0x42>
    1740:	93 c0       	rjmp	.+294    	; 0x1868 <nrk_gpio_toggle+0x168>
    1742:	26 30       	cpi	r18, 0x06	; 6
    1744:	31 05       	cpc	r19, r1
    1746:	09 f0       	breq	.+2      	; 0x174a <nrk_gpio_toggle+0x4a>
    1748:	03 c1       	rjmp	.+518    	; 0x1950 <nrk_gpio_toggle+0x250>
    174a:	da c0       	rjmp	.+436    	; 0x1900 <nrk_gpio_toggle+0x200>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    174c:	90 b1       	in	r25, 0x00	; 0
    174e:	86 95       	lsr	r24
    1750:	86 95       	lsr	r24
    1752:	86 95       	lsr	r24
    1754:	28 2f       	mov	r18, r24
    1756:	89 2f       	mov	r24, r25
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	02 2e       	mov	r0, r18
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <nrk_gpio_toggle+0x62>
    175e:	95 95       	asr	r25
    1760:	87 95       	ror	r24
    1762:	0a 94       	dec	r0
    1764:	e2 f7       	brpl	.-8      	; 0x175e <nrk_gpio_toggle+0x5e>
    1766:	80 fd       	sbrc	r24, 0
    1768:	0b c0       	rjmp	.+22     	; 0x1780 <nrk_gpio_toggle+0x80>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    176a:	32 b1       	in	r19, 0x02	; 2
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <nrk_gpio_toggle+0x76>
    1772:	88 0f       	add	r24, r24
    1774:	99 1f       	adc	r25, r25
    1776:	2a 95       	dec	r18
    1778:	e2 f7       	brpl	.-8      	; 0x1772 <nrk_gpio_toggle+0x72>
    177a:	38 2b       	or	r19, r24
    177c:	32 b9       	out	0x02, r19	; 2
    177e:	66 c0       	rjmp	.+204    	; 0x184c <nrk_gpio_toggle+0x14c>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    1780:	32 b1       	in	r19, 0x02	; 2
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	02 c0       	rjmp	.+4      	; 0x178c <nrk_gpio_toggle+0x8c>
    1788:	88 0f       	add	r24, r24
    178a:	99 1f       	adc	r25, r25
    178c:	2a 95       	dec	r18
    178e:	e2 f7       	brpl	.-8      	; 0x1788 <nrk_gpio_toggle+0x88>
    1790:	80 95       	com	r24
    1792:	83 23       	and	r24, r19
    1794:	82 b9       	out	0x02, r24	; 2
    1796:	5a c0       	rjmp	.+180    	; 0x184c <nrk_gpio_toggle+0x14c>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    1798:	43 b1       	in	r20, 0x03	; 3
    179a:	86 95       	lsr	r24
    179c:	86 95       	lsr	r24
    179e:	86 95       	lsr	r24
    17a0:	50 e0       	ldi	r21, 0x00	; 0
    17a2:	08 2e       	mov	r0, r24
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <nrk_gpio_toggle+0xaa>
    17a6:	55 95       	asr	r21
    17a8:	47 95       	ror	r20
    17aa:	0a 94       	dec	r0
    17ac:	e2 f7       	brpl	.-8      	; 0x17a6 <nrk_gpio_toggle+0xa6>
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <nrk_gpio_toggle+0xb4>
    17b0:	22 0f       	add	r18, r18
    17b2:	33 1f       	adc	r19, r19
    17b4:	8a 95       	dec	r24
    17b6:	e2 f7       	brpl	.-8      	; 0x17b0 <nrk_gpio_toggle+0xb0>
    17b8:	40 fd       	sbrc	r20, 0
    17ba:	04 c0       	rjmp	.+8      	; 0x17c4 <nrk_gpio_toggle+0xc4>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    17bc:	85 b1       	in	r24, 0x05	; 5
    17be:	82 2b       	or	r24, r18
    17c0:	85 b9       	out	0x05, r24	; 5
    17c2:	44 c0       	rjmp	.+136    	; 0x184c <nrk_gpio_toggle+0x14c>
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    17c4:	85 b1       	in	r24, 0x05	; 5
    17c6:	20 95       	com	r18
    17c8:	28 23       	and	r18, r24
    17ca:	25 b9       	out	0x05, r18	; 5
    17cc:	3f c0       	rjmp	.+126    	; 0x184c <nrk_gpio_toggle+0x14c>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    17ce:	96 b1       	in	r25, 0x06	; 6
    17d0:	86 95       	lsr	r24
    17d2:	86 95       	lsr	r24
    17d4:	86 95       	lsr	r24
    17d6:	28 2f       	mov	r18, r24
    17d8:	89 2f       	mov	r24, r25
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	02 2e       	mov	r0, r18
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <nrk_gpio_toggle+0xe4>
    17e0:	95 95       	asr	r25
    17e2:	87 95       	ror	r24
    17e4:	0a 94       	dec	r0
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <nrk_gpio_toggle+0xe0>
    17e8:	80 fd       	sbrc	r24, 0
    17ea:	0b c0       	rjmp	.+22     	; 0x1802 <nrk_gpio_toggle+0x102>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    17ec:	38 b1       	in	r19, 0x08	; 8
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <nrk_gpio_toggle+0xf8>
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	2a 95       	dec	r18
    17fa:	e2 f7       	brpl	.-8      	; 0x17f4 <nrk_gpio_toggle+0xf4>
    17fc:	38 2b       	or	r19, r24
    17fe:	38 b9       	out	0x08, r19	; 8
    1800:	25 c0       	rjmp	.+74     	; 0x184c <nrk_gpio_toggle+0x14c>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    1802:	38 b1       	in	r19, 0x08	; 8
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	02 c0       	rjmp	.+4      	; 0x180e <nrk_gpio_toggle+0x10e>
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	2a 95       	dec	r18
    1810:	e2 f7       	brpl	.-8      	; 0x180a <nrk_gpio_toggle+0x10a>
    1812:	80 95       	com	r24
    1814:	83 23       	and	r24, r19
    1816:	88 b9       	out	0x08, r24	; 8
    1818:	19 c0       	rjmp	.+50     	; 0x184c <nrk_gpio_toggle+0x14c>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    181a:	99 b1       	in	r25, 0x09	; 9
    181c:	86 95       	lsr	r24
    181e:	86 95       	lsr	r24
    1820:	86 95       	lsr	r24
    1822:	28 2f       	mov	r18, r24
    1824:	89 2f       	mov	r24, r25
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	02 2e       	mov	r0, r18
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <nrk_gpio_toggle+0x130>
    182c:	95 95       	asr	r25
    182e:	87 95       	ror	r24
    1830:	0a 94       	dec	r0
    1832:	e2 f7       	brpl	.-8      	; 0x182c <nrk_gpio_toggle+0x12c>
    1834:	80 fd       	sbrc	r24, 0
    1836:	0c c0       	rjmp	.+24     	; 0x1850 <nrk_gpio_toggle+0x150>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    1838:	3b b1       	in	r19, 0x0b	; 11
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <nrk_gpio_toggle+0x144>
    1840:	88 0f       	add	r24, r24
    1842:	99 1f       	adc	r25, r25
    1844:	2a 95       	dec	r18
    1846:	e2 f7       	brpl	.-8      	; 0x1840 <nrk_gpio_toggle+0x140>
    1848:	38 2b       	or	r19, r24
    184a:	3b b9       	out	0x0b, r19	; 11
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
        }
        return 1;
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	08 95       	ret
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    1850:	3b b1       	in	r19, 0x0b	; 11
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	02 c0       	rjmp	.+4      	; 0x185c <nrk_gpio_toggle+0x15c>
    1858:	88 0f       	add	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	2a 95       	dec	r18
    185e:	e2 f7       	brpl	.-8      	; 0x1858 <nrk_gpio_toggle+0x158>
    1860:	80 95       	com	r24
    1862:	83 23       	and	r24, r19
    1864:	8b b9       	out	0x0b, r24	; 11
    1866:	f2 cf       	rjmp	.-28     	; 0x184c <nrk_gpio_toggle+0x14c>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    1868:	9c b1       	in	r25, 0x0c	; 12
    186a:	86 95       	lsr	r24
    186c:	86 95       	lsr	r24
    186e:	86 95       	lsr	r24
    1870:	28 2f       	mov	r18, r24
    1872:	89 2f       	mov	r24, r25
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	02 2e       	mov	r0, r18
    1878:	02 c0       	rjmp	.+4      	; 0x187e <nrk_gpio_toggle+0x17e>
    187a:	95 95       	asr	r25
    187c:	87 95       	ror	r24
    187e:	0a 94       	dec	r0
    1880:	e2 f7       	brpl	.-8      	; 0x187a <nrk_gpio_toggle+0x17a>
    1882:	80 fd       	sbrc	r24, 0
    1884:	0b c0       	rjmp	.+22     	; 0x189c <nrk_gpio_toggle+0x19c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    1886:	3e b1       	in	r19, 0x0e	; 14
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <nrk_gpio_toggle+0x192>
    188e:	88 0f       	add	r24, r24
    1890:	99 1f       	adc	r25, r25
    1892:	2a 95       	dec	r18
    1894:	e2 f7       	brpl	.-8      	; 0x188e <nrk_gpio_toggle+0x18e>
    1896:	38 2b       	or	r19, r24
    1898:	3e b9       	out	0x0e, r19	; 14
    189a:	d8 cf       	rjmp	.-80     	; 0x184c <nrk_gpio_toggle+0x14c>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    189c:	3e b1       	in	r19, 0x0e	; 14
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <nrk_gpio_toggle+0x1a8>
    18a4:	88 0f       	add	r24, r24
    18a6:	99 1f       	adc	r25, r25
    18a8:	2a 95       	dec	r18
    18aa:	e2 f7       	brpl	.-8      	; 0x18a4 <nrk_gpio_toggle+0x1a4>
    18ac:	80 95       	com	r24
    18ae:	83 23       	and	r24, r19
    18b0:	8e b9       	out	0x0e, r24	; 14
    18b2:	cc cf       	rjmp	.-104    	; 0x184c <nrk_gpio_toggle+0x14c>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    18b4:	9f b1       	in	r25, 0x0f	; 15
    18b6:	86 95       	lsr	r24
    18b8:	86 95       	lsr	r24
    18ba:	86 95       	lsr	r24
    18bc:	28 2f       	mov	r18, r24
    18be:	89 2f       	mov	r24, r25
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	02 2e       	mov	r0, r18
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <nrk_gpio_toggle+0x1ca>
    18c6:	95 95       	asr	r25
    18c8:	87 95       	ror	r24
    18ca:	0a 94       	dec	r0
    18cc:	e2 f7       	brpl	.-8      	; 0x18c6 <nrk_gpio_toggle+0x1c6>
    18ce:	80 fd       	sbrc	r24, 0
    18d0:	0b c0       	rjmp	.+22     	; 0x18e8 <nrk_gpio_toggle+0x1e8>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    18d2:	31 b3       	in	r19, 0x11	; 17
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <nrk_gpio_toggle+0x1de>
    18da:	88 0f       	add	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	2a 95       	dec	r18
    18e0:	e2 f7       	brpl	.-8      	; 0x18da <nrk_gpio_toggle+0x1da>
    18e2:	38 2b       	or	r19, r24
    18e4:	31 bb       	out	0x11, r19	; 17
    18e6:	b2 cf       	rjmp	.-156    	; 0x184c <nrk_gpio_toggle+0x14c>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    18e8:	31 b3       	in	r19, 0x11	; 17
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <nrk_gpio_toggle+0x1f4>
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	2a 95       	dec	r18
    18f6:	e2 f7       	brpl	.-8      	; 0x18f0 <nrk_gpio_toggle+0x1f0>
    18f8:	80 95       	com	r24
    18fa:	83 23       	and	r24, r19
    18fc:	81 bb       	out	0x11, r24	; 17
    18fe:	a6 cf       	rjmp	.-180    	; 0x184c <nrk_gpio_toggle+0x14c>
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    1900:	92 b3       	in	r25, 0x12	; 18
    1902:	86 95       	lsr	r24
    1904:	86 95       	lsr	r24
    1906:	86 95       	lsr	r24
    1908:	28 2f       	mov	r18, r24
    190a:	89 2f       	mov	r24, r25
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	02 2e       	mov	r0, r18
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <nrk_gpio_toggle+0x216>
    1912:	95 95       	asr	r25
    1914:	87 95       	ror	r24
    1916:	0a 94       	dec	r0
    1918:	e2 f7       	brpl	.-8      	; 0x1912 <nrk_gpio_toggle+0x212>
    191a:	80 fd       	sbrc	r24, 0
    191c:	0b c0       	rjmp	.+22     	; 0x1934 <nrk_gpio_toggle+0x234>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    191e:	34 b3       	in	r19, 0x14	; 20
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	02 c0       	rjmp	.+4      	; 0x192a <nrk_gpio_toggle+0x22a>
    1926:	88 0f       	add	r24, r24
    1928:	99 1f       	adc	r25, r25
    192a:	2a 95       	dec	r18
    192c:	e2 f7       	brpl	.-8      	; 0x1926 <nrk_gpio_toggle+0x226>
    192e:	38 2b       	or	r19, r24
    1930:	34 bb       	out	0x14, r19	; 20
    1932:	8c cf       	rjmp	.-232    	; 0x184c <nrk_gpio_toggle+0x14c>
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
    1934:	34 b3       	in	r19, 0x14	; 20
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <nrk_gpio_toggle+0x240>
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	2a 95       	dec	r18
    1942:	e2 f7       	brpl	.-8      	; 0x193c <nrk_gpio_toggle+0x23c>
    1944:	80 95       	com	r24
    1946:	83 23       	and	r24, r19
    1948:	84 bb       	out	0x14, r24	; 20
    194a:	80 cf       	rjmp	.-256    	; 0x184c <nrk_gpio_toggle+0x14c>
        return 1;
}

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    194c:	8f ef       	ldi	r24, 0xFF	; 255
    194e:	08 95       	ret
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
    1950:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    1952:	08 95       	ret

00001954 <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1954:	8f 3f       	cpi	r24, 0xFF	; 255
    1956:	09 f4       	brne	.+2      	; 0x195a <nrk_gpio_direction+0x6>
    1958:	0d c1       	rjmp	.+538    	; 0x1b74 <nrk_gpio_direction+0x220>
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
        if (pin_direction == NRK_PIN_INPUT) {
    195e:	66 23       	and	r22, r22
    1960:	09 f0       	breq	.+2      	; 0x1964 <nrk_gpio_direction+0x10>
    1962:	87 c0       	rjmp	.+270    	; 0x1a72 <nrk_gpio_direction+0x11e>
                switch (pin & 0x07) {
    1964:	27 70       	andi	r18, 0x07	; 7
    1966:	30 70       	andi	r19, 0x00	; 0
    1968:	23 30       	cpi	r18, 0x03	; 3
    196a:	31 05       	cpc	r19, r1
    196c:	09 f4       	brne	.+2      	; 0x1970 <nrk_gpio_direction+0x1c>
    196e:	45 c0       	rjmp	.+138    	; 0x19fa <nrk_gpio_direction+0xa6>
    1970:	24 30       	cpi	r18, 0x04	; 4
    1972:	31 05       	cpc	r19, r1
    1974:	54 f4       	brge	.+20     	; 0x198a <nrk_gpio_direction+0x36>
    1976:	21 30       	cpi	r18, 0x01	; 1
    1978:	31 05       	cpc	r19, r1
    197a:	19 f1       	breq	.+70     	; 0x19c2 <nrk_gpio_direction+0x6e>
    197c:	22 30       	cpi	r18, 0x02	; 2
    197e:	31 05       	cpc	r19, r1
    1980:	6c f5       	brge	.+90     	; 0x19dc <nrk_gpio_direction+0x88>
    1982:	21 15       	cp	r18, r1
    1984:	31 05       	cpc	r19, r1
    1986:	71 f0       	breq	.+28     	; 0x19a4 <nrk_gpio_direction+0x50>
    1988:	f5 c0       	rjmp	.+490    	; 0x1b74 <nrk_gpio_direction+0x220>
    198a:	25 30       	cpi	r18, 0x05	; 5
    198c:	31 05       	cpc	r19, r1
    198e:	09 f4       	brne	.+2      	; 0x1992 <nrk_gpio_direction+0x3e>
    1990:	52 c0       	rjmp	.+164    	; 0x1a36 <nrk_gpio_direction+0xe2>
    1992:	25 30       	cpi	r18, 0x05	; 5
    1994:	31 05       	cpc	r19, r1
    1996:	0c f4       	brge	.+2      	; 0x199a <nrk_gpio_direction+0x46>
    1998:	3f c0       	rjmp	.+126    	; 0x1a18 <nrk_gpio_direction+0xc4>
    199a:	26 30       	cpi	r18, 0x06	; 6
    199c:	31 05       	cpc	r19, r1
    199e:	09 f0       	breq	.+2      	; 0x19a2 <nrk_gpio_direction+0x4e>
    19a0:	e9 c0       	rjmp	.+466    	; 0x1b74 <nrk_gpio_direction+0x220>
    19a2:	58 c0       	rjmp	.+176    	; 0x1a54 <nrk_gpio_direction+0x100>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    19a4:	91 b1       	in	r25, 0x01	; 1
    19a6:	86 95       	lsr	r24
    19a8:	86 95       	lsr	r24
    19aa:	86 95       	lsr	r24
    19ac:	41 e0       	ldi	r20, 0x01	; 1
    19ae:	50 e0       	ldi	r21, 0x00	; 0
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <nrk_gpio_direction+0x62>
    19b2:	44 0f       	add	r20, r20
    19b4:	55 1f       	adc	r21, r21
    19b6:	8a 95       	dec	r24
    19b8:	e2 f7       	brpl	.-8      	; 0x19b2 <nrk_gpio_direction+0x5e>
    19ba:	40 95       	com	r20
    19bc:	49 23       	and	r20, r25
    19be:	41 b9       	out	0x01, r20	; 1
    19c0:	d7 c0       	rjmp	.+430    	; 0x1b70 <nrk_gpio_direction+0x21c>
                                //PORTA |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    19c2:	94 b1       	in	r25, 0x04	; 4
    19c4:	86 95       	lsr	r24
    19c6:	86 95       	lsr	r24
    19c8:	86 95       	lsr	r24
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <nrk_gpio_direction+0x7c>
    19cc:	22 0f       	add	r18, r18
    19ce:	33 1f       	adc	r19, r19
    19d0:	8a 95       	dec	r24
    19d2:	e2 f7       	brpl	.-8      	; 0x19cc <nrk_gpio_direction+0x78>
    19d4:	20 95       	com	r18
    19d6:	29 23       	and	r18, r25
    19d8:	24 b9       	out	0x04, r18	; 4
    19da:	ca c0       	rjmp	.+404    	; 0x1b70 <nrk_gpio_direction+0x21c>
                                //PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    19dc:	97 b1       	in	r25, 0x07	; 7
    19de:	86 95       	lsr	r24
    19e0:	86 95       	lsr	r24
    19e2:	86 95       	lsr	r24
    19e4:	41 e0       	ldi	r20, 0x01	; 1
    19e6:	50 e0       	ldi	r21, 0x00	; 0
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <nrk_gpio_direction+0x9a>
    19ea:	44 0f       	add	r20, r20
    19ec:	55 1f       	adc	r21, r21
    19ee:	8a 95       	dec	r24
    19f0:	e2 f7       	brpl	.-8      	; 0x19ea <nrk_gpio_direction+0x96>
    19f2:	40 95       	com	r20
    19f4:	49 23       	and	r20, r25
    19f6:	47 b9       	out	0x07, r20	; 7
    19f8:	bb c0       	rjmp	.+374    	; 0x1b70 <nrk_gpio_direction+0x21c>
                                //PORTC |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    19fa:	9a b1       	in	r25, 0x0a	; 10
    19fc:	86 95       	lsr	r24
    19fe:	86 95       	lsr	r24
    1a00:	86 95       	lsr	r24
    1a02:	41 e0       	ldi	r20, 0x01	; 1
    1a04:	50 e0       	ldi	r21, 0x00	; 0
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <nrk_gpio_direction+0xb8>
    1a08:	44 0f       	add	r20, r20
    1a0a:	55 1f       	adc	r21, r21
    1a0c:	8a 95       	dec	r24
    1a0e:	e2 f7       	brpl	.-8      	; 0x1a08 <nrk_gpio_direction+0xb4>
    1a10:	40 95       	com	r20
    1a12:	49 23       	and	r20, r25
    1a14:	4a b9       	out	0x0a, r20	; 10
    1a16:	ac c0       	rjmp	.+344    	; 0x1b70 <nrk_gpio_direction+0x21c>
                                //PORTD |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    1a18:	9d b1       	in	r25, 0x0d	; 13
    1a1a:	86 95       	lsr	r24
    1a1c:	86 95       	lsr	r24
    1a1e:	86 95       	lsr	r24
    1a20:	41 e0       	ldi	r20, 0x01	; 1
    1a22:	50 e0       	ldi	r21, 0x00	; 0
    1a24:	02 c0       	rjmp	.+4      	; 0x1a2a <nrk_gpio_direction+0xd6>
    1a26:	44 0f       	add	r20, r20
    1a28:	55 1f       	adc	r21, r21
    1a2a:	8a 95       	dec	r24
    1a2c:	e2 f7       	brpl	.-8      	; 0x1a26 <nrk_gpio_direction+0xd2>
    1a2e:	40 95       	com	r20
    1a30:	49 23       	and	r20, r25
    1a32:	4d b9       	out	0x0d, r20	; 13
    1a34:	9d c0       	rjmp	.+314    	; 0x1b70 <nrk_gpio_direction+0x21c>
                                //PORTE |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    1a36:	90 b3       	in	r25, 0x10	; 16
    1a38:	86 95       	lsr	r24
    1a3a:	86 95       	lsr	r24
    1a3c:	86 95       	lsr	r24
    1a3e:	41 e0       	ldi	r20, 0x01	; 1
    1a40:	50 e0       	ldi	r21, 0x00	; 0
    1a42:	02 c0       	rjmp	.+4      	; 0x1a48 <nrk_gpio_direction+0xf4>
    1a44:	44 0f       	add	r20, r20
    1a46:	55 1f       	adc	r21, r21
    1a48:	8a 95       	dec	r24
    1a4a:	e2 f7       	brpl	.-8      	; 0x1a44 <nrk_gpio_direction+0xf0>
    1a4c:	40 95       	com	r20
    1a4e:	49 23       	and	r20, r25
    1a50:	40 bb       	out	0x10, r20	; 16
    1a52:	8e c0       	rjmp	.+284    	; 0x1b70 <nrk_gpio_direction+0x21c>
                                //PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
    1a54:	93 b3       	in	r25, 0x13	; 19
    1a56:	86 95       	lsr	r24
    1a58:	86 95       	lsr	r24
    1a5a:	86 95       	lsr	r24
    1a5c:	41 e0       	ldi	r20, 0x01	; 1
    1a5e:	50 e0       	ldi	r21, 0x00	; 0
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <nrk_gpio_direction+0x112>
    1a62:	44 0f       	add	r20, r20
    1a64:	55 1f       	adc	r21, r21
    1a66:	8a 95       	dec	r24
    1a68:	e2 f7       	brpl	.-8      	; 0x1a62 <nrk_gpio_direction+0x10e>
    1a6a:	40 95       	com	r20
    1a6c:	49 23       	and	r20, r25
    1a6e:	43 bb       	out	0x13, r20	; 19
    1a70:	7f c0       	rjmp	.+254    	; 0x1b70 <nrk_gpio_direction+0x21c>
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    1a72:	27 70       	andi	r18, 0x07	; 7
    1a74:	30 70       	andi	r19, 0x00	; 0
    1a76:	23 30       	cpi	r18, 0x03	; 3
    1a78:	31 05       	cpc	r19, r1
    1a7a:	09 f4       	brne	.+2      	; 0x1a7e <nrk_gpio_direction+0x12a>
    1a7c:	42 c0       	rjmp	.+132    	; 0x1b02 <nrk_gpio_direction+0x1ae>
    1a7e:	24 30       	cpi	r18, 0x04	; 4
    1a80:	31 05       	cpc	r19, r1
    1a82:	54 f4       	brge	.+20     	; 0x1a98 <nrk_gpio_direction+0x144>
    1a84:	21 30       	cpi	r18, 0x01	; 1
    1a86:	31 05       	cpc	r19, r1
    1a88:	11 f1       	breq	.+68     	; 0x1ace <nrk_gpio_direction+0x17a>
    1a8a:	22 30       	cpi	r18, 0x02	; 2
    1a8c:	31 05       	cpc	r19, r1
    1a8e:	5c f5       	brge	.+86     	; 0x1ae6 <nrk_gpio_direction+0x192>
    1a90:	21 15       	cp	r18, r1
    1a92:	31 05       	cpc	r19, r1
    1a94:	71 f0       	breq	.+28     	; 0x1ab2 <nrk_gpio_direction+0x15e>
    1a96:	70 c0       	rjmp	.+224    	; 0x1b78 <nrk_gpio_direction+0x224>
    1a98:	25 30       	cpi	r18, 0x05	; 5
    1a9a:	31 05       	cpc	r19, r1
    1a9c:	09 f4       	brne	.+2      	; 0x1aa0 <nrk_gpio_direction+0x14c>
    1a9e:	4d c0       	rjmp	.+154    	; 0x1b3a <nrk_gpio_direction+0x1e6>
    1aa0:	25 30       	cpi	r18, 0x05	; 5
    1aa2:	31 05       	cpc	r19, r1
    1aa4:	0c f4       	brge	.+2      	; 0x1aa8 <nrk_gpio_direction+0x154>
    1aa6:	3b c0       	rjmp	.+118    	; 0x1b1e <nrk_gpio_direction+0x1ca>
    1aa8:	26 30       	cpi	r18, 0x06	; 6
    1aaa:	31 05       	cpc	r19, r1
    1aac:	09 f0       	breq	.+2      	; 0x1ab0 <nrk_gpio_direction+0x15c>
    1aae:	64 c0       	rjmp	.+200    	; 0x1b78 <nrk_gpio_direction+0x224>
    1ab0:	52 c0       	rjmp	.+164    	; 0x1b56 <nrk_gpio_direction+0x202>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    1ab2:	91 b1       	in	r25, 0x01	; 1
    1ab4:	86 95       	lsr	r24
    1ab6:	86 95       	lsr	r24
    1ab8:	86 95       	lsr	r24
    1aba:	41 e0       	ldi	r20, 0x01	; 1
    1abc:	50 e0       	ldi	r21, 0x00	; 0
    1abe:	02 c0       	rjmp	.+4      	; 0x1ac4 <nrk_gpio_direction+0x170>
    1ac0:	44 0f       	add	r20, r20
    1ac2:	55 1f       	adc	r21, r21
    1ac4:	8a 95       	dec	r24
    1ac6:	e2 f7       	brpl	.-8      	; 0x1ac0 <nrk_gpio_direction+0x16c>
    1ac8:	94 2b       	or	r25, r20
    1aca:	91 b9       	out	0x01, r25	; 1
    1acc:	51 c0       	rjmp	.+162    	; 0x1b70 <nrk_gpio_direction+0x21c>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    1ace:	94 b1       	in	r25, 0x04	; 4
    1ad0:	86 95       	lsr	r24
    1ad2:	86 95       	lsr	r24
    1ad4:	86 95       	lsr	r24
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <nrk_gpio_direction+0x188>
    1ad8:	22 0f       	add	r18, r18
    1ada:	33 1f       	adc	r19, r19
    1adc:	8a 95       	dec	r24
    1ade:	e2 f7       	brpl	.-8      	; 0x1ad8 <nrk_gpio_direction+0x184>
    1ae0:	92 2b       	or	r25, r18
    1ae2:	94 b9       	out	0x04, r25	; 4
    1ae4:	45 c0       	rjmp	.+138    	; 0x1b70 <nrk_gpio_direction+0x21c>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    1ae6:	97 b1       	in	r25, 0x07	; 7
    1ae8:	86 95       	lsr	r24
    1aea:	86 95       	lsr	r24
    1aec:	86 95       	lsr	r24
    1aee:	41 e0       	ldi	r20, 0x01	; 1
    1af0:	50 e0       	ldi	r21, 0x00	; 0
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <nrk_gpio_direction+0x1a4>
    1af4:	44 0f       	add	r20, r20
    1af6:	55 1f       	adc	r21, r21
    1af8:	8a 95       	dec	r24
    1afa:	e2 f7       	brpl	.-8      	; 0x1af4 <nrk_gpio_direction+0x1a0>
    1afc:	94 2b       	or	r25, r20
    1afe:	97 b9       	out	0x07, r25	; 7
    1b00:	37 c0       	rjmp	.+110    	; 0x1b70 <nrk_gpio_direction+0x21c>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    1b02:	9a b1       	in	r25, 0x0a	; 10
    1b04:	86 95       	lsr	r24
    1b06:	86 95       	lsr	r24
    1b08:	86 95       	lsr	r24
    1b0a:	41 e0       	ldi	r20, 0x01	; 1
    1b0c:	50 e0       	ldi	r21, 0x00	; 0
    1b0e:	02 c0       	rjmp	.+4      	; 0x1b14 <nrk_gpio_direction+0x1c0>
    1b10:	44 0f       	add	r20, r20
    1b12:	55 1f       	adc	r21, r21
    1b14:	8a 95       	dec	r24
    1b16:	e2 f7       	brpl	.-8      	; 0x1b10 <nrk_gpio_direction+0x1bc>
    1b18:	94 2b       	or	r25, r20
    1b1a:	9a b9       	out	0x0a, r25	; 10
    1b1c:	29 c0       	rjmp	.+82     	; 0x1b70 <nrk_gpio_direction+0x21c>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    1b1e:	9d b1       	in	r25, 0x0d	; 13
    1b20:	86 95       	lsr	r24
    1b22:	86 95       	lsr	r24
    1b24:	86 95       	lsr	r24
    1b26:	41 e0       	ldi	r20, 0x01	; 1
    1b28:	50 e0       	ldi	r21, 0x00	; 0
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <nrk_gpio_direction+0x1dc>
    1b2c:	44 0f       	add	r20, r20
    1b2e:	55 1f       	adc	r21, r21
    1b30:	8a 95       	dec	r24
    1b32:	e2 f7       	brpl	.-8      	; 0x1b2c <nrk_gpio_direction+0x1d8>
    1b34:	94 2b       	or	r25, r20
    1b36:	9d b9       	out	0x0d, r25	; 13
    1b38:	1b c0       	rjmp	.+54     	; 0x1b70 <nrk_gpio_direction+0x21c>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    1b3a:	90 b3       	in	r25, 0x10	; 16
    1b3c:	86 95       	lsr	r24
    1b3e:	86 95       	lsr	r24
    1b40:	86 95       	lsr	r24
    1b42:	41 e0       	ldi	r20, 0x01	; 1
    1b44:	50 e0       	ldi	r21, 0x00	; 0
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <nrk_gpio_direction+0x1f8>
    1b48:	44 0f       	add	r20, r20
    1b4a:	55 1f       	adc	r21, r21
    1b4c:	8a 95       	dec	r24
    1b4e:	e2 f7       	brpl	.-8      	; 0x1b48 <nrk_gpio_direction+0x1f4>
    1b50:	94 2b       	or	r25, r20
    1b52:	90 bb       	out	0x10, r25	; 16
    1b54:	0d c0       	rjmp	.+26     	; 0x1b70 <nrk_gpio_direction+0x21c>
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    1b56:	93 b3       	in	r25, 0x13	; 19
    1b58:	86 95       	lsr	r24
    1b5a:	86 95       	lsr	r24
    1b5c:	86 95       	lsr	r24
    1b5e:	41 e0       	ldi	r20, 0x01	; 1
    1b60:	50 e0       	ldi	r21, 0x00	; 0
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <nrk_gpio_direction+0x214>
    1b64:	44 0f       	add	r20, r20
    1b66:	55 1f       	adc	r21, r21
    1b68:	8a 95       	dec	r24
    1b6a:	e2 f7       	brpl	.-8      	; 0x1b64 <nrk_gpio_direction+0x210>
    1b6c:	94 2b       	or	r25, r20
    1b6e:	93 bb       	out	0x13, r25	; 19
                        default: return -1;
                }
        }
        return 1;
    1b70:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    1b72:	08 95       	ret
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
    1b74:	8f ef       	ldi	r24, 0xFF	; 255
    1b76:	08 95       	ret
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
                        default: return -1;
    1b78:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    1b7a:	08 95       	ret

00001b7c <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    1b7c:	88 23       	and	r24, r24
    1b7e:	29 f4       	brne	.+10     	; 0x1b8a <nrk_get_button+0xe>
	 return( !(PINA & BM(BUTTON))); 
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	01 9b       	sbis	0x00, 1	; 0
    1b84:	03 c0       	rjmp	.+6      	; 0x1b8c <nrk_get_button+0x10>
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	08 95       	ret
	} 
return -1;
    1b8a:	8f ef       	ldi	r24, 0xFF	; 255
}
    1b8c:	08 95       	ret

00001b8e <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    1b8e:	00 97       	sbiw	r24, 0x00	; 0
    1b90:	11 f4       	brne	.+4      	; 0x1b96 <nrk_led_toggle+0x8>
    1b92:	83 e2       	ldi	r24, 0x23	; 35
    1b94:	0e c0       	rjmp	.+28     	; 0x1bb2 <nrk_led_toggle+0x24>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    1b96:	81 30       	cpi	r24, 0x01	; 1
    1b98:	91 05       	cpc	r25, r1
    1b9a:	11 f4       	brne	.+4      	; 0x1ba0 <nrk_led_toggle+0x12>
    1b9c:	8b e2       	ldi	r24, 0x2B	; 43
    1b9e:	09 c0       	rjmp	.+18     	; 0x1bb2 <nrk_led_toggle+0x24>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    1ba0:	82 30       	cpi	r24, 0x02	; 2
    1ba2:	91 05       	cpc	r25, r1
    1ba4:	11 f4       	brne	.+4      	; 0x1baa <nrk_led_toggle+0x1c>
    1ba6:	83 e3       	ldi	r24, 0x33	; 51
    1ba8:	04 c0       	rjmp	.+8      	; 0x1bb2 <nrk_led_toggle+0x24>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    1baa:	83 30       	cpi	r24, 0x03	; 3
    1bac:	91 05       	cpc	r25, r1
    1bae:	29 f4       	brne	.+10     	; 0x1bba <nrk_led_toggle+0x2c>
    1bb0:	8b e3       	ldi	r24, 0x3B	; 59
    1bb2:	0e 94 80 0b 	call	0x1700	; 0x1700 <nrk_gpio_toggle>
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	08 95       	ret
return -1;
    1bba:	8f ef       	ldi	r24, 0xFF	; 255
}
    1bbc:	08 95       	ret

00001bbe <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	11 f4       	brne	.+4      	; 0x1bc6 <nrk_led_clr+0x8>
    1bc2:	83 e2       	ldi	r24, 0x23	; 35
    1bc4:	0e c0       	rjmp	.+28     	; 0x1be2 <nrk_led_clr+0x24>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    1bc6:	81 30       	cpi	r24, 0x01	; 1
    1bc8:	91 05       	cpc	r25, r1
    1bca:	11 f4       	brne	.+4      	; 0x1bd0 <nrk_led_clr+0x12>
    1bcc:	8b e2       	ldi	r24, 0x2B	; 43
    1bce:	09 c0       	rjmp	.+18     	; 0x1be2 <nrk_led_clr+0x24>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    1bd0:	82 30       	cpi	r24, 0x02	; 2
    1bd2:	91 05       	cpc	r25, r1
    1bd4:	11 f4       	brne	.+4      	; 0x1bda <nrk_led_clr+0x1c>
    1bd6:	83 e3       	ldi	r24, 0x33	; 51
    1bd8:	04 c0       	rjmp	.+8      	; 0x1be2 <nrk_led_clr+0x24>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    1bda:	83 30       	cpi	r24, 0x03	; 3
    1bdc:	91 05       	cpc	r25, r1
    1bde:	29 f4       	brne	.+10     	; 0x1bea <nrk_led_clr+0x2c>
    1be0:	8b e3       	ldi	r24, 0x3B	; 59
    1be2:	0e 94 39 0a 	call	0x1472	; 0x1472 <nrk_gpio_set>
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	08 95       	ret
return -1;
    1bea:	8f ef       	ldi	r24, 0xFF	; 255
}
    1bec:	08 95       	ret

00001bee <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    1bee:	00 97       	sbiw	r24, 0x00	; 0
    1bf0:	11 f4       	brne	.+4      	; 0x1bf6 <nrk_led_set+0x8>
    1bf2:	83 e2       	ldi	r24, 0x23	; 35
    1bf4:	0e c0       	rjmp	.+28     	; 0x1c12 <nrk_led_set+0x24>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    1bf6:	81 30       	cpi	r24, 0x01	; 1
    1bf8:	91 05       	cpc	r25, r1
    1bfa:	11 f4       	brne	.+4      	; 0x1c00 <nrk_led_set+0x12>
    1bfc:	8b e2       	ldi	r24, 0x2B	; 43
    1bfe:	09 c0       	rjmp	.+18     	; 0x1c12 <nrk_led_set+0x24>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    1c00:	82 30       	cpi	r24, 0x02	; 2
    1c02:	91 05       	cpc	r25, r1
    1c04:	11 f4       	brne	.+4      	; 0x1c0a <nrk_led_set+0x1c>
    1c06:	83 e3       	ldi	r24, 0x33	; 51
    1c08:	04 c0       	rjmp	.+8      	; 0x1c12 <nrk_led_set+0x24>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    1c0a:	83 30       	cpi	r24, 0x03	; 3
    1c0c:	91 05       	cpc	r25, r1
    1c0e:	29 f4       	brne	.+10     	; 0x1c1a <nrk_led_set+0x2c>
    1c10:	8b e3       	ldi	r24, 0x3B	; 59
    1c12:	0e 94 c3 0a 	call	0x1586	; 0x1586 <nrk_gpio_clr>
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	08 95       	ret
return -1;
    1c1a:	8f ef       	ldi	r24, 0xFF	; 255
}
    1c1c:	08 95       	ret

00001c1e <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    1c1e:	88 23       	and	r24, r24
    1c20:	19 f0       	breq	.+6      	; 0x1c28 <nrk_gpio_pullups+0xa>
    1c22:	85 b7       	in	r24, 0x35	; 53
    1c24:	8f 7e       	andi	r24, 0xEF	; 239
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    1c28:	85 b7       	in	r24, 0x35	; 53
    1c2a:	80 61       	ori	r24, 0x10	; 16
    1c2c:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	08 95       	ret

00001c32 <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    1c32:	90 91 c8 00 	lds	r25, 0x00C8
    1c36:	95 ff       	sbrs	r25, 5
    1c38:	fc cf       	rjmp	.-8      	; 0x1c32 <putc1>
    1c3a:	80 93 ce 00 	sts	0x00CE, r24
}
    1c3e:	08 95       	ret

00001c40 <setup_uart0>:

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    1c40:	90 93 c5 00 	sts	0x00C5, r25
    1c44:	80 93 c4 00 	sts	0x00C4, r24
    1c48:	86 e0       	ldi	r24, 0x06	; 6
    1c4a:	80 93 c2 00 	sts	0x00C2, r24
    1c4e:	e1 ec       	ldi	r30, 0xC1	; 193
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	8b 7f       	andi	r24, 0xFB	; 251
    1c56:	80 83       	st	Z, r24
    1c58:	a0 ec       	ldi	r26, 0xC0	; 192
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	8c 91       	ld	r24, X
    1c5e:	82 60       	ori	r24, 0x02	; 2
    1c60:	8c 93       	st	X, r24
ENABLE_UART0();
    1c62:	80 81       	ld	r24, Z
    1c64:	88 61       	ori	r24, 0x18	; 24
    1c66:	80 83       	st	Z, r24
}
    1c68:	08 95       	ret

00001c6a <setup_uart1>:

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    1c6a:	90 93 cd 00 	sts	0x00CD, r25
    1c6e:	80 93 cc 00 	sts	0x00CC, r24
    1c72:	86 e0       	ldi	r24, 0x06	; 6
    1c74:	80 93 ca 00 	sts	0x00CA, r24
    1c78:	e9 ec       	ldi	r30, 0xC9	; 201
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	8b 7f       	andi	r24, 0xFB	; 251
    1c80:	80 83       	st	Z, r24
    1c82:	a8 ec       	ldi	r26, 0xC8	; 200
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	8c 91       	ld	r24, X
    1c88:	82 60       	ori	r24, 0x02	; 2
    1c8a:	8c 93       	st	X, r24
ENABLE_UART1();
    1c8c:	80 81       	ld	r24, Z
    1c8e:	88 61       	ori	r24, 0x18	; 24
    1c90:	80 83       	st	Z, r24
}
    1c92:	08 95       	ret

00001c94 <nrk_setup_uart>:
 *
 * More advanced UART usage will require manually
 * setting parameters.
 */
void nrk_setup_uart(uint16_t baudrate)
{
    1c94:	0f 93       	push	r16
    1c96:	1f 93       	push	r17
    1c98:	cf 93       	push	r28
    1c9a:	df 93       	push	r29

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    1c9c:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    1ca0:	cc ef       	ldi	r28, 0xFC	; 252
    1ca2:	d9 e0       	ldi	r29, 0x09	; 9
    1ca4:	00 ef       	ldi	r16, 0xF0	; 240
    1ca6:	19 e0       	ldi	r17, 0x09	; 9
    1ca8:	ce 01       	movw	r24, r28
    1caa:	b8 01       	movw	r22, r16
    1cac:	0e 94 77 2d 	call	0x5aee	; 0x5aee <fdevopen>
    1cb0:	90 93 6b 09 	sts	0x096B, r25
    1cb4:	80 93 6a 09 	sts	0x096A, r24
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    1cb8:	ce 01       	movw	r24, r28
    1cba:	b8 01       	movw	r22, r16
    1cbc:	0e 94 77 2d 	call	0x5aee	; 0x5aee <fdevopen>
    1cc0:	90 93 69 09 	sts	0x0969, r25
    1cc4:	80 93 68 09 	sts	0x0968, r24
   uart_rx_buf_start=0;
   uart_rx_buf_end=0;
   ENABLE_UART0_RX_INT();
#endif

}
    1cc8:	df 91       	pop	r29
    1cca:	cf 91       	pop	r28
    1ccc:	1f 91       	pop	r17
    1cce:	0f 91       	pop	r16
    1cd0:	08 95       	ret

00001cd2 <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    1cd2:	80 91 c8 00 	lds	r24, 0x00C8
    1cd6:	87 ff       	sbrs	r24, 7
    1cd8:	fc cf       	rjmp	.-8      	; 0x1cd2 <getc1>
    1cda:	80 91 c8 00 	lds	r24, 0x00C8
    1cde:	8f 77       	andi	r24, 0x7F	; 127
    1ce0:	80 93 c8 00 	sts	0x00C8, r24
    1ce4:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    1ce8:	08 95       	ret

00001cea <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    1cf2:	01 97       	sbiw	r24, 0x01	; 1
    1cf4:	d1 f7       	brne	.-12     	; 0x1cea <halWait>

} // halWait
    1cf6:	08 95       	ret

00001cf8 <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    1cf8:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <__eerd_byte_m128rfa1>
return v;
}
    1cfc:	08 95       	ret

00001cfe <nrk_eeprom_write_byte>:

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    1cfe:	0e 94 16 2f 	call	0x5e2c	; 0x5e2c <__eewr_byte_m128rfa1>
}
    1d02:	08 95       	ret

00001d04 <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    1d04:	ef 92       	push	r14
    1d06:	ff 92       	push	r15
    1d08:	0f 93       	push	r16
    1d0a:	1f 93       	push	r17
    1d0c:	cf 93       	push	r28
    1d0e:	df 93       	push	r29
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
    1d10:	e8 2e       	mov	r14, r24
    1d12:	e7 01       	movw	r28, r14
    1d14:	7e 01       	movw	r14, r28
    1d16:	f9 2e       	mov	r15, r25
    1d18:	e7 01       	movw	r28, r14
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <__eerd_byte_m128rfa1>
    1d22:	08 2f       	mov	r16, r24
    1d24:	8b 83       	std	Y+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <__eerd_byte_m128rfa1>
    1d2e:	e8 2e       	mov	r14, r24
    1d30:	8a 83       	std	Y+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    1d32:	82 e0       	ldi	r24, 0x02	; 2
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <__eerd_byte_m128rfa1>
    1d3a:	f8 2e       	mov	r15, r24
    1d3c:	89 83       	std	Y+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    1d3e:	83 e0       	ldi	r24, 0x03	; 3
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <__eerd_byte_m128rfa1>
    1d46:	18 2f       	mov	r17, r24
    1d48:	88 83       	st	Y, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    1d4a:	84 e0       	ldi	r24, 0x04	; 4
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <__eerd_byte_m128rfa1>
ct=buf[0];
ct+=buf[1];
    1d52:	fe 0c       	add	r15, r14
ct+=buf[2];
    1d54:	f0 0e       	add	r15, r16
ct+=buf[3];
    1d56:	f1 0e       	add	r15, r17
if(checksum==ct) return NRK_OK;
    1d58:	8f 15       	cp	r24, r15
    1d5a:	11 f4       	brne	.+4      	; 0x1d60 <read_eeprom_mac_address+0x5c>
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	01 c0       	rjmp	.+2      	; 0x1d62 <read_eeprom_mac_address+0x5e>

return NRK_ERROR;
    1d60:	8f ef       	ldi	r24, 0xFF	; 255
}
    1d62:	df 91       	pop	r29
    1d64:	cf 91       	pop	r28
    1d66:	1f 91       	pop	r17
    1d68:	0f 91       	pop	r16
    1d6a:	ff 90       	pop	r15
    1d6c:	ef 90       	pop	r14
    1d6e:	08 95       	ret

00001d70 <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    1d70:	cf 93       	push	r28
    1d72:	df 93       	push	r29
    1d74:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    1d76:	85 e0       	ldi	r24, 0x05	; 5
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <__eerd_byte_m128rfa1>
    1d7e:	88 83       	st	Y, r24
return NRK_OK;
}
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	df 91       	pop	r29
    1d84:	cf 91       	pop	r28
    1d86:	08 95       	ret

00001d88 <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
    1d88:	fc 01       	movw	r30, r24
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    1d8a:	86 e0       	ldi	r24, 0x06	; 6
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	60 81       	ld	r22, Z
    1d90:	0e 94 16 2f 	call	0x5e2c	; 0x5e2c <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	08 95       	ret

00001d98 <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    1d98:	cf 93       	push	r28
    1d9a:	df 93       	push	r29
    1d9c:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    1d9e:	86 e0       	ldi	r24, 0x06	; 6
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <__eerd_byte_m128rfa1>
    1da6:	88 83       	st	Y, r24
  return NRK_OK;
}
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	df 91       	pop	r29
    1dac:	cf 91       	pop	r28
    1dae:	08 95       	ret

00001db0 <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    1db0:	0f 93       	push	r16
    1db2:	1f 93       	push	r17
    1db4:	cf 93       	push	r28
    1db6:	df 93       	push	r29
    1db8:	08 2f       	mov	r16, r24
    1dba:	19 2f       	mov	r17, r25
    1dbc:	c8 e0       	ldi	r28, 0x08	; 8
    1dbe:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    1dc0:	ce 01       	movw	r24, r28
    1dc2:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <__eerd_byte_m128rfa1>
    1dc6:	f8 01       	movw	r30, r16
    1dc8:	81 93       	st	Z+, r24
    1dca:	8f 01       	movw	r16, r30
    1dcc:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    1dce:	c8 31       	cpi	r28, 0x18	; 24
    1dd0:	d1 05       	cpc	r29, r1
    1dd2:	b1 f7       	brne	.-20     	; 0x1dc0 <read_eeprom_aes_key+0x10>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	df 91       	pop	r29
    1dd8:	cf 91       	pop	r28
    1dda:	1f 91       	pop	r17
    1ddc:	0f 91       	pop	r16
    1dde:	08 95       	ret

00001de0 <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    1de0:	0f 93       	push	r16
    1de2:	1f 93       	push	r17
    1de4:	cf 93       	push	r28
    1de6:	df 93       	push	r29
    1de8:	08 2f       	mov	r16, r24
    1dea:	19 2f       	mov	r17, r25
    1dec:	c8 e0       	ldi	r28, 0x08	; 8
    1dee:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    1df0:	f8 01       	movw	r30, r16
    1df2:	61 91       	ld	r22, Z+
    1df4:	8f 01       	movw	r16, r30
    1df6:	ce 01       	movw	r24, r28
    1df8:	0e 94 16 2f 	call	0x5e2c	; 0x5e2c <__eewr_byte_m128rfa1>
    1dfc:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    1dfe:	c8 31       	cpi	r28, 0x18	; 24
    1e00:	d1 05       	cpc	r29, r1
    1e02:	b1 f7       	brne	.-20     	; 0x1df0 <write_eeprom_aes_key+0x10>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	df 91       	pop	r29
    1e08:	cf 91       	pop	r28
    1e0a:	1f 91       	pop	r17
    1e0c:	0f 91       	pop	r16
    1e0e:	08 95       	ret

00001e10 <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    1e10:	cf 93       	push	r28
    1e12:	df 93       	push	r29
    1e14:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    1e16:	87 e0       	ldi	r24, 0x07	; 7
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <__eerd_byte_m128rfa1>
    1e1e:	88 83       	st	Y, r24
  return NRK_OK;
}
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	df 91       	pop	r29
    1e24:	cf 91       	pop	r28
    1e26:	08 95       	ret

00001e28 <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    1e28:	fc 01       	movw	r30, r24
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    1e2a:	87 e0       	ldi	r24, 0x07	; 7
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	60 81       	ld	r22, Z
    1e30:	0e 94 16 2f 	call	0x5e2c	; 0x5e2c <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	08 95       	ret

00001e38 <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    1e38:	f8 94       	cli
};
    1e3a:	08 95       	ret

00001e3c <nrk_int_enable>:

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    1e3c:	78 94       	sei
};
    1e3e:	08 95       	ret

00001e40 <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    1e40:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <nrk_int_disable>
    1e44:	ff cf       	rjmp	.-2      	; 0x1e44 <nrk_halt+0x4>

00001e46 <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    1e46:	0f 93       	push	r16
    1e48:	1f 93       	push	r17
    1e4a:	df 93       	push	r29
    1e4c:	cf 93       	push	r28
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    1e52:	a3 97       	sbiw	r28, 0x23	; 35
    1e54:	0f b6       	in	r0, 0x3f	; 63
    1e56:	f8 94       	cli
    1e58:	de bf       	out	0x3e, r29	; 62
    1e5a:	0f be       	out	0x3f, r0	; 63
    1e5c:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    1e5e:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <nrk_signal_create>
    1e62:	80 93 2e 09 	sts	0x092E, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    1e66:	8f 3f       	cpi	r24, 0xFF	; 255
    1e68:	21 f4       	brne	.+8      	; 0x1e72 <nrk_init+0x2c>
    1e6a:	8e e0       	ldi	r24, 0x0E	; 14
    1e6c:	60 e0       	ldi	r22, 0x00	; 0
    1e6e:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    1e72:	0e 94 70 22 	call	0x44e0	; 0x44e0 <_nrk_startup_error>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    1e76:	80 ff       	sbrs	r24, 0
    1e78:	04 c0       	rjmp	.+8      	; 0x1e82 <nrk_init+0x3c>
    1e7a:	86 e0       	ldi	r24, 0x06	; 6
    1e7c:	60 e0       	ldi	r22, 0x00	; 0
    1e7e:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    1e82:	10 92 31 09 	sts	0x0931, r1
    nrk_cur_task_TCB = NULL;
    1e86:	10 92 3f 09 	sts	0x093F, r1
    1e8a:	10 92 3e 09 	sts	0x093E, r1
    
    nrk_high_ready_TCB = NULL;
    1e8e:	10 92 30 09 	sts	0x0930, r1
    1e92:	10 92 2f 09 	sts	0x092F, r1
    nrk_high_ready_prio = 0; 
    1e96:	10 92 40 09 	sts	0x0940, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    1e9a:	10 92 3d 09 	sts	0x093D, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    1e9e:	8f ef       	ldi	r24, 0xFF	; 255
    1ea0:	80 93 2a 09 	sts	0x092A, r24
    nrk_sem_list[i].value=-1;
    1ea4:	80 93 2c 09 	sts	0x092C, r24
    nrk_sem_list[i].resource_ceiling=-1;
    1ea8:	80 93 2b 09 	sts	0x092B, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    1eac:	93 e6       	ldi	r25, 0x63	; 99
    1eae:	90 93 5b 08 	sts	0x085B, r25
        nrk_task_TCB[i].task_ID = -1; 
    1eb2:	80 93 59 08 	sts	0x0859, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    1eb6:	90 93 86 08 	sts	0x0886, r25
        nrk_task_TCB[i].task_ID = -1; 
    1eba:	80 93 84 08 	sts	0x0884, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    1ebe:	90 93 b1 08 	sts	0x08B1, r25
        nrk_task_TCB[i].task_ID = -1; 
    1ec2:	80 93 af 08 	sts	0x08AF, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    1ec6:	90 93 dc 08 	sts	0x08DC, r25
        nrk_task_TCB[i].task_ID = -1; 
    1eca:	80 93 da 08 	sts	0x08DA, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    1ece:	90 93 07 09 	sts	0x0907, r25
        nrk_task_TCB[i].task_ID = -1; 
    1ed2:	80 93 05 09 	sts	0x0905, r24
    1ed6:	e4 e4       	ldi	r30, 0x44	; 68
    1ed8:	f9 e0       	ldi	r31, 0x09	; 9
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	01 c0       	rjmp	.+2      	; 0x1ee2 <nrk_init+0x9c>
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    1ee0:	9a 01       	movw	r18, r20
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
        nrk_task_TCB[i].task_ID = -1; 
    1ee2:	a9 01       	movw	r20, r18
    1ee4:	4f 5f       	subi	r20, 0xFF	; 255
    1ee6:	5f 4f       	sbci	r21, 0xFF	; 255
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    1ee8:	ca 01       	movw	r24, r20
    1eea:	88 0f       	add	r24, r24
    1eec:	99 1f       	adc	r25, r25
    1eee:	88 0f       	add	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	84 0f       	add	r24, r20
    1ef4:	95 1f       	adc	r25, r21
    1ef6:	8f 5b       	subi	r24, 0xBF	; 191
    1ef8:	96 4f       	sbci	r25, 0xF6	; 246
    1efa:	91 83       	std	Z+1, r25	; 0x01
    1efc:	80 83       	st	Z, r24
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    1efe:	c9 01       	movw	r24, r18
    1f00:	88 0f       	add	r24, r24
    1f02:	99 1f       	adc	r25, r25
    1f04:	88 0f       	add	r24, r24
    1f06:	99 1f       	adc	r25, r25
    1f08:	82 0f       	add	r24, r18
    1f0a:	93 1f       	adc	r25, r19
    1f0c:	8f 5b       	subi	r24, 0xBF	; 191
    1f0e:	96 4f       	sbci	r25, 0xF6	; 246
    1f10:	94 83       	std	Z+4, r25	; 0x04
    1f12:	83 83       	std	Z+3, r24	; 0x03
    1f14:	35 96       	adiw	r30, 0x05	; 5
        nrk_task_TCB[i].task_ID = -1; 
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    1f16:	45 30       	cpi	r20, 0x05	; 5
    1f18:	51 05       	cpc	r21, r1
    1f1a:	11 f7       	brne	.-60     	; 0x1ee0 <nrk_init+0x9a>
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    1f1c:	10 92 43 09 	sts	0x0943, r1
    1f20:	10 92 42 09 	sts	0x0942, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    1f24:	10 92 5e 09 	sts	0x095E, r1
    1f28:	10 92 5d 09 	sts	0x095D, r1
	_head_node = NULL;
    1f2c:	10 92 34 09 	sts	0x0934, r1
    1f30:	10 92 33 09 	sts	0x0933, r1
	_free_node = &_nrk_readyQ[0];
    1f34:	81 e4       	ldi	r24, 0x41	; 65
    1f36:	99 e0       	ldi	r25, 0x09	; 9
    1f38:	90 93 50 08 	sts	0x0850, r25
    1f3c:	80 93 4f 08 	sts	0x084F, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    1f40:	8e 01       	movw	r16, r28
    1f42:	0f 5f       	subi	r16, 0xFF	; 255
    1f44:	1f 4f       	sbci	r17, 0xFF	; 255
    1f46:	c8 01       	movw	r24, r16
    1f48:	67 ea       	ldi	r22, 0xA7	; 167
    1f4a:	7d e1       	ldi	r23, 0x1D	; 29
    1f4c:	0e 94 ab 24 	call	0x4956	; 0x4956 <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    1f50:	c8 01       	movw	r24, r16
    1f52:	69 ed       	ldi	r22, 0xD9	; 217
    1f54:	76 e0       	ldi	r23, 0x06	; 6
    1f56:	40 e0       	ldi	r20, 0x00	; 0
    1f58:	51 e0       	ldi	r21, 0x01	; 1
    1f5a:	0e 94 af 24 	call	0x495e	; 0x495e <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    1f5e:	85 e5       	ldi	r24, 0x55	; 85
    1f60:	80 93 d9 06 	sts	0x06D9, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    1f64:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    1f66:	1c 86       	std	Y+12, r1	; 0x0c
    1f68:	1d 86       	std	Y+13, r1	; 0x0d
    1f6a:	1e 86       	std	Y+14, r1	; 0x0e
    1f6c:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    1f6e:	18 8a       	std	Y+16, r1	; 0x10
    1f70:	19 8a       	std	Y+17, r1	; 0x11
    1f72:	1a 8a       	std	Y+18, r1	; 0x12
    1f74:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    1f76:	1c 8a       	std	Y+20, r1	; 0x14
    1f78:	1d 8a       	std	Y+21, r1	; 0x15
    1f7a:	1e 8a       	std	Y+22, r1	; 0x16
    1f7c:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    1f7e:	18 8e       	std	Y+24, r1	; 0x18
    1f80:	19 8e       	std	Y+25, r1	; 0x19
    1f82:	1a 8e       	std	Y+26, r1	; 0x1a
    1f84:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    1f86:	1c 8e       	std	Y+28, r1	; 0x1c
    1f88:	1d 8e       	std	Y+29, r1	; 0x1d
    1f8a:	1e 8e       	std	Y+30, r1	; 0x1e
    1f8c:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    1f8e:	18 a2       	std	Y+32, r1	; 0x20
    1f90:	19 a2       	std	Y+33, r1	; 0x21
    1f92:	1a a2       	std	Y+34, r1	; 0x22
    1f94:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    1f9a:	92 e0       	ldi	r25, 0x02	; 2
    1f9c:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    1f9e:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    1fa0:	c8 01       	movw	r24, r16
    1fa2:	0e 94 7f 18 	call	0x30fe	; 0x30fe <nrk_activate_task>
	
}
    1fa6:	a3 96       	adiw	r28, 0x23	; 35
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	f8 94       	cli
    1fac:	de bf       	out	0x3e, r29	; 62
    1fae:	0f be       	out	0x3f, r0	; 63
    1fb0:	cd bf       	out	0x3d, r28	; 61
    1fb2:	cf 91       	pop	r28
    1fb4:	df 91       	pop	r29
    1fb6:	1f 91       	pop	r17
    1fb8:	0f 91       	pop	r16
    1fba:	08 95       	ret

00001fbc <nrk_start>:




void nrk_start (void)
{
    1fbc:	cf 92       	push	r12
    1fbe:	df 92       	push	r13
    1fc0:	ff 92       	push	r15
    1fc2:	0f 93       	push	r16
    1fc4:	1f 93       	push	r17
    1fc6:	df 93       	push	r29
    1fc8:	cf 93       	push	r28
    1fca:	00 d0       	rcall	.+0      	; 0x1fcc <nrk_start+0x10>
    1fcc:	cd b7       	in	r28, 0x3d	; 61
    1fce:	de b7       	in	r29, 0x3e	; 62
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
    1fd0:	e9 e5       	ldi	r30, 0x59	; 89
    1fd2:	ce 2e       	mov	r12, r30
    1fd4:	e8 e0       	ldi	r30, 0x08	; 8
    1fd6:	de 2e       	mov	r13, r30
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    {
	task_ID = nrk_task_TCB[i].task_ID;
    1fda:	f6 01       	movw	r30, r12
    1fdc:	f0 80       	ld	r15, Z
	// only check activated tasks
	if(task_ID!=-1)
    1fde:	ff 2d       	mov	r31, r15
    1fe0:	ff 3f       	cpi	r31, 0xFF	; 255
    1fe2:	b1 f0       	breq	.+44     	; 0x2010 <nrk_start+0x54>
    1fe4:	09 e5       	ldi	r16, 0x59	; 89
    1fe6:	18 e0       	ldi	r17, 0x08	; 8
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    1fea:	92 17       	cp	r25, r18
    1fec:	61 f0       	breq	.+24     	; 0x2006 <nrk_start+0x4a>
    1fee:	f8 01       	movw	r30, r16
    1ff0:	80 81       	ld	r24, Z
    1ff2:	f8 16       	cp	r15, r24
    1ff4:	41 f4       	brne	.+16     	; 0x2006 <nrk_start+0x4a>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    1ff6:	85 e0       	ldi	r24, 0x05	; 5
    1ff8:	6f 2d       	mov	r22, r15
    1ffa:	29 83       	std	Y+1, r18	; 0x01
    1ffc:	9a 83       	std	Y+2, r25	; 0x02
    1ffe:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <nrk_kernel_error_add>
    2002:	9a 81       	ldd	r25, Y+2	; 0x02
    2004:	29 81       	ldd	r18, Y+1	; 0x01
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    2006:	2f 5f       	subi	r18, 0xFF	; 255
    2008:	05 5d       	subi	r16, 0xD5	; 213
    200a:	1f 4f       	sbci	r17, 0xFF	; 255
    200c:	25 30       	cpi	r18, 0x05	; 5
    200e:	69 f7       	brne	.-38     	; 0x1fea <nrk_start+0x2e>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    2010:	9f 5f       	subi	r25, 0xFF	; 255
    2012:	2b e2       	ldi	r18, 0x2B	; 43
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	c2 0e       	add	r12, r18
    2018:	d3 1e       	adc	r13, r19
    201a:	95 30       	cpi	r25, 0x05	; 5
    201c:	f1 f6       	brne	.-68     	; 0x1fda <nrk_start+0x1e>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    201e:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    2022:	99 27       	eor	r25, r25
    2024:	87 fd       	sbrc	r24, 7
    2026:	90 95       	com	r25
    2028:	2b e2       	ldi	r18, 0x2B	; 43
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	82 9f       	mul	r24, r18
    202e:	f0 01       	movw	r30, r0
    2030:	83 9f       	mul	r24, r19
    2032:	f0 0d       	add	r31, r0
    2034:	92 9f       	mul	r25, r18
    2036:	f0 0d       	add	r31, r0
    2038:	11 24       	eor	r1, r1
    203a:	ef 5a       	subi	r30, 0xAF	; 175
    203c:	f7 4f       	sbci	r31, 0xF7	; 247
    203e:	82 85       	ldd	r24, Z+10	; 0x0a
    2040:	80 93 40 09 	sts	0x0940, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    2044:	f0 93 3f 09 	sts	0x093F, r31
    2048:	e0 93 3e 09 	sts	0x093E, r30
    204c:	f0 93 30 09 	sts	0x0930, r31
    2050:	e0 93 2f 09 	sts	0x092F, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    2054:	80 93 31 09 	sts	0x0931, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    2058:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <nrk_target_start>
    nrk_stack_pointer_init(); 
    205c:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    2060:	0e 94 14 25 	call	0x4a28	; 0x4a28 <nrk_start_high_ready_task>
    2064:	ff cf       	rjmp	.-2      	; 0x2064 <nrk_start+0xa8>

00002066 <nrk_TCB_init>:
    while(1);
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    2066:	cf 92       	push	r12
    2068:	df 92       	push	r13
    206a:	ef 92       	push	r14
    206c:	ff 92       	push	r15
    206e:	0f 93       	push	r16
    2070:	1f 93       	push	r17
    2072:	cf 93       	push	r28
    2074:	df 93       	push	r29
    2076:	ec 01       	movw	r28, r24
    2078:	8b 01       	movw	r16, r22
    207a:	6a 01       	movw	r12, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    207c:	89 85       	ldd	r24, Y+9	; 0x09
    207e:	82 30       	cpi	r24, 0x02	; 2
    2080:	21 f0       	breq	.+8      	; 0x208a <nrk_TCB_init+0x24>
    	Task->task_ID=nrk_task_init_cnt;
    2082:	80 91 2d 09 	lds	r24, 0x092D
    2086:	88 83       	st	Y, r24
    2088:	01 c0       	rjmp	.+2      	; 0x208c <nrk_TCB_init+0x26>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    208a:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    208c:	80 91 2d 09 	lds	r24, 0x092D
    2090:	85 30       	cpi	r24, 0x05	; 5
    2092:	20 f0       	brcs	.+8      	; 0x209c <nrk_TCB_init+0x36>
    2094:	87 e0       	ldi	r24, 0x07	; 7
    2096:	60 e0       	ldi	r22, 0x00	; 0
    2098:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    209c:	89 85       	ldd	r24, Y+9	; 0x09
    209e:	82 30       	cpi	r24, 0x02	; 2
    20a0:	29 f0       	breq	.+10     	; 0x20ac <nrk_TCB_init+0x46>
    20a2:	80 91 2d 09 	lds	r24, 0x092D
    20a6:	8f 5f       	subi	r24, 0xFF	; 255
    20a8:	80 93 2d 09 	sts	0x092D, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    20ac:	80 91 2d 09 	lds	r24, 0x092D
    20b0:	88 23       	and	r24, r24
    20b2:	19 f4       	brne	.+6      	; 0x20ba <nrk_TCB_init+0x54>
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	80 93 2d 09 	sts	0x092D, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    20ba:	28 81       	ld	r18, Y
    20bc:	33 27       	eor	r19, r19
    20be:	27 fd       	sbrc	r18, 7
    20c0:	30 95       	com	r19
    20c2:	8b e2       	ldi	r24, 0x2B	; 43
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	28 9f       	mul	r18, r24
    20c8:	f0 01       	movw	r30, r0
    20ca:	29 9f       	mul	r18, r25
    20cc:	f0 0d       	add	r31, r0
    20ce:	38 9f       	mul	r19, r24
    20d0:	f0 0d       	add	r31, r0
    20d2:	11 24       	eor	r1, r1
    20d4:	ef 5a       	subi	r30, 0xAF	; 175
    20d6:	f7 4f       	sbci	r31, 0xF7	; 247
    20d8:	11 83       	std	Z+1, r17	; 0x01
    20da:	00 83       	st	Z, r16
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    20dc:	28 85       	ldd	r18, Y+8	; 0x08
    20de:	22 87       	std	Z+10, r18	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    20e0:	28 81       	ld	r18, Y
    20e2:	33 27       	eor	r19, r19
    20e4:	27 fd       	sbrc	r18, 7
    20e6:	30 95       	com	r19
    20e8:	28 9f       	mul	r18, r24
    20ea:	f0 01       	movw	r30, r0
    20ec:	29 9f       	mul	r18, r25
    20ee:	f0 0d       	add	r31, r0
    20f0:	38 9f       	mul	r19, r24
    20f2:	f0 0d       	add	r31, r0
    20f4:	11 24       	eor	r1, r1
    20f6:	ef 5a       	subi	r30, 0xAF	; 175
    20f8:	f7 4f       	sbci	r31, 0xF7	; 247
    20fa:	23 e0       	ldi	r18, 0x03	; 3
    20fc:	21 87       	std	Z+9, r18	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    20fe:	48 81       	ld	r20, Y
    2100:	24 2f       	mov	r18, r20
    2102:	33 27       	eor	r19, r19
    2104:	27 fd       	sbrc	r18, 7
    2106:	30 95       	com	r19
    2108:	28 9f       	mul	r18, r24
    210a:	f0 01       	movw	r30, r0
    210c:	29 9f       	mul	r18, r25
    210e:	f0 0d       	add	r31, r0
    2110:	38 9f       	mul	r19, r24
    2112:	f0 0d       	add	r31, r0
    2114:	11 24       	eor	r1, r1
    2116:	ef 5a       	subi	r30, 0xAF	; 175
    2118:	f7 4f       	sbci	r31, 0xF7	; 247
    211a:	40 87       	std	Z+8, r20	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    211c:	28 81       	ld	r18, Y
    211e:	33 27       	eor	r19, r19
    2120:	27 fd       	sbrc	r18, 7
    2122:	30 95       	com	r19
    2124:	28 9f       	mul	r18, r24
    2126:	80 01       	movw	r16, r0
    2128:	29 9f       	mul	r18, r25
    212a:	10 0d       	add	r17, r0
    212c:	38 9f       	mul	r19, r24
    212e:	10 0d       	add	r17, r0
    2130:	11 24       	eor	r1, r1
    2132:	0f 5a       	subi	r16, 0xAF	; 175
    2134:	17 4f       	sbci	r17, 0xF7	; 247
    2136:	f8 01       	movw	r30, r16
    2138:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
    213a:	ce 01       	movw	r24, r28
    213c:	0b 96       	adiw	r24, 0x0b	; 11
    213e:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <_nrk_time_to_ticks_long>
    2142:	f8 01       	movw	r30, r16
    2144:	61 a3       	std	Z+33, r22	; 0x21
    2146:	72 a3       	std	Z+34, r23	; 0x22
    2148:	83 a3       	std	Z+35, r24	; 0x23
    214a:	94 a3       	std	Z+36, r25	; 0x24
    if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    214c:	8b 85       	ldd	r24, Y+11	; 0x0b
    214e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2150:	ad 85       	ldd	r26, Y+13	; 0x0d
    2152:	be 85       	ldd	r27, Y+14	; 0x0e
    2154:	88 33       	cpi	r24, 0x38	; 56
    2156:	f9 e8       	ldi	r31, 0x89	; 137
    2158:	9f 07       	cpc	r25, r31
    215a:	f1 e4       	ldi	r31, 0x41	; 65
    215c:	af 07       	cpc	r26, r31
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	bf 07       	cpc	r27, r31
    2162:	20 f0       	brcs	.+8      	; 0x216c <nrk_TCB_init+0x106>
    2164:	86 e1       	ldi	r24, 0x16	; 22
    2166:	68 81       	ld	r22, Y
    2168:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
    216c:	08 81       	ld	r16, Y
    216e:	11 27       	eor	r17, r17
    2170:	07 fd       	sbrc	r16, 7
    2172:	10 95       	com	r17
    2174:	ce 01       	movw	r24, r28
    2176:	4b 96       	adiw	r24, 0x1b	; 27
    2178:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <_nrk_time_to_ticks_long>
    217c:	fb e2       	ldi	r31, 0x2B	; 43
    217e:	ef 2e       	mov	r14, r31
    2180:	f1 2c       	mov	r15, r1
    2182:	0e 9d       	mul	r16, r14
    2184:	f0 01       	movw	r30, r0
    2186:	0f 9d       	mul	r16, r15
    2188:	f0 0d       	add	r31, r0
    218a:	1e 9d       	mul	r17, r14
    218c:	f0 0d       	add	r31, r0
    218e:	11 24       	eor	r1, r1
    2190:	ef 5a       	subi	r30, 0xAF	; 175
    2192:	f7 4f       	sbci	r31, 0xF7	; 247
    2194:	65 8b       	std	Z+21, r22	; 0x15
    2196:	76 8b       	std	Z+22, r23	; 0x16
    2198:	87 8b       	std	Z+23, r24	; 0x17
    219a:	90 8f       	std	Z+24, r25	; 0x18
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    219c:	88 81       	ld	r24, Y
    219e:	99 27       	eor	r25, r25
    21a0:	87 fd       	sbrc	r24, 7
    21a2:	90 95       	com	r25
    21a4:	8e 9d       	mul	r24, r14
    21a6:	80 01       	movw	r16, r0
    21a8:	8f 9d       	mul	r24, r15
    21aa:	10 0d       	add	r17, r0
    21ac:	9e 9d       	mul	r25, r14
    21ae:	10 0d       	add	r17, r0
    21b0:	11 24       	eor	r1, r1
    21b2:	0f 5a       	subi	r16, 0xAF	; 175
    21b4:	17 4f       	sbci	r17, 0xF7	; 247
    21b6:	f8 01       	movw	r30, r16
    21b8:	85 89       	ldd	r24, Z+21	; 0x15
    21ba:	96 89       	ldd	r25, Z+22	; 0x16
    21bc:	a7 89       	ldd	r26, Z+23	; 0x17
    21be:	b0 8d       	ldd	r27, Z+24	; 0x18
    21c0:	21 a1       	ldd	r18, Z+33	; 0x21
    21c2:	32 a1       	ldd	r19, Z+34	; 0x22
    21c4:	43 a1       	ldd	r20, Z+35	; 0x23
    21c6:	54 a1       	ldd	r21, Z+36	; 0x24
    21c8:	82 0f       	add	r24, r18
    21ca:	93 1f       	adc	r25, r19
    21cc:	a4 1f       	adc	r26, r20
    21ce:	b5 1f       	adc	r27, r21
    21d0:	81 8f       	std	Z+25, r24	; 0x19
    21d2:	92 8f       	std	Z+26, r25	; 0x1a
    21d4:	a3 8f       	std	Z+27, r26	; 0x1b
    21d6:	b4 8f       	std	Z+28, r27	; 0x1c
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
    21d8:	ce 01       	movw	r24, r28
    21da:	43 96       	adiw	r24, 0x13	; 19
    21dc:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <_nrk_time_to_ticks_long>
    21e0:	f8 01       	movw	r30, r16
    21e2:	65 a3       	std	Z+37, r22	; 0x25
    21e4:	76 a3       	std	Z+38, r23	; 0x26
    21e6:	87 a3       	std	Z+39, r24	; 0x27
    21e8:	90 a7       	std	Z+40, r25	; 0x28
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    21ea:	88 81       	ld	r24, Y
    21ec:	99 27       	eor	r25, r25
    21ee:	87 fd       	sbrc	r24, 7
    21f0:	90 95       	com	r25
    21f2:	8e 9d       	mul	r24, r14
    21f4:	f0 01       	movw	r30, r0
    21f6:	8f 9d       	mul	r24, r15
    21f8:	f0 0d       	add	r31, r0
    21fa:	9e 9d       	mul	r25, r14
    21fc:	f0 0d       	add	r31, r0
    21fe:	11 24       	eor	r1, r1
    2200:	ef 5a       	subi	r30, 0xAF	; 175
    2202:	f7 4f       	sbci	r31, 0xF7	; 247
    2204:	85 a1       	ldd	r24, Z+37	; 0x25
    2206:	96 a1       	ldd	r25, Z+38	; 0x26
    2208:	a7 a1       	ldd	r26, Z+39	; 0x27
    220a:	b0 a5       	ldd	r27, Z+40	; 0x28
    220c:	85 8f       	std	Z+29, r24	; 0x1d
    220e:	96 8f       	std	Z+30, r25	; 0x1e
    2210:	a7 8f       	std	Z+31, r26	; 0x1f
    2212:	b0 a3       	std	Z+32, r27	; 0x20
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	92 a7       	std	Z+42, r25	; 0x2a
    221a:	81 a7       	std	Z+41, r24	; 0x29
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    221c:	d3 82       	std	Z+3, r13	; 0x03
    221e:	c2 82       	std	Z+2, r12	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    2224:	df 91       	pop	r29
    2226:	cf 91       	pop	r28
    2228:	1f 91       	pop	r17
    222a:	0f 91       	pop	r16
    222c:	ff 90       	pop	r15
    222e:	ef 90       	pop	r14
    2230:	df 90       	pop	r13
    2232:	cf 90       	pop	r12
    2234:	08 95       	ret

00002236 <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    2236:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <_nrk_scheduler>

  	return;
}
    223a:	08 95       	ret

0000223c <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    223c:	85 e6       	ldi	r24, 0x65	; 101
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	08 95       	ret

00002242 <_nrk_errno_set>:
void blink_morse_code_error( uint8_t number );


void _nrk_errno_set (NRK_ERRNO error_code)
{
    nrk_cur_task_TCB->errno = error_code;
    2242:	e0 91 3e 09 	lds	r30, 0x093E
    2246:	f0 91 3f 09 	lds	r31, 0x093F
    224a:	84 87       	std	Z+12, r24	; 0x0c
}
    224c:	08 95       	ret

0000224e <nrk_errno_get>:

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    224e:	e0 91 3e 09 	lds	r30, 0x093E
    2252:	f0 91 3f 09 	lds	r31, 0x093F
}
    2256:	84 85       	ldd	r24, Z+12	; 0x0c
    2258:	08 95       	ret

0000225a <nrk_error_get>:
}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    if (error_num == 0)
    225a:	20 91 d8 06 	lds	r18, 0x06D8
    225e:	22 23       	and	r18, r18
    2260:	41 f0       	breq	.+16     	; 0x2272 <nrk_error_get+0x18>
        return 0;
    *code = error_num;
    2262:	fb 01       	movw	r30, r22
    2264:	20 83       	st	Z, r18
    *task_id = error_task;
    2266:	20 91 a2 04 	lds	r18, 0x04A2
    226a:	fc 01       	movw	r30, r24
    226c:	20 83       	st	Z, r18
    return 1;
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	08 95       	ret


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    if (error_num == 0)
        return 0;
    2272:	80 e0       	ldi	r24, 0x00	; 0
    *code = error_num;
    *task_id = error_task;
    return 1;
}
    2274:	08 95       	ret

00002276 <pause>:
    }

}

void pause()
{
    2276:	df 93       	push	r29
    2278:	cf 93       	push	r28
    227a:	0f 92       	push	r0
    227c:	cd b7       	in	r28, 0x3d	; 61
    227e:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    2280:	19 82       	std	Y+1, r1	; 0x01
    2282:	07 c0       	rjmp	.+14     	; 0x2292 <pause+0x1c>
        nrk_spin_wait_us (2000);
    2284:	80 ed       	ldi	r24, 0xD0	; 208
    2286:	97 e0       	ldi	r25, 0x07	; 7
    2288:	0e 94 9e 20 	call	0x413c	; 0x413c <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    228c:	89 81       	ldd	r24, Y+1	; 0x01
    228e:	8f 5f       	subi	r24, 0xFF	; 255
    2290:	89 83       	std	Y+1, r24	; 0x01
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	84 36       	cpi	r24, 0x64	; 100
    2296:	b0 f3       	brcs	.-20     	; 0x2284 <pause+0xe>
        nrk_spin_wait_us (2000);
}
    2298:	0f 90       	pop	r0
    229a:	cf 91       	pop	r28
    229c:	df 91       	pop	r29
    229e:	08 95       	ret

000022a0 <blink_dot>:
    pause();
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <nrk_led_set>
    pause();
    22a8:	0e 94 3b 11 	call	0x2276	; 0x2276 <pause>
    nrk_led_clr(GREEN_LED);
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <nrk_led_clr>
    pause();
    22b4:	0e 94 3b 11 	call	0x2276	; 0x2276 <pause>
}
    22b8:	08 95       	ret

000022ba <blink_dash>:
    return t;
}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <nrk_led_set>
    pause();
    22c2:	0e 94 3b 11 	call	0x2276	; 0x2276 <pause>
    pause();
    22c6:	0e 94 3b 11 	call	0x2276	; 0x2276 <pause>
    pause();
    22ca:	0e 94 3b 11 	call	0x2276	; 0x2276 <pause>
    nrk_led_clr(GREEN_LED);
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <nrk_led_clr>
    pause();
    22d6:	0e 94 3b 11 	call	0x2276	; 0x2276 <pause>
}
    22da:	08 95       	ret

000022dc <blink_morse_code_error>:
    pause();
}


void blink_morse_code_error( uint8_t number )
{
    22dc:	ff 92       	push	r15
    22de:	0f 93       	push	r16
    22e0:	1f 93       	push	r17
    22e2:	df 93       	push	r29
    22e4:	cf 93       	push	r28
    22e6:	00 d0       	rcall	.+0      	; 0x22e8 <blink_morse_code_error+0xc>
    22e8:	0f 92       	push	r0
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    22ee:	00 d0       	rcall	.+0      	; 0x22f0 <blink_morse_code_error+0x14>
    22f0:	00 d0       	rcall	.+0      	; 0x22f2 <blink_morse_code_error+0x16>
    22f2:	00 d0       	rcall	.+0      	; 0x22f4 <blink_morse_code_error+0x18>
    22f4:	ed b7       	in	r30, 0x3d	; 61
    22f6:	fe b7       	in	r31, 0x3e	; 62
    22f8:	31 96       	adiw	r30, 0x01	; 1
    22fa:	8e 01       	movw	r16, r28
    22fc:	0f 5f       	subi	r16, 0xFF	; 255
    22fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2300:	ad b7       	in	r26, 0x3d	; 61
    2302:	be b7       	in	r27, 0x3e	; 62
    2304:	12 96       	adiw	r26, 0x02	; 2
    2306:	1c 93       	st	X, r17
    2308:	0e 93       	st	-X, r16
    230a:	11 97       	sbiw	r26, 0x01	; 1
    230c:	21 e4       	ldi	r18, 0x41	; 65
    230e:	33 e0       	ldi	r19, 0x03	; 3
    2310:	33 83       	std	Z+3, r19	; 0x03
    2312:	22 83       	std	Z+2, r18	; 0x02
    2314:	84 83       	std	Z+4, r24	; 0x04
    2316:	15 82       	std	Z+5, r1	; 0x05
    2318:	0e 94 80 2e 	call	0x5d00	; 0x5d00 <sprintf>

    for(i=0; i<strlen(str); i++ )
    231c:	ed b7       	in	r30, 0x3d	; 61
    231e:	fe b7       	in	r31, 0x3e	; 62
    2320:	36 96       	adiw	r30, 0x06	; 6
    2322:	0f b6       	in	r0, 0x3f	; 63
    2324:	f8 94       	cli
    2326:	fe bf       	out	0x3e, r31	; 62
    2328:	0f be       	out	0x3f, r0	; 63
    232a:	ed bf       	out	0x3d, r30	; 61
    232c:	ff 24       	eor	r15, r15
    232e:	72 c0       	rjmp	.+228    	; 0x2414 <blink_morse_code_error+0x138>
    {
        switch( str[i])
    2330:	80 0f       	add	r24, r16
    2332:	91 1f       	adc	r25, r17
    2334:	dc 01       	movw	r26, r24
    2336:	8c 91       	ld	r24, X
    2338:	84 33       	cpi	r24, 0x34	; 52
    233a:	d1 f1       	breq	.+116    	; 0x23b0 <blink_morse_code_error+0xd4>
    233c:	85 33       	cpi	r24, 0x35	; 53
    233e:	70 f4       	brcc	.+28     	; 0x235c <blink_morse_code_error+0x80>
    2340:	81 33       	cpi	r24, 0x31	; 49
    2342:	f9 f0       	breq	.+62     	; 0x2382 <blink_morse_code_error+0xa6>
    2344:	82 33       	cpi	r24, 0x32	; 50
    2346:	20 f4       	brcc	.+8      	; 0x2350 <blink_morse_code_error+0x74>
    2348:	80 33       	cpi	r24, 0x30	; 48
    234a:	09 f0       	breq	.+2      	; 0x234e <blink_morse_code_error+0x72>
    234c:	5c c0       	rjmp	.+184    	; 0x2406 <blink_morse_code_error+0x12a>
    234e:	16 c0       	rjmp	.+44     	; 0x237c <blink_morse_code_error+0xa0>
    2350:	82 33       	cpi	r24, 0x32	; 50
    2352:	11 f1       	breq	.+68     	; 0x2398 <blink_morse_code_error+0xbc>
    2354:	83 33       	cpi	r24, 0x33	; 51
    2356:	09 f0       	breq	.+2      	; 0x235a <blink_morse_code_error+0x7e>
    2358:	56 c0       	rjmp	.+172    	; 0x2406 <blink_morse_code_error+0x12a>
    235a:	23 c0       	rjmp	.+70     	; 0x23a2 <blink_morse_code_error+0xc6>
    235c:	87 33       	cpi	r24, 0x37	; 55
    235e:	c9 f1       	breq	.+114    	; 0x23d2 <blink_morse_code_error+0xf6>
    2360:	88 33       	cpi	r24, 0x38	; 56
    2362:	30 f4       	brcc	.+12     	; 0x2370 <blink_morse_code_error+0x94>
    2364:	85 33       	cpi	r24, 0x35	; 53
    2366:	69 f1       	breq	.+90     	; 0x23c2 <blink_morse_code_error+0xe6>
    2368:	86 33       	cpi	r24, 0x36	; 54
    236a:	09 f0       	breq	.+2      	; 0x236e <blink_morse_code_error+0x92>
    236c:	4c c0       	rjmp	.+152    	; 0x2406 <blink_morse_code_error+0x12a>
    236e:	2c c0       	rjmp	.+88     	; 0x23c8 <blink_morse_code_error+0xec>
    2370:	88 33       	cpi	r24, 0x38	; 56
    2372:	b1 f1       	breq	.+108    	; 0x23e0 <blink_morse_code_error+0x104>
    2374:	89 33       	cpi	r24, 0x39	; 57
    2376:	09 f0       	breq	.+2      	; 0x237a <blink_morse_code_error+0x9e>
    2378:	46 c0       	rjmp	.+140    	; 0x2406 <blink_morse_code_error+0x12a>
    237a:	3b c0       	rjmp	.+118    	; 0x23f2 <blink_morse_code_error+0x116>
        {
        case '0':
            blink_dash();
    237c:	0e 94 5d 11 	call	0x22ba	; 0x22ba <blink_dash>
    2380:	02 c0       	rjmp	.+4      	; 0x2386 <blink_morse_code_error+0xaa>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    2382:	0e 94 50 11 	call	0x22a0	; 0x22a0 <blink_dot>
            blink_dash();
    2386:	0e 94 5d 11 	call	0x22ba	; 0x22ba <blink_dash>
            blink_dash();
    238a:	0e 94 5d 11 	call	0x22ba	; 0x22ba <blink_dash>
            blink_dash();
    238e:	0e 94 5d 11 	call	0x22ba	; 0x22ba <blink_dash>
            blink_dash();
    2392:	0e 94 5d 11 	call	0x22ba	; 0x22ba <blink_dash>
            break;
    2396:	37 c0       	rjmp	.+110    	; 0x2406 <blink_morse_code_error+0x12a>
        case '2':
            blink_dot();
    2398:	0e 94 50 11 	call	0x22a0	; 0x22a0 <blink_dot>
            blink_dot();
    239c:	0e 94 50 11 	call	0x22a0	; 0x22a0 <blink_dot>
    23a0:	f4 cf       	rjmp	.-24     	; 0x238a <blink_morse_code_error+0xae>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    23a2:	0e 94 50 11 	call	0x22a0	; 0x22a0 <blink_dot>
            blink_dot();
    23a6:	0e 94 50 11 	call	0x22a0	; 0x22a0 <blink_dot>
            blink_dot();
    23aa:	0e 94 50 11 	call	0x22a0	; 0x22a0 <blink_dot>
    23ae:	ef cf       	rjmp	.-34     	; 0x238e <blink_morse_code_error+0xb2>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    23b0:	0e 94 50 11 	call	0x22a0	; 0x22a0 <blink_dot>
            blink_dot();
    23b4:	0e 94 50 11 	call	0x22a0	; 0x22a0 <blink_dot>
            blink_dot();
    23b8:	0e 94 50 11 	call	0x22a0	; 0x22a0 <blink_dot>
            blink_dot();
    23bc:	0e 94 50 11 	call	0x22a0	; 0x22a0 <blink_dot>
    23c0:	e8 cf       	rjmp	.-48     	; 0x2392 <blink_morse_code_error+0xb6>
            blink_dash();
            break;
        case '5':
            blink_dot();
    23c2:	0e 94 50 11 	call	0x22a0	; 0x22a0 <blink_dot>
    23c6:	02 c0       	rjmp	.+4      	; 0x23cc <blink_morse_code_error+0xf0>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    23c8:	0e 94 5d 11 	call	0x22ba	; 0x22ba <blink_dash>
            blink_dot();
    23cc:	0e 94 50 11 	call	0x22a0	; 0x22a0 <blink_dot>
    23d0:	04 c0       	rjmp	.+8      	; 0x23da <blink_morse_code_error+0xfe>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    23d2:	0e 94 5d 11 	call	0x22ba	; 0x22ba <blink_dash>
            blink_dash();
    23d6:	0e 94 5d 11 	call	0x22ba	; 0x22ba <blink_dash>
            blink_dot();
    23da:	0e 94 50 11 	call	0x22a0	; 0x22a0 <blink_dot>
    23de:	06 c0       	rjmp	.+12     	; 0x23ec <blink_morse_code_error+0x110>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    23e0:	0e 94 5d 11 	call	0x22ba	; 0x22ba <blink_dash>
            blink_dash();
    23e4:	0e 94 5d 11 	call	0x22ba	; 0x22ba <blink_dash>
            blink_dash();
    23e8:	0e 94 5d 11 	call	0x22ba	; 0x22ba <blink_dash>
            blink_dot();
    23ec:	0e 94 50 11 	call	0x22a0	; 0x22a0 <blink_dot>
    23f0:	08 c0       	rjmp	.+16     	; 0x2402 <blink_morse_code_error+0x126>
            blink_dot();
            break;
        case '9':
            blink_dash();
    23f2:	0e 94 5d 11 	call	0x22ba	; 0x22ba <blink_dash>
            blink_dash();
    23f6:	0e 94 5d 11 	call	0x22ba	; 0x22ba <blink_dash>
            blink_dash();
    23fa:	0e 94 5d 11 	call	0x22ba	; 0x22ba <blink_dash>
            blink_dash();
    23fe:	0e 94 5d 11 	call	0x22ba	; 0x22ba <blink_dash>
            blink_dot();
    2402:	0e 94 50 11 	call	0x22a0	; 0x22a0 <blink_dot>
            break;
        }
        pause();
    2406:	0e 94 3b 11 	call	0x2276	; 0x2276 <pause>
        pause();
    240a:	0e 94 3b 11 	call	0x2276	; 0x2276 <pause>
        pause();
    240e:	0e 94 3b 11 	call	0x2276	; 0x2276 <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    2412:	f3 94       	inc	r15
    2414:	f8 01       	movw	r30, r16
    2416:	01 90       	ld	r0, Z+
    2418:	00 20       	and	r0, r0
    241a:	e9 f7       	brne	.-6      	; 0x2416 <blink_morse_code_error+0x13a>
    241c:	31 97       	sbiw	r30, 0x01	; 1
    241e:	e0 1b       	sub	r30, r16
    2420:	f1 0b       	sbc	r31, r17
    2422:	8f 2d       	mov	r24, r15
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	8e 17       	cp	r24, r30
    2428:	9f 07       	cpc	r25, r31
    242a:	08 f4       	brcc	.+2      	; 0x242e <blink_morse_code_error+0x152>
    242c:	81 cf       	rjmp	.-254    	; 0x2330 <blink_morse_code_error+0x54>
        pause();
        pause();
        pause();
    }

}
    242e:	0f 90       	pop	r0
    2430:	0f 90       	pop	r0
    2432:	0f 90       	pop	r0
    2434:	cf 91       	pop	r28
    2436:	df 91       	pop	r29
    2438:	1f 91       	pop	r17
    243a:	0f 91       	pop	r16
    243c:	ff 90       	pop	r15
    243e:	08 95       	ret

00002440 <nrk_error_print>:
    *task_id = error_task;
    return 1;
}

int8_t nrk_error_print ()
{
    2440:	0f 93       	push	r16
    2442:	1f 93       	push	r17
    int8_t t=0,i=0;
    if (error_num == 0)
    2444:	80 91 d8 06 	lds	r24, 0x06D8
    2448:	88 23       	and	r24, r24
    244a:	19 f4       	brne	.+6      	; 0x2452 <nrk_error_print+0x12>
    }

#endif  /*  */
    error_num = 0;
    return t;
}
    244c:	1f 91       	pop	r17
    244e:	0f 91       	pop	r16
    2450:	08 95       	ret
    int8_t t=0,i=0;
    if (error_num == 0)
        return 0;

#ifdef NRK_HALT_ON_ERROR
    nrk_int_disable ();
    2452:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <nrk_int_disable>
    nrk_watchdog_disable();
#endif
#endif

#ifndef NRK_REBOOT_ON_ERROR
    nrk_int_disable ();
    2456:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <nrk_int_disable>
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    245a:	82 ec       	ldi	r24, 0xC2	; 194
    245c:	93 e0       	ldi	r25, 0x03	; 3
    245e:	0e 94 19 0a 	call	0x1432	; 0x1432 <nrk_kprintf>
        printf ("%d", error_task);
    2462:	00 d0       	rcall	.+0      	; 0x2464 <nrk_error_print+0x24>
    2464:	00 d0       	rcall	.+0      	; 0x2466 <nrk_error_print+0x26>
    2466:	ed b7       	in	r30, 0x3d	; 61
    2468:	fe b7       	in	r31, 0x3e	; 62
    246a:	31 96       	adiw	r30, 0x01	; 1
    246c:	81 e4       	ldi	r24, 0x41	; 65
    246e:	93 e0       	ldi	r25, 0x03	; 3
    2470:	ad b7       	in	r26, 0x3d	; 61
    2472:	be b7       	in	r27, 0x3e	; 62
    2474:	12 96       	adiw	r26, 0x02	; 2
    2476:	9c 93       	st	X, r25
    2478:	8e 93       	st	-X, r24
    247a:	11 97       	sbiw	r26, 0x01	; 1
    247c:	80 91 a2 04 	lds	r24, 0x04A2
    2480:	82 83       	std	Z+2, r24	; 0x02
    2482:	13 82       	std	Z+3, r1	; 0x03
    2484:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <printf>
        nrk_kprintf (PSTR ("): "));
    2488:	0f 90       	pop	r0
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	0f 90       	pop	r0
    2490:	8e eb       	ldi	r24, 0xBE	; 190
    2492:	93 e0       	ldi	r25, 0x03	; 3
    2494:	0e 94 19 0a 	call	0x1432	; 0x1432 <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    2498:	80 91 d8 06 	lds	r24, 0x06D8
    249c:	88 31       	cpi	r24, 0x18	; 24
    249e:	10 f0       	brcs	.+4      	; 0x24a4 <nrk_error_print+0x64>
            error_num = NRK_UNKOWN;
    24a0:	10 92 d8 06 	sts	0x06D8, r1
        switch (error_num)
    24a4:	80 91 d8 06 	lds	r24, 0x06D8
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	86 31       	cpi	r24, 0x16	; 22
    24ae:	91 05       	cpc	r25, r1
    24b0:	08 f0       	brcs	.+2      	; 0x24b4 <nrk_error_print+0x74>
    24b2:	4b c0       	rjmp	.+150    	; 0x254a <nrk_error_print+0x10a>
    24b4:	80 57       	subi	r24, 0x70	; 112
    24b6:	9f 4f       	sbci	r25, 0xFF	; 255
    24b8:	fc 01       	movw	r30, r24
    24ba:	ee 0f       	add	r30, r30
    24bc:	ff 1f       	adc	r31, r31
    24be:	05 90       	lpm	r0, Z+
    24c0:	f4 91       	lpm	r31, Z+
    24c2:	e0 2d       	mov	r30, r0
    24c4:	09 94       	ijmp
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    24c6:	82 e8       	ldi	r24, 0x82	; 130
    24c8:	93 e0       	ldi	r25, 0x03	; 3
    24ca:	41 c0       	rjmp	.+130    	; 0x254e <nrk_error_print+0x10e>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    24cc:	8b e5       	ldi	r24, 0x5B	; 91
    24ce:	93 e0       	ldi	r25, 0x03	; 3
    24d0:	3e c0       	rjmp	.+124    	; 0x254e <nrk_error_print+0x10e>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    24d2:	87 e4       	ldi	r24, 0x47	; 71
    24d4:	93 e0       	ldi	r25, 0x03	; 3
    24d6:	3b c0       	rjmp	.+118    	; 0x254e <nrk_error_print+0x10e>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    24d8:	81 e3       	ldi	r24, 0x31	; 49
    24da:	93 e0       	ldi	r25, 0x03	; 3
    24dc:	38 c0       	rjmp	.+112    	; 0x254e <nrk_error_print+0x10e>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    24de:	86 e1       	ldi	r24, 0x16	; 22
    24e0:	93 e0       	ldi	r25, 0x03	; 3
    24e2:	35 c0       	rjmp	.+106    	; 0x254e <nrk_error_print+0x10e>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	93 e0       	ldi	r25, 0x03	; 3
    24e8:	32 c0       	rjmp	.+100    	; 0x254e <nrk_error_print+0x10e>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    24ea:	88 ee       	ldi	r24, 0xE8	; 232
    24ec:	92 e0       	ldi	r25, 0x02	; 2
    24ee:	2f c0       	rjmp	.+94     	; 0x254e <nrk_error_print+0x10e>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    24f0:	85 ed       	ldi	r24, 0xD5	; 213
    24f2:	92 e0       	ldi	r25, 0x02	; 2
    24f4:	2c c0       	rjmp	.+88     	; 0x254e <nrk_error_print+0x10e>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    24f6:	82 ec       	ldi	r24, 0xC2	; 194
    24f8:	92 e0       	ldi	r25, 0x02	; 2
    24fa:	29 c0       	rjmp	.+82     	; 0x254e <nrk_error_print+0x10e>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    24fc:	84 ea       	ldi	r24, 0xA4	; 164
    24fe:	92 e0       	ldi	r25, 0x02	; 2
    2500:	26 c0       	rjmp	.+76     	; 0x254e <nrk_error_print+0x10e>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    2502:	8f e7       	ldi	r24, 0x7F	; 127
    2504:	92 e0       	ldi	r25, 0x02	; 2
    2506:	23 c0       	rjmp	.+70     	; 0x254e <nrk_error_print+0x10e>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    2508:	83 e7       	ldi	r24, 0x73	; 115
    250a:	92 e0       	ldi	r25, 0x02	; 2
    250c:	20 c0       	rjmp	.+64     	; 0x254e <nrk_error_print+0x10e>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    250e:	88 e5       	ldi	r24, 0x58	; 88
    2510:	92 e0       	ldi	r25, 0x02	; 2
    2512:	1d c0       	rjmp	.+58     	; 0x254e <nrk_error_print+0x10e>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    2514:	89 e4       	ldi	r24, 0x49	; 73
    2516:	92 e0       	ldi	r25, 0x02	; 2
    2518:	1a c0       	rjmp	.+52     	; 0x254e <nrk_error_print+0x10e>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    251a:	85 e3       	ldi	r24, 0x35	; 53
    251c:	92 e0       	ldi	r25, 0x02	; 2
    251e:	17 c0       	rjmp	.+46     	; 0x254e <nrk_error_print+0x10e>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    2520:	84 e2       	ldi	r24, 0x24	; 36
    2522:	92 e0       	ldi	r25, 0x02	; 2
    2524:	14 c0       	rjmp	.+40     	; 0x254e <nrk_error_print+0x10e>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    2526:	80 e1       	ldi	r24, 0x10	; 16
    2528:	92 e0       	ldi	r25, 0x02	; 2
    252a:	11 c0       	rjmp	.+34     	; 0x254e <nrk_error_print+0x10e>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    252c:	80 ef       	ldi	r24, 0xF0	; 240
    252e:	91 e0       	ldi	r25, 0x01	; 1
    2530:	0e c0       	rjmp	.+28     	; 0x254e <nrk_error_print+0x10e>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    2532:	88 ed       	ldi	r24, 0xD8	; 216
    2534:	91 e0       	ldi	r25, 0x01	; 1
    2536:	0b c0       	rjmp	.+22     	; 0x254e <nrk_error_print+0x10e>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    2538:	8d eb       	ldi	r24, 0xBD	; 189
    253a:	91 e0       	ldi	r25, 0x01	; 1
    253c:	08 c0       	rjmp	.+16     	; 0x254e <nrk_error_print+0x10e>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    253e:	8c ea       	ldi	r24, 0xAC	; 172
    2540:	91 e0       	ldi	r25, 0x01	; 1
    2542:	05 c0       	rjmp	.+10     	; 0x254e <nrk_error_print+0x10e>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    2544:	8d e9       	ldi	r24, 0x9D	; 157
    2546:	91 e0       	ldi	r25, 0x01	; 1
    2548:	02 c0       	rjmp	.+4      	; 0x254e <nrk_error_print+0x10e>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    254a:	86 e9       	ldi	r24, 0x96	; 150
    254c:	91 e0       	ldi	r25, 0x01	; 1
    254e:	0e 94 19 0a 	call	0x1432	; 0x1432 <nrk_kprintf>
        }
        putchar ('\r');
    2552:	60 91 6a 09 	lds	r22, 0x096A
    2556:	70 91 6b 09 	lds	r23, 0x096B
    255a:	8d e0       	ldi	r24, 0x0D	; 13
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <fputc>
        putchar ('\n');
    2562:	60 91 6a 09 	lds	r22, 0x096A
    2566:	70 91 6b 09 	lds	r23, 0x096B
    256a:	8a e0       	ldi	r24, 0x0A	; 10
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <fputc>
#endif  /*  */

#ifdef NRK_HALT_ON_ERROR
    while (1)
    {
        for(i=0; i<20; i++ )
    2572:	10 e0       	ldi	r17, 0x00	; 0
    2574:	1f c0       	rjmp	.+62     	; 0x25b4 <nrk_error_print+0x174>
        {
            nrk_led_set (2);
    2576:	82 e0       	ldi	r24, 0x02	; 2
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <nrk_led_set>
            nrk_led_clr (3);
    257e:	83 e0       	ldi	r24, 0x03	; 3
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <nrk_led_clr>
    2586:	04 e6       	ldi	r16, 0x64	; 100
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    2588:	88 ee       	ldi	r24, 0xE8	; 232
    258a:	93 e0       	ldi	r25, 0x03	; 3
    258c:	0e 94 9e 20 	call	0x413c	; 0x413c <nrk_spin_wait_us>
    2590:	01 50       	subi	r16, 0x01	; 1
    {
        for(i=0; i<20; i++ )
        {
            nrk_led_set (2);
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
    2592:	d1 f7       	brne	.-12     	; 0x2588 <nrk_error_print+0x148>
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
    2594:	83 e0       	ldi	r24, 0x03	; 3
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <nrk_led_set>
            nrk_led_clr (2);
    259c:	82 e0       	ldi	r24, 0x02	; 2
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <nrk_led_clr>
    25a4:	04 e6       	ldi	r16, 0x64	; 100
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    25a6:	88 ee       	ldi	r24, 0xE8	; 232
    25a8:	93 e0       	ldi	r25, 0x03	; 3
    25aa:	0e 94 9e 20 	call	0x413c	; 0x413c <nrk_spin_wait_us>
    25ae:	01 50       	subi	r16, 0x01	; 1
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
    25b0:	d1 f7       	brne	.-12     	; 0x25a6 <nrk_error_print+0x166>
#endif  /*  */

#ifdef NRK_HALT_ON_ERROR
    while (1)
    {
        for(i=0; i<20; i++ )
    25b2:	1f 5f       	subi	r17, 0xFF	; 255
    25b4:	14 31       	cpi	r17, 0x14	; 20
    25b6:	fc f2       	brlt	.-66     	; 0x2576 <nrk_error_print+0x136>
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
        }
        nrk_led_clr (3);
    25b8:	83 e0       	ldi	r24, 0x03	; 3
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <nrk_led_clr>
        nrk_led_clr (2);
    25c0:	82 e0       	ldi	r24, 0x02	; 2
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <nrk_led_clr>
        blink_morse_code_error( error_task );
    25c8:	80 91 a2 04 	lds	r24, 0x04A2
    25cc:	0e 94 6e 11 	call	0x22dc	; 0x22dc <blink_morse_code_error>
        pause();
    25d0:	0e 94 3b 11 	call	0x2276	; 0x2276 <pause>
        nrk_led_set(2);
    25d4:	82 e0       	ldi	r24, 0x02	; 2
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <nrk_led_set>
        pause();
    25dc:	0e 94 3b 11 	call	0x2276	; 0x2276 <pause>
        nrk_led_clr(2);
    25e0:	82 e0       	ldi	r24, 0x02	; 2
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <nrk_led_clr>
        pause();
    25e8:	0e 94 3b 11 	call	0x2276	; 0x2276 <pause>
        blink_morse_code_error( error_num);
    25ec:	80 91 d8 06 	lds	r24, 0x06D8
    25f0:	0e 94 6e 11 	call	0x22dc	; 0x22dc <blink_morse_code_error>
#endif  /*  */

#ifdef NRK_HALT_ON_ERROR
    while (1)
    {
        for(i=0; i<20; i++ )
    25f4:	10 e0       	ldi	r17, 0x00	; 0
    25f6:	bf cf       	rjmp	.-130    	; 0x2576 <nrk_error_print+0x136>

000025f8 <nrk_kernel_error_add>:
    nrk_error_print ();
#endif  /*  */
}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    25f8:	ef 92       	push	r14
    25fa:	ff 92       	push	r15
    25fc:	0f 93       	push	r16
    25fe:	1f 93       	push	r17
    2600:	18 2f       	mov	r17, r24
    2602:	e6 2e       	mov	r14, r22
    error_num = n;
    2604:	80 93 d8 06 	sts	0x06D8, r24
    error_task = task;
    2608:	60 93 a2 04 	sts	0x04A2, r22
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    260c:	0e 94 20 12 	call	0x2440	; 0x2440 <nrk_error_print>
    uint8_t t;
    uint8_t i;

    while (1)
    {
        for(i=0; i<20; i++ )
    2610:	00 e0       	ldi	r16, 0x00	; 0
    2612:	21 c0       	rjmp	.+66     	; 0x2656 <nrk_kernel_error_add+0x5e>
        {
            nrk_led_set (2);
    2614:	82 e0       	ldi	r24, 0x02	; 2
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <nrk_led_set>
            nrk_led_clr (3);
    261c:	83 e0       	ldi	r24, 0x03	; 3
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <nrk_led_clr>
    2624:	94 e6       	ldi	r25, 0x64	; 100
    2626:	f9 2e       	mov	r15, r25
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    2628:	88 ee       	ldi	r24, 0xE8	; 232
    262a:	93 e0       	ldi	r25, 0x03	; 3
    262c:	0e 94 9e 20 	call	0x413c	; 0x413c <nrk_spin_wait_us>
    2630:	fa 94       	dec	r15
    {
        for(i=0; i<20; i++ )
        {
            nrk_led_set (2);
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
    2632:	d1 f7       	brne	.-12     	; 0x2628 <nrk_kernel_error_add+0x30>
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
    2634:	83 e0       	ldi	r24, 0x03	; 3
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <nrk_led_set>
            nrk_led_clr (2);
    263c:	82 e0       	ldi	r24, 0x02	; 2
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <nrk_led_clr>
    2644:	84 e6       	ldi	r24, 0x64	; 100
    2646:	f8 2e       	mov	r15, r24
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    2648:	88 ee       	ldi	r24, 0xE8	; 232
    264a:	93 e0       	ldi	r25, 0x03	; 3
    264c:	0e 94 9e 20 	call	0x413c	; 0x413c <nrk_spin_wait_us>
    2650:	fa 94       	dec	r15
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
    2652:	d1 f7       	brne	.-12     	; 0x2648 <nrk_kernel_error_add+0x50>
    uint8_t t;
    uint8_t i;

    while (1)
    {
        for(i=0; i<20; i++ )
    2654:	0f 5f       	subi	r16, 0xFF	; 255
    2656:	04 31       	cpi	r16, 0x14	; 20
    2658:	e8 f2       	brcs	.-70     	; 0x2614 <nrk_kernel_error_add+0x1c>
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
        }
        nrk_led_clr (3);
    265a:	83 e0       	ldi	r24, 0x03	; 3
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <nrk_led_clr>
        nrk_led_clr (2);
    2662:	82 e0       	ldi	r24, 0x02	; 2
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <nrk_led_clr>
        blink_morse_code_error( task );
    266a:	8e 2d       	mov	r24, r14
    266c:	0e 94 6e 11 	call	0x22dc	; 0x22dc <blink_morse_code_error>
        blink_morse_code_error( n );
    2670:	81 2f       	mov	r24, r17
    2672:	0e 94 6e 11 	call	0x22dc	; 0x22dc <blink_morse_code_error>
    uint8_t t;
    uint8_t i;

    while (1)
    {
        for(i=0; i<20; i++ )
    2676:	00 e0       	ldi	r16, 0x00	; 0
    2678:	cd cf       	rjmp	.-102    	; 0x2614 <nrk_kernel_error_add+0x1c>

0000267a <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    267a:	80 93 d8 06 	sts	0x06D8, r24
    error_task = nrk_cur_task_TCB->task_ID;
    267e:	e0 91 3e 09 	lds	r30, 0x093E
    2682:	f0 91 3f 09 	lds	r31, 0x093F
    2686:	80 85       	ldd	r24, Z+8	; 0x08
    2688:	80 93 a2 04 	sts	0x04A2, r24
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    268c:	0e 94 20 12 	call	0x2440	; 0x2440 <nrk_error_print>
#endif  /*  */
}
    2690:	08 95       	ret

00002692 <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    2692:	4f 92       	push	r4
    2694:	5f 92       	push	r5
    2696:	6f 92       	push	r6
    2698:	7f 92       	push	r7
    269a:	8f 92       	push	r8
    269c:	9f 92       	push	r9
    269e:	af 92       	push	r10
    26a0:	bf 92       	push	r11
    26a2:	cf 92       	push	r12
    26a4:	df 92       	push	r13
    26a6:	ef 92       	push	r14
    26a8:	ff 92       	push	r15
    26aa:	0f 93       	push	r16
    26ac:	1f 93       	push	r17
    26ae:	cf 93       	push	r28
    26b0:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    26b2:	8e ec       	ldi	r24, 0xCE	; 206
    26b4:	93 e0       	ldi	r25, 0x03	; 3
    26b6:	0e 94 19 0a 	call	0x1432	; 0x1432 <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    26ba:	00 d0       	rcall	.+0      	; 0x26bc <dump_stack_info+0x2a>
    26bc:	00 d0       	rcall	.+0      	; 0x26be <dump_stack_info+0x2c>
    26be:	84 e4       	ldi	r24, 0x44	; 68
    26c0:	93 e0       	ldi	r25, 0x03	; 3
    26c2:	ad b7       	in	r26, 0x3d	; 61
    26c4:	be b7       	in	r27, 0x3e	; 62
    26c6:	12 96       	adiw	r26, 0x02	; 2
    26c8:	9c 93       	st	X, r25
    26ca:	8e 93       	st	-X, r24
    26cc:	11 97       	sbiw	r26, 0x01	; 1
    26ce:	e0 91 3e 09 	lds	r30, 0x093E
    26d2:	f0 91 3f 09 	lds	r31, 0x093F
    26d6:	80 85       	ldd	r24, Z+8	; 0x08
    26d8:	99 27       	eor	r25, r25
    26da:	87 fd       	sbrc	r24, 7
    26dc:	90 95       	com	r25
    26de:	14 96       	adiw	r26, 0x04	; 4
    26e0:	9c 93       	st	X, r25
    26e2:	8e 93       	st	-X, r24
    26e4:	13 97       	sbiw	r26, 0x03	; 3
    26e6:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    26ea:	e0 91 3e 09 	lds	r30, 0x093E
    26ee:	f0 91 3f 09 	lds	r31, 0x093F
    26f2:	c2 81       	ldd	r28, Z+2	; 0x02
    26f4:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    26f6:	8d e4       	ldi	r24, 0x4D	; 77
    26f8:	93 e0       	ldi	r25, 0x03	; 3
    26fa:	ed b7       	in	r30, 0x3d	; 61
    26fc:	fe b7       	in	r31, 0x3e	; 62
    26fe:	92 83       	std	Z+2, r25	; 0x02
    2700:	81 83       	std	Z+1, r24	; 0x01
    2702:	d4 83       	std	Z+4, r29	; 0x04
    2704:	c3 83       	std	Z+3, r28	; 0x03
    2706:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <printf>
    printf( "canary = %x ",*stkc );
    270a:	ed b7       	in	r30, 0x3d	; 61
    270c:	fe b7       	in	r31, 0x3e	; 62
    270e:	31 96       	adiw	r30, 0x01	; 1
    2710:	4a e5       	ldi	r20, 0x5A	; 90
    2712:	e4 2e       	mov	r14, r20
    2714:	43 e0       	ldi	r20, 0x03	; 3
    2716:	f4 2e       	mov	r15, r20
    2718:	ad b7       	in	r26, 0x3d	; 61
    271a:	be b7       	in	r27, 0x3e	; 62
    271c:	12 96       	adiw	r26, 0x02	; 2
    271e:	fc 92       	st	X, r15
    2720:	ee 92       	st	-X, r14
    2722:	11 97       	sbiw	r26, 0x01	; 1
    2724:	88 81       	ld	r24, Y
    2726:	82 83       	std	Z+2, r24	; 0x02
    2728:	13 82       	std	Z+3, r1	; 0x03
    272a:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    272e:	37 e6       	ldi	r19, 0x67	; 103
    2730:	c3 2e       	mov	r12, r19
    2732:	33 e0       	ldi	r19, 0x03	; 3
    2734:	d3 2e       	mov	r13, r19
    2736:	ed b7       	in	r30, 0x3d	; 61
    2738:	fe b7       	in	r31, 0x3e	; 62
    273a:	d2 82       	std	Z+2, r13	; 0x02
    273c:	c1 82       	std	Z+1, r12	; 0x01
    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    printf( "canary = %x ",*stkc );
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    273e:	e0 91 3e 09 	lds	r30, 0x093E
    2742:	f0 91 3f 09 	lds	r31, 0x093F
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    2746:	80 81       	ld	r24, Z
    2748:	91 81       	ldd	r25, Z+1	; 0x01
    274a:	ad b7       	in	r26, 0x3d	; 61
    274c:	be b7       	in	r27, 0x3e	; 62
    274e:	14 96       	adiw	r26, 0x04	; 4
    2750:	9c 93       	st	X, r25
    2752:	8e 93       	st	-X, r24
    2754:	13 97       	sbiw	r26, 0x03	; 3
    2756:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    275a:	21 e7       	ldi	r18, 0x71	; 113
    275c:	a2 2e       	mov	r10, r18
    275e:	23 e0       	ldi	r18, 0x03	; 3
    2760:	b2 2e       	mov	r11, r18
    2762:	ed b7       	in	r30, 0x3d	; 61
    2764:	fe b7       	in	r31, 0x3e	; 62
    2766:	b2 82       	std	Z+2, r11	; 0x02
    2768:	a1 82       	std	Z+1, r10	; 0x01
    276a:	80 91 3e 09 	lds	r24, 0x093E
    276e:	90 91 3f 09 	lds	r25, 0x093F
    2772:	94 83       	std	Z+4, r25	; 0x04
    2774:	83 83       	std	Z+3, r24	; 0x03
    2776:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <printf>
    277a:	01 e5       	ldi	r16, 0x51	; 81
    277c:	18 e0       	ldi	r17, 0x08	; 8
    277e:	0f 90       	pop	r0
    2780:	0f 90       	pop	r0
    2782:	0f 90       	pop	r0
    2784:	0f 90       	pop	r0
    2786:	c0 e0       	ldi	r28, 0x00	; 0
    2788:	d0 e0       	ldi	r29, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    278a:	91 e8       	ldi	r25, 0x81	; 129
    278c:	49 2e       	mov	r4, r25
    278e:	93 e0       	ldi	r25, 0x03	; 3
    2790:	59 2e       	mov	r5, r25
        printf( "canary = %x ",*stkc );
    2792:	9e 2c       	mov	r9, r14
    2794:	6f 2c       	mov	r6, r15
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    2796:	7c 2c       	mov	r7, r12
    2798:	8d 2c       	mov	r8, r13
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    279a:	c5 01       	movw	r24, r10
    279c:	ba 2c       	mov	r11, r10
    279e:	a9 2e       	mov	r10, r25
    27a0:	8b e2       	ldi	r24, 0x2B	; 43
    27a2:	c8 2e       	mov	r12, r24
    27a4:	d1 2c       	mov	r13, r1
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    27a6:	d8 01       	movw	r26, r16
    27a8:	12 96       	adiw	r26, 0x02	; 2
    27aa:	ed 90       	ld	r14, X+
    27ac:	fc 90       	ld	r15, X
    27ae:	13 97       	sbiw	r26, 0x03	; 3
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    27b0:	00 d0       	rcall	.+0      	; 0x27b2 <dump_stack_info+0x120>
    27b2:	00 d0       	rcall	.+0      	; 0x27b4 <dump_stack_info+0x122>
    27b4:	00 d0       	rcall	.+0      	; 0x27b6 <dump_stack_info+0x124>
    27b6:	ed b7       	in	r30, 0x3d	; 61
    27b8:	fe b7       	in	r31, 0x3e	; 62
    27ba:	31 96       	adiw	r30, 0x01	; 1
    27bc:	ad b7       	in	r26, 0x3d	; 61
    27be:	be b7       	in	r27, 0x3e	; 62
    27c0:	12 96       	adiw	r26, 0x02	; 2
    27c2:	5c 92       	st	X, r5
    27c4:	4e 92       	st	-X, r4
    27c6:	11 97       	sbiw	r26, 0x01	; 1
    27c8:	d3 83       	std	Z+3, r29	; 0x03
    27ca:	c2 83       	std	Z+2, r28	; 0x02
    27cc:	f5 82       	std	Z+5, r15	; 0x05
    27ce:	e4 82       	std	Z+4, r14	; 0x04
    27d0:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <printf>
        printf( "canary = %x ",*stkc );
    27d4:	0f 90       	pop	r0
    27d6:	0f 90       	pop	r0
    27d8:	ed b7       	in	r30, 0x3d	; 61
    27da:	fe b7       	in	r31, 0x3e	; 62
    27dc:	31 96       	adiw	r30, 0x01	; 1
    27de:	ad b7       	in	r26, 0x3d	; 61
    27e0:	be b7       	in	r27, 0x3e	; 62
    27e2:	11 96       	adiw	r26, 0x01	; 1
    27e4:	9c 92       	st	X, r9
    27e6:	11 97       	sbiw	r26, 0x01	; 1
    27e8:	12 96       	adiw	r26, 0x02	; 2
    27ea:	6c 92       	st	X, r6
    27ec:	d7 01       	movw	r26, r14
    27ee:	8c 91       	ld	r24, X
    27f0:	82 83       	std	Z+2, r24	; 0x02
    27f2:	13 82       	std	Z+3, r1	; 0x03
    27f4:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    27f8:	ed b7       	in	r30, 0x3d	; 61
    27fa:	fe b7       	in	r31, 0x3e	; 62
    27fc:	71 82       	std	Z+1, r7	; 0x01
    27fe:	82 82       	std	Z+2, r8	; 0x02
    2800:	d8 01       	movw	r26, r16
    2802:	8d 91       	ld	r24, X+
    2804:	9c 91       	ld	r25, X
    2806:	94 83       	std	Z+4, r25	; 0x04
    2808:	83 83       	std	Z+3, r24	; 0x03
    280a:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    280e:	ed b7       	in	r30, 0x3d	; 61
    2810:	fe b7       	in	r31, 0x3e	; 62
    2812:	b1 82       	std	Z+1, r11	; 0x01
    2814:	a2 82       	std	Z+2, r10	; 0x02
    2816:	cc 9d       	mul	r28, r12
    2818:	c0 01       	movw	r24, r0
    281a:	cd 9d       	mul	r28, r13
    281c:	90 0d       	add	r25, r0
    281e:	dc 9d       	mul	r29, r12
    2820:	90 0d       	add	r25, r0
    2822:	11 24       	eor	r1, r1
    2824:	8f 5a       	subi	r24, 0xAF	; 175
    2826:	97 4f       	sbci	r25, 0xF7	; 247
    2828:	94 83       	std	Z+4, r25	; 0x04
    282a:	83 83       	std	Z+3, r24	; 0x03
    282c:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <printf>
    2830:	21 96       	adiw	r28, 0x01	; 1
    2832:	05 5d       	subi	r16, 0xD5	; 213
    2834:	1f 4f       	sbci	r17, 0xFF	; 255
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    2836:	0f 90       	pop	r0
    2838:	0f 90       	pop	r0
    283a:	0f 90       	pop	r0
    283c:	0f 90       	pop	r0
    283e:	c5 30       	cpi	r28, 0x05	; 5
    2840:	d1 05       	cpc	r29, r1
    2842:	09 f0       	breq	.+2      	; 0x2846 <dump_stack_info+0x1b4>
    2844:	b0 cf       	rjmp	.-160    	; 0x27a6 <dump_stack_info+0x114>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    2846:	df 91       	pop	r29
    2848:	cf 91       	pop	r28
    284a:	1f 91       	pop	r17
    284c:	0f 91       	pop	r16
    284e:	ff 90       	pop	r15
    2850:	ef 90       	pop	r14
    2852:	df 90       	pop	r13
    2854:	cf 90       	pop	r12
    2856:	bf 90       	pop	r11
    2858:	af 90       	pop	r10
    285a:	9f 90       	pop	r9
    285c:	8f 90       	pop	r8
    285e:	7f 90       	pop	r7
    2860:	6f 90       	pop	r6
    2862:	5f 90       	pop	r5
    2864:	4f 90       	pop	r4
    2866:	08 95       	ret

00002868 <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    2868:	cf 93       	push	r28
    286a:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    286c:	e0 91 3e 09 	lds	r30, 0x093E
    2870:	f0 91 3f 09 	lds	r31, 0x093F
    2874:	c2 81       	ldd	r28, Z+2	; 0x02
    2876:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    2878:	88 81       	ld	r24, Y
    287a:	85 35       	cpi	r24, 0x55	; 85
    287c:	39 f0       	breq	.+14     	; 0x288c <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    287e:	0e 94 49 13 	call	0x2692	; 0x2692 <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	0e 94 3d 13 	call	0x267a	; 0x267a <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    2888:	85 e5       	ldi	r24, 0x55	; 85
    288a:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    288c:	e0 91 3e 09 	lds	r30, 0x093E
    2890:	f0 91 3f 09 	lds	r31, 0x093F
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    2894:	80 81       	ld	r24, Z
    2896:	91 81       	ldd	r25, Z+1	; 0x01
    2898:	22 e4       	ldi	r18, 0x42	; 66
    289a:	80 30       	cpi	r24, 0x00	; 0
    289c:	92 07       	cpc	r25, r18
    289e:	28 f0       	brcs	.+10     	; 0x28aa <nrk_stack_check+0x42>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    28a0:	0e 94 49 13 	call	0x2692	; 0x2692 <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    28a4:	82 e1       	ldi	r24, 0x12	; 18
    28a6:	0e 94 3d 13 	call	0x267a	; 0x267a <nrk_error_add>




#endif
}
    28aa:	df 91       	pop	r29
    28ac:	cf 91       	pop	r28
    28ae:	08 95       	ret

000028b0 <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    28b0:	99 27       	eor	r25, r25
    28b2:	87 fd       	sbrc	r24, 7
    28b4:	90 95       	com	r25
    28b6:	2b e2       	ldi	r18, 0x2B	; 43
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	82 9f       	mul	r24, r18
    28bc:	f0 01       	movw	r30, r0
    28be:	83 9f       	mul	r24, r19
    28c0:	f0 0d       	add	r31, r0
    28c2:	92 9f       	mul	r25, r18
    28c4:	f0 0d       	add	r31, r0
    28c6:	11 24       	eor	r1, r1
    28c8:	ef 5a       	subi	r30, 0xAF	; 175
    28ca:	f7 4f       	sbci	r31, 0xF7	; 247
    28cc:	a2 81       	ldd	r26, Z+2	; 0x02
    28ce:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    28d0:	8c 91       	ld	r24, X
    28d2:	85 35       	cpi	r24, 0x55	; 85
    28d4:	19 f0       	breq	.+6      	; 0x28dc <nrk_stack_check_pid+0x2c>
    {
        *stkc=STK_CANARY_VAL;
    28d6:	85 e5       	ldi	r24, 0x55	; 85
    28d8:	8c 93       	st	X, r24
    28da:	09 c0       	rjmp	.+18     	; 0x28ee <nrk_stack_check_pid+0x3e>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    28dc:	80 81       	ld	r24, Z
    28de:	91 81       	ldd	r25, Z+1	; 0x01
    28e0:	22 e4       	ldi	r18, 0x42	; 66
    28e2:	80 30       	cpi	r24, 0x00	; 0
    28e4:	92 07       	cpc	r25, r18
    28e6:	28 f0       	brcs	.+10     	; 0x28f2 <nrk_stack_check_pid+0x42>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    28e8:	82 e1       	ldi	r24, 0x12	; 18
    28ea:	0e 94 3d 13 	call	0x267a	; 0x267a <nrk_error_add>
        return NRK_ERROR;
    28ee:	8f ef       	ldi	r24, 0xFF	; 255
    28f0:	08 95       	ret
    }
#endif
    return NRK_OK;
    28f2:	81 e0       	ldi	r24, 0x01	; 1
}
    28f4:	08 95       	ret

000028f6 <nrk_signal_create>:
int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    28f6:	60 91 c8 05 	lds	r22, 0x05C8
    28fa:	70 91 c9 05 	lds	r23, 0x05C9
    28fe:	80 91 ca 05 	lds	r24, 0x05CA
    2902:	90 91 cb 05 	lds	r25, 0x05CB
    2906:	e0 e0       	ldi	r30, 0x00	; 0
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	9b 01       	movw	r18, r22
    290c:	ac 01       	movw	r20, r24
    290e:	0e 2e       	mov	r0, r30
    2910:	04 c0       	rjmp	.+8      	; 0x291a <nrk_signal_create+0x24>
    2912:	56 95       	lsr	r21
    2914:	47 95       	ror	r20
    2916:	37 95       	ror	r19
    2918:	27 95       	ror	r18
    291a:	0a 94       	dec	r0
    291c:	d2 f7       	brpl	.-12     	; 0x2912 <nrk_signal_create+0x1c>
    291e:	20 fd       	sbrc	r18, 0
    2920:	1a c0       	rjmp	.+52     	; 0x2956 <nrk_signal_create+0x60>
		{    
			_nrk_signal_list|=SIG(i);
    2922:	21 e0       	ldi	r18, 0x01	; 1
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	40 e0       	ldi	r20, 0x00	; 0
    2928:	50 e0       	ldi	r21, 0x00	; 0
    292a:	0e 2e       	mov	r0, r30
    292c:	04 c0       	rjmp	.+8      	; 0x2936 <nrk_signal_create+0x40>
    292e:	22 0f       	add	r18, r18
    2930:	33 1f       	adc	r19, r19
    2932:	44 1f       	adc	r20, r20
    2934:	55 1f       	adc	r21, r21
    2936:	0a 94       	dec	r0
    2938:	d2 f7       	brpl	.-12     	; 0x292e <nrk_signal_create+0x38>
    293a:	26 2b       	or	r18, r22
    293c:	37 2b       	or	r19, r23
    293e:	48 2b       	or	r20, r24
    2940:	59 2b       	or	r21, r25
    2942:	20 93 c8 05 	sts	0x05C8, r18
    2946:	30 93 c9 05 	sts	0x05C9, r19
    294a:	40 93 ca 05 	sts	0x05CA, r20
    294e:	50 93 cb 05 	sts	0x05CB, r21
			return i;
    2952:	8e 2f       	mov	r24, r30
    2954:	08 95       	ret
    2956:	31 96       	adiw	r30, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    2958:	e0 32       	cpi	r30, 0x20	; 32
    295a:	f1 05       	cpc	r31, r1
    295c:	b1 f6       	brne	.-84     	; 0x290a <nrk_signal_create+0x14>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    295e:	8f ef       	ldi	r24, 0xFF	; 255


}
    2960:	08 95       	ret

00002962 <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    2962:	e0 91 3e 09 	lds	r30, 0x093E
    2966:	f0 91 3f 09 	lds	r31, 0x093F


}

uint32_t nrk_signal_get_registered_mask()
{
    296a:	65 85       	ldd	r22, Z+13	; 0x0d
    296c:	76 85       	ldd	r23, Z+14	; 0x0e
        return nrk_cur_task_TCB->registered_signal_mask;
}
    296e:	87 85       	ldd	r24, Z+15	; 0x0f
    2970:	90 89       	ldd	r25, Z+16	; 0x10
    2972:	08 95       	ret

00002974 <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    2974:	df 92       	push	r13
    2976:	ef 92       	push	r14
    2978:	ff 92       	push	r15
    297a:	0f 93       	push	r16
    297c:	1f 93       	push	r17
    297e:	d8 2e       	mov	r13, r24
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	e8 2e       	mov	r14, r24
    2984:	f1 2c       	mov	r15, r1
    2986:	01 2d       	mov	r16, r1
    2988:	11 2d       	mov	r17, r1
    298a:	0d 2c       	mov	r0, r13
    298c:	04 c0       	rjmp	.+8      	; 0x2996 <nrk_signal_delete+0x22>
    298e:	ee 0c       	add	r14, r14
    2990:	ff 1c       	adc	r15, r15
    2992:	00 1f       	adc	r16, r16
    2994:	11 1f       	adc	r17, r17
    2996:	0a 94       	dec	r0
    2998:	d2 f7       	brpl	.-12     	; 0x298e <nrk_signal_delete+0x1a>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    299a:	80 91 c8 05 	lds	r24, 0x05C8
    299e:	90 91 c9 05 	lds	r25, 0x05C9
    29a2:	a0 91 ca 05 	lds	r26, 0x05CA
    29a6:	b0 91 cb 05 	lds	r27, 0x05CB
    29aa:	8e 21       	and	r24, r14
    29ac:	9f 21       	and	r25, r15
    29ae:	a0 23       	and	r26, r16
    29b0:	b1 23       	and	r27, r17
    29b2:	00 97       	sbiw	r24, 0x00	; 0
    29b4:	a1 05       	cpc	r26, r1
    29b6:	b1 05       	cpc	r27, r1
    29b8:	09 f4       	brne	.+2      	; 0x29bc <nrk_signal_delete+0x48>
    29ba:	5d c0       	rjmp	.+186    	; 0x2a76 <nrk_signal_delete+0x102>

	nrk_int_disable();
    29bc:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <nrk_int_disable>
    29c0:	e8 e5       	ldi	r30, 0x58	; 88
    29c2:	f8 e0       	ldi	r31, 0x08	; 8
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    29c4:	a8 01       	movw	r20, r16
    29c6:	97 01       	movw	r18, r14
    29c8:	20 95       	com	r18
    29ca:	30 95       	com	r19
    29cc:	40 95       	com	r20
    29ce:	50 95       	com	r21
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    29d0:	63 e0       	ldi	r22, 0x03	; 3

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    29d2:	81 81       	ldd	r24, Z+1	; 0x01
    29d4:	8f 3f       	cpi	r24, 0xFF	; 255
    29d6:	39 f1       	breq	.+78     	; 0x2a26 <nrk_signal_delete+0xb2>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    29d8:	86 81       	ldd	r24, Z+6	; 0x06
    29da:	97 81       	ldd	r25, Z+7	; 0x07
    29dc:	a0 85       	ldd	r26, Z+8	; 0x08
    29de:	b1 85       	ldd	r27, Z+9	; 0x09
    29e0:	8e 15       	cp	r24, r14
    29e2:	9f 05       	cpc	r25, r15
    29e4:	a0 07       	cpc	r26, r16
    29e6:	b1 07       	cpc	r27, r17
    29e8:	31 f4       	brne	.+12     	; 0x29f6 <nrk_signal_delete+0x82>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    29ea:	12 86       	std	Z+10, r1	; 0x0a
    29ec:	13 86       	std	Z+11, r1	; 0x0b
    29ee:	14 86       	std	Z+12, r1	; 0x0c
    29f0:	15 86       	std	Z+13, r1	; 0x0d
			nrk_task_TCB[task_ID].event_suspend=0;
    29f2:	10 82       	st	Z, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    29f4:	62 83       	std	Z+2, r22	; 0x02
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    29f6:	86 81       	ldd	r24, Z+6	; 0x06
    29f8:	97 81       	ldd	r25, Z+7	; 0x07
    29fa:	a0 85       	ldd	r26, Z+8	; 0x08
    29fc:	b1 85       	ldd	r27, Z+9	; 0x09
    29fe:	82 23       	and	r24, r18
    2a00:	93 23       	and	r25, r19
    2a02:	a4 23       	and	r26, r20
    2a04:	b5 23       	and	r27, r21
    2a06:	86 83       	std	Z+6, r24	; 0x06
    2a08:	97 83       	std	Z+7, r25	; 0x07
    2a0a:	a0 87       	std	Z+8, r26	; 0x08
    2a0c:	b1 87       	std	Z+9, r27	; 0x09
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2a0e:	82 85       	ldd	r24, Z+10	; 0x0a
    2a10:	93 85       	ldd	r25, Z+11	; 0x0b
    2a12:	a4 85       	ldd	r26, Z+12	; 0x0c
    2a14:	b5 85       	ldd	r27, Z+13	; 0x0d
    2a16:	82 23       	and	r24, r18
    2a18:	93 23       	and	r25, r19
    2a1a:	a4 23       	and	r26, r20
    2a1c:	b5 23       	and	r27, r21
    2a1e:	82 87       	std	Z+10, r24	; 0x0a
    2a20:	93 87       	std	Z+11, r25	; 0x0b
    2a22:	a4 87       	std	Z+12, r26	; 0x0c
    2a24:	b5 87       	std	Z+13, r27	; 0x0d
    2a26:	bb 96       	adiw	r30, 0x2b	; 43
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    2a28:	89 e0       	ldi	r24, 0x09	; 9
    2a2a:	ef 32       	cpi	r30, 0x2F	; 47
    2a2c:	f8 07       	cpc	r31, r24
    2a2e:	89 f6       	brne	.-94     	; 0x29d2 <nrk_signal_delete+0x5e>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    2a30:	2e ef       	ldi	r18, 0xFE	; 254
    2a32:	3f ef       	ldi	r19, 0xFF	; 255
    2a34:	4f ef       	ldi	r20, 0xFF	; 255
    2a36:	5f ef       	ldi	r21, 0xFF	; 255
    2a38:	04 c0       	rjmp	.+8      	; 0x2a42 <nrk_signal_delete+0xce>
    2a3a:	22 0f       	add	r18, r18
    2a3c:	33 1f       	adc	r19, r19
    2a3e:	44 1f       	adc	r20, r20
    2a40:	55 1f       	adc	r21, r21
    2a42:	da 94       	dec	r13
    2a44:	d2 f7       	brpl	.-12     	; 0x2a3a <nrk_signal_delete+0xc6>
    2a46:	80 91 c8 05 	lds	r24, 0x05C8
    2a4a:	90 91 c9 05 	lds	r25, 0x05C9
    2a4e:	a0 91 ca 05 	lds	r26, 0x05CA
    2a52:	b0 91 cb 05 	lds	r27, 0x05CB
    2a56:	82 23       	and	r24, r18
    2a58:	93 23       	and	r25, r19
    2a5a:	a4 23       	and	r26, r20
    2a5c:	b5 23       	and	r27, r21
    2a5e:	80 93 c8 05 	sts	0x05C8, r24
    2a62:	90 93 c9 05 	sts	0x05C9, r25
    2a66:	a0 93 ca 05 	sts	0x05CA, r26
    2a6a:	b0 93 cb 05 	sts	0x05CB, r27
	nrk_int_enable();
    2a6e:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <nrk_int_enable>

	return NRK_OK;
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	01 c0       	rjmp	.+2      	; 0x2a78 <nrk_signal_delete+0x104>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    2a76:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    2a78:	1f 91       	pop	r17
    2a7a:	0f 91       	pop	r16
    2a7c:	ff 90       	pop	r15
    2a7e:	ef 90       	pop	r14
    2a80:	df 90       	pop	r13
    2a82:	08 95       	ret

00002a84 <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    2a84:	ef 92       	push	r14
    2a86:	ff 92       	push	r15
    2a88:	0f 93       	push	r16
    2a8a:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    2a8c:	21 e0       	ldi	r18, 0x01	; 1
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	40 e0       	ldi	r20, 0x00	; 0
    2a92:	50 e0       	ldi	r21, 0x00	; 0
    2a94:	04 c0       	rjmp	.+8      	; 0x2a9e <nrk_signal_unregister+0x1a>
    2a96:	22 0f       	add	r18, r18
    2a98:	33 1f       	adc	r19, r19
    2a9a:	44 1f       	adc	r20, r20
    2a9c:	55 1f       	adc	r21, r21
    2a9e:	8a 95       	dec	r24
    2aa0:	d2 f7       	brpl	.-12     	; 0x2a96 <nrk_signal_unregister+0x12>

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    2aa2:	e0 91 3e 09 	lds	r30, 0x093E
    2aa6:	f0 91 3f 09 	lds	r31, 0x093F
    2aaa:	85 85       	ldd	r24, Z+13	; 0x0d
    2aac:	96 85       	ldd	r25, Z+14	; 0x0e
    2aae:	a7 85       	ldd	r26, Z+15	; 0x0f
    2ab0:	b0 89       	ldd	r27, Z+16	; 0x10
    2ab2:	79 01       	movw	r14, r18
    2ab4:	8a 01       	movw	r16, r20
    2ab6:	e8 22       	and	r14, r24
    2ab8:	f9 22       	and	r15, r25
    2aba:	0a 23       	and	r16, r26
    2abc:	1b 23       	and	r17, r27
    2abe:	e1 14       	cp	r14, r1
    2ac0:	f1 04       	cpc	r15, r1
    2ac2:	01 05       	cpc	r16, r1
    2ac4:	11 05       	cpc	r17, r1
    2ac6:	d1 f0       	breq	.+52     	; 0x2afc <nrk_signal_unregister+0x78>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    2ac8:	20 95       	com	r18
    2aca:	30 95       	com	r19
    2acc:	40 95       	com	r20
    2ace:	50 95       	com	r21
    2ad0:	82 23       	and	r24, r18
    2ad2:	93 23       	and	r25, r19
    2ad4:	a4 23       	and	r26, r20
    2ad6:	b5 23       	and	r27, r21
    2ad8:	85 87       	std	Z+13, r24	; 0x0d
    2ada:	96 87       	std	Z+14, r25	; 0x0e
    2adc:	a7 87       	std	Z+15, r26	; 0x0f
    2ade:	b0 8b       	std	Z+16, r27	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    2ae0:	81 89       	ldd	r24, Z+17	; 0x11
    2ae2:	92 89       	ldd	r25, Z+18	; 0x12
    2ae4:	a3 89       	ldd	r26, Z+19	; 0x13
    2ae6:	b4 89       	ldd	r27, Z+20	; 0x14
    2ae8:	82 23       	and	r24, r18
    2aea:	93 23       	and	r25, r19
    2aec:	a4 23       	and	r26, r20
    2aee:	b5 23       	and	r27, r21
    2af0:	81 8b       	std	Z+17, r24	; 0x11
    2af2:	92 8b       	std	Z+18, r25	; 0x12
    2af4:	a3 8b       	std	Z+19, r26	; 0x13
    2af6:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	01 c0       	rjmp	.+2      	; 0x2afe <nrk_signal_unregister+0x7a>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    2afc:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    2afe:	1f 91       	pop	r17
    2b00:	0f 91       	pop	r16
    2b02:	ff 90       	pop	r15
    2b04:	ef 90       	pop	r14
    2b06:	08 95       	ret

00002b08 <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    2b08:	20 91 c8 05 	lds	r18, 0x05C8
    2b0c:	30 91 c9 05 	lds	r19, 0x05C9
    2b10:	40 91 ca 05 	lds	r20, 0x05CA
    2b14:	50 91 cb 05 	lds	r21, 0x05CB
    2b18:	08 2e       	mov	r0, r24
    2b1a:	04 c0       	rjmp	.+8      	; 0x2b24 <nrk_signal_register+0x1c>
    2b1c:	56 95       	lsr	r21
    2b1e:	47 95       	ror	r20
    2b20:	37 95       	ror	r19
    2b22:	27 95       	ror	r18
    2b24:	0a 94       	dec	r0
    2b26:	d2 f7       	brpl	.-12     	; 0x2b1c <nrk_signal_register+0x14>
    2b28:	21 70       	andi	r18, 0x01	; 1
    2b2a:	30 70       	andi	r19, 0x00	; 0
    2b2c:	21 15       	cp	r18, r1
    2b2e:	31 05       	cpc	r19, r1
    2b30:	e9 f0       	breq	.+58     	; 0x2b6c <nrk_signal_register+0x64>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    2b32:	e0 91 3e 09 	lds	r30, 0x093E
    2b36:	f0 91 3f 09 	lds	r31, 0x093F
    2b3a:	21 e0       	ldi	r18, 0x01	; 1
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	40 e0       	ldi	r20, 0x00	; 0
    2b40:	50 e0       	ldi	r21, 0x00	; 0
    2b42:	04 c0       	rjmp	.+8      	; 0x2b4c <nrk_signal_register+0x44>
    2b44:	22 0f       	add	r18, r18
    2b46:	33 1f       	adc	r19, r19
    2b48:	44 1f       	adc	r20, r20
    2b4a:	55 1f       	adc	r21, r21
    2b4c:	8a 95       	dec	r24
    2b4e:	d2 f7       	brpl	.-12     	; 0x2b44 <nrk_signal_register+0x3c>
    2b50:	85 85       	ldd	r24, Z+13	; 0x0d
    2b52:	96 85       	ldd	r25, Z+14	; 0x0e
    2b54:	a7 85       	ldd	r26, Z+15	; 0x0f
    2b56:	b0 89       	ldd	r27, Z+16	; 0x10
    2b58:	82 2b       	or	r24, r18
    2b5a:	93 2b       	or	r25, r19
    2b5c:	a4 2b       	or	r26, r20
    2b5e:	b5 2b       	or	r27, r21
    2b60:	85 87       	std	Z+13, r24	; 0x0d
    2b62:	96 87       	std	Z+14, r25	; 0x0e
    2b64:	a7 87       	std	Z+15, r26	; 0x0f
    2b66:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	08 95       	ret
	}
            
	return NRK_ERROR;
    2b6c:	8f ef       	ldi	r24, 0xFF	; 255
}
    2b6e:	08 95       	ret

00002b70 <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    2b70:	ef 92       	push	r14
    2b72:	ff 92       	push	r15
    2b74:	0f 93       	push	r16
    2b76:	1f 93       	push	r17
    2b78:	df 93       	push	r29
    2b7a:	cf 93       	push	r28
    2b7c:	0f 92       	push	r0
    2b7e:	cd b7       	in	r28, 0x3d	; 61
    2b80:	de b7       	in	r29, 0x3e	; 62

	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    2b82:	91 e0       	ldi	r25, 0x01	; 1
    2b84:	e9 2e       	mov	r14, r25
    2b86:	f1 2c       	mov	r15, r1
    2b88:	01 2d       	mov	r16, r1
    2b8a:	11 2d       	mov	r17, r1
    2b8c:	04 c0       	rjmp	.+8      	; 0x2b96 <nrk_event_signal+0x26>
    2b8e:	ee 0c       	add	r14, r14
    2b90:	ff 1c       	adc	r15, r15
    2b92:	00 1f       	adc	r16, r16
    2b94:	11 1f       	adc	r17, r17
    2b96:	8a 95       	dec	r24
    2b98:	d2 f7       	brpl	.-12     	; 0x2b8e <nrk_event_signal+0x1e>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    2b9a:	80 91 c8 05 	lds	r24, 0x05C8
    2b9e:	90 91 c9 05 	lds	r25, 0x05C9
    2ba2:	a0 91 ca 05 	lds	r26, 0x05CA
    2ba6:	b0 91 cb 05 	lds	r27, 0x05CB
    2baa:	8e 21       	and	r24, r14
    2bac:	9f 21       	and	r25, r15
    2bae:	a0 23       	and	r26, r16
    2bb0:	b1 23       	and	r27, r17
    2bb2:	00 97       	sbiw	r24, 0x00	; 0
    2bb4:	a1 05       	cpc	r26, r1
    2bb6:	b1 05       	cpc	r27, r1
    2bb8:	11 f4       	brne	.+4      	; 0x2bbe <nrk_event_signal+0x4e>
    2bba:	81 e0       	ldi	r24, 0x01	; 1
    2bbc:	43 c0       	rjmp	.+134    	; 0x2c44 <nrk_event_signal+0xd4>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    2bbe:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <nrk_int_disable>
    2bc2:	e8 e5       	ldi	r30, 0x58	; 88
    2bc4:	f8 e0       	ldi	r31, 0x08	; 8

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2bc8:	33 e0       	ldi	r19, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    2bca:	80 81       	ld	r24, Z
    2bcc:	81 30       	cpi	r24, 0x01	; 1
    2bce:	b9 f4       	brne	.+46     	; 0x2bfe <nrk_event_signal+0x8e>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    2bd0:	82 85       	ldd	r24, Z+10	; 0x0a
    2bd2:	93 85       	ldd	r25, Z+11	; 0x0b
    2bd4:	a4 85       	ldd	r26, Z+12	; 0x0c
    2bd6:	b5 85       	ldd	r27, Z+13	; 0x0d
    2bd8:	8e 21       	and	r24, r14
    2bda:	9f 21       	and	r25, r15
    2bdc:	a0 23       	and	r26, r16
    2bde:	b1 23       	and	r27, r17
    2be0:	00 97       	sbiw	r24, 0x00	; 0
    2be2:	a1 05       	cpc	r26, r1
    2be4:	b1 05       	cpc	r27, r1
    2be6:	59 f0       	breq	.+22     	; 0x2bfe <nrk_event_signal+0x8e>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2be8:	32 83       	std	Z+2, r19	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    2bea:	16 86       	std	Z+14, r1	; 0x0e
    2bec:	17 86       	std	Z+15, r1	; 0x0f
    2bee:	10 8a       	std	Z+16, r1	; 0x10
    2bf0:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    2bf2:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    2bf4:	e2 86       	std	Z+10, r14	; 0x0a
    2bf6:	f3 86       	std	Z+11, r15	; 0x0b
    2bf8:	04 87       	std	Z+12, r16	; 0x0c
    2bfa:	15 87       	std	Z+13, r17	; 0x0d
					event_occured=1;
    2bfc:	21 e0       	ldi	r18, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    2bfe:	80 81       	ld	r24, Z
    2c00:	82 30       	cpi	r24, 0x02	; 2
    2c02:	a1 f4       	brne	.+40     	; 0x2c2c <nrk_event_signal+0xbc>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    2c04:	82 85       	ldd	r24, Z+10	; 0x0a
    2c06:	93 85       	ldd	r25, Z+11	; 0x0b
    2c08:	a4 85       	ldd	r26, Z+12	; 0x0c
    2c0a:	b5 85       	ldd	r27, Z+13	; 0x0d
    2c0c:	8e 15       	cp	r24, r14
    2c0e:	9f 05       	cpc	r25, r15
    2c10:	a0 07       	cpc	r26, r16
    2c12:	b1 07       	cpc	r27, r17
    2c14:	59 f4       	brne	.+22     	; 0x2c2c <nrk_event_signal+0xbc>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2c16:	32 83       	std	Z+2, r19	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    2c18:	16 86       	std	Z+14, r1	; 0x0e
    2c1a:	17 86       	std	Z+15, r1	; 0x0f
    2c1c:	10 8a       	std	Z+16, r1	; 0x10
    2c1e:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    2c20:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    2c22:	12 86       	std	Z+10, r1	; 0x0a
    2c24:	13 86       	std	Z+11, r1	; 0x0b
    2c26:	14 86       	std	Z+12, r1	; 0x0c
    2c28:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    2c2a:	21 e0       	ldi	r18, 0x01	; 1
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
					nrk_task_TCB[task_ID].next_wakeup=0;
					nrk_task_TCB[task_ID].event_suspend=0;
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    2c2c:	bb 96       	adiw	r30, 0x2b	; 43
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    2c2e:	89 e0       	ldi	r24, 0x09	; 9
    2c30:	ef 32       	cpi	r30, 0x2F	; 47
    2c32:	f8 07       	cpc	r31, r24
    2c34:	51 f6       	brne	.-108    	; 0x2bca <nrk_event_signal+0x5a>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    2c36:	29 83       	std	Y+1, r18	; 0x01
    2c38:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <nrk_int_enable>
	if(event_occured)
    2c3c:	29 81       	ldd	r18, Y+1	; 0x01
    2c3e:	22 23       	and	r18, r18
    2c40:	29 f4       	brne	.+10     	; 0x2c4c <nrk_event_signal+0xdc>
	{
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    2c42:	82 e0       	ldi	r24, 0x02	; 2
    2c44:	0e 94 21 11 	call	0x2242	; 0x2242 <_nrk_errno_set>
	return NRK_ERROR;
    2c48:	8f ef       	ldi	r24, 0xFF	; 255
    2c4a:	01 c0       	rjmp	.+2      	; 0x2c4e <nrk_event_signal+0xde>
	//	}
	}
	nrk_int_enable();
	if(event_occured)
	{
		return NRK_OK;
    2c4c:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    2c4e:	0f 90       	pop	r0
    2c50:	cf 91       	pop	r28
    2c52:	df 91       	pop	r29
    2c54:	1f 91       	pop	r17
    2c56:	0f 91       	pop	r16
    2c58:	ff 90       	pop	r15
    2c5a:	ef 90       	pop	r14
    2c5c:	08 95       	ret

00002c5e <nrk_event_wait>:

uint32_t nrk_event_wait(uint32_t event_mask)
{

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    2c5e:	e0 91 3e 09 	lds	r30, 0x093E
    2c62:	f0 91 3f 09 	lds	r31, 0x093F
    2c66:	25 85       	ldd	r18, Z+13	; 0x0d
    2c68:	36 85       	ldd	r19, Z+14	; 0x0e
    2c6a:	47 85       	ldd	r20, Z+15	; 0x0f
    2c6c:	50 89       	ldd	r21, Z+16	; 0x10
    2c6e:	26 23       	and	r18, r22
    2c70:	37 23       	and	r19, r23
    2c72:	48 23       	and	r20, r24
    2c74:	59 23       	and	r21, r25
    2c76:	21 15       	cp	r18, r1
    2c78:	31 05       	cpc	r19, r1
    2c7a:	41 05       	cpc	r20, r1
    2c7c:	51 05       	cpc	r21, r1
    2c7e:	21 f1       	breq	.+72     	; 0x2cc8 <nrk_event_wait+0x6a>
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    2c80:	61 8b       	std	Z+17, r22	; 0x11
    2c82:	72 8b       	std	Z+18, r23	; 0x12
    2c84:	83 8b       	std	Z+19, r24	; 0x13
    2c86:	94 8b       	std	Z+20, r25	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    2c88:	21 e0       	ldi	r18, 0x01	; 1
    2c8a:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    2c8c:	00 90 2e 09 	lds	r0, 0x092E
    2c90:	04 c0       	rjmp	.+8      	; 0x2c9a <nrk_event_wait+0x3c>
    2c92:	96 95       	lsr	r25
    2c94:	87 95       	ror	r24
    2c96:	77 95       	ror	r23
    2c98:	67 95       	ror	r22
    2c9a:	0a 94       	dec	r0
    2c9c:	d2 f7       	brpl	.-12     	; 0x2c92 <nrk_event_wait+0x34>
    2c9e:	61 70       	andi	r22, 0x01	; 1
    2ca0:	70 70       	andi	r23, 0x00	; 0
    2ca2:	61 15       	cp	r22, r1
    2ca4:	71 05       	cpc	r23, r1
    2ca6:	19 f0       	breq	.+6      	; 0x2cae <nrk_event_wait+0x50>
		nrk_wait_until_nw();
    2ca8:	0e 94 74 19 	call	0x32e8	; 0x32e8 <nrk_wait_until_nw>
    2cac:	04 c0       	rjmp	.+8      	; 0x2cb6 <nrk_event_wait+0x58>
	else
		nrk_wait_until_ticks(0);
    2cae:	80 e0       	ldi	r24, 0x00	; 0
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	0e 94 9b 19 	call	0x3336	; 0x3336 <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    2cb6:	e0 91 3e 09 	lds	r30, 0x093E
    2cba:	f0 91 3f 09 	lds	r31, 0x093F
    2cbe:	21 89       	ldd	r18, Z+17	; 0x11
    2cc0:	32 89       	ldd	r19, Z+18	; 0x12
    2cc2:	43 89       	ldd	r20, Z+19	; 0x13
    2cc4:	54 89       	ldd	r21, Z+20	; 0x14
    2cc6:	03 c0       	rjmp	.+6      	; 0x2cce <nrk_event_wait+0x70>
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
	  }
	else
	  {
	   return 0;
    2cc8:	20 e0       	ldi	r18, 0x00	; 0
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	a9 01       	movw	r20, r18
		nrk_wait_until_nw();
	else
		nrk_wait_until_ticks(0);
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
}
    2cce:	b9 01       	movw	r22, r18
    2cd0:	ca 01       	movw	r24, r20
    2cd2:	08 95       	ret

00002cd4 <nrk_sem_create>:
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    2cd4:	80 e0       	ldi	r24, 0x00	; 0
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	08 95       	ret

00002cda <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    2cda:	29 e0       	ldi	r18, 0x09	; 9
    2cdc:	8a 32       	cpi	r24, 0x2A	; 42
    2cde:	92 07       	cpc	r25, r18
    2ce0:	11 f4       	brne	.+4      	; 0x2ce6 <nrk_get_resource_index+0xc>
}

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
    2ce2:	80 e0       	ldi	r24, 0x00	; 0
    2ce4:	08 95       	ret
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
				return id;
	return NRK_ERROR;
    2ce6:	8f ef       	ldi	r24, 0xFF	; 255
}
    2ce8:	08 95       	ret

00002cea <nrk_sem_delete>:
return NRK_OK;
}

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    2cea:	0e 94 6d 16 	call	0x2cda	; 0x2cda <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2cee:	8f 3f       	cpi	r24, 0xFF	; 255
    2cf0:	11 f4       	brne	.+4      	; 0x2cf6 <nrk_sem_delete+0xc>
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
    2cf4:	03 c0       	rjmp	.+6      	; 0x2cfc <nrk_sem_delete+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2cf6:	81 30       	cpi	r24, 0x01	; 1
    2cf8:	29 f4       	brne	.+10     	; 0x2d04 <nrk_sem_delete+0x1a>
    2cfa:	82 e0       	ldi	r24, 0x02	; 2
    2cfc:	0e 94 21 11 	call	0x2242	; 0x2242 <_nrk_errno_set>
    2d00:	8f ef       	ldi	r24, 0xFF	; 255
    2d02:	08 95       	ret

	nrk_sem_list[id].count=-1;
    2d04:	99 27       	eor	r25, r25
    2d06:	87 fd       	sbrc	r24, 7
    2d08:	90 95       	com	r25
    2d0a:	fc 01       	movw	r30, r24
    2d0c:	ee 0f       	add	r30, r30
    2d0e:	ff 1f       	adc	r31, r31
    2d10:	e8 0f       	add	r30, r24
    2d12:	f9 1f       	adc	r31, r25
    2d14:	e6 5d       	subi	r30, 0xD6	; 214
    2d16:	f6 4f       	sbci	r31, 0xF6	; 246
    2d18:	8f ef       	ldi	r24, 0xFF	; 255
    2d1a:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    2d1c:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    2d1e:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    2d20:	80 91 3d 09 	lds	r24, 0x093D
    2d24:	81 50       	subi	r24, 0x01	; 1
    2d26:	80 93 3d 09 	sts	0x093D, r24
return NRK_OK;
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
}
    2d2c:	08 95       	ret

00002d2e <nrk_sem_post>:
}



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    2d2e:	0f 93       	push	r16
    2d30:	1f 93       	push	r17
    2d32:	df 93       	push	r29
    2d34:	cf 93       	push	r28
    2d36:	0f 92       	push	r0
    2d38:	cd b7       	in	r28, 0x3d	; 61
    2d3a:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    2d3c:	0e 94 6d 16 	call	0x2cda	; 0x2cda <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2d40:	8f 3f       	cpi	r24, 0xFF	; 255
    2d42:	11 f4       	brne	.+4      	; 0x2d48 <nrk_sem_post+0x1a>
    2d44:	81 e0       	ldi	r24, 0x01	; 1
    2d46:	03 c0       	rjmp	.+6      	; 0x2d4e <nrk_sem_post+0x20>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2d48:	81 30       	cpi	r24, 0x01	; 1
    2d4a:	29 f4       	brne	.+10     	; 0x2d56 <nrk_sem_post+0x28>
    2d4c:	82 e0       	ldi	r24, 0x02	; 2
    2d4e:	0e 94 21 11 	call	0x2242	; 0x2242 <_nrk_errno_set>
    2d52:	8f ef       	ldi	r24, 0xFF	; 255
    2d54:	45 c0       	rjmp	.+138    	; 0x2de0 <nrk_sem_post+0xb2>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    2d56:	28 2f       	mov	r18, r24
    2d58:	33 27       	eor	r19, r19
    2d5a:	27 fd       	sbrc	r18, 7
    2d5c:	30 95       	com	r19
    2d5e:	89 01       	movw	r16, r18
    2d60:	00 0f       	add	r16, r16
    2d62:	11 1f       	adc	r17, r17
    2d64:	02 0f       	add	r16, r18
    2d66:	13 1f       	adc	r17, r19
    2d68:	06 5d       	subi	r16, 0xD6	; 214
    2d6a:	16 4f       	sbci	r17, 0xF6	; 246
    2d6c:	d8 01       	movw	r26, r16
    2d6e:	12 96       	adiw	r26, 0x02	; 2
    2d70:	2c 91       	ld	r18, X
    2d72:	12 97       	sbiw	r26, 0x02	; 2
    2d74:	9c 91       	ld	r25, X
    2d76:	29 17       	cp	r18, r25
    2d78:	94 f5       	brge	.+100    	; 0x2dde <nrk_sem_post+0xb0>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    2d7a:	89 83       	std	Y+1, r24	; 0x01
    2d7c:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <nrk_int_disable>

		nrk_sem_list[id].value++;
    2d80:	f8 01       	movw	r30, r16
    2d82:	92 81       	ldd	r25, Z+2	; 0x02
    2d84:	9f 5f       	subi	r25, 0xFF	; 255
    2d86:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    2d88:	e0 91 3e 09 	lds	r30, 0x093E
    2d8c:	f0 91 3f 09 	lds	r31, 0x093F
    2d90:	14 82       	std	Z+4, r1	; 0x04
    2d92:	e8 e5       	ldi	r30, 0x58	; 88
    2d94:	f8 e0       	ldi	r31, 0x08	; 8

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    2d96:	89 81       	ldd	r24, Y+1	; 0x01
    2d98:	99 27       	eor	r25, r25
    2d9a:	87 fd       	sbrc	r24, 7
    2d9c:	90 95       	com	r25
    2d9e:	a9 2f       	mov	r26, r25
    2da0:	b9 2f       	mov	r27, r25
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2da2:	63 e0       	ldi	r22, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    2da4:	20 81       	ld	r18, Z
    2da6:	22 30       	cpi	r18, 0x02	; 2
    2da8:	99 f4       	brne	.+38     	; 0x2dd0 <nrk_sem_post+0xa2>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    2daa:	22 85       	ldd	r18, Z+10	; 0x0a
    2dac:	33 85       	ldd	r19, Z+11	; 0x0b
    2dae:	44 85       	ldd	r20, Z+12	; 0x0c
    2db0:	55 85       	ldd	r21, Z+13	; 0x0d
    2db2:	28 17       	cp	r18, r24
    2db4:	39 07       	cpc	r19, r25
    2db6:	4a 07       	cpc	r20, r26
    2db8:	5b 07       	cpc	r21, r27
    2dba:	51 f4       	brne	.+20     	; 0x2dd0 <nrk_sem_post+0xa2>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2dbc:	62 83       	std	Z+2, r22	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    2dbe:	16 86       	std	Z+14, r1	; 0x0e
    2dc0:	17 86       	std	Z+15, r1	; 0x0f
    2dc2:	10 8a       	std	Z+16, r1	; 0x10
    2dc4:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    2dc6:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    2dc8:	12 86       	std	Z+10, r1	; 0x0a
    2dca:	13 86       	std	Z+11, r1	; 0x0b
    2dcc:	14 86       	std	Z+12, r1	; 0x0c
    2dce:	15 86       	std	Z+13, r1	; 0x0d
    2dd0:	bb 96       	adiw	r30, 0x2b	; 43
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    2dd2:	29 e0       	ldi	r18, 0x09	; 9
    2dd4:	ef 32       	cpi	r30, 0x2F	; 47
    2dd6:	f2 07       	cpc	r31, r18
    2dd8:	29 f7       	brne	.-54     	; 0x2da4 <nrk_sem_post+0x76>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    2dda:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <nrk_int_enable>
	}
		
return NRK_OK;
    2dde:	81 e0       	ldi	r24, 0x01	; 1
}
    2de0:	0f 90       	pop	r0
    2de2:	cf 91       	pop	r28
    2de4:	df 91       	pop	r29
    2de6:	1f 91       	pop	r17
    2de8:	0f 91       	pop	r16
    2dea:	08 95       	ret

00002dec <nrk_sem_pend>:
}



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    2dec:	0f 93       	push	r16
    2dee:	1f 93       	push	r17
    2df0:	df 93       	push	r29
    2df2:	cf 93       	push	r28
    2df4:	0f 92       	push	r0
    2df6:	cd b7       	in	r28, 0x3d	; 61
    2df8:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    2dfa:	0e 94 6d 16 	call	0x2cda	; 0x2cda <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2dfe:	8f 3f       	cpi	r24, 0xFF	; 255
    2e00:	11 f4       	brne	.+4      	; 0x2e06 <nrk_sem_pend+0x1a>
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	03 c0       	rjmp	.+6      	; 0x2e0c <nrk_sem_pend+0x20>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2e06:	81 30       	cpi	r24, 0x01	; 1
    2e08:	29 f4       	brne	.+10     	; 0x2e14 <nrk_sem_pend+0x28>
    2e0a:	82 e0       	ldi	r24, 0x02	; 2
    2e0c:	0e 94 21 11 	call	0x2242	; 0x2242 <_nrk_errno_set>
    2e10:	8f ef       	ldi	r24, 0xFF	; 255
    2e12:	40 c0       	rjmp	.+128    	; 0x2e94 <nrk_sem_pend+0xa8>
	
	nrk_int_disable();
    2e14:	89 83       	std	Y+1, r24	; 0x01
    2e16:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    2e1a:	89 81       	ldd	r24, Y+1	; 0x01
    2e1c:	08 2f       	mov	r16, r24
    2e1e:	11 27       	eor	r17, r17
    2e20:	07 fd       	sbrc	r16, 7
    2e22:	10 95       	com	r17
    2e24:	f8 01       	movw	r30, r16
    2e26:	ee 0f       	add	r30, r30
    2e28:	ff 1f       	adc	r31, r31
    2e2a:	e0 0f       	add	r30, r16
    2e2c:	f1 1f       	adc	r31, r17
    2e2e:	e6 5d       	subi	r30, 0xD6	; 214
    2e30:	f6 4f       	sbci	r31, 0xF6	; 246
    2e32:	92 81       	ldd	r25, Z+2	; 0x02
    2e34:	99 23       	and	r25, r25
    2e36:	b1 f4       	brne	.+44     	; 0x2e64 <nrk_sem_pend+0x78>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    2e38:	e0 91 3e 09 	lds	r30, 0x093E
    2e3c:	f0 91 3f 09 	lds	r31, 0x093F
    2e40:	97 81       	ldd	r25, Z+7	; 0x07
    2e42:	92 60       	ori	r25, 0x02	; 2
    2e44:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    2e46:	99 27       	eor	r25, r25
    2e48:	87 fd       	sbrc	r24, 7
    2e4a:	90 95       	com	r25
    2e4c:	a9 2f       	mov	r26, r25
    2e4e:	b9 2f       	mov	r27, r25
    2e50:	81 8b       	std	Z+17, r24	; 0x11
    2e52:	92 8b       	std	Z+18, r25	; 0x12
    2e54:	a3 8b       	std	Z+19, r26	; 0x13
    2e56:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    2e58:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <nrk_int_enable>
		nrk_wait_until_ticks(0);
    2e5c:	80 e0       	ldi	r24, 0x00	; 0
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	0e 94 9b 19 	call	0x3336	; 0x3336 <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    2e64:	f8 01       	movw	r30, r16
    2e66:	ee 0f       	add	r30, r30
    2e68:	ff 1f       	adc	r31, r31
    2e6a:	e0 0f       	add	r30, r16
    2e6c:	f1 1f       	adc	r31, r17
    2e6e:	e6 5d       	subi	r30, 0xD6	; 214
    2e70:	f6 4f       	sbci	r31, 0xF6	; 246
    2e72:	82 81       	ldd	r24, Z+2	; 0x02
    2e74:	81 50       	subi	r24, 0x01	; 1
    2e76:	82 83       	std	Z+2, r24	; 0x02
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    2e78:	a0 91 3e 09 	lds	r26, 0x093E
    2e7c:	b0 91 3f 09 	lds	r27, 0x093F
    2e80:	81 81       	ldd	r24, Z+1	; 0x01
    2e82:	1b 96       	adiw	r26, 0x0b	; 11
    2e84:	8c 93       	st	X, r24
    2e86:	1b 97       	sbiw	r26, 0x0b	; 11
	nrk_cur_task_TCB->elevated_prio_flag=1;
    2e88:	81 e0       	ldi	r24, 0x01	; 1
    2e8a:	14 96       	adiw	r26, 0x04	; 4
    2e8c:	8c 93       	st	X, r24
	nrk_int_enable();
    2e8e:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <nrk_int_enable>

	return NRK_OK;
    2e92:	81 e0       	ldi	r24, 0x01	; 1
}
    2e94:	0f 90       	pop	r0
    2e96:	cf 91       	pop	r28
    2e98:	df 91       	pop	r29
    2e9a:	1f 91       	pop	r17
    2e9c:	0f 91       	pop	r16
    2e9e:	08 95       	ret

00002ea0 <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    2ea0:	0e 94 6d 16 	call	0x2cda	; 0x2cda <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2ea4:	8f 3f       	cpi	r24, 0xFF	; 255
    2ea6:	11 f4       	brne	.+4      	; 0x2eac <nrk_sem_query+0xc>
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	03 c0       	rjmp	.+6      	; 0x2eb2 <nrk_sem_query+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2eac:	81 30       	cpi	r24, 0x01	; 1
    2eae:	29 f4       	brne	.+10     	; 0x2eba <nrk_sem_query+0x1a>
    2eb0:	82 e0       	ldi	r24, 0x02	; 2
    2eb2:	0e 94 21 11 	call	0x2242	; 0x2242 <_nrk_errno_set>
    2eb6:	8f ef       	ldi	r24, 0xFF	; 255
    2eb8:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    2eba:	99 27       	eor	r25, r25
    2ebc:	87 fd       	sbrc	r24, 7
    2ebe:	90 95       	com	r25
    2ec0:	fc 01       	movw	r30, r24
    2ec2:	ee 0f       	add	r30, r30
    2ec4:	ff 1f       	adc	r31, r31
    2ec6:	e8 0f       	add	r30, r24
    2ec8:	f9 1f       	adc	r31, r25
    2eca:	e6 5d       	subi	r30, 0xD6	; 214
    2ecc:	f6 4f       	sbci	r31, 0xF6	; 246
    2ece:	82 81       	ldd	r24, Z+2	; 0x02
}
    2ed0:	08 95       	ret

00002ed2 <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    2ed2:	e0 91 33 09 	lds	r30, 0x0933
    2ed6:	f0 91 34 09 	lds	r31, 0x0934
}
    2eda:	80 81       	ld	r24, Z
    2edc:	08 95       	ret

00002ede <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    2ede:	e0 91 33 09 	lds	r30, 0x0933
    2ee2:	f0 91 34 09 	lds	r31, 0x0934
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    2ee6:	03 c0       	rjmp	.+6      	; 0x2eee <nrk_print_readyQ+0x10>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    2ee8:	03 80       	ldd	r0, Z+3	; 0x03
    2eea:	f4 81       	ldd	r31, Z+4	; 0x04
    2eec:	e0 2d       	mov	r30, r0
void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    2eee:	30 97       	sbiw	r30, 0x00	; 0
    2ef0:	d9 f7       	brne	.-10     	; 0x2ee8 <nrk_print_readyQ+0xa>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    2ef2:	08 95       	ret

00002ef4 <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    2ef4:	bf 92       	push	r11
    2ef6:	cf 92       	push	r12
    2ef8:	df 92       	push	r13
    2efa:	ef 92       	push	r14
    2efc:	ff 92       	push	r15
    2efe:	0f 93       	push	r16
    2f00:	1f 93       	push	r17
    2f02:	cf 93       	push	r28
    2f04:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    2f06:	e0 91 4f 08 	lds	r30, 0x084F
    2f0a:	f0 91 50 08 	lds	r31, 0x0850
    2f0e:	30 97       	sbiw	r30, 0x00	; 0
    2f10:	09 f4       	brne	.+2      	; 0x2f14 <nrk_add_to_readyQ+0x20>
    2f12:	9b c0       	rjmp	.+310    	; 0x304a <nrk_add_to_readyQ+0x156>
    {
        return;
    }


    NextNode = _head_node;
    2f14:	40 91 33 09 	lds	r20, 0x0933
    2f18:	50 91 34 09 	lds	r21, 0x0934
    CurNode = _free_node;

    if (_head_node != NULL)
    2f1c:	41 15       	cp	r20, r1
    2f1e:	51 05       	cpc	r21, r1
    2f20:	09 f4       	brne	.+2      	; 0x2f24 <nrk_add_to_readyQ+0x30>
    2f22:	57 c0       	rjmp	.+174    	; 0x2fd2 <nrk_add_to_readyQ+0xde>
    2f24:	da 01       	movw	r26, r20
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    2f26:	2b e2       	ldi	r18, 0x2B	; 43
    2f28:	30 e0       	ldi	r19, 0x00	; 0
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    2f2a:	c8 2f       	mov	r28, r24
    2f2c:	dd 27       	eor	r29, r29
    2f2e:	c7 fd       	sbrc	r28, 7
    2f30:	d0 95       	com	r29
    2f32:	c2 9f       	mul	r28, r18
    2f34:	b0 01       	movw	r22, r0
    2f36:	c3 9f       	mul	r28, r19
    2f38:	70 0d       	add	r23, r0
    2f3a:	d2 9f       	mul	r29, r18
    2f3c:	70 0d       	add	r23, r0
    2f3e:	11 24       	eor	r1, r1
    2f40:	6f 5a       	subi	r22, 0xAF	; 175
    2f42:	77 4f       	sbci	r23, 0xF7	; 247
    2f44:	8b 01       	movw	r16, r22
    2f46:	06 5f       	subi	r16, 0xF6	; 246
    2f48:	1f 4f       	sbci	r17, 0xFF	; 255
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    2f4a:	94 e0       	ldi	r25, 0x04	; 4
    2f4c:	e9 2e       	mov	r14, r25
    2f4e:	f1 2c       	mov	r15, r1
    2f50:	e6 0e       	add	r14, r22
    2f52:	f7 1e       	adc	r15, r23
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    2f54:	9b e0       	ldi	r25, 0x0B	; 11
    2f56:	c9 2e       	mov	r12, r25
    2f58:	d1 2c       	mov	r13, r1
    2f5a:	c6 0e       	add	r12, r22
    2f5c:	d7 1e       	adc	r13, r23
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    2f5e:	6c 91       	ld	r22, X
    2f60:	70 e0       	ldi	r23, 0x00	; 0
    2f62:	62 9f       	mul	r22, r18
    2f64:	e0 01       	movw	r28, r0
    2f66:	63 9f       	mul	r22, r19
    2f68:	d0 0d       	add	r29, r0
    2f6a:	72 9f       	mul	r23, r18
    2f6c:	d0 0d       	add	r29, r0
    2f6e:	11 24       	eor	r1, r1
    2f70:	cf 5a       	subi	r28, 0xAF	; 175
    2f72:	d7 4f       	sbci	r29, 0xF7	; 247
    2f74:	9c 81       	ldd	r25, Y+4	; 0x04
    2f76:	99 23       	and	r25, r25
    2f78:	29 f0       	breq	.+10     	; 0x2f84 <nrk_add_to_readyQ+0x90>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    2f7a:	bb 84       	ldd	r11, Y+11	; 0x0b
    2f7c:	e8 01       	movw	r28, r16
    2f7e:	98 81       	ld	r25, Y
    2f80:	b9 16       	cp	r11, r25
    2f82:	48 f1       	brcs	.+82     	; 0x2fd6 <nrk_add_to_readyQ+0xe2>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    2f84:	e7 01       	movw	r28, r14
    2f86:	98 81       	ld	r25, Y
    2f88:	99 23       	and	r25, r25
    2f8a:	71 f0       	breq	.+28     	; 0x2fa8 <nrk_add_to_readyQ+0xb4>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    2f8c:	62 9f       	mul	r22, r18
    2f8e:	e0 01       	movw	r28, r0
    2f90:	63 9f       	mul	r22, r19
    2f92:	d0 0d       	add	r29, r0
    2f94:	72 9f       	mul	r23, r18
    2f96:	d0 0d       	add	r29, r0
    2f98:	11 24       	eor	r1, r1
    2f9a:	cf 5a       	subi	r28, 0xAF	; 175
    2f9c:	d7 4f       	sbci	r29, 0xF7	; 247
    2f9e:	ba 84       	ldd	r11, Y+10	; 0x0a
    2fa0:	e6 01       	movw	r28, r12
    2fa2:	98 81       	ld	r25, Y
    2fa4:	b9 16       	cp	r11, r25
    2fa6:	b8 f0       	brcs	.+46     	; 0x2fd6 <nrk_add_to_readyQ+0xe2>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    2fa8:	62 9f       	mul	r22, r18
    2faa:	e0 01       	movw	r28, r0
    2fac:	63 9f       	mul	r22, r19
    2fae:	d0 0d       	add	r29, r0
    2fb0:	72 9f       	mul	r23, r18
    2fb2:	d0 0d       	add	r29, r0
    2fb4:	11 24       	eor	r1, r1
    2fb6:	cf 5a       	subi	r28, 0xAF	; 175
    2fb8:	d7 4f       	sbci	r29, 0xF7	; 247
    2fba:	6a 85       	ldd	r22, Y+10	; 0x0a
    2fbc:	e8 01       	movw	r28, r16
    2fbe:	98 81       	ld	r25, Y
    2fc0:	69 17       	cp	r22, r25
    2fc2:	48 f0       	brcs	.+18     	; 0x2fd6 <nrk_add_to_readyQ+0xe2>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    2fc4:	13 96       	adiw	r26, 0x03	; 3
    2fc6:	0d 90       	ld	r0, X+
    2fc8:	bc 91       	ld	r27, X
    2fca:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    2fcc:	10 97       	sbiw	r26, 0x00	; 0
    2fce:	39 f6       	brne	.-114    	; 0x2f5e <nrk_add_to_readyQ+0x6a>
    2fd0:	02 c0       	rjmp	.+4      	; 0x2fd6 <nrk_add_to_readyQ+0xe2>


    NextNode = _head_node;
    CurNode = _free_node;

    if (_head_node != NULL)
    2fd2:	a0 e0       	ldi	r26, 0x00	; 0
    2fd4:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    2fd6:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    2fd8:	c3 81       	ldd	r28, Z+3	; 0x03
    2fda:	d4 81       	ldd	r29, Z+4	; 0x04
    2fdc:	d0 93 50 08 	sts	0x0850, r29
    2fe0:	c0 93 4f 08 	sts	0x084F, r28

    if (NextNode == _head_node)
    2fe4:	a4 17       	cp	r26, r20
    2fe6:	b5 07       	cpc	r27, r21
    2fe8:	b1 f4       	brne	.+44     	; 0x3016 <nrk_add_to_readyQ+0x122>
    {
        //at start
        if (_head_node != NULL)
    2fea:	10 97       	sbiw	r26, 0x00	; 0
    2fec:	49 f0       	breq	.+18     	; 0x3000 <nrk_add_to_readyQ+0x10c>
        {
            CurNode->Next = _head_node;
    2fee:	b4 83       	std	Z+4, r27	; 0x04
    2ff0:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    2ff2:	12 82       	std	Z+2, r1	; 0x02
    2ff4:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    2ff6:	12 96       	adiw	r26, 0x02	; 2
    2ff8:	fc 93       	st	X, r31
    2ffa:	ee 93       	st	-X, r30
    2ffc:	11 97       	sbiw	r26, 0x01	; 1
    2ffe:	06 c0       	rjmp	.+12     	; 0x300c <nrk_add_to_readyQ+0x118>
        }
        else
        {
            CurNode->Next = NULL;
    3000:	14 82       	std	Z+4, r1	; 0x04
    3002:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    3004:	12 82       	std	Z+2, r1	; 0x02
    3006:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    3008:	fa 83       	std	Y+2, r31	; 0x02
    300a:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    300c:	f0 93 34 09 	sts	0x0934, r31
    3010:	e0 93 33 09 	sts	0x0933, r30
    3014:	1a c0       	rjmp	.+52     	; 0x304a <nrk_add_to_readyQ+0x156>
    3016:	11 96       	adiw	r26, 0x01	; 1
    3018:	8d 91       	ld	r24, X+
    301a:	9c 91       	ld	r25, X
    301c:	12 97       	sbiw	r26, 0x02	; 2

    }
    else
    {
        if (NextNode != _free_node)
    301e:	ac 17       	cp	r26, r28
    3020:	bd 07       	cpc	r27, r29
    3022:	59 f0       	breq	.+22     	; 0x303a <nrk_add_to_readyQ+0x146>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    3024:	92 83       	std	Z+2, r25	; 0x02
    3026:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    3028:	b4 83       	std	Z+4, r27	; 0x04
    302a:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    302c:	11 96       	adiw	r26, 0x01	; 1
    302e:	cd 91       	ld	r28, X+
    3030:	dc 91       	ld	r29, X
    3032:	12 97       	sbiw	r26, 0x02	; 2
    3034:	fc 83       	std	Y+4, r31	; 0x04
    3036:	eb 83       	std	Y+3, r30	; 0x03
    3038:	04 c0       	rjmp	.+8      	; 0x3042 <nrk_add_to_readyQ+0x14e>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    303a:	14 82       	std	Z+4, r1	; 0x04
    303c:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    303e:	92 83       	std	Z+2, r25	; 0x02
    3040:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    3042:	12 96       	adiw	r26, 0x02	; 2
    3044:	fc 93       	st	X, r31
    3046:	ee 93       	st	-X, r30
    3048:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    304a:	df 91       	pop	r29
    304c:	cf 91       	pop	r28
    304e:	1f 91       	pop	r17
    3050:	0f 91       	pop	r16
    3052:	ff 90       	pop	r15
    3054:	ef 90       	pop	r14
    3056:	df 90       	pop	r13
    3058:	cf 90       	pop	r12
    305a:	bf 90       	pop	r11
    305c:	08 95       	ret

0000305e <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    305e:	cf 93       	push	r28
    3060:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    3062:	e0 91 33 09 	lds	r30, 0x0933
    3066:	f0 91 34 09 	lds	r31, 0x0934
    306a:	30 97       	sbiw	r30, 0x00	; 0
    306c:	09 f4       	brne	.+2      	; 0x3070 <nrk_rem_from_readyQ+0x12>
    306e:	44 c0       	rjmp	.+136    	; 0x30f8 <nrk_rem_from_readyQ+0x9a>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    3070:	99 27       	eor	r25, r25
    3072:	87 fd       	sbrc	r24, 7
    3074:	90 95       	com	r25
    3076:	20 81       	ld	r18, Z
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	28 17       	cp	r18, r24
    307c:	39 07       	cpc	r19, r25
    307e:	81 f4       	brne	.+32     	; 0x30a0 <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    3080:	a3 81       	ldd	r26, Z+3	; 0x03
    3082:	b4 81       	ldd	r27, Z+4	; 0x04
    3084:	b0 93 34 09 	sts	0x0934, r27
    3088:	a0 93 33 09 	sts	0x0933, r26
        _head_node->Prev = NULL;
    308c:	12 96       	adiw	r26, 0x02	; 2
    308e:	1c 92       	st	X, r1
    3090:	1e 92       	st	-X, r1
    3092:	11 97       	sbiw	r26, 0x01	; 1
    3094:	18 c0       	rjmp	.+48     	; 0x30c6 <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    3096:	03 80       	ldd	r0, Z+3	; 0x03
    3098:	f4 81       	ldd	r31, Z+4	; 0x04
    309a:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    309c:	30 97       	sbiw	r30, 0x00	; 0
    309e:	61 f1       	breq	.+88     	; 0x30f8 <nrk_rem_from_readyQ+0x9a>
    30a0:	20 81       	ld	r18, Z
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	28 17       	cp	r18, r24
    30a6:	39 07       	cpc	r19, r25
    30a8:	b1 f7       	brne	.-20     	; 0x3096 <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    30aa:	c1 81       	ldd	r28, Z+1	; 0x01
    30ac:	d2 81       	ldd	r29, Z+2	; 0x02
    30ae:	83 81       	ldd	r24, Z+3	; 0x03
    30b0:	94 81       	ldd	r25, Z+4	; 0x04
    30b2:	9c 83       	std	Y+4, r25	; 0x04
    30b4:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    30b6:	a3 81       	ldd	r26, Z+3	; 0x03
    30b8:	b4 81       	ldd	r27, Z+4	; 0x04
    30ba:	10 97       	sbiw	r26, 0x00	; 0
    30bc:	21 f0       	breq	.+8      	; 0x30c6 <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    30be:	12 96       	adiw	r26, 0x02	; 2
    30c0:	dc 93       	st	X, r29
    30c2:	ce 93       	st	-X, r28
    30c4:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    30c6:	a0 91 4f 08 	lds	r26, 0x084F
    30ca:	b0 91 50 08 	lds	r27, 0x0850
    30ce:	10 97       	sbiw	r26, 0x00	; 0
    30d0:	39 f4       	brne	.+14     	; 0x30e0 <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    30d2:	f0 93 50 08 	sts	0x0850, r31
    30d6:	e0 93 4f 08 	sts	0x084F, r30
        _free_node->Next = NULL;
    30da:	14 82       	std	Z+4, r1	; 0x04
    30dc:	13 82       	std	Z+3, r1	; 0x03
    30de:	0a c0       	rjmp	.+20     	; 0x30f4 <nrk_rem_from_readyQ+0x96>
    }
    else
    {
        CurNode->Next = _free_node;
    30e0:	b4 83       	std	Z+4, r27	; 0x04
    30e2:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    30e4:	12 96       	adiw	r26, 0x02	; 2
    30e6:	fc 93       	st	X, r31
    30e8:	ee 93       	st	-X, r30
    30ea:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    30ec:	f0 93 50 08 	sts	0x0850, r31
    30f0:	e0 93 4f 08 	sts	0x084F, r30
    }
    _free_node->Prev = NULL;
    30f4:	12 82       	std	Z+2, r1	; 0x02
    30f6:	11 82       	std	Z+1, r1	; 0x01
}
    30f8:	df 91       	pop	r29
    30fa:	cf 91       	pop	r28
    30fc:	08 95       	ret

000030fe <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    30fe:	ef 92       	push	r14
    3100:	ff 92       	push	r15
    3102:	0f 93       	push	r16
    3104:	1f 93       	push	r17
    3106:	cf 93       	push	r28
    3108:	df 93       	push	r29
    310a:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    310c:	69 81       	ldd	r22, Y+1	; 0x01
    310e:	7a 81       	ldd	r23, Y+2	; 0x02
    3110:	4b 81       	ldd	r20, Y+3	; 0x03
    3112:	5c 81       	ldd	r21, Y+4	; 0x04
    3114:	8d 81       	ldd	r24, Y+5	; 0x05
    3116:	9e 81       	ldd	r25, Y+6	; 0x06
    3118:	0e 94 ce 24 	call	0x499c	; 0x499c <nrk_task_stk_init>
    311c:	bc 01       	movw	r22, r24
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    311e:	8f 81       	ldd	r24, Y+7	; 0x07
    3120:	88 23       	and	r24, r24
    3122:	69 f0       	breq	.+26     	; 0x313e <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    3124:	4b 81       	ldd	r20, Y+3	; 0x03
    3126:	5c 81       	ldd	r21, Y+4	; 0x04
    3128:	ce 01       	movw	r24, r28
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	00 e0       	ldi	r16, 0x00	; 0
    3130:	10 e0       	ldi	r17, 0x00	; 0
    3132:	ee 24       	eor	r14, r14
    3134:	ff 24       	eor	r15, r15
    3136:	0e 94 33 10 	call	0x2066	; 0x2066 <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    313a:	1f 82       	std	Y+7, r1	; 0x07
    313c:	14 c0       	rjmp	.+40     	; 0x3166 <nrk_activate_task+0x68>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    313e:	28 81       	ld	r18, Y
    3140:	33 27       	eor	r19, r19
    3142:	27 fd       	sbrc	r18, 7
    3144:	30 95       	com	r19
    3146:	8b e2       	ldi	r24, 0x2B	; 43
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	28 9f       	mul	r18, r24
    314c:	f0 01       	movw	r30, r0
    314e:	29 9f       	mul	r18, r25
    3150:	f0 0d       	add	r31, r0
    3152:	38 9f       	mul	r19, r24
    3154:	f0 0d       	add	r31, r0
    3156:	11 24       	eor	r1, r1
    3158:	ef 5a       	subi	r30, 0xAF	; 175
    315a:	f7 4f       	sbci	r31, 0xF7	; 247
    315c:	81 85       	ldd	r24, Z+9	; 0x09
    315e:	83 30       	cpi	r24, 0x03	; 3
    3160:	f9 f4       	brne	.+62     	; 0x31a0 <nrk_activate_task+0xa2>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    3162:	71 83       	std	Z+1, r23	; 0x01
    3164:	60 83       	st	Z, r22
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    3166:	28 81       	ld	r18, Y
    3168:	33 27       	eor	r19, r19
    316a:	27 fd       	sbrc	r18, 7
    316c:	30 95       	com	r19
    316e:	8b e2       	ldi	r24, 0x2B	; 43
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	28 9f       	mul	r18, r24
    3174:	f0 01       	movw	r30, r0
    3176:	29 9f       	mul	r18, r25
    3178:	f0 0d       	add	r31, r0
    317a:	38 9f       	mul	r19, r24
    317c:	f0 0d       	add	r31, r0
    317e:	11 24       	eor	r1, r1
    3180:	ef 5a       	subi	r30, 0xAF	; 175
    3182:	f7 4f       	sbci	r31, 0xF7	; 247
    3184:	85 89       	ldd	r24, Z+21	; 0x15
    3186:	96 89       	ldd	r25, Z+22	; 0x16
    3188:	a7 89       	ldd	r26, Z+23	; 0x17
    318a:	b0 8d       	ldd	r27, Z+24	; 0x18
    318c:	00 97       	sbiw	r24, 0x00	; 0
    318e:	a1 05       	cpc	r26, r1
    3190:	b1 05       	cpc	r27, r1
    3192:	41 f4       	brne	.+16     	; 0x31a4 <nrk_activate_task+0xa6>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    3194:	82 e0       	ldi	r24, 0x02	; 2
    3196:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    3198:	88 81       	ld	r24, Y
    319a:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <nrk_add_to_readyQ>
    319e:	02 c0       	rjmp	.+4      	; 0x31a4 <nrk_activate_task+0xa6>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    31a0:	8f ef       	ldi	r24, 0xFF	; 255
    31a2:	01 c0       	rjmp	.+2      	; 0x31a6 <nrk_activate_task+0xa8>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    31a4:	81 e0       	ldi	r24, 0x01	; 1
}
    31a6:	df 91       	pop	r29
    31a8:	cf 91       	pop	r28
    31aa:	1f 91       	pop	r17
    31ac:	0f 91       	pop	r16
    31ae:	ff 90       	pop	r15
    31b0:	ef 90       	pop	r14
    31b2:	08 95       	ret

000031b4 <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    31b4:	1f 93       	push	r17
    31b6:	df 93       	push	r29
    31b8:	cf 93       	push	r28
    31ba:	cd b7       	in	r28, 0x3d	; 61
    31bc:	de b7       	in	r29, 0x3e	; 62
    31be:	28 97       	sbiw	r28, 0x08	; 8
    31c0:	0f b6       	in	r0, 0x3f	; 63
    31c2:	f8 94       	cli
    31c4:	de bf       	out	0x3e, r29	; 62
    31c6:	0f be       	out	0x3f, r0	; 63
    31c8:	cd bf       	out	0x3d, r28	; 61
    31ca:	29 83       	std	Y+1, r18	; 0x01
    31cc:	3a 83       	std	Y+2, r19	; 0x02
    31ce:	4b 83       	std	Y+3, r20	; 0x03
    31d0:	5c 83       	std	Y+4, r21	; 0x04
    31d2:	6d 83       	std	Y+5, r22	; 0x05
    31d4:	7e 83       	std	Y+6, r23	; 0x06
    31d6:	8f 83       	std	Y+7, r24	; 0x07
    31d8:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    31da:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    31de:	0e 94 e6 21 	call	0x43cc	; 0x43cc <_nrk_os_timer_get>
    31e2:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks_long(&t);
    31e4:	ce 01       	movw	r24, r28
    31e6:	01 96       	adiw	r24, 0x01	; 1
    31e8:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <_nrk_time_to_ticks_long>
    if (nw <= TIME_PAD)
    31ec:	63 30       	cpi	r22, 0x03	; 3
    31ee:	71 05       	cpc	r23, r1
    31f0:	80 f0       	brcs	.+32     	; 0x3212 <nrk_set_next_wakeup+0x5e>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    31f2:	e0 91 3e 09 	lds	r30, 0x093E
    31f6:	f0 91 3f 09 	lds	r31, 0x093F
    31fa:	61 0f       	add	r22, r17
    31fc:	71 1d       	adc	r23, r1
    31fe:	80 e0       	ldi	r24, 0x00	; 0
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	65 8b       	std	Z+21, r22	; 0x15
    3204:	76 8b       	std	Z+22, r23	; 0x16
    3206:	87 8b       	std	Z+23, r24	; 0x17
    3208:	90 8f       	std	Z+24, r25	; 0x18
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    320a:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <nrk_int_enable>

    return NRK_OK;
    320e:	81 e0       	ldi	r24, 0x01	; 1
    3210:	01 c0       	rjmp	.+2      	; 0x3214 <nrk_set_next_wakeup+0x60>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks_long(&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    3212:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    3214:	28 96       	adiw	r28, 0x08	; 8
    3216:	0f b6       	in	r0, 0x3f	; 63
    3218:	f8 94       	cli
    321a:	de bf       	out	0x3e, r29	; 62
    321c:	0f be       	out	0x3f, r0	; 63
    321e:	cd bf       	out	0x3d, r28	; 61
    3220:	cf 91       	pop	r28
    3222:	df 91       	pop	r29
    3224:	1f 91       	pop	r17
    3226:	08 95       	ret

00003228 <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    3228:	0e 94 a0 24 	call	0x4940	; 0x4940 <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    322c:	e0 91 3e 09 	lds	r30, 0x093E
    3230:	f0 91 3f 09 	lds	r31, 0x093F
    3234:	85 81       	ldd	r24, Z+5	; 0x05
    3236:	88 23       	and	r24, r24
    3238:	b9 f7       	brne	.-18     	; 0x3228 <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    323a:	08 95       	ret

0000323c <nrk_wait>:
    return NRK_OK;
}


int8_t nrk_wait (nrk_time_t t)
{
    323c:	1f 93       	push	r17
    323e:	df 93       	push	r29
    3240:	cf 93       	push	r28
    3242:	cd b7       	in	r28, 0x3d	; 61
    3244:	de b7       	in	r29, 0x3e	; 62
    3246:	28 97       	sbiw	r28, 0x08	; 8
    3248:	0f b6       	in	r0, 0x3f	; 63
    324a:	f8 94       	cli
    324c:	de bf       	out	0x3e, r29	; 62
    324e:	0f be       	out	0x3f, r0	; 63
    3250:	cd bf       	out	0x3d, r28	; 61
    3252:	29 83       	std	Y+1, r18	; 0x01
    3254:	3a 83       	std	Y+2, r19	; 0x02
    3256:	4b 83       	std	Y+3, r20	; 0x03
    3258:	5c 83       	std	Y+4, r21	; 0x04
    325a:	6d 83       	std	Y+5, r22	; 0x05
    325c:	7e 83       	std	Y+6, r23	; 0x06
    325e:	8f 83       	std	Y+7, r24	; 0x07
    3260:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint32_t nw;

    nrk_stack_check ();
    3262:	0e 94 34 14 	call	0x2868	; 0x2868 <nrk_stack_check>

    nrk_int_disable ();
    3266:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    326a:	e0 91 3e 09 	lds	r30, 0x093E
    326e:	f0 91 3f 09 	lds	r31, 0x093F
    3272:	81 e0       	ldi	r24, 0x01	; 1
    3274:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    3276:	81 e0       	ldi	r24, 0x01	; 1
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	92 a7       	std	Z+42, r25	; 0x2a
    327c:	81 a7       	std	Z+41, r24	; 0x29
    timer = _nrk_os_timer_get ();
    327e:	0e 94 e6 21 	call	0x43cc	; 0x43cc <_nrk_os_timer_get>
    3282:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks_long (&t);
    3284:	ce 01       	movw	r24, r28
    3286:	01 96       	adiw	r24, 0x01	; 1
    3288:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <_nrk_time_to_ticks_long>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    328c:	e0 91 3e 09 	lds	r30, 0x093E
    3290:	f0 91 3f 09 	lds	r31, 0x093F
    3294:	61 0f       	add	r22, r17
    3296:	71 1d       	adc	r23, r1
    3298:	81 1d       	adc	r24, r1
    329a:	91 1d       	adc	r25, r1
    329c:	65 8b       	std	Z+21, r22	; 0x15
    329e:	76 8b       	std	Z+22, r23	; 0x16
    32a0:	87 8b       	std	Z+23, r24	; 0x17
    32a2:	90 8f       	std	Z+24, r25	; 0x18
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    32a4:	18 3f       	cpi	r17, 0xF8	; 248
    32a6:	88 f4       	brcc	.+34     	; 0x32ca <nrk_wait+0x8e>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    32a8:	0e 94 7d 21 	call	0x42fa	; 0x42fa <_nrk_get_next_wakeup>
    32ac:	21 2f       	mov	r18, r17
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	2f 5f       	subi	r18, 0xFF	; 255
    32b2:	3f 4f       	sbci	r19, 0xFF	; 255
    32b4:	48 2f       	mov	r20, r24
    32b6:	50 e0       	ldi	r21, 0x00	; 0
    32b8:	24 17       	cp	r18, r20
    32ba:	35 07       	cpc	r19, r21
    32bc:	34 f4       	brge	.+12     	; 0x32ca <nrk_wait+0x8e>
        {
            timer += TIME_PAD;
    32be:	81 2f       	mov	r24, r17
    32c0:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    32c2:	80 93 d7 06 	sts	0x06D7, r24
            _nrk_set_next_wakeup (timer);
    32c6:	0e 94 81 21 	call	0x4302	; 0x4302 <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    32ca:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    32ce:	0e 94 14 19 	call	0x3228	; 0x3228 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    32d2:	81 e0       	ldi	r24, 0x01	; 1
    32d4:	28 96       	adiw	r28, 0x08	; 8
    32d6:	0f b6       	in	r0, 0x3f	; 63
    32d8:	f8 94       	cli
    32da:	de bf       	out	0x3e, r29	; 62
    32dc:	0f be       	out	0x3f, r0	; 63
    32de:	cd bf       	out	0x3d, r28	; 61
    32e0:	cf 91       	pop	r28
    32e2:	df 91       	pop	r29
    32e4:	1f 91       	pop	r17
    32e6:	08 95       	ret

000032e8 <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    32e8:	1f 93       	push	r17
    uint8_t timer;
    nrk_int_disable ();
    32ea:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    32ee:	e0 91 3e 09 	lds	r30, 0x093E
    32f2:	f0 91 3f 09 	lds	r31, 0x093F
    32f6:	81 e0       	ldi	r24, 0x01	; 1
    32f8:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    32fa:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    32fc:	0e 94 e6 21 	call	0x43cc	; 0x43cc <_nrk_os_timer_get>
    3300:	18 2f       	mov	r17, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    3302:	88 3f       	cpi	r24, 0xF8	; 248
    3304:	88 f4       	brcc	.+34     	; 0x3328 <nrk_wait_until_nw+0x40>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3306:	0e 94 7d 21 	call	0x42fa	; 0x42fa <_nrk_get_next_wakeup>
    330a:	21 2f       	mov	r18, r17
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	2f 5f       	subi	r18, 0xFF	; 255
    3310:	3f 4f       	sbci	r19, 0xFF	; 255
    3312:	48 2f       	mov	r20, r24
    3314:	50 e0       	ldi	r21, 0x00	; 0
    3316:	24 17       	cp	r18, r20
    3318:	35 07       	cpc	r19, r21
    331a:	34 f4       	brge	.+12     	; 0x3328 <nrk_wait_until_nw+0x40>
        {
            timer += TIME_PAD;
    331c:	81 2f       	mov	r24, r17
    331e:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    3320:	80 93 d7 06 	sts	0x06D7, r24
            _nrk_set_next_wakeup (timer);
    3324:	0e 94 81 21 	call	0x4302	; 0x4302 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    3328:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    332c:	0e 94 14 19 	call	0x3228	; 0x3228 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3330:	81 e0       	ldi	r24, 0x01	; 1
    3332:	1f 91       	pop	r17
    3334:	08 95       	ret

00003336 <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    3336:	1f 93       	push	r17
    3338:	cf 93       	push	r28
    333a:	df 93       	push	r29
    333c:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    333e:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3342:	e0 91 3e 09 	lds	r30, 0x093E
    3346:	f0 91 3f 09 	lds	r31, 0x093F
    334a:	81 e0       	ldi	r24, 0x01	; 1
    334c:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    334e:	ce 01       	movw	r24, r28
    3350:	a0 e0       	ldi	r26, 0x00	; 0
    3352:	b0 e0       	ldi	r27, 0x00	; 0
    3354:	85 8b       	std	Z+21, r24	; 0x15
    3356:	96 8b       	std	Z+22, r25	; 0x16
    3358:	a7 8b       	std	Z+23, r26	; 0x17
    335a:	b0 8f       	std	Z+24, r27	; 0x18
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    335c:	0e 94 e6 21 	call	0x43cc	; 0x43cc <_nrk_os_timer_get>
    3360:	18 2f       	mov	r17, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    3362:	88 3f       	cpi	r24, 0xF8	; 248
    3364:	88 f4       	brcc	.+34     	; 0x3388 <nrk_wait_until_ticks+0x52>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3366:	0e 94 7d 21 	call	0x42fa	; 0x42fa <_nrk_get_next_wakeup>
    336a:	21 2f       	mov	r18, r17
    336c:	30 e0       	ldi	r19, 0x00	; 0
    336e:	2f 5f       	subi	r18, 0xFF	; 255
    3370:	3f 4f       	sbci	r19, 0xFF	; 255
    3372:	48 2f       	mov	r20, r24
    3374:	50 e0       	ldi	r21, 0x00	; 0
    3376:	24 17       	cp	r18, r20
    3378:	35 07       	cpc	r19, r21
    337a:	34 f4       	brge	.+12     	; 0x3388 <nrk_wait_until_ticks+0x52>
        {
            timer += TIME_PAD;
    337c:	81 2f       	mov	r24, r17
    337e:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    3380:	80 93 d7 06 	sts	0x06D7, r24
            _nrk_set_next_wakeup (timer);
    3384:	0e 94 81 21 	call	0x4302	; 0x4302 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    3388:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    338c:	0e 94 14 19 	call	0x3228	; 0x3228 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3390:	81 e0       	ldi	r24, 0x01	; 1
    3392:	df 91       	pop	r29
    3394:	cf 91       	pop	r28
    3396:	1f 91       	pop	r17
    3398:	08 95       	ret

0000339a <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    339a:	ef 92       	push	r14
    339c:	ff 92       	push	r15
    339e:	0f 93       	push	r16
    33a0:	1f 93       	push	r17
    33a2:	df 93       	push	r29
    33a4:	cf 93       	push	r28
    33a6:	0f 92       	push	r0
    33a8:	cd b7       	in	r28, 0x3d	; 61
    33aa:	de b7       	in	r29, 0x3e	; 62
    33ac:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    33ae:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    33b2:	e0 91 3e 09 	lds	r30, 0x093E
    33b6:	f0 91 3f 09 	lds	r31, 0x093F
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    33be:	0e 94 e6 21 	call	0x43cc	; 0x43cc <_nrk_os_timer_get>
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    33c2:	e0 91 3e 09 	lds	r30, 0x093E
    33c6:	f0 91 3f 09 	lds	r31, 0x093F
    33ca:	e8 2e       	mov	r14, r24
    33cc:	ff 24       	eor	r15, r15
    33ce:	0e 0d       	add	r16, r14
    33d0:	1f 1d       	adc	r17, r15
    33d2:	20 e0       	ldi	r18, 0x00	; 0
    33d4:	30 e0       	ldi	r19, 0x00	; 0
    33d6:	05 8b       	std	Z+21, r16	; 0x15
    33d8:	16 8b       	std	Z+22, r17	; 0x16
    33da:	27 8b       	std	Z+23, r18	; 0x17
    33dc:	30 8f       	std	Z+24, r19	; 0x18

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    33de:	88 3f       	cpi	r24, 0xF8	; 248
    33e0:	90 f4       	brcc	.+36     	; 0x3406 <nrk_wait_ticks+0x6c>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    33e2:	89 83       	std	Y+1, r24	; 0x01
    33e4:	0e 94 7d 21 	call	0x42fa	; 0x42fa <_nrk_get_next_wakeup>
    33e8:	08 94       	sec
    33ea:	e1 1c       	adc	r14, r1
    33ec:	f1 1c       	adc	r15, r1
    33ee:	28 2f       	mov	r18, r24
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	99 81       	ldd	r25, Y+1	; 0x01
    33f4:	e2 16       	cp	r14, r18
    33f6:	f3 06       	cpc	r15, r19
    33f8:	34 f4       	brge	.+12     	; 0x3406 <nrk_wait_ticks+0x6c>
        {
            timer += TIME_PAD;
    33fa:	89 2f       	mov	r24, r25
    33fc:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    33fe:	80 93 d7 06 	sts	0x06D7, r24
            _nrk_set_next_wakeup (timer);
    3402:	0e 94 81 21 	call	0x4302	; 0x4302 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    3406:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    340a:	0e 94 14 19 	call	0x3228	; 0x3228 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    340e:	81 e0       	ldi	r24, 0x01	; 1
    3410:	0f 90       	pop	r0
    3412:	cf 91       	pop	r28
    3414:	df 91       	pop	r29
    3416:	1f 91       	pop	r17
    3418:	0f 91       	pop	r16
    341a:	ff 90       	pop	r15
    341c:	ef 90       	pop	r14
    341e:	08 95       	ret

00003420 <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    3420:	1f 93       	push	r17
    3422:	cf 93       	push	r28
    3424:	df 93       	push	r29
    3426:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    3428:	0e 94 34 14 	call	0x2868	; 0x2868 <nrk_stack_check>

    if (p == 0)
    342c:	20 97       	sbiw	r28, 0x00	; 0
    342e:	11 f4       	brne	.+4      	; 0x3434 <nrk_wait_until_next_n_periods+0x14>
        p = 1;
    3430:	c1 e0       	ldi	r28, 0x01	; 1
    3432:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    3434:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3438:	e0 91 3e 09 	lds	r30, 0x093E
    343c:	f0 91 3f 09 	lds	r31, 0x093F
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    3444:	d2 a7       	std	Z+42, r29	; 0x2a
    3446:	c1 a7       	std	Z+41, r28	; 0x29
    timer = _nrk_os_timer_get ();
    3448:	0e 94 e6 21 	call	0x43cc	; 0x43cc <_nrk_os_timer_get>
    344c:	18 2f       	mov	r17, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    344e:	88 3f       	cpi	r24, 0xF8	; 248
    3450:	88 f4       	brcc	.+34     	; 0x3474 <nrk_wait_until_next_n_periods+0x54>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3452:	0e 94 7d 21 	call	0x42fa	; 0x42fa <_nrk_get_next_wakeup>
    3456:	21 2f       	mov	r18, r17
    3458:	30 e0       	ldi	r19, 0x00	; 0
    345a:	2f 5f       	subi	r18, 0xFF	; 255
    345c:	3f 4f       	sbci	r19, 0xFF	; 255
    345e:	48 2f       	mov	r20, r24
    3460:	50 e0       	ldi	r21, 0x00	; 0
    3462:	24 17       	cp	r18, r20
    3464:	35 07       	cpc	r19, r21
    3466:	34 f4       	brge	.+12     	; 0x3474 <nrk_wait_until_next_n_periods+0x54>
        {
            timer += TIME_PAD;
    3468:	81 2f       	mov	r24, r17
    346a:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    346c:	80 93 d7 06 	sts	0x06D7, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    3470:	0e 94 81 21 	call	0x4302	; 0x4302 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    3474:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    3478:	0e 94 14 19 	call	0x3228	; 0x3228 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    347c:	81 e0       	ldi	r24, 0x01	; 1
    347e:	df 91       	pop	r29
    3480:	cf 91       	pop	r28
    3482:	1f 91       	pop	r17
    3484:	08 95       	ret

00003486 <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    3486:	1f 93       	push	r17
    uint8_t timer;

    nrk_stack_check ();
    3488:	0e 94 34 14 	call	0x2868	; 0x2868 <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    348c:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    3490:	e0 91 3e 09 	lds	r30, 0x093E
    3494:	f0 91 3f 09 	lds	r31, 0x093F
    3498:	81 e0       	ldi	r24, 0x01	; 1
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	92 a7       	std	Z+42, r25	; 0x2a
    349e:	81 a7       	std	Z+41, r24	; 0x29
    nrk_cur_task_TCB->suspend_flag = 1;
    34a0:	81 e0       	ldi	r24, 0x01	; 1
    34a2:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    34a4:	0e 94 e6 21 	call	0x43cc	; 0x43cc <_nrk_os_timer_get>
    34a8:	18 2f       	mov	r17, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    34aa:	88 3f       	cpi	r24, 0xF8	; 248
    34ac:	88 f4       	brcc	.+34     	; 0x34d0 <nrk_wait_until_next_period+0x4a>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    34ae:	0e 94 7d 21 	call	0x42fa	; 0x42fa <_nrk_get_next_wakeup>
    34b2:	21 2f       	mov	r18, r17
    34b4:	30 e0       	ldi	r19, 0x00	; 0
    34b6:	2f 5f       	subi	r18, 0xFF	; 255
    34b8:	3f 4f       	sbci	r19, 0xFF	; 255
    34ba:	48 2f       	mov	r20, r24
    34bc:	50 e0       	ldi	r21, 0x00	; 0
    34be:	24 17       	cp	r18, r20
    34c0:	35 07       	cpc	r19, r21
    34c2:	34 f4       	brge	.+12     	; 0x34d0 <nrk_wait_until_next_period+0x4a>
        {
            timer += TIME_PAD;
    34c4:	81 2f       	mov	r24, r17
    34c6:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    34c8:	80 93 d7 06 	sts	0x06D7, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    34cc:	0e 94 81 21 	call	0x4302	; 0x4302 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    34d0:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    34d4:	0e 94 14 19 	call	0x3228	; 0x3228 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    34d8:	81 e0       	ldi	r24, 0x01	; 1
    34da:	1f 91       	pop	r17
    34dc:	08 95       	ret

000034de <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    34de:	e0 91 3e 09 	lds	r30, 0x093E
    34e2:	f0 91 3f 09 	lds	r31, 0x093F
    34e6:	80 85       	ldd	r24, Z+8	; 0x08
    34e8:	0e 94 2f 18 	call	0x305e	; 0x305e <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    34ec:	e0 91 3e 09 	lds	r30, 0x093E
    34f0:	f0 91 3f 09 	lds	r31, 0x093F
    34f4:	84 e0       	ldi	r24, 0x04	; 4
    34f6:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    34f8:	0e 94 43 1a 	call	0x3486	; 0x3486 <nrk_wait_until_next_period>
    return NRK_OK;
}
    34fc:	81 e0       	ldi	r24, 0x01	; 1
    34fe:	08 95       	ret

00003500 <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    3500:	8f 92       	push	r8
    3502:	9f 92       	push	r9
    3504:	af 92       	push	r10
    3506:	bf 92       	push	r11
    3508:	cf 92       	push	r12
    350a:	df 92       	push	r13
    350c:	ef 92       	push	r14
    350e:	ff 92       	push	r15
    3510:	0f 93       	push	r16
    3512:	1f 93       	push	r17
    3514:	df 93       	push	r29
    3516:	cf 93       	push	r28
    3518:	cd b7       	in	r28, 0x3d	; 61
    351a:	de b7       	in	r29, 0x3e	; 62
    351c:	60 97       	sbiw	r28, 0x10	; 16
    351e:	0f b6       	in	r0, 0x3f	; 63
    3520:	f8 94       	cli
    3522:	de bf       	out	0x3e, r29	; 62
    3524:	0f be       	out	0x3f, r0	; 63
    3526:	cd bf       	out	0x3d, r28	; 61
    3528:	29 87       	std	Y+9, r18	; 0x09
    352a:	3a 87       	std	Y+10, r19	; 0x0a
    352c:	4b 87       	std	Y+11, r20	; 0x0b
    352e:	5c 87       	std	Y+12, r21	; 0x0c
    3530:	6d 87       	std	Y+13, r22	; 0x0d
    3532:	7e 87       	std	Y+14, r23	; 0x0e
    3534:	8f 87       	std	Y+15, r24	; 0x0f
    3536:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    3538:	ce 01       	movw	r24, r28
    353a:	01 96       	adiw	r24, 0x01	; 1
    353c:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    3540:	ce 01       	movw	r24, r28
    3542:	09 96       	adiw	r24, 0x09	; 9
    3544:	09 85       	ldd	r16, Y+9	; 0x09
    3546:	1a 85       	ldd	r17, Y+10	; 0x0a
    3548:	2b 85       	ldd	r18, Y+11	; 0x0b
    354a:	3c 85       	ldd	r19, Y+12	; 0x0c
    354c:	4d 85       	ldd	r20, Y+13	; 0x0d
    354e:	5e 85       	ldd	r21, Y+14	; 0x0e
    3550:	6f 85       	ldd	r22, Y+15	; 0x0f
    3552:	78 89       	ldd	r23, Y+16	; 0x10
    3554:	89 80       	ldd	r8, Y+1	; 0x01
    3556:	9a 80       	ldd	r9, Y+2	; 0x02
    3558:	ab 80       	ldd	r10, Y+3	; 0x03
    355a:	bc 80       	ldd	r11, Y+4	; 0x04
    355c:	cd 80       	ldd	r12, Y+5	; 0x05
    355e:	de 80       	ldd	r13, Y+6	; 0x06
    3560:	ef 80       	ldd	r14, Y+7	; 0x07
    3562:	f8 84       	ldd	r15, Y+8	; 0x08
    3564:	0e 94 3a 1b 	call	0x3674	; 0x3674 <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    3568:	8f 3f       	cpi	r24, 0xFF	; 255
    356a:	61 f0       	breq	.+24     	; 0x3584 <nrk_wait_until+0x84>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    356c:	29 85       	ldd	r18, Y+9	; 0x09
    356e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3570:	4b 85       	ldd	r20, Y+11	; 0x0b
    3572:	5c 85       	ldd	r21, Y+12	; 0x0c
    3574:	6d 85       	ldd	r22, Y+13	; 0x0d
    3576:	7e 85       	ldd	r23, Y+14	; 0x0e
    3578:	8f 85       	ldd	r24, Y+15	; 0x0f
    357a:	98 89       	ldd	r25, Y+16	; 0x10
    357c:	0e 94 1e 19 	call	0x323c	; 0x323c <nrk_wait>

    return NRK_OK;
    3580:	81 e0       	ldi	r24, 0x01	; 1
    3582:	01 c0       	rjmp	.+2      	; 0x3586 <nrk_wait_until+0x86>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    3584:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    3586:	60 96       	adiw	r28, 0x10	; 16
    3588:	0f b6       	in	r0, 0x3f	; 63
    358a:	f8 94       	cli
    358c:	de bf       	out	0x3e, r29	; 62
    358e:	0f be       	out	0x3f, r0	; 63
    3590:	cd bf       	out	0x3d, r28	; 61
    3592:	cf 91       	pop	r28
    3594:	df 91       	pop	r29
    3596:	1f 91       	pop	r17
    3598:	0f 91       	pop	r16
    359a:	ff 90       	pop	r15
    359c:	ef 90       	pop	r14
    359e:	df 90       	pop	r13
    35a0:	cf 90       	pop	r12
    35a2:	bf 90       	pop	r11
    35a4:	af 90       	pop	r10
    35a6:	9f 90       	pop	r9
    35a8:	8f 90       	pop	r8
    35aa:	08 95       	ret

000035ac <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    35ac:	e0 91 3e 09 	lds	r30, 0x093E
    35b0:	f0 91 3f 09 	lds	r31, 0x093F
}
    35b4:	80 85       	ldd	r24, Z+8	; 0x08
    35b6:	08 95       	ret

000035b8 <nrk_time_get>:
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

void nrk_time_get(nrk_time_t *t)
{
    35b8:	ef 92       	push	r14
    35ba:	ff 92       	push	r15
    35bc:	0f 93       	push	r16
    35be:	1f 93       	push	r17
    35c0:	cf 93       	push	r28
    35c2:	df 93       	push	r29
    35c4:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    35c6:	1c 82       	std	Y+4, r1	; 0x04
    35c8:	1d 82       	std	Y+5, r1	; 0x05
    35ca:	1e 82       	std	Y+6, r1	; 0x06
    35cc:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    35ce:	80 91 35 09 	lds	r24, 0x0935
    35d2:	90 91 36 09 	lds	r25, 0x0936
    35d6:	a0 91 37 09 	lds	r26, 0x0937
    35da:	b0 91 38 09 	lds	r27, 0x0938
    35de:	88 83       	st	Y, r24
    35e0:	99 83       	std	Y+1, r25	; 0x01
    35e2:	aa 83       	std	Y+2, r26	; 0x02
    35e4:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    35e6:	e0 90 39 09 	lds	r14, 0x0939
    35ea:	f0 90 3a 09 	lds	r15, 0x093A
    35ee:	00 91 3b 09 	lds	r16, 0x093B
    35f2:	10 91 3c 09 	lds	r17, 0x093C
    35f6:	ec 82       	std	Y+4, r14	; 0x04
    35f8:	fd 82       	std	Y+5, r15	; 0x05
    35fa:	0e 83       	std	Y+6, r16	; 0x06
    35fc:	1f 83       	std	Y+7, r17	; 0x07
   
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    35fe:	0e 94 e6 21 	call	0x43cc	; 0x43cc <_nrk_os_timer_get>
    3602:	68 2f       	mov	r22, r24
    3604:	70 e0       	ldi	r23, 0x00	; 0
    3606:	80 e0       	ldi	r24, 0x00	; 0
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	23 eb       	ldi	r18, 0xB3	; 179
    360c:	36 ee       	ldi	r19, 0xE6	; 230
    360e:	4e e0       	ldi	r20, 0x0E	; 14
    3610:	50 e0       	ldi	r21, 0x00	; 0
    3612:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <__mulsi3>
    3616:	6e 0d       	add	r22, r14
    3618:	7f 1d       	adc	r23, r15
    361a:	80 1f       	adc	r24, r16
    361c:	91 1f       	adc	r25, r17
    361e:	6c 83       	std	Y+4, r22	; 0x04
    3620:	7d 83       	std	Y+5, r23	; 0x05
    3622:	8e 83       	std	Y+6, r24	; 0x06
    3624:	9f 83       	std	Y+7, r25	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    3626:	13 c0       	rjmp	.+38     	; 0x364e <nrk_time_get+0x96>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    3628:	80 50       	subi	r24, 0x00	; 0
    362a:	9a 4c       	sbci	r25, 0xCA	; 202
    362c:	aa 49       	sbci	r26, 0x9A	; 154
    362e:	bb 43       	sbci	r27, 0x3B	; 59
    3630:	8c 83       	std	Y+4, r24	; 0x04
    3632:	9d 83       	std	Y+5, r25	; 0x05
    3634:	ae 83       	std	Y+6, r26	; 0x06
    3636:	bf 83       	std	Y+7, r27	; 0x07
    t->secs++;
    3638:	88 81       	ld	r24, Y
    363a:	99 81       	ldd	r25, Y+1	; 0x01
    363c:	aa 81       	ldd	r26, Y+2	; 0x02
    363e:	bb 81       	ldd	r27, Y+3	; 0x03
    3640:	01 96       	adiw	r24, 0x01	; 1
    3642:	a1 1d       	adc	r26, r1
    3644:	b1 1d       	adc	r27, r1
    3646:	88 83       	st	Y, r24
    3648:	99 83       	std	Y+1, r25	; 0x01
    364a:	aa 83       	std	Y+2, r26	; 0x02
    364c:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
   
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    364e:	8c 81       	ldd	r24, Y+4	; 0x04
    3650:	9d 81       	ldd	r25, Y+5	; 0x05
    3652:	ae 81       	ldd	r26, Y+6	; 0x06
    3654:	bf 81       	ldd	r27, Y+7	; 0x07
    3656:	80 30       	cpi	r24, 0x00	; 0
    3658:	2a ec       	ldi	r18, 0xCA	; 202
    365a:	92 07       	cpc	r25, r18
    365c:	2a e9       	ldi	r18, 0x9A	; 154
    365e:	a2 07       	cpc	r26, r18
    3660:	2b e3       	ldi	r18, 0x3B	; 59
    3662:	b2 07       	cpc	r27, r18
    3664:	08 f7       	brcc	.-62     	; 0x3628 <nrk_time_get+0x70>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    t->secs++;
    }

}
    3666:	df 91       	pop	r29
    3668:	cf 91       	pop	r28
    366a:	1f 91       	pop	r17
    366c:	0f 91       	pop	r16
    366e:	ff 90       	pop	r15
    3670:	ef 90       	pop	r14
    3672:	08 95       	ret

00003674 <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    3674:	8f 92       	push	r8
    3676:	9f 92       	push	r9
    3678:	af 92       	push	r10
    367a:	bf 92       	push	r11
    367c:	cf 92       	push	r12
    367e:	df 92       	push	r13
    3680:	ef 92       	push	r14
    3682:	ff 92       	push	r15
    3684:	0f 93       	push	r16
    3686:	1f 93       	push	r17
    3688:	df 93       	push	r29
    368a:	cf 93       	push	r28
    368c:	cd b7       	in	r28, 0x3d	; 61
    368e:	de b7       	in	r29, 0x3e	; 62
    3690:	60 97       	sbiw	r28, 0x10	; 16
    3692:	0f b6       	in	r0, 0x3f	; 63
    3694:	f8 94       	cli
    3696:	de bf       	out	0x3e, r29	; 62
    3698:	0f be       	out	0x3f, r0	; 63
    369a:	cd bf       	out	0x3d, r28	; 61
    369c:	fc 01       	movw	r30, r24
    369e:	09 83       	std	Y+1, r16	; 0x01
    36a0:	1a 83       	std	Y+2, r17	; 0x02
    36a2:	2b 83       	std	Y+3, r18	; 0x03
    36a4:	3c 83       	std	Y+4, r19	; 0x04
    36a6:	4d 83       	std	Y+5, r20	; 0x05
    36a8:	5e 83       	std	Y+6, r21	; 0x06
    36aa:	6f 83       	std	Y+7, r22	; 0x07
    36ac:	78 87       	std	Y+8, r23	; 0x08
    36ae:	89 86       	std	Y+9, r8	; 0x09
    36b0:	9a 86       	std	Y+10, r9	; 0x0a
    36b2:	ab 86       	std	Y+11, r10	; 0x0b
    36b4:	bc 86       	std	Y+12, r11	; 0x0c
    36b6:	cd 86       	std	Y+13, r12	; 0x0d
    36b8:	de 86       	std	Y+14, r13	; 0x0e
    36ba:	ef 86       	std	Y+15, r14	; 0x0f
    36bc:	f8 8a       	std	Y+16, r15	; 0x10
	return NRK_OK;
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
    36be:	e9 80       	ldd	r14, Y+1	; 0x01
    36c0:	fa 80       	ldd	r15, Y+2	; 0x02
    36c2:	0b 81       	ldd	r16, Y+3	; 0x03
    36c4:	1c 81       	ldd	r17, Y+4	; 0x04
    36c6:	2d 81       	ldd	r18, Y+5	; 0x05
    36c8:	3e 81       	ldd	r19, Y+6	; 0x06
    36ca:	4f 81       	ldd	r20, Y+7	; 0x07
    36cc:	58 85       	ldd	r21, Y+8	; 0x08
    36ce:	a9 84       	ldd	r10, Y+9	; 0x09
    36d0:	ba 84       	ldd	r11, Y+10	; 0x0a
    36d2:	cb 84       	ldd	r12, Y+11	; 0x0b
    36d4:	dc 84       	ldd	r13, Y+12	; 0x0c
    36d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    36d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    36da:	af 85       	ldd	r26, Y+15	; 0x0f
    36dc:	b8 89       	ldd	r27, Y+16	; 0x10
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    36de:	ea 14       	cp	r14, r10
    36e0:	fb 04       	cpc	r15, r11
    36e2:	0c 05       	cpc	r16, r12
    36e4:	1d 05       	cpc	r17, r13
    36e6:	08 f4       	brcc	.+2      	; 0x36ea <nrk_time_sub+0x76>
    36e8:	40 c0       	rjmp	.+128    	; 0x376a <nrk_time_sub+0xf6>
if(low.secs==high.secs)
    36ea:	ae 14       	cp	r10, r14
    36ec:	bf 04       	cpc	r11, r15
    36ee:	c0 06       	cpc	r12, r16
    36f0:	d1 06       	cpc	r13, r17
    36f2:	91 f4       	brne	.+36     	; 0x3718 <nrk_time_sub+0xa4>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    36f4:	28 17       	cp	r18, r24
    36f6:	39 07       	cpc	r19, r25
    36f8:	4a 07       	cpc	r20, r26
    36fa:	5b 07       	cpc	r21, r27
    36fc:	b0 f1       	brcs	.+108    	; 0x376a <nrk_time_sub+0xf6>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    36fe:	28 1b       	sub	r18, r24
    3700:	39 0b       	sbc	r19, r25
    3702:	4a 0b       	sbc	r20, r26
    3704:	5b 0b       	sbc	r21, r27
    3706:	24 83       	std	Z+4, r18	; 0x04
    3708:	35 83       	std	Z+5, r19	; 0x05
    370a:	46 83       	std	Z+6, r20	; 0x06
    370c:	57 83       	std	Z+7, r21	; 0x07
	result->secs=0;
    370e:	10 82       	st	Z, r1
    3710:	11 82       	std	Z+1, r1	; 0x01
    3712:	12 82       	std	Z+2, r1	; 0x02
    3714:	13 82       	std	Z+3, r1	; 0x03
    3716:	27 c0       	rjmp	.+78     	; 0x3766 <nrk_time_sub+0xf2>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    3718:	28 17       	cp	r18, r24
    371a:	39 07       	cpc	r19, r25
    371c:	4a 07       	cpc	r20, r26
    371e:	5b 07       	cpc	r21, r27
    3720:	90 f4       	brcc	.+36     	; 0x3746 <nrk_time_sub+0xd2>
{
	high.secs--;
    3722:	08 94       	sec
    3724:	e1 08       	sbc	r14, r1
    3726:	f1 08       	sbc	r15, r1
    3728:	01 09       	sbc	r16, r1
    372a:	11 09       	sbc	r17, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    372c:	ea 18       	sub	r14, r10
    372e:	fb 08       	sbc	r15, r11
    3730:	0c 09       	sbc	r16, r12
    3732:	1d 09       	sbc	r17, r13
    3734:	e0 82       	st	Z, r14
    3736:	f1 82       	std	Z+1, r15	; 0x01
    3738:	02 83       	std	Z+2, r16	; 0x02
    373a:	13 83       	std	Z+3, r17	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    373c:	20 50       	subi	r18, 0x00	; 0
    373e:	36 43       	sbci	r19, 0x36	; 54
    3740:	45 46       	sbci	r20, 0x65	; 101
    3742:	54 4c       	sbci	r21, 0xC4	; 196
    3744:	08 c0       	rjmp	.+16     	; 0x3756 <nrk_time_sub+0xe2>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    3746:	ea 18       	sub	r14, r10
    3748:	fb 08       	sbc	r15, r11
    374a:	0c 09       	sbc	r16, r12
    374c:	1d 09       	sbc	r17, r13
    374e:	e0 82       	st	Z, r14
    3750:	f1 82       	std	Z+1, r15	; 0x01
    3752:	02 83       	std	Z+2, r16	; 0x02
    3754:	13 83       	std	Z+3, r17	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    3756:	28 1b       	sub	r18, r24
    3758:	39 0b       	sbc	r19, r25
    375a:	4a 0b       	sbc	r20, r26
    375c:	5b 0b       	sbc	r21, r27
    375e:	24 83       	std	Z+4, r18	; 0x04
    3760:	35 83       	std	Z+5, r19	; 0x05
    3762:	46 83       	std	Z+6, r20	; 0x06
    3764:	57 83       	std	Z+7, r21	; 0x07
return NRK_OK;
    3766:	81 e0       	ldi	r24, 0x01	; 1
    3768:	01 c0       	rjmp	.+2      	; 0x376c <nrk_time_sub+0xf8>
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
if(low.secs==high.secs)
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    376a:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    376c:	60 96       	adiw	r28, 0x10	; 16
    376e:	0f b6       	in	r0, 0x3f	; 63
    3770:	f8 94       	cli
    3772:	de bf       	out	0x3e, r29	; 62
    3774:	0f be       	out	0x3f, r0	; 63
    3776:	cd bf       	out	0x3d, r28	; 61
    3778:	cf 91       	pop	r28
    377a:	df 91       	pop	r29
    377c:	1f 91       	pop	r17
    377e:	0f 91       	pop	r16
    3780:	ff 90       	pop	r15
    3782:	ef 90       	pop	r14
    3784:	df 90       	pop	r13
    3786:	cf 90       	pop	r12
    3788:	bf 90       	pop	r11
    378a:	af 90       	pop	r10
    378c:	9f 90       	pop	r9
    378e:	8f 90       	pop	r8
    3790:	08 95       	ret

00003792 <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    3792:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    3794:	14 c0       	rjmp	.+40     	; 0x37be <nrk_time_compact_nanos+0x2c>
    {
    t->nano_secs-=NANOS_PER_SEC;
    3796:	20 50       	subi	r18, 0x00	; 0
    3798:	3a 4c       	sbci	r19, 0xCA	; 202
    379a:	4a 49       	sbci	r20, 0x9A	; 154
    379c:	5b 43       	sbci	r21, 0x3B	; 59
    379e:	24 83       	std	Z+4, r18	; 0x04
    37a0:	35 83       	std	Z+5, r19	; 0x05
    37a2:	46 83       	std	Z+6, r20	; 0x06
    37a4:	57 83       	std	Z+7, r21	; 0x07
    t->secs++;
    37a6:	20 81       	ld	r18, Z
    37a8:	31 81       	ldd	r19, Z+1	; 0x01
    37aa:	42 81       	ldd	r20, Z+2	; 0x02
    37ac:	53 81       	ldd	r21, Z+3	; 0x03
    37ae:	2f 5f       	subi	r18, 0xFF	; 255
    37b0:	3f 4f       	sbci	r19, 0xFF	; 255
    37b2:	4f 4f       	sbci	r20, 0xFF	; 255
    37b4:	5f 4f       	sbci	r21, 0xFF	; 255
    37b6:	20 83       	st	Z, r18
    37b8:	31 83       	std	Z+1, r19	; 0x01
    37ba:	42 83       	std	Z+2, r20	; 0x02
    37bc:	53 83       	std	Z+3, r21	; 0x03
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
  while(t->nano_secs>=NANOS_PER_SEC)
    37be:	24 81       	ldd	r18, Z+4	; 0x04
    37c0:	35 81       	ldd	r19, Z+5	; 0x05
    37c2:	46 81       	ldd	r20, Z+6	; 0x06
    37c4:	57 81       	ldd	r21, Z+7	; 0x07
    37c6:	20 30       	cpi	r18, 0x00	; 0
    37c8:	8a ec       	ldi	r24, 0xCA	; 202
    37ca:	38 07       	cpc	r19, r24
    37cc:	8a e9       	ldi	r24, 0x9A	; 154
    37ce:	48 07       	cpc	r20, r24
    37d0:	8b e3       	ldi	r24, 0x3B	; 59
    37d2:	58 07       	cpc	r21, r24
    37d4:	00 f7       	brcc	.-64     	; 0x3796 <nrk_time_compact_nanos+0x4>
    {
    t->nano_secs-=NANOS_PER_SEC;
    t->secs++;
    }
}
    37d6:	08 95       	ret

000037d8 <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    37d8:	8f 92       	push	r8
    37da:	9f 92       	push	r9
    37dc:	af 92       	push	r10
    37de:	bf 92       	push	r11
    37e0:	cf 92       	push	r12
    37e2:	df 92       	push	r13
    37e4:	ef 92       	push	r14
    37e6:	ff 92       	push	r15
    37e8:	0f 93       	push	r16
    37ea:	1f 93       	push	r17
    37ec:	df 93       	push	r29
    37ee:	cf 93       	push	r28
    37f0:	cd b7       	in	r28, 0x3d	; 61
    37f2:	de b7       	in	r29, 0x3e	; 62
    37f4:	60 97       	sbiw	r28, 0x10	; 16
    37f6:	0f b6       	in	r0, 0x3f	; 63
    37f8:	f8 94       	cli
    37fa:	de bf       	out	0x3e, r29	; 62
    37fc:	0f be       	out	0x3f, r0	; 63
    37fe:	cd bf       	out	0x3d, r28	; 61
    3800:	09 83       	std	Y+1, r16	; 0x01
    3802:	1a 83       	std	Y+2, r17	; 0x02
    3804:	2b 83       	std	Y+3, r18	; 0x03
    3806:	3c 83       	std	Y+4, r19	; 0x04
    3808:	4d 83       	std	Y+5, r20	; 0x05
    380a:	5e 83       	std	Y+6, r21	; 0x06
    380c:	6f 83       	std	Y+7, r22	; 0x07
    380e:	78 87       	std	Y+8, r23	; 0x08
    3810:	89 86       	std	Y+9, r8	; 0x09
    3812:	9a 86       	std	Y+10, r9	; 0x0a
    3814:	ab 86       	std	Y+11, r10	; 0x0b
    3816:	bc 86       	std	Y+12, r11	; 0x0c
    3818:	cd 86       	std	Y+13, r12	; 0x0d
    381a:	de 86       	std	Y+14, r13	; 0x0e
    381c:	ef 86       	std	Y+15, r14	; 0x0f
    381e:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    3820:	29 85       	ldd	r18, Y+9	; 0x09
    3822:	3a 85       	ldd	r19, Y+10	; 0x0a
    3824:	4b 85       	ldd	r20, Y+11	; 0x0b
    3826:	5c 85       	ldd	r21, Y+12	; 0x0c
    3828:	e9 80       	ldd	r14, Y+1	; 0x01
    382a:	fa 80       	ldd	r15, Y+2	; 0x02
    382c:	0b 81       	ldd	r16, Y+3	; 0x03
    382e:	1c 81       	ldd	r17, Y+4	; 0x04
    3830:	2e 0d       	add	r18, r14
    3832:	3f 1d       	adc	r19, r15
    3834:	40 1f       	adc	r20, r16
    3836:	51 1f       	adc	r21, r17
    3838:	fc 01       	movw	r30, r24
    383a:	20 83       	st	Z, r18
    383c:	31 83       	std	Z+1, r19	; 0x01
    383e:	42 83       	std	Z+2, r20	; 0x02
    3840:	53 83       	std	Z+3, r21	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    3842:	2d 85       	ldd	r18, Y+13	; 0x0d
    3844:	3e 85       	ldd	r19, Y+14	; 0x0e
    3846:	4f 85       	ldd	r20, Y+15	; 0x0f
    3848:	58 89       	ldd	r21, Y+16	; 0x10
    384a:	ed 80       	ldd	r14, Y+5	; 0x05
    384c:	fe 80       	ldd	r15, Y+6	; 0x06
    384e:	0f 81       	ldd	r16, Y+7	; 0x07
    3850:	18 85       	ldd	r17, Y+8	; 0x08
    3852:	2e 0d       	add	r18, r14
    3854:	3f 1d       	adc	r19, r15
    3856:	40 1f       	adc	r20, r16
    3858:	51 1f       	adc	r21, r17
    385a:	24 83       	std	Z+4, r18	; 0x04
    385c:	35 83       	std	Z+5, r19	; 0x05
    385e:	46 83       	std	Z+6, r20	; 0x06
    3860:	57 83       	std	Z+7, r21	; 0x07
nrk_time_compact_nanos(result);
    3862:	0e 94 c9 1b 	call	0x3792	; 0x3792 <nrk_time_compact_nanos>
return NRK_OK;
}
    3866:	81 e0       	ldi	r24, 0x01	; 1
    3868:	60 96       	adiw	r28, 0x10	; 16
    386a:	0f b6       	in	r0, 0x3f	; 63
    386c:	f8 94       	cli
    386e:	de bf       	out	0x3e, r29	; 62
    3870:	0f be       	out	0x3f, r0	; 63
    3872:	cd bf       	out	0x3d, r28	; 61
    3874:	cf 91       	pop	r28
    3876:	df 91       	pop	r29
    3878:	1f 91       	pop	r17
    387a:	0f 91       	pop	r16
    387c:	ff 90       	pop	r15
    387e:	ef 90       	pop	r14
    3880:	df 90       	pop	r13
    3882:	cf 90       	pop	r12
    3884:	bf 90       	pop	r11
    3886:	af 90       	pop	r10
    3888:	9f 90       	pop	r9
    388a:	8f 90       	pop	r8
    388c:	08 95       	ret

0000388e <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    388e:	60 93 35 09 	sts	0x0935, r22
    3892:	70 93 36 09 	sts	0x0936, r23
    3896:	80 93 37 09 	sts	0x0937, r24
    389a:	90 93 38 09 	sts	0x0938, r25
  nrk_system_time.nano_secs=nano_secs;
    389e:	20 93 39 09 	sts	0x0939, r18
    38a2:	30 93 3a 09 	sts	0x093A, r19
    38a6:	40 93 3b 09 	sts	0x093B, r20
    38aa:	50 93 3c 09 	sts	0x093C, r21
}
    38ae:	08 95       	ret

000038b0 <_nrk_time_to_ticks>:

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    38b0:	8f 92       	push	r8
    38b2:	9f 92       	push	r9
    38b4:	af 92       	push	r10
    38b6:	bf 92       	push	r11
    38b8:	cf 92       	push	r12
    38ba:	df 92       	push	r13
    38bc:	ef 92       	push	r14
    38be:	ff 92       	push	r15
    38c0:	0f 93       	push	r16
    38c2:	1f 93       	push	r17
    38c4:	fc 01       	movw	r30, r24
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    38c6:	20 81       	ld	r18, Z
    38c8:	31 81       	ldd	r19, Z+1	; 0x01
    38ca:	42 81       	ldd	r20, Z+2	; 0x02
    38cc:	53 81       	ldd	r21, Z+3	; 0x03
    38ce:	64 81       	ldd	r22, Z+4	; 0x04
    38d0:	75 81       	ldd	r23, Z+5	; 0x05
    38d2:	86 81       	ldd	r24, Z+6	; 0x06
    38d4:	97 81       	ldd	r25, Z+7	; 0x07
    38d6:	21 15       	cp	r18, r1
    38d8:	31 05       	cpc	r19, r1
    38da:	41 05       	cpc	r20, r1
    38dc:	51 05       	cpc	r21, r1
    38de:	09 f4       	brne	.+2      	; 0x38e2 <_nrk_time_to_ticks+0x32>
    38e0:	61 c0       	rjmp	.+194    	; 0x39a4 <_nrk_time_to_ticks+0xf4>
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    38e2:	22 34       	cpi	r18, 0x42	; 66
    38e4:	31 05       	cpc	r19, r1
    38e6:	41 05       	cpc	r20, r1
    38e8:	51 05       	cpc	r21, r1
    38ea:	08 f0       	brcs	.+2      	; 0x38ee <_nrk_time_to_ticks+0x3e>
    38ec:	62 c0       	rjmp	.+196    	; 0x39b2 <_nrk_time_to_ticks+0x102>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    38ee:	5b 01       	movw	r10, r22
    38f0:	6c 01       	movw	r12, r24
    38f2:	ee 24       	eor	r14, r14
    38f4:	ff 24       	eor	r15, r15
    38f6:	87 01       	movw	r16, r14
    38f8:	60 e0       	ldi	r22, 0x00	; 0
    38fa:	38 c0       	rjmp	.+112    	; 0x396c <_nrk_time_to_ticks+0xbc>
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    38fc:	8a 2c       	mov	r8, r10
    38fe:	ab 2d       	mov	r26, r11
    3900:	a6 53       	subi	r26, 0x36	; 54
    3902:	f1 e0       	ldi	r31, 0x01	; 1
    3904:	ab 15       	cp	r26, r11
    3906:	08 f0       	brcs	.+2      	; 0x390a <_nrk_time_to_ticks+0x5a>
    3908:	f0 e0       	ldi	r31, 0x00	; 0
    390a:	8c 2d       	mov	r24, r12
    390c:	86 56       	subi	r24, 0x66	; 102
    390e:	91 e0       	ldi	r25, 0x01	; 1
    3910:	8c 15       	cp	r24, r12
    3912:	08 f0       	brcs	.+2      	; 0x3916 <_nrk_time_to_ticks+0x66>
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	f8 0f       	add	r31, r24
    3918:	71 e0       	ldi	r23, 0x01	; 1
    391a:	f8 17       	cp	r31, r24
    391c:	08 f0       	brcs	.+2      	; 0x3920 <_nrk_time_to_ticks+0x70>
    391e:	70 e0       	ldi	r23, 0x00	; 0
    3920:	97 2b       	or	r25, r23
    3922:	7d 2d       	mov	r23, r13
    3924:	75 5c       	subi	r23, 0xC5	; 197
    3926:	e1 e0       	ldi	r30, 0x01	; 1
    3928:	7d 15       	cp	r23, r13
    392a:	08 f0       	brcs	.+2      	; 0x392e <_nrk_time_to_ticks+0x7e>
    392c:	e0 e0       	ldi	r30, 0x00	; 0
    392e:	97 0f       	add	r25, r23
    3930:	81 e0       	ldi	r24, 0x01	; 1
    3932:	97 17       	cp	r25, r23
    3934:	08 f0       	brcs	.+2      	; 0x3938 <_nrk_time_to_ticks+0x88>
    3936:	80 e0       	ldi	r24, 0x00	; 0
    3938:	8e 2b       	or	r24, r30
    393a:	8e 0d       	add	r24, r14
    393c:	e1 e0       	ldi	r30, 0x01	; 1
    393e:	8e 15       	cp	r24, r14
    3940:	08 f0       	brcs	.+2      	; 0x3944 <_nrk_time_to_ticks+0x94>
    3942:	e0 e0       	ldi	r30, 0x00	; 0
    3944:	ef 0d       	add	r30, r15
    3946:	71 e0       	ldi	r23, 0x01	; 1
    3948:	ef 15       	cp	r30, r15
    394a:	08 f0       	brcs	.+2      	; 0x394e <_nrk_time_to_ticks+0x9e>
    394c:	70 e0       	ldi	r23, 0x00	; 0
    394e:	70 0f       	add	r23, r16
    3950:	b1 e0       	ldi	r27, 0x01	; 1
    3952:	70 17       	cp	r23, r16
    3954:	08 f0       	brcs	.+2      	; 0x3958 <_nrk_time_to_ticks+0xa8>
    3956:	b0 e0       	ldi	r27, 0x00	; 0
    3958:	b1 0f       	add	r27, r17
    395a:	a8 2c       	mov	r10, r8
    395c:	ba 2e       	mov	r11, r26
    395e:	cf 2e       	mov	r12, r31
    3960:	d9 2e       	mov	r13, r25
    3962:	e8 2e       	mov	r14, r24
    3964:	fe 2e       	mov	r15, r30
    3966:	07 2f       	mov	r16, r23
    3968:	1b 2f       	mov	r17, r27
    396a:	6f 5f       	subi	r22, 0xFF	; 255
    396c:	86 2f       	mov	r24, r22
    396e:	90 e0       	ldi	r25, 0x00	; 0
    3970:	a0 e0       	ldi	r26, 0x00	; 0
    3972:	b0 e0       	ldi	r27, 0x00	; 0
    3974:	82 17       	cp	r24, r18
    3976:	93 07       	cpc	r25, r19
    3978:	a4 07       	cpc	r26, r20
    397a:	b5 07       	cpc	r27, r21
    397c:	08 f4       	brcc	.+2      	; 0x3980 <_nrk_time_to_ticks+0xd0>
    397e:	be cf       	rjmp	.-132    	; 0x38fc <_nrk_time_to_ticks+0x4c>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    3980:	95 01       	movw	r18, r10
    3982:	a6 01       	movw	r20, r12
    3984:	b7 01       	movw	r22, r14
    3986:	c8 01       	movw	r24, r16
    3988:	a3 eb       	ldi	r26, 0xB3	; 179
    398a:	aa 2e       	mov	r10, r26
    398c:	f6 ee       	ldi	r31, 0xE6	; 230
    398e:	bf 2e       	mov	r11, r31
    3990:	ee e0       	ldi	r30, 0x0E	; 14
    3992:	ce 2e       	mov	r12, r30
    3994:	dd 24       	eor	r13, r13
    3996:	ee 24       	eor	r14, r14
    3998:	ff 24       	eor	r15, r15
    399a:	00 e0       	ldi	r16, 0x00	; 0
    399c:	10 e0       	ldi	r17, 0x00	; 0
    399e:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <__udivdi3>
    39a2:	09 c0       	rjmp	.+18     	; 0x39b6 <_nrk_time_to_ticks+0x106>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    39a4:	23 eb       	ldi	r18, 0xB3	; 179
    39a6:	36 ee       	ldi	r19, 0xE6	; 230
    39a8:	4e e0       	ldi	r20, 0x0E	; 14
    39aa:	50 e0       	ldi	r21, 0x00	; 0
    39ac:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__udivmodsi4>
    39b0:	02 c0       	rjmp	.+4      	; 0x39b6 <_nrk_time_to_ticks+0x106>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    39b2:	20 e0       	ldi	r18, 0x00	; 0
    39b4:	30 e0       	ldi	r19, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    39b6:	c9 01       	movw	r24, r18
    39b8:	1f 91       	pop	r17
    39ba:	0f 91       	pop	r16
    39bc:	ff 90       	pop	r15
    39be:	ef 90       	pop	r14
    39c0:	df 90       	pop	r13
    39c2:	cf 90       	pop	r12
    39c4:	bf 90       	pop	r11
    39c6:	af 90       	pop	r10
    39c8:	9f 90       	pop	r9
    39ca:	8f 90       	pop	r8
    39cc:	08 95       	ret

000039ce <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    39ce:	ef 92       	push	r14
    39d0:	ff 92       	push	r15
    39d2:	0f 93       	push	r16
    39d4:	1f 93       	push	r17
    39d6:	df 93       	push	r29
    39d8:	cf 93       	push	r28
    39da:	cd b7       	in	r28, 0x3d	; 61
    39dc:	de b7       	in	r29, 0x3e	; 62
    39de:	28 97       	sbiw	r28, 0x08	; 8
    39e0:	0f b6       	in	r0, 0x3f	; 63
    39e2:	f8 94       	cli
    39e4:	de bf       	out	0x3e, r29	; 62
    39e6:	0f be       	out	0x3f, r0	; 63
    39e8:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    39ea:	7b 01       	movw	r14, r22
    39ec:	8c 01       	movw	r16, r24
    39ee:	ba e0       	ldi	r27, 0x0A	; 10
    39f0:	16 95       	lsr	r17
    39f2:	07 95       	ror	r16
    39f4:	f7 94       	ror	r15
    39f6:	e7 94       	ror	r14
    39f8:	ba 95       	dec	r27
    39fa:	d1 f7       	brne	.-12     	; 0x39f0 <_nrk_ticks_to_time+0x22>
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    39fc:	e9 82       	std	Y+1, r14	; 0x01
    39fe:	fa 82       	std	Y+2, r15	; 0x02
    3a00:	0b 83       	std	Y+3, r16	; 0x03
    3a02:	1c 83       	std	Y+4, r17	; 0x04
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    3a04:	73 70       	andi	r23, 0x03	; 3
    3a06:	80 70       	andi	r24, 0x00	; 0
    3a08:	90 70       	andi	r25, 0x00	; 0
    3a0a:	23 eb       	ldi	r18, 0xB3	; 179
    3a0c:	36 ee       	ldi	r19, 0xE6	; 230
    3a0e:	4e e0       	ldi	r20, 0x0E	; 14
    3a10:	50 e0       	ldi	r21, 0x00	; 0
    3a12:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <__mulsi3>
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    3a16:	6d 83       	std	Y+5, r22	; 0x05
    3a18:	7e 83       	std	Y+6, r23	; 0x06
    3a1a:	8f 83       	std	Y+7, r24	; 0x07
    3a1c:	98 87       	std	Y+8, r25	; 0x08
    3a1e:	2e 2d       	mov	r18, r14
    3a20:	3a 81       	ldd	r19, Y+2	; 0x02
    3a22:	4b 81       	ldd	r20, Y+3	; 0x03
    3a24:	5c 81       	ldd	r21, Y+4	; 0x04

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
}
    3a26:	28 96       	adiw	r28, 0x08	; 8
    3a28:	0f b6       	in	r0, 0x3f	; 63
    3a2a:	f8 94       	cli
    3a2c:	de bf       	out	0x3e, r29	; 62
    3a2e:	0f be       	out	0x3f, r0	; 63
    3a30:	cd bf       	out	0x3d, r28	; 61
    3a32:	cf 91       	pop	r28
    3a34:	df 91       	pop	r29
    3a36:	1f 91       	pop	r17
    3a38:	0f 91       	pop	r16
    3a3a:	ff 90       	pop	r15
    3a3c:	ef 90       	pop	r14
    3a3e:	08 95       	ret

00003a40 <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    3a40:	8f 92       	push	r8
    3a42:	9f 92       	push	r9
    3a44:	af 92       	push	r10
    3a46:	bf 92       	push	r11
    3a48:	cf 92       	push	r12
    3a4a:	df 92       	push	r13
    3a4c:	ef 92       	push	r14
    3a4e:	ff 92       	push	r15
    3a50:	0f 93       	push	r16
    3a52:	1f 93       	push	r17
    3a54:	fc 01       	movw	r30, r24
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    3a56:	20 81       	ld	r18, Z
    3a58:	31 81       	ldd	r19, Z+1	; 0x01
    3a5a:	42 81       	ldd	r20, Z+2	; 0x02
    3a5c:	53 81       	ldd	r21, Z+3	; 0x03
    3a5e:	64 81       	ldd	r22, Z+4	; 0x04
    3a60:	75 81       	ldd	r23, Z+5	; 0x05
    3a62:	86 81       	ldd	r24, Z+6	; 0x06
    3a64:	97 81       	ldd	r25, Z+7	; 0x07
    3a66:	21 15       	cp	r18, r1
    3a68:	31 05       	cpc	r19, r1
    3a6a:	41 05       	cpc	r20, r1
    3a6c:	51 05       	cpc	r21, r1
    3a6e:	09 f4       	brne	.+2      	; 0x3a72 <_nrk_time_to_ticks_long+0x32>
    3a70:	5b c0       	rjmp	.+182    	; 0x3b28 <_nrk_time_to_ticks_long+0xe8>
{
   tmp=t->nano_secs;
    3a72:	5b 01       	movw	r10, r22
    3a74:	6c 01       	movw	r12, r24
    3a76:	ee 24       	eor	r14, r14
    3a78:	ff 24       	eor	r15, r15
    3a7a:	87 01       	movw	r16, r14
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    3a7c:	60 e0       	ldi	r22, 0x00	; 0
    3a7e:	38 c0       	rjmp	.+112    	; 0x3af0 <_nrk_time_to_ticks_long+0xb0>
    3a80:	8a 2c       	mov	r8, r10
    3a82:	ab 2d       	mov	r26, r11
    3a84:	a6 53       	subi	r26, 0x36	; 54
    3a86:	f1 e0       	ldi	r31, 0x01	; 1
    3a88:	ab 15       	cp	r26, r11
    3a8a:	08 f0       	brcs	.+2      	; 0x3a8e <_nrk_time_to_ticks_long+0x4e>
    3a8c:	f0 e0       	ldi	r31, 0x00	; 0
    3a8e:	8c 2d       	mov	r24, r12
    3a90:	86 56       	subi	r24, 0x66	; 102
    3a92:	91 e0       	ldi	r25, 0x01	; 1
    3a94:	8c 15       	cp	r24, r12
    3a96:	08 f0       	brcs	.+2      	; 0x3a9a <_nrk_time_to_ticks_long+0x5a>
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	f8 0f       	add	r31, r24
    3a9c:	71 e0       	ldi	r23, 0x01	; 1
    3a9e:	f8 17       	cp	r31, r24
    3aa0:	08 f0       	brcs	.+2      	; 0x3aa4 <_nrk_time_to_ticks_long+0x64>
    3aa2:	70 e0       	ldi	r23, 0x00	; 0
    3aa4:	97 2b       	or	r25, r23
    3aa6:	7d 2d       	mov	r23, r13
    3aa8:	75 5c       	subi	r23, 0xC5	; 197
    3aaa:	e1 e0       	ldi	r30, 0x01	; 1
    3aac:	7d 15       	cp	r23, r13
    3aae:	08 f0       	brcs	.+2      	; 0x3ab2 <_nrk_time_to_ticks_long+0x72>
    3ab0:	e0 e0       	ldi	r30, 0x00	; 0
    3ab2:	97 0f       	add	r25, r23
    3ab4:	81 e0       	ldi	r24, 0x01	; 1
    3ab6:	97 17       	cp	r25, r23
    3ab8:	08 f0       	brcs	.+2      	; 0x3abc <_nrk_time_to_ticks_long+0x7c>
    3aba:	80 e0       	ldi	r24, 0x00	; 0
    3abc:	8e 2b       	or	r24, r30
    3abe:	8e 0d       	add	r24, r14
    3ac0:	e1 e0       	ldi	r30, 0x01	; 1
    3ac2:	8e 15       	cp	r24, r14
    3ac4:	08 f0       	brcs	.+2      	; 0x3ac8 <_nrk_time_to_ticks_long+0x88>
    3ac6:	e0 e0       	ldi	r30, 0x00	; 0
    3ac8:	ef 0d       	add	r30, r15
    3aca:	71 e0       	ldi	r23, 0x01	; 1
    3acc:	ef 15       	cp	r30, r15
    3ace:	08 f0       	brcs	.+2      	; 0x3ad2 <_nrk_time_to_ticks_long+0x92>
    3ad0:	70 e0       	ldi	r23, 0x00	; 0
    3ad2:	70 0f       	add	r23, r16
    3ad4:	b1 e0       	ldi	r27, 0x01	; 1
    3ad6:	70 17       	cp	r23, r16
    3ad8:	08 f0       	brcs	.+2      	; 0x3adc <_nrk_time_to_ticks_long+0x9c>
    3ada:	b0 e0       	ldi	r27, 0x00	; 0
    3adc:	b1 0f       	add	r27, r17
    3ade:	a8 2c       	mov	r10, r8
    3ae0:	ba 2e       	mov	r11, r26
    3ae2:	cf 2e       	mov	r12, r31
    3ae4:	d9 2e       	mov	r13, r25
    3ae6:	e8 2e       	mov	r14, r24
    3ae8:	fe 2e       	mov	r15, r30
    3aea:	07 2f       	mov	r16, r23
    3aec:	1b 2f       	mov	r17, r27
    3aee:	6f 5f       	subi	r22, 0xFF	; 255
    3af0:	86 2f       	mov	r24, r22
    3af2:	90 e0       	ldi	r25, 0x00	; 0
    3af4:	a0 e0       	ldi	r26, 0x00	; 0
    3af6:	b0 e0       	ldi	r27, 0x00	; 0
    3af8:	82 17       	cp	r24, r18
    3afa:	93 07       	cpc	r25, r19
    3afc:	a4 07       	cpc	r26, r20
    3afe:	b5 07       	cpc	r27, r21
    3b00:	08 f4       	brcc	.+2      	; 0x3b04 <_nrk_time_to_ticks_long+0xc4>
    3b02:	be cf       	rjmp	.-132    	; 0x3a80 <_nrk_time_to_ticks_long+0x40>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    3b04:	95 01       	movw	r18, r10
    3b06:	a6 01       	movw	r20, r12
    3b08:	b7 01       	movw	r22, r14
    3b0a:	c8 01       	movw	r24, r16
    3b0c:	e3 eb       	ldi	r30, 0xB3	; 179
    3b0e:	ae 2e       	mov	r10, r30
    3b10:	06 ee       	ldi	r16, 0xE6	; 230
    3b12:	b0 2e       	mov	r11, r16
    3b14:	1e e0       	ldi	r17, 0x0E	; 14
    3b16:	c1 2e       	mov	r12, r17
    3b18:	dd 24       	eor	r13, r13
    3b1a:	ee 24       	eor	r14, r14
    3b1c:	ff 24       	eor	r15, r15
    3b1e:	00 e0       	ldi	r16, 0x00	; 0
    3b20:	10 e0       	ldi	r17, 0x00	; 0
    3b22:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <__udivdi3>
    3b26:	06 c0       	rjmp	.+12     	; 0x3b34 <_nrk_time_to_ticks_long+0xf4>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    3b28:	23 eb       	ldi	r18, 0xB3	; 179
    3b2a:	36 ee       	ldi	r19, 0xE6	; 230
    3b2c:	4e e0       	ldi	r20, 0x0E	; 14
    3b2e:	50 e0       	ldi	r21, 0x00	; 0
    3b30:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__udivmodsi4>
    3b34:	b9 01       	movw	r22, r18
    3b36:	ca 01       	movw	r24, r20
}
return ticks;
}
    3b38:	1f 91       	pop	r17
    3b3a:	0f 91       	pop	r16
    3b3c:	ff 90       	pop	r15
    3b3e:	ef 90       	pop	r14
    3b40:	df 90       	pop	r13
    3b42:	cf 90       	pop	r12
    3b44:	bf 90       	pop	r11
    3b46:	af 90       	pop	r10
    3b48:	9f 90       	pop	r9
    3b4a:	8f 90       	pop	r8
    3b4c:	08 95       	ret

00003b4e <nrk_idle_task>:
#include <nrk_platform_time.h>
#include <nrk_scheduler.h>
#include <stdio.h>

void nrk_idle_task()
{
    3b4e:	1f 93       	push	r17

  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    3b50:	11 e0       	ldi	r17, 0x01	; 1
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{

  nrk_stack_check(); 
    3b52:	0e 94 34 14 	call	0x2868	; 0x2868 <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    3b56:	0e 94 7d 21 	call	0x42fa	; 0x42fa <_nrk_get_next_wakeup>
    3b5a:	84 30       	cpi	r24, 0x04	; 4
    3b5c:	10 f4       	brcc	.+4      	; 0x3b62 <nrk_idle_task+0x14>
    {
	    _nrk_cpu_state=CPU_IDLE;
    3b5e:	10 93 32 09 	sts	0x0932, r17
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
	    nrk_sleep();
	#else
	    nrk_idle();
    3b62:	0e 94 a0 24 	call	0x4940	; 0x4940 <nrk_idle>
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    3b66:	80 91 d9 06 	lds	r24, 0x06D9
    3b6a:	85 35       	cpi	r24, 0x55	; 85
    3b6c:	19 f0       	breq	.+6      	; 0x3b74 <nrk_idle_task+0x26>
    3b6e:	88 e0       	ldi	r24, 0x08	; 8
    3b70:	0e 94 3d 13 	call	0x267a	; 0x267a <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    3b74:	80 91 fe 40 	lds	r24, 0x40FE
    3b78:	85 35       	cpi	r24, 0x55	; 85
    3b7a:	59 f3       	breq	.-42     	; 0x3b52 <nrk_idle_task+0x4>
    3b7c:	88 e0       	ldi	r24, 0x08	; 8
    3b7e:	0e 94 3d 13 	call	0x267a	; 0x267a <nrk_error_add>
    3b82:	e7 cf       	rjmp	.-50     	; 0x3b52 <nrk_idle_task+0x4>

00003b84 <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    3b84:	2f 92       	push	r2
    3b86:	3f 92       	push	r3
    3b88:	4f 92       	push	r4
    3b8a:	5f 92       	push	r5
    3b8c:	6f 92       	push	r6
    3b8e:	7f 92       	push	r7
    3b90:	8f 92       	push	r8
    3b92:	9f 92       	push	r9
    3b94:	af 92       	push	r10
    3b96:	bf 92       	push	r11
    3b98:	cf 92       	push	r12
    3b9a:	df 92       	push	r13
    3b9c:	ef 92       	push	r14
    3b9e:	ff 92       	push	r15
    3ba0:	0f 93       	push	r16
    3ba2:	1f 93       	push	r17
    3ba4:	df 93       	push	r29
    3ba6:	cf 93       	push	r28
    3ba8:	00 d0       	rcall	.+0      	; 0x3baa <_nrk_scheduler+0x26>
    3baa:	00 d0       	rcall	.+0      	; 0x3bac <_nrk_scheduler+0x28>
    3bac:	cd b7       	in	r28, 0x3d	; 61
    3bae:	de b7       	in	r29, 0x3e	; 62
    int8_t task_ID;
    uint16_t next_wake;
    uint16_t start_time_stamp;

    _nrk_precision_os_timer_reset();
    3bb0:	0e 94 99 20 	call	0x4132	; 0x4132 <_nrk_precision_os_timer_reset>
    nrk_int_disable();   // this should be removed...  Not needed
    3bb4:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <nrk_int_disable>


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_high_speed_timer_reset();
    3bb8:	0e 94 ca 20 	call	0x4194	; 0x4194 <_nrk_high_speed_timer_reset>
    start_time_stamp=_nrk_high_speed_timer_get();
    3bbc:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <_nrk_high_speed_timer_get>
    3bc0:	9a 83       	std	Y+2, r25	; 0x02
    3bc2:	89 83       	std	Y+1, r24	; 0x01
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    3bc4:	8a ef       	ldi	r24, 0xFA	; 250
    3bc6:	0e 94 81 21 	call	0x4302	; 0x4302 <_nrk_set_next_wakeup>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    3bca:	60 91 d7 06 	lds	r22, 0x06D7
    3bce:	70 e0       	ldi	r23, 0x00	; 0
    3bd0:	80 e0       	ldi	r24, 0x00	; 0
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	23 eb       	ldi	r18, 0xB3	; 179
    3bd6:	36 ee       	ldi	r19, 0xE6	; 230
    3bd8:	4e e0       	ldi	r20, 0x0E	; 14
    3bda:	50 e0       	ldi	r21, 0x00	; 0
    3bdc:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <__mulsi3>
    3be0:	7b 01       	movw	r14, r22
    3be2:	8c 01       	movw	r16, r24
    3be4:	80 91 39 09 	lds	r24, 0x0939
    3be8:	90 91 3a 09 	lds	r25, 0x093A
    3bec:	a0 91 3b 09 	lds	r26, 0x093B
    3bf0:	b0 91 3c 09 	lds	r27, 0x093C
    3bf4:	e8 0e       	add	r14, r24
    3bf6:	f9 1e       	adc	r15, r25
    3bf8:	0a 1f       	adc	r16, r26
    3bfa:	1b 1f       	adc	r17, r27
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    3bfc:	c8 01       	movw	r24, r16
    3bfe:	b7 01       	movw	r22, r14
    3c00:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__udivmodsi4>
    3c04:	e6 1a       	sub	r14, r22
    3c06:	f7 0a       	sbc	r15, r23
    3c08:	08 0b       	sbc	r16, r24
    3c0a:	19 0b       	sbc	r17, r25
    3c0c:	80 91 35 09 	lds	r24, 0x0935
    3c10:	90 91 36 09 	lds	r25, 0x0936
    3c14:	a0 91 37 09 	lds	r26, 0x0937
    3c18:	b0 91 38 09 	lds	r27, 0x0938

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    3c1c:	63 eb       	ldi	r22, 0xB3	; 179
    3c1e:	a6 2e       	mov	r10, r22
    3c20:	66 ee       	ldi	r22, 0xE6	; 230
    3c22:	b6 2e       	mov	r11, r22
    3c24:	6e e0       	ldi	r22, 0x0E	; 14
    3c26:	c6 2e       	mov	r12, r22
    3c28:	d1 2c       	mov	r13, r1
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    3c2a:	14 c0       	rjmp	.+40     	; 0x3c54 <_nrk_scheduler+0xd0>
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    3c2c:	80 e0       	ldi	r24, 0x00	; 0
    3c2e:	96 e3       	ldi	r25, 0x36	; 54
    3c30:	a5 e6       	ldi	r26, 0x65	; 101
    3c32:	b4 ec       	ldi	r27, 0xC4	; 196
    3c34:	e8 0e       	add	r14, r24
    3c36:	f9 1e       	adc	r15, r25
    3c38:	0a 1f       	adc	r16, r26
    3c3a:	1b 1f       	adc	r17, r27
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    3c3c:	c8 01       	movw	r24, r16
    3c3e:	b7 01       	movw	r22, r14
    3c40:	a6 01       	movw	r20, r12
    3c42:	95 01       	movw	r18, r10
    3c44:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__udivmodsi4>
    3c48:	e6 1a       	sub	r14, r22
    3c4a:	f7 0a       	sbc	r15, r23
    3c4c:	08 0b       	sbc	r16, r24
    3c4e:	19 0b       	sbc	r17, r25
    3c50:	d4 01       	movw	r26, r8
    3c52:	c3 01       	movw	r24, r6
    3c54:	3c 01       	movw	r6, r24
    3c56:	4d 01       	movw	r8, r26
    3c58:	08 94       	sec
    3c5a:	61 1c       	adc	r6, r1
    3c5c:	71 1c       	adc	r7, r1
    3c5e:	81 1c       	adc	r8, r1
    3c60:	91 1c       	adc	r9, r1
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    3c62:	e0 e0       	ldi	r30, 0x00	; 0
    3c64:	ee 16       	cp	r14, r30
    3c66:	ea ec       	ldi	r30, 0xCA	; 202
    3c68:	fe 06       	cpc	r15, r30
    3c6a:	ea e9       	ldi	r30, 0x9A	; 154
    3c6c:	0e 07       	cpc	r16, r30
    3c6e:	eb e3       	ldi	r30, 0x3B	; 59
    3c70:	1e 07       	cpc	r17, r30
    3c72:	e0 f6       	brcc	.-72     	; 0x3c2c <_nrk_scheduler+0xa8>
    3c74:	80 93 35 09 	sts	0x0935, r24
    3c78:	90 93 36 09 	sts	0x0936, r25
    3c7c:	a0 93 37 09 	sts	0x0937, r26
    3c80:	b0 93 38 09 	sts	0x0938, r27
    3c84:	e0 92 39 09 	sts	0x0939, r14
    3c88:	f0 92 3a 09 	sts	0x093A, r15
    3c8c:	00 93 3b 09 	sts	0x093B, r16
    3c90:	10 93 3c 09 	sts	0x093C, r17
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    3c94:	e0 91 3e 09 	lds	r30, 0x093E
    3c98:	f0 91 3f 09 	lds	r31, 0x093F
    3c9c:	85 81       	ldd	r24, Z+5	; 0x05
    3c9e:	88 23       	and	r24, r24
    3ca0:	39 f1       	breq	.+78     	; 0x3cf0 <_nrk_scheduler+0x16c>
    3ca2:	81 85       	ldd	r24, Z+9	; 0x09
    3ca4:	84 30       	cpi	r24, 0x04	; 4
    3ca6:	21 f1       	breq	.+72     	; 0x3cf0 <_nrk_scheduler+0x16c>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    3ca8:	87 81       	ldd	r24, Z+7	; 0x07
    3caa:	82 30       	cpi	r24, 0x02	; 2
    3cac:	29 f0       	breq	.+10     	; 0x3cb8 <_nrk_scheduler+0x134>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    3cae:	88 23       	and	r24, r24
    3cb0:	41 f0       	breq	.+16     	; 0x3cc2 <_nrk_scheduler+0x13e>
    3cb2:	86 81       	ldd	r24, Z+6	; 0x06
    3cb4:	88 23       	and	r24, r24
    3cb6:	11 f4       	brne	.+4      	; 0x3cbc <_nrk_scheduler+0x138>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    3cb8:	85 e0       	ldi	r24, 0x05	; 5
    3cba:	01 c0       	rjmp	.+2      	; 0x3cbe <_nrk_scheduler+0x13a>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    3cbc:	83 e0       	ldi	r24, 0x03	; 3
    3cbe:	81 87       	std	Z+9, r24	; 0x09
    3cc0:	14 c0       	rjmp	.+40     	; 0x3cea <_nrk_scheduler+0x166>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    3cc2:	83 e0       	ldi	r24, 0x03	; 3
    3cc4:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    3cc6:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    3cc8:	16 82       	std	Z+6, r1	; 0x06
	    // agr added to fix initial startup scheduling problem
            if(nrk_cur_task_TCB->next_wakeup==0) {
    3cca:	85 89       	ldd	r24, Z+21	; 0x15
    3ccc:	96 89       	ldd	r25, Z+22	; 0x16
    3cce:	a7 89       	ldd	r26, Z+23	; 0x17
    3cd0:	b0 8d       	ldd	r27, Z+24	; 0x18
    3cd2:	00 97       	sbiw	r24, 0x00	; 0
    3cd4:	a1 05       	cpc	r26, r1
    3cd6:	b1 05       	cpc	r27, r1
    3cd8:	41 f4       	brne	.+16     	; 0x3cea <_nrk_scheduler+0x166>
		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
    3cda:	81 8d       	ldd	r24, Z+25	; 0x19
    3cdc:	92 8d       	ldd	r25, Z+26	; 0x1a
    3cde:	a3 8d       	ldd	r26, Z+27	; 0x1b
    3ce0:	b4 8d       	ldd	r27, Z+28	; 0x1c
    3ce2:	85 8b       	std	Z+21, r24	; 0x15
    3ce4:	96 8b       	std	Z+22, r25	; 0x16
    3ce6:	a7 8b       	std	Z+23, r26	; 0x17
    3ce8:	b0 8f       	std	Z+24, r27	; 0x18
		}
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    3cea:	80 85       	ldd	r24, Z+8	; 0x08
    3cec:	0e 94 2f 18 	call	0x305e	; 0x305e <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    3cf0:	e0 91 3e 09 	lds	r30, 0x093E
    3cf4:	f0 91 3f 09 	lds	r31, 0x093F
    3cf8:	85 a1       	ldd	r24, Z+37	; 0x25
    3cfa:	96 a1       	ldd	r25, Z+38	; 0x26
    3cfc:	a7 a1       	ldd	r26, Z+39	; 0x27
    3cfe:	b0 a5       	ldd	r27, Z+40	; 0x28
    3d00:	00 97       	sbiw	r24, 0x00	; 0
    3d02:	a1 05       	cpc	r26, r1
    3d04:	b1 05       	cpc	r27, r1
    3d06:	09 f4       	brne	.+2      	; 0x3d0a <_nrk_scheduler+0x186>
    3d08:	44 c0       	rjmp	.+136    	; 0x3d92 <_nrk_scheduler+0x20e>
    3d0a:	60 85       	ldd	r22, Z+8	; 0x08
    3d0c:	66 23       	and	r22, r22
    3d0e:	09 f4       	brne	.+2      	; 0x3d12 <_nrk_scheduler+0x18e>
    3d10:	40 c0       	rjmp	.+128    	; 0x3d92 <_nrk_scheduler+0x20e>
    3d12:	81 85       	ldd	r24, Z+9	; 0x09
    3d14:	84 30       	cpi	r24, 0x04	; 4
    3d16:	e9 f1       	breq	.+122    	; 0x3d92 <_nrk_scheduler+0x20e>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    3d18:	25 8d       	ldd	r18, Z+29	; 0x1d
    3d1a:	36 8d       	ldd	r19, Z+30	; 0x1e
    3d1c:	47 8d       	ldd	r20, Z+31	; 0x1f
    3d1e:	50 a1       	ldd	r21, Z+32	; 0x20
    3d20:	80 91 d7 06 	lds	r24, 0x06D7
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	a0 e0       	ldi	r26, 0x00	; 0
    3d28:	b0 e0       	ldi	r27, 0x00	; 0
    3d2a:	28 17       	cp	r18, r24
    3d2c:	39 07       	cpc	r19, r25
    3d2e:	4a 07       	cpc	r20, r26
    3d30:	5b 07       	cpc	r21, r27
    3d32:	60 f4       	brcc	.+24     	; 0x3d4c <_nrk_scheduler+0x1c8>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    3d34:	82 e0       	ldi	r24, 0x02	; 2
    3d36:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    3d3a:	e0 91 3e 09 	lds	r30, 0x093E
    3d3e:	f0 91 3f 09 	lds	r31, 0x093F
    3d42:	15 8e       	std	Z+29, r1	; 0x1d
    3d44:	16 8e       	std	Z+30, r1	; 0x1e
    3d46:	17 8e       	std	Z+31, r1	; 0x1f
    3d48:	10 a2       	std	Z+32, r1	; 0x20
    3d4a:	08 c0       	rjmp	.+16     	; 0x3d5c <_nrk_scheduler+0x1d8>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    3d4c:	28 1b       	sub	r18, r24
    3d4e:	39 0b       	sbc	r19, r25
    3d50:	4a 0b       	sbc	r20, r26
    3d52:	5b 0b       	sbc	r21, r27
    3d54:	25 8f       	std	Z+29, r18	; 0x1d
    3d56:	36 8f       	std	Z+30, r19	; 0x1e
    3d58:	47 8f       	std	Z+31, r20	; 0x1f
    3d5a:	50 a3       	std	Z+32, r21	; 0x20

        task_ID= nrk_cur_task_TCB->task_ID;
    3d5c:	e0 91 3e 09 	lds	r30, 0x093E
    3d60:	f0 91 3f 09 	lds	r31, 0x093F
    3d64:	00 85       	ldd	r16, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    3d66:	25 8d       	ldd	r18, Z+29	; 0x1d
    3d68:	36 8d       	ldd	r19, Z+30	; 0x1e
    3d6a:	47 8d       	ldd	r20, Z+31	; 0x1f
    3d6c:	50 a1       	ldd	r21, Z+32	; 0x20
    3d6e:	21 15       	cp	r18, r1
    3d70:	31 05       	cpc	r19, r1
    3d72:	41 05       	cpc	r20, r1
    3d74:	51 05       	cpc	r21, r1
    3d76:	69 f4       	brne	.+26     	; 0x3d92 <_nrk_scheduler+0x20e>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    3d78:	83 e0       	ldi	r24, 0x03	; 3
    3d7a:	60 2f       	mov	r22, r16
    3d7c:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    3d80:	e0 91 3e 09 	lds	r30, 0x093E
    3d84:	f0 91 3f 09 	lds	r31, 0x093F
    3d88:	83 e0       	ldi	r24, 0x03	; 3
    3d8a:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    3d8c:	80 2f       	mov	r24, r16
    3d8e:	0e 94 2f 18 	call	0x305e	; 0x305e <nrk_rem_from_readyQ>
    3d92:	06 e6       	ldi	r16, 0x66	; 102
    3d94:	18 e0       	ldi	r17, 0x08	; 8
    3d96:	c8 01       	movw	r24, r16
    3d98:	40 97       	sbiw	r24, 0x10	; 16

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    3d9a:	50 e6       	ldi	r21, 0x60	; 96
    3d9c:	e5 2e       	mov	r14, r21
    3d9e:	5a ee       	ldi	r21, 0xEA	; 234
    3da0:	f5 2e       	mov	r15, r21
    3da2:	99 24       	eor	r9, r9
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
                    nrk_task_TCB[task_ID].num_periods=1;
    3da4:	41 e0       	ldi	r20, 0x01	; 1
    3da6:	24 2e       	mov	r2, r20
    3da8:	31 2c       	mov	r3, r1
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    3daa:	3a ef       	ldi	r19, 0xFA	; 250
    3dac:	43 2e       	mov	r4, r19
    3dae:	51 2c       	mov	r5, r1
    3db0:	61 2c       	mov	r6, r1
    3db2:	71 2c       	mov	r7, r1
                nrk_task_TCB[task_ID].nw_flag=0;
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    nrk_task_TCB[task_ID].task_state = READY;
    3db4:	22 e0       	ldi	r18, 0x02	; 2
    3db6:	82 2e       	mov	r8, r18
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    3db8:	67 01       	movw	r12, r14
    3dba:	58 01       	movw	r10, r16
    3dbc:	9c 83       	std	Y+4, r25	; 0x04
    3dbe:	8b 83       	std	Y+3, r24	; 0x03

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    3dc0:	ab 81       	ldd	r26, Y+3	; 0x03
    3dc2:	bc 81       	ldd	r27, Y+4	; 0x04
    3dc4:	13 96       	adiw	r26, 0x03	; 3
    3dc6:	8c 91       	ld	r24, X
    3dc8:	13 97       	sbiw	r26, 0x03	; 3
    3dca:	8f 3f       	cpi	r24, 0xFF	; 255
    3dcc:	09 f4       	brne	.+2      	; 0x3dd0 <_nrk_scheduler+0x24c>
    3dce:	15 c1       	rjmp	.+554    	; 0x3ffa <_nrk_scheduler+0x476>
        nrk_task_TCB[task_ID].suspend_flag=0;
    3dd0:	1c 92       	st	X, r1
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    3dd2:	88 23       	and	r24, r24
    3dd4:	09 f4       	brne	.+2      	; 0x3dd8 <_nrk_scheduler+0x254>
    3dd6:	6d c0       	rjmp	.+218    	; 0x3eb2 <_nrk_scheduler+0x32e>
    3dd8:	14 96       	adiw	r26, 0x04	; 4
    3dda:	8c 91       	ld	r24, X
    3ddc:	14 97       	sbiw	r26, 0x04	; 4
    3dde:	84 30       	cpi	r24, 0x04	; 4
    3de0:	09 f4       	brne	.+2      	; 0x3de4 <_nrk_scheduler+0x260>
    3de2:	67 c0       	rjmp	.+206    	; 0x3eb2 <_nrk_scheduler+0x32e>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    3de4:	f5 01       	movw	r30, r10
    3de6:	80 81       	ld	r24, Z
    3de8:	91 81       	ldd	r25, Z+1	; 0x01
    3dea:	a2 81       	ldd	r26, Z+2	; 0x02
    3dec:	b3 81       	ldd	r27, Z+3	; 0x03
    3dee:	e0 90 d7 06 	lds	r14, 0x06D7
    3df2:	ff 24       	eor	r15, r15
    3df4:	00 e0       	ldi	r16, 0x00	; 0
    3df6:	10 e0       	ldi	r17, 0x00	; 0
    3df8:	8e 15       	cp	r24, r14
    3dfa:	9f 05       	cpc	r25, r15
    3dfc:	a0 07       	cpc	r26, r16
    3dfe:	b1 07       	cpc	r27, r17
    3e00:	48 f0       	brcs	.+18     	; 0x3e14 <_nrk_scheduler+0x290>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    3e02:	8e 19       	sub	r24, r14
    3e04:	9f 09       	sbc	r25, r15
    3e06:	a0 0b       	sbc	r26, r16
    3e08:	b1 0b       	sbc	r27, r17
    3e0a:	80 83       	st	Z, r24
    3e0c:	91 83       	std	Z+1, r25	; 0x01
    3e0e:	a2 83       	std	Z+2, r26	; 0x02
    3e10:	b3 83       	std	Z+3, r27	; 0x03
    3e12:	06 c0       	rjmp	.+12     	; 0x3e20 <_nrk_scheduler+0x29c>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    3e14:	d5 01       	movw	r26, r10
    3e16:	1d 92       	st	X+, r1
    3e18:	1d 92       	st	X+, r1
    3e1a:	1d 92       	st	X+, r1
    3e1c:	1c 92       	st	X, r1
    3e1e:	13 97       	sbiw	r26, 0x03	; 3
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    3e20:	eb 81       	ldd	r30, Y+3	; 0x03
    3e22:	fc 81       	ldd	r31, Y+4	; 0x04
    3e24:	84 89       	ldd	r24, Z+20	; 0x14
    3e26:	95 89       	ldd	r25, Z+21	; 0x15
    3e28:	a6 89       	ldd	r26, Z+22	; 0x16
    3e2a:	b7 89       	ldd	r27, Z+23	; 0x17
    3e2c:	8e 15       	cp	r24, r14
    3e2e:	9f 05       	cpc	r25, r15
    3e30:	a0 07       	cpc	r26, r16
    3e32:	b1 07       	cpc	r27, r17
    3e34:	48 f0       	brcs	.+18     	; 0x3e48 <_nrk_scheduler+0x2c4>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    3e36:	8e 19       	sub	r24, r14
    3e38:	9f 09       	sbc	r25, r15
    3e3a:	a0 0b       	sbc	r26, r16
    3e3c:	b1 0b       	sbc	r27, r17
    3e3e:	84 8b       	std	Z+20, r24	; 0x14
    3e40:	95 8b       	std	Z+21, r25	; 0x15
    3e42:	a6 8b       	std	Z+22, r26	; 0x16
    3e44:	b7 8b       	std	Z+23, r27	; 0x17
    3e46:	23 c0       	rjmp	.+70     	; 0x3e8e <_nrk_scheduler+0x30a>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    3e48:	ab 81       	ldd	r26, Y+3	; 0x03
    3e4a:	bc 81       	ldd	r27, Y+4	; 0x04
    3e4c:	5c 96       	adiw	r26, 0x1c	; 28
    3e4e:	2d 91       	ld	r18, X+
    3e50:	3d 91       	ld	r19, X+
    3e52:	4d 91       	ld	r20, X+
    3e54:	5c 91       	ld	r21, X
    3e56:	5f 97       	sbiw	r26, 0x1f	; 31
    3e58:	e2 16       	cp	r14, r18
    3e5a:	f3 06       	cpc	r15, r19
    3e5c:	04 07       	cpc	r16, r20
    3e5e:	15 07       	cpc	r17, r21
    3e60:	50 f4       	brcc	.+20     	; 0x3e76 <_nrk_scheduler+0x2f2>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    3e62:	2e 19       	sub	r18, r14
    3e64:	3f 09       	sbc	r19, r15
    3e66:	40 0b       	sbc	r20, r16
    3e68:	51 0b       	sbc	r21, r17
    3e6a:	fd 01       	movw	r30, r26
    3e6c:	24 8b       	std	Z+20, r18	; 0x14
    3e6e:	35 8b       	std	Z+21, r19	; 0x15
    3e70:	46 8b       	std	Z+22, r20	; 0x16
    3e72:	57 8b       	std	Z+23, r21	; 0x17
    3e74:	0c c0       	rjmp	.+24     	; 0x3e8e <_nrk_scheduler+0x30a>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    3e76:	c8 01       	movw	r24, r16
    3e78:	b7 01       	movw	r22, r14
    3e7a:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__udivmodsi4>
    3e7e:	ab 81       	ldd	r26, Y+3	; 0x03
    3e80:	bc 81       	ldd	r27, Y+4	; 0x04
    3e82:	54 96       	adiw	r26, 0x14	; 20
    3e84:	6d 93       	st	X+, r22
    3e86:	7d 93       	st	X+, r23
    3e88:	8d 93       	st	X+, r24
    3e8a:	9c 93       	st	X, r25
    3e8c:	57 97       	sbiw	r26, 0x17	; 23
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    3e8e:	eb 81       	ldd	r30, Y+3	; 0x03
    3e90:	fc 81       	ldd	r31, Y+4	; 0x04
    3e92:	84 89       	ldd	r24, Z+20	; 0x14
    3e94:	95 89       	ldd	r25, Z+21	; 0x15
    3e96:	a6 89       	ldd	r26, Z+22	; 0x16
    3e98:	b7 89       	ldd	r27, Z+23	; 0x17
    3e9a:	00 97       	sbiw	r24, 0x00	; 0
    3e9c:	a1 05       	cpc	r26, r1
    3e9e:	b1 05       	cpc	r27, r1
    3ea0:	41 f4       	brne	.+16     	; 0x3eb2 <_nrk_scheduler+0x32e>
    3ea2:	84 8d       	ldd	r24, Z+28	; 0x1c
    3ea4:	95 8d       	ldd	r25, Z+29	; 0x1d
    3ea6:	a6 8d       	ldd	r26, Z+30	; 0x1e
    3ea8:	b7 8d       	ldd	r27, Z+31	; 0x1f
    3eaa:	84 8b       	std	Z+20, r24	; 0x14
    3eac:	95 8b       	std	Z+21, r25	; 0x15
    3eae:	a6 8b       	std	Z+22, r26	; 0x16
    3eb0:	b7 8b       	std	Z+23, r27	; 0x17

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    3eb2:	ab 81       	ldd	r26, Y+3	; 0x03
    3eb4:	bc 81       	ldd	r27, Y+4	; 0x04
    3eb6:	14 96       	adiw	r26, 0x04	; 4
    3eb8:	8c 91       	ld	r24, X
    3eba:	14 97       	sbiw	r26, 0x04	; 4
    3ebc:	83 30       	cpi	r24, 0x03	; 3
    3ebe:	09 f0       	breq	.+2      	; 0x3ec2 <_nrk_scheduler+0x33e>
    3ec0:	9c c0       	rjmp	.+312    	; 0x3ffa <_nrk_scheduler+0x476>
        {
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    3ec2:	f5 01       	movw	r30, r10
    3ec4:	80 81       	ld	r24, Z
    3ec6:	91 81       	ldd	r25, Z+1	; 0x01
    3ec8:	a2 81       	ldd	r26, Z+2	; 0x02
    3eca:	b3 81       	ldd	r27, Z+3	; 0x03
    3ecc:	00 97       	sbiw	r24, 0x00	; 0
    3ece:	a1 05       	cpc	r26, r1
    3ed0:	b1 05       	cpc	r27, r1
    3ed2:	09 f0       	breq	.+2      	; 0x3ed6 <_nrk_scheduler+0x352>
    3ed4:	7e c0       	rjmp	.+252    	; 0x3fd2 <_nrk_scheduler+0x44e>
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    3ed6:	ab 81       	ldd	r26, Y+3	; 0x03
    3ed8:	bc 81       	ldd	r27, Y+4	; 0x04
    3eda:	12 96       	adiw	r26, 0x02	; 2
    3edc:	8c 91       	ld	r24, X
    3ede:	12 97       	sbiw	r26, 0x02	; 2
    3ee0:	88 23       	and	r24, r24
    3ee2:	c1 f0       	breq	.+48     	; 0x3f14 <_nrk_scheduler+0x390>
    3ee4:	11 96       	adiw	r26, 0x01	; 1
    3ee6:	8c 91       	ld	r24, X
    3ee8:	11 97       	sbiw	r26, 0x01	; 1
    3eea:	88 23       	and	r24, r24
    3eec:	99 f0       	breq	.+38     	; 0x3f14 <_nrk_scheduler+0x390>
    3eee:	81 e0       	ldi	r24, 0x01	; 1
    3ef0:	90 e0       	ldi	r25, 0x00	; 0
    3ef2:	a0 e0       	ldi	r26, 0x00	; 0
    3ef4:	b0 e0       	ldi	r27, 0x00	; 0
    3ef6:	00 90 2e 09 	lds	r0, 0x092E
    3efa:	04 c0       	rjmp	.+8      	; 0x3f04 <_nrk_scheduler+0x380>
    3efc:	88 0f       	add	r24, r24
    3efe:	99 1f       	adc	r25, r25
    3f00:	aa 1f       	adc	r26, r26
    3f02:	bb 1f       	adc	r27, r27
    3f04:	0a 94       	dec	r0
    3f06:	d2 f7       	brpl	.-12     	; 0x3efc <_nrk_scheduler+0x378>
    3f08:	eb 81       	ldd	r30, Y+3	; 0x03
    3f0a:	fc 81       	ldd	r31, Y+4	; 0x04
    3f0c:	84 87       	std	Z+12, r24	; 0x0c
    3f0e:	95 87       	std	Z+13, r25	; 0x0d
    3f10:	a6 87       	std	Z+14, r26	; 0x0e
    3f12:	b7 87       	std	Z+15, r27	; 0x0f
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    3f14:	ab 81       	ldd	r26, Y+3	; 0x03
    3f16:	bc 81       	ldd	r27, Y+4	; 0x04
    3f18:	12 96       	adiw	r26, 0x02	; 2
    3f1a:	1c 92       	st	X, r1
    3f1c:	12 97       	sbiw	r26, 0x02	; 2
                nrk_task_TCB[task_ID].nw_flag=0;
    3f1e:	11 96       	adiw	r26, 0x01	; 1
    3f20:	1c 92       	st	X, r1
    3f22:	11 97       	sbiw	r26, 0x01	; 1
                nrk_task_TCB[task_ID].suspend_flag=0;
    3f24:	1c 92       	st	X, r1
                if(nrk_task_TCB[task_ID].num_periods==1)
    3f26:	f5 01       	movw	r30, r10
    3f28:	64 89       	ldd	r22, Z+20	; 0x14
    3f2a:	75 89       	ldd	r23, Z+21	; 0x15
    3f2c:	5c 96       	adiw	r26, 0x1c	; 28
    3f2e:	ed 90       	ld	r14, X+
    3f30:	fd 90       	ld	r15, X+
    3f32:	0d 91       	ld	r16, X+
    3f34:	1c 91       	ld	r17, X
    3f36:	5f 97       	sbiw	r26, 0x1f	; 31
    3f38:	eb 81       	ldd	r30, Y+3	; 0x03
    3f3a:	fc 81       	ldd	r31, Y+4	; 0x04
    3f3c:	80 a1       	ldd	r24, Z+32	; 0x20
    3f3e:	91 a1       	ldd	r25, Z+33	; 0x21
    3f40:	a2 a1       	ldd	r26, Z+34	; 0x22
    3f42:	b3 a1       	ldd	r27, Z+35	; 0x23
    3f44:	61 30       	cpi	r22, 0x01	; 1
    3f46:	71 05       	cpc	r23, r1
    3f48:	e9 f4       	brne	.+58     	; 0x3f84 <_nrk_scheduler+0x400>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    3f4a:	80 8f       	std	Z+24, r24	; 0x18
    3f4c:	91 8f       	std	Z+25, r25	; 0x19
    3f4e:	a2 8f       	std	Z+26, r26	; 0x1a
    3f50:	b3 8f       	std	Z+27, r27	; 0x1b
                    nrk_task_TCB[task_ID].task_state = READY;
    3f52:	84 82       	std	Z+4, r8	; 0x04
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    3f54:	84 89       	ldd	r24, Z+20	; 0x14
    3f56:	95 89       	ldd	r25, Z+21	; 0x15
    3f58:	a6 89       	ldd	r26, Z+22	; 0x16
    3f5a:	b7 89       	ldd	r27, Z+23	; 0x17
    3f5c:	f5 01       	movw	r30, r10
    3f5e:	80 83       	st	Z, r24
    3f60:	91 83       	std	Z+1, r25	; 0x01
    3f62:	a2 83       	std	Z+2, r26	; 0x02
    3f64:	b3 83       	std	Z+3, r27	; 0x03
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    3f66:	e1 14       	cp	r14, r1
    3f68:	f1 04       	cpc	r15, r1
    3f6a:	01 05       	cpc	r16, r1
    3f6c:	11 05       	cpc	r17, r1
    3f6e:	31 f4       	brne	.+12     	; 0x3f7c <_nrk_scheduler+0x3f8>
    3f70:	d5 01       	movw	r26, r10
    3f72:	4d 92       	st	X+, r4
    3f74:	5d 92       	st	X+, r5
    3f76:	6d 92       	st	X+, r6
    3f78:	7c 92       	st	X, r7
    3f7a:	13 97       	sbiw	r26, 0x03	; 3
		    nrk_add_to_readyQ(task_ID);
    3f7c:	89 2d       	mov	r24, r9
    3f7e:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <nrk_add_to_readyQ>
    3f82:	27 c0       	rjmp	.+78     	; 0x3fd2 <_nrk_scheduler+0x44e>
                }
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    3f84:	eb 81       	ldd	r30, Y+3	; 0x03
    3f86:	fc 81       	ldd	r31, Y+4	; 0x04
    3f88:	80 8f       	std	Z+24, r24	; 0x18
    3f8a:	91 8f       	std	Z+25, r25	; 0x19
    3f8c:	a2 8f       	std	Z+26, r26	; 0x1a
    3f8e:	b3 8f       	std	Z+27, r27	; 0x1b
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    3f90:	61 50       	subi	r22, 0x01	; 1
    3f92:	70 40       	sbci	r23, 0x00	; 0
    3f94:	80 e0       	ldi	r24, 0x00	; 0
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	a8 01       	movw	r20, r16
    3f9a:	97 01       	movw	r18, r14
    3f9c:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <__mulsi3>
    3fa0:	d5 01       	movw	r26, r10
    3fa2:	6d 93       	st	X+, r22
    3fa4:	7d 93       	st	X+, r23
    3fa6:	8d 93       	st	X+, r24
    3fa8:	9c 93       	st	X, r25
    3faa:	13 97       	sbiw	r26, 0x03	; 3
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    3fac:	eb 81       	ldd	r30, Y+3	; 0x03
    3fae:	fc 81       	ldd	r31, Y+4	; 0x04
    3fb0:	64 8b       	std	Z+20, r22	; 0x14
    3fb2:	75 8b       	std	Z+21, r23	; 0x15
    3fb4:	86 8b       	std	Z+22, r24	; 0x16
    3fb6:	97 8b       	std	Z+23, r25	; 0x17
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    3fb8:	e1 14       	cp	r14, r1
    3fba:	f1 04       	cpc	r15, r1
    3fbc:	01 05       	cpc	r16, r1
    3fbe:	11 05       	cpc	r17, r1
    3fc0:	29 f4       	brne	.+10     	; 0x3fcc <_nrk_scheduler+0x448>
    3fc2:	4d 92       	st	X+, r4
    3fc4:	5d 92       	st	X+, r5
    3fc6:	6d 92       	st	X+, r6
    3fc8:	7c 92       	st	X, r7
    3fca:	13 97       	sbiw	r26, 0x03	; 3
                    nrk_task_TCB[task_ID].num_periods=1;
    3fcc:	f5 01       	movw	r30, r10
    3fce:	35 8a       	std	Z+21, r3	; 0x15
    3fd0:	24 8a       	std	Z+20, r2	; 0x14
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    3fd2:	d5 01       	movw	r26, r10
    3fd4:	2d 91       	ld	r18, X+
    3fd6:	3d 91       	ld	r19, X+
    3fd8:	4d 91       	ld	r20, X+
    3fda:	5c 91       	ld	r21, X
    3fdc:	13 97       	sbiw	r26, 0x03	; 3
    3fde:	21 15       	cp	r18, r1
    3fe0:	31 05       	cpc	r19, r1
    3fe2:	41 05       	cpc	r20, r1
    3fe4:	51 05       	cpc	r21, r1
    3fe6:	49 f0       	breq	.+18     	; 0x3ffa <_nrk_scheduler+0x476>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
    3fe8:	c6 01       	movw	r24, r12
    3fea:	a0 e0       	ldi	r26, 0x00	; 0
    3fec:	b0 e0       	ldi	r27, 0x00	; 0
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    3fee:	28 17       	cp	r18, r24
    3ff0:	39 07       	cpc	r19, r25
    3ff2:	4a 07       	cpc	r20, r26
    3ff4:	5b 07       	cpc	r21, r27
    3ff6:	08 f4       	brcc	.+2      	; 0x3ffa <_nrk_scheduler+0x476>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
            {
                // Find closest next_wake task
                next_wake=nrk_task_TCB[task_ID].next_wakeup;
    3ff8:	69 01       	movw	r12, r18

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    3ffa:	93 94       	inc	r9
    3ffc:	eb e2       	ldi	r30, 0x2B	; 43
    3ffe:	f0 e0       	ldi	r31, 0x00	; 0
    4000:	ae 0e       	add	r10, r30
    4002:	bf 1e       	adc	r11, r31
    4004:	8b 81       	ldd	r24, Y+3	; 0x03
    4006:	9c 81       	ldd	r25, Y+4	; 0x04
    4008:	8b 96       	adiw	r24, 0x2b	; 43
    400a:	9c 83       	std	Y+4, r25	; 0x04
    400c:	8b 83       	std	Y+3, r24	; 0x03
    400e:	99 2d       	mov	r25, r9
    4010:	95 30       	cpi	r25, 0x05	; 5
    4012:	09 f0       	breq	.+2      	; 0x4016 <_nrk_scheduler+0x492>
    4014:	d5 ce       	rjmp	.-598    	; 0x3dc0 <_nrk_scheduler+0x23c>
    4016:	76 01       	movw	r14, r12


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
#endif
    task_ID = nrk_get_high_ready_task_ID();
    4018:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <nrk_get_high_ready_task_ID>
    401c:	08 2f       	mov	r16, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    401e:	28 2f       	mov	r18, r24
    4020:	33 27       	eor	r19, r19
    4022:	27 fd       	sbrc	r18, 7
    4024:	30 95       	com	r19
    4026:	8b e2       	ldi	r24, 0x2B	; 43
    4028:	90 e0       	ldi	r25, 0x00	; 0
    402a:	28 9f       	mul	r18, r24
    402c:	f0 01       	movw	r30, r0
    402e:	29 9f       	mul	r18, r25
    4030:	f0 0d       	add	r31, r0
    4032:	38 9f       	mul	r19, r24
    4034:	f0 0d       	add	r31, r0
    4036:	11 24       	eor	r1, r1
    4038:	ef 5a       	subi	r30, 0xAF	; 175
    403a:	f7 4f       	sbci	r31, 0xF7	; 247
    403c:	a2 84       	ldd	r10, Z+10	; 0x0a
    403e:	a0 92 40 09 	sts	0x0940, r10
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    4042:	f0 93 30 09 	sts	0x0930, r31
    4046:	e0 93 2f 09 	sts	0x092F, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    404a:	00 23       	and	r16, r16
    404c:	01 f1       	breq	.+64     	; 0x408e <_nrk_scheduler+0x50a>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    404e:	85 a1       	ldd	r24, Z+37	; 0x25
    4050:	96 a1       	ldd	r25, Z+38	; 0x26
    4052:	a7 a1       	ldd	r26, Z+39	; 0x27
    4054:	b0 a5       	ldd	r27, Z+40	; 0x28
    4056:	00 97       	sbiw	r24, 0x00	; 0
    4058:	a1 05       	cpc	r26, r1
    405a:	b1 05       	cpc	r27, r1
    405c:	99 f0       	breq	.+38     	; 0x4084 <_nrk_scheduler+0x500>
    405e:	25 8d       	ldd	r18, Z+29	; 0x1d
    4060:	36 8d       	ldd	r19, Z+30	; 0x1e
    4062:	47 8d       	ldd	r20, Z+31	; 0x1f
    4064:	50 a1       	ldd	r21, Z+32	; 0x20
    4066:	2a 3f       	cpi	r18, 0xFA	; 250
    4068:	31 05       	cpc	r19, r1
    406a:	41 05       	cpc	r20, r1
    406c:	51 05       	cpc	r21, r1
    406e:	50 f4       	brcc	.+20     	; 0x4084 <_nrk_scheduler+0x500>
        {
            if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    4070:	b6 01       	movw	r22, r12
    4072:	80 e0       	ldi	r24, 0x00	; 0
    4074:	90 e0       	ldi	r25, 0x00	; 0
    4076:	26 17       	cp	r18, r22
    4078:	37 07       	cpc	r19, r23
    407a:	48 07       	cpc	r20, r24
    407c:	59 07       	cpc	r21, r25
    407e:	38 f4       	brcc	.+14     	; 0x408e <_nrk_scheduler+0x50a>
                next_wake=nrk_task_TCB[task_ID].cpu_remaining;
    4080:	79 01       	movw	r14, r18
    4082:	0c c0       	rjmp	.+24     	; 0x409c <_nrk_scheduler+0x518>
    4084:	ab ef       	ldi	r26, 0xFB	; 251
    4086:	ea 16       	cp	r14, r26
    4088:	f1 04       	cpc	r15, r1
    408a:	40 f0       	brcs	.+16     	; 0x409c <_nrk_scheduler+0x518>
    408c:	04 c0       	rjmp	.+8      	; 0x4096 <_nrk_scheduler+0x512>
    }*/


//  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
    408e:	bb ef       	ldi	r27, 0xFB	; 251
    4090:	eb 16       	cp	r14, r27
    4092:	f1 04       	cpc	r15, r1
    4094:	18 f0       	brcs	.+6      	; 0x409c <_nrk_scheduler+0x518>
    4096:	8a ef       	ldi	r24, 0xFA	; 250
    4098:	e8 2e       	mov	r14, r24
    409a:	f1 2c       	mov	r15, r1
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    409c:	a0 92 31 09 	sts	0x0931, r10
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    40a0:	f0 93 3f 09 	sts	0x093F, r31
    40a4:	e0 93 3e 09 	sts	0x093E, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    40a8:	e0 92 d7 06 	sts	0x06D7, r14

    // Maybe the signals are triggering this problem?
    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    40ac:	0e 94 e6 21 	call	0x43cc	; 0x43cc <_nrk_os_timer_get>
    40b0:	90 e0       	ldi	r25, 0x00	; 0
    40b2:	01 96       	adiw	r24, 0x01	; 1
    40b4:	8e 15       	cp	r24, r14
    40b6:	9f 05       	cpc	r25, r15
    40b8:	50 f0       	brcs	.+20     	; 0x40ce <_nrk_scheduler+0x54a>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    40ba:	0e 94 e6 21 	call	0x43cc	; 0x43cc <_nrk_os_timer_get>
    40be:	e8 2e       	mov	r14, r24
    40c0:	ff 24       	eor	r15, r15
    40c2:	e2 e0       	ldi	r30, 0x02	; 2
    40c4:	f0 e0       	ldi	r31, 0x00	; 0
    40c6:	ee 0e       	add	r14, r30
    40c8:	ff 1e       	adc	r15, r31
        _nrk_prev_timer_val=next_wake;
    40ca:	e0 92 d7 06 	sts	0x06D7, r14
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    40ce:	00 23       	and	r16, r16
    40d0:	11 f0       	breq	.+4      	; 0x40d6 <_nrk_scheduler+0x552>
    40d2:	10 92 32 09 	sts	0x0932, r1

    _nrk_set_next_wakeup(next_wake);
    40d6:	8e 2d       	mov	r24, r14
    40d8:	0e 94 81 21 	call	0x4302	; 0x4302 <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    40dc:	89 81       	ldd	r24, Y+1	; 0x01
    40de:	9a 81       	ldd	r25, Y+2	; 0x02
    40e0:	6c ed       	ldi	r22, 0xDC	; 220
    40e2:	75 e0       	ldi	r23, 0x05	; 5
    40e4:	0e 94 e5 20 	call	0x41ca	; 0x41ca <nrk_high_speed_timer_wait>
#endif
    nrk_stack_pointer_restore();
    40e8:	0e 94 08 25 	call	0x4a10	; 0x4a10 <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();
    40ec:	0e 94 14 25 	call	0x4a28	; 0x4a28 <nrk_start_high_ready_task>

}
    40f0:	0f 90       	pop	r0
    40f2:	0f 90       	pop	r0
    40f4:	0f 90       	pop	r0
    40f6:	0f 90       	pop	r0
    40f8:	cf 91       	pop	r28
    40fa:	df 91       	pop	r29
    40fc:	1f 91       	pop	r17
    40fe:	0f 91       	pop	r16
    4100:	ff 90       	pop	r15
    4102:	ef 90       	pop	r14
    4104:	df 90       	pop	r13
    4106:	cf 90       	pop	r12
    4108:	bf 90       	pop	r11
    410a:	af 90       	pop	r10
    410c:	9f 90       	pop	r9
    410e:	8f 90       	pop	r8
    4110:	7f 90       	pop	r7
    4112:	6f 90       	pop	r6
    4114:	5f 90       	pop	r5
    4116:	4f 90       	pop	r4
    4118:	3f 90       	pop	r3
    411a:	2f 90       	pop	r2
    411c:	08 95       	ret

0000411e <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    411e:	89 e0       	ldi	r24, 0x09	; 9
    4120:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    4124:	8d e8       	ldi	r24, 0x8D	; 141
    4126:	9c e3       	ldi	r25, 0x3C	; 60
    4128:	90 93 29 01 	sts	0x0129, r25
    412c:	80 93 28 01 	sts	0x0128, r24
}
    4130:	08 95       	ret

00004132 <_nrk_precision_os_timer_reset>:

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    4132:	10 92 25 01 	sts	0x0125, r1
    4136:	10 92 24 01 	sts	0x0124, r1
}
    413a:	08 95       	ret

0000413c <nrk_spin_wait_us>:
	...
        NOP();
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    4154:	01 97       	sbiw	r24, 0x01	; 1
    4156:	91 f7       	brne	.-28     	; 0x413c <nrk_spin_wait_us>

}
    4158:	08 95       	ret

0000415a <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    415a:	10 92 21 01 	sts	0x0121, r1
}
    415e:	08 95       	ret

00004160 <_nrk_precision_os_timer_get>:
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
}

inline uint16_t _nrk_precision_os_timer_get()
{
    4160:	df 93       	push	r29
    4162:	cf 93       	push	r28
    4164:	00 d0       	rcall	.+0      	; 0x4166 <_nrk_precision_os_timer_get+0x6>
    4166:	cd b7       	in	r28, 0x3d	; 61
    4168:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    416a:	80 91 24 01 	lds	r24, 0x0124
    416e:	90 91 25 01 	lds	r25, 0x0125
    4172:	9a 83       	std	Y+2, r25	; 0x02
    4174:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    4176:	29 81       	ldd	r18, Y+1	; 0x01
    4178:	3a 81       	ldd	r19, Y+2	; 0x02
}
    417a:	c9 01       	movw	r24, r18
    417c:	0f 90       	pop	r0
    417e:	0f 90       	pop	r0
    4180:	cf 91       	pop	r28
    4182:	df 91       	pop	r29
    4184:	08 95       	ret

00004186 <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    4186:	10 92 81 00 	sts	0x0081, r1
}
    418a:	08 95       	ret

0000418c <_nrk_high_speed_timer_start>:

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    418c:	81 e0       	ldi	r24, 0x01	; 1
    418e:	80 93 81 00 	sts	0x0081, r24
}
    4192:	08 95       	ret

00004194 <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    4194:	83 b5       	in	r24, 0x23	; 35
    4196:	81 60       	ori	r24, 0x01	; 1
    4198:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    419a:	10 92 85 00 	sts	0x0085, r1
    419e:	10 92 84 00 	sts	0x0084, r1
//  nrk_int_enable();
}
    41a2:	08 95       	ret

000041a4 <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    41a4:	df 93       	push	r29
    41a6:	cf 93       	push	r28
    41a8:	00 d0       	rcall	.+0      	; 0x41aa <_nrk_high_speed_timer_get+0x6>
    41aa:	cd b7       	in	r28, 0x3d	; 61
    41ac:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    41ae:	80 91 84 00 	lds	r24, 0x0084
    41b2:	90 91 85 00 	lds	r25, 0x0085
    41b6:	9a 83       	std	Y+2, r25	; 0x02
    41b8:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    41ba:	29 81       	ldd	r18, Y+1	; 0x01
    41bc:	3a 81       	ldd	r19, Y+2	; 0x02
}
    41be:	c9 01       	movw	r24, r18
    41c0:	0f 90       	pop	r0
    41c2:	0f 90       	pop	r0
    41c4:	cf 91       	pop	r28
    41c6:	df 91       	pop	r29
    41c8:	08 95       	ret

000041ca <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    41ca:	ef 92       	push	r14
    41cc:	ff 92       	push	r15
    41ce:	0f 93       	push	r16
    41d0:	1f 93       	push	r17
    41d2:	cf 93       	push	r28
    41d4:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    41d6:	ec 01       	movw	r28, r24
    41d8:	cc 0f       	add	r28, r28
    41da:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    41dc:	8f ef       	ldi	r24, 0xFF	; 255
    41de:	c9 37       	cpi	r28, 0x79	; 121
    41e0:	d8 07       	cpc	r29, r24
    41e2:	10 f0       	brcs	.+4      	; 0x41e8 <nrk_high_speed_timer_wait+0x1e>
    41e4:	c0 e0       	ldi	r28, 0x00	; 0
    41e6:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    41e8:	7e 01       	movw	r14, r28
    41ea:	00 e0       	ldi	r16, 0x00	; 0
    41ec:	10 e0       	ldi	r17, 0x00	; 0
    41ee:	80 e0       	ldi	r24, 0x00	; 0
    41f0:	90 e0       	ldi	r25, 0x00	; 0
    41f2:	e6 0e       	add	r14, r22
    41f4:	f7 1e       	adc	r15, r23
    41f6:	08 1f       	adc	r16, r24
    41f8:	19 1f       	adc	r17, r25
if(tmp>65536) 
    41fa:	91 e0       	ldi	r25, 0x01	; 1
    41fc:	e9 16       	cp	r14, r25
    41fe:	90 e0       	ldi	r25, 0x00	; 0
    4200:	f9 06       	cpc	r15, r25
    4202:	91 e0       	ldi	r25, 0x01	; 1
    4204:	09 07       	cpc	r16, r25
    4206:	90 e0       	ldi	r25, 0x00	; 0
    4208:	19 07       	cpc	r17, r25
    420a:	68 f0       	brcs	.+26     	; 0x4226 <__stack+0x27>
	{
	tmp-=65536;
    420c:	80 e0       	ldi	r24, 0x00	; 0
    420e:	90 e0       	ldi	r25, 0x00	; 0
    4210:	af ef       	ldi	r26, 0xFF	; 255
    4212:	bf ef       	ldi	r27, 0xFF	; 255
    4214:	e8 0e       	add	r14, r24
    4216:	f9 1e       	adc	r15, r25
    4218:	0a 1f       	adc	r16, r26
    421a:	1b 1f       	adc	r17, r27
	do{}while(_nrk_high_speed_timer_get()>start);
    421c:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <_nrk_high_speed_timer_get>
    4220:	c8 17       	cp	r28, r24
    4222:	d9 07       	cpc	r29, r25
    4224:	d8 f3       	brcs	.-10     	; 0x421c <__stack+0x1d>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    4226:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <_nrk_high_speed_timer_get>
    422a:	8e 15       	cp	r24, r14
    422c:	9f 05       	cpc	r25, r15
    422e:	d8 f3       	brcs	.-10     	; 0x4226 <__stack+0x27>
}
    4230:	df 91       	pop	r29
    4232:	cf 91       	pop	r28
    4234:	1f 91       	pop	r17
    4236:	0f 91       	pop	r16
    4238:	ff 90       	pop	r15
    423a:	ef 90       	pop	r14
    423c:	08 95       	ret

0000423e <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    423e:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    4242:	e0 e7       	ldi	r30, 0x70	; 112
    4244:	f0 e0       	ldi	r31, 0x00	; 0
    4246:	80 81       	ld	r24, Z
    4248:	8d 7f       	andi	r24, 0xFD	; 253
    424a:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    424c:	80 81       	ld	r24, Z
    424e:	8e 7f       	andi	r24, 0xFE	; 254
    4250:	80 83       	st	Z, r24
}
    4252:	08 95       	ret

00004254 <_nrk_os_timer_set>:

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    4254:	80 93 b2 00 	sts	0x00B2, r24
}
    4258:	08 95       	ret

0000425a <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    425a:	e0 e7       	ldi	r30, 0x70	; 112
    425c:	f0 e0       	ldi	r31, 0x00	; 0
    425e:	80 81       	ld	r24, Z
    4260:	83 60       	ori	r24, 0x03	; 3
    4262:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    4264:	83 e0       	ldi	r24, 0x03	; 3
    4266:	80 93 b1 00 	sts	0x00B1, r24
}
    426a:	08 95       	ret

0000426c <_nrk_os_timer_reset>:

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    426c:	83 b5       	in	r24, 0x23	; 35
    426e:	82 60       	ori	r24, 0x02	; 2
    4270:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    4272:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    4276:	10 92 a4 04 	sts	0x04A4, r1
    _nrk_prev_timer_val=0;
    427a:	10 92 d7 06 	sts	0x06D7, r1
}
    427e:	08 95       	ret

00004280 <_nrk_setup_timer>:

}


void _nrk_setup_timer() {
  _nrk_prev_timer_val=254;
    4280:	8e ef       	ldi	r24, 0xFE	; 254
    4282:	80 93 d7 06 	sts	0x06D7, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    4286:	90 e2       	ldi	r25, 0x20	; 32
    4288:	90 93 b6 00 	sts	0x00B6, r25
  OCR2A = _nrk_prev_timer_val;
    428c:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    4290:	83 e0       	ldi	r24, 0x03	; 3
    4292:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    4294:	92 e0       	ldi	r25, 0x02	; 2
    4296:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    429a:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    429e:	93 b5       	in	r25, 0x23	; 35
    42a0:	92 60       	ori	r25, 0x02	; 2
    42a2:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    42a4:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    42a6:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    42a8:	83 b5       	in	r24, 0x23	; 35
    42aa:	82 60       	ori	r24, 0x02	; 2
    42ac:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    42ae:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    42b2:	81 e0       	ldi	r24, 0x01	; 1
    42b4:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    42b8:	10 92 85 00 	sts	0x0085, r1
    42bc:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    42c0:	83 b5       	in	r24, 0x23	; 35
    42c2:	82 60       	ori	r24, 0x02	; 2
    42c4:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    42c6:	83 b5       	in	r24, 0x23	; 35
    42c8:	81 60       	ori	r24, 0x01	; 1
    42ca:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    42cc:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    42d0:	10 92 25 01 	sts	0x0125, r1
    42d4:	10 92 24 01 	sts	0x0124, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    42d8:	83 b5       	in	r24, 0x23	; 35
    42da:	82 60       	ori	r24, 0x02	; 2
    42dc:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    42de:	83 b5       	in	r24, 0x23	; 35
    42e0:	81 60       	ori	r24, 0x01	; 1
    42e2:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    42e4:	0e 94 36 21 	call	0x426c	; 0x426c <_nrk_os_timer_reset>
  _nrk_precision_os_timer_reset();
    42e8:	0e 94 99 20 	call	0x4132	; 0x4132 <_nrk_precision_os_timer_reset>
  _nrk_os_timer_start();
    42ec:	0e 94 2d 21 	call	0x425a	; 0x425a <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    42f0:	0e 94 8f 20 	call	0x411e	; 0x411e <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    42f4:	10 92 a4 04 	sts	0x04A4, r1
}
    42f8:	08 95       	ret

000042fa <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    42fa:	80 91 b3 00 	lds	r24, 0x00B3
}
    42fe:	8f 5f       	subi	r24, 0xFF	; 255
    4300:	08 95       	ret

00004302 <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    4302:	81 50       	subi	r24, 0x01	; 1
    4304:	80 93 b3 00 	sts	0x00B3, r24
}
    4308:	08 95       	ret

0000430a <nrk_timer_int_stop>:

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    430a:	88 23       	and	r24, r24
    430c:	11 f4       	brne	.+4      	; 0x4312 <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    430e:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    4312:	8f ef       	ldi	r24, 0xFF	; 255
    4314:	08 95       	ret

00004316 <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    4316:	88 23       	and	r24, r24
    4318:	31 f4       	brne	.+12     	; 0x4326 <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    431a:	10 92 95 00 	sts	0x0095, r1
    431e:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    4322:	81 e0       	ldi	r24, 0x01	; 1
    4324:	08 95       	ret
	}
return NRK_ERROR;
    4326:	8f ef       	ldi	r24, 0xFF	; 255
}
    4328:	08 95       	ret

0000432a <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    432a:	88 23       	and	r24, r24
    432c:	29 f4       	brne	.+10     	; 0x4338 <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    432e:	20 91 94 00 	lds	r18, 0x0094
    4332:	30 91 95 00 	lds	r19, 0x0095
    4336:	02 c0       	rjmp	.+4      	; 0x433c <nrk_timer_int_read+0x12>
	}
return 0;
    4338:	20 e0       	ldi	r18, 0x00	; 0
    433a:	30 e0       	ldi	r19, 0x00	; 0

}
    433c:	c9 01       	movw	r24, r18
    433e:	08 95       	ret

00004340 <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    4340:	88 23       	and	r24, r24
    4342:	29 f4       	brne	.+10     	; 0x434e <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    4344:	82 e0       	ldi	r24, 0x02	; 2
    4346:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    434a:	81 e0       	ldi	r24, 0x01	; 1
    434c:	08 95       	ret
	}
return NRK_ERROR;
    434e:	8f ef       	ldi	r24, 0xFF	; 255
}
    4350:	08 95       	ret

00004352 <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    4352:	88 23       	and	r24, r24
    4354:	b9 f5       	brne	.+110    	; 0x43c4 <nrk_timer_int_configure+0x72>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    4356:	cb 01       	movw	r24, r22
    4358:	01 97       	sbiw	r24, 0x01	; 1
    435a:	85 30       	cpi	r24, 0x05	; 5
    435c:	91 05       	cpc	r25, r1
    435e:	10 f4       	brcc	.+4      	; 0x4364 <nrk_timer_int_configure+0x12>
    4360:	60 93 d2 06 	sts	0x06D2, r22
	TCCR3A = 0;  
    4364:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    4368:	88 e0       	ldi	r24, 0x08	; 8
    436a:	80 93 91 00 	sts	0x0091, r24
        OCR3AH = (compare_value >> 8) & 0xFF;	
    436e:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    4372:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    4376:	30 93 9f 04 	sts	0x049F, r19
    437a:	20 93 9e 04 	sts	0x049E, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    437e:	80 91 d2 06 	lds	r24, 0x06D2
    4382:	81 30       	cpi	r24, 0x01	; 1
    4384:	21 f4       	brne	.+8      	; 0x438e <nrk_timer_int_configure+0x3c>
    4386:	80 91 91 00 	lds	r24, 0x0091
    438a:	81 60       	ori	r24, 0x01	; 1
    438c:	0b c0       	rjmp	.+22     	; 0x43a4 <nrk_timer_int_configure+0x52>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    438e:	82 30       	cpi	r24, 0x02	; 2
    4390:	21 f4       	brne	.+8      	; 0x439a <nrk_timer_int_configure+0x48>
    4392:	80 91 91 00 	lds	r24, 0x0091
    4396:	82 60       	ori	r24, 0x02	; 2
    4398:	05 c0       	rjmp	.+10     	; 0x43a4 <nrk_timer_int_configure+0x52>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    439a:	83 30       	cpi	r24, 0x03	; 3
    439c:	39 f4       	brne	.+14     	; 0x43ac <nrk_timer_int_configure+0x5a>
    439e:	80 91 91 00 	lds	r24, 0x0091
    43a2:	83 60       	ori	r24, 0x03	; 3
    43a4:	80 93 91 00 	sts	0x0091, r24
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    43a8:	81 e0       	ldi	r24, 0x01	; 1
    43aa:	08 95       	ret
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    43ac:	84 30       	cpi	r24, 0x04	; 4
    43ae:	21 f4       	brne	.+8      	; 0x43b8 <nrk_timer_int_configure+0x66>
    43b0:	80 91 91 00 	lds	r24, 0x0091
    43b4:	84 60       	ori	r24, 0x04	; 4
    43b6:	f6 cf       	rjmp	.-20     	; 0x43a4 <nrk_timer_int_configure+0x52>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    43b8:	85 30       	cpi	r24, 0x05	; 5
    43ba:	31 f4       	brne	.+12     	; 0x43c8 <nrk_timer_int_configure+0x76>
    43bc:	80 91 91 00 	lds	r24, 0x0091
    43c0:	85 60       	ori	r24, 0x05	; 5
    43c2:	f0 cf       	rjmp	.-32     	; 0x43a4 <nrk_timer_int_configure+0x52>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    43c4:	8f ef       	ldi	r24, 0xFF	; 255
    43c6:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    43c8:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    43ca:	08 95       	ret

000043cc <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    43cc:	80 91 b2 00 	lds	r24, 0x00B2
}
    43d0:	08 95       	ret

000043d2 <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    43d2:	1f 92       	push	r1
    43d4:	0f 92       	push	r0
    43d6:	0f b6       	in	r0, 0x3f	; 63
    43d8:	0f 92       	push	r0
    43da:	0b b6       	in	r0, 0x3b	; 59
    43dc:	0f 92       	push	r0
    43de:	11 24       	eor	r1, r1
    43e0:	2f 93       	push	r18
    43e2:	3f 93       	push	r19
    43e4:	4f 93       	push	r20
    43e6:	5f 93       	push	r21
    43e8:	6f 93       	push	r22
    43ea:	7f 93       	push	r23
    43ec:	8f 93       	push	r24
    43ee:	9f 93       	push	r25
    43f0:	af 93       	push	r26
    43f2:	bf 93       	push	r27
    43f4:	ef 93       	push	r30
    43f6:	ff 93       	push	r31
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    43f8:	8a e0       	ldi	r24, 0x0A	; 10
    43fa:	60 e0       	ldi	r22, 0x00	; 0
    43fc:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <nrk_kernel_error_add>
    4400:	ff cf       	rjmp	.-2      	; 0x4400 <__vector_default+0x2e>

00004402 <__vector_13>:

// This is the SUSPEND for the OS timer Tick
void TIMER2_COMPA_vect( void ) __attribute__ ( ( signal,naked ));
void TIMER2_COMPA_vect(void) {

asm volatile (
    4402:	0f 92       	push	r0
    4404:	0f b6       	in	r0, 0x3f	; 63
    4406:	0f 92       	push	r0
    4408:	1f 92       	push	r1
    440a:	2f 92       	push	r2
    440c:	3f 92       	push	r3
    440e:	4f 92       	push	r4
    4410:	5f 92       	push	r5
    4412:	6f 92       	push	r6
    4414:	7f 92       	push	r7
    4416:	8f 92       	push	r8
    4418:	9f 92       	push	r9
    441a:	af 92       	push	r10
    441c:	bf 92       	push	r11
    441e:	cf 92       	push	r12
    4420:	df 92       	push	r13
    4422:	ef 92       	push	r14
    4424:	ff 92       	push	r15
    4426:	0f 93       	push	r16
    4428:	1f 93       	push	r17
    442a:	2f 93       	push	r18
    442c:	3f 93       	push	r19
    442e:	4f 93       	push	r20
    4430:	5f 93       	push	r21
    4432:	6f 93       	push	r22
    4434:	7f 93       	push	r23
    4436:	8f 93       	push	r24
    4438:	9f 93       	push	r25
    443a:	af 93       	push	r26
    443c:	bf 93       	push	r27
    443e:	cf 93       	push	r28
    4440:	df 93       	push	r29
    4442:	ef 93       	push	r30
    4444:	ff 93       	push	r31
    4446:	a0 91 3e 09 	lds	r26, 0x093E
    444a:	b0 91 3f 09 	lds	r27, 0x093F
    444e:	0d b6       	in	r0, 0x3d	; 61
    4450:	0d 92       	st	X+, r0
    4452:	0e b6       	in	r0, 0x3e	; 62
    4454:	0d 92       	st	X+, r0
    4456:	1f 92       	push	r1
    4458:	a0 91 cc 06 	lds	r26, 0x06CC
    445c:	b0 91 cd 06 	lds	r27, 0x06CD
    4460:	1e 90       	ld	r1, -X
    4462:	be bf       	out	0x3e, r27	; 62
    4464:	ad bf       	out	0x3d, r26	; 61
    4466:	08 95       	ret

00004468 <__vector_32>:
);

}


SIGNAL(TIMER3_COMPA_vect) {
    4468:	1f 92       	push	r1
    446a:	0f 92       	push	r0
    446c:	0f b6       	in	r0, 0x3f	; 63
    446e:	0f 92       	push	r0
    4470:	0b b6       	in	r0, 0x3b	; 59
    4472:	0f 92       	push	r0
    4474:	11 24       	eor	r1, r1
    4476:	2f 93       	push	r18
    4478:	3f 93       	push	r19
    447a:	4f 93       	push	r20
    447c:	5f 93       	push	r21
    447e:	6f 93       	push	r22
    4480:	7f 93       	push	r23
    4482:	8f 93       	push	r24
    4484:	9f 93       	push	r25
    4486:	af 93       	push	r26
    4488:	bf 93       	push	r27
    448a:	ef 93       	push	r30
    448c:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    448e:	e0 91 9e 04 	lds	r30, 0x049E
    4492:	f0 91 9f 04 	lds	r31, 0x049F
    4496:	30 97       	sbiw	r30, 0x00	; 0
    4498:	11 f0       	breq	.+4      	; 0x449e <__vector_32+0x36>
    449a:	09 95       	icall
    449c:	04 c0       	rjmp	.+8      	; 0x44a6 <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    449e:	8a e0       	ldi	r24, 0x0A	; 10
    44a0:	60 e0       	ldi	r22, 0x00	; 0
    44a2:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <nrk_kernel_error_add>
	return;  	
}
    44a6:	ff 91       	pop	r31
    44a8:	ef 91       	pop	r30
    44aa:	bf 91       	pop	r27
    44ac:	af 91       	pop	r26
    44ae:	9f 91       	pop	r25
    44b0:	8f 91       	pop	r24
    44b2:	7f 91       	pop	r23
    44b4:	6f 91       	pop	r22
    44b6:	5f 91       	pop	r21
    44b8:	4f 91       	pop	r20
    44ba:	3f 91       	pop	r19
    44bc:	2f 91       	pop	r18
    44be:	0f 90       	pop	r0
    44c0:	0b be       	out	0x3b, r0	; 59
    44c2:	0f 90       	pop	r0
    44c4:	0f be       	out	0x3f, r0	; 63
    44c6:	0f 90       	pop	r0
    44c8:	1f 90       	pop	r1
    44ca:	18 95       	reti

000044cc <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    44cc:	1f 92       	push	r1
    44ce:	0f 92       	push	r0
    44d0:	0f b6       	in	r0, 0x3f	; 63
    44d2:	0f 92       	push	r0
    44d4:	11 24       	eor	r1, r1

	return;  	
} 
    44d6:	0f 90       	pop	r0
    44d8:	0f be       	out	0x3f, r0	; 63
    44da:	0f 90       	pop	r0
    44dc:	1f 90       	pop	r1
    44de:	18 95       	reti

000044e0 <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    44e0:	04 b6       	in	r0, 0x34	; 52
    44e2:	03 fc       	sbrc	r0, 3
    44e4:	02 c0       	rjmp	.+4      	; 0x44ea <_nrk_startup_error+0xa>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    44e6:	80 e0       	ldi	r24, 0x00	; 0
    44e8:	01 c0       	rjmp	.+2      	; 0x44ec <_nrk_startup_error+0xc>

// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
	{
	// don't clear wdt
	error|=0x10;
    44ea:	80 e1       	ldi	r24, 0x10	; 16
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    44ec:	04 b6       	in	r0, 0x34	; 52
    44ee:	02 fe       	sbrs	r0, 2
    44f0:	06 c0       	rjmp	.+12     	; 0x44fe <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    44f2:	94 b7       	in	r25, 0x34	; 52
    44f4:	9b 7f       	andi	r25, 0xFB	; 251
    44f6:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    44f8:	04 b6       	in	r0, 0x34	; 52
    44fa:	00 fe       	sbrs	r0, 0
		error|=0x04;
    44fc:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    44fe:	04 b6       	in	r0, 0x34	; 52
    4500:	01 fe       	sbrs	r0, 1
    4502:	05 c0       	rjmp	.+10     	; 0x450e <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    4504:	94 b7       	in	r25, 0x34	; 52
    4506:	9d 7f       	andi	r25, 0xFD	; 253
    4508:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    450a:	82 60       	ori	r24, 0x02	; 2
    450c:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    450e:	88 23       	and	r24, r24
    4510:	61 f4       	brne	.+24     	; 0x452a <_nrk_startup_error+0x4a>

// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    4512:	04 b6       	in	r0, 0x34	; 52
    4514:	00 fe       	sbrs	r0, 0
    4516:	04 c0       	rjmp	.+8      	; 0x4520 <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    4518:	94 b7       	in	r25, 0x34	; 52
    451a:	9e 7f       	andi	r25, 0xFE	; 254
    451c:	94 bf       	out	0x34, r25	; 52
    451e:	01 c0       	rjmp	.+2      	; 0x4522 <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    4520:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    4522:	90 91 b0 00 	lds	r25, 0x00B0
    4526:	91 11       	cpse	r25, r1
    4528:	81 60       	ori	r24, 0x01	; 1

return error;
}
    452a:	08 95       	ret

0000452c <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    452c:	88 23       	and	r24, r24
    452e:	11 f4       	brne	.+4      	; 0x4534 <nrk_ext_int_enable+0x8>
    4530:	e8 9a       	sbi	0x1d, 0	; 29
    4532:	39 c0       	rjmp	.+114    	; 0x45a6 <nrk_ext_int_enable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    4534:	81 30       	cpi	r24, 0x01	; 1
    4536:	11 f4       	brne	.+4      	; 0x453c <nrk_ext_int_enable+0x10>
    4538:	e9 9a       	sbi	0x1d, 1	; 29
    453a:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    453c:	82 30       	cpi	r24, 0x02	; 2
    453e:	11 f4       	brne	.+4      	; 0x4544 <nrk_ext_int_enable+0x18>
    4540:	ea 9a       	sbi	0x1d, 2	; 29
    4542:	31 c0       	rjmp	.+98     	; 0x45a6 <nrk_ext_int_enable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    4544:	83 30       	cpi	r24, 0x03	; 3
    4546:	21 f4       	brne	.+8      	; 0x4550 <nrk_ext_int_enable+0x24>
    4548:	80 91 6b 00 	lds	r24, 0x006B
    454c:	81 60       	ori	r24, 0x01	; 1
    454e:	29 c0       	rjmp	.+82     	; 0x45a2 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    4550:	84 30       	cpi	r24, 0x04	; 4
    4552:	21 f4       	brne	.+8      	; 0x455c <nrk_ext_int_enable+0x30>
    4554:	80 91 6b 00 	lds	r24, 0x006B
    4558:	82 60       	ori	r24, 0x02	; 2
    455a:	23 c0       	rjmp	.+70     	; 0x45a2 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    455c:	85 30       	cpi	r24, 0x05	; 5
    455e:	21 f4       	brne	.+8      	; 0x4568 <nrk_ext_int_enable+0x3c>
    4560:	80 91 6b 00 	lds	r24, 0x006B
    4564:	84 60       	ori	r24, 0x04	; 4
    4566:	1d c0       	rjmp	.+58     	; 0x45a2 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    4568:	86 30       	cpi	r24, 0x06	; 6
    456a:	21 f4       	brne	.+8      	; 0x4574 <nrk_ext_int_enable+0x48>
    456c:	80 91 6b 00 	lds	r24, 0x006B
    4570:	88 60       	ori	r24, 0x08	; 8
    4572:	17 c0       	rjmp	.+46     	; 0x45a2 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    4574:	87 30       	cpi	r24, 0x07	; 7
    4576:	21 f4       	brne	.+8      	; 0x4580 <nrk_ext_int_enable+0x54>
    4578:	80 91 6b 00 	lds	r24, 0x006B
    457c:	80 61       	ori	r24, 0x10	; 16
    457e:	11 c0       	rjmp	.+34     	; 0x45a2 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    4580:	88 30       	cpi	r24, 0x08	; 8
    4582:	21 f4       	brne	.+8      	; 0x458c <nrk_ext_int_enable+0x60>
    4584:	80 91 6b 00 	lds	r24, 0x006B
    4588:	80 62       	ori	r24, 0x20	; 32
    458a:	0b c0       	rjmp	.+22     	; 0x45a2 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    458c:	89 30       	cpi	r24, 0x09	; 9
    458e:	21 f4       	brne	.+8      	; 0x4598 <nrk_ext_int_enable+0x6c>
    4590:	80 91 6b 00 	lds	r24, 0x006B
    4594:	80 64       	ori	r24, 0x40	; 64
    4596:	05 c0       	rjmp	.+10     	; 0x45a2 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    4598:	8a 30       	cpi	r24, 0x0A	; 10
    459a:	39 f4       	brne	.+14     	; 0x45aa <nrk_ext_int_enable+0x7e>
    459c:	80 91 6b 00 	lds	r24, 0x006B
    45a0:	80 68       	ori	r24, 0x80	; 128
    45a2:	80 93 6b 00 	sts	0x006B, r24
    45a6:	81 e0       	ldi	r24, 0x01	; 1
    45a8:	08 95       	ret
return NRK_ERROR;
    45aa:	8f ef       	ldi	r24, 0xFF	; 255
}
    45ac:	08 95       	ret

000045ae <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    45ae:	88 23       	and	r24, r24
    45b0:	11 f4       	brne	.+4      	; 0x45b6 <nrk_ext_int_disable+0x8>
    45b2:	e8 98       	cbi	0x1d, 0	; 29
    45b4:	39 c0       	rjmp	.+114    	; 0x4628 <nrk_ext_int_disable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    45b6:	81 30       	cpi	r24, 0x01	; 1
    45b8:	11 f4       	brne	.+4      	; 0x45be <nrk_ext_int_disable+0x10>
    45ba:	e9 98       	cbi	0x1d, 1	; 29
    45bc:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    45be:	82 30       	cpi	r24, 0x02	; 2
    45c0:	11 f4       	brne	.+4      	; 0x45c6 <nrk_ext_int_disable+0x18>
    45c2:	e9 98       	cbi	0x1d, 1	; 29
    45c4:	31 c0       	rjmp	.+98     	; 0x4628 <nrk_ext_int_disable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    45c6:	83 30       	cpi	r24, 0x03	; 3
    45c8:	21 f4       	brne	.+8      	; 0x45d2 <nrk_ext_int_disable+0x24>
    45ca:	80 91 6b 00 	lds	r24, 0x006B
    45ce:	8e 7f       	andi	r24, 0xFE	; 254
    45d0:	29 c0       	rjmp	.+82     	; 0x4624 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    45d2:	84 30       	cpi	r24, 0x04	; 4
    45d4:	21 f4       	brne	.+8      	; 0x45de <nrk_ext_int_disable+0x30>
    45d6:	80 91 6b 00 	lds	r24, 0x006B
    45da:	8d 7f       	andi	r24, 0xFD	; 253
    45dc:	23 c0       	rjmp	.+70     	; 0x4624 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    45de:	85 30       	cpi	r24, 0x05	; 5
    45e0:	21 f4       	brne	.+8      	; 0x45ea <nrk_ext_int_disable+0x3c>
    45e2:	80 91 6b 00 	lds	r24, 0x006B
    45e6:	8b 7f       	andi	r24, 0xFB	; 251
    45e8:	1d c0       	rjmp	.+58     	; 0x4624 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    45ea:	86 30       	cpi	r24, 0x06	; 6
    45ec:	21 f4       	brne	.+8      	; 0x45f6 <nrk_ext_int_disable+0x48>
    45ee:	80 91 6b 00 	lds	r24, 0x006B
    45f2:	87 7f       	andi	r24, 0xF7	; 247
    45f4:	17 c0       	rjmp	.+46     	; 0x4624 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    45f6:	87 30       	cpi	r24, 0x07	; 7
    45f8:	21 f4       	brne	.+8      	; 0x4602 <nrk_ext_int_disable+0x54>
    45fa:	80 91 6b 00 	lds	r24, 0x006B
    45fe:	8f 7e       	andi	r24, 0xEF	; 239
    4600:	11 c0       	rjmp	.+34     	; 0x4624 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    4602:	88 30       	cpi	r24, 0x08	; 8
    4604:	21 f4       	brne	.+8      	; 0x460e <nrk_ext_int_disable+0x60>
    4606:	80 91 6b 00 	lds	r24, 0x006B
    460a:	8f 7d       	andi	r24, 0xDF	; 223
    460c:	0b c0       	rjmp	.+22     	; 0x4624 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    460e:	89 30       	cpi	r24, 0x09	; 9
    4610:	21 f4       	brne	.+8      	; 0x461a <nrk_ext_int_disable+0x6c>
    4612:	80 91 6b 00 	lds	r24, 0x006B
    4616:	8f 7b       	andi	r24, 0xBF	; 191
    4618:	05 c0       	rjmp	.+10     	; 0x4624 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    461a:	8a 30       	cpi	r24, 0x0A	; 10
    461c:	39 f4       	brne	.+14     	; 0x462c <nrk_ext_int_disable+0x7e>
    461e:	80 91 6b 00 	lds	r24, 0x006B
    4622:	8f 77       	andi	r24, 0x7F	; 127
    4624:	80 93 6b 00 	sts	0x006B, r24
    4628:	81 e0       	ldi	r24, 0x01	; 1
    462a:	08 95       	ret
return NRK_ERROR;
    462c:	8f ef       	ldi	r24, 0xFF	; 255
}
    462e:	08 95       	ret

00004630 <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    4630:	88 23       	and	r24, r24
    4632:	39 f5       	brne	.+78     	; 0x4682 <nrk_ext_int_configure+0x52>
	{
	ext_int0_callback=callback_func;
    4634:	50 93 63 09 	sts	0x0963, r21
    4638:	40 93 62 09 	sts	0x0962, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    463c:	66 23       	and	r22, r22
    463e:	21 f4       	brne	.+8      	; 0x4648 <nrk_ext_int_configure+0x18>
    4640:	80 91 69 00 	lds	r24, 0x0069
    4644:	8c 7f       	andi	r24, 0xFC	; 252
    4646:	66 c0       	rjmp	.+204    	; 0x4714 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_LEVEL_TRIGGER) 
    4648:	61 30       	cpi	r22, 0x01	; 1
    464a:	49 f4       	brne	.+18     	; 0x465e <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    464c:	80 91 69 00 	lds	r24, 0x0069
    4650:	8d 7f       	andi	r24, 0xFD	; 253
    4652:	80 93 69 00 	sts	0x0069, r24
    4656:	80 91 69 00 	lds	r24, 0x0069
    465a:	81 60       	ori	r24, 0x01	; 1
    465c:	5b c0       	rjmp	.+182    	; 0x4714 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_FALLING_EDGE) 
    465e:	62 30       	cpi	r22, 0x02	; 2
    4660:	49 f4       	brne	.+18     	; 0x4674 <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    4662:	80 91 69 00 	lds	r24, 0x0069
    4666:	82 60       	ori	r24, 0x02	; 2
    4668:	80 93 69 00 	sts	0x0069, r24
    466c:	80 91 69 00 	lds	r24, 0x0069
    4670:	8e 7f       	andi	r24, 0xFE	; 254
    4672:	50 c0       	rjmp	.+160    	; 0x4714 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    4674:	63 30       	cpi	r22, 0x03	; 3
    4676:	09 f0       	breq	.+2      	; 0x467a <nrk_ext_int_configure+0x4a>
    4678:	62 c0       	rjmp	.+196    	; 0x473e <nrk_ext_int_configure+0x10e>
    467a:	80 91 69 00 	lds	r24, 0x0069
    467e:	83 60       	ori	r24, 0x03	; 3
    4680:	49 c0       	rjmp	.+146    	; 0x4714 <nrk_ext_int_configure+0xe4>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    4682:	81 30       	cpi	r24, 0x01	; 1
    4684:	31 f5       	brne	.+76     	; 0x46d2 <nrk_ext_int_configure+0xa2>
	{
	ext_int1_callback=callback_func;
    4686:	50 93 61 09 	sts	0x0961, r21
    468a:	40 93 60 09 	sts	0x0960, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    468e:	66 23       	and	r22, r22
    4690:	21 f4       	brne	.+8      	; 0x469a <nrk_ext_int_configure+0x6a>
    4692:	80 91 69 00 	lds	r24, 0x0069
    4696:	83 7f       	andi	r24, 0xF3	; 243
    4698:	3d c0       	rjmp	.+122    	; 0x4714 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_LEVEL_TRIGGER) 
    469a:	61 30       	cpi	r22, 0x01	; 1
    469c:	49 f4       	brne	.+18     	; 0x46b0 <nrk_ext_int_configure+0x80>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    469e:	80 91 69 00 	lds	r24, 0x0069
    46a2:	87 7f       	andi	r24, 0xF7	; 247
    46a4:	80 93 69 00 	sts	0x0069, r24
    46a8:	80 91 69 00 	lds	r24, 0x0069
    46ac:	84 60       	ori	r24, 0x04	; 4
    46ae:	32 c0       	rjmp	.+100    	; 0x4714 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_FALLING_EDGE) 
    46b0:	62 30       	cpi	r22, 0x02	; 2
    46b2:	49 f4       	brne	.+18     	; 0x46c6 <nrk_ext_int_configure+0x96>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    46b4:	80 91 69 00 	lds	r24, 0x0069
    46b8:	88 60       	ori	r24, 0x08	; 8
    46ba:	80 93 69 00 	sts	0x0069, r24
    46be:	80 91 69 00 	lds	r24, 0x0069
    46c2:	8b 7f       	andi	r24, 0xFB	; 251
    46c4:	27 c0       	rjmp	.+78     	; 0x4714 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    46c6:	63 30       	cpi	r22, 0x03	; 3
    46c8:	d1 f5       	brne	.+116    	; 0x473e <nrk_ext_int_configure+0x10e>
    46ca:	80 91 69 00 	lds	r24, 0x0069
    46ce:	8c 60       	ori	r24, 0x0C	; 12
    46d0:	21 c0       	rjmp	.+66     	; 0x4714 <nrk_ext_int_configure+0xe4>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    46d2:	82 30       	cpi	r24, 0x02	; 2
    46d4:	41 f5       	brne	.+80     	; 0x4726 <nrk_ext_int_configure+0xf6>
	{
	ext_int2_callback=callback_func;
    46d6:	50 93 65 09 	sts	0x0965, r21
    46da:	40 93 64 09 	sts	0x0964, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    46de:	66 23       	and	r22, r22
    46e0:	21 f4       	brne	.+8      	; 0x46ea <nrk_ext_int_configure+0xba>
    46e2:	80 91 69 00 	lds	r24, 0x0069
    46e6:	8f 7c       	andi	r24, 0xCF	; 207
    46e8:	15 c0       	rjmp	.+42     	; 0x4714 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_LEVEL_TRIGGER) 
    46ea:	61 30       	cpi	r22, 0x01	; 1
    46ec:	49 f4       	brne	.+18     	; 0x4700 <nrk_ext_int_configure+0xd0>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    46ee:	80 91 69 00 	lds	r24, 0x0069
    46f2:	8f 7d       	andi	r24, 0xDF	; 223
    46f4:	80 93 69 00 	sts	0x0069, r24
    46f8:	80 91 69 00 	lds	r24, 0x0069
    46fc:	80 61       	ori	r24, 0x10	; 16
    46fe:	0a c0       	rjmp	.+20     	; 0x4714 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_FALLING_EDGE) 
    4700:	62 30       	cpi	r22, 0x02	; 2
    4702:	59 f4       	brne	.+22     	; 0x471a <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    4704:	80 91 69 00 	lds	r24, 0x0069
    4708:	80 62       	ori	r24, 0x20	; 32
    470a:	80 93 69 00 	sts	0x0069, r24
    470e:	80 91 69 00 	lds	r24, 0x0069
    4712:	8f 7e       	andi	r24, 0xEF	; 239
    4714:	80 93 69 00 	sts	0x0069, r24
    4718:	12 c0       	rjmp	.+36     	; 0x473e <nrk_ext_int_configure+0x10e>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    471a:	63 30       	cpi	r22, 0x03	; 3
    471c:	81 f4       	brne	.+32     	; 0x473e <nrk_ext_int_configure+0x10e>
    471e:	80 91 69 00 	lds	r24, 0x0069
    4722:	80 63       	ori	r24, 0x30	; 48
    4724:	f7 cf       	rjmp	.-18     	; 0x4714 <nrk_ext_int_configure+0xe4>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    4726:	83 50       	subi	r24, 0x03	; 3
    4728:	88 30       	cpi	r24, 0x08	; 8
    472a:	58 f4       	brcc	.+22     	; 0x4742 <nrk_ext_int_configure+0x112>
	PCICR |= BM(PCIE0);	
    472c:	80 91 68 00 	lds	r24, 0x0068
    4730:	81 60       	ori	r24, 0x01	; 1
    4732:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    4736:	50 93 67 09 	sts	0x0967, r21
    473a:	40 93 66 09 	sts	0x0966, r20
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
	return NRK_OK;
    473e:	81 e0       	ldi	r24, 0x01	; 1
    4740:	08 95       	ret
if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
	PCICR |= BM(PCIE0);	
	pc_int0_callback=callback_func;
	return NRK_OK;
	}
return NRK_ERROR;
    4742:	8f ef       	ldi	r24, 0xFF	; 255
}
    4744:	08 95       	ret

00004746 <__vector_9>:

#ifndef NRK_DISABLE_EXT_INT
SIGNAL(PCINT0_vect) {
    4746:	1f 92       	push	r1
    4748:	0f 92       	push	r0
    474a:	0f b6       	in	r0, 0x3f	; 63
    474c:	0f 92       	push	r0
    474e:	0b b6       	in	r0, 0x3b	; 59
    4750:	0f 92       	push	r0
    4752:	11 24       	eor	r1, r1
    4754:	2f 93       	push	r18
    4756:	3f 93       	push	r19
    4758:	4f 93       	push	r20
    475a:	5f 93       	push	r21
    475c:	6f 93       	push	r22
    475e:	7f 93       	push	r23
    4760:	8f 93       	push	r24
    4762:	9f 93       	push	r25
    4764:	af 93       	push	r26
    4766:	bf 93       	push	r27
    4768:	ef 93       	push	r30
    476a:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    476c:	e0 91 66 09 	lds	r30, 0x0966
    4770:	f0 91 67 09 	lds	r31, 0x0967
    4774:	30 97       	sbiw	r30, 0x00	; 0
    4776:	11 f0       	breq	.+4      	; 0x477c <__vector_9+0x36>
    4778:	09 95       	icall
    477a:	04 c0       	rjmp	.+8      	; 0x4784 <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    477c:	8a e0       	ldi	r24, 0x0A	; 10
    477e:	60 e0       	ldi	r22, 0x00	; 0
    4780:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <nrk_kernel_error_add>
	return;  	
}
    4784:	ff 91       	pop	r31
    4786:	ef 91       	pop	r30
    4788:	bf 91       	pop	r27
    478a:	af 91       	pop	r26
    478c:	9f 91       	pop	r25
    478e:	8f 91       	pop	r24
    4790:	7f 91       	pop	r23
    4792:	6f 91       	pop	r22
    4794:	5f 91       	pop	r21
    4796:	4f 91       	pop	r20
    4798:	3f 91       	pop	r19
    479a:	2f 91       	pop	r18
    479c:	0f 90       	pop	r0
    479e:	0b be       	out	0x3b, r0	; 59
    47a0:	0f 90       	pop	r0
    47a2:	0f be       	out	0x3f, r0	; 63
    47a4:	0f 90       	pop	r0
    47a6:	1f 90       	pop	r1
    47a8:	18 95       	reti

000047aa <__vector_1>:


SIGNAL(INT0_vect) {
    47aa:	1f 92       	push	r1
    47ac:	0f 92       	push	r0
    47ae:	0f b6       	in	r0, 0x3f	; 63
    47b0:	0f 92       	push	r0
    47b2:	0b b6       	in	r0, 0x3b	; 59
    47b4:	0f 92       	push	r0
    47b6:	11 24       	eor	r1, r1
    47b8:	2f 93       	push	r18
    47ba:	3f 93       	push	r19
    47bc:	4f 93       	push	r20
    47be:	5f 93       	push	r21
    47c0:	6f 93       	push	r22
    47c2:	7f 93       	push	r23
    47c4:	8f 93       	push	r24
    47c6:	9f 93       	push	r25
    47c8:	af 93       	push	r26
    47ca:	bf 93       	push	r27
    47cc:	ef 93       	push	r30
    47ce:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    47d0:	e0 91 62 09 	lds	r30, 0x0962
    47d4:	f0 91 63 09 	lds	r31, 0x0963
    47d8:	30 97       	sbiw	r30, 0x00	; 0
    47da:	11 f0       	breq	.+4      	; 0x47e0 <__vector_1+0x36>
    47dc:	09 95       	icall
    47de:	04 c0       	rjmp	.+8      	; 0x47e8 <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    47e0:	8a e0       	ldi	r24, 0x0A	; 10
    47e2:	60 e0       	ldi	r22, 0x00	; 0
    47e4:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <nrk_kernel_error_add>
	return;  	
}
    47e8:	ff 91       	pop	r31
    47ea:	ef 91       	pop	r30
    47ec:	bf 91       	pop	r27
    47ee:	af 91       	pop	r26
    47f0:	9f 91       	pop	r25
    47f2:	8f 91       	pop	r24
    47f4:	7f 91       	pop	r23
    47f6:	6f 91       	pop	r22
    47f8:	5f 91       	pop	r21
    47fa:	4f 91       	pop	r20
    47fc:	3f 91       	pop	r19
    47fe:	2f 91       	pop	r18
    4800:	0f 90       	pop	r0
    4802:	0b be       	out	0x3b, r0	; 59
    4804:	0f 90       	pop	r0
    4806:	0f be       	out	0x3f, r0	; 63
    4808:	0f 90       	pop	r0
    480a:	1f 90       	pop	r1
    480c:	18 95       	reti

0000480e <__vector_2>:

SIGNAL(INT1_vect) {
    480e:	1f 92       	push	r1
    4810:	0f 92       	push	r0
    4812:	0f b6       	in	r0, 0x3f	; 63
    4814:	0f 92       	push	r0
    4816:	0b b6       	in	r0, 0x3b	; 59
    4818:	0f 92       	push	r0
    481a:	11 24       	eor	r1, r1
    481c:	2f 93       	push	r18
    481e:	3f 93       	push	r19
    4820:	4f 93       	push	r20
    4822:	5f 93       	push	r21
    4824:	6f 93       	push	r22
    4826:	7f 93       	push	r23
    4828:	8f 93       	push	r24
    482a:	9f 93       	push	r25
    482c:	af 93       	push	r26
    482e:	bf 93       	push	r27
    4830:	ef 93       	push	r30
    4832:	ff 93       	push	r31
	if(ext_int1_callback!=NULL) ext_int1_callback();
    4834:	e0 91 60 09 	lds	r30, 0x0960
    4838:	f0 91 61 09 	lds	r31, 0x0961
    483c:	30 97       	sbiw	r30, 0x00	; 0
    483e:	11 f0       	breq	.+4      	; 0x4844 <__vector_2+0x36>
    4840:	09 95       	icall
    4842:	04 c0       	rjmp	.+8      	; 0x484c <__vector_2+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4844:	8a e0       	ldi	r24, 0x0A	; 10
    4846:	60 e0       	ldi	r22, 0x00	; 0
    4848:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <nrk_kernel_error_add>
	return;  	
}
    484c:	ff 91       	pop	r31
    484e:	ef 91       	pop	r30
    4850:	bf 91       	pop	r27
    4852:	af 91       	pop	r26
    4854:	9f 91       	pop	r25
    4856:	8f 91       	pop	r24
    4858:	7f 91       	pop	r23
    485a:	6f 91       	pop	r22
    485c:	5f 91       	pop	r21
    485e:	4f 91       	pop	r20
    4860:	3f 91       	pop	r19
    4862:	2f 91       	pop	r18
    4864:	0f 90       	pop	r0
    4866:	0b be       	out	0x3b, r0	; 59
    4868:	0f 90       	pop	r0
    486a:	0f be       	out	0x3f, r0	; 63
    486c:	0f 90       	pop	r0
    486e:	1f 90       	pop	r1
    4870:	18 95       	reti

00004872 <__vector_3>:

SIGNAL(INT2_vect) {
    4872:	1f 92       	push	r1
    4874:	0f 92       	push	r0
    4876:	0f b6       	in	r0, 0x3f	; 63
    4878:	0f 92       	push	r0
    487a:	0b b6       	in	r0, 0x3b	; 59
    487c:	0f 92       	push	r0
    487e:	11 24       	eor	r1, r1
    4880:	2f 93       	push	r18
    4882:	3f 93       	push	r19
    4884:	4f 93       	push	r20
    4886:	5f 93       	push	r21
    4888:	6f 93       	push	r22
    488a:	7f 93       	push	r23
    488c:	8f 93       	push	r24
    488e:	9f 93       	push	r25
    4890:	af 93       	push	r26
    4892:	bf 93       	push	r27
    4894:	ef 93       	push	r30
    4896:	ff 93       	push	r31
	if(ext_int2_callback!=NULL) ext_int2_callback();
    4898:	e0 91 64 09 	lds	r30, 0x0964
    489c:	f0 91 65 09 	lds	r31, 0x0965
    48a0:	30 97       	sbiw	r30, 0x00	; 0
    48a2:	11 f0       	breq	.+4      	; 0x48a8 <__vector_3+0x36>
    48a4:	09 95       	icall
    48a6:	04 c0       	rjmp	.+8      	; 0x48b0 <__vector_3+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    48a8:	8a e0       	ldi	r24, 0x0A	; 10
    48aa:	60 e0       	ldi	r22, 0x00	; 0
    48ac:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <nrk_kernel_error_add>
	return;  	
}
    48b0:	ff 91       	pop	r31
    48b2:	ef 91       	pop	r30
    48b4:	bf 91       	pop	r27
    48b6:	af 91       	pop	r26
    48b8:	9f 91       	pop	r25
    48ba:	8f 91       	pop	r24
    48bc:	7f 91       	pop	r23
    48be:	6f 91       	pop	r22
    48c0:	5f 91       	pop	r21
    48c2:	4f 91       	pop	r20
    48c4:	3f 91       	pop	r19
    48c6:	2f 91       	pop	r18
    48c8:	0f 90       	pop	r0
    48ca:	0b be       	out	0x3b, r0	; 59
    48cc:	0f 90       	pop	r0
    48ce:	0f be       	out	0x3f, r0	; 63
    48d0:	0f 90       	pop	r0
    48d2:	1f 90       	pop	r1
    48d4:	18 95       	reti

000048d6 <nrk_watchdog_disable>:
#include <nrk.h>
#include <avr/wdt.h>

void nrk_watchdog_disable()
{
nrk_int_disable();
    48d6:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    48da:	a8 95       	wdr

void nrk_watchdog_disable()
{
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    48dc:	84 b7       	in	r24, 0x34	; 52
    48de:	87 7f       	andi	r24, 0xF7	; 247
    48e0:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    48e2:	e0 e6       	ldi	r30, 0x60	; 96
    48e4:	f0 e0       	ldi	r31, 0x00	; 0
    48e6:	80 81       	ld	r24, Z
    48e8:	88 61       	ori	r24, 0x18	; 24
    48ea:	80 83       	st	Z, r24
WDTCSR = 0;
    48ec:	10 82       	st	Z, r1
nrk_int_enable();
    48ee:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <nrk_int_enable>
}
    48f2:	08 95       	ret

000048f4 <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
    48f4:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    48f8:	a8 95       	wdr
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    48fa:	84 b7       	in	r24, 0x34	; 52
    48fc:	87 7f       	andi	r24, 0xF7	; 247
    48fe:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    4900:	e0 e6       	ldi	r30, 0x60	; 96
    4902:	f0 e0       	ldi	r31, 0x00	; 0
    4904:	80 81       	ld	r24, Z
    4906:	88 61       	ori	r24, 0x18	; 24
    4908:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    490a:	8d e0       	ldi	r24, 0x0D	; 13
    490c:	80 83       	st	Z, r24
nrk_int_enable();
    490e:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <nrk_int_enable>
}
    4912:	08 95       	ret

00004914 <nrk_watchdog_check>:

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    4914:	04 b6       	in	r0, 0x34	; 52
    4916:	03 fc       	sbrc	r0, 3
    4918:	02 c0       	rjmp	.+4      	; 0x491e <nrk_watchdog_check+0xa>
    491a:	81 e0       	ldi	r24, 0x01	; 1
    491c:	08 95       	ret
return NRK_ERROR;
    491e:	8f ef       	ldi	r24, 0xFF	; 255
}
    4920:	08 95       	ret

00004922 <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    4922:	a8 95       	wdr

}
    4924:	08 95       	ret

00004926 <nrk_battery_save>:
        nrk_led_clr(2);
        nrk_led_clr(3);
        SET_VREG_INACTIVE();
        nrk_sleep();
#endif
}
    4926:	08 95       	ret

00004928 <nrk_sleep>:

void nrk_sleep()
{
    //PRR0 = 0xff;
    //PRR1 = 0xff;
    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    4928:	83 b7       	in	r24, 0x33	; 51
    492a:	81 7f       	andi	r24, 0xF1	; 241
    492c:	86 60       	ori	r24, 0x06	; 6
    492e:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    4930:	83 b7       	in	r24, 0x33	; 51
    4932:	81 60       	ori	r24, 0x01	; 1
    4934:	83 bf       	out	0x33, r24	; 51
    4936:	88 95       	sleep
    4938:	83 b7       	in	r24, 0x33	; 51
    493a:	8e 7f       	andi	r24, 0xFE	; 254
    493c:	83 bf       	out	0x33, r24	; 51

}
    493e:	08 95       	ret

00004940 <nrk_idle>:

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    4940:	83 b7       	in	r24, 0x33	; 51
    4942:	81 7f       	andi	r24, 0xF1	; 241
    4944:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    4946:	83 b7       	in	r24, 0x33	; 51
    4948:	81 60       	ori	r24, 0x01	; 1
    494a:	83 bf       	out	0x33, r24	; 51
    494c:	88 95       	sleep
    494e:	83 b7       	in	r24, 0x33	; 51
    4950:	8e 7f       	andi	r24, 0xFE	; 254
    4952:	83 bf       	out	0x33, r24	; 51

}
    4954:	08 95       	ret

00004956 <nrk_task_set_entry_function>:

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    4956:	fc 01       	movw	r30, r24
    4958:	76 83       	std	Z+6, r23	; 0x06
    495a:	65 83       	std	Z+5, r22	; 0x05
}
    495c:	08 95       	ret

0000495e <nrk_task_set_stk>:

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    495e:	ef 92       	push	r14
    4960:	ff 92       	push	r15
    4962:	0f 93       	push	r16
    4964:	1f 93       	push	r17
    4966:	cf 93       	push	r28
    4968:	df 93       	push	r29
    496a:	ec 01       	movw	r28, r24
    496c:	8b 01       	movw	r16, r22
    496e:	7a 01       	movw	r14, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    4970:	40 32       	cpi	r20, 0x20	; 32
    4972:	51 05       	cpc	r21, r1
    4974:	18 f4       	brcc	.+6      	; 0x497c <nrk_task_set_stk+0x1e>
    4976:	81 e1       	ldi	r24, 0x11	; 17
    4978:	0e 94 3d 13 	call	0x267a	; 0x267a <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    497c:	08 94       	sec
    497e:	e1 08       	sbc	r14, r1
    4980:	f1 08       	sbc	r15, r1
    4982:	e0 0e       	add	r14, r16
    4984:	f1 1e       	adc	r15, r17
    4986:	fa 82       	std	Y+2, r15	; 0x02
    4988:	e9 82       	std	Y+1, r14	; 0x01
task->Pbos = (void *) &stk_base[0];
    498a:	1c 83       	std	Y+4, r17	; 0x04
    498c:	0b 83       	std	Y+3, r16	; 0x03

}
    498e:	df 91       	pop	r29
    4990:	cf 91       	pop	r28
    4992:	1f 91       	pop	r17
    4994:	0f 91       	pop	r16
    4996:	ff 90       	pop	r15
    4998:	ef 90       	pop	r14
    499a:	08 95       	ret

0000499c <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    499c:	25 e5       	ldi	r18, 0x55	; 85
    499e:	fa 01       	movw	r30, r20
    49a0:	20 83       	st	Z, r18
    stk    = (unsigned int *)ptos;          /* Load stack pointer */
    49a2:	fb 01       	movw	r30, r22
    *(--stk) = 0x4748;   // G H                      
    *(--stk) = 0x4546;   // E F                    
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    49a4:	32 97       	sbiw	r30, 0x02	; 2
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    49a6:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    49a8:	81 83       	std	Z+1, r24	; 0x01
	
    *(--stk) = 0;
    49aa:	12 92       	st	-Z, r1
    49ac:	12 92       	st	-Z, r1
    *(--stk) = 0;       
    49ae:	12 92       	st	-Z, r1
    49b0:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    49b2:	12 92       	st	-Z, r1
    49b4:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    49b6:	12 92       	st	-Z, r1
    49b8:	12 92       	st	-Z, r1
    *(--stk) = 0;                         
    49ba:	12 92       	st	-Z, r1
    49bc:	12 92       	st	-Z, r1
    *(--stk) = 0;                         
    49be:	12 92       	st	-Z, r1
    49c0:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    49c2:	12 92       	st	-Z, r1
    49c4:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    49c6:	12 92       	st	-Z, r1
    49c8:	12 92       	st	-Z, r1

    *(--stk) = 0; 
    49ca:	12 92       	st	-Z, r1
    49cc:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    49ce:	12 92       	st	-Z, r1
    49d0:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    49d2:	12 92       	st	-Z, r1
    49d4:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    49d6:	12 92       	st	-Z, r1
    49d8:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    49da:	12 92       	st	-Z, r1
    49dc:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    49de:	12 92       	st	-Z, r1
    49e0:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    49e2:	12 92       	st	-Z, r1
    49e4:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    49e6:	12 92       	st	-Z, r1
    49e8:	12 92       	st	-Z, r1
    *(--stk) = 0;
    49ea:	12 92       	st	-Z, r1
    49ec:	12 92       	st	-Z, r1


    return ((void *)stk);
}
    49ee:	cf 01       	movw	r24, r30
    49f0:	08 95       	ret

000049f2 <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    49f2:	85 e5       	ldi	r24, 0x55	; 85
    49f4:	80 93 fe 40 	sts	0x40FE, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    49f8:	ee ef       	ldi	r30, 0xFE	; 254
    49fa:	f1 e4       	ldi	r31, 0x41	; 65
    49fc:	f0 93 cd 06 	sts	0x06CD, r31
    4a00:	e0 93 cc 06 	sts	0x06CC, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    4a04:	8b e1       	ldi	r24, 0x1B	; 27
    4a06:	91 e1       	ldi	r25, 0x11	; 17
    4a08:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    4a0a:	80 93 ff 41 	sts	0x41FF, r24

}
    4a0e:	08 95       	ret

00004a10 <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    4a10:	8b e1       	ldi	r24, 0x1B	; 27
    4a12:	91 e1       	ldi	r25, 0x11	; 17
    4a14:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    4a18:	80 93 ff 41 	sts	0x41FF, r24
}
    4a1c:	08 95       	ret

00004a1e <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    4a1e:	0e 94 40 21 	call	0x4280	; 0x4280 <_nrk_setup_timer>
  nrk_int_enable();  
    4a22:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <nrk_int_enable>
	
}
    4a26:	08 95       	ret

00004a28 <nrk_start_high_ready_task>:

.global nrk_start_high_ready_task 

nrk_start_high_ready_task:

	lds r26,nrk_high_ready_TCB		
    4a28:	a0 91 2f 09 	lds	r26, 0x092F
	lds r27,nrk_high_ready_TCB+1
    4a2c:	b0 91 30 09 	lds	r27, 0x0930

    	;x points to &OSTCB[x]
    
	ld r28,x+
    4a30:	cd 91       	ld	r28, X+
	out __SP_L__, r28
    4a32:	cd bf       	out	0x3d, r28	; 61
	ld r29,x+
    4a34:	dd 91       	ld	r29, X+
	out __SP_H__, r29
    4a36:	de bf       	out	0x3e, r29	; 62
  
	pop r31	
    4a38:	ff 91       	pop	r31
	pop r30
    4a3a:	ef 91       	pop	r30
	pop r29
    4a3c:	df 91       	pop	r29
	pop r28
    4a3e:	cf 91       	pop	r28
	pop r27
    4a40:	bf 91       	pop	r27
	pop r26
    4a42:	af 91       	pop	r26
	pop r25
    4a44:	9f 91       	pop	r25
	pop r24			
    4a46:	8f 91       	pop	r24
	pop r23
    4a48:	7f 91       	pop	r23
	pop r22
    4a4a:	6f 91       	pop	r22
	pop r21
    4a4c:	5f 91       	pop	r21
	pop r20	
    4a4e:	4f 91       	pop	r20
	pop r19
    4a50:	3f 91       	pop	r19
	pop r18	
    4a52:	2f 91       	pop	r18
	pop r17
    4a54:	1f 91       	pop	r17
	pop r16
    4a56:	0f 91       	pop	r16
	pop r15
    4a58:	ff 90       	pop	r15
	pop r14
    4a5a:	ef 90       	pop	r14
	pop r13
    4a5c:	df 90       	pop	r13
	pop r12
    4a5e:	cf 90       	pop	r12
	pop r11
    4a60:	bf 90       	pop	r11
	pop r10
    4a62:	af 90       	pop	r10
	pop r9
    4a64:	9f 90       	pop	r9
	pop r8
    4a66:	8f 90       	pop	r8
	pop r7
    4a68:	7f 90       	pop	r7
	pop r6
    4a6a:	6f 90       	pop	r6
	pop r5
    4a6c:	5f 90       	pop	r5
	pop r4
    4a6e:	4f 90       	pop	r4
	pop r3
    4a70:	3f 90       	pop	r3
	pop r2
    4a72:	2f 90       	pop	r2
	pop r1
    4a74:	1f 90       	pop	r1
	pop r0
    4a76:	0f 90       	pop	r0
	out __SREG__, r0
    4a78:	0f be       	out	0x3f, r0	; 63
	pop r0	
    4a7a:	0f 90       	pop	r0
	   
    	reti 
    4a7c:	18 95       	reti

00004a7e <__udivdi3>:
    4a7e:	a8 e3       	ldi	r26, 0x38	; 56
    4a80:	b0 e0       	ldi	r27, 0x00	; 0
    4a82:	e5 e4       	ldi	r30, 0x45	; 69
    4a84:	f5 e2       	ldi	r31, 0x25	; 37
    4a86:	0c 94 2c 2d 	jmp	0x5a58	; 0x5a58 <__prologue_saves__>
    4a8a:	29 83       	std	Y+1, r18	; 0x01
    4a8c:	3a 83       	std	Y+2, r19	; 0x02
    4a8e:	4b 83       	std	Y+3, r20	; 0x03
    4a90:	5c 83       	std	Y+4, r21	; 0x04
    4a92:	6d 83       	std	Y+5, r22	; 0x05
    4a94:	7e 83       	std	Y+6, r23	; 0x06
    4a96:	8f 83       	std	Y+7, r24	; 0x07
    4a98:	98 87       	std	Y+8, r25	; 0x08
    4a9a:	a9 86       	std	Y+9, r10	; 0x09
    4a9c:	ba 86       	std	Y+10, r11	; 0x0a
    4a9e:	cb 86       	std	Y+11, r12	; 0x0b
    4aa0:	dc 86       	std	Y+12, r13	; 0x0c
    4aa2:	ed 86       	std	Y+13, r14	; 0x0d
    4aa4:	fe 86       	std	Y+14, r15	; 0x0e
    4aa6:	0f 87       	std	Y+15, r16	; 0x0f
    4aa8:	18 8b       	std	Y+16, r17	; 0x10
    4aaa:	e9 84       	ldd	r14, Y+9	; 0x09
    4aac:	fa 84       	ldd	r15, Y+10	; 0x0a
    4aae:	0b 85       	ldd	r16, Y+11	; 0x0b
    4ab0:	1c 85       	ldd	r17, Y+12	; 0x0c
    4ab2:	2d 85       	ldd	r18, Y+13	; 0x0d
    4ab4:	3e 85       	ldd	r19, Y+14	; 0x0e
    4ab6:	4f 85       	ldd	r20, Y+15	; 0x0f
    4ab8:	58 89       	ldd	r21, Y+16	; 0x10
    4aba:	29 80       	ldd	r2, Y+1	; 0x01
    4abc:	3a 80       	ldd	r3, Y+2	; 0x02
    4abe:	4b 80       	ldd	r4, Y+3	; 0x03
    4ac0:	5c 80       	ldd	r5, Y+4	; 0x04
    4ac2:	2d a2       	std	Y+37, r2	; 0x25
    4ac4:	3e a2       	std	Y+38, r3	; 0x26
    4ac6:	4f a2       	std	Y+39, r4	; 0x27
    4ac8:	58 a6       	std	Y+40, r5	; 0x28
    4aca:	ad 80       	ldd	r10, Y+5	; 0x05
    4acc:	be 80       	ldd	r11, Y+6	; 0x06
    4ace:	cf 80       	ldd	r12, Y+7	; 0x07
    4ad0:	d8 84       	ldd	r13, Y+8	; 0x08
    4ad2:	21 15       	cp	r18, r1
    4ad4:	31 05       	cpc	r19, r1
    4ad6:	41 05       	cpc	r20, r1
    4ad8:	51 05       	cpc	r21, r1
    4ada:	09 f0       	breq	.+2      	; 0x4ade <__udivdi3+0x60>
    4adc:	be c3       	rjmp	.+1916   	; 0x525a <__udivdi3+0x7dc>
    4ade:	ae 14       	cp	r10, r14
    4ae0:	bf 04       	cpc	r11, r15
    4ae2:	c0 06       	cpc	r12, r16
    4ae4:	d1 06       	cpc	r13, r17
    4ae6:	08 f0       	brcs	.+2      	; 0x4aea <__udivdi3+0x6c>
    4ae8:	4f c1       	rjmp	.+670    	; 0x4d88 <__udivdi3+0x30a>
    4aea:	20 e0       	ldi	r18, 0x00	; 0
    4aec:	e2 16       	cp	r14, r18
    4aee:	20 e0       	ldi	r18, 0x00	; 0
    4af0:	f2 06       	cpc	r15, r18
    4af2:	21 e0       	ldi	r18, 0x01	; 1
    4af4:	02 07       	cpc	r16, r18
    4af6:	20 e0       	ldi	r18, 0x00	; 0
    4af8:	12 07       	cpc	r17, r18
    4afa:	58 f4       	brcc	.+22     	; 0x4b12 <__udivdi3+0x94>
    4afc:	3f ef       	ldi	r19, 0xFF	; 255
    4afe:	e3 16       	cp	r14, r19
    4b00:	f1 04       	cpc	r15, r1
    4b02:	01 05       	cpc	r16, r1
    4b04:	11 05       	cpc	r17, r1
    4b06:	09 f0       	breq	.+2      	; 0x4b0a <__udivdi3+0x8c>
    4b08:	90 f4       	brcc	.+36     	; 0x4b2e <__udivdi3+0xb0>
    4b0a:	20 e0       	ldi	r18, 0x00	; 0
    4b0c:	30 e0       	ldi	r19, 0x00	; 0
    4b0e:	a9 01       	movw	r20, r18
    4b10:	17 c0       	rjmp	.+46     	; 0x4b40 <__udivdi3+0xc2>
    4b12:	40 e0       	ldi	r20, 0x00	; 0
    4b14:	e4 16       	cp	r14, r20
    4b16:	40 e0       	ldi	r20, 0x00	; 0
    4b18:	f4 06       	cpc	r15, r20
    4b1a:	40 e0       	ldi	r20, 0x00	; 0
    4b1c:	04 07       	cpc	r16, r20
    4b1e:	41 e0       	ldi	r20, 0x01	; 1
    4b20:	14 07       	cpc	r17, r20
    4b22:	50 f4       	brcc	.+20     	; 0x4b38 <__udivdi3+0xba>
    4b24:	20 e1       	ldi	r18, 0x10	; 16
    4b26:	30 e0       	ldi	r19, 0x00	; 0
    4b28:	40 e0       	ldi	r20, 0x00	; 0
    4b2a:	50 e0       	ldi	r21, 0x00	; 0
    4b2c:	09 c0       	rjmp	.+18     	; 0x4b40 <__udivdi3+0xc2>
    4b2e:	28 e0       	ldi	r18, 0x08	; 8
    4b30:	30 e0       	ldi	r19, 0x00	; 0
    4b32:	40 e0       	ldi	r20, 0x00	; 0
    4b34:	50 e0       	ldi	r21, 0x00	; 0
    4b36:	04 c0       	rjmp	.+8      	; 0x4b40 <__udivdi3+0xc2>
    4b38:	28 e1       	ldi	r18, 0x18	; 24
    4b3a:	30 e0       	ldi	r19, 0x00	; 0
    4b3c:	40 e0       	ldi	r20, 0x00	; 0
    4b3e:	50 e0       	ldi	r21, 0x00	; 0
    4b40:	d8 01       	movw	r26, r16
    4b42:	c7 01       	movw	r24, r14
    4b44:	02 2e       	mov	r0, r18
    4b46:	04 c0       	rjmp	.+8      	; 0x4b50 <__udivdi3+0xd2>
    4b48:	b6 95       	lsr	r27
    4b4a:	a7 95       	ror	r26
    4b4c:	97 95       	ror	r25
    4b4e:	87 95       	ror	r24
    4b50:	0a 94       	dec	r0
    4b52:	d2 f7       	brpl	.-12     	; 0x4b48 <__udivdi3+0xca>
    4b54:	8e 56       	subi	r24, 0x6E	; 110
    4b56:	9c 4f       	sbci	r25, 0xFC	; 252
    4b58:	dc 01       	movw	r26, r24
    4b5a:	6c 91       	ld	r22, X
    4b5c:	80 e2       	ldi	r24, 0x20	; 32
    4b5e:	90 e0       	ldi	r25, 0x00	; 0
    4b60:	a0 e0       	ldi	r26, 0x00	; 0
    4b62:	b0 e0       	ldi	r27, 0x00	; 0
    4b64:	82 1b       	sub	r24, r18
    4b66:	93 0b       	sbc	r25, r19
    4b68:	a4 0b       	sbc	r26, r20
    4b6a:	b5 0b       	sbc	r27, r21
    4b6c:	86 1b       	sub	r24, r22
    4b6e:	91 09       	sbc	r25, r1
    4b70:	a1 09       	sbc	r26, r1
    4b72:	b1 09       	sbc	r27, r1
    4b74:	00 97       	sbiw	r24, 0x00	; 0
    4b76:	a1 05       	cpc	r26, r1
    4b78:	b1 05       	cpc	r27, r1
    4b7a:	a1 f1       	breq	.+104    	; 0x4be4 <__udivdi3+0x166>
    4b7c:	08 2e       	mov	r0, r24
    4b7e:	04 c0       	rjmp	.+8      	; 0x4b88 <__udivdi3+0x10a>
    4b80:	ee 0c       	add	r14, r14
    4b82:	ff 1c       	adc	r15, r15
    4b84:	00 1f       	adc	r16, r16
    4b86:	11 1f       	adc	r17, r17
    4b88:	0a 94       	dec	r0
    4b8a:	d2 f7       	brpl	.-12     	; 0x4b80 <__udivdi3+0x102>
    4b8c:	a6 01       	movw	r20, r12
    4b8e:	95 01       	movw	r18, r10
    4b90:	08 2e       	mov	r0, r24
    4b92:	04 c0       	rjmp	.+8      	; 0x4b9c <__udivdi3+0x11e>
    4b94:	22 0f       	add	r18, r18
    4b96:	33 1f       	adc	r19, r19
    4b98:	44 1f       	adc	r20, r20
    4b9a:	55 1f       	adc	r21, r21
    4b9c:	0a 94       	dec	r0
    4b9e:	d2 f7       	brpl	.-12     	; 0x4b94 <__udivdi3+0x116>
    4ba0:	60 e2       	ldi	r22, 0x20	; 32
    4ba2:	70 e0       	ldi	r23, 0x00	; 0
    4ba4:	68 1b       	sub	r22, r24
    4ba6:	79 0b       	sbc	r23, r25
    4ba8:	ad a0       	ldd	r10, Y+37	; 0x25
    4baa:	be a0       	ldd	r11, Y+38	; 0x26
    4bac:	cf a0       	ldd	r12, Y+39	; 0x27
    4bae:	d8 a4       	ldd	r13, Y+40	; 0x28
    4bb0:	04 c0       	rjmp	.+8      	; 0x4bba <__udivdi3+0x13c>
    4bb2:	d6 94       	lsr	r13
    4bb4:	c7 94       	ror	r12
    4bb6:	b7 94       	ror	r11
    4bb8:	a7 94       	ror	r10
    4bba:	6a 95       	dec	r22
    4bbc:	d2 f7       	brpl	.-12     	; 0x4bb2 <__udivdi3+0x134>
    4bbe:	a2 2a       	or	r10, r18
    4bc0:	b3 2a       	or	r11, r19
    4bc2:	c4 2a       	or	r12, r20
    4bc4:	d5 2a       	or	r13, r21
    4bc6:	2d a0       	ldd	r2, Y+37	; 0x25
    4bc8:	3e a0       	ldd	r3, Y+38	; 0x26
    4bca:	4f a0       	ldd	r4, Y+39	; 0x27
    4bcc:	58 a4       	ldd	r5, Y+40	; 0x28
    4bce:	04 c0       	rjmp	.+8      	; 0x4bd8 <__udivdi3+0x15a>
    4bd0:	22 0c       	add	r2, r2
    4bd2:	33 1c       	adc	r3, r3
    4bd4:	44 1c       	adc	r4, r4
    4bd6:	55 1c       	adc	r5, r5
    4bd8:	8a 95       	dec	r24
    4bda:	d2 f7       	brpl	.-12     	; 0x4bd0 <__udivdi3+0x152>
    4bdc:	2d a2       	std	Y+37, r2	; 0x25
    4bde:	3e a2       	std	Y+38, r3	; 0x26
    4be0:	4f a2       	std	Y+39, r4	; 0x27
    4be2:	58 a6       	std	Y+40, r5	; 0x28
    4be4:	38 01       	movw	r6, r16
    4be6:	88 24       	eor	r8, r8
    4be8:	99 24       	eor	r9, r9
    4bea:	a8 01       	movw	r20, r16
    4bec:	97 01       	movw	r18, r14
    4bee:	40 70       	andi	r20, 0x00	; 0
    4bf0:	50 70       	andi	r21, 0x00	; 0
    4bf2:	2d 8f       	std	Y+29, r18	; 0x1d
    4bf4:	3e 8f       	std	Y+30, r19	; 0x1e
    4bf6:	4f 8f       	std	Y+31, r20	; 0x1f
    4bf8:	58 a3       	std	Y+32, r21	; 0x20
    4bfa:	c6 01       	movw	r24, r12
    4bfc:	b5 01       	movw	r22, r10
    4bfe:	a4 01       	movw	r20, r8
    4c00:	93 01       	movw	r18, r6
    4c02:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__udivmodsi4>
    4c06:	22 2e       	mov	r2, r18
    4c08:	53 2e       	mov	r5, r19
    4c0a:	44 2e       	mov	r4, r20
    4c0c:	35 2e       	mov	r3, r21
    4c0e:	69 a3       	std	Y+33, r22	; 0x21
    4c10:	7a a3       	std	Y+34, r23	; 0x22
    4c12:	8b a3       	std	Y+35, r24	; 0x23
    4c14:	9c a3       	std	Y+36, r25	; 0x24
    4c16:	c6 01       	movw	r24, r12
    4c18:	b5 01       	movw	r22, r10
    4c1a:	a4 01       	movw	r20, r8
    4c1c:	93 01       	movw	r18, r6
    4c1e:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__udivmodsi4>
    4c22:	82 2d       	mov	r24, r2
    4c24:	95 2d       	mov	r25, r5
    4c26:	a4 2d       	mov	r26, r4
    4c28:	b3 2d       	mov	r27, r3
    4c2a:	89 8f       	std	Y+25, r24	; 0x19
    4c2c:	9a 8f       	std	Y+26, r25	; 0x1a
    4c2e:	ab 8f       	std	Y+27, r26	; 0x1b
    4c30:	bc 8f       	std	Y+28, r27	; 0x1c
    4c32:	bc 01       	movw	r22, r24
    4c34:	cd 01       	movw	r24, r26
    4c36:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4c38:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4c3a:	4f 8d       	ldd	r20, Y+31	; 0x1f
    4c3c:	58 a1       	ldd	r21, Y+32	; 0x20
    4c3e:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <__mulsi3>
    4c42:	5b 01       	movw	r10, r22
    4c44:	6c 01       	movw	r12, r24
    4c46:	49 a1       	ldd	r20, Y+33	; 0x21
    4c48:	5a a1       	ldd	r21, Y+34	; 0x22
    4c4a:	6b a1       	ldd	r22, Y+35	; 0x23
    4c4c:	7c a1       	ldd	r23, Y+36	; 0x24
    4c4e:	da 01       	movw	r26, r20
    4c50:	99 27       	eor	r25, r25
    4c52:	88 27       	eor	r24, r24
    4c54:	2d a0       	ldd	r2, Y+37	; 0x25
    4c56:	3e a0       	ldd	r3, Y+38	; 0x26
    4c58:	4f a0       	ldd	r4, Y+39	; 0x27
    4c5a:	58 a4       	ldd	r5, Y+40	; 0x28
    4c5c:	92 01       	movw	r18, r4
    4c5e:	44 27       	eor	r20, r20
    4c60:	55 27       	eor	r21, r21
    4c62:	82 2b       	or	r24, r18
    4c64:	93 2b       	or	r25, r19
    4c66:	a4 2b       	or	r26, r20
    4c68:	b5 2b       	or	r27, r21
    4c6a:	8a 15       	cp	r24, r10
    4c6c:	9b 05       	cpc	r25, r11
    4c6e:	ac 05       	cpc	r26, r12
    4c70:	bd 05       	cpc	r27, r13
    4c72:	30 f5       	brcc	.+76     	; 0x4cc0 <__udivdi3+0x242>
    4c74:	29 8d       	ldd	r18, Y+25	; 0x19
    4c76:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4c78:	4b 8d       	ldd	r20, Y+27	; 0x1b
    4c7a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    4c7c:	21 50       	subi	r18, 0x01	; 1
    4c7e:	30 40       	sbci	r19, 0x00	; 0
    4c80:	40 40       	sbci	r20, 0x00	; 0
    4c82:	50 40       	sbci	r21, 0x00	; 0
    4c84:	29 8f       	std	Y+25, r18	; 0x19
    4c86:	3a 8f       	std	Y+26, r19	; 0x1a
    4c88:	4b 8f       	std	Y+27, r20	; 0x1b
    4c8a:	5c 8f       	std	Y+28, r21	; 0x1c
    4c8c:	8e 0d       	add	r24, r14
    4c8e:	9f 1d       	adc	r25, r15
    4c90:	a0 1f       	adc	r26, r16
    4c92:	b1 1f       	adc	r27, r17
    4c94:	8e 15       	cp	r24, r14
    4c96:	9f 05       	cpc	r25, r15
    4c98:	a0 07       	cpc	r26, r16
    4c9a:	b1 07       	cpc	r27, r17
    4c9c:	88 f0       	brcs	.+34     	; 0x4cc0 <__udivdi3+0x242>
    4c9e:	8a 15       	cp	r24, r10
    4ca0:	9b 05       	cpc	r25, r11
    4ca2:	ac 05       	cpc	r26, r12
    4ca4:	bd 05       	cpc	r27, r13
    4ca6:	60 f4       	brcc	.+24     	; 0x4cc0 <__udivdi3+0x242>
    4ca8:	21 50       	subi	r18, 0x01	; 1
    4caa:	30 40       	sbci	r19, 0x00	; 0
    4cac:	40 40       	sbci	r20, 0x00	; 0
    4cae:	50 40       	sbci	r21, 0x00	; 0
    4cb0:	29 8f       	std	Y+25, r18	; 0x19
    4cb2:	3a 8f       	std	Y+26, r19	; 0x1a
    4cb4:	4b 8f       	std	Y+27, r20	; 0x1b
    4cb6:	5c 8f       	std	Y+28, r21	; 0x1c
    4cb8:	8e 0d       	add	r24, r14
    4cba:	9f 1d       	adc	r25, r15
    4cbc:	a0 1f       	adc	r26, r16
    4cbe:	b1 1f       	adc	r27, r17
    4cc0:	ac 01       	movw	r20, r24
    4cc2:	bd 01       	movw	r22, r26
    4cc4:	4a 19       	sub	r20, r10
    4cc6:	5b 09       	sbc	r21, r11
    4cc8:	6c 09       	sbc	r22, r12
    4cca:	7d 09       	sbc	r23, r13
    4ccc:	5a 01       	movw	r10, r20
    4cce:	6b 01       	movw	r12, r22
    4cd0:	cb 01       	movw	r24, r22
    4cd2:	ba 01       	movw	r22, r20
    4cd4:	a4 01       	movw	r20, r8
    4cd6:	93 01       	movw	r18, r6
    4cd8:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__udivmodsi4>
    4cdc:	22 2e       	mov	r2, r18
    4cde:	53 2e       	mov	r5, r19
    4ce0:	44 2e       	mov	r4, r20
    4ce2:	35 2e       	mov	r3, r21
    4ce4:	69 a3       	std	Y+33, r22	; 0x21
    4ce6:	7a a3       	std	Y+34, r23	; 0x22
    4ce8:	8b a3       	std	Y+35, r24	; 0x23
    4cea:	9c a3       	std	Y+36, r25	; 0x24
    4cec:	c6 01       	movw	r24, r12
    4cee:	b5 01       	movw	r22, r10
    4cf0:	a4 01       	movw	r20, r8
    4cf2:	93 01       	movw	r18, r6
    4cf4:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__udivmodsi4>
    4cf8:	a2 2c       	mov	r10, r2
    4cfa:	b5 2c       	mov	r11, r5
    4cfc:	c4 2c       	mov	r12, r4
    4cfe:	d3 2c       	mov	r13, r3
    4d00:	c6 01       	movw	r24, r12
    4d02:	b5 01       	movw	r22, r10
    4d04:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4d06:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4d08:	4f 8d       	ldd	r20, Y+31	; 0x1f
    4d0a:	58 a1       	ldd	r21, Y+32	; 0x20
    4d0c:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <__mulsi3>
    4d10:	3b 01       	movw	r6, r22
    4d12:	4c 01       	movw	r8, r24
    4d14:	69 a1       	ldd	r22, Y+33	; 0x21
    4d16:	7a a1       	ldd	r23, Y+34	; 0x22
    4d18:	8b a1       	ldd	r24, Y+35	; 0x23
    4d1a:	9c a1       	ldd	r25, Y+36	; 0x24
    4d1c:	ab 01       	movw	r20, r22
    4d1e:	33 27       	eor	r19, r19
    4d20:	22 27       	eor	r18, r18
    4d22:	8d a1       	ldd	r24, Y+37	; 0x25
    4d24:	9e a1       	ldd	r25, Y+38	; 0x26
    4d26:	af a1       	ldd	r26, Y+39	; 0x27
    4d28:	b8 a5       	ldd	r27, Y+40	; 0x28
    4d2a:	a0 70       	andi	r26, 0x00	; 0
    4d2c:	b0 70       	andi	r27, 0x00	; 0
    4d2e:	28 2b       	or	r18, r24
    4d30:	39 2b       	or	r19, r25
    4d32:	4a 2b       	or	r20, r26
    4d34:	5b 2b       	or	r21, r27
    4d36:	26 15       	cp	r18, r6
    4d38:	37 05       	cpc	r19, r7
    4d3a:	48 05       	cpc	r20, r8
    4d3c:	59 05       	cpc	r21, r9
    4d3e:	c0 f4       	brcc	.+48     	; 0x4d70 <__udivdi3+0x2f2>
    4d40:	08 94       	sec
    4d42:	a1 08       	sbc	r10, r1
    4d44:	b1 08       	sbc	r11, r1
    4d46:	c1 08       	sbc	r12, r1
    4d48:	d1 08       	sbc	r13, r1
    4d4a:	2e 0d       	add	r18, r14
    4d4c:	3f 1d       	adc	r19, r15
    4d4e:	40 1f       	adc	r20, r16
    4d50:	51 1f       	adc	r21, r17
    4d52:	2e 15       	cp	r18, r14
    4d54:	3f 05       	cpc	r19, r15
    4d56:	40 07       	cpc	r20, r16
    4d58:	51 07       	cpc	r21, r17
    4d5a:	50 f0       	brcs	.+20     	; 0x4d70 <__udivdi3+0x2f2>
    4d5c:	26 15       	cp	r18, r6
    4d5e:	37 05       	cpc	r19, r7
    4d60:	48 05       	cpc	r20, r8
    4d62:	59 05       	cpc	r21, r9
    4d64:	28 f4       	brcc	.+10     	; 0x4d70 <__udivdi3+0x2f2>
    4d66:	08 94       	sec
    4d68:	a1 08       	sbc	r10, r1
    4d6a:	b1 08       	sbc	r11, r1
    4d6c:	c1 08       	sbc	r12, r1
    4d6e:	d1 08       	sbc	r13, r1
    4d70:	89 8d       	ldd	r24, Y+25	; 0x19
    4d72:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4d74:	ab 8d       	ldd	r26, Y+27	; 0x1b
    4d76:	bc 8d       	ldd	r27, Y+28	; 0x1c
    4d78:	8c 01       	movw	r16, r24
    4d7a:	ff 24       	eor	r15, r15
    4d7c:	ee 24       	eor	r14, r14
    4d7e:	ea 28       	or	r14, r10
    4d80:	fb 28       	or	r15, r11
    4d82:	0c 29       	or	r16, r12
    4d84:	1d 29       	or	r17, r13
    4d86:	b3 c4       	rjmp	.+2406   	; 0x56ee <__udivdi3+0xc70>
    4d88:	e1 14       	cp	r14, r1
    4d8a:	f1 04       	cpc	r15, r1
    4d8c:	01 05       	cpc	r16, r1
    4d8e:	11 05       	cpc	r17, r1
    4d90:	59 f4       	brne	.+22     	; 0x4da8 <__udivdi3+0x32a>
    4d92:	61 e0       	ldi	r22, 0x01	; 1
    4d94:	70 e0       	ldi	r23, 0x00	; 0
    4d96:	80 e0       	ldi	r24, 0x00	; 0
    4d98:	90 e0       	ldi	r25, 0x00	; 0
    4d9a:	a8 01       	movw	r20, r16
    4d9c:	97 01       	movw	r18, r14
    4d9e:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__udivmodsi4>
    4da2:	79 01       	movw	r14, r18
    4da4:	8a 01       	movw	r16, r20
    4da6:	10 c0       	rjmp	.+32     	; 0x4dc8 <__udivdi3+0x34a>
    4da8:	90 e0       	ldi	r25, 0x00	; 0
    4daa:	e9 16       	cp	r14, r25
    4dac:	90 e0       	ldi	r25, 0x00	; 0
    4dae:	f9 06       	cpc	r15, r25
    4db0:	91 e0       	ldi	r25, 0x01	; 1
    4db2:	09 07       	cpc	r16, r25
    4db4:	90 e0       	ldi	r25, 0x00	; 0
    4db6:	19 07       	cpc	r17, r25
    4db8:	58 f4       	brcc	.+22     	; 0x4dd0 <__udivdi3+0x352>
    4dba:	af ef       	ldi	r26, 0xFF	; 255
    4dbc:	ea 16       	cp	r14, r26
    4dbe:	f1 04       	cpc	r15, r1
    4dc0:	01 05       	cpc	r16, r1
    4dc2:	11 05       	cpc	r17, r1
    4dc4:	09 f0       	breq	.+2      	; 0x4dc8 <__udivdi3+0x34a>
    4dc6:	90 f4       	brcc	.+36     	; 0x4dec <__udivdi3+0x36e>
    4dc8:	20 e0       	ldi	r18, 0x00	; 0
    4dca:	30 e0       	ldi	r19, 0x00	; 0
    4dcc:	a9 01       	movw	r20, r18
    4dce:	17 c0       	rjmp	.+46     	; 0x4dfe <__udivdi3+0x380>
    4dd0:	b0 e0       	ldi	r27, 0x00	; 0
    4dd2:	eb 16       	cp	r14, r27
    4dd4:	b0 e0       	ldi	r27, 0x00	; 0
    4dd6:	fb 06       	cpc	r15, r27
    4dd8:	b0 e0       	ldi	r27, 0x00	; 0
    4dda:	0b 07       	cpc	r16, r27
    4ddc:	b1 e0       	ldi	r27, 0x01	; 1
    4dde:	1b 07       	cpc	r17, r27
    4de0:	50 f4       	brcc	.+20     	; 0x4df6 <__udivdi3+0x378>
    4de2:	20 e1       	ldi	r18, 0x10	; 16
    4de4:	30 e0       	ldi	r19, 0x00	; 0
    4de6:	40 e0       	ldi	r20, 0x00	; 0
    4de8:	50 e0       	ldi	r21, 0x00	; 0
    4dea:	09 c0       	rjmp	.+18     	; 0x4dfe <__udivdi3+0x380>
    4dec:	28 e0       	ldi	r18, 0x08	; 8
    4dee:	30 e0       	ldi	r19, 0x00	; 0
    4df0:	40 e0       	ldi	r20, 0x00	; 0
    4df2:	50 e0       	ldi	r21, 0x00	; 0
    4df4:	04 c0       	rjmp	.+8      	; 0x4dfe <__udivdi3+0x380>
    4df6:	28 e1       	ldi	r18, 0x18	; 24
    4df8:	30 e0       	ldi	r19, 0x00	; 0
    4dfa:	40 e0       	ldi	r20, 0x00	; 0
    4dfc:	50 e0       	ldi	r21, 0x00	; 0
    4dfe:	d8 01       	movw	r26, r16
    4e00:	c7 01       	movw	r24, r14
    4e02:	02 2e       	mov	r0, r18
    4e04:	04 c0       	rjmp	.+8      	; 0x4e0e <__udivdi3+0x390>
    4e06:	b6 95       	lsr	r27
    4e08:	a7 95       	ror	r26
    4e0a:	97 95       	ror	r25
    4e0c:	87 95       	ror	r24
    4e0e:	0a 94       	dec	r0
    4e10:	d2 f7       	brpl	.-12     	; 0x4e06 <__udivdi3+0x388>
    4e12:	8e 56       	subi	r24, 0x6E	; 110
    4e14:	9c 4f       	sbci	r25, 0xFC	; 252
    4e16:	fc 01       	movw	r30, r24
    4e18:	80 81       	ld	r24, Z
    4e1a:	28 0f       	add	r18, r24
    4e1c:	31 1d       	adc	r19, r1
    4e1e:	41 1d       	adc	r20, r1
    4e20:	51 1d       	adc	r21, r1
    4e22:	80 e2       	ldi	r24, 0x20	; 32
    4e24:	90 e0       	ldi	r25, 0x00	; 0
    4e26:	a0 e0       	ldi	r26, 0x00	; 0
    4e28:	b0 e0       	ldi	r27, 0x00	; 0
    4e2a:	82 1b       	sub	r24, r18
    4e2c:	93 0b       	sbc	r25, r19
    4e2e:	a4 0b       	sbc	r26, r20
    4e30:	b5 0b       	sbc	r27, r21
    4e32:	61 f4       	brne	.+24     	; 0x4e4c <__udivdi3+0x3ce>
    4e34:	15 01       	movw	r2, r10
    4e36:	26 01       	movw	r4, r12
    4e38:	2e 18       	sub	r2, r14
    4e3a:	3f 08       	sbc	r3, r15
    4e3c:	40 0a       	sbc	r4, r16
    4e3e:	51 0a       	sbc	r5, r17
    4e40:	81 e0       	ldi	r24, 0x01	; 1
    4e42:	a8 2e       	mov	r10, r24
    4e44:	b1 2c       	mov	r11, r1
    4e46:	c1 2c       	mov	r12, r1
    4e48:	d1 2c       	mov	r13, r1
    4e4a:	29 c1       	rjmp	.+594    	; 0x509e <__udivdi3+0x620>
    4e4c:	08 2e       	mov	r0, r24
    4e4e:	04 c0       	rjmp	.+8      	; 0x4e58 <__udivdi3+0x3da>
    4e50:	ee 0c       	add	r14, r14
    4e52:	ff 1c       	adc	r15, r15
    4e54:	00 1f       	adc	r16, r16
    4e56:	11 1f       	adc	r17, r17
    4e58:	0a 94       	dec	r0
    4e5a:	d2 f7       	brpl	.-12     	; 0x4e50 <__udivdi3+0x3d2>
    4e5c:	15 01       	movw	r2, r10
    4e5e:	26 01       	movw	r4, r12
    4e60:	02 2e       	mov	r0, r18
    4e62:	04 c0       	rjmp	.+8      	; 0x4e6c <__udivdi3+0x3ee>
    4e64:	56 94       	lsr	r5
    4e66:	47 94       	ror	r4
    4e68:	37 94       	ror	r3
    4e6a:	27 94       	ror	r2
    4e6c:	0a 94       	dec	r0
    4e6e:	d2 f7       	brpl	.-12     	; 0x4e64 <__udivdi3+0x3e6>
    4e70:	29 8e       	std	Y+25, r2	; 0x19
    4e72:	3a 8e       	std	Y+26, r3	; 0x1a
    4e74:	4b 8e       	std	Y+27, r4	; 0x1b
    4e76:	5c 8e       	std	Y+28, r5	; 0x1c
    4e78:	b6 01       	movw	r22, r12
    4e7a:	a5 01       	movw	r20, r10
    4e7c:	08 2e       	mov	r0, r24
    4e7e:	04 c0       	rjmp	.+8      	; 0x4e88 <__udivdi3+0x40a>
    4e80:	44 0f       	add	r20, r20
    4e82:	55 1f       	adc	r21, r21
    4e84:	66 1f       	adc	r22, r22
    4e86:	77 1f       	adc	r23, r23
    4e88:	0a 94       	dec	r0
    4e8a:	d2 f7       	brpl	.-12     	; 0x4e80 <__udivdi3+0x402>
    4e8c:	4d 8f       	std	Y+29, r20	; 0x1d
    4e8e:	5e 8f       	std	Y+30, r21	; 0x1e
    4e90:	6f 8f       	std	Y+31, r22	; 0x1f
    4e92:	78 a3       	std	Y+32, r23	; 0x20
    4e94:	2d a0       	ldd	r2, Y+37	; 0x25
    4e96:	3e a0       	ldd	r3, Y+38	; 0x26
    4e98:	4f a0       	ldd	r4, Y+39	; 0x27
    4e9a:	58 a4       	ldd	r5, Y+40	; 0x28
    4e9c:	04 c0       	rjmp	.+8      	; 0x4ea6 <__udivdi3+0x428>
    4e9e:	56 94       	lsr	r5
    4ea0:	47 94       	ror	r4
    4ea2:	37 94       	ror	r3
    4ea4:	27 94       	ror	r2
    4ea6:	2a 95       	dec	r18
    4ea8:	d2 f7       	brpl	.-12     	; 0x4e9e <__udivdi3+0x420>
    4eaa:	ad 8c       	ldd	r10, Y+29	; 0x1d
    4eac:	be 8c       	ldd	r11, Y+30	; 0x1e
    4eae:	cf 8c       	ldd	r12, Y+31	; 0x1f
    4eb0:	d8 a0       	ldd	r13, Y+32	; 0x20
    4eb2:	a2 28       	or	r10, r2
    4eb4:	b3 28       	or	r11, r3
    4eb6:	c4 28       	or	r12, r4
    4eb8:	d5 28       	or	r13, r5
    4eba:	ad 8e       	std	Y+29, r10	; 0x1d
    4ebc:	be 8e       	std	Y+30, r11	; 0x1e
    4ebe:	cf 8e       	std	Y+31, r12	; 0x1f
    4ec0:	d8 a2       	std	Y+32, r13	; 0x20
    4ec2:	2d a1       	ldd	r18, Y+37	; 0x25
    4ec4:	3e a1       	ldd	r19, Y+38	; 0x26
    4ec6:	4f a1       	ldd	r20, Y+39	; 0x27
    4ec8:	58 a5       	ldd	r21, Y+40	; 0x28
    4eca:	04 c0       	rjmp	.+8      	; 0x4ed4 <__udivdi3+0x456>
    4ecc:	22 0f       	add	r18, r18
    4ece:	33 1f       	adc	r19, r19
    4ed0:	44 1f       	adc	r20, r20
    4ed2:	55 1f       	adc	r21, r21
    4ed4:	8a 95       	dec	r24
    4ed6:	d2 f7       	brpl	.-12     	; 0x4ecc <__udivdi3+0x44e>
    4ed8:	2d a3       	std	Y+37, r18	; 0x25
    4eda:	3e a3       	std	Y+38, r19	; 0x26
    4edc:	4f a3       	std	Y+39, r20	; 0x27
    4ede:	58 a7       	std	Y+40, r21	; 0x28
    4ee0:	38 01       	movw	r6, r16
    4ee2:	88 24       	eor	r8, r8
    4ee4:	99 24       	eor	r9, r9
    4ee6:	b8 01       	movw	r22, r16
    4ee8:	a7 01       	movw	r20, r14
    4eea:	60 70       	andi	r22, 0x00	; 0
    4eec:	70 70       	andi	r23, 0x00	; 0
    4eee:	49 a3       	std	Y+33, r20	; 0x21
    4ef0:	5a a3       	std	Y+34, r21	; 0x22
    4ef2:	6b a3       	std	Y+35, r22	; 0x23
    4ef4:	7c a3       	std	Y+36, r23	; 0x24
    4ef6:	69 8d       	ldd	r22, Y+25	; 0x19
    4ef8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4efa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4efc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4efe:	a4 01       	movw	r20, r8
    4f00:	93 01       	movw	r18, r6
    4f02:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__udivmodsi4>
    4f06:	22 2e       	mov	r2, r18
    4f08:	53 2e       	mov	r5, r19
    4f0a:	44 2e       	mov	r4, r20
    4f0c:	35 2e       	mov	r3, r21
    4f0e:	69 a7       	std	Y+41, r22	; 0x29
    4f10:	7a a7       	std	Y+42, r23	; 0x2a
    4f12:	8b a7       	std	Y+43, r24	; 0x2b
    4f14:	9c a7       	std	Y+44, r25	; 0x2c
    4f16:	69 8d       	ldd	r22, Y+25	; 0x19
    4f18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4f1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4f1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4f1e:	a4 01       	movw	r20, r8
    4f20:	93 01       	movw	r18, r6
    4f22:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__udivmodsi4>
    4f26:	a2 2c       	mov	r10, r2
    4f28:	b5 2c       	mov	r11, r5
    4f2a:	c4 2c       	mov	r12, r4
    4f2c:	d3 2c       	mov	r13, r3
    4f2e:	a9 8e       	std	Y+25, r10	; 0x19
    4f30:	ba 8e       	std	Y+26, r11	; 0x1a
    4f32:	cb 8e       	std	Y+27, r12	; 0x1b
    4f34:	dc 8e       	std	Y+28, r13	; 0x1c
    4f36:	c6 01       	movw	r24, r12
    4f38:	b5 01       	movw	r22, r10
    4f3a:	29 a1       	ldd	r18, Y+33	; 0x21
    4f3c:	3a a1       	ldd	r19, Y+34	; 0x22
    4f3e:	4b a1       	ldd	r20, Y+35	; 0x23
    4f40:	5c a1       	ldd	r21, Y+36	; 0x24
    4f42:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <__mulsi3>
    4f46:	5b 01       	movw	r10, r22
    4f48:	6c 01       	movw	r12, r24
    4f4a:	29 a4       	ldd	r2, Y+41	; 0x29
    4f4c:	3a a4       	ldd	r3, Y+42	; 0x2a
    4f4e:	4b a4       	ldd	r4, Y+43	; 0x2b
    4f50:	5c a4       	ldd	r5, Y+44	; 0x2c
    4f52:	d1 01       	movw	r26, r2
    4f54:	99 27       	eor	r25, r25
    4f56:	88 27       	eor	r24, r24
    4f58:	2d 8c       	ldd	r2, Y+29	; 0x1d
    4f5a:	3e 8c       	ldd	r3, Y+30	; 0x1e
    4f5c:	4f 8c       	ldd	r4, Y+31	; 0x1f
    4f5e:	58 a0       	ldd	r5, Y+32	; 0x20
    4f60:	92 01       	movw	r18, r4
    4f62:	44 27       	eor	r20, r20
    4f64:	55 27       	eor	r21, r21
    4f66:	82 2b       	or	r24, r18
    4f68:	93 2b       	or	r25, r19
    4f6a:	a4 2b       	or	r26, r20
    4f6c:	b5 2b       	or	r27, r21
    4f6e:	8a 15       	cp	r24, r10
    4f70:	9b 05       	cpc	r25, r11
    4f72:	ac 05       	cpc	r26, r12
    4f74:	bd 05       	cpc	r27, r13
    4f76:	30 f5       	brcc	.+76     	; 0x4fc4 <__udivdi3+0x546>
    4f78:	29 8d       	ldd	r18, Y+25	; 0x19
    4f7a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4f7c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    4f7e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    4f80:	21 50       	subi	r18, 0x01	; 1
    4f82:	30 40       	sbci	r19, 0x00	; 0
    4f84:	40 40       	sbci	r20, 0x00	; 0
    4f86:	50 40       	sbci	r21, 0x00	; 0
    4f88:	29 8f       	std	Y+25, r18	; 0x19
    4f8a:	3a 8f       	std	Y+26, r19	; 0x1a
    4f8c:	4b 8f       	std	Y+27, r20	; 0x1b
    4f8e:	5c 8f       	std	Y+28, r21	; 0x1c
    4f90:	8e 0d       	add	r24, r14
    4f92:	9f 1d       	adc	r25, r15
    4f94:	a0 1f       	adc	r26, r16
    4f96:	b1 1f       	adc	r27, r17
    4f98:	8e 15       	cp	r24, r14
    4f9a:	9f 05       	cpc	r25, r15
    4f9c:	a0 07       	cpc	r26, r16
    4f9e:	b1 07       	cpc	r27, r17
    4fa0:	88 f0       	brcs	.+34     	; 0x4fc4 <__udivdi3+0x546>
    4fa2:	8a 15       	cp	r24, r10
    4fa4:	9b 05       	cpc	r25, r11
    4fa6:	ac 05       	cpc	r26, r12
    4fa8:	bd 05       	cpc	r27, r13
    4faa:	60 f4       	brcc	.+24     	; 0x4fc4 <__udivdi3+0x546>
    4fac:	21 50       	subi	r18, 0x01	; 1
    4fae:	30 40       	sbci	r19, 0x00	; 0
    4fb0:	40 40       	sbci	r20, 0x00	; 0
    4fb2:	50 40       	sbci	r21, 0x00	; 0
    4fb4:	29 8f       	std	Y+25, r18	; 0x19
    4fb6:	3a 8f       	std	Y+26, r19	; 0x1a
    4fb8:	4b 8f       	std	Y+27, r20	; 0x1b
    4fba:	5c 8f       	std	Y+28, r21	; 0x1c
    4fbc:	8e 0d       	add	r24, r14
    4fbe:	9f 1d       	adc	r25, r15
    4fc0:	a0 1f       	adc	r26, r16
    4fc2:	b1 1f       	adc	r27, r17
    4fc4:	ac 01       	movw	r20, r24
    4fc6:	bd 01       	movw	r22, r26
    4fc8:	4a 19       	sub	r20, r10
    4fca:	5b 09       	sbc	r21, r11
    4fcc:	6c 09       	sbc	r22, r12
    4fce:	7d 09       	sbc	r23, r13
    4fd0:	5a 01       	movw	r10, r20
    4fd2:	6b 01       	movw	r12, r22
    4fd4:	cb 01       	movw	r24, r22
    4fd6:	ba 01       	movw	r22, r20
    4fd8:	a4 01       	movw	r20, r8
    4fda:	93 01       	movw	r18, r6
    4fdc:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__udivmodsi4>
    4fe0:	22 2e       	mov	r2, r18
    4fe2:	53 2e       	mov	r5, r19
    4fe4:	44 2e       	mov	r4, r20
    4fe6:	35 2e       	mov	r3, r21
    4fe8:	69 a7       	std	Y+41, r22	; 0x29
    4fea:	7a a7       	std	Y+42, r23	; 0x2a
    4fec:	8b a7       	std	Y+43, r24	; 0x2b
    4fee:	9c a7       	std	Y+44, r25	; 0x2c
    4ff0:	c6 01       	movw	r24, r12
    4ff2:	b5 01       	movw	r22, r10
    4ff4:	a4 01       	movw	r20, r8
    4ff6:	93 01       	movw	r18, r6
    4ff8:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__udivmodsi4>
    4ffc:	62 2c       	mov	r6, r2
    4ffe:	75 2c       	mov	r7, r5
    5000:	84 2c       	mov	r8, r4
    5002:	93 2c       	mov	r9, r3
    5004:	c4 01       	movw	r24, r8
    5006:	b3 01       	movw	r22, r6
    5008:	29 a1       	ldd	r18, Y+33	; 0x21
    500a:	3a a1       	ldd	r19, Y+34	; 0x22
    500c:	4b a1       	ldd	r20, Y+35	; 0x23
    500e:	5c a1       	ldd	r21, Y+36	; 0x24
    5010:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <__mulsi3>
    5014:	9b 01       	movw	r18, r22
    5016:	ac 01       	movw	r20, r24
    5018:	69 a5       	ldd	r22, Y+41	; 0x29
    501a:	7a a5       	ldd	r23, Y+42	; 0x2a
    501c:	8b a5       	ldd	r24, Y+43	; 0x2b
    501e:	9c a5       	ldd	r25, Y+44	; 0x2c
    5020:	6b 01       	movw	r12, r22
    5022:	bb 24       	eor	r11, r11
    5024:	aa 24       	eor	r10, r10
    5026:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5028:	9e 8d       	ldd	r25, Y+30	; 0x1e
    502a:	af 8d       	ldd	r26, Y+31	; 0x1f
    502c:	b8 a1       	ldd	r27, Y+32	; 0x20
    502e:	a0 70       	andi	r26, 0x00	; 0
    5030:	b0 70       	andi	r27, 0x00	; 0
    5032:	a8 2a       	or	r10, r24
    5034:	b9 2a       	or	r11, r25
    5036:	ca 2a       	or	r12, r26
    5038:	db 2a       	or	r13, r27
    503a:	a2 16       	cp	r10, r18
    503c:	b3 06       	cpc	r11, r19
    503e:	c4 06       	cpc	r12, r20
    5040:	d5 06       	cpc	r13, r21
    5042:	e0 f4       	brcc	.+56     	; 0x507c <__udivdi3+0x5fe>
    5044:	08 94       	sec
    5046:	61 08       	sbc	r6, r1
    5048:	71 08       	sbc	r7, r1
    504a:	81 08       	sbc	r8, r1
    504c:	91 08       	sbc	r9, r1
    504e:	ae 0c       	add	r10, r14
    5050:	bf 1c       	adc	r11, r15
    5052:	c0 1e       	adc	r12, r16
    5054:	d1 1e       	adc	r13, r17
    5056:	ae 14       	cp	r10, r14
    5058:	bf 04       	cpc	r11, r15
    505a:	c0 06       	cpc	r12, r16
    505c:	d1 06       	cpc	r13, r17
    505e:	70 f0       	brcs	.+28     	; 0x507c <__udivdi3+0x5fe>
    5060:	a2 16       	cp	r10, r18
    5062:	b3 06       	cpc	r11, r19
    5064:	c4 06       	cpc	r12, r20
    5066:	d5 06       	cpc	r13, r21
    5068:	48 f4       	brcc	.+18     	; 0x507c <__udivdi3+0x5fe>
    506a:	08 94       	sec
    506c:	61 08       	sbc	r6, r1
    506e:	71 08       	sbc	r7, r1
    5070:	81 08       	sbc	r8, r1
    5072:	91 08       	sbc	r9, r1
    5074:	ae 0c       	add	r10, r14
    5076:	bf 1c       	adc	r11, r15
    5078:	c0 1e       	adc	r12, r16
    507a:	d1 1e       	adc	r13, r17
    507c:	15 01       	movw	r2, r10
    507e:	26 01       	movw	r4, r12
    5080:	22 1a       	sub	r2, r18
    5082:	33 0a       	sbc	r3, r19
    5084:	44 0a       	sbc	r4, r20
    5086:	55 0a       	sbc	r5, r21
    5088:	89 8d       	ldd	r24, Y+25	; 0x19
    508a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    508c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    508e:	bc 8d       	ldd	r27, Y+28	; 0x1c
    5090:	6c 01       	movw	r12, r24
    5092:	bb 24       	eor	r11, r11
    5094:	aa 24       	eor	r10, r10
    5096:	a6 28       	or	r10, r6
    5098:	b7 28       	or	r11, r7
    509a:	c8 28       	or	r12, r8
    509c:	d9 28       	or	r13, r9
    509e:	98 01       	movw	r18, r16
    50a0:	44 27       	eor	r20, r20
    50a2:	55 27       	eor	r21, r21
    50a4:	2d 8f       	std	Y+29, r18	; 0x1d
    50a6:	3e 8f       	std	Y+30, r19	; 0x1e
    50a8:	4f 8f       	std	Y+31, r20	; 0x1f
    50aa:	58 a3       	std	Y+32, r21	; 0x20
    50ac:	b8 01       	movw	r22, r16
    50ae:	a7 01       	movw	r20, r14
    50b0:	60 70       	andi	r22, 0x00	; 0
    50b2:	70 70       	andi	r23, 0x00	; 0
    50b4:	49 a3       	std	Y+33, r20	; 0x21
    50b6:	5a a3       	std	Y+34, r21	; 0x22
    50b8:	6b a3       	std	Y+35, r22	; 0x23
    50ba:	7c a3       	std	Y+36, r23	; 0x24
    50bc:	c2 01       	movw	r24, r4
    50be:	b1 01       	movw	r22, r2
    50c0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    50c2:	3e 8d       	ldd	r19, Y+30	; 0x1e
    50c4:	4f 8d       	ldd	r20, Y+31	; 0x1f
    50c6:	58 a1       	ldd	r21, Y+32	; 0x20
    50c8:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__udivmodsi4>
    50cc:	62 2e       	mov	r6, r18
    50ce:	93 2e       	mov	r9, r19
    50d0:	84 2e       	mov	r8, r20
    50d2:	75 2e       	mov	r7, r21
    50d4:	69 a7       	std	Y+41, r22	; 0x29
    50d6:	7a a7       	std	Y+42, r23	; 0x2a
    50d8:	8b a7       	std	Y+43, r24	; 0x2b
    50da:	9c a7       	std	Y+44, r25	; 0x2c
    50dc:	c2 01       	movw	r24, r4
    50de:	b1 01       	movw	r22, r2
    50e0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    50e2:	3e 8d       	ldd	r19, Y+30	; 0x1e
    50e4:	4f 8d       	ldd	r20, Y+31	; 0x1f
    50e6:	58 a1       	ldd	r21, Y+32	; 0x20
    50e8:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__udivmodsi4>
    50ec:	86 2d       	mov	r24, r6
    50ee:	99 2d       	mov	r25, r9
    50f0:	a8 2d       	mov	r26, r8
    50f2:	b7 2d       	mov	r27, r7
    50f4:	89 8f       	std	Y+25, r24	; 0x19
    50f6:	9a 8f       	std	Y+26, r25	; 0x1a
    50f8:	ab 8f       	std	Y+27, r26	; 0x1b
    50fa:	bc 8f       	std	Y+28, r27	; 0x1c
    50fc:	bc 01       	movw	r22, r24
    50fe:	cd 01       	movw	r24, r26
    5100:	29 a1       	ldd	r18, Y+33	; 0x21
    5102:	3a a1       	ldd	r19, Y+34	; 0x22
    5104:	4b a1       	ldd	r20, Y+35	; 0x23
    5106:	5c a1       	ldd	r21, Y+36	; 0x24
    5108:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <__mulsi3>
    510c:	3b 01       	movw	r6, r22
    510e:	4c 01       	movw	r8, r24
    5110:	29 a4       	ldd	r2, Y+41	; 0x29
    5112:	3a a4       	ldd	r3, Y+42	; 0x2a
    5114:	4b a4       	ldd	r4, Y+43	; 0x2b
    5116:	5c a4       	ldd	r5, Y+44	; 0x2c
    5118:	d1 01       	movw	r26, r2
    511a:	99 27       	eor	r25, r25
    511c:	88 27       	eor	r24, r24
    511e:	2d a0       	ldd	r2, Y+37	; 0x25
    5120:	3e a0       	ldd	r3, Y+38	; 0x26
    5122:	4f a0       	ldd	r4, Y+39	; 0x27
    5124:	58 a4       	ldd	r5, Y+40	; 0x28
    5126:	92 01       	movw	r18, r4
    5128:	44 27       	eor	r20, r20
    512a:	55 27       	eor	r21, r21
    512c:	82 2b       	or	r24, r18
    512e:	93 2b       	or	r25, r19
    5130:	a4 2b       	or	r26, r20
    5132:	b5 2b       	or	r27, r21
    5134:	86 15       	cp	r24, r6
    5136:	97 05       	cpc	r25, r7
    5138:	a8 05       	cpc	r26, r8
    513a:	b9 05       	cpc	r27, r9
    513c:	30 f5       	brcc	.+76     	; 0x518a <__udivdi3+0x70c>
    513e:	29 8d       	ldd	r18, Y+25	; 0x19
    5140:	3a 8d       	ldd	r19, Y+26	; 0x1a
    5142:	4b 8d       	ldd	r20, Y+27	; 0x1b
    5144:	5c 8d       	ldd	r21, Y+28	; 0x1c
    5146:	21 50       	subi	r18, 0x01	; 1
    5148:	30 40       	sbci	r19, 0x00	; 0
    514a:	40 40       	sbci	r20, 0x00	; 0
    514c:	50 40       	sbci	r21, 0x00	; 0
    514e:	29 8f       	std	Y+25, r18	; 0x19
    5150:	3a 8f       	std	Y+26, r19	; 0x1a
    5152:	4b 8f       	std	Y+27, r20	; 0x1b
    5154:	5c 8f       	std	Y+28, r21	; 0x1c
    5156:	8e 0d       	add	r24, r14
    5158:	9f 1d       	adc	r25, r15
    515a:	a0 1f       	adc	r26, r16
    515c:	b1 1f       	adc	r27, r17
    515e:	8e 15       	cp	r24, r14
    5160:	9f 05       	cpc	r25, r15
    5162:	a0 07       	cpc	r26, r16
    5164:	b1 07       	cpc	r27, r17
    5166:	88 f0       	brcs	.+34     	; 0x518a <__udivdi3+0x70c>
    5168:	86 15       	cp	r24, r6
    516a:	97 05       	cpc	r25, r7
    516c:	a8 05       	cpc	r26, r8
    516e:	b9 05       	cpc	r27, r9
    5170:	60 f4       	brcc	.+24     	; 0x518a <__udivdi3+0x70c>
    5172:	21 50       	subi	r18, 0x01	; 1
    5174:	30 40       	sbci	r19, 0x00	; 0
    5176:	40 40       	sbci	r20, 0x00	; 0
    5178:	50 40       	sbci	r21, 0x00	; 0
    517a:	29 8f       	std	Y+25, r18	; 0x19
    517c:	3a 8f       	std	Y+26, r19	; 0x1a
    517e:	4b 8f       	std	Y+27, r20	; 0x1b
    5180:	5c 8f       	std	Y+28, r21	; 0x1c
    5182:	8e 0d       	add	r24, r14
    5184:	9f 1d       	adc	r25, r15
    5186:	a0 1f       	adc	r26, r16
    5188:	b1 1f       	adc	r27, r17
    518a:	ac 01       	movw	r20, r24
    518c:	bd 01       	movw	r22, r26
    518e:	46 19       	sub	r20, r6
    5190:	57 09       	sbc	r21, r7
    5192:	68 09       	sbc	r22, r8
    5194:	79 09       	sbc	r23, r9
    5196:	3a 01       	movw	r6, r20
    5198:	4b 01       	movw	r8, r22
    519a:	cb 01       	movw	r24, r22
    519c:	ba 01       	movw	r22, r20
    519e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    51a0:	3e 8d       	ldd	r19, Y+30	; 0x1e
    51a2:	4f 8d       	ldd	r20, Y+31	; 0x1f
    51a4:	58 a1       	ldd	r21, Y+32	; 0x20
    51a6:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__udivmodsi4>
    51aa:	52 2e       	mov	r5, r18
    51ac:	43 2e       	mov	r4, r19
    51ae:	34 2e       	mov	r3, r20
    51b0:	25 2e       	mov	r2, r21
    51b2:	69 a7       	std	Y+41, r22	; 0x29
    51b4:	7a a7       	std	Y+42, r23	; 0x2a
    51b6:	8b a7       	std	Y+43, r24	; 0x2b
    51b8:	9c a7       	std	Y+44, r25	; 0x2c
    51ba:	c4 01       	movw	r24, r8
    51bc:	b3 01       	movw	r22, r6
    51be:	2d 8d       	ldd	r18, Y+29	; 0x1d
    51c0:	3e 8d       	ldd	r19, Y+30	; 0x1e
    51c2:	4f 8d       	ldd	r20, Y+31	; 0x1f
    51c4:	58 a1       	ldd	r21, Y+32	; 0x20
    51c6:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__udivmodsi4>
    51ca:	65 2c       	mov	r6, r5
    51cc:	74 2c       	mov	r7, r4
    51ce:	83 2c       	mov	r8, r3
    51d0:	92 2c       	mov	r9, r2
    51d2:	c4 01       	movw	r24, r8
    51d4:	b3 01       	movw	r22, r6
    51d6:	29 a1       	ldd	r18, Y+33	; 0x21
    51d8:	3a a1       	ldd	r19, Y+34	; 0x22
    51da:	4b a1       	ldd	r20, Y+35	; 0x23
    51dc:	5c a1       	ldd	r21, Y+36	; 0x24
    51de:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <__mulsi3>
    51e2:	1b 01       	movw	r2, r22
    51e4:	2c 01       	movw	r4, r24
    51e6:	69 a5       	ldd	r22, Y+41	; 0x29
    51e8:	7a a5       	ldd	r23, Y+42	; 0x2a
    51ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    51ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    51ee:	ab 01       	movw	r20, r22
    51f0:	33 27       	eor	r19, r19
    51f2:	22 27       	eor	r18, r18
    51f4:	8d a1       	ldd	r24, Y+37	; 0x25
    51f6:	9e a1       	ldd	r25, Y+38	; 0x26
    51f8:	af a1       	ldd	r26, Y+39	; 0x27
    51fa:	b8 a5       	ldd	r27, Y+40	; 0x28
    51fc:	a0 70       	andi	r26, 0x00	; 0
    51fe:	b0 70       	andi	r27, 0x00	; 0
    5200:	28 2b       	or	r18, r24
    5202:	39 2b       	or	r19, r25
    5204:	4a 2b       	or	r20, r26
    5206:	5b 2b       	or	r21, r27
    5208:	22 15       	cp	r18, r2
    520a:	33 05       	cpc	r19, r3
    520c:	44 05       	cpc	r20, r4
    520e:	55 05       	cpc	r21, r5
    5210:	c0 f4       	brcc	.+48     	; 0x5242 <__udivdi3+0x7c4>
    5212:	08 94       	sec
    5214:	61 08       	sbc	r6, r1
    5216:	71 08       	sbc	r7, r1
    5218:	81 08       	sbc	r8, r1
    521a:	91 08       	sbc	r9, r1
    521c:	2e 0d       	add	r18, r14
    521e:	3f 1d       	adc	r19, r15
    5220:	40 1f       	adc	r20, r16
    5222:	51 1f       	adc	r21, r17
    5224:	2e 15       	cp	r18, r14
    5226:	3f 05       	cpc	r19, r15
    5228:	40 07       	cpc	r20, r16
    522a:	51 07       	cpc	r21, r17
    522c:	50 f0       	brcs	.+20     	; 0x5242 <__udivdi3+0x7c4>
    522e:	22 15       	cp	r18, r2
    5230:	33 05       	cpc	r19, r3
    5232:	44 05       	cpc	r20, r4
    5234:	55 05       	cpc	r21, r5
    5236:	28 f4       	brcc	.+10     	; 0x5242 <__udivdi3+0x7c4>
    5238:	08 94       	sec
    523a:	61 08       	sbc	r6, r1
    523c:	71 08       	sbc	r7, r1
    523e:	81 08       	sbc	r8, r1
    5240:	91 08       	sbc	r9, r1
    5242:	89 8d       	ldd	r24, Y+25	; 0x19
    5244:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5246:	ab 8d       	ldd	r26, Y+27	; 0x1b
    5248:	bc 8d       	ldd	r27, Y+28	; 0x1c
    524a:	8c 01       	movw	r16, r24
    524c:	ff 24       	eor	r15, r15
    524e:	ee 24       	eor	r14, r14
    5250:	e6 28       	or	r14, r6
    5252:	f7 28       	or	r15, r7
    5254:	08 29       	or	r16, r8
    5256:	19 29       	or	r17, r9
    5258:	4d c2       	rjmp	.+1178   	; 0x56f4 <__udivdi3+0xc76>
    525a:	a2 16       	cp	r10, r18
    525c:	b3 06       	cpc	r11, r19
    525e:	c4 06       	cpc	r12, r20
    5260:	d5 06       	cpc	r13, r21
    5262:	08 f4       	brcc	.+2      	; 0x5266 <__udivdi3+0x7e8>
    5264:	34 c2       	rjmp	.+1128   	; 0x56ce <__udivdi3+0xc50>
    5266:	20 30       	cpi	r18, 0x00	; 0
    5268:	90 e0       	ldi	r25, 0x00	; 0
    526a:	39 07       	cpc	r19, r25
    526c:	91 e0       	ldi	r25, 0x01	; 1
    526e:	49 07       	cpc	r20, r25
    5270:	90 e0       	ldi	r25, 0x00	; 0
    5272:	59 07       	cpc	r21, r25
    5274:	50 f4       	brcc	.+20     	; 0x528a <__udivdi3+0x80c>
    5276:	2f 3f       	cpi	r18, 0xFF	; 255
    5278:	31 05       	cpc	r19, r1
    527a:	41 05       	cpc	r20, r1
    527c:	51 05       	cpc	r21, r1
    527e:	09 f0       	breq	.+2      	; 0x5282 <__udivdi3+0x804>
    5280:	90 f4       	brcc	.+36     	; 0x52a6 <__udivdi3+0x828>
    5282:	66 24       	eor	r6, r6
    5284:	77 24       	eor	r7, r7
    5286:	43 01       	movw	r8, r6
    5288:	19 c0       	rjmp	.+50     	; 0x52bc <__udivdi3+0x83e>
    528a:	20 30       	cpi	r18, 0x00	; 0
    528c:	a0 e0       	ldi	r26, 0x00	; 0
    528e:	3a 07       	cpc	r19, r26
    5290:	a0 e0       	ldi	r26, 0x00	; 0
    5292:	4a 07       	cpc	r20, r26
    5294:	a1 e0       	ldi	r26, 0x01	; 1
    5296:	5a 07       	cpc	r21, r26
    5298:	60 f4       	brcc	.+24     	; 0x52b2 <__udivdi3+0x834>
    529a:	90 e1       	ldi	r25, 0x10	; 16
    529c:	69 2e       	mov	r6, r25
    529e:	71 2c       	mov	r7, r1
    52a0:	81 2c       	mov	r8, r1
    52a2:	91 2c       	mov	r9, r1
    52a4:	0b c0       	rjmp	.+22     	; 0x52bc <__udivdi3+0x83e>
    52a6:	88 e0       	ldi	r24, 0x08	; 8
    52a8:	68 2e       	mov	r6, r24
    52aa:	71 2c       	mov	r7, r1
    52ac:	81 2c       	mov	r8, r1
    52ae:	91 2c       	mov	r9, r1
    52b0:	05 c0       	rjmp	.+10     	; 0x52bc <__udivdi3+0x83e>
    52b2:	b8 e1       	ldi	r27, 0x18	; 24
    52b4:	6b 2e       	mov	r6, r27
    52b6:	71 2c       	mov	r7, r1
    52b8:	81 2c       	mov	r8, r1
    52ba:	91 2c       	mov	r9, r1
    52bc:	da 01       	movw	r26, r20
    52be:	c9 01       	movw	r24, r18
    52c0:	06 2c       	mov	r0, r6
    52c2:	04 c0       	rjmp	.+8      	; 0x52cc <__udivdi3+0x84e>
    52c4:	b6 95       	lsr	r27
    52c6:	a7 95       	ror	r26
    52c8:	97 95       	ror	r25
    52ca:	87 95       	ror	r24
    52cc:	0a 94       	dec	r0
    52ce:	d2 f7       	brpl	.-12     	; 0x52c4 <__udivdi3+0x846>
    52d0:	8e 56       	subi	r24, 0x6E	; 110
    52d2:	9c 4f       	sbci	r25, 0xFC	; 252
    52d4:	fc 01       	movw	r30, r24
    52d6:	80 81       	ld	r24, Z
    52d8:	68 0e       	add	r6, r24
    52da:	71 1c       	adc	r7, r1
    52dc:	81 1c       	adc	r8, r1
    52de:	91 1c       	adc	r9, r1
    52e0:	80 e2       	ldi	r24, 0x20	; 32
    52e2:	90 e0       	ldi	r25, 0x00	; 0
    52e4:	a0 e0       	ldi	r26, 0x00	; 0
    52e6:	b0 e0       	ldi	r27, 0x00	; 0
    52e8:	86 19       	sub	r24, r6
    52ea:	97 09       	sbc	r25, r7
    52ec:	a8 09       	sbc	r26, r8
    52ee:	b9 09       	sbc	r27, r9
    52f0:	89 f4       	brne	.+34     	; 0x5314 <__udivdi3+0x896>
    52f2:	2a 15       	cp	r18, r10
    52f4:	3b 05       	cpc	r19, r11
    52f6:	4c 05       	cpc	r20, r12
    52f8:	5d 05       	cpc	r21, r13
    52fa:	08 f4       	brcc	.+2      	; 0x52fe <__udivdi3+0x880>
    52fc:	ef c1       	rjmp	.+990    	; 0x56dc <__udivdi3+0xc5e>
    52fe:	2d a0       	ldd	r2, Y+37	; 0x25
    5300:	3e a0       	ldd	r3, Y+38	; 0x26
    5302:	4f a0       	ldd	r4, Y+39	; 0x27
    5304:	58 a4       	ldd	r5, Y+40	; 0x28
    5306:	2e 14       	cp	r2, r14
    5308:	3f 04       	cpc	r3, r15
    530a:	40 06       	cpc	r4, r16
    530c:	51 06       	cpc	r5, r17
    530e:	08 f0       	brcs	.+2      	; 0x5312 <__udivdi3+0x894>
    5310:	e5 c1       	rjmp	.+970    	; 0x56dc <__udivdi3+0xc5e>
    5312:	dd c1       	rjmp	.+954    	; 0x56ce <__udivdi3+0xc50>
    5314:	89 a7       	std	Y+41, r24	; 0x29
    5316:	19 01       	movw	r2, r18
    5318:	2a 01       	movw	r4, r20
    531a:	04 c0       	rjmp	.+8      	; 0x5324 <__udivdi3+0x8a6>
    531c:	22 0c       	add	r2, r2
    531e:	33 1c       	adc	r3, r3
    5320:	44 1c       	adc	r4, r4
    5322:	55 1c       	adc	r5, r5
    5324:	8a 95       	dec	r24
    5326:	d2 f7       	brpl	.-12     	; 0x531c <__udivdi3+0x89e>
    5328:	d8 01       	movw	r26, r16
    532a:	c7 01       	movw	r24, r14
    532c:	06 2c       	mov	r0, r6
    532e:	04 c0       	rjmp	.+8      	; 0x5338 <__udivdi3+0x8ba>
    5330:	b6 95       	lsr	r27
    5332:	a7 95       	ror	r26
    5334:	97 95       	ror	r25
    5336:	87 95       	ror	r24
    5338:	0a 94       	dec	r0
    533a:	d2 f7       	brpl	.-12     	; 0x5330 <__udivdi3+0x8b2>
    533c:	28 2a       	or	r2, r24
    533e:	39 2a       	or	r3, r25
    5340:	4a 2a       	or	r4, r26
    5342:	5b 2a       	or	r5, r27
    5344:	a8 01       	movw	r20, r16
    5346:	97 01       	movw	r18, r14
    5348:	09 a4       	ldd	r0, Y+41	; 0x29
    534a:	04 c0       	rjmp	.+8      	; 0x5354 <__udivdi3+0x8d6>
    534c:	22 0f       	add	r18, r18
    534e:	33 1f       	adc	r19, r19
    5350:	44 1f       	adc	r20, r20
    5352:	55 1f       	adc	r21, r21
    5354:	0a 94       	dec	r0
    5356:	d2 f7       	brpl	.-12     	; 0x534c <__udivdi3+0x8ce>
    5358:	29 ab       	std	Y+49, r18	; 0x31
    535a:	3a ab       	std	Y+50, r19	; 0x32
    535c:	4b ab       	std	Y+51, r20	; 0x33
    535e:	5c ab       	std	Y+52, r21	; 0x34
    5360:	86 01       	movw	r16, r12
    5362:	75 01       	movw	r14, r10
    5364:	06 2c       	mov	r0, r6
    5366:	04 c0       	rjmp	.+8      	; 0x5370 <__udivdi3+0x8f2>
    5368:	16 95       	lsr	r17
    536a:	07 95       	ror	r16
    536c:	f7 94       	ror	r15
    536e:	e7 94       	ror	r14
    5370:	0a 94       	dec	r0
    5372:	d2 f7       	brpl	.-12     	; 0x5368 <__udivdi3+0x8ea>
    5374:	b6 01       	movw	r22, r12
    5376:	a5 01       	movw	r20, r10
    5378:	09 a4       	ldd	r0, Y+41	; 0x29
    537a:	04 c0       	rjmp	.+8      	; 0x5384 <__udivdi3+0x906>
    537c:	44 0f       	add	r20, r20
    537e:	55 1f       	adc	r21, r21
    5380:	66 1f       	adc	r22, r22
    5382:	77 1f       	adc	r23, r23
    5384:	0a 94       	dec	r0
    5386:	d2 f7       	brpl	.-12     	; 0x537c <__udivdi3+0x8fe>
    5388:	4d 8f       	std	Y+29, r20	; 0x1d
    538a:	5e 8f       	std	Y+30, r21	; 0x1e
    538c:	6f 8f       	std	Y+31, r22	; 0x1f
    538e:	78 a3       	std	Y+32, r23	; 0x20
    5390:	6d a1       	ldd	r22, Y+37	; 0x25
    5392:	7e a1       	ldd	r23, Y+38	; 0x26
    5394:	8f a1       	ldd	r24, Y+39	; 0x27
    5396:	98 a5       	ldd	r25, Y+40	; 0x28
    5398:	04 c0       	rjmp	.+8      	; 0x53a2 <__udivdi3+0x924>
    539a:	96 95       	lsr	r25
    539c:	87 95       	ror	r24
    539e:	77 95       	ror	r23
    53a0:	67 95       	ror	r22
    53a2:	6a 94       	dec	r6
    53a4:	d2 f7       	brpl	.-12     	; 0x539a <__udivdi3+0x91c>
    53a6:	3b 01       	movw	r6, r22
    53a8:	4c 01       	movw	r8, r24
    53aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    53ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    53ae:	af 8d       	ldd	r26, Y+31	; 0x1f
    53b0:	b8 a1       	ldd	r27, Y+32	; 0x20
    53b2:	86 29       	or	r24, r6
    53b4:	97 29       	or	r25, r7
    53b6:	a8 29       	or	r26, r8
    53b8:	b9 29       	or	r27, r9
    53ba:	8d 8f       	std	Y+29, r24	; 0x1d
    53bc:	9e 8f       	std	Y+30, r25	; 0x1e
    53be:	af 8f       	std	Y+31, r26	; 0x1f
    53c0:	b8 a3       	std	Y+32, r27	; 0x20
    53c2:	52 01       	movw	r10, r4
    53c4:	cc 24       	eor	r12, r12
    53c6:	dd 24       	eor	r13, r13
    53c8:	a9 a2       	std	Y+33, r10	; 0x21
    53ca:	ba a2       	std	Y+34, r11	; 0x22
    53cc:	cb a2       	std	Y+35, r12	; 0x23
    53ce:	dc a2       	std	Y+36, r13	; 0x24
    53d0:	a2 01       	movw	r20, r4
    53d2:	91 01       	movw	r18, r2
    53d4:	40 70       	andi	r20, 0x00	; 0
    53d6:	50 70       	andi	r21, 0x00	; 0
    53d8:	2d ab       	std	Y+53, r18	; 0x35
    53da:	3e ab       	std	Y+54, r19	; 0x36
    53dc:	4f ab       	std	Y+55, r20	; 0x37
    53de:	58 af       	std	Y+56, r21	; 0x38
    53e0:	c8 01       	movw	r24, r16
    53e2:	b7 01       	movw	r22, r14
    53e4:	a6 01       	movw	r20, r12
    53e6:	95 01       	movw	r18, r10
    53e8:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__udivmodsi4>
    53ec:	62 2e       	mov	r6, r18
    53ee:	a3 2e       	mov	r10, r19
    53f0:	d4 2e       	mov	r13, r20
    53f2:	c5 2e       	mov	r12, r21
    53f4:	6d a7       	std	Y+45, r22	; 0x2d
    53f6:	7e a7       	std	Y+46, r23	; 0x2e
    53f8:	8f a7       	std	Y+47, r24	; 0x2f
    53fa:	98 ab       	std	Y+48, r25	; 0x30
    53fc:	c8 01       	movw	r24, r16
    53fe:	b7 01       	movw	r22, r14
    5400:	29 a1       	ldd	r18, Y+33	; 0x21
    5402:	3a a1       	ldd	r19, Y+34	; 0x22
    5404:	4b a1       	ldd	r20, Y+35	; 0x23
    5406:	5c a1       	ldd	r21, Y+36	; 0x24
    5408:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__udivmodsi4>
    540c:	e6 2c       	mov	r14, r6
    540e:	fa 2c       	mov	r15, r10
    5410:	0d 2d       	mov	r16, r13
    5412:	1c 2d       	mov	r17, r12
    5414:	e9 8e       	std	Y+25, r14	; 0x19
    5416:	fa 8e       	std	Y+26, r15	; 0x1a
    5418:	0b 8f       	std	Y+27, r16	; 0x1b
    541a:	1c 8f       	std	Y+28, r17	; 0x1c
    541c:	c8 01       	movw	r24, r16
    541e:	b7 01       	movw	r22, r14
    5420:	2d a9       	ldd	r18, Y+53	; 0x35
    5422:	3e a9       	ldd	r19, Y+54	; 0x36
    5424:	4f a9       	ldd	r20, Y+55	; 0x37
    5426:	58 ad       	ldd	r21, Y+56	; 0x38
    5428:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <__mulsi3>
    542c:	ad a4       	ldd	r10, Y+45	; 0x2d
    542e:	be a4       	ldd	r11, Y+46	; 0x2e
    5430:	cf a4       	ldd	r12, Y+47	; 0x2f
    5432:	d8 a8       	ldd	r13, Y+48	; 0x30
    5434:	85 01       	movw	r16, r10
    5436:	ff 24       	eor	r15, r15
    5438:	ee 24       	eor	r14, r14
    543a:	ad 8c       	ldd	r10, Y+29	; 0x1d
    543c:	be 8c       	ldd	r11, Y+30	; 0x1e
    543e:	cf 8c       	ldd	r12, Y+31	; 0x1f
    5440:	d8 a0       	ldd	r13, Y+32	; 0x20
    5442:	96 01       	movw	r18, r12
    5444:	44 27       	eor	r20, r20
    5446:	55 27       	eor	r21, r21
    5448:	e2 2a       	or	r14, r18
    544a:	f3 2a       	or	r15, r19
    544c:	04 2b       	or	r16, r20
    544e:	15 2b       	or	r17, r21
    5450:	e6 16       	cp	r14, r22
    5452:	f7 06       	cpc	r15, r23
    5454:	08 07       	cpc	r16, r24
    5456:	19 07       	cpc	r17, r25
    5458:	30 f5       	brcc	.+76     	; 0x54a6 <__udivdi3+0xa28>
    545a:	29 8d       	ldd	r18, Y+25	; 0x19
    545c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    545e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    5460:	5c 8d       	ldd	r21, Y+28	; 0x1c
    5462:	21 50       	subi	r18, 0x01	; 1
    5464:	30 40       	sbci	r19, 0x00	; 0
    5466:	40 40       	sbci	r20, 0x00	; 0
    5468:	50 40       	sbci	r21, 0x00	; 0
    546a:	29 8f       	std	Y+25, r18	; 0x19
    546c:	3a 8f       	std	Y+26, r19	; 0x1a
    546e:	4b 8f       	std	Y+27, r20	; 0x1b
    5470:	5c 8f       	std	Y+28, r21	; 0x1c
    5472:	e2 0c       	add	r14, r2
    5474:	f3 1c       	adc	r15, r3
    5476:	04 1d       	adc	r16, r4
    5478:	15 1d       	adc	r17, r5
    547a:	e2 14       	cp	r14, r2
    547c:	f3 04       	cpc	r15, r3
    547e:	04 05       	cpc	r16, r4
    5480:	15 05       	cpc	r17, r5
    5482:	88 f0       	brcs	.+34     	; 0x54a6 <__udivdi3+0xa28>
    5484:	e6 16       	cp	r14, r22
    5486:	f7 06       	cpc	r15, r23
    5488:	08 07       	cpc	r16, r24
    548a:	19 07       	cpc	r17, r25
    548c:	60 f4       	brcc	.+24     	; 0x54a6 <__udivdi3+0xa28>
    548e:	21 50       	subi	r18, 0x01	; 1
    5490:	30 40       	sbci	r19, 0x00	; 0
    5492:	40 40       	sbci	r20, 0x00	; 0
    5494:	50 40       	sbci	r21, 0x00	; 0
    5496:	29 8f       	std	Y+25, r18	; 0x19
    5498:	3a 8f       	std	Y+26, r19	; 0x1a
    549a:	4b 8f       	std	Y+27, r20	; 0x1b
    549c:	5c 8f       	std	Y+28, r21	; 0x1c
    549e:	e2 0c       	add	r14, r2
    54a0:	f3 1c       	adc	r15, r3
    54a2:	04 1d       	adc	r16, r4
    54a4:	15 1d       	adc	r17, r5
    54a6:	e6 1a       	sub	r14, r22
    54a8:	f7 0a       	sbc	r15, r23
    54aa:	08 0b       	sbc	r16, r24
    54ac:	19 0b       	sbc	r17, r25
    54ae:	c8 01       	movw	r24, r16
    54b0:	b7 01       	movw	r22, r14
    54b2:	29 a1       	ldd	r18, Y+33	; 0x21
    54b4:	3a a1       	ldd	r19, Y+34	; 0x22
    54b6:	4b a1       	ldd	r20, Y+35	; 0x23
    54b8:	5c a1       	ldd	r21, Y+36	; 0x24
    54ba:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__udivmodsi4>
    54be:	a2 2e       	mov	r10, r18
    54c0:	d3 2e       	mov	r13, r19
    54c2:	c4 2e       	mov	r12, r20
    54c4:	b5 2e       	mov	r11, r21
    54c6:	6d a7       	std	Y+45, r22	; 0x2d
    54c8:	7e a7       	std	Y+46, r23	; 0x2e
    54ca:	8f a7       	std	Y+47, r24	; 0x2f
    54cc:	98 ab       	std	Y+48, r25	; 0x30
    54ce:	c8 01       	movw	r24, r16
    54d0:	b7 01       	movw	r22, r14
    54d2:	29 a1       	ldd	r18, Y+33	; 0x21
    54d4:	3a a1       	ldd	r19, Y+34	; 0x22
    54d6:	4b a1       	ldd	r20, Y+35	; 0x23
    54d8:	5c a1       	ldd	r21, Y+36	; 0x24
    54da:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__udivmodsi4>
    54de:	6a 2c       	mov	r6, r10
    54e0:	7d 2c       	mov	r7, r13
    54e2:	8c 2c       	mov	r8, r12
    54e4:	9b 2c       	mov	r9, r11
    54e6:	c4 01       	movw	r24, r8
    54e8:	b3 01       	movw	r22, r6
    54ea:	2d a9       	ldd	r18, Y+53	; 0x35
    54ec:	3e a9       	ldd	r19, Y+54	; 0x36
    54ee:	4f a9       	ldd	r20, Y+55	; 0x37
    54f0:	58 ad       	ldd	r21, Y+56	; 0x38
    54f2:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <__mulsi3>
    54f6:	9b 01       	movw	r18, r22
    54f8:	ac 01       	movw	r20, r24
    54fa:	ad a4       	ldd	r10, Y+45	; 0x2d
    54fc:	be a4       	ldd	r11, Y+46	; 0x2e
    54fe:	cf a4       	ldd	r12, Y+47	; 0x2f
    5500:	d8 a8       	ldd	r13, Y+48	; 0x30
    5502:	d5 01       	movw	r26, r10
    5504:	99 27       	eor	r25, r25
    5506:	88 27       	eor	r24, r24
    5508:	ad 8c       	ldd	r10, Y+29	; 0x1d
    550a:	be 8c       	ldd	r11, Y+30	; 0x1e
    550c:	cf 8c       	ldd	r12, Y+31	; 0x1f
    550e:	d8 a0       	ldd	r13, Y+32	; 0x20
    5510:	6f ef       	ldi	r22, 0xFF	; 255
    5512:	e6 2e       	mov	r14, r22
    5514:	6f ef       	ldi	r22, 0xFF	; 255
    5516:	f6 2e       	mov	r15, r22
    5518:	01 2d       	mov	r16, r1
    551a:	11 2d       	mov	r17, r1
    551c:	ae 20       	and	r10, r14
    551e:	bf 20       	and	r11, r15
    5520:	c0 22       	and	r12, r16
    5522:	d1 22       	and	r13, r17
    5524:	8a 29       	or	r24, r10
    5526:	9b 29       	or	r25, r11
    5528:	ac 29       	or	r26, r12
    552a:	bd 29       	or	r27, r13
    552c:	82 17       	cp	r24, r18
    552e:	93 07       	cpc	r25, r19
    5530:	a4 07       	cpc	r26, r20
    5532:	b5 07       	cpc	r27, r21
    5534:	e0 f4       	brcc	.+56     	; 0x556e <__udivdi3+0xaf0>
    5536:	08 94       	sec
    5538:	61 08       	sbc	r6, r1
    553a:	71 08       	sbc	r7, r1
    553c:	81 08       	sbc	r8, r1
    553e:	91 08       	sbc	r9, r1
    5540:	82 0d       	add	r24, r2
    5542:	93 1d       	adc	r25, r3
    5544:	a4 1d       	adc	r26, r4
    5546:	b5 1d       	adc	r27, r5
    5548:	82 15       	cp	r24, r2
    554a:	93 05       	cpc	r25, r3
    554c:	a4 05       	cpc	r26, r4
    554e:	b5 05       	cpc	r27, r5
    5550:	70 f0       	brcs	.+28     	; 0x556e <__udivdi3+0xaf0>
    5552:	82 17       	cp	r24, r18
    5554:	93 07       	cpc	r25, r19
    5556:	a4 07       	cpc	r26, r20
    5558:	b5 07       	cpc	r27, r21
    555a:	48 f4       	brcc	.+18     	; 0x556e <__udivdi3+0xaf0>
    555c:	08 94       	sec
    555e:	61 08       	sbc	r6, r1
    5560:	71 08       	sbc	r7, r1
    5562:	81 08       	sbc	r8, r1
    5564:	91 08       	sbc	r9, r1
    5566:	82 0d       	add	r24, r2
    5568:	93 1d       	adc	r25, r3
    556a:	a4 1d       	adc	r26, r4
    556c:	b5 1d       	adc	r27, r5
    556e:	1c 01       	movw	r2, r24
    5570:	2d 01       	movw	r4, r26
    5572:	22 1a       	sub	r2, r18
    5574:	33 0a       	sbc	r3, r19
    5576:	44 0a       	sbc	r4, r20
    5578:	55 0a       	sbc	r5, r21
    557a:	2d 8e       	std	Y+29, r2	; 0x1d
    557c:	3e 8e       	std	Y+30, r3	; 0x1e
    557e:	4f 8e       	std	Y+31, r4	; 0x1f
    5580:	58 a2       	std	Y+32, r5	; 0x20
    5582:	a9 8c       	ldd	r10, Y+25	; 0x19
    5584:	ba 8c       	ldd	r11, Y+26	; 0x1a
    5586:	cb 8c       	ldd	r12, Y+27	; 0x1b
    5588:	dc 8c       	ldd	r13, Y+28	; 0x1c
    558a:	85 01       	movw	r16, r10
    558c:	ff 24       	eor	r15, r15
    558e:	ee 24       	eor	r14, r14
    5590:	e6 28       	or	r14, r6
    5592:	f7 28       	or	r15, r7
    5594:	08 29       	or	r16, r8
    5596:	19 29       	or	r17, r9
    5598:	af ef       	ldi	r26, 0xFF	; 255
    559a:	aa 2e       	mov	r10, r26
    559c:	af ef       	ldi	r26, 0xFF	; 255
    559e:	ba 2e       	mov	r11, r26
    55a0:	c1 2c       	mov	r12, r1
    55a2:	d1 2c       	mov	r13, r1
    55a4:	ae 20       	and	r10, r14
    55a6:	bf 20       	and	r11, r15
    55a8:	c0 22       	and	r12, r16
    55aa:	d1 22       	and	r13, r17
    55ac:	18 01       	movw	r2, r16
    55ae:	44 24       	eor	r4, r4
    55b0:	55 24       	eor	r5, r5
    55b2:	69 a8       	ldd	r6, Y+49	; 0x31
    55b4:	7a a8       	ldd	r7, Y+50	; 0x32
    55b6:	8b a8       	ldd	r8, Y+51	; 0x33
    55b8:	9c a8       	ldd	r9, Y+52	; 0x34
    55ba:	2f ef       	ldi	r18, 0xFF	; 255
    55bc:	3f ef       	ldi	r19, 0xFF	; 255
    55be:	40 e0       	ldi	r20, 0x00	; 0
    55c0:	50 e0       	ldi	r21, 0x00	; 0
    55c2:	62 22       	and	r6, r18
    55c4:	73 22       	and	r7, r19
    55c6:	84 22       	and	r8, r20
    55c8:	95 22       	and	r9, r21
    55ca:	69 a9       	ldd	r22, Y+49	; 0x31
    55cc:	7a a9       	ldd	r23, Y+50	; 0x32
    55ce:	8b a9       	ldd	r24, Y+51	; 0x33
    55d0:	9c a9       	ldd	r25, Y+52	; 0x34
    55d2:	ac 01       	movw	r20, r24
    55d4:	66 27       	eor	r22, r22
    55d6:	77 27       	eor	r23, r23
    55d8:	49 8f       	std	Y+25, r20	; 0x19
    55da:	5a 8f       	std	Y+26, r21	; 0x1a
    55dc:	6b 8f       	std	Y+27, r22	; 0x1b
    55de:	7c 8f       	std	Y+28, r23	; 0x1c
    55e0:	c6 01       	movw	r24, r12
    55e2:	b5 01       	movw	r22, r10
    55e4:	a4 01       	movw	r20, r8
    55e6:	93 01       	movw	r18, r6
    55e8:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <__mulsi3>
    55ec:	69 a3       	std	Y+33, r22	; 0x21
    55ee:	7a a3       	std	Y+34, r23	; 0x22
    55f0:	8b a3       	std	Y+35, r24	; 0x23
    55f2:	9c a3       	std	Y+36, r25	; 0x24
    55f4:	c6 01       	movw	r24, r12
    55f6:	b5 01       	movw	r22, r10
    55f8:	29 8d       	ldd	r18, Y+25	; 0x19
    55fa:	3a 8d       	ldd	r19, Y+26	; 0x1a
    55fc:	4b 8d       	ldd	r20, Y+27	; 0x1b
    55fe:	5c 8d       	ldd	r21, Y+28	; 0x1c
    5600:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <__mulsi3>
    5604:	5b 01       	movw	r10, r22
    5606:	6c 01       	movw	r12, r24
    5608:	c2 01       	movw	r24, r4
    560a:	b1 01       	movw	r22, r2
    560c:	a4 01       	movw	r20, r8
    560e:	93 01       	movw	r18, r6
    5610:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <__mulsi3>
    5614:	3b 01       	movw	r6, r22
    5616:	4c 01       	movw	r8, r24
    5618:	c2 01       	movw	r24, r4
    561a:	b1 01       	movw	r22, r2
    561c:	29 8d       	ldd	r18, Y+25	; 0x19
    561e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    5620:	4b 8d       	ldd	r20, Y+27	; 0x1b
    5622:	5c 8d       	ldd	r21, Y+28	; 0x1c
    5624:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <__mulsi3>
    5628:	9b 01       	movw	r18, r22
    562a:	ac 01       	movw	r20, r24
    562c:	a6 0c       	add	r10, r6
    562e:	b7 1c       	adc	r11, r7
    5630:	c8 1c       	adc	r12, r8
    5632:	d9 1c       	adc	r13, r9
    5634:	29 a0       	ldd	r2, Y+33	; 0x21
    5636:	3a a0       	ldd	r3, Y+34	; 0x22
    5638:	4b a0       	ldd	r4, Y+35	; 0x23
    563a:	5c a0       	ldd	r5, Y+36	; 0x24
    563c:	c2 01       	movw	r24, r4
    563e:	aa 27       	eor	r26, r26
    5640:	bb 27       	eor	r27, r27
    5642:	a8 0e       	add	r10, r24
    5644:	b9 1e       	adc	r11, r25
    5646:	ca 1e       	adc	r12, r26
    5648:	db 1e       	adc	r13, r27
    564a:	a6 14       	cp	r10, r6
    564c:	b7 04       	cpc	r11, r7
    564e:	c8 04       	cpc	r12, r8
    5650:	d9 04       	cpc	r13, r9
    5652:	20 f4       	brcc	.+8      	; 0x565c <__udivdi3+0xbde>
    5654:	20 50       	subi	r18, 0x00	; 0
    5656:	30 40       	sbci	r19, 0x00	; 0
    5658:	4f 4f       	sbci	r20, 0xFF	; 255
    565a:	5f 4f       	sbci	r21, 0xFF	; 255
    565c:	c6 01       	movw	r24, r12
    565e:	aa 27       	eor	r26, r26
    5660:	bb 27       	eor	r27, r27
    5662:	82 0f       	add	r24, r18
    5664:	93 1f       	adc	r25, r19
    5666:	a4 1f       	adc	r26, r20
    5668:	b5 1f       	adc	r27, r21
    566a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    566c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    566e:	4f 8d       	ldd	r20, Y+31	; 0x1f
    5670:	58 a1       	ldd	r21, Y+32	; 0x20
    5672:	28 17       	cp	r18, r24
    5674:	39 07       	cpc	r19, r25
    5676:	4a 07       	cpc	r20, r26
    5678:	5b 07       	cpc	r21, r27
    567a:	18 f1       	brcs	.+70     	; 0x56c2 <__udivdi3+0xc44>
    567c:	82 17       	cp	r24, r18
    567e:	93 07       	cpc	r25, r19
    5680:	a4 07       	cpc	r26, r20
    5682:	b5 07       	cpc	r27, r21
    5684:	a1 f5       	brne	.+104    	; 0x56ee <__udivdi3+0xc70>
    5686:	65 01       	movw	r12, r10
    5688:	bb 24       	eor	r11, r11
    568a:	aa 24       	eor	r10, r10
    568c:	89 a1       	ldd	r24, Y+33	; 0x21
    568e:	9a a1       	ldd	r25, Y+34	; 0x22
    5690:	ab a1       	ldd	r26, Y+35	; 0x23
    5692:	bc a1       	ldd	r27, Y+36	; 0x24
    5694:	a0 70       	andi	r26, 0x00	; 0
    5696:	b0 70       	andi	r27, 0x00	; 0
    5698:	a8 0e       	add	r10, r24
    569a:	b9 1e       	adc	r11, r25
    569c:	ca 1e       	adc	r12, r26
    569e:	db 1e       	adc	r13, r27
    56a0:	8d a1       	ldd	r24, Y+37	; 0x25
    56a2:	9e a1       	ldd	r25, Y+38	; 0x26
    56a4:	af a1       	ldd	r26, Y+39	; 0x27
    56a6:	b8 a5       	ldd	r27, Y+40	; 0x28
    56a8:	09 a4       	ldd	r0, Y+41	; 0x29
    56aa:	04 c0       	rjmp	.+8      	; 0x56b4 <__udivdi3+0xc36>
    56ac:	88 0f       	add	r24, r24
    56ae:	99 1f       	adc	r25, r25
    56b0:	aa 1f       	adc	r26, r26
    56b2:	bb 1f       	adc	r27, r27
    56b4:	0a 94       	dec	r0
    56b6:	d2 f7       	brpl	.-12     	; 0x56ac <__udivdi3+0xc2e>
    56b8:	8a 15       	cp	r24, r10
    56ba:	9b 05       	cpc	r25, r11
    56bc:	ac 05       	cpc	r26, r12
    56be:	bd 05       	cpc	r27, r13
    56c0:	b0 f4       	brcc	.+44     	; 0x56ee <__udivdi3+0xc70>
    56c2:	08 94       	sec
    56c4:	e1 08       	sbc	r14, r1
    56c6:	f1 08       	sbc	r15, r1
    56c8:	01 09       	sbc	r16, r1
    56ca:	11 09       	sbc	r17, r1
    56cc:	10 c0       	rjmp	.+32     	; 0x56ee <__udivdi3+0xc70>
    56ce:	aa 24       	eor	r10, r10
    56d0:	bb 24       	eor	r11, r11
    56d2:	65 01       	movw	r12, r10
    56d4:	ee 24       	eor	r14, r14
    56d6:	ff 24       	eor	r15, r15
    56d8:	87 01       	movw	r16, r14
    56da:	0c c0       	rjmp	.+24     	; 0x56f4 <__udivdi3+0xc76>
    56dc:	aa 24       	eor	r10, r10
    56de:	bb 24       	eor	r11, r11
    56e0:	65 01       	movw	r12, r10
    56e2:	81 e0       	ldi	r24, 0x01	; 1
    56e4:	e8 2e       	mov	r14, r24
    56e6:	f1 2c       	mov	r15, r1
    56e8:	01 2d       	mov	r16, r1
    56ea:	11 2d       	mov	r17, r1
    56ec:	03 c0       	rjmp	.+6      	; 0x56f4 <__udivdi3+0xc76>
    56ee:	aa 24       	eor	r10, r10
    56f0:	bb 24       	eor	r11, r11
    56f2:	65 01       	movw	r12, r10
    56f4:	fe 01       	movw	r30, r28
    56f6:	71 96       	adiw	r30, 0x11	; 17
    56f8:	88 e0       	ldi	r24, 0x08	; 8
    56fa:	df 01       	movw	r26, r30
    56fc:	1d 92       	st	X+, r1
    56fe:	8a 95       	dec	r24
    5700:	e9 f7       	brne	.-6      	; 0x56fc <__udivdi3+0xc7e>
    5702:	e9 8a       	std	Y+17, r14	; 0x11
    5704:	fa 8a       	std	Y+18, r15	; 0x12
    5706:	0b 8b       	std	Y+19, r16	; 0x13
    5708:	1c 8b       	std	Y+20, r17	; 0x14
    570a:	ad 8a       	std	Y+21, r10	; 0x15
    570c:	be 8a       	std	Y+22, r11	; 0x16
    570e:	cf 8a       	std	Y+23, r12	; 0x17
    5710:	d8 8e       	std	Y+24, r13	; 0x18
    5712:	2e 2d       	mov	r18, r14
    5714:	3a 89       	ldd	r19, Y+18	; 0x12
    5716:	4b 89       	ldd	r20, Y+19	; 0x13
    5718:	5c 89       	ldd	r21, Y+20	; 0x14
    571a:	6a 2d       	mov	r22, r10
    571c:	7e 89       	ldd	r23, Y+22	; 0x16
    571e:	8f 89       	ldd	r24, Y+23	; 0x17
    5720:	98 8d       	ldd	r25, Y+24	; 0x18
    5722:	e8 96       	adiw	r28, 0x38	; 56
    5724:	e2 e1       	ldi	r30, 0x12	; 18
    5726:	0c 94 48 2d 	jmp	0x5a90	; 0x5a90 <__epilogue_restores__>

0000572a <vfprintf>:
    572a:	6f 92       	push	r6
    572c:	7f 92       	push	r7
    572e:	8f 92       	push	r8
    5730:	9f 92       	push	r9
    5732:	af 92       	push	r10
    5734:	bf 92       	push	r11
    5736:	cf 92       	push	r12
    5738:	df 92       	push	r13
    573a:	ef 92       	push	r14
    573c:	ff 92       	push	r15
    573e:	0f 93       	push	r16
    5740:	1f 93       	push	r17
    5742:	df 93       	push	r29
    5744:	cf 93       	push	r28
    5746:	cd b7       	in	r28, 0x3d	; 61
    5748:	de b7       	in	r29, 0x3e	; 62
    574a:	2c 97       	sbiw	r28, 0x0c	; 12
    574c:	0f b6       	in	r0, 0x3f	; 63
    574e:	f8 94       	cli
    5750:	de bf       	out	0x3e, r29	; 62
    5752:	0f be       	out	0x3f, r0	; 63
    5754:	cd bf       	out	0x3d, r28	; 61
    5756:	6c 01       	movw	r12, r24
    5758:	3b 01       	movw	r6, r22
    575a:	8a 01       	movw	r16, r20
    575c:	fc 01       	movw	r30, r24
    575e:	17 82       	std	Z+7, r1	; 0x07
    5760:	16 82       	std	Z+6, r1	; 0x06
    5762:	83 81       	ldd	r24, Z+3	; 0x03
    5764:	81 fd       	sbrc	r24, 1
    5766:	03 c0       	rjmp	.+6      	; 0x576e <vfprintf+0x44>
    5768:	1e c1       	rjmp	.+572    	; 0x59a6 <vfprintf+0x27c>
    576a:	85 01       	movw	r16, r10
    576c:	04 c0       	rjmp	.+8      	; 0x5776 <vfprintf+0x4c>
    576e:	4e 01       	movw	r8, r28
    5770:	08 94       	sec
    5772:	81 1c       	adc	r8, r1
    5774:	91 1c       	adc	r9, r1
    5776:	f6 01       	movw	r30, r12
    5778:	e3 80       	ldd	r14, Z+3	; 0x03
    577a:	f3 01       	movw	r30, r6
    577c:	e3 fc       	sbrc	r14, 3
    577e:	85 91       	lpm	r24, Z+
    5780:	e3 fe       	sbrs	r14, 3
    5782:	81 91       	ld	r24, Z+
    5784:	3f 01       	movw	r6, r30
    5786:	88 23       	and	r24, r24
    5788:	09 f4       	brne	.+2      	; 0x578c <vfprintf+0x62>
    578a:	09 c1       	rjmp	.+530    	; 0x599e <vfprintf+0x274>
    578c:	85 32       	cpi	r24, 0x25	; 37
    578e:	51 f4       	brne	.+20     	; 0x57a4 <vfprintf+0x7a>
    5790:	e3 fc       	sbrc	r14, 3
    5792:	25 91       	lpm	r18, Z+
    5794:	e3 fe       	sbrs	r14, 3
    5796:	21 91       	ld	r18, Z+
    5798:	3f 01       	movw	r6, r30
    579a:	25 32       	cpi	r18, 0x25	; 37
    579c:	11 f0       	breq	.+4      	; 0x57a2 <vfprintf+0x78>
    579e:	ff 24       	eor	r15, r15
    57a0:	23 c0       	rjmp	.+70     	; 0x57e8 <vfprintf+0xbe>
    57a2:	85 e2       	ldi	r24, 0x25	; 37
    57a4:	90 e0       	ldi	r25, 0x00	; 0
    57a6:	b6 01       	movw	r22, r12
    57a8:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <fputc>
    57ac:	58 01       	movw	r10, r16
    57ae:	dd cf       	rjmp	.-70     	; 0x576a <vfprintf+0x40>
    57b0:	22 23       	and	r18, r18
    57b2:	09 f4       	brne	.+2      	; 0x57b6 <vfprintf+0x8c>
    57b4:	89 c0       	rjmp	.+274    	; 0x58c8 <vfprintf+0x19e>
    57b6:	84 ee       	ldi	r24, 0xE4	; 228
    57b8:	93 e0       	ldi	r25, 0x03	; 3
    57ba:	62 2f       	mov	r22, r18
    57bc:	70 e0       	ldi	r23, 0x00	; 0
    57be:	2c 87       	std	Y+12, r18	; 0x0c
    57c0:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <strchr_P>
    57c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    57c6:	00 97       	sbiw	r24, 0x00	; 0
    57c8:	49 f4       	brne	.+18     	; 0x57dc <vfprintf+0xb2>
    57ca:	23 32       	cpi	r18, 0x23	; 35
    57cc:	19 f4       	brne	.+6      	; 0x57d4 <vfprintf+0xaa>
    57ce:	f0 e1       	ldi	r31, 0x10	; 16
    57d0:	ff 2a       	or	r15, r31
    57d2:	04 c0       	rjmp	.+8      	; 0x57dc <vfprintf+0xb2>
    57d4:	2c 36       	cpi	r18, 0x6C	; 108
    57d6:	69 f4       	brne	.+26     	; 0x57f2 <vfprintf+0xc8>
    57d8:	20 e8       	ldi	r18, 0x80	; 128
    57da:	f2 2a       	or	r15, r18
    57dc:	f3 01       	movw	r30, r6
    57de:	e3 fc       	sbrc	r14, 3
    57e0:	25 91       	lpm	r18, Z+
    57e2:	e3 fe       	sbrs	r14, 3
    57e4:	21 91       	ld	r18, Z+
    57e6:	3f 01       	movw	r6, r30
    57e8:	f7 fe       	sbrs	r15, 7
    57ea:	e2 cf       	rjmp	.-60     	; 0x57b0 <vfprintf+0x86>
    57ec:	22 23       	and	r18, r18
    57ee:	09 f4       	brne	.+2      	; 0x57f2 <vfprintf+0xc8>
    57f0:	3f c0       	rjmp	.+126    	; 0x5870 <vfprintf+0x146>
    57f2:	8d ed       	ldi	r24, 0xDD	; 221
    57f4:	93 e0       	ldi	r25, 0x03	; 3
    57f6:	62 2f       	mov	r22, r18
    57f8:	70 e0       	ldi	r23, 0x00	; 0
    57fa:	2c 87       	std	Y+12, r18	; 0x0c
    57fc:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <strchr_P>
    5800:	2c 85       	ldd	r18, Y+12	; 0x0c
    5802:	00 97       	sbiw	r24, 0x00	; 0
    5804:	41 f0       	breq	.+16     	; 0x5816 <vfprintf+0xec>
    5806:	64 e0       	ldi	r22, 0x04	; 4
    5808:	a6 2e       	mov	r10, r22
    580a:	b1 2c       	mov	r11, r1
    580c:	a0 0e       	add	r10, r16
    580e:	b1 1e       	adc	r11, r17
    5810:	8f e3       	ldi	r24, 0x3F	; 63
    5812:	90 e0       	ldi	r25, 0x00	; 0
    5814:	0f c0       	rjmp	.+30     	; 0x5834 <vfprintf+0x10a>
    5816:	23 36       	cpi	r18, 0x63	; 99
    5818:	29 f0       	breq	.+10     	; 0x5824 <vfprintf+0xfa>
    581a:	23 37       	cpi	r18, 0x73	; 115
    581c:	89 f0       	breq	.+34     	; 0x5840 <vfprintf+0x116>
    581e:	23 35       	cpi	r18, 0x53	; 83
    5820:	29 f5       	brne	.+74     	; 0x586c <vfprintf+0x142>
    5822:	0c c0       	rjmp	.+24     	; 0x583c <vfprintf+0x112>
    5824:	52 e0       	ldi	r21, 0x02	; 2
    5826:	a5 2e       	mov	r10, r21
    5828:	b1 2c       	mov	r11, r1
    582a:	a0 0e       	add	r10, r16
    582c:	b1 1e       	adc	r11, r17
    582e:	f8 01       	movw	r30, r16
    5830:	80 81       	ld	r24, Z
    5832:	91 81       	ldd	r25, Z+1	; 0x01
    5834:	b6 01       	movw	r22, r12
    5836:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <fputc>
    583a:	97 cf       	rjmp	.-210    	; 0x576a <vfprintf+0x40>
    583c:	f1 e0       	ldi	r31, 0x01	; 1
    583e:	ff 2a       	or	r15, r31
    5840:	42 e0       	ldi	r20, 0x02	; 2
    5842:	a4 2e       	mov	r10, r20
    5844:	b1 2c       	mov	r11, r1
    5846:	a0 0e       	add	r10, r16
    5848:	b1 1e       	adc	r11, r17
    584a:	f8 01       	movw	r30, r16
    584c:	00 81       	ld	r16, Z
    584e:	11 81       	ldd	r17, Z+1	; 0x01
    5850:	04 c0       	rjmp	.+8      	; 0x585a <vfprintf+0x130>
    5852:	90 e0       	ldi	r25, 0x00	; 0
    5854:	b6 01       	movw	r22, r12
    5856:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <fputc>
    585a:	f8 01       	movw	r30, r16
    585c:	f0 fc       	sbrc	r15, 0
    585e:	85 91       	lpm	r24, Z+
    5860:	f0 fe       	sbrs	r15, 0
    5862:	81 91       	ld	r24, Z+
    5864:	8f 01       	movw	r16, r30
    5866:	88 23       	and	r24, r24
    5868:	a1 f7       	brne	.-24     	; 0x5852 <vfprintf+0x128>
    586a:	7f cf       	rjmp	.-258    	; 0x576a <vfprintf+0x40>
    586c:	24 36       	cpi	r18, 0x64	; 100
    586e:	11 f0       	breq	.+4      	; 0x5874 <vfprintf+0x14a>
    5870:	29 36       	cpi	r18, 0x69	; 105
    5872:	51 f5       	brne	.+84     	; 0x58c8 <vfprintf+0x19e>
    5874:	f7 fe       	sbrs	r15, 7
    5876:	0b c0       	rjmp	.+22     	; 0x588e <vfprintf+0x164>
    5878:	34 e0       	ldi	r19, 0x04	; 4
    587a:	a3 2e       	mov	r10, r19
    587c:	b1 2c       	mov	r11, r1
    587e:	a0 0e       	add	r10, r16
    5880:	b1 1e       	adc	r11, r17
    5882:	f8 01       	movw	r30, r16
    5884:	60 81       	ld	r22, Z
    5886:	71 81       	ldd	r23, Z+1	; 0x01
    5888:	82 81       	ldd	r24, Z+2	; 0x02
    588a:	93 81       	ldd	r25, Z+3	; 0x03
    588c:	0c c0       	rjmp	.+24     	; 0x58a6 <vfprintf+0x17c>
    588e:	22 e0       	ldi	r18, 0x02	; 2
    5890:	a2 2e       	mov	r10, r18
    5892:	b1 2c       	mov	r11, r1
    5894:	a0 0e       	add	r10, r16
    5896:	b1 1e       	adc	r11, r17
    5898:	f8 01       	movw	r30, r16
    589a:	60 81       	ld	r22, Z
    589c:	71 81       	ldd	r23, Z+1	; 0x01
    589e:	88 27       	eor	r24, r24
    58a0:	77 fd       	sbrc	r23, 7
    58a2:	80 95       	com	r24
    58a4:	98 2f       	mov	r25, r24
    58a6:	ff ee       	ldi	r31, 0xEF	; 239
    58a8:	ff 22       	and	r15, r31
    58aa:	97 ff       	sbrs	r25, 7
    58ac:	09 c0       	rjmp	.+18     	; 0x58c0 <vfprintf+0x196>
    58ae:	90 95       	com	r25
    58b0:	80 95       	com	r24
    58b2:	70 95       	com	r23
    58b4:	61 95       	neg	r22
    58b6:	7f 4f       	sbci	r23, 0xFF	; 255
    58b8:	8f 4f       	sbci	r24, 0xFF	; 255
    58ba:	9f 4f       	sbci	r25, 0xFF	; 255
    58bc:	20 e4       	ldi	r18, 0x40	; 64
    58be:	f2 2a       	or	r15, r18
    58c0:	a4 01       	movw	r20, r8
    58c2:	2a e0       	ldi	r18, 0x0A	; 10
    58c4:	30 e0       	ldi	r19, 0x00	; 0
    58c6:	3b c0       	rjmp	.+118    	; 0x593e <vfprintf+0x214>
    58c8:	20 37       	cpi	r18, 0x70	; 112
    58ca:	99 f0       	breq	.+38     	; 0x58f2 <vfprintf+0x1c8>
    58cc:	21 37       	cpi	r18, 0x71	; 113
    58ce:	30 f4       	brcc	.+12     	; 0x58dc <vfprintf+0x1b2>
    58d0:	28 35       	cpi	r18, 0x58	; 88
    58d2:	b1 f0       	breq	.+44     	; 0x5900 <vfprintf+0x1d6>
    58d4:	2f 36       	cpi	r18, 0x6F	; 111
    58d6:	09 f0       	breq	.+2      	; 0x58da <vfprintf+0x1b0>
    58d8:	62 c0       	rjmp	.+196    	; 0x599e <vfprintf+0x274>
    58da:	17 c0       	rjmp	.+46     	; 0x590a <vfprintf+0x1e0>
    58dc:	25 37       	cpi	r18, 0x75	; 117
    58de:	21 f0       	breq	.+8      	; 0x58e8 <vfprintf+0x1be>
    58e0:	28 37       	cpi	r18, 0x78	; 120
    58e2:	09 f0       	breq	.+2      	; 0x58e6 <vfprintf+0x1bc>
    58e4:	5c c0       	rjmp	.+184    	; 0x599e <vfprintf+0x274>
    58e6:	07 c0       	rjmp	.+14     	; 0x58f6 <vfprintf+0x1cc>
    58e8:	8f ee       	ldi	r24, 0xEF	; 239
    58ea:	f8 22       	and	r15, r24
    58ec:	2a e0       	ldi	r18, 0x0A	; 10
    58ee:	30 e0       	ldi	r19, 0x00	; 0
    58f0:	0e c0       	rjmp	.+28     	; 0x590e <vfprintf+0x1e4>
    58f2:	e0 e1       	ldi	r30, 0x10	; 16
    58f4:	fe 2a       	or	r15, r30
    58f6:	f4 e2       	ldi	r31, 0x24	; 36
    58f8:	ff 2a       	or	r15, r31
    58fa:	20 e1       	ldi	r18, 0x10	; 16
    58fc:	30 e0       	ldi	r19, 0x00	; 0
    58fe:	07 c0       	rjmp	.+14     	; 0x590e <vfprintf+0x1e4>
    5900:	24 e0       	ldi	r18, 0x04	; 4
    5902:	f2 2a       	or	r15, r18
    5904:	20 e1       	ldi	r18, 0x10	; 16
    5906:	32 e0       	ldi	r19, 0x02	; 2
    5908:	02 c0       	rjmp	.+4      	; 0x590e <vfprintf+0x1e4>
    590a:	28 e0       	ldi	r18, 0x08	; 8
    590c:	30 e0       	ldi	r19, 0x00	; 0
    590e:	f7 fe       	sbrs	r15, 7
    5910:	0b c0       	rjmp	.+22     	; 0x5928 <vfprintf+0x1fe>
    5912:	94 e0       	ldi	r25, 0x04	; 4
    5914:	a9 2e       	mov	r10, r25
    5916:	b1 2c       	mov	r11, r1
    5918:	a0 0e       	add	r10, r16
    591a:	b1 1e       	adc	r11, r17
    591c:	f8 01       	movw	r30, r16
    591e:	60 81       	ld	r22, Z
    5920:	71 81       	ldd	r23, Z+1	; 0x01
    5922:	82 81       	ldd	r24, Z+2	; 0x02
    5924:	93 81       	ldd	r25, Z+3	; 0x03
    5926:	0a c0       	rjmp	.+20     	; 0x593c <vfprintf+0x212>
    5928:	82 e0       	ldi	r24, 0x02	; 2
    592a:	a8 2e       	mov	r10, r24
    592c:	b1 2c       	mov	r11, r1
    592e:	a0 0e       	add	r10, r16
    5930:	b1 1e       	adc	r11, r17
    5932:	f8 01       	movw	r30, r16
    5934:	60 81       	ld	r22, Z
    5936:	71 81       	ldd	r23, Z+1	; 0x01
    5938:	80 e0       	ldi	r24, 0x00	; 0
    593a:	90 e0       	ldi	r25, 0x00	; 0
    593c:	a4 01       	movw	r20, r8
    593e:	0e 94 b0 2e 	call	0x5d60	; 0x5d60 <__ultoa_invert>
    5942:	e8 2e       	mov	r14, r24
    5944:	e8 18       	sub	r14, r8
    5946:	0f 2d       	mov	r16, r15
    5948:	10 e0       	ldi	r17, 0x00	; 0
    594a:	f6 fe       	sbrs	r15, 6
    594c:	05 c0       	rjmp	.+10     	; 0x5958 <vfprintf+0x22e>
    594e:	8d e2       	ldi	r24, 0x2D	; 45
    5950:	90 e0       	ldi	r25, 0x00	; 0
    5952:	b6 01       	movw	r22, r12
    5954:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <fputc>
    5958:	04 ff       	sbrs	r16, 4
    595a:	15 c0       	rjmp	.+42     	; 0x5986 <vfprintf+0x25c>
    595c:	fe 01       	movw	r30, r28
    595e:	ee 0d       	add	r30, r14
    5960:	f1 1d       	adc	r31, r1
    5962:	80 81       	ld	r24, Z
    5964:	80 33       	cpi	r24, 0x30	; 48
    5966:	79 f0       	breq	.+30     	; 0x5986 <vfprintf+0x25c>
    5968:	80 e3       	ldi	r24, 0x30	; 48
    596a:	90 e0       	ldi	r25, 0x00	; 0
    596c:	b6 01       	movw	r22, r12
    596e:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <fputc>
    5972:	02 ff       	sbrs	r16, 2
    5974:	08 c0       	rjmp	.+16     	; 0x5986 <vfprintf+0x25c>
    5976:	c8 01       	movw	r24, r16
    5978:	80 72       	andi	r24, 0x20	; 32
    597a:	90 70       	andi	r25, 0x00	; 0
    597c:	88 5a       	subi	r24, 0xA8	; 168
    597e:	9f 4f       	sbci	r25, 0xFF	; 255
    5980:	b6 01       	movw	r22, r12
    5982:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <fputc>
    5986:	ea 94       	dec	r14
    5988:	f4 01       	movw	r30, r8
    598a:	ee 0d       	add	r30, r14
    598c:	f1 1d       	adc	r31, r1
    598e:	80 81       	ld	r24, Z
    5990:	90 e0       	ldi	r25, 0x00	; 0
    5992:	b6 01       	movw	r22, r12
    5994:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <fputc>
    5998:	ee 20       	and	r14, r14
    599a:	a9 f7       	brne	.-22     	; 0x5986 <vfprintf+0x25c>
    599c:	e6 ce       	rjmp	.-564    	; 0x576a <vfprintf+0x40>
    599e:	f6 01       	movw	r30, r12
    59a0:	26 81       	ldd	r18, Z+6	; 0x06
    59a2:	37 81       	ldd	r19, Z+7	; 0x07
    59a4:	02 c0       	rjmp	.+4      	; 0x59aa <vfprintf+0x280>
    59a6:	2f ef       	ldi	r18, 0xFF	; 255
    59a8:	3f ef       	ldi	r19, 0xFF	; 255
    59aa:	c9 01       	movw	r24, r18
    59ac:	2c 96       	adiw	r28, 0x0c	; 12
    59ae:	0f b6       	in	r0, 0x3f	; 63
    59b0:	f8 94       	cli
    59b2:	de bf       	out	0x3e, r29	; 62
    59b4:	0f be       	out	0x3f, r0	; 63
    59b6:	cd bf       	out	0x3d, r28	; 61
    59b8:	cf 91       	pop	r28
    59ba:	df 91       	pop	r29
    59bc:	1f 91       	pop	r17
    59be:	0f 91       	pop	r16
    59c0:	ff 90       	pop	r15
    59c2:	ef 90       	pop	r14
    59c4:	df 90       	pop	r13
    59c6:	cf 90       	pop	r12
    59c8:	bf 90       	pop	r11
    59ca:	af 90       	pop	r10
    59cc:	9f 90       	pop	r9
    59ce:	8f 90       	pop	r8
    59d0:	7f 90       	pop	r7
    59d2:	6f 90       	pop	r6
    59d4:	08 95       	ret

000059d6 <__mulsi3>:
    59d6:	62 9f       	mul	r22, r18
    59d8:	d0 01       	movw	r26, r0
    59da:	73 9f       	mul	r23, r19
    59dc:	f0 01       	movw	r30, r0
    59de:	82 9f       	mul	r24, r18
    59e0:	e0 0d       	add	r30, r0
    59e2:	f1 1d       	adc	r31, r1
    59e4:	64 9f       	mul	r22, r20
    59e6:	e0 0d       	add	r30, r0
    59e8:	f1 1d       	adc	r31, r1
    59ea:	92 9f       	mul	r25, r18
    59ec:	f0 0d       	add	r31, r0
    59ee:	83 9f       	mul	r24, r19
    59f0:	f0 0d       	add	r31, r0
    59f2:	74 9f       	mul	r23, r20
    59f4:	f0 0d       	add	r31, r0
    59f6:	65 9f       	mul	r22, r21
    59f8:	f0 0d       	add	r31, r0
    59fa:	99 27       	eor	r25, r25
    59fc:	72 9f       	mul	r23, r18
    59fe:	b0 0d       	add	r27, r0
    5a00:	e1 1d       	adc	r30, r1
    5a02:	f9 1f       	adc	r31, r25
    5a04:	63 9f       	mul	r22, r19
    5a06:	b0 0d       	add	r27, r0
    5a08:	e1 1d       	adc	r30, r1
    5a0a:	f9 1f       	adc	r31, r25
    5a0c:	bd 01       	movw	r22, r26
    5a0e:	cf 01       	movw	r24, r30
    5a10:	11 24       	eor	r1, r1
    5a12:	08 95       	ret

00005a14 <__udivmodsi4>:
    5a14:	a1 e2       	ldi	r26, 0x21	; 33
    5a16:	1a 2e       	mov	r1, r26
    5a18:	aa 1b       	sub	r26, r26
    5a1a:	bb 1b       	sub	r27, r27
    5a1c:	fd 01       	movw	r30, r26
    5a1e:	0d c0       	rjmp	.+26     	; 0x5a3a <__udivmodsi4_ep>

00005a20 <__udivmodsi4_loop>:
    5a20:	aa 1f       	adc	r26, r26
    5a22:	bb 1f       	adc	r27, r27
    5a24:	ee 1f       	adc	r30, r30
    5a26:	ff 1f       	adc	r31, r31
    5a28:	a2 17       	cp	r26, r18
    5a2a:	b3 07       	cpc	r27, r19
    5a2c:	e4 07       	cpc	r30, r20
    5a2e:	f5 07       	cpc	r31, r21
    5a30:	20 f0       	brcs	.+8      	; 0x5a3a <__udivmodsi4_ep>
    5a32:	a2 1b       	sub	r26, r18
    5a34:	b3 0b       	sbc	r27, r19
    5a36:	e4 0b       	sbc	r30, r20
    5a38:	f5 0b       	sbc	r31, r21

00005a3a <__udivmodsi4_ep>:
    5a3a:	66 1f       	adc	r22, r22
    5a3c:	77 1f       	adc	r23, r23
    5a3e:	88 1f       	adc	r24, r24
    5a40:	99 1f       	adc	r25, r25
    5a42:	1a 94       	dec	r1
    5a44:	69 f7       	brne	.-38     	; 0x5a20 <__udivmodsi4_loop>
    5a46:	60 95       	com	r22
    5a48:	70 95       	com	r23
    5a4a:	80 95       	com	r24
    5a4c:	90 95       	com	r25
    5a4e:	9b 01       	movw	r18, r22
    5a50:	ac 01       	movw	r20, r24
    5a52:	bd 01       	movw	r22, r26
    5a54:	cf 01       	movw	r24, r30
    5a56:	08 95       	ret

00005a58 <__prologue_saves__>:
    5a58:	2f 92       	push	r2
    5a5a:	3f 92       	push	r3
    5a5c:	4f 92       	push	r4
    5a5e:	5f 92       	push	r5
    5a60:	6f 92       	push	r6
    5a62:	7f 92       	push	r7
    5a64:	8f 92       	push	r8
    5a66:	9f 92       	push	r9
    5a68:	af 92       	push	r10
    5a6a:	bf 92       	push	r11
    5a6c:	cf 92       	push	r12
    5a6e:	df 92       	push	r13
    5a70:	ef 92       	push	r14
    5a72:	ff 92       	push	r15
    5a74:	0f 93       	push	r16
    5a76:	1f 93       	push	r17
    5a78:	cf 93       	push	r28
    5a7a:	df 93       	push	r29
    5a7c:	cd b7       	in	r28, 0x3d	; 61
    5a7e:	de b7       	in	r29, 0x3e	; 62
    5a80:	ca 1b       	sub	r28, r26
    5a82:	db 0b       	sbc	r29, r27
    5a84:	0f b6       	in	r0, 0x3f	; 63
    5a86:	f8 94       	cli
    5a88:	de bf       	out	0x3e, r29	; 62
    5a8a:	0f be       	out	0x3f, r0	; 63
    5a8c:	cd bf       	out	0x3d, r28	; 61
    5a8e:	09 94       	ijmp

00005a90 <__epilogue_restores__>:
    5a90:	2a 88       	ldd	r2, Y+18	; 0x12
    5a92:	39 88       	ldd	r3, Y+17	; 0x11
    5a94:	48 88       	ldd	r4, Y+16	; 0x10
    5a96:	5f 84       	ldd	r5, Y+15	; 0x0f
    5a98:	6e 84       	ldd	r6, Y+14	; 0x0e
    5a9a:	7d 84       	ldd	r7, Y+13	; 0x0d
    5a9c:	8c 84       	ldd	r8, Y+12	; 0x0c
    5a9e:	9b 84       	ldd	r9, Y+11	; 0x0b
    5aa0:	aa 84       	ldd	r10, Y+10	; 0x0a
    5aa2:	b9 84       	ldd	r11, Y+9	; 0x09
    5aa4:	c8 84       	ldd	r12, Y+8	; 0x08
    5aa6:	df 80       	ldd	r13, Y+7	; 0x07
    5aa8:	ee 80       	ldd	r14, Y+6	; 0x06
    5aaa:	fd 80       	ldd	r15, Y+5	; 0x05
    5aac:	0c 81       	ldd	r16, Y+4	; 0x04
    5aae:	1b 81       	ldd	r17, Y+3	; 0x03
    5ab0:	aa 81       	ldd	r26, Y+2	; 0x02
    5ab2:	b9 81       	ldd	r27, Y+1	; 0x01
    5ab4:	ce 0f       	add	r28, r30
    5ab6:	d1 1d       	adc	r29, r1
    5ab8:	0f b6       	in	r0, 0x3f	; 63
    5aba:	f8 94       	cli
    5abc:	de bf       	out	0x3e, r29	; 62
    5abe:	0f be       	out	0x3f, r0	; 63
    5ac0:	cd bf       	out	0x3d, r28	; 61
    5ac2:	ed 01       	movw	r28, r26
    5ac4:	08 95       	ret

00005ac6 <strchr_P>:
    5ac6:	fc 01       	movw	r30, r24
    5ac8:	05 90       	lpm	r0, Z+
    5aca:	06 16       	cp	r0, r22
    5acc:	21 f0       	breq	.+8      	; 0x5ad6 <strchr_P+0x10>
    5ace:	00 20       	and	r0, r0
    5ad0:	d9 f7       	brne	.-10     	; 0x5ac8 <strchr_P+0x2>
    5ad2:	c0 01       	movw	r24, r0
    5ad4:	08 95       	ret
    5ad6:	31 97       	sbiw	r30, 0x01	; 1
    5ad8:	cf 01       	movw	r24, r30
    5ada:	08 95       	ret

00005adc <memcpy>:
    5adc:	fb 01       	movw	r30, r22
    5ade:	dc 01       	movw	r26, r24
    5ae0:	02 c0       	rjmp	.+4      	; 0x5ae6 <memcpy+0xa>
    5ae2:	01 90       	ld	r0, Z+
    5ae4:	0d 92       	st	X+, r0
    5ae6:	41 50       	subi	r20, 0x01	; 1
    5ae8:	50 40       	sbci	r21, 0x00	; 0
    5aea:	d8 f7       	brcc	.-10     	; 0x5ae2 <memcpy+0x6>
    5aec:	08 95       	ret

00005aee <fdevopen>:
    5aee:	0f 93       	push	r16
    5af0:	1f 93       	push	r17
    5af2:	cf 93       	push	r28
    5af4:	df 93       	push	r29
    5af6:	8c 01       	movw	r16, r24
    5af8:	eb 01       	movw	r28, r22
    5afa:	00 97       	sbiw	r24, 0x00	; 0
    5afc:	11 f4       	brne	.+4      	; 0x5b02 <fdevopen+0x14>
    5afe:	20 97       	sbiw	r28, 0x00	; 0
    5b00:	c9 f1       	breq	.+114    	; 0x5b74 <fdevopen+0x86>
    5b02:	81 e0       	ldi	r24, 0x01	; 1
    5b04:	90 e0       	ldi	r25, 0x00	; 0
    5b06:	6e e0       	ldi	r22, 0x0E	; 14
    5b08:	70 e0       	ldi	r23, 0x00	; 0
    5b0a:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <calloc>
    5b0e:	fc 01       	movw	r30, r24
    5b10:	9c 01       	movw	r18, r24
    5b12:	00 97       	sbiw	r24, 0x00	; 0
    5b14:	89 f1       	breq	.+98     	; 0x5b78 <fdevopen+0x8a>
    5b16:	80 e8       	ldi	r24, 0x80	; 128
    5b18:	83 83       	std	Z+3, r24	; 0x03
    5b1a:	20 97       	sbiw	r28, 0x00	; 0
    5b1c:	71 f0       	breq	.+28     	; 0x5b3a <fdevopen+0x4c>
    5b1e:	d3 87       	std	Z+11, r29	; 0x0b
    5b20:	c2 87       	std	Z+10, r28	; 0x0a
    5b22:	81 e8       	ldi	r24, 0x81	; 129
    5b24:	83 83       	std	Z+3, r24	; 0x03
    5b26:	80 91 68 09 	lds	r24, 0x0968
    5b2a:	90 91 69 09 	lds	r25, 0x0969
    5b2e:	00 97       	sbiw	r24, 0x00	; 0
    5b30:	21 f4       	brne	.+8      	; 0x5b3a <fdevopen+0x4c>
    5b32:	f0 93 69 09 	sts	0x0969, r31
    5b36:	e0 93 68 09 	sts	0x0968, r30
    5b3a:	01 15       	cp	r16, r1
    5b3c:	11 05       	cpc	r17, r1
    5b3e:	e1 f0       	breq	.+56     	; 0x5b78 <fdevopen+0x8a>
    5b40:	11 87       	std	Z+9, r17	; 0x09
    5b42:	00 87       	std	Z+8, r16	; 0x08
    5b44:	83 81       	ldd	r24, Z+3	; 0x03
    5b46:	82 60       	ori	r24, 0x02	; 2
    5b48:	83 83       	std	Z+3, r24	; 0x03
    5b4a:	80 91 6a 09 	lds	r24, 0x096A
    5b4e:	90 91 6b 09 	lds	r25, 0x096B
    5b52:	00 97       	sbiw	r24, 0x00	; 0
    5b54:	89 f4       	brne	.+34     	; 0x5b78 <fdevopen+0x8a>
    5b56:	f0 93 6b 09 	sts	0x096B, r31
    5b5a:	e0 93 6a 09 	sts	0x096A, r30
    5b5e:	80 91 6c 09 	lds	r24, 0x096C
    5b62:	90 91 6d 09 	lds	r25, 0x096D
    5b66:	00 97       	sbiw	r24, 0x00	; 0
    5b68:	39 f4       	brne	.+14     	; 0x5b78 <fdevopen+0x8a>
    5b6a:	f0 93 6d 09 	sts	0x096D, r31
    5b6e:	e0 93 6c 09 	sts	0x096C, r30
    5b72:	02 c0       	rjmp	.+4      	; 0x5b78 <fdevopen+0x8a>
    5b74:	20 e0       	ldi	r18, 0x00	; 0
    5b76:	30 e0       	ldi	r19, 0x00	; 0
    5b78:	c9 01       	movw	r24, r18
    5b7a:	df 91       	pop	r29
    5b7c:	cf 91       	pop	r28
    5b7e:	1f 91       	pop	r17
    5b80:	0f 91       	pop	r16
    5b82:	08 95       	ret

00005b84 <fgetc>:
    5b84:	cf 93       	push	r28
    5b86:	df 93       	push	r29
    5b88:	ec 01       	movw	r28, r24
    5b8a:	3b 81       	ldd	r19, Y+3	; 0x03
    5b8c:	30 ff       	sbrs	r19, 0
    5b8e:	36 c0       	rjmp	.+108    	; 0x5bfc <fgetc+0x78>
    5b90:	36 ff       	sbrs	r19, 6
    5b92:	09 c0       	rjmp	.+18     	; 0x5ba6 <fgetc+0x22>
    5b94:	3f 7b       	andi	r19, 0xBF	; 191
    5b96:	3b 83       	std	Y+3, r19	; 0x03
    5b98:	8e 81       	ldd	r24, Y+6	; 0x06
    5b9a:	9f 81       	ldd	r25, Y+7	; 0x07
    5b9c:	01 96       	adiw	r24, 0x01	; 1
    5b9e:	9f 83       	std	Y+7, r25	; 0x07
    5ba0:	8e 83       	std	Y+6, r24	; 0x06
    5ba2:	2a 81       	ldd	r18, Y+2	; 0x02
    5ba4:	29 c0       	rjmp	.+82     	; 0x5bf8 <fgetc+0x74>
    5ba6:	32 ff       	sbrs	r19, 2
    5ba8:	0f c0       	rjmp	.+30     	; 0x5bc8 <fgetc+0x44>
    5baa:	e8 81       	ld	r30, Y
    5bac:	f9 81       	ldd	r31, Y+1	; 0x01
    5bae:	80 81       	ld	r24, Z
    5bb0:	99 27       	eor	r25, r25
    5bb2:	87 fd       	sbrc	r24, 7
    5bb4:	90 95       	com	r25
    5bb6:	00 97       	sbiw	r24, 0x00	; 0
    5bb8:	19 f4       	brne	.+6      	; 0x5bc0 <fgetc+0x3c>
    5bba:	30 62       	ori	r19, 0x20	; 32
    5bbc:	3b 83       	std	Y+3, r19	; 0x03
    5bbe:	1e c0       	rjmp	.+60     	; 0x5bfc <fgetc+0x78>
    5bc0:	31 96       	adiw	r30, 0x01	; 1
    5bc2:	f9 83       	std	Y+1, r31	; 0x01
    5bc4:	e8 83       	st	Y, r30
    5bc6:	11 c0       	rjmp	.+34     	; 0x5bea <fgetc+0x66>
    5bc8:	ea 85       	ldd	r30, Y+10	; 0x0a
    5bca:	fb 85       	ldd	r31, Y+11	; 0x0b
    5bcc:	ce 01       	movw	r24, r28
    5bce:	09 95       	icall
    5bd0:	97 ff       	sbrs	r25, 7
    5bd2:	0b c0       	rjmp	.+22     	; 0x5bea <fgetc+0x66>
    5bd4:	2b 81       	ldd	r18, Y+3	; 0x03
    5bd6:	3f ef       	ldi	r19, 0xFF	; 255
    5bd8:	8f 3f       	cpi	r24, 0xFF	; 255
    5bda:	93 07       	cpc	r25, r19
    5bdc:	11 f4       	brne	.+4      	; 0x5be2 <fgetc+0x5e>
    5bde:	80 e1       	ldi	r24, 0x10	; 16
    5be0:	01 c0       	rjmp	.+2      	; 0x5be4 <fgetc+0x60>
    5be2:	80 e2       	ldi	r24, 0x20	; 32
    5be4:	82 2b       	or	r24, r18
    5be6:	8b 83       	std	Y+3, r24	; 0x03
    5be8:	09 c0       	rjmp	.+18     	; 0x5bfc <fgetc+0x78>
    5bea:	2e 81       	ldd	r18, Y+6	; 0x06
    5bec:	3f 81       	ldd	r19, Y+7	; 0x07
    5bee:	2f 5f       	subi	r18, 0xFF	; 255
    5bf0:	3f 4f       	sbci	r19, 0xFF	; 255
    5bf2:	3f 83       	std	Y+7, r19	; 0x07
    5bf4:	2e 83       	std	Y+6, r18	; 0x06
    5bf6:	28 2f       	mov	r18, r24
    5bf8:	30 e0       	ldi	r19, 0x00	; 0
    5bfa:	02 c0       	rjmp	.+4      	; 0x5c00 <fgetc+0x7c>
    5bfc:	2f ef       	ldi	r18, 0xFF	; 255
    5bfe:	3f ef       	ldi	r19, 0xFF	; 255
    5c00:	c9 01       	movw	r24, r18
    5c02:	df 91       	pop	r29
    5c04:	cf 91       	pop	r28
    5c06:	08 95       	ret

00005c08 <fputc>:
    5c08:	0f 93       	push	r16
    5c0a:	1f 93       	push	r17
    5c0c:	cf 93       	push	r28
    5c0e:	df 93       	push	r29
    5c10:	8c 01       	movw	r16, r24
    5c12:	eb 01       	movw	r28, r22
    5c14:	8b 81       	ldd	r24, Y+3	; 0x03
    5c16:	81 ff       	sbrs	r24, 1
    5c18:	1b c0       	rjmp	.+54     	; 0x5c50 <fputc+0x48>
    5c1a:	82 ff       	sbrs	r24, 2
    5c1c:	0d c0       	rjmp	.+26     	; 0x5c38 <fputc+0x30>
    5c1e:	2e 81       	ldd	r18, Y+6	; 0x06
    5c20:	3f 81       	ldd	r19, Y+7	; 0x07
    5c22:	8c 81       	ldd	r24, Y+4	; 0x04
    5c24:	9d 81       	ldd	r25, Y+5	; 0x05
    5c26:	28 17       	cp	r18, r24
    5c28:	39 07       	cpc	r19, r25
    5c2a:	64 f4       	brge	.+24     	; 0x5c44 <fputc+0x3c>
    5c2c:	e8 81       	ld	r30, Y
    5c2e:	f9 81       	ldd	r31, Y+1	; 0x01
    5c30:	01 93       	st	Z+, r16
    5c32:	f9 83       	std	Y+1, r31	; 0x01
    5c34:	e8 83       	st	Y, r30
    5c36:	06 c0       	rjmp	.+12     	; 0x5c44 <fputc+0x3c>
    5c38:	e8 85       	ldd	r30, Y+8	; 0x08
    5c3a:	f9 85       	ldd	r31, Y+9	; 0x09
    5c3c:	80 2f       	mov	r24, r16
    5c3e:	09 95       	icall
    5c40:	00 97       	sbiw	r24, 0x00	; 0
    5c42:	31 f4       	brne	.+12     	; 0x5c50 <fputc+0x48>
    5c44:	8e 81       	ldd	r24, Y+6	; 0x06
    5c46:	9f 81       	ldd	r25, Y+7	; 0x07
    5c48:	01 96       	adiw	r24, 0x01	; 1
    5c4a:	9f 83       	std	Y+7, r25	; 0x07
    5c4c:	8e 83       	std	Y+6, r24	; 0x06
    5c4e:	02 c0       	rjmp	.+4      	; 0x5c54 <fputc+0x4c>
    5c50:	0f ef       	ldi	r16, 0xFF	; 255
    5c52:	1f ef       	ldi	r17, 0xFF	; 255
    5c54:	c8 01       	movw	r24, r16
    5c56:	df 91       	pop	r29
    5c58:	cf 91       	pop	r28
    5c5a:	1f 91       	pop	r17
    5c5c:	0f 91       	pop	r16
    5c5e:	08 95       	ret

00005c60 <printf>:
    5c60:	df 93       	push	r29
    5c62:	cf 93       	push	r28
    5c64:	cd b7       	in	r28, 0x3d	; 61
    5c66:	de b7       	in	r29, 0x3e	; 62
    5c68:	fe 01       	movw	r30, r28
    5c6a:	35 96       	adiw	r30, 0x05	; 5
    5c6c:	61 91       	ld	r22, Z+
    5c6e:	71 91       	ld	r23, Z+
    5c70:	80 91 6a 09 	lds	r24, 0x096A
    5c74:	90 91 6b 09 	lds	r25, 0x096B
    5c78:	af 01       	movw	r20, r30
    5c7a:	0e 94 95 2b 	call	0x572a	; 0x572a <vfprintf>
    5c7e:	cf 91       	pop	r28
    5c80:	df 91       	pop	r29
    5c82:	08 95       	ret

00005c84 <putchar>:
    5c84:	60 91 6a 09 	lds	r22, 0x096A
    5c88:	70 91 6b 09 	lds	r23, 0x096B
    5c8c:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <fputc>
    5c90:	08 95       	ret

00005c92 <puts>:
    5c92:	ef 92       	push	r14
    5c94:	ff 92       	push	r15
    5c96:	0f 93       	push	r16
    5c98:	1f 93       	push	r17
    5c9a:	cf 93       	push	r28
    5c9c:	df 93       	push	r29
    5c9e:	8c 01       	movw	r16, r24
    5ca0:	e0 91 6a 09 	lds	r30, 0x096A
    5ca4:	f0 91 6b 09 	lds	r31, 0x096B
    5ca8:	83 81       	ldd	r24, Z+3	; 0x03
    5caa:	81 ff       	sbrs	r24, 1
    5cac:	1f c0       	rjmp	.+62     	; 0x5cec <puts+0x5a>
    5cae:	c0 e0       	ldi	r28, 0x00	; 0
    5cb0:	d0 e0       	ldi	r29, 0x00	; 0
    5cb2:	0a c0       	rjmp	.+20     	; 0x5cc8 <puts+0x36>
    5cb4:	db 01       	movw	r26, r22
    5cb6:	18 96       	adiw	r26, 0x08	; 8
    5cb8:	ed 91       	ld	r30, X+
    5cba:	fc 91       	ld	r31, X
    5cbc:	19 97       	sbiw	r26, 0x09	; 9
    5cbe:	09 95       	icall
    5cc0:	00 97       	sbiw	r24, 0x00	; 0
    5cc2:	11 f0       	breq	.+4      	; 0x5cc8 <puts+0x36>
    5cc4:	cf ef       	ldi	r28, 0xFF	; 255
    5cc6:	df ef       	ldi	r29, 0xFF	; 255
    5cc8:	f8 01       	movw	r30, r16
    5cca:	81 91       	ld	r24, Z+
    5ccc:	8f 01       	movw	r16, r30
    5cce:	60 91 6a 09 	lds	r22, 0x096A
    5cd2:	70 91 6b 09 	lds	r23, 0x096B
    5cd6:	88 23       	and	r24, r24
    5cd8:	69 f7       	brne	.-38     	; 0x5cb4 <puts+0x22>
    5cda:	db 01       	movw	r26, r22
    5cdc:	18 96       	adiw	r26, 0x08	; 8
    5cde:	ed 91       	ld	r30, X+
    5ce0:	fc 91       	ld	r31, X
    5ce2:	19 97       	sbiw	r26, 0x09	; 9
    5ce4:	8a e0       	ldi	r24, 0x0A	; 10
    5ce6:	09 95       	icall
    5ce8:	00 97       	sbiw	r24, 0x00	; 0
    5cea:	11 f0       	breq	.+4      	; 0x5cf0 <puts+0x5e>
    5cec:	cf ef       	ldi	r28, 0xFF	; 255
    5cee:	df ef       	ldi	r29, 0xFF	; 255
    5cf0:	ce 01       	movw	r24, r28
    5cf2:	df 91       	pop	r29
    5cf4:	cf 91       	pop	r28
    5cf6:	1f 91       	pop	r17
    5cf8:	0f 91       	pop	r16
    5cfa:	ff 90       	pop	r15
    5cfc:	ef 90       	pop	r14
    5cfe:	08 95       	ret

00005d00 <sprintf>:
    5d00:	0f 93       	push	r16
    5d02:	1f 93       	push	r17
    5d04:	df 93       	push	r29
    5d06:	cf 93       	push	r28
    5d08:	cd b7       	in	r28, 0x3d	; 61
    5d0a:	de b7       	in	r29, 0x3e	; 62
    5d0c:	2e 97       	sbiw	r28, 0x0e	; 14
    5d0e:	0f b6       	in	r0, 0x3f	; 63
    5d10:	f8 94       	cli
    5d12:	de bf       	out	0x3e, r29	; 62
    5d14:	0f be       	out	0x3f, r0	; 63
    5d16:	cd bf       	out	0x3d, r28	; 61
    5d18:	0d 89       	ldd	r16, Y+21	; 0x15
    5d1a:	1e 89       	ldd	r17, Y+22	; 0x16
    5d1c:	86 e0       	ldi	r24, 0x06	; 6
    5d1e:	8c 83       	std	Y+4, r24	; 0x04
    5d20:	1a 83       	std	Y+2, r17	; 0x02
    5d22:	09 83       	std	Y+1, r16	; 0x01
    5d24:	8f ef       	ldi	r24, 0xFF	; 255
    5d26:	9f e7       	ldi	r25, 0x7F	; 127
    5d28:	9e 83       	std	Y+6, r25	; 0x06
    5d2a:	8d 83       	std	Y+5, r24	; 0x05
    5d2c:	9e 01       	movw	r18, r28
    5d2e:	27 5e       	subi	r18, 0xE7	; 231
    5d30:	3f 4f       	sbci	r19, 0xFF	; 255
    5d32:	ce 01       	movw	r24, r28
    5d34:	01 96       	adiw	r24, 0x01	; 1
    5d36:	6f 89       	ldd	r22, Y+23	; 0x17
    5d38:	78 8d       	ldd	r23, Y+24	; 0x18
    5d3a:	a9 01       	movw	r20, r18
    5d3c:	0e 94 95 2b 	call	0x572a	; 0x572a <vfprintf>
    5d40:	ef 81       	ldd	r30, Y+7	; 0x07
    5d42:	f8 85       	ldd	r31, Y+8	; 0x08
    5d44:	e0 0f       	add	r30, r16
    5d46:	f1 1f       	adc	r31, r17
    5d48:	10 82       	st	Z, r1
    5d4a:	2e 96       	adiw	r28, 0x0e	; 14
    5d4c:	0f b6       	in	r0, 0x3f	; 63
    5d4e:	f8 94       	cli
    5d50:	de bf       	out	0x3e, r29	; 62
    5d52:	0f be       	out	0x3f, r0	; 63
    5d54:	cd bf       	out	0x3d, r28	; 61
    5d56:	cf 91       	pop	r28
    5d58:	df 91       	pop	r29
    5d5a:	1f 91       	pop	r17
    5d5c:	0f 91       	pop	r16
    5d5e:	08 95       	ret

00005d60 <__ultoa_invert>:
    5d60:	fa 01       	movw	r30, r20
    5d62:	aa 27       	eor	r26, r26
    5d64:	28 30       	cpi	r18, 0x08	; 8
    5d66:	51 f1       	breq	.+84     	; 0x5dbc <__ultoa_invert+0x5c>
    5d68:	20 31       	cpi	r18, 0x10	; 16
    5d6a:	81 f1       	breq	.+96     	; 0x5dcc <__ultoa_invert+0x6c>
    5d6c:	e8 94       	clt
    5d6e:	6f 93       	push	r22
    5d70:	6e 7f       	andi	r22, 0xFE	; 254
    5d72:	6e 5f       	subi	r22, 0xFE	; 254
    5d74:	7f 4f       	sbci	r23, 0xFF	; 255
    5d76:	8f 4f       	sbci	r24, 0xFF	; 255
    5d78:	9f 4f       	sbci	r25, 0xFF	; 255
    5d7a:	af 4f       	sbci	r26, 0xFF	; 255
    5d7c:	b1 e0       	ldi	r27, 0x01	; 1
    5d7e:	3e d0       	rcall	.+124    	; 0x5dfc <__ultoa_invert+0x9c>
    5d80:	b4 e0       	ldi	r27, 0x04	; 4
    5d82:	3c d0       	rcall	.+120    	; 0x5dfc <__ultoa_invert+0x9c>
    5d84:	67 0f       	add	r22, r23
    5d86:	78 1f       	adc	r23, r24
    5d88:	89 1f       	adc	r24, r25
    5d8a:	9a 1f       	adc	r25, r26
    5d8c:	a1 1d       	adc	r26, r1
    5d8e:	68 0f       	add	r22, r24
    5d90:	79 1f       	adc	r23, r25
    5d92:	8a 1f       	adc	r24, r26
    5d94:	91 1d       	adc	r25, r1
    5d96:	a1 1d       	adc	r26, r1
    5d98:	6a 0f       	add	r22, r26
    5d9a:	71 1d       	adc	r23, r1
    5d9c:	81 1d       	adc	r24, r1
    5d9e:	91 1d       	adc	r25, r1
    5da0:	a1 1d       	adc	r26, r1
    5da2:	20 d0       	rcall	.+64     	; 0x5de4 <__ultoa_invert+0x84>
    5da4:	09 f4       	brne	.+2      	; 0x5da8 <__ultoa_invert+0x48>
    5da6:	68 94       	set
    5da8:	3f 91       	pop	r19
    5daa:	2a e0       	ldi	r18, 0x0A	; 10
    5dac:	26 9f       	mul	r18, r22
    5dae:	11 24       	eor	r1, r1
    5db0:	30 19       	sub	r19, r0
    5db2:	30 5d       	subi	r19, 0xD0	; 208
    5db4:	31 93       	st	Z+, r19
    5db6:	de f6       	brtc	.-74     	; 0x5d6e <__ultoa_invert+0xe>
    5db8:	cf 01       	movw	r24, r30
    5dba:	08 95       	ret
    5dbc:	46 2f       	mov	r20, r22
    5dbe:	47 70       	andi	r20, 0x07	; 7
    5dc0:	40 5d       	subi	r20, 0xD0	; 208
    5dc2:	41 93       	st	Z+, r20
    5dc4:	b3 e0       	ldi	r27, 0x03	; 3
    5dc6:	0f d0       	rcall	.+30     	; 0x5de6 <__ultoa_invert+0x86>
    5dc8:	c9 f7       	brne	.-14     	; 0x5dbc <__ultoa_invert+0x5c>
    5dca:	f6 cf       	rjmp	.-20     	; 0x5db8 <__ultoa_invert+0x58>
    5dcc:	46 2f       	mov	r20, r22
    5dce:	4f 70       	andi	r20, 0x0F	; 15
    5dd0:	40 5d       	subi	r20, 0xD0	; 208
    5dd2:	4a 33       	cpi	r20, 0x3A	; 58
    5dd4:	18 f0       	brcs	.+6      	; 0x5ddc <__ultoa_invert+0x7c>
    5dd6:	49 5d       	subi	r20, 0xD9	; 217
    5dd8:	31 fd       	sbrc	r19, 1
    5dda:	40 52       	subi	r20, 0x20	; 32
    5ddc:	41 93       	st	Z+, r20
    5dde:	02 d0       	rcall	.+4      	; 0x5de4 <__ultoa_invert+0x84>
    5de0:	a9 f7       	brne	.-22     	; 0x5dcc <__ultoa_invert+0x6c>
    5de2:	ea cf       	rjmp	.-44     	; 0x5db8 <__ultoa_invert+0x58>
    5de4:	b4 e0       	ldi	r27, 0x04	; 4
    5de6:	a6 95       	lsr	r26
    5de8:	97 95       	ror	r25
    5dea:	87 95       	ror	r24
    5dec:	77 95       	ror	r23
    5dee:	67 95       	ror	r22
    5df0:	ba 95       	dec	r27
    5df2:	c9 f7       	brne	.-14     	; 0x5de6 <__ultoa_invert+0x86>
    5df4:	00 97       	sbiw	r24, 0x00	; 0
    5df6:	61 05       	cpc	r22, r1
    5df8:	71 05       	cpc	r23, r1
    5dfa:	08 95       	ret
    5dfc:	9b 01       	movw	r18, r22
    5dfe:	ac 01       	movw	r20, r24
    5e00:	0a 2e       	mov	r0, r26
    5e02:	06 94       	lsr	r0
    5e04:	57 95       	ror	r21
    5e06:	47 95       	ror	r20
    5e08:	37 95       	ror	r19
    5e0a:	27 95       	ror	r18
    5e0c:	ba 95       	dec	r27
    5e0e:	c9 f7       	brne	.-14     	; 0x5e02 <__ultoa_invert+0xa2>
    5e10:	62 0f       	add	r22, r18
    5e12:	73 1f       	adc	r23, r19
    5e14:	84 1f       	adc	r24, r20
    5e16:	95 1f       	adc	r25, r21
    5e18:	a0 1d       	adc	r26, r0
    5e1a:	08 95       	ret

00005e1c <__eerd_byte_m128rfa1>:
    5e1c:	f9 99       	sbic	0x1f, 1	; 31
    5e1e:	fe cf       	rjmp	.-4      	; 0x5e1c <__eerd_byte_m128rfa1>
    5e20:	92 bd       	out	0x22, r25	; 34
    5e22:	81 bd       	out	0x21, r24	; 33
    5e24:	f8 9a       	sbi	0x1f, 0	; 31
    5e26:	99 27       	eor	r25, r25
    5e28:	80 b5       	in	r24, 0x20	; 32
    5e2a:	08 95       	ret

00005e2c <__eewr_byte_m128rfa1>:
    5e2c:	26 2f       	mov	r18, r22

00005e2e <__eewr_r18_m128rfa1>:
    5e2e:	f9 99       	sbic	0x1f, 1	; 31
    5e30:	fe cf       	rjmp	.-4      	; 0x5e2e <__eewr_r18_m128rfa1>
    5e32:	1f ba       	out	0x1f, r1	; 31
    5e34:	92 bd       	out	0x22, r25	; 34
    5e36:	81 bd       	out	0x21, r24	; 33
    5e38:	20 bd       	out	0x20, r18	; 32
    5e3a:	0f b6       	in	r0, 0x3f	; 63
    5e3c:	f8 94       	cli
    5e3e:	fa 9a       	sbi	0x1f, 2	; 31
    5e40:	f9 9a       	sbi	0x1f, 1	; 31
    5e42:	0f be       	out	0x3f, r0	; 63
    5e44:	01 96       	adiw	r24, 0x01	; 1
    5e46:	08 95       	ret

00005e48 <calloc>:
    5e48:	ef 92       	push	r14
    5e4a:	ff 92       	push	r15
    5e4c:	0f 93       	push	r16
    5e4e:	1f 93       	push	r17
    5e50:	cf 93       	push	r28
    5e52:	df 93       	push	r29
    5e54:	68 9f       	mul	r22, r24
    5e56:	80 01       	movw	r16, r0
    5e58:	69 9f       	mul	r22, r25
    5e5a:	10 0d       	add	r17, r0
    5e5c:	78 9f       	mul	r23, r24
    5e5e:	10 0d       	add	r17, r0
    5e60:	11 24       	eor	r1, r1
    5e62:	c8 01       	movw	r24, r16
    5e64:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <malloc>
    5e68:	e8 2e       	mov	r14, r24
    5e6a:	e7 01       	movw	r28, r14
    5e6c:	7e 01       	movw	r14, r28
    5e6e:	f9 2e       	mov	r15, r25
    5e70:	e7 01       	movw	r28, r14
    5e72:	20 97       	sbiw	r28, 0x00	; 0
    5e74:	31 f0       	breq	.+12     	; 0x5e82 <calloc+0x3a>
    5e76:	8e 2d       	mov	r24, r14
    5e78:	60 e0       	ldi	r22, 0x00	; 0
    5e7a:	70 e0       	ldi	r23, 0x00	; 0
    5e7c:	a8 01       	movw	r20, r16
    5e7e:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <memset>
    5e82:	ce 01       	movw	r24, r28
    5e84:	df 91       	pop	r29
    5e86:	cf 91       	pop	r28
    5e88:	1f 91       	pop	r17
    5e8a:	0f 91       	pop	r16
    5e8c:	ff 90       	pop	r15
    5e8e:	ef 90       	pop	r14
    5e90:	08 95       	ret

00005e92 <malloc>:
    5e92:	cf 93       	push	r28
    5e94:	df 93       	push	r29
    5e96:	82 30       	cpi	r24, 0x02	; 2
    5e98:	91 05       	cpc	r25, r1
    5e9a:	10 f4       	brcc	.+4      	; 0x5ea0 <malloc+0xe>
    5e9c:	82 e0       	ldi	r24, 0x02	; 2
    5e9e:	90 e0       	ldi	r25, 0x00	; 0
    5ea0:	e0 91 70 09 	lds	r30, 0x0970
    5ea4:	f0 91 71 09 	lds	r31, 0x0971
    5ea8:	40 e0       	ldi	r20, 0x00	; 0
    5eaa:	50 e0       	ldi	r21, 0x00	; 0
    5eac:	20 e0       	ldi	r18, 0x00	; 0
    5eae:	30 e0       	ldi	r19, 0x00	; 0
    5eb0:	26 c0       	rjmp	.+76     	; 0x5efe <malloc+0x6c>
    5eb2:	60 81       	ld	r22, Z
    5eb4:	71 81       	ldd	r23, Z+1	; 0x01
    5eb6:	68 17       	cp	r22, r24
    5eb8:	79 07       	cpc	r23, r25
    5eba:	e0 f0       	brcs	.+56     	; 0x5ef4 <malloc+0x62>
    5ebc:	68 17       	cp	r22, r24
    5ebe:	79 07       	cpc	r23, r25
    5ec0:	81 f4       	brne	.+32     	; 0x5ee2 <malloc+0x50>
    5ec2:	82 81       	ldd	r24, Z+2	; 0x02
    5ec4:	93 81       	ldd	r25, Z+3	; 0x03
    5ec6:	21 15       	cp	r18, r1
    5ec8:	31 05       	cpc	r19, r1
    5eca:	31 f0       	breq	.+12     	; 0x5ed8 <malloc+0x46>
    5ecc:	d9 01       	movw	r26, r18
    5ece:	13 96       	adiw	r26, 0x03	; 3
    5ed0:	9c 93       	st	X, r25
    5ed2:	8e 93       	st	-X, r24
    5ed4:	12 97       	sbiw	r26, 0x02	; 2
    5ed6:	2b c0       	rjmp	.+86     	; 0x5f2e <malloc+0x9c>
    5ed8:	90 93 71 09 	sts	0x0971, r25
    5edc:	80 93 70 09 	sts	0x0970, r24
    5ee0:	26 c0       	rjmp	.+76     	; 0x5f2e <malloc+0x9c>
    5ee2:	41 15       	cp	r20, r1
    5ee4:	51 05       	cpc	r21, r1
    5ee6:	19 f0       	breq	.+6      	; 0x5eee <malloc+0x5c>
    5ee8:	64 17       	cp	r22, r20
    5eea:	75 07       	cpc	r23, r21
    5eec:	18 f4       	brcc	.+6      	; 0x5ef4 <malloc+0x62>
    5eee:	ab 01       	movw	r20, r22
    5ef0:	e9 01       	movw	r28, r18
    5ef2:	df 01       	movw	r26, r30
    5ef4:	9f 01       	movw	r18, r30
    5ef6:	72 81       	ldd	r23, Z+2	; 0x02
    5ef8:	63 81       	ldd	r22, Z+3	; 0x03
    5efa:	e7 2f       	mov	r30, r23
    5efc:	f6 2f       	mov	r31, r22
    5efe:	30 97       	sbiw	r30, 0x00	; 0
    5f00:	c1 f6       	brne	.-80     	; 0x5eb2 <malloc+0x20>
    5f02:	41 15       	cp	r20, r1
    5f04:	51 05       	cpc	r21, r1
    5f06:	01 f1       	breq	.+64     	; 0x5f48 <malloc+0xb6>
    5f08:	48 1b       	sub	r20, r24
    5f0a:	59 0b       	sbc	r21, r25
    5f0c:	44 30       	cpi	r20, 0x04	; 4
    5f0e:	51 05       	cpc	r21, r1
    5f10:	80 f4       	brcc	.+32     	; 0x5f32 <malloc+0xa0>
    5f12:	12 96       	adiw	r26, 0x02	; 2
    5f14:	8d 91       	ld	r24, X+
    5f16:	9c 91       	ld	r25, X
    5f18:	13 97       	sbiw	r26, 0x03	; 3
    5f1a:	20 97       	sbiw	r28, 0x00	; 0
    5f1c:	19 f0       	breq	.+6      	; 0x5f24 <malloc+0x92>
    5f1e:	9b 83       	std	Y+3, r25	; 0x03
    5f20:	8a 83       	std	Y+2, r24	; 0x02
    5f22:	04 c0       	rjmp	.+8      	; 0x5f2c <malloc+0x9a>
    5f24:	90 93 71 09 	sts	0x0971, r25
    5f28:	80 93 70 09 	sts	0x0970, r24
    5f2c:	fd 01       	movw	r30, r26
    5f2e:	32 96       	adiw	r30, 0x02	; 2
    5f30:	46 c0       	rjmp	.+140    	; 0x5fbe <malloc+0x12c>
    5f32:	fd 01       	movw	r30, r26
    5f34:	e4 0f       	add	r30, r20
    5f36:	f5 1f       	adc	r31, r21
    5f38:	81 93       	st	Z+, r24
    5f3a:	91 93       	st	Z+, r25
    5f3c:	42 50       	subi	r20, 0x02	; 2
    5f3e:	50 40       	sbci	r21, 0x00	; 0
    5f40:	11 96       	adiw	r26, 0x01	; 1
    5f42:	5c 93       	st	X, r21
    5f44:	4e 93       	st	-X, r20
    5f46:	3b c0       	rjmp	.+118    	; 0x5fbe <malloc+0x12c>
    5f48:	20 91 6e 09 	lds	r18, 0x096E
    5f4c:	30 91 6f 09 	lds	r19, 0x096F
    5f50:	21 15       	cp	r18, r1
    5f52:	31 05       	cpc	r19, r1
    5f54:	41 f4       	brne	.+16     	; 0x5f66 <malloc+0xd4>
    5f56:	20 91 94 04 	lds	r18, 0x0494
    5f5a:	30 91 95 04 	lds	r19, 0x0495
    5f5e:	30 93 6f 09 	sts	0x096F, r19
    5f62:	20 93 6e 09 	sts	0x096E, r18
    5f66:	20 91 96 04 	lds	r18, 0x0496
    5f6a:	30 91 97 04 	lds	r19, 0x0497
    5f6e:	21 15       	cp	r18, r1
    5f70:	31 05       	cpc	r19, r1
    5f72:	41 f4       	brne	.+16     	; 0x5f84 <malloc+0xf2>
    5f74:	2d b7       	in	r18, 0x3d	; 61
    5f76:	3e b7       	in	r19, 0x3e	; 62
    5f78:	40 91 92 04 	lds	r20, 0x0492
    5f7c:	50 91 93 04 	lds	r21, 0x0493
    5f80:	24 1b       	sub	r18, r20
    5f82:	35 0b       	sbc	r19, r21
    5f84:	e0 91 6e 09 	lds	r30, 0x096E
    5f88:	f0 91 6f 09 	lds	r31, 0x096F
    5f8c:	e2 17       	cp	r30, r18
    5f8e:	f3 07       	cpc	r31, r19
    5f90:	a0 f4       	brcc	.+40     	; 0x5fba <malloc+0x128>
    5f92:	2e 1b       	sub	r18, r30
    5f94:	3f 0b       	sbc	r19, r31
    5f96:	28 17       	cp	r18, r24
    5f98:	39 07       	cpc	r19, r25
    5f9a:	78 f0       	brcs	.+30     	; 0x5fba <malloc+0x128>
    5f9c:	ac 01       	movw	r20, r24
    5f9e:	4e 5f       	subi	r20, 0xFE	; 254
    5fa0:	5f 4f       	sbci	r21, 0xFF	; 255
    5fa2:	24 17       	cp	r18, r20
    5fa4:	35 07       	cpc	r19, r21
    5fa6:	48 f0       	brcs	.+18     	; 0x5fba <malloc+0x128>
    5fa8:	4e 0f       	add	r20, r30
    5faa:	5f 1f       	adc	r21, r31
    5fac:	50 93 6f 09 	sts	0x096F, r21
    5fb0:	40 93 6e 09 	sts	0x096E, r20
    5fb4:	81 93       	st	Z+, r24
    5fb6:	91 93       	st	Z+, r25
    5fb8:	02 c0       	rjmp	.+4      	; 0x5fbe <malloc+0x12c>
    5fba:	e0 e0       	ldi	r30, 0x00	; 0
    5fbc:	f0 e0       	ldi	r31, 0x00	; 0
    5fbe:	cf 01       	movw	r24, r30
    5fc0:	df 91       	pop	r29
    5fc2:	cf 91       	pop	r28
    5fc4:	08 95       	ret

00005fc6 <free>:
    5fc6:	cf 93       	push	r28
    5fc8:	df 93       	push	r29
    5fca:	00 97       	sbiw	r24, 0x00	; 0
    5fcc:	09 f4       	brne	.+2      	; 0x5fd0 <free+0xa>
    5fce:	91 c0       	rjmp	.+290    	; 0x60f2 <free+0x12c>
    5fd0:	fc 01       	movw	r30, r24
    5fd2:	32 97       	sbiw	r30, 0x02	; 2
    5fd4:	13 82       	std	Z+3, r1	; 0x03
    5fd6:	12 82       	std	Z+2, r1	; 0x02
    5fd8:	60 91 70 09 	lds	r22, 0x0970
    5fdc:	70 91 71 09 	lds	r23, 0x0971
    5fe0:	61 15       	cp	r22, r1
    5fe2:	71 05       	cpc	r23, r1
    5fe4:	81 f4       	brne	.+32     	; 0x6006 <free+0x40>
    5fe6:	20 81       	ld	r18, Z
    5fe8:	31 81       	ldd	r19, Z+1	; 0x01
    5fea:	28 0f       	add	r18, r24
    5fec:	39 1f       	adc	r19, r25
    5fee:	80 91 6e 09 	lds	r24, 0x096E
    5ff2:	90 91 6f 09 	lds	r25, 0x096F
    5ff6:	82 17       	cp	r24, r18
    5ff8:	93 07       	cpc	r25, r19
    5ffa:	99 f5       	brne	.+102    	; 0x6062 <free+0x9c>
    5ffc:	f0 93 6f 09 	sts	0x096F, r31
    6000:	e0 93 6e 09 	sts	0x096E, r30
    6004:	76 c0       	rjmp	.+236    	; 0x60f2 <free+0x12c>
    6006:	db 01       	movw	r26, r22
    6008:	80 e0       	ldi	r24, 0x00	; 0
    600a:	90 e0       	ldi	r25, 0x00	; 0
    600c:	02 c0       	rjmp	.+4      	; 0x6012 <free+0x4c>
    600e:	cd 01       	movw	r24, r26
    6010:	d9 01       	movw	r26, r18
    6012:	ae 17       	cp	r26, r30
    6014:	bf 07       	cpc	r27, r31
    6016:	48 f4       	brcc	.+18     	; 0x602a <free+0x64>
    6018:	12 96       	adiw	r26, 0x02	; 2
    601a:	2d 91       	ld	r18, X+
    601c:	3c 91       	ld	r19, X
    601e:	13 97       	sbiw	r26, 0x03	; 3
    6020:	21 15       	cp	r18, r1
    6022:	31 05       	cpc	r19, r1
    6024:	a1 f7       	brne	.-24     	; 0x600e <free+0x48>
    6026:	cd 01       	movw	r24, r26
    6028:	21 c0       	rjmp	.+66     	; 0x606c <free+0xa6>
    602a:	b3 83       	std	Z+3, r27	; 0x03
    602c:	a2 83       	std	Z+2, r26	; 0x02
    602e:	ef 01       	movw	r28, r30
    6030:	49 91       	ld	r20, Y+
    6032:	59 91       	ld	r21, Y+
    6034:	9e 01       	movw	r18, r28
    6036:	24 0f       	add	r18, r20
    6038:	35 1f       	adc	r19, r21
    603a:	a2 17       	cp	r26, r18
    603c:	b3 07       	cpc	r27, r19
    603e:	79 f4       	brne	.+30     	; 0x605e <free+0x98>
    6040:	2d 91       	ld	r18, X+
    6042:	3c 91       	ld	r19, X
    6044:	11 97       	sbiw	r26, 0x01	; 1
    6046:	24 0f       	add	r18, r20
    6048:	35 1f       	adc	r19, r21
    604a:	2e 5f       	subi	r18, 0xFE	; 254
    604c:	3f 4f       	sbci	r19, 0xFF	; 255
    604e:	31 83       	std	Z+1, r19	; 0x01
    6050:	20 83       	st	Z, r18
    6052:	12 96       	adiw	r26, 0x02	; 2
    6054:	2d 91       	ld	r18, X+
    6056:	3c 91       	ld	r19, X
    6058:	13 97       	sbiw	r26, 0x03	; 3
    605a:	33 83       	std	Z+3, r19	; 0x03
    605c:	22 83       	std	Z+2, r18	; 0x02
    605e:	00 97       	sbiw	r24, 0x00	; 0
    6060:	29 f4       	brne	.+10     	; 0x606c <free+0xa6>
    6062:	f0 93 71 09 	sts	0x0971, r31
    6066:	e0 93 70 09 	sts	0x0970, r30
    606a:	43 c0       	rjmp	.+134    	; 0x60f2 <free+0x12c>
    606c:	dc 01       	movw	r26, r24
    606e:	13 96       	adiw	r26, 0x03	; 3
    6070:	fc 93       	st	X, r31
    6072:	ee 93       	st	-X, r30
    6074:	12 97       	sbiw	r26, 0x02	; 2
    6076:	4d 91       	ld	r20, X+
    6078:	5d 91       	ld	r21, X+
    607a:	a4 0f       	add	r26, r20
    607c:	b5 1f       	adc	r27, r21
    607e:	ea 17       	cp	r30, r26
    6080:	fb 07       	cpc	r31, r27
    6082:	69 f4       	brne	.+26     	; 0x609e <free+0xd8>
    6084:	20 81       	ld	r18, Z
    6086:	31 81       	ldd	r19, Z+1	; 0x01
    6088:	24 0f       	add	r18, r20
    608a:	35 1f       	adc	r19, r21
    608c:	2e 5f       	subi	r18, 0xFE	; 254
    608e:	3f 4f       	sbci	r19, 0xFF	; 255
    6090:	ec 01       	movw	r28, r24
    6092:	39 83       	std	Y+1, r19	; 0x01
    6094:	28 83       	st	Y, r18
    6096:	22 81       	ldd	r18, Z+2	; 0x02
    6098:	33 81       	ldd	r19, Z+3	; 0x03
    609a:	3b 83       	std	Y+3, r19	; 0x03
    609c:	2a 83       	std	Y+2, r18	; 0x02
    609e:	e0 e0       	ldi	r30, 0x00	; 0
    60a0:	f0 e0       	ldi	r31, 0x00	; 0
    60a2:	02 c0       	rjmp	.+4      	; 0x60a8 <free+0xe2>
    60a4:	fb 01       	movw	r30, r22
    60a6:	bc 01       	movw	r22, r24
    60a8:	db 01       	movw	r26, r22
    60aa:	12 96       	adiw	r26, 0x02	; 2
    60ac:	8d 91       	ld	r24, X+
    60ae:	9c 91       	ld	r25, X
    60b0:	13 97       	sbiw	r26, 0x03	; 3
    60b2:	00 97       	sbiw	r24, 0x00	; 0
    60b4:	b9 f7       	brne	.-18     	; 0x60a4 <free+0xde>
    60b6:	9b 01       	movw	r18, r22
    60b8:	2e 5f       	subi	r18, 0xFE	; 254
    60ba:	3f 4f       	sbci	r19, 0xFF	; 255
    60bc:	8d 91       	ld	r24, X+
    60be:	9c 91       	ld	r25, X
    60c0:	11 97       	sbiw	r26, 0x01	; 1
    60c2:	82 0f       	add	r24, r18
    60c4:	93 1f       	adc	r25, r19
    60c6:	40 91 6e 09 	lds	r20, 0x096E
    60ca:	50 91 6f 09 	lds	r21, 0x096F
    60ce:	48 17       	cp	r20, r24
    60d0:	59 07       	cpc	r21, r25
    60d2:	79 f4       	brne	.+30     	; 0x60f2 <free+0x12c>
    60d4:	30 97       	sbiw	r30, 0x00	; 0
    60d6:	29 f4       	brne	.+10     	; 0x60e2 <free+0x11c>
    60d8:	10 92 71 09 	sts	0x0971, r1
    60dc:	10 92 70 09 	sts	0x0970, r1
    60e0:	02 c0       	rjmp	.+4      	; 0x60e6 <free+0x120>
    60e2:	13 82       	std	Z+3, r1	; 0x03
    60e4:	12 82       	std	Z+2, r1	; 0x02
    60e6:	22 50       	subi	r18, 0x02	; 2
    60e8:	30 40       	sbci	r19, 0x00	; 0
    60ea:	30 93 6f 09 	sts	0x096F, r19
    60ee:	20 93 6e 09 	sts	0x096E, r18
    60f2:	df 91       	pop	r29
    60f4:	cf 91       	pop	r28
    60f6:	08 95       	ret

000060f8 <memset>:
    60f8:	dc 01       	movw	r26, r24
    60fa:	01 c0       	rjmp	.+2      	; 0x60fe <memset+0x6>
    60fc:	6d 93       	st	X+, r22
    60fe:	41 50       	subi	r20, 0x01	; 1
    6100:	50 40       	sbci	r21, 0x00	; 0
    6102:	e0 f7       	brcc	.-8      	; 0x60fc <memset+0x4>
    6104:	08 95       	ret

00006106 <_exit>:
    6106:	f8 94       	cli

00006108 <__stop_program>:
    6108:	ff cf       	rjmp	.-2      	; 0x6108 <__stop_program>
