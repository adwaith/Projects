
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fa  00800200  00006a82  00006af6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006a82  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004e9  008002fa  00006b7c  00006bf0  2**0
                  ALLOC
  3 .stab         00010434  00000000  00000000  00006bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00006235  00000000  00000000  00017024  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__ctors_end>
       4:	0c 94 ed 2e 	jmp	0x5dda	; 0x5dda <__vector_1>
       8:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
       c:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      10:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      14:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      18:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      1c:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      20:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      24:	0c 94 1b 2f 	jmp	0x5e36	; 0x5e36 <__vector_9>
      28:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      2c:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      30:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      34:	0c 94 ce 2c 	jmp	0x599c	; 0x599c <__vector_13>
      38:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      3c:	0c 94 ce 2c 	jmp	0x599c	; 0x599c <__vector_13>
      40:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      44:	0c 94 01 2d 	jmp	0x5a02	; 0x5a02 <__vector_17>
      48:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      4c:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      50:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      54:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      58:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      5c:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      60:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      64:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      68:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      6c:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      70:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      74:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      78:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      7c:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      80:	0c 94 0b 2d 	jmp	0x5a16	; 0x5a16 <__vector_32>
      84:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      88:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      8c:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      90:	0c 94 50 19 	jmp	0x32a0	; 0x32a0 <__vector_36>
      94:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      98:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      9c:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      a0:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      a4:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      a8:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      ac:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      b0:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      b4:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      b8:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      bc:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      c0:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      c4:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      c8:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__bad_interrupt>
      cc:	d0 1d       	adc	r29, r0
      ce:	d4 1d       	adc	r29, r4
      d0:	d6 1d       	adc	r29, r6
      d2:	d8 1d       	adc	r29, r8
      d4:	da 1d       	adc	r29, r10
      d6:	dc 1d       	adc	r29, r12
      d8:	e1 1d       	adc	r30, r1
      da:	de 1d       	adc	r29, r14
      dc:	e4 1d       	adc	r30, r4
      de:	e7 1d       	adc	r30, r7
      e0:	ea 1d       	adc	r30, r10
      e2:	f3 1d       	adc	r31, r3
      e4:	f6 1d       	adc	r31, r6
      e6:	f9 1d       	adc	r31, r9
      e8:	fc 1d       	adc	r31, r12
      ea:	f0 1d       	adc	r31, r0
      ec:	ce 1d       	adc	r28, r14
      ee:	d2 1d       	adc	r29, r2
      f0:	ff 1d       	adc	r31, r15
      f2:	02 1e       	adc	r0, r18
      f4:	ed 1d       	adc	r30, r13

000000f6 <__c.2424>:
      f6:	4e 4f 20 61 63 6b 20 6f 72 20 52 65 73 65 72 76     NO ack or Reserv
     106:	65 20 56 69 6f 6c 61 74 65 64 21 0d 0a 00           e Violated!...

00000114 <__c.2377>:
     114:	50 61 63 6b 65 74 20 45 6e 63 72 79 70 74 65 64     Packet Encrypted
     124:	0d 0a 00                                            ...

00000127 <__c.2373>:
     127:	2a 20 45 52 52 4f 52 20 72 65 61 64 69 6e 67 20     * ERROR reading 
     137:	4d 41 43 20 61 64 64 72 65 73 73 0d 0a 00           MAC address...

00000145 <__c.2371>:
     145:	4d 41 43 20 3d 20 30 78 00                          MAC = 0x.

0000014e <__c.2815>:
     14e:	46 61 69 6c 65 64 20 74 6f 20 72 65 67 69 73 74     Failed to regist
     15e:	65 72 20 73 69 67 6e 61 6c 0d 0a 00                 er signal...

0000016a <__c.2768>:
     16a:	42 4d 41 43 20 54 58 3a 20 57 6f 6b 65 20 75 70     BMAC TX: Woke up
     17a:	20 6f 6e 20 77 72 6f 6e 67 20 73 69 67 6e 61 6c      on wrong signal
     18a:	0d 0a 00                                            ...

0000018d <__c.2766>:
     18d:	42 4d 41 43 20 54 58 3a 20 45 72 72 6f 72 20 63     BMAC TX: Error c
     19d:	61 6c 6c 69 6e 67 20 65 76 65 6e 74 20 77 61 69     alling event wai
     1ad:	74 0d 0a 00                                         t...

000001b1 <__c.2674>:
     1b1:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     1c1:	74 69 6e 67 20 65 6e 61 62 6c 65 20 73 69 67 6e     ting enable sign
     1d1:	61 6c 20 66 61 69 6c 65 64 0d 0a 00                 al failed...

000001dd <__c.2672>:
     1dd:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     1ed:	74 69 6e 67 20 74 78 20 73 69 67 6e 61 6c 20 66     ting tx signal f
     1fd:	61 69 6c 65 64 0d 0a 00                             ailed...

00000205 <__c.2670>:
     205:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     215:	74 69 6e 67 20 72 78 20 73 69 67 6e 61 6c 20 66     ting rx signal f
     225:	61 69 6c 65 64 0d 0a 00                             ailed...

0000022d <__c.2791>:
     22d:	43 43 32 34 32 30 20 45 52 52 4f 52 3a 20 20 52     CC2420 ERROR:  R
     23d:	65 6c 65 61 73 65 20 6f 66 20 73 65 6d 61 70 68     elease of semaph
     24d:	6f 72 65 20 66 61 69 6c 65 64 0d 0a 00              ore failed...

0000025a <__c.2729>:
     25a:	43 43 32 34 32 30 20 45 52 52 4f 52 3a 20 20 41     CC2420 ERROR:  A
     26a:	63 63 65 73 73 20 74 6f 20 73 65 6d 61 70 68 6f     ccess to semapho
     27a:	72 65 20 66 61 69 6c 65 64 0d 0a 00                 re failed...

00000286 <__c.2409>:
     286:	55 4e 4b 4f 57 4e 00                                UNKOWN.

0000028d <__c.2406>:
     28d:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

0000029c <__c.2403>:
     29c:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

000002ad <__c.2400>:
     2ad:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     2bd:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

000002c8 <__c.2397>:
     2c8:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     2d8:	20 53 69 67 6e 61 6c 00                              Signal.

000002e0 <__c.2394>:
     2e0:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     2f0:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

00000300 <__c.2391>:
     300:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     310:	72 6f 72 00                                         ror.

00000314 <__c.2388>:
     314:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

00000325 <__c.2385>:
     325:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     335:	61 72 74 00                                         art.

00000339 <__c.2382>:
     339:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

00000348 <__c.2379>:
     348:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     358:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

00000363 <__c.2376>:
     363:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

0000036f <__c.2373>:
     36f:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     37f:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     38f:	20 6f 6b 3f 00                                       ok?.

00000394 <__c.2370>:
     394:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     3a4:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

000003b2 <__c.2367>:
     3b2:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     3c2:	72 74 00                                            rt.

000003c5 <__c.2364>:
     3c5:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     3d5:	49 44 00                                            ID.

000003d8 <__c.2361>:
     3d8:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     3e8:	20 57 61 6b 65 75 70 00                              Wakeup.

000003f0 <__c.2358>:
     3f0:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     400:	6c 61 74 65 64 00                                   lated.

00000406 <__c.2355>:
     406:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     416:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

00000421 <__c.2352>:
     421:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     431:	69 6e 74 65 72 00                                   inter.

00000437 <__c.2349>:
     437:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     447:	6c 6f 77 00                                         low.

0000044b <__c.2345>:
     44b:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     45b:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     46b:	6e 6f 75 67 68 21 00                                nough!.

00000472 <__c.2342>:
     472:	29 3a 20 00                                         ): .

00000476 <__c.2340>:
     476:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

00000482 <__c.2269>:
     482:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

00000491 <__c.2062>:
     491:	45 46 47 65 66 67 00                                EFGefg.

00000498 <__c.2056>:
     498:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

000004a8 <__ctors_end>:
     4a8:	11 24       	eor	r1, r1
     4aa:	1f be       	out	0x3f, r1	; 63
     4ac:	cf ef       	ldi	r28, 0xFF	; 255
     4ae:	d1 e2       	ldi	r29, 0x21	; 33
     4b0:	de bf       	out	0x3e, r29	; 62
     4b2:	cd bf       	out	0x3d, r28	; 61

000004b4 <__do_copy_data>:
     4b4:	12 e0       	ldi	r17, 0x02	; 2
     4b6:	a0 e0       	ldi	r26, 0x00	; 0
     4b8:	b2 e0       	ldi	r27, 0x02	; 2
     4ba:	e2 e8       	ldi	r30, 0x82	; 130
     4bc:	fa e6       	ldi	r31, 0x6A	; 106
     4be:	00 e0       	ldi	r16, 0x00	; 0
     4c0:	0b bf       	out	0x3b, r16	; 59
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <__do_copy_data+0x14>
     4c4:	07 90       	elpm	r0, Z+
     4c6:	0d 92       	st	X+, r0
     4c8:	aa 3f       	cpi	r26, 0xFA	; 250
     4ca:	b1 07       	cpc	r27, r17
     4cc:	d9 f7       	brne	.-10     	; 0x4c4 <__do_copy_data+0x10>

000004ce <__do_clear_bss>:
     4ce:	17 e0       	ldi	r17, 0x07	; 7
     4d0:	aa ef       	ldi	r26, 0xFA	; 250
     4d2:	b2 e0       	ldi	r27, 0x02	; 2
     4d4:	01 c0       	rjmp	.+2      	; 0x4d8 <.do_clear_bss_start>

000004d6 <.do_clear_bss_loop>:
     4d6:	1d 92       	st	X+, r1

000004d8 <.do_clear_bss_start>:
     4d8:	a3 3e       	cpi	r26, 0xE3	; 227
     4da:	b1 07       	cpc	r27, r17
     4dc:	e1 f7       	brne	.-8      	; 0x4d6 <.do_clear_bss_loop>
     4de:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <main>
     4e2:	0c 94 40 35 	jmp	0x6a80	; 0x6a80 <_exit>

000004e6 <__bad_interrupt>:
     4e6:	0c 94 39 2d 	jmp	0x5a72	; 0x5a72 <__vector_default>

000004ea <nrk_create_taskset>:
  }

}

void nrk_create_taskset ()
{
     4ea:	6f 92       	push	r6
     4ec:	7f 92       	push	r7
     4ee:	8f 92       	push	r8
     4f0:	9f 92       	push	r9
     4f2:	af 92       	push	r10
     4f4:	bf 92       	push	r11
     4f6:	cf 92       	push	r12
     4f8:	df 92       	push	r13
     4fa:	ef 92       	push	r14
     4fc:	ff 92       	push	r15
     4fe:	0f 93       	push	r16
     500:	1f 93       	push	r17


  RX_TASK.task = rx_task;
     502:	85 e0       	ldi	r24, 0x05	; 5
     504:	94 e0       	ldi	r25, 0x04	; 4
     506:	90 93 cb 05 	sts	0x05CB, r25
     50a:	80 93 ca 05 	sts	0x05CA, r24
  nrk_task_set_stk( &RX_TASK, rx_task_stack, NRK_APP_STACKSIZE);
     50e:	45 ec       	ldi	r20, 0xC5	; 197
     510:	64 2e       	mov	r6, r20
     512:	45 e0       	ldi	r20, 0x05	; 5
     514:	74 2e       	mov	r7, r20
     516:	40 e8       	ldi	r20, 0x80	; 128
     518:	50 e0       	ldi	r21, 0x00	; 0
     51a:	6b e4       	ldi	r22, 0x4B	; 75
     51c:	74 e0       	ldi	r23, 0x04	; 4
     51e:	c3 01       	movw	r24, r6
     520:	0e 94 16 30 	call	0x602c	; 0x602c <nrk_task_set_stk>
  RX_TASK.prio = 2;
     524:	32 e0       	ldi	r19, 0x02	; 2
     526:	c3 2e       	mov	r12, r19
     528:	c0 92 cd 05 	sts	0x05CD, r12
  RX_TASK.FirstActivation = TRUE;
     52c:	dd 24       	eor	r13, r13
     52e:	d3 94       	inc	r13
     530:	d0 92 cc 05 	sts	0x05CC, r13
  RX_TASK.Type = BASIC_TASK;
     534:	d0 92 ce 05 	sts	0x05CE, r13
  RX_TASK.SchType = PREEMPTIVE;
     538:	d0 92 cf 05 	sts	0x05CF, r13
  RX_TASK.period.secs = 1;
     53c:	21 e0       	ldi	r18, 0x01	; 1
     53e:	e2 2e       	mov	r14, r18
     540:	f1 2c       	mov	r15, r1
     542:	01 2d       	mov	r16, r1
     544:	11 2d       	mov	r17, r1
     546:	e0 92 d0 05 	sts	0x05D0, r14
     54a:	f0 92 d1 05 	sts	0x05D1, r15
     54e:	00 93 d2 05 	sts	0x05D2, r16
     552:	10 93 d3 05 	sts	0x05D3, r17
  RX_TASK.period.nano_secs = 0;
     556:	10 92 d4 05 	sts	0x05D4, r1
     55a:	10 92 d5 05 	sts	0x05D5, r1
     55e:	10 92 d6 05 	sts	0x05D6, r1
     562:	10 92 d7 05 	sts	0x05D7, r1
  RX_TASK.cpu_reserve.secs = 1;
     566:	e0 92 d8 05 	sts	0x05D8, r14
     56a:	f0 92 d9 05 	sts	0x05D9, r15
     56e:	00 93 da 05 	sts	0x05DA, r16
     572:	10 93 db 05 	sts	0x05DB, r17
  RX_TASK.cpu_reserve.nano_secs = 500 * NANOS_PER_MS;
     576:	81 2c       	mov	r8, r1
     578:	95 e6       	ldi	r25, 0x65	; 101
     57a:	99 2e       	mov	r9, r25
     57c:	9d ec       	ldi	r25, 0xCD	; 205
     57e:	a9 2e       	mov	r10, r25
     580:	9d e1       	ldi	r25, 0x1D	; 29
     582:	b9 2e       	mov	r11, r25
     584:	80 92 dc 05 	sts	0x05DC, r8
     588:	90 92 dd 05 	sts	0x05DD, r9
     58c:	a0 92 de 05 	sts	0x05DE, r10
     590:	b0 92 df 05 	sts	0x05DF, r11
  RX_TASK.offset.secs = 0;
     594:	10 92 e0 05 	sts	0x05E0, r1
     598:	10 92 e1 05 	sts	0x05E1, r1
     59c:	10 92 e2 05 	sts	0x05E2, r1
     5a0:	10 92 e3 05 	sts	0x05E3, r1
  RX_TASK.offset.nano_secs = 0;
     5a4:	10 92 e4 05 	sts	0x05E4, r1
     5a8:	10 92 e5 05 	sts	0x05E5, r1
     5ac:	10 92 e6 05 	sts	0x05E6, r1
     5b0:	10 92 e7 05 	sts	0x05E7, r1
  nrk_activate_task (&RX_TASK);
     5b4:	c3 01       	movw	r24, r6
     5b6:	0e 94 65 25 	call	0x4aca	; 0x4aca <nrk_activate_task>

  TX_TASK.task = tx_task;
     5ba:	8e e3       	ldi	r24, 0x3E	; 62
     5bc:	93 e0       	ldi	r25, 0x03	; 3
     5be:	90 93 ee 05 	sts	0x05EE, r25
     5c2:	80 93 ed 05 	sts	0x05ED, r24
  nrk_task_set_stk( &TX_TASK, tx_task_stack, NRK_APP_STACKSIZE);
     5c6:	88 ee       	ldi	r24, 0xE8	; 232
     5c8:	68 2e       	mov	r6, r24
     5ca:	85 e0       	ldi	r24, 0x05	; 5
     5cc:	78 2e       	mov	r7, r24
     5ce:	40 e8       	ldi	r20, 0x80	; 128
     5d0:	50 e0       	ldi	r21, 0x00	; 0
     5d2:	64 ec       	ldi	r22, 0xC4	; 196
     5d4:	73 e0       	ldi	r23, 0x03	; 3
     5d6:	c3 01       	movw	r24, r6
     5d8:	0e 94 16 30 	call	0x602c	; 0x602c <nrk_task_set_stk>
  TX_TASK.prio = 2;
     5dc:	c0 92 f0 05 	sts	0x05F0, r12
  TX_TASK.FirstActivation = TRUE;
     5e0:	d0 92 ef 05 	sts	0x05EF, r13
  TX_TASK.Type = BASIC_TASK;
     5e4:	d0 92 f1 05 	sts	0x05F1, r13
  TX_TASK.SchType = PREEMPTIVE;
     5e8:	d0 92 f2 05 	sts	0x05F2, r13
  TX_TASK.period.secs = 0;
     5ec:	10 92 f3 05 	sts	0x05F3, r1
     5f0:	10 92 f4 05 	sts	0x05F4, r1
     5f4:	10 92 f5 05 	sts	0x05F5, r1
     5f8:	10 92 f6 05 	sts	0x05F6, r1
  TX_TASK.period.nano_secs = 100 * NANOS_PER_MS;
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	91 ee       	ldi	r25, 0xE1	; 225
     600:	a5 ef       	ldi	r26, 0xF5	; 245
     602:	b5 e0       	ldi	r27, 0x05	; 5
     604:	80 93 f7 05 	sts	0x05F7, r24
     608:	90 93 f8 05 	sts	0x05F8, r25
     60c:	a0 93 f9 05 	sts	0x05F9, r26
     610:	b0 93 fa 05 	sts	0x05FA, r27
  TX_TASK.cpu_reserve.secs = 1;
     614:	e0 92 fb 05 	sts	0x05FB, r14
     618:	f0 92 fc 05 	sts	0x05FC, r15
     61c:	00 93 fd 05 	sts	0x05FD, r16
     620:	10 93 fe 05 	sts	0x05FE, r17
  TX_TASK.cpu_reserve.nano_secs = 500 * NANOS_PER_MS;
     624:	80 92 ff 05 	sts	0x05FF, r8
     628:	90 92 00 06 	sts	0x0600, r9
     62c:	a0 92 01 06 	sts	0x0601, r10
     630:	b0 92 02 06 	sts	0x0602, r11
  TX_TASK.offset.secs = 0;
     634:	10 92 03 06 	sts	0x0603, r1
     638:	10 92 04 06 	sts	0x0604, r1
     63c:	10 92 05 06 	sts	0x0605, r1
     640:	10 92 06 06 	sts	0x0606, r1
  TX_TASK.offset.nano_secs = 0;
     644:	10 92 07 06 	sts	0x0607, r1
     648:	10 92 08 06 	sts	0x0608, r1
     64c:	10 92 09 06 	sts	0x0609, r1
     650:	10 92 0a 06 	sts	0x060A, r1
  nrk_activate_task (&TX_TASK);
     654:	c3 01       	movw	r24, r6
     656:	0e 94 65 25 	call	0x4aca	; 0x4aca <nrk_activate_task>



  printf ("Create done\r\n");
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	92 e0       	ldi	r25, 0x02	; 2
     65e:	0e 94 9b 32 	call	0x6536	; 0x6536 <puts>
     662:	1f 91       	pop	r17
     664:	0f 91       	pop	r16
     666:	ff 90       	pop	r15
     668:	ef 90       	pop	r14
     66a:	df 90       	pop	r13
     66c:	cf 90       	pop	r12
     66e:	bf 90       	pop	r11
     670:	af 90       	pop	r10
     672:	9f 90       	pop	r9
     674:	8f 90       	pop	r8
     676:	7f 90       	pop	r7
     678:	6f 90       	pop	r6
     67a:	08 95       	ret

0000067c <tx_task>:
}

uint8_t ctr_cnt[4];

void tx_task ()
{
     67c:	6f 92       	push	r6
     67e:	7f 92       	push	r7
     680:	8f 92       	push	r8
     682:	9f 92       	push	r9
     684:	af 92       	push	r10
     686:	bf 92       	push	r11
     688:	cf 92       	push	r12
     68a:	df 92       	push	r13
     68c:	ef 92       	push	r14
     68e:	ff 92       	push	r15
     690:	0f 93       	push	r16
     692:	1f 93       	push	r17
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
     69c:	28 97       	sbiw	r28, 0x08	; 8
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	de bf       	out	0x3e, r29	; 62
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	cd bf       	out	0x3d, r28	; 61
  int8_t v;
  nrk_sig_t tx_done_signal;
  nrk_sig_mask_t ret;
  nrk_time_t r_period;

  printf ("tx_task PID=%d\r\n", nrk_get_pid ());
     6a8:	0e 94 73 23 	call	0x46e6	; 0x46e6 <nrk_get_pid>
     6ac:	99 27       	eor	r25, r25
     6ae:	9f 93       	push	r25
     6b0:	8f 93       	push	r24
     6b2:	8d e0       	ldi	r24, 0x0D	; 13
     6b4:	92 e0       	ldi	r25, 0x02	; 2
     6b6:	9f 93       	push	r25
     6b8:	8f 93       	push	r24
     6ba:	0e 94 7d 32 	call	0x64fa	; 0x64fa <printf>

  // Wait until the tx_task starts up bmac
  // This should be called by all tasks using bmac that
  // do not call bmac_init()...
  while (!bmac_started ())
     6be:	0f 90       	pop	r0
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	0f 90       	pop	r0
     6c6:	02 c0       	rjmp	.+4      	; 0x6cc <tx_task+0x50>
    nrk_wait_until_next_period ();
     6c8:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <nrk_wait_until_next_period>
  printf ("tx_task PID=%d\r\n", nrk_get_pid ());

  // Wait until the tx_task starts up bmac
  // This should be called by all tasks using bmac that
  // do not call bmac_init()...
  while (!bmac_started ())
     6cc:	0e 94 94 05 	call	0xb28	; 0xb28 <bmac_started>
     6d0:	88 23       	and	r24, r24
     6d2:	d1 f3       	breq	.-12     	; 0x6c8 <tx_task+0x4c>
    nrk_wait_until_next_period ();


  // Sample of using Reservations on TX packets
  // This example allows 2 packets to be sent every 5 seconds
   r_period.secs=5;
     6d4:	85 e0       	ldi	r24, 0x05	; 5
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	a0 e0       	ldi	r26, 0x00	; 0
     6da:	b0 e0       	ldi	r27, 0x00	; 0
     6dc:	89 83       	std	Y+1, r24	; 0x01
     6de:	9a 83       	std	Y+2, r25	; 0x02
     6e0:	ab 83       	std	Y+3, r26	; 0x03
     6e2:	bc 83       	std	Y+4, r27	; 0x04
   r_period.nano_secs=0;
     6e4:	1d 82       	std	Y+5, r1	; 0x05
     6e6:	1e 82       	std	Y+6, r1	; 0x06
     6e8:	1f 82       	std	Y+7, r1	; 0x07
     6ea:	18 86       	std	Y+8, r1	; 0x08

   nrk_wait(r_period);
     6ec:	29 81       	ldd	r18, Y+1	; 0x01
     6ee:	3a 81       	ldd	r19, Y+2	; 0x02
     6f0:	4b 81       	ldd	r20, Y+3	; 0x03
     6f2:	5c 81       	ldd	r21, Y+4	; 0x04
     6f4:	6d 81       	ldd	r22, Y+5	; 0x05
     6f6:	7e 81       	ldd	r23, Y+6	; 0x06
     6f8:	8f 81       	ldd	r24, Y+7	; 0x07
     6fa:	98 85       	ldd	r25, Y+8	; 0x08
     6fc:	0e 94 84 23 	call	0x4708	; 0x4708 <nrk_wait>
  // if(v==NRK_ERROR) nrk_kprintf( PSTR("Error setting b-mac tx reservation (is NRK_MAX_RESERVES defined?)\r\n" ));


  // Get and register the tx_done_signal if you want to
  // do non-blocking transmits
  tx_done_signal = bmac_get_tx_done_signal ();
     700:	0e 94 30 07 	call	0xe60	; 0xe60 <bmac_get_tx_done_signal>
  nrk_signal_register (tx_done_signal);
     704:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <nrk_signal_register>

  ctr_cnt[0]=0; ctr_cnt[1]=0; ctr_cnt[2]=0; ctr_cnt[3]=0;
     708:	10 92 d7 04 	sts	0x04D7, r1
     70c:	10 92 d8 04 	sts	0x04D8, r1
     710:	10 92 d9 04 	sts	0x04D9, r1
     714:	10 92 da 04 	sts	0x04DA, r1
     718:	00 e0       	ldi	r16, 0x00	; 0
     71a:	10 e0       	ldi	r17, 0x00	; 0
  cnt = 0;
  while (1) {
    // Build a TX packet
    sprintf (tx_buf, "%u %u",mac_lsb, cnt);
     71c:	f1 e5       	ldi	r31, 0x51	; 81
     71e:	ef 2e       	mov	r14, r31
     720:	f5 e0       	ldi	r31, 0x05	; 5
     722:	ff 2e       	mov	r15, r31
     724:	ee e1       	ldi	r30, 0x1E	; 30
     726:	6e 2e       	mov	r6, r30
     728:	e2 e0       	ldi	r30, 0x02	; 2
     72a:	7e 2e       	mov	r7, r30
     72c:	77 ed       	ldi	r23, 0xD7	; 215
     72e:	87 2e       	mov	r8, r23
     730:	74 e0       	ldi	r23, 0x04	; 4
     732:	97 2e       	mov	r9, r23
     734:	66 ef       	ldi	r22, 0xF6	; 246
     736:	a6 2e       	mov	r10, r22
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	b6 2e       	mov	r11, r22
   
    // If you want to see your remaining reservation
    // printf( "reserve=%d ",bmac_tx_reserve_get() );
    
    // Task gets control again after TX complete
    printf( "Pkt %u sent\r\n",cnt );
     73c:	54 e2       	ldi	r21, 0x24	; 36
     73e:	c5 2e       	mov	r12, r21
     740:	52 e0       	ldi	r21, 0x02	; 2
     742:	d5 2e       	mov	r13, r21

  ctr_cnt[0]=0; ctr_cnt[1]=0; ctr_cnt[2]=0; ctr_cnt[3]=0;
  cnt = 0;
  while (1) {
    // Build a TX packet
    sprintf (tx_buf, "%u %u",mac_lsb, cnt);
     744:	1f 93       	push	r17
     746:	0f 93       	push	r16
     748:	80 91 49 04 	lds	r24, 0x0449
     74c:	99 27       	eor	r25, r25
     74e:	9f 93       	push	r25
     750:	8f 93       	push	r24
     752:	7f 92       	push	r7
     754:	6f 92       	push	r6
     756:	ff 92       	push	r15
     758:	ef 92       	push	r14
     75a:	0e 94 ce 32 	call	0x659c	; 0x659c <sprintf>
    nrk_led_set (BLUE_LED);
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 8f 18 	call	0x311e	; 0x311e <nrk_led_set>
    // bmac_addr_decode_set_my_mac(uint16_t MAC_ADDR); 
    // bmac_addr_decode_dest_mac(uint16_t DST_ADDR);  // 0xFFFF is broadcast
    // bmac_addr_decode_enable();
    // bmac_addr_decode_disable();

     ctr_cnt[0]=cnt; 
     766:	00 93 d7 04 	sts	0x04D7, r16
     if(ctr_cnt[0]==255) ctr_cnt[1]++; 
     76a:	8d b7       	in	r24, 0x3d	; 61
     76c:	9e b7       	in	r25, 0x3e	; 62
     76e:	08 96       	adiw	r24, 0x08	; 8
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	f8 94       	cli
     774:	9e bf       	out	0x3e, r25	; 62
     776:	0f be       	out	0x3f, r0	; 63
     778:	8d bf       	out	0x3d, r24	; 61
     77a:	0f 3f       	cpi	r16, 0xFF	; 255
     77c:	29 f4       	brne	.+10     	; 0x788 <tx_task+0x10c>
     77e:	80 91 d8 04 	lds	r24, 0x04D8
     782:	8f 5f       	subi	r24, 0xFF	; 255
     784:	80 93 d8 04 	sts	0x04D8, r24
     if(ctr_cnt[1]==255) ctr_cnt[2]++; 
     788:	80 91 d8 04 	lds	r24, 0x04D8
     78c:	8f 3f       	cpi	r24, 0xFF	; 255
     78e:	29 f4       	brne	.+10     	; 0x79a <tx_task+0x11e>
     790:	80 91 d9 04 	lds	r24, 0x04D9
     794:	8f 5f       	subi	r24, 0xFF	; 255
     796:	80 93 d9 04 	sts	0x04D9, r24
     if(ctr_cnt[2]==255) ctr_cnt[3]++; 
     79a:	80 91 d9 04 	lds	r24, 0x04D9
     79e:	8f 3f       	cpi	r24, 0xFF	; 255
     7a0:	29 f4       	brne	.+10     	; 0x7ac <tx_task+0x130>
     7a2:	80 91 da 04 	lds	r24, 0x04DA
     7a6:	8f 5f       	subi	r24, 0xFF	; 255
     7a8:	80 93 da 04 	sts	0x04DA, r24
     // You need to increase the ctr on each packet to make the 
     // stream cipher not repeat.
     bmac_encryption_set_ctr_counter(&ctr_cnt,4);
     7ac:	64 e0       	ldi	r22, 0x04	; 4
     7ae:	c4 01       	movw	r24, r8
     7b0:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <bmac_encryption_set_ctr_counter>

    // For blocking transmits, use the following function call.
    // For this there is no need to register  
     val=bmac_tx_pkt(tx_buf, strlen(tx_buf));
     7b4:	f7 01       	movw	r30, r14
     7b6:	01 90       	ld	r0, Z+
     7b8:	00 20       	and	r0, r0
     7ba:	e9 f7       	brne	.-6      	; 0x7b6 <tx_task+0x13a>
     7bc:	31 97       	sbiw	r30, 0x01	; 1
     7be:	e1 55       	subi	r30, 0x51	; 81
     7c0:	f5 40       	sbci	r31, 0x05	; 5
     7c2:	6e 2f       	mov	r22, r30
     7c4:	c7 01       	movw	r24, r14
     7c6:	0e 94 53 07 	call	0xea6	; 0xea6 <bmac_tx_pkt>
     if(val==NRK_OK) cnt++;
     7ca:	81 30       	cpi	r24, 0x01	; 1
     7cc:	19 f4       	brne	.+6      	; 0x7d4 <tx_task+0x158>
     7ce:	0f 5f       	subi	r16, 0xFF	; 255
     7d0:	1f 4f       	sbci	r17, 0xFF	; 255
     7d2:	03 c0       	rjmp	.+6      	; 0x7da <tx_task+0x15e>
     else nrk_kprintf( PSTR( "NO ack or Reserve Violated!\r\n" ));
     7d4:	c5 01       	movw	r24, r10
     7d6:	0e 94 3d 19 	call	0x327a	; 0x327a <nrk_kprintf>

    if(cnt>=1000 ) while(1) nrk_wait_until_next_period();
     7da:	93 e0       	ldi	r25, 0x03	; 3
     7dc:	08 3e       	cpi	r16, 0xE8	; 232
     7de:	19 07       	cpc	r17, r25
     7e0:	18 f0       	brcs	.+6      	; 0x7e8 <tx_task+0x16c>
     7e2:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <nrk_wait_until_next_period>
     7e6:	fd cf       	rjmp	.-6      	; 0x7e2 <tx_task+0x166>
   
    // If you want to see your remaining reservation
    // printf( "reserve=%d ",bmac_tx_reserve_get() );
    
    // Task gets control again after TX complete
    printf( "Pkt %u sent\r\n",cnt );
     7e8:	1f 93       	push	r17
     7ea:	0f 93       	push	r16
     7ec:	df 92       	push	r13
     7ee:	cf 92       	push	r12
     7f0:	0e 94 7d 32 	call	0x64fa	; 0x64fa <printf>
     nrk_led_clr (BLUE_LED);
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	0e 94 72 18 	call	0x30e4	; 0x30e4 <nrk_led_clr>
    nrk_wait_until_next_period ();
     7fc:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <nrk_wait_until_next_period>
  }
     800:	0f 90       	pop	r0
     802:	0f 90       	pop	r0
     804:	0f 90       	pop	r0
     806:	0f 90       	pop	r0
     808:	9d cf       	rjmp	.-198    	; 0x744 <tx_task+0xc8>

0000080a <rx_task>:

  return 0;
}

void rx_task ()
{
     80a:	6f 92       	push	r6
     80c:	7f 92       	push	r7
     80e:	8f 92       	push	r8
     810:	9f 92       	push	r9
     812:	af 92       	push	r10
     814:	bf 92       	push	r11
     816:	cf 92       	push	r12
     818:	df 92       	push	r13
     81a:	ef 92       	push	r14
     81c:	ff 92       	push	r15
     81e:	0f 93       	push	r16
     820:	1f 93       	push	r17
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
     82a:	22 97       	sbiw	r28, 0x02	; 2
     82c:	0f b6       	in	r0, 0x3f	; 63
     82e:	f8 94       	cli
     830:	de bf       	out	0x3e, r29	; 62
     832:	0f be       	out	0x3f, r0	; 63
     834:	cd bf       	out	0x3d, r28	; 61
  uint8_t i, len;
  int8_t rssi, val;
  uint8_t *local_rx_buf;
  nrk_time_t check_period;
  printf ("rx_task PID=%d\r\n", nrk_get_pid ());
     836:	0e 94 73 23 	call	0x46e6	; 0x46e6 <nrk_get_pid>
     83a:	99 27       	eor	r25, r25
     83c:	9f 93       	push	r25
     83e:	8f 93       	push	r24
     840:	82 e3       	ldi	r24, 0x32	; 50
     842:	92 e0       	ldi	r25, 0x02	; 2
     844:	9f 93       	push	r25
     846:	8f 93       	push	r24
     848:	0e 94 7d 32 	call	0x64fa	; 0x64fa <printf>

	val=read_eeprom_mac_address(&mac_address);
     84c:	85 e4       	ldi	r24, 0x45	; 69
     84e:	94 e0       	ldi	r25, 0x04	; 4
     850:	0e 94 bf 19 	call	0x337e	; 0x337e <read_eeprom_mac_address>
	if(val==1)
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	0f 90       	pop	r0
     85c:	81 30       	cpi	r24, 0x01	; 1
     85e:	09 f0       	breq	.+2      	; 0x862 <rx_task+0x58>
     860:	67 c0       	rjmp	.+206    	; 0x930 <rx_task+0x126>
	{
	nrk_kprintf( PSTR("MAC = 0x"));
     862:	85 e4       	ldi	r24, 0x45	; 69
     864:	91 e0       	ldi	r25, 0x01	; 1
     866:	0e 94 3d 19 	call	0x327a	; 0x327a <nrk_kprintf>
	printf( "%x",(uint8_t)((mac_address>>24)&0xff));
     86a:	80 91 48 04 	lds	r24, 0x0448
     86e:	99 27       	eor	r25, r25
     870:	9f 93       	push	r25
     872:	8f 93       	push	r24
     874:	03 e4       	ldi	r16, 0x43	; 67
     876:	12 e0       	ldi	r17, 0x02	; 2
     878:	1f 93       	push	r17
     87a:	0f 93       	push	r16
     87c:	0e 94 7d 32 	call	0x64fa	; 0x64fa <printf>
	printf( "%x",(uint8_t)((mac_address>>16)&0xff));
     880:	80 91 47 04 	lds	r24, 0x0447
     884:	99 27       	eor	r25, r25
     886:	9f 93       	push	r25
     888:	8f 93       	push	r24
     88a:	1f 93       	push	r17
     88c:	0f 93       	push	r16
     88e:	0e 94 7d 32 	call	0x64fa	; 0x64fa <printf>
	printf( "%x",(uint8_t)((mac_address>>8)&0xff));
     892:	80 91 45 04 	lds	r24, 0x0445
     896:	90 91 46 04 	lds	r25, 0x0446
     89a:	a0 91 47 04 	lds	r26, 0x0447
     89e:	b0 91 48 04 	lds	r27, 0x0448
     8a2:	89 2f       	mov	r24, r25
     8a4:	9a 2f       	mov	r25, r26
     8a6:	ab 2f       	mov	r26, r27
     8a8:	bb 27       	eor	r27, r27
     8aa:	99 27       	eor	r25, r25
     8ac:	9f 93       	push	r25
     8ae:	8f 93       	push	r24
     8b0:	1f 93       	push	r17
     8b2:	0f 93       	push	r16
     8b4:	0e 94 7d 32 	call	0x64fa	; 0x64fa <printf>
	printf( "%x\r\n",(uint8_t)((mac_address & 0xff)));
     8b8:	80 91 45 04 	lds	r24, 0x0445
     8bc:	99 27       	eor	r25, r25
     8be:	9f 93       	push	r25
     8c0:	8f 93       	push	r24
     8c2:	86 e4       	ldi	r24, 0x46	; 70
     8c4:	92 e0       	ldi	r25, 0x02	; 2
     8c6:	9f 93       	push	r25
     8c8:	8f 93       	push	r24
     8ca:	0e 94 7d 32 	call	0x64fa	; 0x64fa <printf>
	mac_lsb=mac_address & 0xff;
     8ce:	80 91 45 04 	lds	r24, 0x0445
     8d2:	80 93 49 04 	sts	0x0449, r24




  // init bmac on channel 25 
  bmac_init (25);
     8d6:	89 e1       	ldi	r24, 0x19	; 25
     8d8:	0e 94 c0 07 	call	0xf80	; 0xf80 <bmac_init>

  // Enable AES 128 bit encryption
  // When encryption is active, messages from plaintext
  // source will still be received. 
  bmac_encryption_set_key(aes_key,16);
     8dc:	60 e1       	ldi	r22, 0x10	; 16
     8de:	8d e6       	ldi	r24, 0x6D	; 109
     8e0:	92 e0       	ldi	r25, 0x02	; 2
     8e2:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <bmac_encryption_set_key>
  bmac_encryption_enable();
     8e6:	0e 94 75 08 	call	0x10ea	; 0x10ea <bmac_encryption_enable>

  //if(val==NRK_ERROR) nrk_kprintf( PSTR("ERROR setting bmac rate\r\n" ));
  // This sets the next RX buffer.
  // This can be called at anytime before releaseing the packet
  // if you wish to do a zero-copy buffer switch
  bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);
     8ea:	64 e7       	ldi	r22, 0x74	; 116
     8ec:	8b ed       	ldi	r24, 0xDB	; 219
     8ee:	94 e0       	ldi	r25, 0x04	; 4
     8f0:	0e 94 1b 05 	call	0xa36	; 0xa36 <bmac_rx_pkt_set_buffer>
     8f4:	8d b7       	in	r24, 0x3d	; 61
     8f6:	9e b7       	in	r25, 0x3e	; 62
     8f8:	40 96       	adiw	r24, 0x10	; 16
     8fa:	0f b6       	in	r0, 0x3f	; 63
     8fc:	f8 94       	cli
     8fe:	9e bf       	out	0x3e, r25	; 62
     900:	0f be       	out	0x3f, r0	; 63
     902:	8d bf       	out	0x3d, r24	; 61
  while (1) {
    // Wait until an RX packet is received
    val = bmac_wait_until_rx_pkt ();
    // Get the RX packet 
    nrk_led_set (ORANGE_LED);
    local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
     904:	02 e0       	ldi	r16, 0x02	; 2
     906:	60 2e       	mov	r6, r16
     908:	71 2c       	mov	r7, r1
     90a:	6c 0e       	add	r6, r28
     90c:	7d 1e       	adc	r7, r29
     90e:	4e 01       	movw	r8, r28
     910:	08 94       	sec
     912:	81 1c       	adc	r8, r1
     914:	91 1c       	adc	r9, r1
     916:	14 e1       	ldi	r17, 0x14	; 20
     918:	a1 2e       	mov	r10, r17
     91a:	11 e0       	ldi	r17, 0x01	; 1
     91c:	b1 2e       	mov	r11, r17
    if( bmac_rx_pkt_is_encrypted()==1 ) nrk_kprintf( PSTR( "Packet Encrypted\r\n" ));
    printf ("Got RX packet len=%d RSSI=%d [", len, rssi);
     91e:	bb e4       	ldi	r27, 0x4B	; 75
     920:	cb 2e       	mov	r12, r27
     922:	b2 e0       	ldi	r27, 0x02	; 2
     924:	db 2e       	mov	r13, r27
     926:	aa e6       	ldi	r26, 0x6A	; 106
     928:	ea 2e       	mov	r14, r26
     92a:	a2 e0       	ldi	r26, 0x02	; 2
     92c:	fa 2e       	mov	r15, r26
     92e:	07 c0       	rjmp	.+14     	; 0x93e <rx_task+0x134>
	}
	else
	{
	while(1)
		{
		nrk_kprintf( PSTR( "* ERROR reading MAC address\r\n" ));
     930:	87 e2       	ldi	r24, 0x27	; 39
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	0e 94 3d 19 	call	0x327a	; 0x327a <nrk_kprintf>
		while(1) nrk_wait_until_next_period();
     938:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <nrk_wait_until_next_period>
     93c:	fd cf       	rjmp	.-6      	; 0x938 <rx_task+0x12e>
  // if you wish to do a zero-copy buffer switch
  bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);

  while (1) {
    // Wait until an RX packet is received
    val = bmac_wait_until_rx_pkt ();
     93e:	0e 94 db 08 	call	0x11b6	; 0x11b6 <bmac_wait_until_rx_pkt>
    // Get the RX packet 
    nrk_led_set (ORANGE_LED);
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	0e 94 8f 18 	call	0x311e	; 0x311e <nrk_led_set>
    local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
     94a:	b3 01       	movw	r22, r6
     94c:	c4 01       	movw	r24, r8
     94e:	0e 94 03 09 	call	0x1206	; 0x1206 <bmac_rx_pkt_get>
    if( bmac_rx_pkt_is_encrypted()==1 ) nrk_kprintf( PSTR( "Packet Encrypted\r\n" ));
     952:	0e 94 84 08 	call	0x1108	; 0x1108 <bmac_rx_pkt_is_encrypted>
     956:	81 30       	cpi	r24, 0x01	; 1
     958:	19 f4       	brne	.+6      	; 0x960 <rx_task+0x156>
     95a:	c5 01       	movw	r24, r10
     95c:	0e 94 3d 19 	call	0x327a	; 0x327a <nrk_kprintf>
    printf ("Got RX packet len=%d RSSI=%d [", len, rssi);
     960:	8a 81       	ldd	r24, Y+2	; 0x02
     962:	99 27       	eor	r25, r25
     964:	87 fd       	sbrc	r24, 7
     966:	90 95       	com	r25
     968:	9f 93       	push	r25
     96a:	8f 93       	push	r24
     96c:	89 81       	ldd	r24, Y+1	; 0x01
     96e:	99 27       	eor	r25, r25
     970:	9f 93       	push	r25
     972:	8f 93       	push	r24
     974:	df 92       	push	r13
     976:	cf 92       	push	r12
     978:	0e 94 7d 32 	call	0x64fa	; 0x64fa <printf>
     97c:	00 e0       	ldi	r16, 0x00	; 0
     97e:	10 e0       	ldi	r17, 0x00	; 0
    for (i = 0; i < len; i++)
     980:	8d b7       	in	r24, 0x3d	; 61
     982:	9e b7       	in	r25, 0x3e	; 62
     984:	06 96       	adiw	r24, 0x06	; 6
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	f8 94       	cli
     98a:	9e bf       	out	0x3e, r25	; 62
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	8d bf       	out	0x3d, r24	; 61
     990:	07 c0       	rjmp	.+14     	; 0x9a0 <rx_task+0x196>
      printf ("%c", rx_buf[i]);
     992:	ff 27       	eor	r31, r31
     994:	e5 52       	subi	r30, 0x25	; 37
     996:	fb 4f       	sbci	r31, 0xFB	; 251
     998:	80 81       	ld	r24, Z
     99a:	99 27       	eor	r25, r25
     99c:	0e 94 94 32 	call	0x6528	; 0x6528 <putchar>
     9a0:	e0 2f       	mov	r30, r16
     9a2:	0f 5f       	subi	r16, 0xFF	; 255
     9a4:	1f 4f       	sbci	r17, 0xFF	; 255
    // Get the RX packet 
    nrk_led_set (ORANGE_LED);
    local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
    if( bmac_rx_pkt_is_encrypted()==1 ) nrk_kprintf( PSTR( "Packet Encrypted\r\n" ));
    printf ("Got RX packet len=%d RSSI=%d [", len, rssi);
    for (i = 0; i < len; i++)
     9a6:	89 81       	ldd	r24, Y+1	; 0x01
     9a8:	e8 17       	cp	r30, r24
     9aa:	98 f3       	brcs	.-26     	; 0x992 <rx_task+0x188>
      printf ("%c", rx_buf[i]);
    printf ("]\r\n");
     9ac:	c7 01       	movw	r24, r14
     9ae:	0e 94 9b 32 	call	0x6536	; 0x6536 <puts>
    nrk_led_clr (ORANGE_LED);
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	0e 94 72 18 	call	0x30e4	; 0x30e4 <nrk_led_clr>
    // Release the RX buffer so future packets can arrive 
    bmac_rx_pkt_release ();
     9ba:	0e 94 4a 05 	call	0xa94	; 0xa94 <bmac_rx_pkt_release>
     9be:	bf cf       	rjmp	.-130    	; 0x93e <rx_task+0x134>

000009c0 <main>:
uint8_t tx_buf[RF_MAX_PAYLOAD_SIZE];
uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];
uint8_t aes_key[16]={0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e, 0x0f};

int main ()
{
     9c0:	cf ef       	ldi	r28, 0xFF	; 255
     9c2:	d1 e2       	ldi	r29, 0x21	; 33
     9c4:	de bf       	out	0x3e, r29	; 62
     9c6:	cd bf       	out	0x3d, r28	; 61
  uint16_t div;
  nrk_setup_ports ();
     9c8:	0e 94 c9 14 	call	0x2992	; 0x2992 <nrk_setup_ports>
  nrk_setup_uart (UART_BAUDRATE_115K2);
     9cc:	87 e0       	ldi	r24, 0x07	; 7
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	0e 94 07 19 	call	0x320e	; 0x320e <nrk_setup_uart>

  nrk_init ();
     9d4:	0e 94 b3 1b 	call	0x3766	; 0x3766 <nrk_init>

  nrk_led_clr (0);
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	0e 94 72 18 	call	0x30e4	; 0x30e4 <nrk_led_clr>
  nrk_led_clr (1);
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	0e 94 72 18 	call	0x30e4	; 0x30e4 <nrk_led_clr>
  nrk_led_clr (2);
     9e8:	82 e0       	ldi	r24, 0x02	; 2
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	0e 94 72 18 	call	0x30e4	; 0x30e4 <nrk_led_clr>
  nrk_led_clr (3);
     9f0:	83 e0       	ldi	r24, 0x03	; 3
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	0e 94 72 18 	call	0x30e4	; 0x30e4 <nrk_led_clr>

  nrk_time_set (0, 0);
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	40 e0       	ldi	r20, 0x00	; 0
     9fe:	50 e0       	ldi	r21, 0x00	; 0
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	0e 94 c9 26 	call	0x4d92	; 0x4d92 <nrk_time_set>

  bmac_task_config ();
     a0c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <bmac_task_config>

  nrk_create_taskset ();
     a10:	0e 94 75 02 	call	0x4ea	; 0x4ea <nrk_create_taskset>
  nrk_start ();
     a14:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <nrk_start>

  return 0;
}
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	0c 94 40 35 	jmp	0x6a80	; 0x6a80 <_exit>

00000a20 <rf_rx_callback>:

/**
 *  This is a callback if you require immediate response to a packet
 */
RF_RX_INFO *rf_rx_callback (RF_RX_INFO * pRRI)
{
     a20:	08 95       	ret

00000a22 <bmac_addr_decode_dest_mac>:
return NRK_OK;
}

int8_t  bmac_addr_decode_dest_mac(uint16_t dest) 
{
bmac_rfTxInfo.destAddr=dest;
     a22:	90 93 cc 04 	sts	0x04CC, r25
     a26:	80 93 cb 04 	sts	0x04CB, r24
return NRK_OK;
}
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	08 95       	ret

00000a30 <bmac_set_cca_active>:
return NRK_OK;
}

void bmac_set_cca_active(uint8_t active)
{
cca_active=active;
     a30:	80 93 af 03 	sts	0x03AF, r24
     a34:	08 95       	ret

00000a36 <bmac_rx_pkt_set_buffer>:
else return NRK_OK;
}

int8_t bmac_rx_pkt_set_buffer(uint8_t *buf, uint8_t size)
{
if(buf==NULL) return NRK_ERROR;
     a36:	00 97       	sbiw	r24, 0x00	; 0
     a38:	19 f4       	brne	.+6      	; 0xa40 <bmac_rx_pkt_set_buffer+0xa>
     a3a:	8f ef       	ldi	r24, 0xFF	; 255
     a3c:	9f ef       	ldi	r25, 0xFF	; 255
     a3e:	08 95       	ret
    bmac_rfRxInfo.pPayload = buf;
     a40:	90 93 11 06 	sts	0x0611, r25
     a44:	80 93 10 06 	sts	0x0610, r24
    bmac_rfRxInfo.max_length = size;
     a48:	60 93 0f 06 	sts	0x060F, r22
    rx_buf_empty=1;
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	80 93 a2 03 	sts	0x03A2, r24
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	90 e0       	ldi	r25, 0x00	; 0
return NRK_OK;
}
     a56:	08 95       	ret

00000a58 <bmac_tx_pkt_nonblocking>:
    is_enabled=1;
    return NRK_OK;
}

int8_t bmac_tx_pkt_nonblocking(uint8_t *buf, uint8_t len)
{
     a58:	9c 01       	movw	r18, r24
  if(tx_data_ready==1) return NRK_ERROR;
     a5a:	80 91 a1 03 	lds	r24, 0x03A1
     a5e:	81 30       	cpi	r24, 0x01	; 1
     a60:	19 f4       	brne	.+6      	; 0xa68 <bmac_tx_pkt_nonblocking+0x10>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	9f ef       	ldi	r25, 0xFF	; 255
     a66:	08 95       	ret
  tx_data_ready=1;
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	80 93 a1 03 	sts	0x03A1, r24
  bmac_rfTxInfo.pPayload=buf;
     a6e:	30 93 cf 04 	sts	0x04CF, r19
     a72:	20 93 ce 04 	sts	0x04CE, r18
  bmac_rfTxInfo.length=len;
     a76:	60 93 cd 04 	sts	0x04CD, r22
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	90 e0       	ldi	r25, 0x00	; 0
return NRK_OK;
}
     a7e:	08 95       	ret

00000a80 <bmac_rx_pkt_ready>:
  *rssi=bmac_rfRxInfo.rssi;
  return bmac_rfRxInfo.pPayload;
}

int8_t bmac_rx_pkt_ready(void)
{
     a80:	20 e0       	ldi	r18, 0x00	; 0
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	80 91 a2 03 	lds	r24, 0x03A2
     a88:	88 23       	and	r24, r24
     a8a:	11 f4       	brne	.+4      	; 0xa90 <bmac_rx_pkt_ready+0x10>
     a8c:	21 e0       	ldi	r18, 0x01	; 1
     a8e:	30 e0       	ldi	r19, 0x00	; 0
return (!rx_buf_empty);
}
     a90:	c9 01       	movw	r24, r18
     a92:	08 95       	ret

00000a94 <bmac_rx_pkt_release>:

int8_t bmac_rx_pkt_release(void)
{
    rx_buf_empty=1;
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	80 93 a2 03 	sts	0x03A2, r24
return NRK_OK;
}
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	08 95       	ret

00000aa0 <bmac_set_rx_check_rate>:

}


int8_t bmac_set_rx_check_rate(nrk_time_t period)
{
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
     aa4:	cd b7       	in	r28, 0x3d	; 61
     aa6:	de b7       	in	r29, 0x3e	; 62
     aa8:	28 97       	sbiw	r28, 0x08	; 8
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	f8 94       	cli
     aae:	de bf       	out	0x3e, r29	; 62
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	cd bf       	out	0x3d, r28	; 61
     ab4:	29 83       	std	Y+1, r18	; 0x01
     ab6:	3a 83       	std	Y+2, r19	; 0x02
     ab8:	4b 83       	std	Y+3, r20	; 0x03
     aba:	5c 83       	std	Y+4, r21	; 0x04
     abc:	6d 83       	std	Y+5, r22	; 0x05
     abe:	7e 83       	std	Y+6, r23	; 0x06
     ac0:	8f 83       	std	Y+7, r24	; 0x07
     ac2:	98 87       	std	Y+8, r25	; 0x08
     ac4:	2d 81       	ldd	r18, Y+5	; 0x05
     ac6:	3e 81       	ldd	r19, Y+6	; 0x06
     ac8:	4f 81       	ldd	r20, Y+7	; 0x07
     aca:	58 85       	ldd	r21, Y+8	; 0x08
     acc:	89 81       	ldd	r24, Y+1	; 0x01
     ace:	9a 81       	ldd	r25, Y+2	; 0x02
     ad0:	ab 81       	ldd	r26, Y+3	; 0x03
     ad2:	bc 81       	ldd	r27, Y+4	; 0x04
if(period.secs==0 && period.nano_secs < BMAC_MIN_CHECK_RATE_MS*NANOS_PER_MS)
     ad4:	00 97       	sbiw	r24, 0x00	; 0
     ad6:	a1 05       	cpc	r26, r1
     ad8:	b1 05       	cpc	r27, r1
     ada:	59 f4       	brne	.+22     	; 0xaf2 <bmac_set_rx_check_rate+0x52>
     adc:	20 30       	cpi	r18, 0x00	; 0
     ade:	6d e2       	ldi	r22, 0x2D	; 45
     ae0:	36 07       	cpc	r19, r22
     ae2:	61 e3       	ldi	r22, 0x31	; 49
     ae4:	46 07       	cpc	r20, r22
     ae6:	61 e0       	ldi	r22, 0x01	; 1
     ae8:	56 07       	cpc	r21, r22
     aea:	18 f4       	brcc	.+6      	; 0xaf2 <bmac_set_rx_check_rate+0x52>
     aec:	8f ef       	ldi	r24, 0xFF	; 255
     aee:	9f ef       	ldi	r25, 0xFF	; 255
     af0:	12 c0       	rjmp	.+36     	; 0xb16 <bmac_set_rx_check_rate+0x76>
	return NRK_ERROR;
_bmac_check_period.secs=period.secs;
     af2:	80 93 a7 03 	sts	0x03A7, r24
     af6:	90 93 a8 03 	sts	0x03A8, r25
     afa:	a0 93 a9 03 	sts	0x03A9, r26
     afe:	b0 93 aa 03 	sts	0x03AA, r27
_bmac_check_period.nano_secs=period.nano_secs;
     b02:	20 93 ab 03 	sts	0x03AB, r18
     b06:	30 93 ac 03 	sts	0x03AC, r19
     b0a:	40 93 ad 03 	sts	0x03AD, r20
     b0e:	50 93 ae 03 	sts	0x03AE, r21
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	28 96       	adiw	r28, 0x08	; 8
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	f8 94       	cli
     b1c:	de bf       	out	0x3e, r29	; 62
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	cd bf       	out	0x3d, r28	; 61
     b22:	df 91       	pop	r29
     b24:	cf 91       	pop	r28
     b26:	08 95       	ret

00000b28 <bmac_started>:
return NRK_OK;
}

int8_t bmac_started()
{
     b28:	80 91 a3 03 	lds	r24, 0x03A3
return bmac_running;
}
     b2c:	99 27       	eor	r25, r25
     b2e:	87 fd       	sbrc	r24, 7
     b30:	90 95       	com	r25
     b32:	08 95       	ret

00000b34 <bmac_rx_failure_count_get>:


uint16_t bmac_rx_failure_count_get()
{
  return rx_failure_cnt;
}
     b34:	80 91 9d 03 	lds	r24, 0x039D
     b38:	90 91 9e 03 	lds	r25, 0x039E
     b3c:	08 95       	ret

00000b3e <bmac_rx_failure_count_reset>:

uint8_t bmac_rx_failure_count_reset()
{
  rx_failure_cnt=0;
     b3e:	10 92 9d 03 	sts	0x039D, r1
     b42:	10 92 9e 03 	sts	0x039E, r1
     b46:	10 92 9f 03 	sts	0x039F, r1
     b4a:	10 92 a0 03 	sts	0x03A0, r1
return NRK_OK;
}
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	08 95       	ret

00000b54 <_b_pow>:

uint8_t _b_pow(uint8_t in)
{
uint8_t i;
uint8_t result;
if(in<=1) return 1;
     b54:	82 30       	cpi	r24, 0x02	; 2
     b56:	18 f4       	brcc	.+6      	; 0xb5e <_b_pow+0xa>
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	08 95       	ret
if(in>7) in=6; // cap it at 128 
     b5e:	88 30       	cpi	r24, 0x08	; 8
     b60:	08 f0       	brcs	.+2      	; 0xb64 <_b_pow+0x10>
     b62:	86 e0       	ldi	r24, 0x06	; 6
     b64:	91 e0       	ldi	r25, 0x01	; 1
     b66:	20 e0       	ldi	r18, 0x00	; 0
     b68:	30 e0       	ldi	r19, 0x00	; 0
result=1;
for(i=0; i<in; i++ )
  result=result*2;
     b6a:	99 0f       	add	r25, r25
     b6c:	2f 5f       	subi	r18, 0xFF	; 255
     b6e:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t i;
uint8_t result;
if(in<=1) return 1;
if(in>7) in=6; // cap it at 128 
result=1;
for(i=0; i<in; i++ )
     b70:	28 17       	cp	r18, r24
     b72:	d8 f3       	brcs	.-10     	; 0xb6a <_b_pow+0x16>
  result=result*2;
return result;
     b74:	89 2f       	mov	r24, r25
     b76:	99 27       	eor	r25, r25
}
     b78:	08 95       	ret

00000b7a <bmac_task_config>:


void bmac_task_config ()
{
     b7a:	0f 93       	push	r16
     b7c:	1f 93       	push	r17
    nrk_task_set_entry_function( &bmac_task, bmac_nw_task);
     b7e:	0a ef       	ldi	r16, 0xFA	; 250
     b80:	12 e0       	ldi	r17, 0x02	; 2
     b82:	69 e1       	ldi	r22, 0x19	; 25
     b84:	79 e0       	ldi	r23, 0x09	; 9
     b86:	c8 01       	movw	r24, r16
     b88:	0e 94 b5 2f 	call	0x5f6a	; 0x5f6a <nrk_task_set_entry_function>
    nrk_task_set_stk( &bmac_task, bmac_task_stack, BMAC_STACKSIZE);
     b8c:	40 e8       	ldi	r20, 0x80	; 128
     b8e:	50 e0       	ldi	r21, 0x00	; 0
     b90:	6d e1       	ldi	r22, 0x1D	; 29
     b92:	73 e0       	ldi	r23, 0x03	; 3
     b94:	c8 01       	movw	r24, r16
     b96:	0e 94 16 30 	call	0x602c	; 0x602c <nrk_task_set_stk>
    bmac_task.prio = BMAC_TASK_PRIORITY;
     b9a:	84 e1       	ldi	r24, 0x14	; 20
     b9c:	80 93 02 03 	sts	0x0302, r24
    bmac_task.FirstActivation = TRUE;
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	80 93 01 03 	sts	0x0301, r24
    bmac_task.Type = BASIC_TASK;
     ba6:	80 93 03 03 	sts	0x0303, r24
    bmac_task.SchType = PREEMPTIVE;
     baa:	80 93 04 03 	sts	0x0304, r24
    bmac_task.period.secs = 0;
     bae:	10 92 05 03 	sts	0x0305, r1
     bb2:	10 92 06 03 	sts	0x0306, r1
     bb6:	10 92 07 03 	sts	0x0307, r1
     bba:	10 92 08 03 	sts	0x0308, r1
    bmac_task.period.nano_secs = BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS;
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	9d e2       	ldi	r25, 0x2D	; 45
     bc2:	a1 e3       	ldi	r26, 0x31	; 49
     bc4:	b1 e0       	ldi	r27, 0x01	; 1
     bc6:	80 93 09 03 	sts	0x0309, r24
     bca:	90 93 0a 03 	sts	0x030A, r25
     bce:	a0 93 0b 03 	sts	0x030B, r26
     bd2:	b0 93 0c 03 	sts	0x030C, r27
    bmac_task.cpu_reserve.secs = 5;      // bmac reserve , 0 to disable
     bd6:	85 e0       	ldi	r24, 0x05	; 5
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	80 93 0d 03 	sts	0x030D, r24
     be2:	90 93 0e 03 	sts	0x030E, r25
     be6:	a0 93 0f 03 	sts	0x030F, r26
     bea:	b0 93 10 03 	sts	0x0310, r27
    bmac_task.cpu_reserve.nano_secs = 0;
     bee:	10 92 11 03 	sts	0x0311, r1
     bf2:	10 92 12 03 	sts	0x0312, r1
     bf6:	10 92 13 03 	sts	0x0313, r1
     bfa:	10 92 14 03 	sts	0x0314, r1
    bmac_task.offset.secs = 0;
     bfe:	10 92 15 03 	sts	0x0315, r1
     c02:	10 92 16 03 	sts	0x0316, r1
     c06:	10 92 17 03 	sts	0x0317, r1
     c0a:	10 92 18 03 	sts	0x0318, r1
    bmac_task.offset.nano_secs = 0;
     c0e:	10 92 19 03 	sts	0x0319, r1
     c12:	10 92 1a 03 	sts	0x031A, r1
     c16:	10 92 1b 03 	sts	0x031B, r1
     c1a:	10 92 1c 03 	sts	0x031C, r1
    #ifdef DEBUG
    printf( "bmac activate\r\n" );
    #endif 
    nrk_activate_task (&bmac_task);
     c1e:	c8 01       	movw	r24, r16
     c20:	0e 94 65 25 	call	0x4aca	; 0x4aca <nrk_activate_task>
     c24:	1f 91       	pop	r17
     c26:	0f 91       	pop	r16
     c28:	08 95       	ret

00000c2a <_bmac_channel_check>:
{
return bmac_running;
}

int8_t _bmac_channel_check()
{
     c2a:	1f 93       	push	r17
int8_t val;
rf_polling_rx_on();
     c2c:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <rf_polling_rx_on>
nrk_spin_wait_us(250);
     c30:	8a ef       	ldi	r24, 0xFA	; 250
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 04 2c 	call	0x5808	; 0x5808 <nrk_spin_wait_us>
val=CCA_IS_1;
     c38:	89 b1       	in	r24, 0x09	; 9
     c3a:	99 27       	eor	r25, r25
     c3c:	24 e0       	ldi	r18, 0x04	; 4
     c3e:	96 95       	lsr	r25
     c40:	87 95       	ror	r24
     c42:	2a 95       	dec	r18
     c44:	e1 f7       	brne	.-8      	; 0xc3e <_bmac_channel_check+0x14>
if(val) rf_rx_off(); 
     c46:	18 2f       	mov	r17, r24
     c48:	11 70       	andi	r17, 0x01	; 1
     c4a:	80 ff       	sbrs	r24, 0
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <_bmac_channel_check+0x28>
     c4e:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <rf_rx_off>
return val;

}
     c52:	81 2f       	mov	r24, r17
     c54:	99 27       	eor	r25, r25
     c56:	1f 91       	pop	r17
     c58:	08 95       	ret

00000c5a <_bmac_tx>:
  rx_failure_cnt=0;
return NRK_OK;
}

int8_t _bmac_tx()
{
     c5a:	ef 92       	push	r14
     c5c:	ff 92       	push	r15
     c5e:	0f 93       	push	r16
     c60:	1f 93       	push	r17
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
uint16_t b;

#ifdef DEBUG
nrk_kprintf( PSTR("_bmac_tx()\r\n"));
#endif
if(cca_active)
     c66:	80 91 af 03 	lds	r24, 0x03AF
     c6a:	88 23       	and	r24, r24
     c6c:	09 f4       	brne	.+2      	; 0xc70 <_bmac_tx+0x16>
     c6e:	4a c0       	rjmp	.+148    	; 0xd04 <_bmac_tx+0xaa>
{

// Add random time here to stop nodes from synchronizing with eachother
b=_nrk_time_to_ticks(&_bmac_check_period);
     c70:	87 ea       	ldi	r24, 0xA7	; 167
     c72:	93 e0       	ldi	r25, 0x03	; 3
     c74:	0e 94 da 26 	call	0x4db4	; 0x4db4 <_nrk_time_to_ticks>
     c78:	8c 01       	movw	r16, r24
b=b/((rand()%10)+1);
     c7a:	0e 94 e7 31 	call	0x63ce	; 0x63ce <rand>
//printf( "waiting %d\r\n",b );
nrk_wait_until_ticks(b);
     c7e:	6a e0       	ldi	r22, 0x0A	; 10
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	0e 94 a5 34 	call	0x694a	; 0x694a <__divmodhi4>
     c86:	bc 01       	movw	r22, r24
     c88:	6f 5f       	subi	r22, 0xFF	; 255
     c8a:	7f 4f       	sbci	r23, 0xFF	; 255
     c8c:	c8 01       	movw	r24, r16
     c8e:	0e 94 91 34 	call	0x6922	; 0x6922 <__udivmodhi4>
     c92:	cb 01       	movw	r24, r22
     c94:	0e 94 92 24 	call	0x4924	; 0x4924 <nrk_wait_until_ticks>
     c98:	ff 24       	eor	r15, r15
     c9a:	f3 94       	inc	r15
     c9c:	c7 ea       	ldi	r28, 0xA7	; 167
     c9e:	d3 e0       	ldi	r29, 0x03	; 3
//nrk_wait_ticks(b);

	backoff_count=1;
	do{
	v=_bmac_channel_check();
     ca0:	0e 94 15 06 	call	0xc2a	; 0xc2a <_bmac_channel_check>
     ca4:	e8 2e       	mov	r14, r24
	rf_rx_off(); 
     ca6:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <rf_rx_off>
	if(v==1) break;
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	e8 16       	cp	r14, r24
     cae:	51 f1       	breq	.+84     	; 0xd04 <_bmac_tx+0xaa>
	// Channel is busy
	backoff=rand()%(_b_pow(backoff_count));
     cb0:	0e 94 e7 31 	call	0x63ce	; 0x63ce <rand>
     cb4:	8c 01       	movw	r16, r24
     cb6:	8f 2d       	mov	r24, r15
     cb8:	0e 94 aa 05 	call	0xb54	; 0xb54 <_b_pow>
			#ifdef DEBUG
			printf( "backoff %d\r\n",backoff );
			#endif
//	printf( "backoff %d\r\n",backoff );
	nrk_wait_until_next_n_periods(backoff);
     cbc:	68 2f       	mov	r22, r24
     cbe:	77 27       	eor	r23, r23
     cc0:	c8 01       	movw	r24, r16
     cc2:	0e 94 a5 34 	call	0x694a	; 0x694a <__divmodhi4>
     cc6:	99 27       	eor	r25, r25
     cc8:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <nrk_wait_until_next_n_periods>
	backoff_count++;
	if(backoff_count>6) backoff_count=6; // cap it at 64	
	b=_nrk_time_to_ticks(&_bmac_check_period);
     ccc:	ce 01       	movw	r24, r28
     cce:	0e 94 da 26 	call	0x4db4	; 0x4db4 <_nrk_time_to_ticks>
     cd2:	8c 01       	movw	r16, r24
	b=b/((rand()%10)+1);
     cd4:	0e 94 e7 31 	call	0x63ce	; 0x63ce <rand>
//	printf( "waiting %d\r\n",b );
	nrk_wait_until_ticks(b);
     cd8:	6a e0       	ldi	r22, 0x0A	; 10
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	0e 94 a5 34 	call	0x694a	; 0x694a <__divmodhi4>
     ce0:	bc 01       	movw	r22, r24
     ce2:	6f 5f       	subi	r22, 0xFF	; 255
     ce4:	7f 4f       	sbci	r23, 0xFF	; 255
     ce6:	c8 01       	movw	r24, r16
     ce8:	0e 94 91 34 	call	0x6922	; 0x6922 <__udivmodhi4>
     cec:	cb 01       	movw	r24, r22
     cee:	0e 94 92 24 	call	0x4924	; 0x4924 <nrk_wait_until_ticks>
//	nrk_wait_ticks(b);

	} while(v==0);
     cf2:	ee 20       	and	r14, r14
     cf4:	39 f4       	brne	.+14     	; 0xd04 <_bmac_tx+0xaa>
			#ifdef DEBUG
			printf( "backoff %d\r\n",backoff );
			#endif
//	printf( "backoff %d\r\n",backoff );
	nrk_wait_until_next_n_periods(backoff);
	backoff_count++;
     cf6:	f3 94       	inc	r15
     cf8:	86 e0       	ldi	r24, 0x06	; 6
     cfa:	8f 15       	cp	r24, r15
     cfc:	88 f6       	brcc	.-94     	; 0xca0 <_bmac_tx+0x46>
     cfe:	36 e0       	ldi	r19, 0x06	; 6
     d00:	f3 2e       	mov	r15, r19
     d02:	ce cf       	rjmp	.-100    	; 0xca0 <_bmac_tx+0x46>
//	nrk_wait_ticks(b);

	} while(v==0);
}

	rf_test_mode();
     d04:	0e 94 76 0b 	call	0x16ec	; 0x16ec <rf_test_mode>
	rf_carrier_on(); 
     d08:	0e 94 2d 0b 	call	0x165a	; 0x165a <rf_carrier_on>
	nrk_wait(_bmac_check_period);
     d0c:	20 91 a7 03 	lds	r18, 0x03A7
     d10:	30 91 a8 03 	lds	r19, 0x03A8
     d14:	40 91 a9 03 	lds	r20, 0x03A9
     d18:	50 91 aa 03 	lds	r21, 0x03AA
     d1c:	60 91 ab 03 	lds	r22, 0x03AB
     d20:	70 91 ac 03 	lds	r23, 0x03AC
     d24:	80 91 ad 03 	lds	r24, 0x03AD
     d28:	90 91 ae 03 	lds	r25, 0x03AE
     d2c:	0e 94 84 23 	call	0x4708	; 0x4708 <nrk_wait>
	//nrk_wait_until_next_period();
	rf_carrier_off(); 
     d30:	0e 94 19 0b 	call	0x1632	; 0x1632 <rf_carrier_off>
	rf_data_mode();
     d34:	0e 94 41 0b 	call	0x1682	; 0x1682 <rf_data_mode>
	// send packet
	rf_rx_off();
     d38:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <rf_rx_off>
	pkt_got_ack=rf_tx_packet (&bmac_rfTxInfo);
     d3c:	8b ec       	ldi	r24, 0xCB	; 203
     d3e:	94 e0       	ldi	r25, 0x04	; 4
     d40:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <rf_tx_packet>
     d44:	80 93 a4 03 	sts	0x03A4, r24
	rf_rx_off(); 	
     d48:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <rf_rx_off>
tx_data_ready=0;
     d4c:	10 92 a1 03 	sts	0x03A1, r1
nrk_event_signal (bmac_tx_pkt_done_signal);
     d50:	80 91 95 06 	lds	r24, 0x0695
     d54:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <nrk_event_signal>
return NRK_OK;
}
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	1f 91       	pop	r17
     d62:	0f 91       	pop	r16
     d64:	ff 90       	pop	r15
     d66:	ef 90       	pop	r14
     d68:	08 95       	ret

00000d6a <_bmac_rx>:
return val;

}

int8_t _bmac_rx()
{
     d6a:	0f 93       	push	r16
     d6c:	1f 93       	push	r17
int8_t n;
uint8_t cnt;

	rf_set_rx (&bmac_rfRxInfo, g_chan);
     d6e:	60 91 a5 03 	lds	r22, 0x03A5
     d72:	8b e0       	ldi	r24, 0x0B	; 11
     d74:	96 e0       	ldi	r25, 0x06	; 6
     d76:	0e 94 29 13 	call	0x2652	; 0x2652 <rf_set_rx>
        rf_polling_rx_on ();
     d7a:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <rf_polling_rx_on>
     d7e:	10 e0       	ldi	r17, 0x00	; 0
     d80:	26 c0       	rjmp	.+76     	; 0xdce <_bmac_rx+0x64>
	cnt=0;
	while ((n = rf_rx_check_fifop()) == 0)
	{
	cnt++;
     d82:	1f 5f       	subi	r17, 0xFF	; 255
	nrk_wait(_bmac_check_period);
     d84:	20 91 a7 03 	lds	r18, 0x03A7
     d88:	30 91 a8 03 	lds	r19, 0x03A8
     d8c:	40 91 a9 03 	lds	r20, 0x03A9
     d90:	50 91 aa 03 	lds	r21, 0x03AA
     d94:	60 91 ab 03 	lds	r22, 0x03AB
     d98:	70 91 ac 03 	lds	r23, 0x03AC
     d9c:	80 91 ad 03 	lds	r24, 0x03AD
     da0:	90 91 ae 03 	lds	r25, 0x03AE
     da4:	0e 94 84 23 	call	0x4708	; 0x4708 <nrk_wait>
	if(cnt>2) { 
     da8:	13 30       	cpi	r17, 0x03	; 3
     daa:	89 f4       	brne	.+34     	; 0xdce <_bmac_rx+0x64>
			#ifdef DEBUG
			printf( "rx timeout 1 %d\r\n",cnt );
			#endif
			if(rx_failure_cnt<65535) rx_failure_cnt++;
     dac:	80 91 9d 03 	lds	r24, 0x039D
     db0:	90 91 9e 03 	lds	r25, 0x039E
     db4:	a0 91 9f 03 	lds	r26, 0x039F
     db8:	b0 91 a0 03 	lds	r27, 0x03A0
     dbc:	8f 3f       	cpi	r24, 0xFF	; 255
     dbe:	2f ef       	ldi	r18, 0xFF	; 255
     dc0:	92 07       	cpc	r25, r18
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	a2 07       	cpc	r26, r18
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	b2 07       	cpc	r27, r18
     dca:	00 f5       	brcc	.+64     	; 0xe0c <_bmac_rx+0xa2>
     dcc:	14 c0       	rjmp	.+40     	; 0xdf6 <_bmac_rx+0x8c>
uint8_t cnt;

	rf_set_rx (&bmac_rfRxInfo, g_chan);
        rf_polling_rx_on ();
	cnt=0;
	while ((n = rf_rx_check_fifop()) == 0)
     dce:	0e 94 b9 0a 	call	0x1572	; 0x1572 <rf_rx_check_fifop>
     dd2:	88 23       	and	r24, r24
     dd4:	b1 f2       	breq	.-84     	; 0xd82 <_bmac_rx+0x18>
     dd6:	1d c0       	rjmp	.+58     	; 0xe12 <_bmac_rx+0xa8>
        if (n != 0) {
                n = 0;
                // Packet on its way
                cnt=0;
                while ((n = rf_polling_rx_packet ()) == 0) {
                cnt++;
     dd8:	1f 5f       	subi	r17, 0xFF	; 255
                nrk_spin_wait_us(100);
     dda:	84 e6       	ldi	r24, 0x64	; 100
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	0e 94 04 2c 	call	0x5808	; 0x5808 <nrk_spin_wait_us>
                if (cnt > 50) { 
     de2:	13 33       	cpi	r17, 0x33	; 51
     de4:	b9 f4       	brne	.+46     	; 0xe14 <_bmac_rx+0xaa>
			#ifdef DEBUG
			printf( "rx timeout 2\r\n" ); 
			#endif
			rx_failure_cnt++;
     de6:	80 91 9d 03 	lds	r24, 0x039D
     dea:	90 91 9e 03 	lds	r25, 0x039E
     dee:	a0 91 9f 03 	lds	r26, 0x039F
     df2:	b0 91 a0 03 	lds	r27, 0x03A0
     df6:	01 96       	adiw	r24, 0x01	; 1
     df8:	a1 1d       	adc	r26, r1
     dfa:	b1 1d       	adc	r27, r1
     dfc:	80 93 9d 03 	sts	0x039D, r24
     e00:	90 93 9e 03 	sts	0x039E, r25
     e04:	a0 93 9f 03 	sts	0x039F, r26
     e08:	b0 93 a0 03 	sts	0x03A0, r27
			rf_rx_off(); 
     e0c:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <rf_rx_off>
     e10:	22 c0       	rjmp	.+68     	; 0xe56 <_bmac_rx+0xec>
			return 0;
     e12:	10 e0       	ldi	r17, 0x00	; 0
	}
        if (n != 0) {
                n = 0;
                // Packet on its way
                cnt=0;
                while ((n = rf_polling_rx_packet ()) == 0) {
     e14:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <rf_polling_rx_packet>
     e18:	08 2f       	mov	r16, r24
     e1a:	88 23       	and	r24, r24
     e1c:	e9 f2       	breq	.-70     	; 0xdd8 <_bmac_rx+0x6e>
			rf_rx_off(); 
			return 0;
			}        
                }
        }
        rf_rx_off();
     e1e:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <rf_rx_off>
        if (n == 1) {
     e22:	01 30       	cpi	r16, 0x01	; 1
     e24:	29 f4       	brne	.+10     	; 0xe30 <_bmac_rx+0xc6>
                // CRC and checksum passed
    		rx_buf_empty=0;
     e26:	10 92 a2 03 	sts	0x03A2, r1
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	15 c0       	rjmp	.+42     	; 0xe5a <_bmac_rx+0xf0>
        } else 
	{
	#ifdef DEBUG 
	printf( "CRC failed!\r\n" );
	#endif 
	rx_failure_cnt++;
     e30:	80 91 9d 03 	lds	r24, 0x039D
     e34:	90 91 9e 03 	lds	r25, 0x039E
     e38:	a0 91 9f 03 	lds	r26, 0x039F
     e3c:	b0 91 a0 03 	lds	r27, 0x03A0
     e40:	01 96       	adiw	r24, 0x01	; 1
     e42:	a1 1d       	adc	r26, r1
     e44:	b1 1d       	adc	r27, r1
     e46:	80 93 9d 03 	sts	0x039D, r24
     e4a:	90 93 9e 03 	sts	0x039E, r25
     e4e:	a0 93 9f 03 	sts	0x039F, r26
     e52:	b0 93 a0 03 	sts	0x03A0, r27
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	1f 91       	pop	r17
     e5c:	0f 91       	pop	r16
     e5e:	08 95       	ret

00000e60 <bmac_get_tx_done_signal>:
return(bmac_rx_pkt_signal);
}

nrk_sig_t bmac_get_tx_done_signal()
{
   nrk_signal_register(bmac_tx_pkt_done_signal); 
     e60:	80 91 95 06 	lds	r24, 0x0695
     e64:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <nrk_signal_register>
     e68:	80 91 95 06 	lds	r24, 0x0695
return(bmac_tx_pkt_done_signal);
}
     e6c:	99 27       	eor	r25, r25
     e6e:	87 fd       	sbrc	r24, 7
     e70:	90 95       	com	r25
     e72:	08 95       	ret

00000e74 <bmac_get_rx_pkt_signal>:
return NRK_OK;
}

nrk_sig_t bmac_get_rx_pkt_signal()
{
   nrk_signal_register(bmac_rx_pkt_signal); 
     e74:	80 91 d6 04 	lds	r24, 0x04D6
     e78:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <nrk_signal_register>
     e7c:	80 91 d6 04 	lds	r24, 0x04D6
return(bmac_rx_pkt_signal);
}
     e80:	99 27       	eor	r25, r25
     e82:	87 fd       	sbrc	r24, 7
     e84:	90 95       	com	r25
     e86:	08 95       	ret

00000e88 <bmac_enable>:
  rf_power_down();
}

void bmac_enable()
{
  is_enabled=1;
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	80 93 a6 03 	sts	0x03A6, r24
  rf_power_up();
     e8e:	0e 94 1b 13 	call	0x2636	; 0x2636 <rf_power_up>
  nrk_event_signal (bmac_enable_signal);
     e92:	80 91 4a 04 	lds	r24, 0x044A
     e96:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <nrk_event_signal>
     e9a:	08 95       	ret

00000e9c <bmac_disable>:
return NRK_OK;
}

void bmac_disable()
{
  is_enabled=0;
     e9c:	10 92 a6 03 	sts	0x03A6, r1
  rf_power_down();
     ea0:	0e 94 a3 09 	call	0x1346	; 0x1346 <rf_power_down>
     ea4:	08 95       	ret

00000ea6 <bmac_tx_pkt>:
return(bmac_tx_pkt_done_signal);
}


int8_t bmac_tx_pkt(uint8_t *buf, uint8_t len)
{
     ea6:	ef 92       	push	r14
     ea8:	ff 92       	push	r15
     eaa:	0f 93       	push	r16
     eac:	1f 93       	push	r17
     eae:	8c 01       	movw	r16, r24
     eb0:	f6 2e       	mov	r15, r22
uint32_t mask;
if(tx_data_ready==1) return NRK_ERROR;
     eb2:	80 91 a1 03 	lds	r24, 0x03A1
     eb6:	81 30       	cpi	r24, 0x01	; 1
     eb8:	09 f4       	brne	.+2      	; 0xebc <bmac_tx_pkt+0x16>
     eba:	48 c0       	rjmp	.+144    	; 0xf4c <bmac_tx_pkt+0xa6>
// If reserve exists check it
#ifdef NRK_MAX_RESERVES
if(tx_reserve!=-1)
     ebc:	80 91 b0 03 	lds	r24, 0x03B0
     ec0:	8f 3f       	cpi	r24, 0xFF	; 255
     ec2:	29 f0       	breq	.+10     	; 0xece <bmac_tx_pkt+0x28>
	{
	if( nrk_reserve_consume(tx_reserve)==NRK_ERROR ) { 
     ec4:	0e 94 a2 2b 	call	0x5744	; 0x5744 <nrk_reserve_consume>
     ec8:	8f 3f       	cpi	r24, 0xFF	; 255
     eca:	09 f4       	brne	.+2      	; 0xece <bmac_tx_pkt+0x28>
     ecc:	3f c0       	rjmp	.+126    	; 0xf4c <bmac_tx_pkt+0xa6>
		return NRK_ERROR;
		}
	}
#endif
nrk_signal_register(bmac_tx_pkt_done_signal); 
     ece:	80 91 95 06 	lds	r24, 0x0695
     ed2:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <nrk_signal_register>
tx_data_ready=1;
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	80 93 a1 03 	sts	0x03A1, r24
bmac_rfTxInfo.pPayload=buf;
     edc:	10 93 cf 04 	sts	0x04CF, r17
     ee0:	00 93 ce 04 	sts	0x04CE, r16
bmac_rfTxInfo.length=len;
     ee4:	f0 92 cd 04 	sts	0x04CD, r15
#ifdef DEBUG
nrk_kprintf( PSTR("Waiting for tx done signal\r\n"));
#endif
mask=nrk_event_wait (SIG(bmac_tx_pkt_done_signal));
     ee8:	61 e0       	ldi	r22, 0x01	; 1
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	00 90 95 06 	lds	r0, 0x0695
     ef4:	04 c0       	rjmp	.+8      	; 0xefe <bmac_tx_pkt+0x58>
     ef6:	66 0f       	add	r22, r22
     ef8:	77 1f       	adc	r23, r23
     efa:	88 1f       	adc	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	0a 94       	dec	r0
     f00:	d2 f7       	brpl	.-12     	; 0xef6 <bmac_tx_pkt+0x50>
     f02:	0e 94 4d 22 	call	0x449a	; 0x449a <nrk_event_wait>
     f06:	7b 01       	movw	r14, r22
     f08:	8c 01       	movw	r16, r24
if(mask==0) nrk_kprintf( PSTR("BMAC TX: Error calling event wait\r\n"));
     f0a:	61 15       	cp	r22, r1
     f0c:	71 05       	cpc	r23, r1
     f0e:	81 05       	cpc	r24, r1
     f10:	91 05       	cpc	r25, r1
     f12:	21 f4       	brne	.+8      	; 0xf1c <bmac_tx_pkt+0x76>
     f14:	8d e8       	ldi	r24, 0x8D	; 141
     f16:	91 e0       	ldi	r25, 0x01	; 1
     f18:	0e 94 3d 19 	call	0x327a	; 0x327a <nrk_kprintf>
if((mask&SIG(bmac_tx_pkt_done_signal))==0) nrk_kprintf( PSTR("BMAC TX: Woke up on wrong signal\r\n"));
     f1c:	d8 01       	movw	r26, r16
     f1e:	c7 01       	movw	r24, r14
     f20:	00 90 95 06 	lds	r0, 0x0695
     f24:	04 c0       	rjmp	.+8      	; 0xf2e <bmac_tx_pkt+0x88>
     f26:	b6 95       	lsr	r27
     f28:	a7 95       	ror	r26
     f2a:	97 95       	ror	r25
     f2c:	87 95       	ror	r24
     f2e:	0a 94       	dec	r0
     f30:	d2 f7       	brpl	.-12     	; 0xf26 <bmac_tx_pkt+0x80>
     f32:	80 fd       	sbrc	r24, 0
     f34:	04 c0       	rjmp	.+8      	; 0xf3e <bmac_tx_pkt+0x98>
     f36:	8a e6       	ldi	r24, 0x6A	; 106
     f38:	91 e0       	ldi	r25, 0x01	; 1
     f3a:	0e 94 3d 19 	call	0x327a	; 0x327a <nrk_kprintf>
if(pkt_got_ack) return NRK_OK;
     f3e:	80 91 a4 03 	lds	r24, 0x03A4
     f42:	88 23       	and	r24, r24
     f44:	19 f0       	breq	.+6      	; 0xf4c <bmac_tx_pkt+0xa6>
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <bmac_tx_pkt+0xaa>
     f4c:	8f ef       	ldi	r24, 0xFF	; 255
     f4e:	9f ef       	ldi	r25, 0xFF	; 255
     f50:	1f 91       	pop	r17
     f52:	0f 91       	pop	r16
     f54:	ff 90       	pop	r15
     f56:	ef 90       	pop	r14
     f58:	08 95       	ret

00000f5a <bmac_set_channel>:
  rf_set_cca_thresh(thresh); 
return NRK_OK;
}

int8_t bmac_set_channel(uint8_t chan)
{
     f5a:	68 2f       	mov	r22, r24
if(chan>26) return NRK_ERROR;
     f5c:	8b 31       	cpi	r24, 0x1B	; 27
     f5e:	18 f0       	brcs	.+6      	; 0xf66 <bmac_set_channel+0xc>
     f60:	8f ef       	ldi	r24, 0xFF	; 255
     f62:	9f ef       	ldi	r25, 0xFF	; 255
     f64:	08 95       	ret
g_chan=chan;
     f66:	80 93 a5 03 	sts	0x03A5, r24
rf_init (&bmac_rfRxInfo, chan, 0xFFFF, 0x00000);
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	4f ef       	ldi	r20, 0xFF	; 255
     f70:	5f ef       	ldi	r21, 0xFF	; 255
     f72:	8b e0       	ldi	r24, 0x0B	; 11
     f74:	96 e0       	ldi	r25, 0x06	; 6
     f76:	0e 94 66 13 	call	0x26cc	; 0x26cc <rf_init>
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
return NRK_OK;
}
     f7e:	08 95       	ret

00000f80 <bmac_init>:
    rx_buf_empty=1;
return NRK_OK;
}

int8_t bmac_init (uint8_t chan)
{
     f80:	1f 93       	push	r17
     f82:	18 2f       	mov	r17, r24
    bmac_running=0;
     f84:	10 92 a3 03 	sts	0x03A3, r1
    tx_reserve=-1;
     f88:	8f ef       	ldi	r24, 0xFF	; 255
     f8a:	80 93 b0 03 	sts	0x03B0, r24
    cca_active=true;
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	80 93 af 03 	sts	0x03AF, r24
    rx_failure_cnt=0;
     f94:	10 92 9d 03 	sts	0x039D, r1
     f98:	10 92 9e 03 	sts	0x039E, r1
     f9c:	10 92 9f 03 	sts	0x039F, r1
     fa0:	10 92 a0 03 	sts	0x03A0, r1
	#endif
    #endif



    _bmac_check_period.secs=0;
     fa4:	10 92 a7 03 	sts	0x03A7, r1
     fa8:	10 92 a8 03 	sts	0x03A8, r1
     fac:	10 92 a9 03 	sts	0x03A9, r1
     fb0:	10 92 aa 03 	sts	0x03AA, r1
    _bmac_check_period.nano_secs=BMAC_DEFAULT_CHECK_RATE_MS*NANOS_PER_MS;
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	91 ee       	ldi	r25, 0xE1	; 225
     fb8:	a5 ef       	ldi	r26, 0xF5	; 245
     fba:	b5 e0       	ldi	r27, 0x05	; 5
     fbc:	80 93 ab 03 	sts	0x03AB, r24
     fc0:	90 93 ac 03 	sts	0x03AC, r25
     fc4:	a0 93 ad 03 	sts	0x03AD, r26
     fc8:	b0 93 ae 03 	sts	0x03AE, r27
    bmac_rx_pkt_signal=nrk_signal_create();
     fcc:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <nrk_signal_create>
     fd0:	80 93 d6 04 	sts	0x04D6, r24
    if(bmac_rx_pkt_signal==NRK_ERROR)
     fd4:	8f 3f       	cpi	r24, 0xFF	; 255
     fd6:	19 f4       	brne	.+6      	; 0xfde <bmac_init+0x5e>
	{
	nrk_kprintf(PSTR("BMAC ERROR: creating rx signal failed\r\n"));
     fd8:	85 e0       	ldi	r24, 0x05	; 5
     fda:	92 e0       	ldi	r25, 0x02	; 2
     fdc:	08 c0       	rjmp	.+16     	; 0xfee <bmac_init+0x6e>
	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
	return NRK_ERROR;
	}
    bmac_tx_pkt_done_signal=nrk_signal_create();
     fde:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <nrk_signal_create>
     fe2:	80 93 95 06 	sts	0x0695, r24
    if(bmac_tx_pkt_done_signal==NRK_ERROR)
     fe6:	8f 3f       	cpi	r24, 0xFF	; 255
     fe8:	79 f4       	brne	.+30     	; 0x1008 <bmac_init+0x88>
	{
	nrk_kprintf(PSTR("BMAC ERROR: creating tx signal failed\r\n"));
     fea:	8d ed       	ldi	r24, 0xDD	; 221
     fec:	91 e0       	ldi	r25, 0x01	; 1
     fee:	0e 94 3d 19 	call	0x327a	; 0x327a <nrk_kprintf>
	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
     ff2:	e0 91 55 07 	lds	r30, 0x0755
     ff6:	f0 91 56 07 	lds	r31, 0x0756
     ffa:	60 85       	ldd	r22, Z+8	; 0x08
     ffc:	8e e0       	ldi	r24, 0x0E	; 14
     ffe:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <nrk_kernel_error_add>
    1002:	8f ef       	ldi	r24, 0xFF	; 255
    1004:	9f ef       	ldi	r25, 0xFF	; 255
    1006:	5b c0       	rjmp	.+182    	; 0x10be <bmac_init+0x13e>
	return NRK_ERROR;
	}
    bmac_enable_signal=nrk_signal_create();
    1008:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <nrk_signal_create>
    100c:	80 93 4a 04 	sts	0x044A, r24
    if(bmac_enable_signal==NRK_ERROR)
    1010:	8f 3f       	cpi	r24, 0xFF	; 255
    1012:	19 f4       	brne	.+6      	; 0x101a <bmac_init+0x9a>
	{
	nrk_kprintf(PSTR("BMAC ERROR: creating enable signal failed\r\n"));
    1014:	81 eb       	ldi	r24, 0xB1	; 177
    1016:	91 e0       	ldi	r25, 0x01	; 1
    1018:	ea cf       	rjmp	.-44     	; 0xfee <bmac_init+0x6e>
	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
	return NRK_ERROR;
	}

     
    tx_data_ready=0;
    101a:	10 92 a1 03 	sts	0x03A1, r1
    // Set the one main rx buffer
    rx_buf_empty=0;
    101e:	10 92 a2 03 	sts	0x03A2, r1
    bmac_rfRxInfo.pPayload = NULL;
    1022:	10 92 11 06 	sts	0x0611, r1
    1026:	10 92 10 06 	sts	0x0610, r1
    bmac_rfRxInfo.max_length = 0;
    102a:	10 92 0f 06 	sts	0x060F, r1

    // Setup the cc2420 chip
    rf_init (&bmac_rfRxInfo, chan, 0xffff, 0);
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	4f ef       	ldi	r20, 0xFF	; 255
    1034:	5f ef       	ldi	r21, 0xFF	; 255
    1036:	61 2f       	mov	r22, r17
    1038:	8b e0       	ldi	r24, 0x0B	; 11
    103a:	96 e0       	ldi	r25, 0x06	; 6
    103c:	0e 94 66 13 	call	0x26cc	; 0x26cc <rf_init>
    g_chan=chan;
    1040:	10 93 a5 03 	sts	0x03A5, r17
 
    FASTSPI_SETREG(CC2420_RSSI, 0xE580); // CCA THR=-25
    1044:	40 98       	cbi	0x08, 0	; 8
    1046:	83 e1       	ldi	r24, 0x13	; 19
    1048:	8e bd       	out	0x2e, r24	; 46
    104a:	0d b4       	in	r0, 0x2d	; 45
    104c:	07 fe       	sbrs	r0, 7
    104e:	fd cf       	rjmp	.-6      	; 0x104a <bmac_init+0xca>
    1050:	85 ee       	ldi	r24, 0xE5	; 229
    1052:	8e bd       	out	0x2e, r24	; 46
    1054:	0d b4       	in	r0, 0x2d	; 45
    1056:	07 fe       	sbrs	r0, 7
    1058:	fd cf       	rjmp	.-6      	; 0x1054 <bmac_init+0xd4>
    105a:	80 e8       	ldi	r24, 0x80	; 128
    105c:	8e bd       	out	0x2e, r24	; 46
    105e:	0d b4       	in	r0, 0x2d	; 45
    1060:	07 fe       	sbrs	r0, 7
    1062:	fd cf       	rjmp	.-6      	; 0x105e <bmac_init+0xde>
    1064:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_TXCTRL, 0x80FF); // TX TURNAROUND = 128 us
    1066:	40 98       	cbi	0x08, 0	; 8
    1068:	85 e1       	ldi	r24, 0x15	; 21
    106a:	8e bd       	out	0x2e, r24	; 46
    106c:	0d b4       	in	r0, 0x2d	; 45
    106e:	07 fe       	sbrs	r0, 7
    1070:	fd cf       	rjmp	.-6      	; 0x106c <bmac_init+0xec>
    1072:	80 e8       	ldi	r24, 0x80	; 128
    1074:	8e bd       	out	0x2e, r24	; 46
    1076:	0d b4       	in	r0, 0x2d	; 45
    1078:	07 fe       	sbrs	r0, 7
    107a:	fd cf       	rjmp	.-6      	; 0x1076 <bmac_init+0xf6>
    107c:	8f ef       	ldi	r24, 0xFF	; 255
    107e:	8e bd       	out	0x2e, r24	; 46
    1080:	0d b4       	in	r0, 0x2d	; 45
    1082:	07 fe       	sbrs	r0, 7
    1084:	fd cf       	rjmp	.-6      	; 0x1080 <bmac_init+0x100>
    1086:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_RXCTRL1, 0x0A56); 
    1088:	40 98       	cbi	0x08, 0	; 8
    108a:	87 e1       	ldi	r24, 0x17	; 23
    108c:	8e bd       	out	0x2e, r24	; 46
    108e:	0d b4       	in	r0, 0x2d	; 45
    1090:	07 fe       	sbrs	r0, 7
    1092:	fd cf       	rjmp	.-6      	; 0x108e <bmac_init+0x10e>
    1094:	8a e0       	ldi	r24, 0x0A	; 10
    1096:	8e bd       	out	0x2e, r24	; 46
    1098:	0d b4       	in	r0, 0x2d	; 45
    109a:	07 fe       	sbrs	r0, 7
    109c:	fd cf       	rjmp	.-6      	; 0x1098 <bmac_init+0x118>
    109e:	86 e5       	ldi	r24, 0x56	; 86
    10a0:	8e bd       	out	0x2e, r24	; 46
    10a2:	0d b4       	in	r0, 0x2d	; 45
    10a4:	07 fe       	sbrs	r0, 7
    10a6:	fd cf       	rjmp	.-6      	; 0x10a2 <bmac_init+0x122>
    10a8:	40 9a       	sbi	0x08, 0	; 8
    // default cca thresh of -45
    //rf_set_cca_thresh(-45); 
    rf_set_cca_thresh(-45); 
    10aa:	83 ed       	ldi	r24, 0xD3	; 211
    10ac:	0e 94 ad 0b 	call	0x175a	; 0x175a <rf_set_cca_thresh>
    bmac_running=1;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	80 93 a3 03 	sts	0x03A3, r24
    is_enabled=1;
    10b6:	80 93 a6 03 	sts	0x03A6, r24
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	1f 91       	pop	r17
    10c0:	08 95       	ret

000010c2 <bmac_set_cca_thresh>:
cca_active=active;
}

int8_t bmac_set_cca_thresh(int8_t thresh)
{
  rf_set_cca_thresh(thresh); 
    10c2:	0e 94 ad 0b 	call	0x175a	; 0x175a <rf_set_cca_thresh>
return NRK_OK;
}
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	08 95       	ret

000010cc <bmac_set_rf_power>:
}


int8_t bmac_set_rf_power(uint8_t power)
{
if(power>31) return NRK_ERROR;
    10cc:	80 32       	cpi	r24, 0x20	; 32
    10ce:	18 f0       	brcs	.+6      	; 0x10d6 <bmac_set_rf_power+0xa>
    10d0:	8f ef       	ldi	r24, 0xFF	; 255
    10d2:	9f ef       	ldi	r25, 0xFF	; 255
    10d4:	08 95       	ret
rf_tx_power(power);
    10d6:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <rf_tx_power>
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
return NRK_OK;
}
    10de:	08 95       	ret

000010e0 <bmac_encryption_disable>:
  return NRK_OK;
}

int8_t bmac_encryption_disable()
{
  rf_security_disable();
    10e0:	0e 94 25 0a 	call	0x144a	; 0x144a <rf_security_disable>
  return NRK_OK;
}
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	08 95       	ret

000010ea <bmac_encryption_enable>:
  return NRK_OK;
}

int8_t bmac_encryption_enable()
{
  rf_security_enable();
    10ea:	0e 94 ff 09 	call	0x13fe	; 0x13fe <rf_security_enable>
  return NRK_OK;
}
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	08 95       	ret

000010f4 <bmac_encryption_set_key>:
return rf_security_last_pkt_status();
}

int8_t bmac_encryption_set_key(uint8_t *key, uint8_t len)
{
  if(len!=16) return NRK_ERROR;
    10f4:	60 31       	cpi	r22, 0x10	; 16
    10f6:	19 f0       	breq	.+6      	; 0x10fe <bmac_encryption_set_key+0xa>
    10f8:	8f ef       	ldi	r24, 0xFF	; 255
    10fa:	9f ef       	ldi	r25, 0xFF	; 255
    10fc:	08 95       	ret
  rf_security_set_key(key);
    10fe:	0e 94 2e 12 	call	0x245c	; 0x245c <rf_security_set_key>
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	90 e0       	ldi	r25, 0x00	; 0
  return NRK_OK;
}
    1106:	08 95       	ret

00001108 <bmac_rx_pkt_is_encrypted>:
return NRK_OK;
}

int8_t bmac_rx_pkt_is_encrypted()
{
return rf_security_last_pkt_status();
    1108:	0e 94 b4 09 	call	0x1368	; 0x1368 <rf_security_last_pkt_status>
}
    110c:	99 27       	eor	r25, r25
    110e:	87 fd       	sbrc	r24, 7
    1110:	90 95       	com	r25
    1112:	08 95       	ret

00001114 <bmac_addr_decode_set_my_mac>:
return NRK_OK;
}

int8_t bmac_addr_decode_set_my_mac(uint16_t my_mac)
{
rf_addr_decode_set_my_mac(my_mac);
    1114:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <rf_addr_decode_set_my_mac>
return NRK_OK;
}
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	08 95       	ret

0000111e <bmac_addr_decode_enable>:
return NRK_OK;
}

int8_t  bmac_addr_decode_enable() 
{
rf_addr_decode_enable();
    111e:	0e 94 3e 0a 	call	0x147c	; 0x147c <rf_addr_decode_enable>
return NRK_OK;
}
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	08 95       	ret

00001128 <bmac_addr_decode_disable>:
return NRK_OK;
}

int8_t  bmac_addr_decode_disable() 
{
rf_addr_decode_disable();
    1128:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <rf_addr_decode_disable>
return NRK_OK;
}
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	08 95       	ret

00001132 <bmac_auto_ack_enable>:
return NRK_OK;
}

int8_t  bmac_auto_ack_enable() 
{
rf_auto_ack_enable();
    1132:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <rf_auto_ack_enable>
return NRK_OK;
}
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	08 95       	ret

0000113c <bmac_auto_ack_disable>:
}


int8_t  bmac_auto_ack_disable() 
{
rf_auto_ack_disable();
    113c:	0e 94 92 0a 	call	0x1524	; 0x1524 <rf_auto_ack_disable>
return NRK_OK;
}
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	08 95       	ret

00001146 <bmac_tx_reserve_get>:
}

uint16_t bmac_tx_reserve_get()
{
#ifdef NRK_MAX_RESERVES
if(tx_reserve>=0)
    1146:	80 91 b0 03 	lds	r24, 0x03B0
    114a:	87 ff       	sbrs	r24, 7
    114c:	03 c0       	rjmp	.+6      	; 0x1154 <bmac_tx_reserve_get+0xe>
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	08 95       	ret
  return nrk_reserve_get(tx_reserve);
    1154:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <nrk_reserve_get>
    1158:	99 27       	eor	r25, r25
else return 0;
#else
return 0;
#endif
}
    115a:	08 95       	ret

0000115c <bmac_tx_reserve_set>:
rf_security_set_ctr_counter(counter);
   return NRK_OK;
}

int8_t bmac_tx_reserve_set( nrk_time_t *period, uint16_t pkts )
{
    115c:	0f 93       	push	r16
    115e:	1f 93       	push	r17
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	8c 01       	movw	r16, r24
    1166:	eb 01       	movw	r28, r22

#ifdef NRK_MAX_RESERVES
// Create a reserve if it doesn't exist
if(tx_reserve==-1) tx_reserve=nrk_reserve_create();
    1168:	80 91 b0 03 	lds	r24, 0x03B0
    116c:	8f 3f       	cpi	r24, 0xFF	; 255
    116e:	21 f4       	brne	.+8      	; 0x1178 <bmac_tx_reserve_set+0x1c>
    1170:	0e 94 96 2a 	call	0x552c	; 0x552c <nrk_reserve_create>
    1174:	80 93 b0 03 	sts	0x03B0, r24
if(tx_reserve>=0)
    1178:	80 91 b0 03 	lds	r24, 0x03B0
    117c:	87 ff       	sbrs	r24, 7
    117e:	03 c0       	rjmp	.+6      	; 0x1186 <bmac_tx_reserve_set+0x2a>
    1180:	8f ef       	ldi	r24, 0xFF	; 255
    1182:	9f ef       	ldi	r25, 0xFF	; 255
    1184:	09 c0       	rjmp	.+18     	; 0x1198 <bmac_tx_reserve_set+0x3c>
  return nrk_reserve_set(tx_reserve, period,pkts,NULL);
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	ae 01       	movw	r20, r28
    118c:	b8 01       	movw	r22, r16
    118e:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <nrk_reserve_set>
    1192:	99 27       	eor	r25, r25
    1194:	87 fd       	sbrc	r24, 7
    1196:	90 95       	com	r25
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	1f 91       	pop	r17
    119e:	0f 91       	pop	r16
    11a0:	08 95       	ret

000011a2 <bmac_encryption_set_ctr_counter>:
    return pRRI;
}

int8_t bmac_encryption_set_ctr_counter(uint8_t *counter, uint8_t len)
{
if(len!=4 ) return NRK_ERROR;
    11a2:	64 30       	cpi	r22, 0x04	; 4
    11a4:	19 f0       	breq	.+6      	; 0x11ac <bmac_encryption_set_ctr_counter+0xa>
    11a6:	8f ef       	ldi	r24, 0xFF	; 255
    11a8:	9f ef       	ldi	r25, 0xFF	; 255
    11aa:	08 95       	ret
rf_security_set_ctr_counter(counter);
    11ac:	0e 94 b8 09 	call	0x1370	; 0x1370 <rf_security_set_ctr_counter>
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
   return NRK_OK;
}
    11b4:	08 95       	ret

000011b6 <bmac_wait_until_rx_pkt>:

int8_t bmac_wait_until_rx_pkt()
{
nrk_sig_mask_t event;

if(bmac_rx_pkt_ready()==1) return NRK_OK;
    11b6:	80 91 a2 03 	lds	r24, 0x03A2
    11ba:	88 23       	and	r24, r24
    11bc:	09 f1       	breq	.+66     	; 0x1200 <bmac_wait_until_rx_pkt+0x4a>

    nrk_signal_register(bmac_rx_pkt_signal); 
    11be:	80 91 d6 04 	lds	r24, 0x04D6
    11c2:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <nrk_signal_register>
    event=nrk_event_wait (SIG(bmac_rx_pkt_signal));
    11c6:	61 e0       	ldi	r22, 0x01	; 1
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	00 90 d6 04 	lds	r0, 0x04D6
    11d2:	04 c0       	rjmp	.+8      	; 0x11dc <bmac_wait_until_rx_pkt+0x26>
    11d4:	66 0f       	add	r22, r22
    11d6:	77 1f       	adc	r23, r23
    11d8:	88 1f       	adc	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	0a 94       	dec	r0
    11de:	d2 f7       	brpl	.-12     	; 0x11d4 <bmac_wait_until_rx_pkt+0x1e>
    11e0:	0e 94 4d 22 	call	0x449a	; 0x449a <nrk_event_wait>

// Check if it was a time out instead of packet RX signal
if((event & SIG(bmac_rx_pkt_signal)) == 0 ) return NRK_ERROR;
    11e4:	00 90 d6 04 	lds	r0, 0x04D6
    11e8:	04 c0       	rjmp	.+8      	; 0x11f2 <bmac_wait_until_rx_pkt+0x3c>
    11ea:	96 95       	lsr	r25
    11ec:	87 95       	ror	r24
    11ee:	77 95       	ror	r23
    11f0:	67 95       	ror	r22
    11f2:	0a 94       	dec	r0
    11f4:	d2 f7       	brpl	.-12     	; 0x11ea <bmac_wait_until_rx_pkt+0x34>
    11f6:	60 fd       	sbrc	r22, 0
    11f8:	03 c0       	rjmp	.+6      	; 0x1200 <bmac_wait_until_rx_pkt+0x4a>
    11fa:	8f ef       	ldi	r24, 0xFF	; 255
    11fc:	9f ef       	ldi	r25, 0xFF	; 255
    11fe:	08 95       	ret
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
else return NRK_OK;
}
    1204:	08 95       	ret

00001206 <bmac_rx_pkt_get>:
return NRK_ERROR;
}


uint8_t *bmac_rx_pkt_get(uint8_t *len, int8_t *rssi)
{
    1206:	fc 01       	movw	r30, r24
    1208:	db 01       	movw	r26, r22

  if(bmac_rx_pkt_ready()==0) 
    120a:	80 91 a2 03 	lds	r24, 0x03A2
    120e:	88 23       	and	r24, r24
    1210:	29 f0       	breq	.+10     	; 0x121c <bmac_rx_pkt_get+0x16>
	{
	*len=0;
    1212:	10 82       	st	Z, r1
	*rssi=0;
    1214:	1c 92       	st	X, r1
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	08 95       	ret
	return NULL;
	}
  *len=bmac_rfRxInfo.length;
    121c:	80 91 0e 06 	lds	r24, 0x060E
    1220:	80 83       	st	Z, r24
  *rssi=bmac_rfRxInfo.rssi;
    1222:	80 91 13 06 	lds	r24, 0x0613
    1226:	8c 93       	st	X, r24
  return bmac_rfRxInfo.pPayload;
    1228:	80 91 10 06 	lds	r24, 0x0610
    122c:	90 91 11 06 	lds	r25, 0x0611
}
    1230:	08 95       	ret

00001232 <bmac_nw_task>:
  nrk_event_signal (bmac_enable_signal);
}


void bmac_nw_task ()
{
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <bmac_nw_task+0x6>
int8_t v;
int8_t e;
uint8_t backoff;
nrk_sig_mask_t event;

while(bmac_started()==0) nrk_wait_until_next_period();
    1234:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <nrk_wait_until_next_period>
    1238:	80 91 a3 03 	lds	r24, 0x03A3
    123c:	88 23       	and	r24, r24
    123e:	d1 f3       	breq	.-12     	; 0x1234 <bmac_nw_task+0x2>

//register the signal after bmac_init has been called
v=nrk_signal_register(bmac_enable_signal); 
    1240:	80 91 4a 04 	lds	r24, 0x044A
    1244:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <nrk_signal_register>
if(v==NRK_ERROR) nrk_kprintf( PSTR("Failed to register signal\r\n"));
    1248:	8f 3f       	cpi	r24, 0xFF	; 255
    124a:	21 f4       	brne	.+8      	; 0x1254 <bmac_nw_task+0x22>
    124c:	8e e4       	ldi	r24, 0x4E	; 78
    124e:	91 e0       	ldi	r25, 0x01	; 1
    1250:	0e 94 3d 19 	call	0x327a	; 0x327a <nrk_kprintf>
    #ifdef NRK_SW_WDT
	#ifdef BMAC_SW_WDT_ID
	nrk_sw_wdt_update(BMAC_SW_WDT_ID);
	#endif
    #endif
	if(is_enabled ) { 
    1254:	80 91 a6 03 	lds	r24, 0x03A6
    1258:	88 23       	and	r24, r24
    125a:	59 f1       	breq	.+86     	; 0x12b2 <bmac_nw_task+0x80>
	v=1;
	if(rx_buf_empty==1) v=_bmac_channel_check();
    125c:	80 91 a2 03 	lds	r24, 0x03A2
    1260:	81 30       	cpi	r24, 0x01	; 1
    1262:	41 f4       	brne	.+16     	; 0x1274 <bmac_nw_task+0x42>
    1264:	0e 94 15 06 	call	0xc2a	; 0xc2a <_bmac_channel_check>
	// If the buffer is full, signal the receiving task again.
	else e=nrk_event_signal (bmac_rx_pkt_signal);
	// bmac_channel check turns on radio, don't turn off if
	// data is coming.
		if(v==0)
    1268:	88 23       	and	r24, r24
    126a:	41 f4       	brne	.+16     	; 0x127c <bmac_nw_task+0x4a>
			{
			if(_bmac_rx()==1)
    126c:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_bmac_rx>
    1270:	81 30       	cpi	r24, 0x01	; 1
    1272:	21 f4       	brne	.+8      	; 0x127c <bmac_nw_task+0x4a>
			  {
				e=nrk_event_signal (bmac_rx_pkt_signal);
    1274:	80 91 d6 04 	lds	r24, 0x04D6
    1278:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <nrk_event_signal>
				//	printf( "errno: %u \r\n",nrk_errno_get() );
				//}
			  }
			  //else nrk_kprintf( PSTR("Pkt failed, buf could be corrupt\r\n" ));
			} 
		if(/*rx_buf_empty==1 &&*/ tx_data_ready==1)
    127c:	80 91 a1 03 	lds	r24, 0x03A1
    1280:	81 30       	cpi	r24, 0x01	; 1
    1282:	21 f4       	brne	.+8      	; 0x128c <bmac_nw_task+0x5a>
			{
				rf_rx_off(); 
    1284:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <rf_rx_off>
				_bmac_tx();
    1288:	0e 94 2d 06 	call	0xc5a	; 0xc5a <_bmac_tx>
			}
	//do {
		nrk_wait(_bmac_check_period); 
    128c:	20 91 a7 03 	lds	r18, 0x03A7
    1290:	30 91 a8 03 	lds	r19, 0x03A8
    1294:	40 91 a9 03 	lds	r20, 0x03A9
    1298:	50 91 aa 03 	lds	r21, 0x03AA
    129c:	60 91 ab 03 	lds	r22, 0x03AB
    12a0:	70 91 ac 03 	lds	r23, 0x03AC
    12a4:	80 91 ad 03 	lds	r24, 0x03AD
    12a8:	90 91 ae 03 	lds	r25, 0x03AE
    12ac:	0e 94 84 23 	call	0x4708	; 0x4708 <nrk_wait>
    12b0:	d1 cf       	rjmp	.-94     	; 0x1254 <bmac_nw_task+0x22>
	//	if(rx_buf_empty!=1)  nrk_event_signal (bmac_rx_pkt_signal);
	//} while(rx_buf_empty!=1);
	} else {
		event=0;
		do {
		v=nrk_signal_register(bmac_enable_signal); 
    12b2:	80 91 4a 04 	lds	r24, 0x044A
    12b6:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <nrk_signal_register>
    		event=nrk_event_wait (SIG(bmac_enable_signal));
    12ba:	61 e0       	ldi	r22, 0x01	; 1
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	00 90 4a 04 	lds	r0, 0x044A
    12c6:	04 c0       	rjmp	.+8      	; 0x12d0 <bmac_nw_task+0x9e>
    12c8:	66 0f       	add	r22, r22
    12ca:	77 1f       	adc	r23, r23
    12cc:	88 1f       	adc	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	0a 94       	dec	r0
    12d2:	d2 f7       	brpl	.-12     	; 0x12c8 <bmac_nw_task+0x96>
    12d4:	0e 94 4d 22 	call	0x449a	; 0x449a <nrk_event_wait>
		} while((event & SIG(bmac_enable_signal))==0);
    12d8:	00 90 4a 04 	lds	r0, 0x044A
    12dc:	04 c0       	rjmp	.+8      	; 0x12e6 <bmac_nw_task+0xb4>
    12de:	96 95       	lsr	r25
    12e0:	87 95       	ror	r24
    12e2:	77 95       	ror	r23
    12e4:	67 95       	ror	r22
    12e6:	0a 94       	dec	r0
    12e8:	d2 f7       	brpl	.-12     	; 0x12de <bmac_nw_task+0xac>
    12ea:	60 fd       	sbrc	r22, 0
    12ec:	b3 cf       	rjmp	.-154    	; 0x1254 <bmac_nw_task+0x22>
    12ee:	e1 cf       	rjmp	.-62     	; 0x12b2 <bmac_nw_task+0x80>

000012f0 <halRfSetChannel>:
//-------------------------------------------------------------------------------------------------------
void halRfSetChannel(uint8_t channel) {
	uint16_t f;
	
	// Derive frequency programming from the given channel number
	f = (uint16_t) (channel - 11); // Subtract the base channel 
    12f0:	99 27       	eor	r25, r25
	f = f + (f << 2);    		 // Multiply with 5, which is the channel spacing
    12f2:	9c 01       	movw	r18, r24
    12f4:	26 5a       	subi	r18, 0xA6	; 166
    12f6:	3e 4b       	sbci	r19, 0xBE	; 190
    12f8:	0b 97       	sbiw	r24, 0x0b	; 11
	f = f + 357 + 0x4000;		 // 357 is 2405-2048, 0x4000 is LOCK_THR = 1
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	28 0f       	add	r18, r24
    1304:	39 1f       	adc	r19, r25
	
    // Write it to the CC2420
	DISABLE_GLOBAL_INT();
    1306:	f8 94       	cli
	FASTSPI_SETREG(CC2420_FSCTRL, f);
    1308:	40 98       	cbi	0x08, 0	; 8
    130a:	88 e1       	ldi	r24, 0x18	; 24
    130c:	8e bd       	out	0x2e, r24	; 46
    130e:	0d b4       	in	r0, 0x2d	; 45
    1310:	07 fe       	sbrs	r0, 7
    1312:	fd cf       	rjmp	.-6      	; 0x130e <halRfSetChannel+0x1e>
    1314:	83 2f       	mov	r24, r19
    1316:	99 27       	eor	r25, r25
    1318:	8e bd       	out	0x2e, r24	; 46
    131a:	0d b4       	in	r0, 0x2d	; 45
    131c:	07 fe       	sbrs	r0, 7
    131e:	fd cf       	rjmp	.-6      	; 0x131a <halRfSetChannel+0x2a>
    1320:	2e bd       	out	0x2e, r18	; 46
    1322:	0d b4       	in	r0, 0x2d	; 45
    1324:	07 fe       	sbrs	r0, 7
    1326:	fd cf       	rjmp	.-6      	; 0x1322 <halRfSetChannel+0x32>
    1328:	40 9a       	sbi	0x08, 0	; 8
	ENABLE_GLOBAL_INT();
    132a:	78 94       	sei
    132c:	08 95       	ret

0000132e <halRfWaitForCrystalOscillator>:
#include <nrk_error.h>
#include <nrk_reserve.h>
#include <bmac.h>
#include <nrk_cfg.h>


    132e:	f8 94       	cli
#ifndef BMAC_STACKSIZE
    1330:	40 98       	cbi	0x08, 0	; 8
    1332:	1e bc       	out	0x2e, r1	; 46
    1334:	0d b4       	in	r0, 0x2d	; 45
    1336:	07 fe       	sbrs	r0, 7
    1338:	fd cf       	rjmp	.-6      	; 0x1334 <halRfWaitForCrystalOscillator+0x6>
    133a:	8e b5       	in	r24, 0x2e	; 46
    133c:	40 9a       	sbi	0x08, 0	; 8
#define BMAC_STACKSIZE	128	
    133e:	78 94       	sei
#endif
    1340:	86 ff       	sbrs	r24, 6
    1342:	f5 cf       	rjmp	.-22     	; 0x132e <halRfWaitForCrystalOscillator>
    1344:	08 95       	ret

00001346 <rf_power_down>:
uint8_t tx_ctr[4];
uint8_t rx_ctr[4];

void rf_power_down()
{
    DISABLE_GLOBAL_INT();
    1346:	f8 94       	cli
    FASTSPI_STROBE(CC2420_SXOSCOFF);
    1348:	40 98       	cbi	0x08, 0	; 8
    134a:	87 e0       	ldi	r24, 0x07	; 7
    134c:	8e bd       	out	0x2e, r24	; 46
    134e:	0d b4       	in	r0, 0x2d	; 45
    1350:	07 fe       	sbrs	r0, 7
    1352:	fd cf       	rjmp	.-6      	; 0x134e <rf_power_down+0x8>
    1354:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
    1356:	40 98       	cbi	0x08, 0	; 8
    1358:	86 e0       	ldi	r24, 0x06	; 6
    135a:	8e bd       	out	0x2e, r24	; 46
    135c:	0d b4       	in	r0, 0x2d	; 45
    135e:	07 fe       	sbrs	r0, 7
    1360:	fd cf       	rjmp	.-6      	; 0x135c <rf_power_down+0x16>
    1362:	40 9a       	sbi	0x08, 0	; 8
    ENABLE_GLOBAL_INT();
    1364:	78 94       	sei
    1366:	08 95       	ret

00001368 <rf_security_last_pkt_status>:
}


// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
    1368:	80 91 b0 06 	lds	r24, 0x06B0
return last_pkt_encrypted;
}
    136c:	99 27       	eor	r25, r25
    136e:	08 95       	ret

00001370 <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	dc 01       	movw	r26, r24
uint8_t n;
// CTR counter value
FASTSPI_WRITE_RAM(&counter[0],(CC2420RAM_TXNONCE+9),2,n); 
    1376:	40 98       	cbi	0x08, 0	; 8
    1378:	89 ec       	ldi	r24, 0xC9	; 201
    137a:	8e bd       	out	0x2e, r24	; 46
    137c:	0d b4       	in	r0, 0x2d	; 45
    137e:	07 fe       	sbrs	r0, 7
    1380:	fd cf       	rjmp	.-6      	; 0x137c <rf_security_set_ctr_counter+0xc>
    1382:	80 e8       	ldi	r24, 0x80	; 128
    1384:	8e bd       	out	0x2e, r24	; 46
    1386:	0d b4       	in	r0, 0x2d	; 45
    1388:	07 fe       	sbrs	r0, 7
    138a:	fd cf       	rjmp	.-6      	; 0x1386 <rf_security_set_ctr_counter+0x16>
    138c:	92 e0       	ldi	r25, 0x02	; 2
    138e:	91 50       	subi	r25, 0x01	; 1
    1390:	fd 01       	movw	r30, r26
    1392:	e9 0f       	add	r30, r25
    1394:	f1 1d       	adc	r31, r1
    1396:	80 81       	ld	r24, Z
    1398:	8e bd       	out	0x2e, r24	; 46
    139a:	0d b4       	in	r0, 0x2d	; 45
    139c:	07 fe       	sbrs	r0, 7
    139e:	fd cf       	rjmp	.-6      	; 0x139a <rf_security_set_ctr_counter+0x2a>
    13a0:	99 23       	and	r25, r25
    13a2:	a9 f7       	brne	.-22     	; 0x138e <rf_security_set_ctr_counter+0x1e>
    13a4:	40 9a       	sbi	0x08, 0	; 8
FASTSPI_WRITE_RAM(&counter[2],(CC2420RAM_TXNONCE+11),2,n); 
    13a6:	40 98       	cbi	0x08, 0	; 8
    13a8:	8b ec       	ldi	r24, 0xCB	; 203
    13aa:	8e bd       	out	0x2e, r24	; 46
    13ac:	0d b4       	in	r0, 0x2d	; 45
    13ae:	07 fe       	sbrs	r0, 7
    13b0:	fd cf       	rjmp	.-6      	; 0x13ac <rf_security_set_ctr_counter+0x3c>
    13b2:	80 e8       	ldi	r24, 0x80	; 128
    13b4:	8e bd       	out	0x2e, r24	; 46
    13b6:	0d b4       	in	r0, 0x2d	; 45
    13b8:	07 fe       	sbrs	r0, 7
    13ba:	fd cf       	rjmp	.-6      	; 0x13b6 <rf_security_set_ctr_counter+0x46>
    13bc:	92 e0       	ldi	r25, 0x02	; 2
    13be:	9d 01       	movw	r18, r26
    13c0:	2e 5f       	subi	r18, 0xFE	; 254
    13c2:	3f 4f       	sbci	r19, 0xFF	; 255
    13c4:	e9 01       	movw	r28, r18
    13c6:	91 50       	subi	r25, 0x01	; 1
    13c8:	f9 01       	movw	r30, r18
    13ca:	e9 0f       	add	r30, r25
    13cc:	f1 1d       	adc	r31, r1
    13ce:	80 81       	ld	r24, Z
    13d0:	8e bd       	out	0x2e, r24	; 46
    13d2:	0d b4       	in	r0, 0x2d	; 45
    13d4:	07 fe       	sbrs	r0, 7
    13d6:	fd cf       	rjmp	.-6      	; 0x13d2 <rf_security_set_ctr_counter+0x62>
    13d8:	99 23       	and	r25, r25
    13da:	a1 f7       	brne	.-24     	; 0x13c4 <rf_security_set_ctr_counter+0x54>
    13dc:	40 9a       	sbi	0x08, 0	; 8
tx_ctr[0]=counter[0];
    13de:	8c 91       	ld	r24, X
    13e0:	80 93 b1 06 	sts	0x06B1, r24
tx_ctr[1]=counter[1];
    13e4:	fd 01       	movw	r30, r26
    13e6:	81 81       	ldd	r24, Z+1	; 0x01
    13e8:	80 93 b2 06 	sts	0x06B2, r24
tx_ctr[2]=counter[2];
    13ec:	88 81       	ld	r24, Y
    13ee:	80 93 b3 06 	sts	0x06B3, r24
tx_ctr[3]=counter[3];
    13f2:	83 81       	ldd	r24, Z+3	; 0x03
    13f4:	80 93 b4 06 	sts	0x06B4, r24
    13f8:	df 91       	pop	r29
    13fa:	cf 91       	pop	r28
    13fc:	08 95       	ret

000013fe <rf_security_enable>:
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
}

void rf_security_enable(uint8_t *key)
{
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x0306); // Enable CTR encryption with key 0
    13fe:	40 98       	cbi	0x08, 0	; 8
    1400:	89 e1       	ldi	r24, 0x19	; 25
    1402:	8e bd       	out	0x2e, r24	; 46
    1404:	0d b4       	in	r0, 0x2d	; 45
    1406:	07 fe       	sbrs	r0, 7
    1408:	fd cf       	rjmp	.-6      	; 0x1404 <rf_security_enable+0x6>
    140a:	83 e0       	ldi	r24, 0x03	; 3
    140c:	8e bd       	out	0x2e, r24	; 46
    140e:	0d b4       	in	r0, 0x2d	; 45
    1410:	07 fe       	sbrs	r0, 7
    1412:	fd cf       	rjmp	.-6      	; 0x140e <rf_security_enable+0x10>
    1414:	86 e0       	ldi	r24, 0x06	; 6
    1416:	8e bd       	out	0x2e, r24	; 46
    1418:	0d b4       	in	r0, 0x2d	; 45
    141a:	07 fe       	sbrs	r0, 7
    141c:	fd cf       	rjmp	.-6      	; 0x1418 <rf_security_enable+0x1a>
    141e:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_SECCTRL1, 0x0e0e); // Encrypt / Decrypt 18 bytes into header
    1420:	40 98       	cbi	0x08, 0	; 8
    1422:	8a e1       	ldi	r24, 0x1A	; 26
    1424:	8e bd       	out	0x2e, r24	; 46
    1426:	0d b4       	in	r0, 0x2d	; 45
    1428:	07 fe       	sbrs	r0, 7
    142a:	fd cf       	rjmp	.-6      	; 0x1426 <rf_security_enable+0x28>
    142c:	8e e0       	ldi	r24, 0x0E	; 14
    142e:	8e bd       	out	0x2e, r24	; 46
    1430:	0d b4       	in	r0, 0x2d	; 45
    1432:	07 fe       	sbrs	r0, 7
    1434:	fd cf       	rjmp	.-6      	; 0x1430 <rf_security_enable+0x32>
    1436:	8e e0       	ldi	r24, 0x0E	; 14
    1438:	8e bd       	out	0x2e, r24	; 46
    143a:	0d b4       	in	r0, 0x2d	; 45
    143c:	07 fe       	sbrs	r0, 7
    143e:	fd cf       	rjmp	.-6      	; 0x143a <rf_security_enable+0x3c>
    1440:	40 9a       	sbi	0x08, 0	; 8

security_enable=1;
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	80 93 a1 06 	sts	0x06A1, r24
    1448:	08 95       	ret

0000144a <rf_security_disable>:



void rf_security_disable()
{
  FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security enable"
    144a:	40 98       	cbi	0x08, 0	; 8
    144c:	89 e1       	ldi	r24, 0x19	; 25
    144e:	8e bd       	out	0x2e, r24	; 46
    1450:	0d b4       	in	r0, 0x2d	; 45
    1452:	07 fe       	sbrs	r0, 7
    1454:	fd cf       	rjmp	.-6      	; 0x1450 <rf_security_disable+0x6>
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	8e bd       	out	0x2e, r24	; 46
    145a:	0d b4       	in	r0, 0x2d	; 45
    145c:	07 fe       	sbrs	r0, 7
    145e:	fd cf       	rjmp	.-6      	; 0x145a <rf_security_disable+0x10>
    1460:	84 ec       	ldi	r24, 0xC4	; 196
    1462:	8e bd       	out	0x2e, r24	; 46
    1464:	0d b4       	in	r0, 0x2d	; 45
    1466:	07 fe       	sbrs	r0, 7
    1468:	fd cf       	rjmp	.-6      	; 0x1464 <rf_security_disable+0x1a>
    146a:	40 9a       	sbi	0x08, 0	; 8
  security_enable=0;
    146c:	10 92 a1 06 	sts	0x06A1, r1
    1470:	08 95       	ret

00001472 <rf_get_sem>:
volatile uint8_t rx_ready;
//-------------------------------------------------------------------------------------------------------
nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    1472:	80 91 9f 06 	lds	r24, 0x069F
    1476:	90 91 a0 06 	lds	r25, 0x06A0
    147a:	08 95       	ret

0000147c <rf_addr_decode_enable>:
}


void rf_addr_decode_enable()
{
    mdmctrl0 |= 0x0800;
    147c:	20 91 a2 06 	lds	r18, 0x06A2
    1480:	30 91 a3 06 	lds	r19, 0x06A3
    1484:	38 60       	ori	r19, 0x08	; 8
    1486:	30 93 a3 06 	sts	0x06A3, r19
    148a:	20 93 a2 06 	sts	0x06A2, r18
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
    148e:	40 98       	cbi	0x08, 0	; 8
    1490:	81 e1       	ldi	r24, 0x11	; 17
    1492:	8e bd       	out	0x2e, r24	; 46
    1494:	0d b4       	in	r0, 0x2d	; 45
    1496:	07 fe       	sbrs	r0, 7
    1498:	fd cf       	rjmp	.-6      	; 0x1494 <rf_addr_decode_enable+0x18>
    149a:	83 2f       	mov	r24, r19
    149c:	99 27       	eor	r25, r25
    149e:	8e bd       	out	0x2e, r24	; 46
    14a0:	0d b4       	in	r0, 0x2d	; 45
    14a2:	07 fe       	sbrs	r0, 7
    14a4:	fd cf       	rjmp	.-6      	; 0x14a0 <rf_addr_decode_enable+0x24>
    14a6:	2e bd       	out	0x2e, r18	; 46
    14a8:	0d b4       	in	r0, 0x2d	; 45
    14aa:	07 fe       	sbrs	r0, 7
    14ac:	fd cf       	rjmp	.-6      	; 0x14a8 <rf_addr_decode_enable+0x2c>
    14ae:	40 9a       	sbi	0x08, 0	; 8
    14b0:	08 95       	ret

000014b2 <rf_addr_decode_disable>:
}

void rf_addr_decode_disable()
{
    mdmctrl0 &= (~0x0800);
    14b2:	20 91 a2 06 	lds	r18, 0x06A2
    14b6:	30 91 a3 06 	lds	r19, 0x06A3
    14ba:	37 7f       	andi	r19, 0xF7	; 247
    14bc:	30 93 a3 06 	sts	0x06A3, r19
    14c0:	20 93 a2 06 	sts	0x06A2, r18
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
    14c4:	40 98       	cbi	0x08, 0	; 8
    14c6:	81 e1       	ldi	r24, 0x11	; 17
    14c8:	8e bd       	out	0x2e, r24	; 46
    14ca:	0d b4       	in	r0, 0x2d	; 45
    14cc:	07 fe       	sbrs	r0, 7
    14ce:	fd cf       	rjmp	.-6      	; 0x14ca <rf_addr_decode_disable+0x18>
    14d0:	83 2f       	mov	r24, r19
    14d2:	99 27       	eor	r25, r25
    14d4:	8e bd       	out	0x2e, r24	; 46
    14d6:	0d b4       	in	r0, 0x2d	; 45
    14d8:	07 fe       	sbrs	r0, 7
    14da:	fd cf       	rjmp	.-6      	; 0x14d6 <rf_addr_decode_disable+0x24>
    14dc:	2e bd       	out	0x2e, r18	; 46
    14de:	0d b4       	in	r0, 0x2d	; 45
    14e0:	07 fe       	sbrs	r0, 7
    14e2:	fd cf       	rjmp	.-6      	; 0x14de <rf_addr_decode_disable+0x2c>
    14e4:	40 9a       	sbi	0x08, 0	; 8
    14e6:	08 95       	ret

000014e8 <rf_auto_ack_enable>:
}


void rf_auto_ack_enable()
{
    auto_ack_enable=1;
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	80 93 af 06 	sts	0x06AF, r24
    mdmctrl0 |= 0x0010;
    14ee:	20 91 a2 06 	lds	r18, 0x06A2
    14f2:	30 91 a3 06 	lds	r19, 0x06A3
    14f6:	20 61       	ori	r18, 0x10	; 16
    14f8:	30 93 a3 06 	sts	0x06A3, r19
    14fc:	20 93 a2 06 	sts	0x06A2, r18
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0); 
    1500:	40 98       	cbi	0x08, 0	; 8
    1502:	81 e1       	ldi	r24, 0x11	; 17
    1504:	8e bd       	out	0x2e, r24	; 46
    1506:	0d b4       	in	r0, 0x2d	; 45
    1508:	07 fe       	sbrs	r0, 7
    150a:	fd cf       	rjmp	.-6      	; 0x1506 <rf_auto_ack_enable+0x1e>
    150c:	83 2f       	mov	r24, r19
    150e:	99 27       	eor	r25, r25
    1510:	8e bd       	out	0x2e, r24	; 46
    1512:	0d b4       	in	r0, 0x2d	; 45
    1514:	07 fe       	sbrs	r0, 7
    1516:	fd cf       	rjmp	.-6      	; 0x1512 <rf_auto_ack_enable+0x2a>
    1518:	2e bd       	out	0x2e, r18	; 46
    151a:	0d b4       	in	r0, 0x2d	; 45
    151c:	07 fe       	sbrs	r0, 7
    151e:	fd cf       	rjmp	.-6      	; 0x151a <rf_auto_ack_enable+0x32>
    1520:	40 9a       	sbi	0x08, 0	; 8
    1522:	08 95       	ret

00001524 <rf_auto_ack_disable>:
}

void rf_auto_ack_disable()
{
    auto_ack_enable=0;
    1524:	10 92 af 06 	sts	0x06AF, r1
    mdmctrl0 &= (~0x0010);
    1528:	20 91 a2 06 	lds	r18, 0x06A2
    152c:	30 91 a3 06 	lds	r19, 0x06A3
    1530:	2f 7e       	andi	r18, 0xEF	; 239
    1532:	30 93 a3 06 	sts	0x06A3, r19
    1536:	20 93 a2 06 	sts	0x06A2, r18
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
    153a:	40 98       	cbi	0x08, 0	; 8
    153c:	81 e1       	ldi	r24, 0x11	; 17
    153e:	8e bd       	out	0x2e, r24	; 46
    1540:	0d b4       	in	r0, 0x2d	; 45
    1542:	07 fe       	sbrs	r0, 7
    1544:	fd cf       	rjmp	.-6      	; 0x1540 <rf_auto_ack_disable+0x1c>
    1546:	83 2f       	mov	r24, r19
    1548:	99 27       	eor	r25, r25
    154a:	8e bd       	out	0x2e, r24	; 46
    154c:	0d b4       	in	r0, 0x2d	; 45
    154e:	07 fe       	sbrs	r0, 7
    1550:	fd cf       	rjmp	.-6      	; 0x154c <rf_auto_ack_disable+0x28>
    1552:	2e bd       	out	0x2e, r18	; 46
    1554:	0d b4       	in	r0, 0x2d	; 45
    1556:	07 fe       	sbrs	r0, 7
    1558:	fd cf       	rjmp	.-6      	; 0x1554 <rf_auto_ack_disable+0x30>
    155a:	40 9a       	sbi	0x08, 0	; 8
    155c:	08 95       	ret

0000155e <rf_busy>:

}

uint8_t rf_busy()
{
return SFD_IS_1;
    155e:	89 b1       	in	r24, 0x09	; 9
    1560:	99 27       	eor	r25, r25
    1562:	66 e0       	ldi	r22, 0x06	; 6
    1564:	96 95       	lsr	r25
    1566:	87 95       	ror	r24
    1568:	6a 95       	dec	r22
    156a:	e1 f7       	brne	.-8      	; 0x1564 <rf_busy+0x6>
}
    156c:	81 70       	andi	r24, 0x01	; 1
    156e:	90 70       	andi	r25, 0x00	; 0
    1570:	08 95       	ret

00001572 <rf_rx_check_fifop>:

uint8_t rf_rx_check_fifop()
{
return FIFOP_IS_1;
    1572:	8c b1       	in	r24, 0x0c	; 12
    1574:	99 27       	eor	r25, r25
    1576:	87 fd       	sbrc	r24, 7
    1578:	90 95       	com	r25
}
    157a:	88 27       	eor	r24, r24
    157c:	99 0f       	add	r25, r25
    157e:	88 1f       	adc	r24, r24
    1580:	99 27       	eor	r25, r25
    1582:	08 95       	ret

00001584 <rf_rx_check_sfd>:


uint8_t rf_rx_check_sfd()
{
return SFD_IS_1;
    1584:	89 b1       	in	r24, 0x09	; 9
    1586:	99 27       	eor	r25, r25
    1588:	e6 e0       	ldi	r30, 0x06	; 6
    158a:	96 95       	lsr	r25
    158c:	87 95       	ror	r24
    158e:	ea 95       	dec	r30
    1590:	e1 f7       	brne	.-8      	; 0x158a <rf_rx_check_sfd+0x6>
}
    1592:	81 70       	andi	r24, 0x01	; 1
    1594:	90 70       	andi	r25, 0x00	; 0
    1596:	08 95       	ret

00001598 <rf_rx_packet>:
}

int8_t rf_rx_packet()
{
int8_t tmp;
if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
    1598:	80 91 b5 06 	lds	r24, 0x06B5
    159c:	88 23       	and	r24, r24
    159e:	19 f4       	brne	.+6      	; 0x15a6 <rf_rx_packet+0xe>
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	08 95       	ret
    15a6:	80 91 b5 06 	lds	r24, 0x06B5
    15aa:	10 92 b5 06 	sts	0x06B5, r1
    15ae:	99 27       	eor	r25, r25
    15b0:	87 fd       	sbrc	r24, 7
    15b2:	90 95       	com	r25
return 0;
}
    15b4:	08 95       	ret

000015b6 <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
        FASTSPI_STROBE(CC2420_SFLUSHRX);
    15b6:	40 98       	cbi	0x08, 0	; 8
    15b8:	88 e0       	ldi	r24, 0x08	; 8
    15ba:	8e bd       	out	0x2e, r24	; 46
    15bc:	0d b4       	in	r0, 0x2d	; 45
    15be:	07 fe       	sbrs	r0, 7
    15c0:	fd cf       	rjmp	.-6      	; 0x15bc <rf_flush_rx_fifo+0x6>
    15c2:	40 9a       	sbi	0x08, 0	; 8
        FASTSPI_STROBE(CC2420_SFLUSHRX);
    15c4:	40 98       	cbi	0x08, 0	; 8
    15c6:	88 e0       	ldi	r24, 0x08	; 8
    15c8:	8e bd       	out	0x2e, r24	; 46
    15ca:	0d b4       	in	r0, 0x2d	; 45
    15cc:	07 fe       	sbrs	r0, 7
    15ce:	fd cf       	rjmp	.-6      	; 0x15ca <rf_flush_rx_fifo+0x14>
    15d0:	40 9a       	sbi	0x08, 0	; 8
    15d2:	08 95       	ret

000015d4 <rf_rx_set_serial>:
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
    FASTSPI_STROBE(CC2420_SRFOFF);           // stop radio
    15d4:	40 98       	cbi	0x08, 0	; 8
    15d6:	86 e0       	ldi	r24, 0x06	; 6
    15d8:	8e bd       	out	0x2e, r24	; 46
    15da:	0d b4       	in	r0, 0x2d	; 45
    15dc:	07 fe       	sbrs	r0, 7
    15de:	fd cf       	rjmp	.-6      	; 0x15da <rf_rx_set_serial+0x6>
    15e0:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0501); // Set RX_MODE to 1
    15e2:	40 98       	cbi	0x08, 0	; 8
    15e4:	82 e1       	ldi	r24, 0x12	; 18
    15e6:	8e bd       	out	0x2e, r24	; 46
    15e8:	0d b4       	in	r0, 0x2d	; 45
    15ea:	07 fe       	sbrs	r0, 7
    15ec:	fd cf       	rjmp	.-6      	; 0x15e8 <rf_rx_set_serial+0x14>
    15ee:	85 e0       	ldi	r24, 0x05	; 5
    15f0:	8e bd       	out	0x2e, r24	; 46
    15f2:	0d b4       	in	r0, 0x2d	; 45
    15f4:	07 fe       	sbrs	r0, 7
    15f6:	fd cf       	rjmp	.-6      	; 0x15f2 <rf_rx_set_serial+0x1e>
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	8e bd       	out	0x2e, r24	; 46
    15fc:	0d b4       	in	r0, 0x2d	; 45
    15fe:	07 fe       	sbrs	r0, 7
    1600:	fd cf       	rjmp	.-6      	; 0x15fc <rf_rx_set_serial+0x28>
    1602:	40 9a       	sbi	0x08, 0	; 8
    rf_flush_rx_fifo();
    1604:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <rf_flush_rx_fifo>
    1608:	08 95       	ret

0000160a <rf_tx_set_serial>:
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
    FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0504); // set TXMODE to 1
    160a:	40 98       	cbi	0x08, 0	; 8
    160c:	82 e1       	ldi	r24, 0x12	; 18
    160e:	8e bd       	out	0x2e, r24	; 46
    1610:	0d b4       	in	r0, 0x2d	; 45
    1612:	07 fe       	sbrs	r0, 7
    1614:	fd cf       	rjmp	.-6      	; 0x1610 <rf_tx_set_serial+0x6>
    1616:	85 e0       	ldi	r24, 0x05	; 5
    1618:	8e bd       	out	0x2e, r24	; 46
    161a:	0d b4       	in	r0, 0x2d	; 45
    161c:	07 fe       	sbrs	r0, 7
    161e:	fd cf       	rjmp	.-6      	; 0x161a <rf_tx_set_serial+0x10>
    1620:	84 e0       	ldi	r24, 0x04	; 4
    1622:	8e bd       	out	0x2e, r24	; 46
    1624:	0d b4       	in	r0, 0x2d	; 45
    1626:	07 fe       	sbrs	r0, 7
    1628:	fd cf       	rjmp	.-6      	; 0x1624 <rf_tx_set_serial+0x1a>
    162a:	40 9a       	sbi	0x08, 0	; 8
    rf_flush_rx_fifo();
    162c:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <rf_flush_rx_fifo>
    1630:	08 95       	ret

00001632 <rf_carrier_off>:
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    1632:	80 91 9f 06 	lds	r24, 0x069F
    1636:	90 91 a0 06 	lds	r25, 0x06A0
    163a:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <nrk_sem_pend>
#ifdef CC2420_OSC_OPT
	FASTSPI_STROBE(CC2420_SXOSCOFF);
#endif


        FASTSPI_STROBE(CC2420_SRFOFF); // stop radio
    163e:	40 98       	cbi	0x08, 0	; 8
    1640:	86 e0       	ldi	r24, 0x06	; 6
    1642:	8e bd       	out	0x2e, r24	; 46
    1644:	0d b4       	in	r0, 0x2d	; 45
    1646:	07 fe       	sbrs	r0, 7
    1648:	fd cf       	rjmp	.-6      	; 0x1644 <rf_carrier_off+0x12>
    164a:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    164c:	80 91 9f 06 	lds	r24, 0x069F
    1650:	90 91 a0 06 	lds	r25, 0x06A0
    1654:	0e 94 a7 20 	call	0x414e	; 0x414e <nrk_sem_post>
    1658:	08 95       	ret

0000165a <rf_carrier_on>:
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    165a:	80 91 9f 06 	lds	r24, 0x069F
    165e:	90 91 a0 06 	lds	r25, 0x06A0
    1662:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <nrk_sem_pend>
	nrk_spin_wait_us(OSC_STARTUP_DELAY);
#endif



        FASTSPI_STROBE(CC2420_STXON); // tell radio to start sending
    1666:	40 98       	cbi	0x08, 0	; 8
    1668:	84 e0       	ldi	r24, 0x04	; 4
    166a:	8e bd       	out	0x2e, r24	; 46
    166c:	0d b4       	in	r0, 0x2d	; 45
    166e:	07 fe       	sbrs	r0, 7
    1670:	fd cf       	rjmp	.-6      	; 0x166c <rf_carrier_on+0x12>
    1672:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    1674:	80 91 9f 06 	lds	r24, 0x069F
    1678:	90 91 a0 06 	lds	r25, 0x06A0
    167c:	0e 94 a7 20 	call	0x414e	; 0x414e <nrk_sem_post>
    1680:	08 95       	ret

00001682 <rf_data_mode>:

/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode() {
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    1682:	80 91 9f 06 	lds	r24, 0x069F
    1686:	90 91 a0 06 	lds	r25, 0x06A0
    168a:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <nrk_sem_pend>
#endif


        FASTSPI_STROBE(CC2420_SRFOFF); //stop radio
    168e:	40 98       	cbi	0x08, 0	; 8
    1690:	86 e0       	ldi	r24, 0x06	; 6
    1692:	8e bd       	out	0x2e, r24	; 46
    1694:	0d b4       	in	r0, 0x2d	; 45
    1696:	07 fe       	sbrs	r0, 7
    1698:	fd cf       	rjmp	.-6      	; 0x1694 <rf_data_mode+0x12>
    169a:	40 9a       	sbi	0x08, 0	; 8
        FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0500); // default MDMCTRL1 value
    169c:	40 98       	cbi	0x08, 0	; 8
    169e:	82 e1       	ldi	r24, 0x12	; 18
    16a0:	8e bd       	out	0x2e, r24	; 46
    16a2:	0d b4       	in	r0, 0x2d	; 45
    16a4:	07 fe       	sbrs	r0, 7
    16a6:	fd cf       	rjmp	.-6      	; 0x16a2 <rf_data_mode+0x20>
    16a8:	85 e0       	ldi	r24, 0x05	; 5
    16aa:	8e bd       	out	0x2e, r24	; 46
    16ac:	0d b4       	in	r0, 0x2d	; 45
    16ae:	07 fe       	sbrs	r0, 7
    16b0:	fd cf       	rjmp	.-6      	; 0x16ac <rf_data_mode+0x2a>
    16b2:	1e bc       	out	0x2e, r1	; 46
    16b4:	0d b4       	in	r0, 0x2d	; 45
    16b6:	07 fe       	sbrs	r0, 7
    16b8:	fd cf       	rjmp	.-6      	; 0x16b4 <rf_data_mode+0x32>
    16ba:	40 9a       	sbi	0x08, 0	; 8
        FASTSPI_SETREG(CC2420_DACTST, 0); // default value
    16bc:	40 98       	cbi	0x08, 0	; 8
    16be:	8e e2       	ldi	r24, 0x2E	; 46
    16c0:	8e bd       	out	0x2e, r24	; 46
    16c2:	0d b4       	in	r0, 0x2d	; 45
    16c4:	07 fe       	sbrs	r0, 7
    16c6:	fd cf       	rjmp	.-6      	; 0x16c2 <rf_data_mode+0x40>
    16c8:	1e bc       	out	0x2e, r1	; 46
    16ca:	0d b4       	in	r0, 0x2d	; 45
    16cc:	07 fe       	sbrs	r0, 7
    16ce:	fd cf       	rjmp	.-6      	; 0x16ca <rf_data_mode+0x48>
    16d0:	1e bc       	out	0x2e, r1	; 46
    16d2:	0d b4       	in	r0, 0x2d	; 45
    16d4:	07 fe       	sbrs	r0, 7
    16d6:	fd cf       	rjmp	.-6      	; 0x16d2 <rf_data_mode+0x50>
    16d8:	40 9a       	sbi	0x08, 0	; 8
        rf_flush_rx_fifo();
    16da:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <rf_flush_rx_fifo>
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    16de:	80 91 9f 06 	lds	r24, 0x069F
    16e2:	90 91 a0 06 	lds	r25, 0x06A0
    16e6:	0e 94 a7 20 	call	0x414e	; 0x414e <nrk_sem_post>
    16ea:	08 95       	ret

000016ec <rf_test_mode>:

void rf_test_mode()
{

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    16ec:	80 91 9f 06 	lds	r24, 0x069F
    16f0:	90 91 a0 06 	lds	r25, 0x06A0
    16f4:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <nrk_sem_pend>
#endif
        FASTSPI_STROBE(CC2420_SRFOFF); //stop radio
    16f8:	40 98       	cbi	0x08, 0	; 8
    16fa:	86 e0       	ldi	r24, 0x06	; 6
    16fc:	8e bd       	out	0x2e, r24	; 46
    16fe:	0d b4       	in	r0, 0x2d	; 45
    1700:	07 fe       	sbrs	r0, 7
    1702:	fd cf       	rjmp	.-6      	; 0x16fe <rf_test_mode+0x12>
    1704:	40 9a       	sbi	0x08, 0	; 8
	// RF studio" uses TX_MODE=3 (CC2420_MDMCTRL1=0x050C)
	// to send an unmodulated carrier; data sheet says TX_MODE 
	// can be 2 or 3. So it should not matter...
	// HOWEVER, using (TX_MODE=3) sometimes causes problems when 
	// going back to "data" mode!
	FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0508); // MDMCTRL1 with TX_MODE=2
    1706:	40 98       	cbi	0x08, 0	; 8
    1708:	82 e1       	ldi	r24, 0x12	; 18
    170a:	8e bd       	out	0x2e, r24	; 46
    170c:	0d b4       	in	r0, 0x2d	; 45
    170e:	07 fe       	sbrs	r0, 7
    1710:	fd cf       	rjmp	.-6      	; 0x170c <rf_test_mode+0x20>
    1712:	85 e0       	ldi	r24, 0x05	; 5
    1714:	8e bd       	out	0x2e, r24	; 46
    1716:	0d b4       	in	r0, 0x2d	; 45
    1718:	07 fe       	sbrs	r0, 7
    171a:	fd cf       	rjmp	.-6      	; 0x1716 <rf_test_mode+0x2a>
    171c:	88 e0       	ldi	r24, 0x08	; 8
    171e:	8e bd       	out	0x2e, r24	; 46
    1720:	0d b4       	in	r0, 0x2d	; 45
    1722:	07 fe       	sbrs	r0, 7
    1724:	fd cf       	rjmp	.-6      	; 0x1720 <rf_test_mode+0x34>
    1726:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_SETREG(CC2420_DACTST, 0x1800); // send unmodulated carrier
    1728:	40 98       	cbi	0x08, 0	; 8
    172a:	8e e2       	ldi	r24, 0x2E	; 46
    172c:	8e bd       	out	0x2e, r24	; 46
    172e:	0d b4       	in	r0, 0x2d	; 45
    1730:	07 fe       	sbrs	r0, 7
    1732:	fd cf       	rjmp	.-6      	; 0x172e <rf_test_mode+0x42>
    1734:	88 e1       	ldi	r24, 0x18	; 24
    1736:	8e bd       	out	0x2e, r24	; 46
    1738:	0d b4       	in	r0, 0x2d	; 45
    173a:	07 fe       	sbrs	r0, 7
    173c:	fd cf       	rjmp	.-6      	; 0x1738 <rf_test_mode+0x4c>
    173e:	1e bc       	out	0x2e, r1	; 46
    1740:	0d b4       	in	r0, 0x2d	; 45
    1742:	07 fe       	sbrs	r0, 7
    1744:	fd cf       	rjmp	.-6      	; 0x1740 <rf_test_mode+0x54>
    1746:	40 9a       	sbi	0x08, 0	; 8
	rf_flush_rx_fifo();
    1748:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <rf_flush_rx_fifo>

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    174c:	80 91 9f 06 	lds	r24, 0x069F
    1750:	90 91 a0 06 	lds	r25, 0x06A0
    1754:	0e 94 a7 20 	call	0x414e	; 0x414e <nrk_sem_post>
    1758:	08 95       	ret

0000175a <rf_set_cca_thresh>:
        FASTSPI_STROBE(CC2420_SFLUSHRX);
        FASTSPI_STROBE(CC2420_SFLUSHRX);
}

void rf_set_cca_thresh(int8_t t)
{
    175a:	0f 93       	push	r16
    175c:	1f 93       	push	r17
    175e:	08 2f       	mov	r16, r24
// default is -32
// Higher number is less sensitive
uint16_t val;
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    1760:	80 91 9f 06 	lds	r24, 0x069F
    1764:	90 91 a0 06 	lds	r25, 0x06A0
    1768:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <nrk_sem_pend>
#endif

val=(t<<8) | 0x80;
    176c:	11 27       	eor	r17, r17
    176e:	07 fd       	sbrc	r16, 7
    1770:	10 95       	com	r17
    1772:	30 2f       	mov	r19, r16
    1774:	22 27       	eor	r18, r18
    1776:	20 68       	ori	r18, 0x80	; 128
FASTSPI_SETREG(CC2420_RSSI, val); 
    1778:	40 98       	cbi	0x08, 0	; 8
    177a:	83 e1       	ldi	r24, 0x13	; 19
    177c:	8e bd       	out	0x2e, r24	; 46
    177e:	0d b4       	in	r0, 0x2d	; 45
    1780:	07 fe       	sbrs	r0, 7
    1782:	fd cf       	rjmp	.-6      	; 0x177e <rf_set_cca_thresh+0x24>
    1784:	83 2f       	mov	r24, r19
    1786:	99 27       	eor	r25, r25
    1788:	8e bd       	out	0x2e, r24	; 46
    178a:	0d b4       	in	r0, 0x2d	; 45
    178c:	07 fe       	sbrs	r0, 7
    178e:	fd cf       	rjmp	.-6      	; 0x178a <rf_set_cca_thresh+0x30>
    1790:	2e bd       	out	0x2e, r18	; 46
    1792:	0d b4       	in	r0, 0x2d	; 45
    1794:	07 fe       	sbrs	r0, 7
    1796:	fd cf       	rjmp	.-6      	; 0x1792 <rf_set_cca_thresh+0x38>
    1798:	40 9a       	sbi	0x08, 0	; 8

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    179a:	80 91 9f 06 	lds	r24, 0x069F
    179e:	90 91 a0 06 	lds	r25, 0x06A0
    17a2:	0e 94 a7 20 	call	0x414e	; 0x414e <nrk_sem_post>
    17a6:	1f 91       	pop	r17
    17a8:	0f 91       	pop	r16
    17aa:	08 95       	ret

000017ac <rf_polling_rx_packet>:
return SFD_IS_1;
}
uint16_t tmp_blah;

int8_t rf_polling_rx_packet()
{
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	24 97       	sbiw	r28, 0x04	; 4
    17b6:	0f b6       	in	r0, 0x3f	; 63
    17b8:	f8 94       	cli
    17ba:	de bf       	out	0x3e, r29	; 62
    17bc:	0f be       	out	0x3f, r0	; 63
    17be:	cd bf       	out	0x3d, r28	; 61
uint8_t tmp;
	
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    17c0:	80 91 9f 06 	lds	r24, 0x069F
    17c4:	90 91 a0 06 	lds	r25, 0x06A0
    17c8:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <nrk_sem_pend>
#endif

    if(FIFOP_IS_1 )
    17cc:	67 9b       	sbis	0x0c, 7	; 12
    17ce:	34 c2       	rjmp	.+1128   	; 0x1c38 <rf_polling_rx_packet+0x48c>
	uint16_t frameControlField;
	int8_t length;
	uint8_t pFooter[2];
	uint8_t checksum,rx_checksum,i;
			
	last_pkt_encrypted=0;
    17d0:	10 92 b0 06 	sts	0x06B0, r1
    
//	while(!SFD_IS_1);
//  XXX Need to make sure SFD has gone down to be sure packet finished!
//	while(SFD_IS_1);
    // Clean up and exit in case of FIFO overflow, which is indicated by FIFOP = 1 and FIFO = 0
	if((FIFOP_IS_1) && (!(FIFO_IS_1))) {	   
    17d4:	67 9b       	sbis	0x0c, 7	; 12
    17d6:	25 c0       	rjmp	.+74     	; 0x1822 <rf_polling_rx_packet+0x76>
    17d8:	31 99       	sbic	0x06, 1	; 6
    17da:	23 c0       	rjmp	.+70     	; 0x1822 <rf_polling_rx_packet+0x76>
	    // always read 1 byte before flush (data sheet pg 62)
	    FASTSPI_READ_FIFO_BYTE(tmp);  
    17dc:	40 98       	cbi	0x08, 0	; 8
    17de:	8f e7       	ldi	r24, 0x7F	; 127
    17e0:	8e bd       	out	0x2e, r24	; 46
    17e2:	0d b4       	in	r0, 0x2d	; 45
    17e4:	07 fe       	sbrs	r0, 7
    17e6:	fd cf       	rjmp	.-6      	; 0x17e2 <rf_polling_rx_packet+0x36>
    17e8:	1e bc       	out	0x2e, r1	; 46
    17ea:	0d b4       	in	r0, 0x2d	; 45
    17ec:	07 fe       	sbrs	r0, 7
    17ee:	fd cf       	rjmp	.-6      	; 0x17ea <rf_polling_rx_packet+0x3e>
    17f0:	8e b5       	in	r24, 0x2e	; 46
    17f2:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    17f4:	40 98       	cbi	0x08, 0	; 8
    17f6:	88 e0       	ldi	r24, 0x08	; 8
    17f8:	8e bd       	out	0x2e, r24	; 46
    17fa:	0d b4       	in	r0, 0x2d	; 45
    17fc:	07 fe       	sbrs	r0, 7
    17fe:	fd cf       	rjmp	.-6      	; 0x17fa <rf_polling_rx_packet+0x4e>
    1800:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1802:	40 98       	cbi	0x08, 0	; 8
    1804:	88 e0       	ldi	r24, 0x08	; 8
    1806:	8e bd       	out	0x2e, r24	; 46
    1808:	0d b4       	in	r0, 0x2d	; 45
    180a:	07 fe       	sbrs	r0, 7
    180c:	fd cf       	rjmp	.-6      	; 0x1808 <rf_polling_rx_packet+0x5c>
    180e:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
    1810:	80 91 9f 06 	lds	r24, 0x069F
    1814:	90 91 a0 06 	lds	r25, 0x06A0
    1818:	0e 94 a7 20 	call	0x414e	; 0x414e <nrk_sem_post>
    181c:	8f ef       	ldi	r24, 0xFF	; 255
    181e:	9f ef       	ldi	r25, 0xFF	; 255
    1820:	13 c2       	rjmp	.+1062   	; 0x1c48 <rf_polling_rx_packet+0x49c>
#endif
	    return -1;
	}

	// Payload length
	FASTSPI_READ_FIFO_BYTE(length);
    1822:	40 98       	cbi	0x08, 0	; 8
    1824:	8f e7       	ldi	r24, 0x7F	; 127
    1826:	8e bd       	out	0x2e, r24	; 46
    1828:	0d b4       	in	r0, 0x2d	; 45
    182a:	07 fe       	sbrs	r0, 7
    182c:	fd cf       	rjmp	.-6      	; 0x1828 <rf_polling_rx_packet+0x7c>
    182e:	1e bc       	out	0x2e, r1	; 46
    1830:	0d b4       	in	r0, 0x2d	; 45
    1832:	07 fe       	sbrs	r0, 7
    1834:	fd cf       	rjmp	.-6      	; 0x1830 <rf_polling_rx_packet+0x84>
    1836:	4e b5       	in	r20, 0x2e	; 46
    1838:	40 9a       	sbi	0x08, 0	; 8
	length &= RF_LENGTH_MASK; // Ignore MSB
    183a:	4f 77       	andi	r20, 0x7F	; 127
    // Ignore the packet if the length is too short
    if(length<=0){  
    183c:	19 f5       	brne	.+70     	; 0x1884 <rf_polling_rx_packet+0xd8>
	    // always read 1 byte before flush (data sheet pg 62)
	    FASTSPI_READ_FIFO_BYTE(tmp);  
    183e:	40 98       	cbi	0x08, 0	; 8
    1840:	8f e7       	ldi	r24, 0x7F	; 127
    1842:	8e bd       	out	0x2e, r24	; 46
    1844:	0d b4       	in	r0, 0x2d	; 45
    1846:	07 fe       	sbrs	r0, 7
    1848:	fd cf       	rjmp	.-6      	; 0x1844 <rf_polling_rx_packet+0x98>
    184a:	1e bc       	out	0x2e, r1	; 46
    184c:	0d b4       	in	r0, 0x2d	; 45
    184e:	07 fe       	sbrs	r0, 7
    1850:	fd cf       	rjmp	.-6      	; 0x184c <rf_polling_rx_packet+0xa0>
    1852:	8e b5       	in	r24, 0x2e	; 46
    1854:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1856:	40 98       	cbi	0x08, 0	; 8
    1858:	88 e0       	ldi	r24, 0x08	; 8
    185a:	8e bd       	out	0x2e, r24	; 46
    185c:	0d b4       	in	r0, 0x2d	; 45
    185e:	07 fe       	sbrs	r0, 7
    1860:	fd cf       	rjmp	.-6      	; 0x185c <rf_polling_rx_packet+0xb0>
    1862:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1864:	40 98       	cbi	0x08, 0	; 8
    1866:	88 e0       	ldi	r24, 0x08	; 8
    1868:	8e bd       	out	0x2e, r24	; 46
    186a:	0d b4       	in	r0, 0x2d	; 45
    186c:	07 fe       	sbrs	r0, 7
    186e:	fd cf       	rjmp	.-6      	; 0x186a <rf_polling_rx_packet+0xbe>
    1870:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
    1872:	80 91 9f 06 	lds	r24, 0x069F
    1876:	90 91 a0 06 	lds	r25, 0x06A0
    187a:	0e 94 a7 20 	call	0x414e	; 0x414e <nrk_sem_post>
    187e:	8e ef       	ldi	r24, 0xFE	; 254
    1880:	9f ef       	ldi	r25, 0xFF	; 255
    1882:	e2 c1       	rjmp	.+964    	; 0x1c48 <rf_polling_rx_packet+0x49c>
#endif
	return -2;
	}
    if (length < (RF_PACKET_OVERHEAD_SIZE + CHECKSUM_OVERHEAD)/*RF_ACK_PACKET_SIZE*/ || (length-RF_PACKET_OVERHEAD_SIZE)> rfSettings.pRxInfo->max_length) {
    1884:	4c 30       	cpi	r20, 0x0C	; 12
    1886:	8c f0       	brlt	.+34     	; 0x18aa <rf_polling_rx_packet+0xfe>
    1888:	e0 91 a4 06 	lds	r30, 0x06A4
    188c:	f0 91 a5 06 	lds	r31, 0x06A5
    1890:	24 2f       	mov	r18, r20
    1892:	33 27       	eor	r19, r19
    1894:	27 fd       	sbrc	r18, 7
    1896:	30 95       	com	r19
    1898:	2b 50       	subi	r18, 0x0B	; 11
    189a:	30 40       	sbci	r19, 0x00	; 0
    189c:	84 81       	ldd	r24, Z+4	; 0x04
    189e:	99 27       	eor	r25, r25
    18a0:	87 fd       	sbrc	r24, 7
    18a2:	90 95       	com	r25
    18a4:	82 17       	cp	r24, r18
    18a6:	93 07       	cpc	r25, r19
    18a8:	f4 f5       	brge	.+124    	; 0x1926 <rf_polling_rx_packet+0x17a>
    	FASTSPI_READ_FIFO_GARBAGE(length);
    18aa:	40 98       	cbi	0x08, 0	; 8
    18ac:	8f e7       	ldi	r24, 0x7F	; 127
    18ae:	8e bd       	out	0x2e, r24	; 46
    18b0:	0d b4       	in	r0, 0x2d	; 45
    18b2:	07 fe       	sbrs	r0, 7
    18b4:	fd cf       	rjmp	.-6      	; 0x18b0 <rf_polling_rx_packet+0x104>
    18b6:	60 e0       	ldi	r22, 0x00	; 0
    18b8:	70 e0       	ldi	r23, 0x00	; 0
    18ba:	24 2f       	mov	r18, r20
    18bc:	33 27       	eor	r19, r19
    18be:	27 fd       	sbrc	r18, 7
    18c0:	30 95       	com	r19
    18c2:	06 c0       	rjmp	.+12     	; 0x18d0 <rf_polling_rx_packet+0x124>
    18c4:	1e bc       	out	0x2e, r1	; 46
    18c6:	0d b4       	in	r0, 0x2d	; 45
    18c8:	07 fe       	sbrs	r0, 7
    18ca:	fd cf       	rjmp	.-6      	; 0x18c6 <rf_polling_rx_packet+0x11a>
    18cc:	6f 5f       	subi	r22, 0xFF	; 255
    18ce:	7f 4f       	sbci	r23, 0xFF	; 255
    18d0:	86 2f       	mov	r24, r22
    18d2:	99 27       	eor	r25, r25
    18d4:	82 17       	cp	r24, r18
    18d6:	93 07       	cpc	r25, r19
    18d8:	14 f4       	brge	.+4      	; 0x18de <rf_polling_rx_packet+0x132>
    18da:	31 99       	sbic	0x06, 1	; 6
    18dc:	f3 cf       	rjmp	.-26     	; 0x18c4 <rf_polling_rx_packet+0x118>
    18de:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_READ_FIFO_BYTE(tmp);  
    18e0:	40 98       	cbi	0x08, 0	; 8
    18e2:	8f e7       	ldi	r24, 0x7F	; 127
    18e4:	8e bd       	out	0x2e, r24	; 46
    18e6:	0d b4       	in	r0, 0x2d	; 45
    18e8:	07 fe       	sbrs	r0, 7
    18ea:	fd cf       	rjmp	.-6      	; 0x18e6 <rf_polling_rx_packet+0x13a>
    18ec:	1e bc       	out	0x2e, r1	; 46
    18ee:	0d b4       	in	r0, 0x2d	; 45
    18f0:	07 fe       	sbrs	r0, 7
    18f2:	fd cf       	rjmp	.-6      	; 0x18ee <rf_polling_rx_packet+0x142>
    18f4:	8e b5       	in	r24, 0x2e	; 46
    18f6:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    18f8:	40 98       	cbi	0x08, 0	; 8
    18fa:	88 e0       	ldi	r24, 0x08	; 8
    18fc:	8e bd       	out	0x2e, r24	; 46
    18fe:	0d b4       	in	r0, 0x2d	; 45
    1900:	07 fe       	sbrs	r0, 7
    1902:	fd cf       	rjmp	.-6      	; 0x18fe <rf_polling_rx_packet+0x152>
    1904:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1906:	40 98       	cbi	0x08, 0	; 8
    1908:	88 e0       	ldi	r24, 0x08	; 8
    190a:	8e bd       	out	0x2e, r24	; 46
    190c:	0d b4       	in	r0, 0x2d	; 45
    190e:	07 fe       	sbrs	r0, 7
    1910:	fd cf       	rjmp	.-6      	; 0x190c <rf_polling_rx_packet+0x160>
    1912:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
    1914:	80 91 9f 06 	lds	r24, 0x069F
    1918:	90 91 a0 06 	lds	r25, 0x06A0
    191c:	0e 94 a7 20 	call	0x414e	; 0x414e <nrk_sem_post>
    1920:	8d ef       	ldi	r24, 0xFD	; 253
    1922:	9f ef       	ldi	r25, 0xFF	; 255
    1924:	91 c1       	rjmp	.+802    	; 0x1c48 <rf_polling_rx_packet+0x49c>
	return -3;
	//printf_u( "Bad length: %d %d\n",length, rfSettings.pRxInfo->max_length );
    // Otherwise, if the length is valid, then proceed with the rest of the packet
    } else {
        // Register the payload length
        rfSettings.pRxInfo->length = length - RF_PACKET_OVERHEAD_SIZE - CHECKSUM_OVERHEAD;
    1926:	e0 91 a4 06 	lds	r30, 0x06A4
    192a:	f0 91 a5 06 	lds	r31, 0x06A5
    192e:	4c 50       	subi	r20, 0x0C	; 12
    1930:	43 83       	std	Z+3, r20	; 0x03
        // Read the frame control field and the data sequence number
        FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &frameControlField, 2);
    1932:	40 98       	cbi	0x08, 0	; 8
    1934:	8f e7       	ldi	r24, 0x7F	; 127
    1936:	8e bd       	out	0x2e, r24	; 46
    1938:	0d b4       	in	r0, 0x2d	; 45
    193a:	07 fe       	sbrs	r0, 7
    193c:	fd cf       	rjmp	.-6      	; 0x1938 <rf_polling_rx_packet+0x18c>
    193e:	fe 01       	movw	r30, r28
    1940:	31 96       	adiw	r30, 0x01	; 1
    1942:	9e 01       	movw	r18, r28
    1944:	2d 5f       	subi	r18, 0xFD	; 253
    1946:	3f 4f       	sbci	r19, 0xFF	; 255
    1948:	1e bc       	out	0x2e, r1	; 46
    194a:	0d b4       	in	r0, 0x2d	; 45
    194c:	07 fe       	sbrs	r0, 7
    194e:	fd cf       	rjmp	.-6      	; 0x194a <rf_polling_rx_packet+0x19e>
    1950:	8e b5       	in	r24, 0x2e	; 46
    1952:	81 93       	st	Z+, r24
    1954:	e2 17       	cp	r30, r18
    1956:	f3 07       	cpc	r31, r19
    1958:	b9 f7       	brne	.-18     	; 0x1948 <rf_polling_rx_packet+0x19c>
    195a:	40 9a       	sbi	0x08, 0	; 8
        rfSettings.pRxInfo->ackRequest = !!(frameControlField & RF_FCF_ACK_BM);
    195c:	e0 91 a4 06 	lds	r30, 0x06A4
    1960:	f0 91 a5 06 	lds	r31, 0x06A5
    1964:	89 81       	ldd	r24, Y+1	; 0x01
    1966:	9a 81       	ldd	r25, Y+2	; 0x02
    1968:	b5 e0       	ldi	r27, 0x05	; 5
    196a:	96 95       	lsr	r25
    196c:	87 95       	ror	r24
    196e:	ba 95       	dec	r27
    1970:	e1 f7       	brne	.-8      	; 0x196a <rf_polling_rx_packet+0x1be>
    1972:	81 70       	andi	r24, 0x01	; 1
    1974:	87 83       	std	Z+7, r24	; 0x07
    	FASTSPI_READ_FIFO_BYTE(rfSettings.pRxInfo->seqNumber);
    1976:	40 98       	cbi	0x08, 0	; 8
    1978:	8f e7       	ldi	r24, 0x7F	; 127
    197a:	8e bd       	out	0x2e, r24	; 46
    197c:	0d b4       	in	r0, 0x2d	; 45
    197e:	07 fe       	sbrs	r0, 7
    1980:	fd cf       	rjmp	.-6      	; 0x197c <rf_polling_rx_packet+0x1d0>
    1982:	1e bc       	out	0x2e, r1	; 46
    1984:	0d b4       	in	r0, 0x2d	; 45
    1986:	07 fe       	sbrs	r0, 7
    1988:	fd cf       	rjmp	.-6      	; 0x1984 <rf_polling_rx_packet+0x1d8>
    198a:	e0 91 a4 06 	lds	r30, 0x06A4
    198e:	f0 91 a5 06 	lds	r31, 0x06A5
    1992:	8e b5       	in	r24, 0x2e	; 46
    1994:	80 83       	st	Z, r24
    1996:	40 9a       	sbi	0x08, 0	; 8

		// Receive the rest of the packet
		} else {
*/
			// Skip the destination PAN and address (that's taken care of by harware address recognition!)
		FASTSPI_READ_FIFO_GARBAGE(4);
    1998:	40 98       	cbi	0x08, 0	; 8
    199a:	8f e7       	ldi	r24, 0x7F	; 127
    199c:	8e bd       	out	0x2e, r24	; 46
    199e:	0d b4       	in	r0, 0x2d	; 45
    19a0:	07 fe       	sbrs	r0, 7
    19a2:	fd cf       	rjmp	.-6      	; 0x199e <rf_polling_rx_packet+0x1f2>
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	07 c0       	rjmp	.+14     	; 0x19b6 <rf_polling_rx_packet+0x20a>
    19a8:	1e bc       	out	0x2e, r1	; 46
    19aa:	0d b4       	in	r0, 0x2d	; 45
    19ac:	07 fe       	sbrs	r0, 7
    19ae:	fd cf       	rjmp	.-6      	; 0x19aa <rf_polling_rx_packet+0x1fe>
    19b0:	8f 5f       	subi	r24, 0xFF	; 255
    19b2:	84 30       	cpi	r24, 0x04	; 4
    19b4:	11 f0       	breq	.+4      	; 0x19ba <rf_polling_rx_packet+0x20e>
    19b6:	31 99       	sbic	0x06, 1	; 6
    19b8:	f7 cf       	rjmp	.-18     	; 0x19a8 <rf_polling_rx_packet+0x1fc>
    19ba:	40 9a       	sbi	0x08, 0	; 8

			// Read the source address
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &rfSettings.pRxInfo->srcAddr, 2);
    19bc:	40 98       	cbi	0x08, 0	; 8
    19be:	8f e7       	ldi	r24, 0x7F	; 127
    19c0:	8e bd       	out	0x2e, r24	; 46
    19c2:	0d b4       	in	r0, 0x2d	; 45
    19c4:	07 fe       	sbrs	r0, 7
    19c6:	fd cf       	rjmp	.-6      	; 0x19c2 <rf_polling_rx_packet+0x216>
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	1e bc       	out	0x2e, r1	; 46
    19ce:	0d b4       	in	r0, 0x2d	; 45
    19d0:	07 fe       	sbrs	r0, 7
    19d2:	fd cf       	rjmp	.-6      	; 0x19ce <rf_polling_rx_packet+0x222>
    19d4:	e0 91 a4 06 	lds	r30, 0x06A4
    19d8:	f0 91 a5 06 	lds	r31, 0x06A5
    19dc:	e2 0f       	add	r30, r18
    19de:	f3 1f       	adc	r31, r19
    19e0:	8e b5       	in	r24, 0x2e	; 46
    19e2:	81 83       	std	Z+1, r24	; 0x01
    19e4:	2f 5f       	subi	r18, 0xFF	; 255
    19e6:	3f 4f       	sbci	r19, 0xFF	; 255
    19e8:	22 30       	cpi	r18, 0x02	; 2
    19ea:	31 05       	cpc	r19, r1
    19ec:	79 f7       	brne	.-34     	; 0x19cc <rf_polling_rx_packet+0x220>
    19ee:	40 9a       	sbi	0x08, 0	; 8

		        if(frameControlField & RF_SEC_BM)
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	9a 81       	ldd	r25, Y+2	; 0x02
    19f4:	83 ff       	sbrs	r24, 3
    19f6:	56 c0       	rjmp	.+172    	; 0x1aa4 <rf_polling_rx_packet+0x2f8>
			{
				uint8_t n;
				// READ rx_ctr and set it
				FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &rx_ctr, 4);
    19f8:	40 98       	cbi	0x08, 0	; 8
    19fa:	8f e7       	ldi	r24, 0x7F	; 127
    19fc:	8e bd       	out	0x2e, r24	; 46
    19fe:	0d b4       	in	r0, 0x2d	; 45
    1a00:	07 fe       	sbrs	r0, 7
    1a02:	fd cf       	rjmp	.-6      	; 0x19fe <rf_polling_rx_packet+0x252>
    1a04:	eb e9       	ldi	r30, 0x9B	; 155
    1a06:	f6 e0       	ldi	r31, 0x06	; 6
    1a08:	1e bc       	out	0x2e, r1	; 46
    1a0a:	0d b4       	in	r0, 0x2d	; 45
    1a0c:	07 fe       	sbrs	r0, 7
    1a0e:	fd cf       	rjmp	.-6      	; 0x1a0a <rf_polling_rx_packet+0x25e>
    1a10:	8e b5       	in	r24, 0x2e	; 46
    1a12:	81 93       	st	Z+, r24
    1a14:	86 e0       	ldi	r24, 0x06	; 6
    1a16:	ef 39       	cpi	r30, 0x9F	; 159
    1a18:	f8 07       	cpc	r31, r24
    1a1a:	b1 f7       	brne	.-20     	; 0x1a08 <rf_polling_rx_packet+0x25c>
    1a1c:	40 9a       	sbi	0x08, 0	; 8
				FASTSPI_WRITE_RAM(&rx_ctr[0],(CC2420RAM_RXNONCE+9),2,n); 
    1a1e:	40 98       	cbi	0x08, 0	; 8
    1a20:	89 e9       	ldi	r24, 0x99	; 153
    1a22:	8e bd       	out	0x2e, r24	; 46
    1a24:	0d b4       	in	r0, 0x2d	; 45
    1a26:	07 fe       	sbrs	r0, 7
    1a28:	fd cf       	rjmp	.-6      	; 0x1a24 <rf_polling_rx_packet+0x278>
    1a2a:	80 e8       	ldi	r24, 0x80	; 128
    1a2c:	8e bd       	out	0x2e, r24	; 46
    1a2e:	0d b4       	in	r0, 0x2d	; 45
    1a30:	07 fe       	sbrs	r0, 7
    1a32:	fd cf       	rjmp	.-6      	; 0x1a2e <rf_polling_rx_packet+0x282>
    1a34:	92 e0       	ldi	r25, 0x02	; 2
    1a36:	91 50       	subi	r25, 0x01	; 1
    1a38:	e9 2f       	mov	r30, r25
    1a3a:	ff 27       	eor	r31, r31
    1a3c:	e5 56       	subi	r30, 0x65	; 101
    1a3e:	f9 4f       	sbci	r31, 0xF9	; 249
    1a40:	80 81       	ld	r24, Z
    1a42:	8e bd       	out	0x2e, r24	; 46
    1a44:	0d b4       	in	r0, 0x2d	; 45
    1a46:	07 fe       	sbrs	r0, 7
    1a48:	fd cf       	rjmp	.-6      	; 0x1a44 <rf_polling_rx_packet+0x298>
    1a4a:	99 23       	and	r25, r25
    1a4c:	a1 f7       	brne	.-24     	; 0x1a36 <rf_polling_rx_packet+0x28a>
    1a4e:	40 9a       	sbi	0x08, 0	; 8
				FASTSPI_WRITE_RAM(&rx_ctr[2],(CC2420RAM_RXNONCE+11),2,n); 
    1a50:	40 98       	cbi	0x08, 0	; 8
    1a52:	8b e9       	ldi	r24, 0x9B	; 155
    1a54:	8e bd       	out	0x2e, r24	; 46
    1a56:	0d b4       	in	r0, 0x2d	; 45
    1a58:	07 fe       	sbrs	r0, 7
    1a5a:	fd cf       	rjmp	.-6      	; 0x1a56 <rf_polling_rx_packet+0x2aa>
    1a5c:	80 e8       	ldi	r24, 0x80	; 128
    1a5e:	8e bd       	out	0x2e, r24	; 46
    1a60:	0d b4       	in	r0, 0x2d	; 45
    1a62:	07 fe       	sbrs	r0, 7
    1a64:	fd cf       	rjmp	.-6      	; 0x1a60 <rf_polling_rx_packet+0x2b4>
    1a66:	92 e0       	ldi	r25, 0x02	; 2
    1a68:	91 50       	subi	r25, 0x01	; 1
    1a6a:	e9 2f       	mov	r30, r25
    1a6c:	ff 27       	eor	r31, r31
    1a6e:	e3 56       	subi	r30, 0x63	; 99
    1a70:	f9 4f       	sbci	r31, 0xF9	; 249
    1a72:	80 81       	ld	r24, Z
    1a74:	8e bd       	out	0x2e, r24	; 46
    1a76:	0d b4       	in	r0, 0x2d	; 45
    1a78:	07 fe       	sbrs	r0, 7
    1a7a:	fd cf       	rjmp	.-6      	; 0x1a76 <rf_polling_rx_packet+0x2ca>
    1a7c:	99 23       	and	r25, r25
    1a7e:	a1 f7       	brne	.-24     	; 0x1a68 <rf_polling_rx_packet+0x2bc>
    1a80:	40 9a       	sbi	0x08, 0	; 8
				FASTSPI_STROBE(CC2420_SRXDEC);  // if packet is encrypted then decrypt 
    1a82:	40 98       	cbi	0x08, 0	; 8
    1a84:	8c e0       	ldi	r24, 0x0C	; 12
    1a86:	8e bd       	out	0x2e, r24	; 46
    1a88:	0d b4       	in	r0, 0x2d	; 45
    1a8a:	07 fe       	sbrs	r0, 7
    1a8c:	fd cf       	rjmp	.-6      	; 0x1a88 <rf_polling_rx_packet+0x2dc>
    1a8e:	40 9a       	sbi	0x08, 0	; 8
				last_pkt_encrypted=1;
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	80 93 b0 06 	sts	0x06B0, r24
        			rfSettings.pRxInfo->length -= 4;
    1a96:	e0 91 a4 06 	lds	r30, 0x06A4
    1a9a:	f0 91 a5 06 	lds	r31, 0x06A5
    1a9e:	83 81       	ldd	r24, Z+3	; 0x03
    1aa0:	84 50       	subi	r24, 0x04	; 4
    1aa2:	83 83       	std	Z+3, r24	; 0x03
			}
	
			// Read the packet payload
			FASTSPI_READ_FIFO_NO_WAIT(rfSettings.pRxInfo->pPayload, rfSettings.pRxInfo->length);
    1aa4:	40 98       	cbi	0x08, 0	; 8
    1aa6:	8f e7       	ldi	r24, 0x7F	; 127
    1aa8:	8e bd       	out	0x2e, r24	; 46
    1aaa:	0d b4       	in	r0, 0x2d	; 45
    1aac:	07 fe       	sbrs	r0, 7
    1aae:	fd cf       	rjmp	.-6      	; 0x1aaa <rf_polling_rx_packet+0x2fe>
    1ab0:	40 e0       	ldi	r20, 0x00	; 0
    1ab2:	50 e0       	ldi	r21, 0x00	; 0
    1ab4:	11 c0       	rjmp	.+34     	; 0x1ad8 <rf_polling_rx_packet+0x32c>
    1ab6:	1e bc       	out	0x2e, r1	; 46
    1ab8:	0d b4       	in	r0, 0x2d	; 45
    1aba:	07 fe       	sbrs	r0, 7
    1abc:	fd cf       	rjmp	.-6      	; 0x1ab8 <rf_polling_rx_packet+0x30c>
    1abe:	e0 91 a4 06 	lds	r30, 0x06A4
    1ac2:	f0 91 a5 06 	lds	r31, 0x06A5
    1ac6:	05 80       	ldd	r0, Z+5	; 0x05
    1ac8:	f6 81       	ldd	r31, Z+6	; 0x06
    1aca:	e0 2d       	mov	r30, r0
    1acc:	e6 0f       	add	r30, r22
    1ace:	f1 1d       	adc	r31, r1
    1ad0:	8e b5       	in	r24, 0x2e	; 46
    1ad2:	80 83       	st	Z, r24
    1ad4:	4f 5f       	subi	r20, 0xFF	; 255
    1ad6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad8:	64 2f       	mov	r22, r20
    1ada:	e0 91 a4 06 	lds	r30, 0x06A4
    1ade:	f0 91 a5 06 	lds	r31, 0x06A5
    1ae2:	24 2f       	mov	r18, r20
    1ae4:	33 27       	eor	r19, r19
    1ae6:	83 81       	ldd	r24, Z+3	; 0x03
    1ae8:	99 27       	eor	r25, r25
    1aea:	87 fd       	sbrc	r24, 7
    1aec:	90 95       	com	r25
    1aee:	28 17       	cp	r18, r24
    1af0:	39 07       	cpc	r19, r25
    1af2:	0c f3       	brlt	.-62     	; 0x1ab6 <rf_polling_rx_packet+0x30a>
    1af4:	40 9a       	sbi	0x08, 0	; 8
			FASTSPI_READ_FIFO_NO_WAIT(&rx_checksum, 1 );
    1af6:	40 98       	cbi	0x08, 0	; 8
    1af8:	8f e7       	ldi	r24, 0x7F	; 127
    1afa:	8e bd       	out	0x2e, r24	; 46
    1afc:	0d b4       	in	r0, 0x2d	; 45
    1afe:	07 fc       	sbrc	r0, 7
    1b00:	0a c0       	rjmp	.+20     	; 0x1b16 <rf_polling_rx_packet+0x36a>
    1b02:	fc cf       	rjmp	.-8      	; 0x1afc <rf_polling_rx_packet+0x350>
    1b04:	0d b4       	in	r0, 0x2d	; 45
    1b06:	07 fe       	sbrs	r0, 7
    1b08:	fd cf       	rjmp	.-6      	; 0x1b04 <rf_polling_rx_packet+0x358>
    1b0a:	5e b5       	in	r21, 0x2e	; 46
    1b0c:	40 9a       	sbi	0x08, 0	; 8

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
    1b0e:	40 98       	cbi	0x08, 0	; 8
    1b10:	8f e7       	ldi	r24, 0x7F	; 127
    1b12:	8e bd       	out	0x2e, r24	; 46
    1b14:	02 c0       	rjmp	.+4      	; 0x1b1a <rf_polling_rx_packet+0x36e>
        			rfSettings.pRxInfo->length -= 4;
			}
	
			// Read the packet payload
			FASTSPI_READ_FIFO_NO_WAIT(rfSettings.pRxInfo->pPayload, rfSettings.pRxInfo->length);
			FASTSPI_READ_FIFO_NO_WAIT(&rx_checksum, 1 );
    1b16:	1e bc       	out	0x2e, r1	; 46
    1b18:	f5 cf       	rjmp	.-22     	; 0x1b04 <rf_polling_rx_packet+0x358>

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
    1b1a:	0d b4       	in	r0, 0x2d	; 45
    1b1c:	07 fe       	sbrs	r0, 7
    1b1e:	fd cf       	rjmp	.-6      	; 0x1b1a <rf_polling_rx_packet+0x36e>
    1b20:	fe 01       	movw	r30, r28
    1b22:	33 96       	adiw	r30, 0x03	; 3
    1b24:	9e 01       	movw	r18, r28
    1b26:	2b 5f       	subi	r18, 0xFB	; 251
    1b28:	3f 4f       	sbci	r19, 0xFF	; 255
    1b2a:	1e bc       	out	0x2e, r1	; 46
    1b2c:	0d b4       	in	r0, 0x2d	; 45
    1b2e:	07 fe       	sbrs	r0, 7
    1b30:	fd cf       	rjmp	.-6      	; 0x1b2c <rf_polling_rx_packet+0x380>
    1b32:	8e b5       	in	r24, 0x2e	; 46
    1b34:	81 93       	st	Z+, r24
    1b36:	e2 17       	cp	r30, r18
    1b38:	f3 07       	cpc	r31, r19
    1b3a:	b9 f7       	brne	.-18     	; 0x1b2a <rf_polling_rx_packet+0x37e>
    1b3c:	40 9a       	sbi	0x08, 0	; 8
			rfSettings.pRxInfo->rssi = pFooter[0];
    1b3e:	e0 91 a4 06 	lds	r30, 0x06A4
    1b42:	f0 91 a5 06 	lds	r31, 0x06A5
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	80 87       	std	Z+8, r24	; 0x08
    1b4a:	40 e0       	ldi	r20, 0x00	; 0
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	0a c0       	rjmp	.+20     	; 0x1b66 <rf_polling_rx_packet+0x3ba>
			checksum=0;	
			for(i=0; i<rfSettings.pRxInfo->length; i++ )
			{
				checksum+=rfSettings.pRxInfo->pPayload[i];
    1b52:	e0 91 a4 06 	lds	r30, 0x06A4
    1b56:	f0 91 a5 06 	lds	r31, 0x06A5
    1b5a:	85 81       	ldd	r24, Z+5	; 0x05
    1b5c:	96 81       	ldd	r25, Z+6	; 0x06
    1b5e:	a8 0f       	add	r26, r24
    1b60:	b9 1f       	adc	r27, r25
    1b62:	8c 91       	ld	r24, X
    1b64:	48 0f       	add	r20, r24
    1b66:	82 2f       	mov	r24, r18

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
			rfSettings.pRxInfo->rssi = pFooter[0];
			checksum=0;	
			for(i=0; i<rfSettings.pRxInfo->length; i++ )
    1b68:	e0 91 a4 06 	lds	r30, 0x06A4
    1b6c:	f0 91 a5 06 	lds	r31, 0x06A5
    1b70:	2f 5f       	subi	r18, 0xFF	; 255
    1b72:	3f 4f       	sbci	r19, 0xFF	; 255
    1b74:	a8 2f       	mov	r26, r24
    1b76:	bb 27       	eor	r27, r27
    1b78:	83 81       	ldd	r24, Z+3	; 0x03
    1b7a:	99 27       	eor	r25, r25
    1b7c:	87 fd       	sbrc	r24, 7
    1b7e:	90 95       	com	r25
    1b80:	a8 17       	cp	r26, r24
    1b82:	b9 07       	cpc	r27, r25
    1b84:	34 f3       	brlt	.-52     	; 0x1b52 <rf_polling_rx_packet+0x3a6>
			{
				checksum+=rfSettings.pRxInfo->pPayload[i];
				//printf( "%d ", rfSettings.pRxInfo->pPayload[i]);
			}

			if(checksum!=rx_checksum) {
    1b86:	45 17       	cp	r20, r21
    1b88:	19 f1       	breq	.+70     	; 0x1bd0 <rf_polling_rx_packet+0x424>
				//printf( "Checksum failed %d %d\r",rx_checksum, checksum );
	    			// always read 1 byte before flush (data sheet pg 62)
	   			FASTSPI_READ_FIFO_BYTE(tmp);  
    1b8a:	40 98       	cbi	0x08, 0	; 8
    1b8c:	8f e7       	ldi	r24, 0x7F	; 127
    1b8e:	8e bd       	out	0x2e, r24	; 46
    1b90:	0d b4       	in	r0, 0x2d	; 45
    1b92:	07 fe       	sbrs	r0, 7
    1b94:	fd cf       	rjmp	.-6      	; 0x1b90 <rf_polling_rx_packet+0x3e4>
    1b96:	1e bc       	out	0x2e, r1	; 46
    1b98:	0d b4       	in	r0, 0x2d	; 45
    1b9a:	07 fe       	sbrs	r0, 7
    1b9c:	fd cf       	rjmp	.-6      	; 0x1b98 <rf_polling_rx_packet+0x3ec>
    1b9e:	8e b5       	in	r24, 0x2e	; 46
    1ba0:	40 9a       	sbi	0x08, 0	; 8
	    			FASTSPI_STROBE(CC2420_SFLUSHRX);
    1ba2:	40 98       	cbi	0x08, 0	; 8
    1ba4:	88 e0       	ldi	r24, 0x08	; 8
    1ba6:	8e bd       	out	0x2e, r24	; 46
    1ba8:	0d b4       	in	r0, 0x2d	; 45
    1baa:	07 fe       	sbrs	r0, 7
    1bac:	fd cf       	rjmp	.-6      	; 0x1ba8 <rf_polling_rx_packet+0x3fc>
    1bae:	40 9a       	sbi	0x08, 0	; 8
	    			FASTSPI_STROBE(CC2420_SFLUSHRX);
    1bb0:	40 98       	cbi	0x08, 0	; 8
    1bb2:	88 e0       	ldi	r24, 0x08	; 8
    1bb4:	8e bd       	out	0x2e, r24	; 46
    1bb6:	0d b4       	in	r0, 0x2d	; 45
    1bb8:	07 fe       	sbrs	r0, 7
    1bba:	fd cf       	rjmp	.-6      	; 0x1bb6 <rf_polling_rx_packet+0x40a>
    1bbc:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    			nrk_sem_post(radio_sem);
    1bbe:	80 91 9f 06 	lds	r24, 0x069F
    1bc2:	90 91 a0 06 	lds	r25, 0x06A0
    1bc6:	0e 94 a7 20 	call	0x414e	; 0x414e <nrk_sem_post>
    1bca:	8c ef       	ldi	r24, 0xFC	; 252
    1bcc:	9f ef       	ldi	r25, 0xFF	; 255
    1bce:	3c c0       	rjmp	.+120    	; 0x1c48 <rf_polling_rx_packet+0x49c>
#endif
				return -4;
			}	
			if (pFooter[1] & RF_CRC_OK_BM) {
    1bd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd2:	87 ff       	sbrs	r24, 7
    1bd4:	0e c0       	rjmp	.+28     	; 0x1bf2 <rf_polling_rx_packet+0x446>
				//rfSettings.pRxInfo = rf_rx_callback(rfSettings.pRxInfo);
				rx_ready++;
    1bd6:	80 91 b5 06 	lds	r24, 0x06B5
    1bda:	8f 5f       	subi	r24, 0xFF	; 255
    1bdc:	80 93 b5 06 	sts	0x06B5, r24
#ifdef RADIO_PRIORITY_CEILING
	    			nrk_sem_post(radio_sem);
    1be0:	80 91 9f 06 	lds	r24, 0x069F
    1be4:	90 91 a0 06 	lds	r25, 0x06A0
    1be8:	0e 94 a7 20 	call	0x414e	; 0x414e <nrk_sem_post>
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	2b c0       	rjmp	.+86     	; 0x1c48 <rf_polling_rx_packet+0x49c>
#endif
				return 1;
			} else
	    		{
	    		// always read 1 byte before flush (data sheet pg 62)
	   		FASTSPI_READ_FIFO_BYTE(tmp);  
    1bf2:	40 98       	cbi	0x08, 0	; 8
    1bf4:	8f e7       	ldi	r24, 0x7F	; 127
    1bf6:	8e bd       	out	0x2e, r24	; 46
    1bf8:	0d b4       	in	r0, 0x2d	; 45
    1bfa:	07 fe       	sbrs	r0, 7
    1bfc:	fd cf       	rjmp	.-6      	; 0x1bf8 <rf_polling_rx_packet+0x44c>
    1bfe:	1e bc       	out	0x2e, r1	; 46
    1c00:	0d b4       	in	r0, 0x2d	; 45
    1c02:	07 fe       	sbrs	r0, 7
    1c04:	fd cf       	rjmp	.-6      	; 0x1c00 <rf_polling_rx_packet+0x454>
    1c06:	8e b5       	in	r24, 0x2e	; 46
    1c08:	40 9a       	sbi	0x08, 0	; 8
			FASTSPI_STROBE(CC2420_SFLUSHRX);
    1c0a:	40 98       	cbi	0x08, 0	; 8
    1c0c:	88 e0       	ldi	r24, 0x08	; 8
    1c0e:	8e bd       	out	0x2e, r24	; 46
    1c10:	0d b4       	in	r0, 0x2d	; 45
    1c12:	07 fe       	sbrs	r0, 7
    1c14:	fd cf       	rjmp	.-6      	; 0x1c10 <rf_polling_rx_packet+0x464>
    1c16:	40 9a       	sbi	0x08, 0	; 8
	    		FASTSPI_STROBE(CC2420_SFLUSHRX);
    1c18:	40 98       	cbi	0x08, 0	; 8
    1c1a:	88 e0       	ldi	r24, 0x08	; 8
    1c1c:	8e bd       	out	0x2e, r24	; 46
    1c1e:	0d b4       	in	r0, 0x2d	; 45
    1c20:	07 fe       	sbrs	r0, 7
    1c22:	fd cf       	rjmp	.-6      	; 0x1c1e <rf_polling_rx_packet+0x472>
    1c24:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    		nrk_sem_post(radio_sem);
    1c26:	80 91 9f 06 	lds	r24, 0x069F
    1c2a:	90 91 a0 06 	lds	r25, 0x06A0
    1c2e:	0e 94 a7 20 	call	0x414e	; 0x414e <nrk_sem_post>
    1c32:	8b ef       	ldi	r24, 0xFB	; 251
    1c34:	9f ef       	ldi	r25, 0xFF	; 255
    1c36:	08 c0       	rjmp	.+16     	; 0x1c48 <rf_polling_rx_packet+0x49c>
	}


    }
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    1c38:	80 91 9f 06 	lds	r24, 0x069F
    1c3c:	90 91 a0 06 	lds	r25, 0x06A0
    1c40:	0e 94 a7 20 	call	0x414e	; 0x414e <nrk_sem_post>
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	24 96       	adiw	r28, 0x04	; 4
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	de bf       	out	0x3e, r29	; 62
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	cd bf       	out	0x3d, r28	; 61
    1c54:	df 91       	pop	r29
    1c56:	cf 91       	pop	r28
    1c58:	08 95       	ret

00001c5a <rf_rx_off>:
//  DESCRIPTION:
//      Disables the CC2420 receiver and the FIFOP interrupt.
//-------------------------------------------------------------------------------------------------------
void rf_rx_off(void) {
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    1c5a:	80 91 9f 06 	lds	r24, 0x069F
    1c5e:	90 91 a0 06 	lds	r25, 0x06A0
    1c62:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <nrk_sem_pend>
#endif
	// XXX
    	//SET_VREG_INACTIVE();	
	rfSettings.receiveOn = FALSE;
    1c66:	10 92 ac 06 	sts	0x06AC, r1
	FASTSPI_STROBE(CC2420_SRFOFF);
    1c6a:	40 98       	cbi	0x08, 0	; 8
    1c6c:	86 e0       	ldi	r24, 0x06	; 6
    1c6e:	8e bd       	out	0x2e, r24	; 46
    1c70:	0d b4       	in	r0, 0x2d	; 45
    1c72:	07 fe       	sbrs	r0, 7
    1c74:	fd cf       	rjmp	.-6      	; 0x1c70 <rf_rx_off+0x16>
    1c76:	40 9a       	sbi	0x08, 0	; 8
#ifdef CC2420_OSC_OPT
	FASTSPI_STROBE(CC2420_SXOSCOFF);
#endif
	rx_ready=0;
    1c78:	10 92 b5 06 	sts	0x06B5, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    1c7c:	80 91 9f 06 	lds	r24, 0x069F
    1c80:	90 91 a0 06 	lds	r25, 0x06A0
    1c84:	0e 94 a7 20 	call	0x414e	; 0x414e <nrk_sem_post>
    1c88:	08 95       	ret

00001c8a <rf_polling_rx_on>:
    //	ENABLE_FIFOP_INT();
} // rf_rx_on() 

void rf_polling_rx_on(void) {
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    1c8a:	80 91 9f 06 	lds	r24, 0x069F
    1c8e:	90 91 a0 06 	lds	r25, 0x06A0
    1c92:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <nrk_sem_pend>
#endif
    	rfSettings.receiveOn = TRUE;
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	80 93 ac 06 	sts	0x06AC, r24
#ifdef CC2420_OSC_OPT
	FASTSPI_STROBE(CC2420_SXOSCON);
	nrk_spin_wait_us(OSC_STARTUP_DELAY);
#endif
	FASTSPI_STROBE(CC2420_SRXON);
    1c9c:	40 98       	cbi	0x08, 0	; 8
    1c9e:	83 e0       	ldi	r24, 0x03	; 3
    1ca0:	8e bd       	out	0x2e, r24	; 46
    1ca2:	0d b4       	in	r0, 0x2d	; 45
    1ca4:	07 fe       	sbrs	r0, 7
    1ca6:	fd cf       	rjmp	.-6      	; 0x1ca2 <rf_polling_rx_on+0x18>
    1ca8:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    1caa:	40 98       	cbi	0x08, 0	; 8
    1cac:	88 e0       	ldi	r24, 0x08	; 8
    1cae:	8e bd       	out	0x2e, r24	; 46
    1cb0:	0d b4       	in	r0, 0x2d	; 45
    1cb2:	07 fe       	sbrs	r0, 7
    1cb4:	fd cf       	rjmp	.-6      	; 0x1cb0 <rf_polling_rx_on+0x26>
    1cb6:	40 9a       	sbi	0x08, 0	; 8
	rx_ready=0;
    1cb8:	10 92 b5 06 	sts	0x06B5, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    1cbc:	80 91 9f 06 	lds	r24, 0x069F
    1cc0:	90 91 a0 06 	lds	r25, 0x06A0
    1cc4:	0e 94 a7 20 	call	0x414e	; 0x414e <nrk_sem_post>
    1cc8:	08 95       	ret

00001cca <rf_rx_on>:
//      Enables the CC2420 receiver and the FIFOP interrupt. When a packet is received through this
//      interrupt, it will call rf_rx_callback(...), which must be defined by the application
//-------------------------------------------------------------------------------------------------------
void rf_rx_on(void) {
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    1cca:	80 91 9f 06 	lds	r24, 0x069F
    1cce:	90 91 a0 06 	lds	r25, 0x06A0
    1cd2:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <nrk_sem_pend>
#endif
    	rfSettings.receiveOn = TRUE;
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	80 93 ac 06 	sts	0x06AC, r24

#ifdef CC2420_OSC_OPT
	FASTSPI_STROBE(CC2420_SXOSCON);
	nrk_spin_wait_us(OSC_STARTUP_DELAY);
#endif
	FASTSPI_STROBE(CC2420_SRXON);
    1cdc:	40 98       	cbi	0x08, 0	; 8
    1cde:	83 e0       	ldi	r24, 0x03	; 3
    1ce0:	8e bd       	out	0x2e, r24	; 46
    1ce2:	0d b4       	in	r0, 0x2d	; 45
    1ce4:	07 fe       	sbrs	r0, 7
    1ce6:	fd cf       	rjmp	.-6      	; 0x1ce2 <rf_rx_on+0x18>
    1ce8:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    1cea:	40 98       	cbi	0x08, 0	; 8
    1cec:	88 e0       	ldi	r24, 0x08	; 8
    1cee:	8e bd       	out	0x2e, r24	; 46
    1cf0:	0d b4       	in	r0, 0x2d	; 45
    1cf2:	07 fe       	sbrs	r0, 7
    1cf4:	fd cf       	rjmp	.-6      	; 0x1cf0 <rf_rx_on+0x26>
    1cf6:	40 9a       	sbi	0x08, 0	; 8
	rx_ready=0;
    1cf8:	10 92 b5 06 	sts	0x06B5, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    1cfc:	80 91 9f 06 	lds	r24, 0x069F
    1d00:	90 91 a0 06 	lds	r25, 0x06A0
    1d04:	0e 94 a7 20 	call	0x414e	; 0x414e <nrk_sem_post>
    1d08:	08 95       	ret

00001d0a <rf_tx_power>:
{
return radio_sem;
}

void rf_tx_power(uint8_t pwr)
{
    1d0a:	1f 93       	push	r17
    1d0c:	18 2f       	mov	r17, r24
uint16_t tmp;
    //tmp=0x5070;
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    1d0e:	80 91 9f 06 	lds	r24, 0x069F
    1d12:	90 91 a0 06 	lds	r25, 0x06A0
    1d16:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <nrk_sem_pend>
#endif
    tmp=0xA0E0;
    tmp=tmp | (pwr&0x1F);  
    1d1a:	21 2f       	mov	r18, r17
    1d1c:	33 27       	eor	r19, r19
    1d1e:	2f 71       	andi	r18, 0x1F	; 31
    1d20:	30 70       	andi	r19, 0x00	; 0
    1d22:	20 6e       	ori	r18, 0xE0	; 224
    1d24:	30 6a       	ori	r19, 0xA0	; 160
    FASTSPI_SETREG(CC2420_TXCTRL, tmp);   // Set the FIFOP threshold to maximum
    1d26:	40 98       	cbi	0x08, 0	; 8
    1d28:	85 e1       	ldi	r24, 0x15	; 21
    1d2a:	8e bd       	out	0x2e, r24	; 46
    1d2c:	0d b4       	in	r0, 0x2d	; 45
    1d2e:	07 fe       	sbrs	r0, 7
    1d30:	fd cf       	rjmp	.-6      	; 0x1d2c <rf_tx_power+0x22>
    1d32:	83 2f       	mov	r24, r19
    1d34:	99 27       	eor	r25, r25
    1d36:	8e bd       	out	0x2e, r24	; 46
    1d38:	0d b4       	in	r0, 0x2d	; 45
    1d3a:	07 fe       	sbrs	r0, 7
    1d3c:	fd cf       	rjmp	.-6      	; 0x1d38 <rf_tx_power+0x2e>
    1d3e:	2e bd       	out	0x2e, r18	; 46
    1d40:	0d b4       	in	r0, 0x2d	; 45
    1d42:	07 fe       	sbrs	r0, 7
    1d44:	fd cf       	rjmp	.-6      	; 0x1d40 <rf_tx_power+0x36>
    1d46:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    1d48:	80 91 9f 06 	lds	r24, 0x069F
    1d4c:	90 91 a0 06 	lds	r25, 0x06A0
    1d50:	0e 94 a7 20 	call	0x414e	; 0x414e <nrk_sem_post>
    1d54:	1f 91       	pop	r17
    1d56:	08 95       	ret

00001d58 <rf_tx_packet>:
//
//  RETURN VALUE:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------
uint8_t rf_tx_packet(RF_TX_INFO *pRTI) {
    1d58:	ef 92       	push	r14
    1d5a:	ff 92       	push	r15
    1d5c:	0f 93       	push	r16
    1d5e:	1f 93       	push	r17
    1d60:	cf 93       	push	r28
    1d62:	df 93       	push	r29
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
    1d68:	22 97       	sbiw	r28, 0x02	; 2
    1d6a:	0f b6       	in	r0, 0x3f	; 63
    1d6c:	f8 94       	cli
    1d6e:	de bf       	out	0x3e, r29	; 62
    1d70:	0f be       	out	0x3f, r0	; 63
    1d72:	cd bf       	out	0x3d, r28	; 61
    1d74:	8c 01       	movw	r16, r24
    uint8_t success;
    uint8_t spiStatusByte;
   uint8_t checksum,i;
	
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    1d76:	80 91 9f 06 	lds	r24, 0x069F
    1d7a:	90 91 a0 06 	lds	r25, 0x06A0
    1d7e:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <nrk_sem_pend>

#ifdef CC2420_OSC_OPT
FASTSPI_STROBE(CC2420_SXOSCON);
	nrk_spin_wait_us(OSC_STARTUP_DELAY);
#endif
if(security_enable)
    1d82:	50 91 a1 06 	lds	r21, 0x06A1
    1d86:	55 23       	and	r21, r21
    1d88:	39 f0       	breq	.+14     	; 0x1d98 <rf_tx_packet+0x40>
    FASTSPI_STROBE(CC2420_STXENC);
    1d8a:	40 98       	cbi	0x08, 0	; 8
    1d8c:	8d e0       	ldi	r24, 0x0D	; 13
    1d8e:	8e bd       	out	0x2e, r24	; 46
    1d90:	0d b4       	in	r0, 0x2d	; 45
    1d92:	07 fe       	sbrs	r0, 7
    1d94:	fd cf       	rjmp	.-6      	; 0x1d90 <rf_tx_packet+0x38>
    1d96:	40 9a       	sbi	0x08, 0	; 8

    checksum=0;
    for(i=0; i<pRTI->length; i++ )
    1d98:	f8 01       	movw	r30, r16
    1d9a:	42 81       	ldd	r20, Z+2	; 0x02
    1d9c:	64 2f       	mov	r22, r20
    1d9e:	77 27       	eor	r23, r23
    1da0:	67 fd       	sbrc	r22, 7
    1da2:	70 95       	com	r23
    1da4:	a0 e0       	ldi	r26, 0x00	; 0
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	08 c0       	rjmp	.+16     	; 0x1dbc <rf_tx_packet+0x64>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
    1dac:	f8 01       	movw	r30, r16
    1dae:	83 81       	ldd	r24, Z+3	; 0x03
    1db0:	94 81       	ldd	r25, Z+4	; 0x04
    1db2:	e8 0e       	add	r14, r24
    1db4:	f9 1e       	adc	r15, r25
    1db6:	f7 01       	movw	r30, r14
    1db8:	80 81       	ld	r24, Z
    1dba:	a8 0f       	add	r26, r24
    1dbc:	82 2f       	mov	r24, r18
    1dbe:	2f 5f       	subi	r18, 0xFF	; 255
    1dc0:	3f 4f       	sbci	r19, 0xFF	; 255
#endif
if(security_enable)
    FASTSPI_STROBE(CC2420_STXENC);

    checksum=0;
    for(i=0; i<pRTI->length; i++ )
    1dc2:	e8 2e       	mov	r14, r24
    1dc4:	ff 24       	eor	r15, r15
    1dc6:	e6 16       	cp	r14, r22
    1dc8:	f7 06       	cpc	r15, r23
    1dca:	84 f3       	brlt	.-32     	; 0x1dac <rf_tx_packet+0x54>
    }
    // Write the packet to the TX FIFO (the FCS is appended automatically when AUTOCRC is enabled)

    // These are only the MAC AGNOSTIC parameters...
    // Slots for example are at a slighly higher later since they assume TDMA
    packetLength = pRTI->length + RF_PACKET_OVERHEAD_SIZE + CHECKSUM_OVERHEAD;
    1dcc:	94 2f       	mov	r25, r20
    1dce:	94 5f       	subi	r25, 0xF4	; 244
    if(security_enable) packetLength+=4;  // for CTR counter
    1dd0:	51 11       	cpse	r21, r1
    1dd2:	9c 5f       	subi	r25, 0xFC	; 252

   	// XXX 2 below are hacks...
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
    // Wait until the transceiver is idle
    while (FIFOP_IS_1 || SFD_IS_1);
    1dd4:	67 99       	sbic	0x0c, 7	; 12
    1dd6:	fe cf       	rjmp	.-4      	; 0x1dd4 <rf_tx_packet+0x7c>
    1dd8:	4e 99       	sbic	0x09, 6	; 9
    1dda:	fc cf       	rjmp	.-8      	; 0x1dd4 <rf_tx_packet+0x7c>
    // Turn off global interrupts to avoid interference on the SPI interface
    DISABLE_GLOBAL_INT();
    1ddc:	f8 94       	cli
	// Flush the TX FIFO just in case...
    FASTSPI_STROBE(CC2420_SFLUSHTX);
    1dde:	40 98       	cbi	0x08, 0	; 8
    1de0:	89 e0       	ldi	r24, 0x09	; 9
    1de2:	8e bd       	out	0x2e, r24	; 46
    1de4:	0d b4       	in	r0, 0x2d	; 45
    1de6:	07 fe       	sbrs	r0, 7
    1de8:	fd cf       	rjmp	.-6      	; 0x1de4 <rf_tx_packet+0x8c>
    1dea:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_STROBE(CC2420_SFLUSHTX);
    1dec:	40 98       	cbi	0x08, 0	; 8
    1dee:	89 e0       	ldi	r24, 0x09	; 9
    1df0:	8e bd       	out	0x2e, r24	; 46
    1df2:	0d b4       	in	r0, 0x2d	; 45
    1df4:	07 fe       	sbrs	r0, 7
    1df6:	fd cf       	rjmp	.-6      	; 0x1df2 <rf_tx_packet+0x9a>
    1df8:	40 9a       	sbi	0x08, 0	; 8
		FASTSPI_STROBE(CC2420_STXONCCA);
		FASTSPI_UPD_STATUS(spiStatusByte);
		halWait(100);
    } while (!(spiStatusByte & BM(CC2420_TX_ACTIVE)));
*/
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    1dfa:	40 98       	cbi	0x08, 0	; 8
    1dfc:	8e e3       	ldi	r24, 0x3E	; 62
    1dfe:	8e bd       	out	0x2e, r24	; 46
    1e00:	0d b4       	in	r0, 0x2d	; 45
    1e02:	07 fc       	sbrc	r0, 7
    1e04:	05 c0       	rjmp	.+10     	; 0x1e10 <rf_tx_packet+0xb8>
    1e06:	fc cf       	rjmp	.-8      	; 0x1e00 <rf_tx_packet+0xa8>
    1e08:	0d b4       	in	r0, 0x2d	; 45
    1e0a:	07 fc       	sbrc	r0, 7
    1e0c:	30 c1       	rjmp	.+608    	; 0x206e <rf_tx_packet+0x316>
    1e0e:	fc cf       	rjmp	.-8      	; 0x1e08 <rf_tx_packet+0xb0>
    1e10:	9e bd       	out	0x2e, r25	; 46
    1e12:	fa cf       	rjmp	.-12     	; 0x1e08 <rf_tx_packet+0xb0>
    frameControlField = RF_FCF_NOACK;   // default
    if(auto_ack_enable) frameControlField |= RF_ACK_BM;
    1e14:	81 e6       	ldi	r24, 0x61	; 97
    1e16:	98 e8       	ldi	r25, 0x88	; 136
    1e18:	9a 83       	std	Y+2, r25	; 0x02
    1e1a:	89 83       	std	Y+1, r24	; 0x01
    if(security_enable) frameControlField |= RF_SEC_BM;
    1e1c:	55 23       	and	r21, r21
    1e1e:	29 f0       	breq	.+10     	; 0x1e2a <rf_tx_packet+0xd2>
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	9a 81       	ldd	r25, Y+2	; 0x02
    1e24:	88 60       	ori	r24, 0x08	; 8
    1e26:	9a 83       	std	Y+2, r25	; 0x02
    1e28:	89 83       	std	Y+1, r24	; 0x01
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    1e2a:	40 98       	cbi	0x08, 0	; 8
    1e2c:	8e e3       	ldi	r24, 0x3E	; 62
    1e2e:	8e bd       	out	0x2e, r24	; 46
    1e30:	0d b4       	in	r0, 0x2d	; 45
    1e32:	07 fe       	sbrs	r0, 7
    1e34:	fd cf       	rjmp	.-6      	; 0x1e30 <rf_tx_packet+0xd8>
    1e36:	fe 01       	movw	r30, r28
    1e38:	31 96       	adiw	r30, 0x01	; 1
    1e3a:	9e 01       	movw	r18, r28
    1e3c:	2d 5f       	subi	r18, 0xFD	; 253
    1e3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e40:	80 81       	ld	r24, Z
    1e42:	8e bd       	out	0x2e, r24	; 46
    1e44:	0d b4       	in	r0, 0x2d	; 45
    1e46:	07 fe       	sbrs	r0, 7
    1e48:	fd cf       	rjmp	.-6      	; 0x1e44 <rf_tx_packet+0xec>
    1e4a:	31 96       	adiw	r30, 0x01	; 1
    1e4c:	e2 17       	cp	r30, r18
    1e4e:	f3 07       	cpc	r31, r19
    1e50:	b9 f7       	brne	.-18     	; 0x1e40 <rf_tx_packet+0xe8>
    1e52:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    1e54:	40 98       	cbi	0x08, 0	; 8
    1e56:	8e e3       	ldi	r24, 0x3E	; 62
    1e58:	8e bd       	out	0x2e, r24	; 46
    1e5a:	0d b4       	in	r0, 0x2d	; 45
    1e5c:	07 fc       	sbrc	r0, 7
    1e5e:	05 c0       	rjmp	.+10     	; 0x1e6a <rf_tx_packet+0x112>
    1e60:	fc cf       	rjmp	.-8      	; 0x1e5a <rf_tx_packet+0x102>
    1e62:	0d b4       	in	r0, 0x2d	; 45
    1e64:	07 fc       	sbrc	r0, 7
    1e66:	0e c1       	rjmp	.+540    	; 0x2084 <rf_tx_packet+0x32c>
    1e68:	fc cf       	rjmp	.-8      	; 0x1e62 <rf_tx_packet+0x10a>
    1e6a:	80 91 a6 06 	lds	r24, 0x06A6
    1e6e:	8e bd       	out	0x2e, r24	; 46
    1e70:	f8 cf       	rjmp	.-16     	; 0x1e62 <rf_tx_packet+0x10a>
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    1e72:	0d b4       	in	r0, 0x2d	; 45
    1e74:	07 fe       	sbrs	r0, 7
    1e76:	fd cf       	rjmp	.-6      	; 0x1e72 <rf_tx_packet+0x11a>
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	f9 01       	movw	r30, r18
    1e7e:	e8 55       	subi	r30, 0x58	; 88
    1e80:	f9 4f       	sbci	r31, 0xF9	; 249
    1e82:	80 81       	ld	r24, Z
    1e84:	8e bd       	out	0x2e, r24	; 46
    1e86:	0d b4       	in	r0, 0x2d	; 45
    1e88:	07 fe       	sbrs	r0, 7
    1e8a:	fd cf       	rjmp	.-6      	; 0x1e86 <rf_tx_packet+0x12e>
    1e8c:	2f 5f       	subi	r18, 0xFF	; 255
    1e8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e90:	22 30       	cpi	r18, 0x02	; 2
    1e92:	31 05       	cpc	r19, r1
    1e94:	99 f7       	brne	.-26     	; 0x1e7c <rf_tx_packet+0x124>
    1e96:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
    1e98:	40 98       	cbi	0x08, 0	; 8
    1e9a:	8e e3       	ldi	r24, 0x3E	; 62
    1e9c:	8e bd       	out	0x2e, r24	; 46
    1e9e:	0d b4       	in	r0, 0x2d	; 45
    1ea0:	07 fe       	sbrs	r0, 7
    1ea2:	fd cf       	rjmp	.-6      	; 0x1e9e <rf_tx_packet+0x146>
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	f8 01       	movw	r30, r16
    1eaa:	e2 0f       	add	r30, r18
    1eac:	f3 1f       	adc	r31, r19
    1eae:	80 81       	ld	r24, Z
    1eb0:	8e bd       	out	0x2e, r24	; 46
    1eb2:	0d b4       	in	r0, 0x2d	; 45
    1eb4:	07 fe       	sbrs	r0, 7
    1eb6:	fd cf       	rjmp	.-6      	; 0x1eb2 <rf_tx_packet+0x15a>
    1eb8:	2f 5f       	subi	r18, 0xFF	; 255
    1eba:	3f 4f       	sbci	r19, 0xFF	; 255
    1ebc:	22 30       	cpi	r18, 0x02	; 2
    1ebe:	31 05       	cpc	r19, r1
    1ec0:	99 f7       	brne	.-26     	; 0x1ea8 <rf_tx_packet+0x150>
    1ec2:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.myAddr, 2);         // Source address
    1ec4:	40 98       	cbi	0x08, 0	; 8
    1ec6:	8e e3       	ldi	r24, 0x3E	; 62
    1ec8:	8e bd       	out	0x2e, r24	; 46
    1eca:	0d b4       	in	r0, 0x2d	; 45
    1ecc:	07 fe       	sbrs	r0, 7
    1ece:	fd cf       	rjmp	.-6      	; 0x1eca <rf_tx_packet+0x172>
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	f9 01       	movw	r30, r18
    1ed6:	e6 55       	subi	r30, 0x56	; 86
    1ed8:	f9 4f       	sbci	r31, 0xF9	; 249
    1eda:	80 81       	ld	r24, Z
    1edc:	8e bd       	out	0x2e, r24	; 46
    1ede:	0d b4       	in	r0, 0x2d	; 45
    1ee0:	07 fe       	sbrs	r0, 7
    1ee2:	fd cf       	rjmp	.-6      	; 0x1ede <rf_tx_packet+0x186>
    1ee4:	2f 5f       	subi	r18, 0xFF	; 255
    1ee6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee8:	22 30       	cpi	r18, 0x02	; 2
    1eea:	31 05       	cpc	r19, r1
    1eec:	99 f7       	brne	.-26     	; 0x1ed4 <rf_tx_packet+0x17c>
    1eee:	40 9a       	sbi	0x08, 0	; 8
    if(security_enable)
    1ef0:	55 23       	and	r21, r21
    1ef2:	99 f0       	breq	.+38     	; 0x1f1a <rf_tx_packet+0x1c2>
    	FASTSPI_WRITE_FIFO((uint8_t*) &tx_ctr, 4);         // CTR counter 
    1ef4:	40 98       	cbi	0x08, 0	; 8
    1ef6:	8e e3       	ldi	r24, 0x3E	; 62
    1ef8:	8e bd       	out	0x2e, r24	; 46
    1efa:	0d b4       	in	r0, 0x2d	; 45
    1efc:	07 fe       	sbrs	r0, 7
    1efe:	fd cf       	rjmp	.-6      	; 0x1efa <rf_tx_packet+0x1a2>
    1f00:	e1 eb       	ldi	r30, 0xB1	; 177
    1f02:	f6 e0       	ldi	r31, 0x06	; 6
    1f04:	80 81       	ld	r24, Z
    1f06:	8e bd       	out	0x2e, r24	; 46
    1f08:	0d b4       	in	r0, 0x2d	; 45
    1f0a:	07 fe       	sbrs	r0, 7
    1f0c:	fd cf       	rjmp	.-6      	; 0x1f08 <rf_tx_packet+0x1b0>
    1f0e:	31 96       	adiw	r30, 0x01	; 1
    1f10:	86 e0       	ldi	r24, 0x06	; 6
    1f12:	e5 3b       	cpi	r30, 0xB5	; 181
    1f14:	f8 07       	cpc	r31, r24
    1f16:	b1 f7       	brne	.-20     	; 0x1f04 <rf_tx_packet+0x1ac>
    1f18:	40 9a       	sbi	0x08, 0	; 8
   
    FASTSPI_WRITE_FIFO((uint8_t*) pRTI->pPayload, pRTI->length);  // Payload
    1f1a:	40 98       	cbi	0x08, 0	; 8
    1f1c:	8e e3       	ldi	r24, 0x3E	; 62
    1f1e:	8e bd       	out	0x2e, r24	; 46
    1f20:	0d b4       	in	r0, 0x2d	; 45
    1f22:	07 fe       	sbrs	r0, 7
    1f24:	fd cf       	rjmp	.-6      	; 0x1f20 <rf_tx_packet+0x1c8>
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	0d c0       	rjmp	.+26     	; 0x1f46 <rf_tx_packet+0x1ee>
    1f2c:	f8 01       	movw	r30, r16
    1f2e:	83 81       	ldd	r24, Z+3	; 0x03
    1f30:	94 81       	ldd	r25, Z+4	; 0x04
    1f32:	48 0f       	add	r20, r24
    1f34:	59 1f       	adc	r21, r25
    1f36:	fa 01       	movw	r30, r20
    1f38:	80 81       	ld	r24, Z
    1f3a:	8e bd       	out	0x2e, r24	; 46
    1f3c:	0d b4       	in	r0, 0x2d	; 45
    1f3e:	07 fe       	sbrs	r0, 7
    1f40:	fd cf       	rjmp	.-6      	; 0x1f3c <rf_tx_packet+0x1e4>
    1f42:	2f 5f       	subi	r18, 0xFF	; 255
    1f44:	3f 4f       	sbci	r19, 0xFF	; 255
    1f46:	42 2f       	mov	r20, r18
    1f48:	55 27       	eor	r21, r21
    1f4a:	46 17       	cp	r20, r22
    1f4c:	57 07       	cpc	r21, r23
    1f4e:	74 f3       	brlt	.-36     	; 0x1f2c <rf_tx_packet+0x1d4>
    1f50:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &checksum, 1);         // Checksum
    1f52:	40 98       	cbi	0x08, 0	; 8
    1f54:	8e e3       	ldi	r24, 0x3E	; 62
    1f56:	8e bd       	out	0x2e, r24	; 46
    1f58:	0d b4       	in	r0, 0x2d	; 45
    1f5a:	07 fc       	sbrc	r0, 7
    1f5c:	05 c0       	rjmp	.+10     	; 0x1f68 <rf_tx_packet+0x210>
    1f5e:	fc cf       	rjmp	.-8      	; 0x1f58 <rf_tx_packet+0x200>
    1f60:	0d b4       	in	r0, 0x2d	; 45
    1f62:	07 fc       	sbrc	r0, 7
    1f64:	94 c0       	rjmp	.+296    	; 0x208e <rf_tx_packet+0x336>
    1f66:	fc cf       	rjmp	.-8      	; 0x1f60 <rf_tx_packet+0x208>
    1f68:	ae bd       	out	0x2e, r26	; 46
    1f6a:	fa cf       	rjmp	.-12     	; 0x1f60 <rf_tx_packet+0x208>

if (pRTI->cca == TRUE)
{
    uint8_t cnt;
     if (!rfSettings.receiveOn)
    1f6c:	80 91 ac 06 	lds	r24, 0x06AC
    1f70:	88 23       	and	r24, r24
    1f72:	39 f4       	brne	.+14     	; 0x1f82 <rf_tx_packet+0x22a>
	{
	  FASTSPI_STROBE (CC2420_SRXON);
    1f74:	40 98       	cbi	0x08, 0	; 8
    1f76:	83 e0       	ldi	r24, 0x03	; 3
    1f78:	8e bd       	out	0x2e, r24	; 46
    1f7a:	0d b4       	in	r0, 0x2d	; 45
    1f7c:	07 fe       	sbrs	r0, 7
    1f7e:	fd cf       	rjmp	.-6      	; 0x1f7a <rf_tx_packet+0x222>
    1f80:	40 9a       	sbi	0x08, 0	; 8
	}
      
      // Wait for the RSSI value to become valid
      do
	{
	  FASTSPI_UPD_STATUS (spiStatusByte);
    1f82:	40 98       	cbi	0x08, 0	; 8
    1f84:	1e bc       	out	0x2e, r1	; 46
    1f86:	0d b4       	in	r0, 0x2d	; 45
    1f88:	07 fe       	sbrs	r0, 7
    1f8a:	fd cf       	rjmp	.-6      	; 0x1f86 <rf_tx_packet+0x22e>
    1f8c:	8e b5       	in	r24, 0x2e	; 46
    1f8e:	40 9a       	sbi	0x08, 0	; 8
	}
      while (!(spiStatusByte & BM (CC2420_RSSI_VALID)));      
    1f90:	81 ff       	sbrs	r24, 1
    1f92:	f7 cf       	rjmp	.-18     	; 0x1f82 <rf_tx_packet+0x22a>
    1f94:	00 e0       	ldi	r16, 0x00	; 0
      // TX begins after the CCA check has passed
      cnt = 0;
      do
	{
	  FASTSPI_STROBE (CC2420_STXONCCA);
    1f96:	40 98       	cbi	0x08, 0	; 8
    1f98:	85 e0       	ldi	r24, 0x05	; 5
    1f9a:	8e bd       	out	0x2e, r24	; 46
    1f9c:	0d b4       	in	r0, 0x2d	; 45
    1f9e:	07 fe       	sbrs	r0, 7
    1fa0:	fd cf       	rjmp	.-6      	; 0x1f9c <rf_tx_packet+0x244>
    1fa2:	40 9a       	sbi	0x08, 0	; 8
	  FASTSPI_UPD_STATUS (spiStatusByte);
    1fa4:	40 98       	cbi	0x08, 0	; 8
    1fa6:	1e bc       	out	0x2e, r1	; 46
    1fa8:	0d b4       	in	r0, 0x2d	; 45
    1faa:	07 fe       	sbrs	r0, 7
    1fac:	fd cf       	rjmp	.-6      	; 0x1fa8 <rf_tx_packet+0x250>
    1fae:	1e b5       	in	r17, 0x2e	; 46
    1fb0:	40 9a       	sbi	0x08, 0	; 8
	  cnt++;
    1fb2:	0f 5f       	subi	r16, 0xFF	; 255
	  if (cnt > 100)
    1fb4:	05 36       	cpi	r16, 0x65	; 101
    1fb6:	51 f4       	brne	.+20     	; 0x1fcc <rf_tx_packet+0x274>
	    {
	      ENABLE_GLOBAL_INT ();
    1fb8:	78 94       	sei
	      nrk_sem_post(radio_sem);
    1fba:	80 91 9f 06 	lds	r24, 0x069F
    1fbe:	90 91 a0 06 	lds	r25, 0x06A0
    1fc2:	0e 94 a7 20 	call	0x414e	; 0x414e <nrk_sem_post>
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	68 c0       	rjmp	.+208    	; 0x209c <rf_tx_packet+0x344>
	      return FALSE;
	    }
	  halWait (100);
    1fcc:	84 e6       	ldi	r24, 0x64	; 100
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	0e 94 9e 19 	call	0x333c	; 0x333c <halWait>
	}
      while (!(spiStatusByte & BM (CC2420_TX_ACTIVE)));
    1fd4:	13 fd       	sbrc	r17, 3
    1fd6:	08 c0       	rjmp	.+16     	; 0x1fe8 <rf_tx_packet+0x290>
    1fd8:	de cf       	rjmp	.-68     	; 0x1f96 <rf_tx_packet+0x23e>
    }
  else
    FASTSPI_STROBE (CC2420_STXON); 
    1fda:	40 98       	cbi	0x08, 0	; 8
    1fdc:	84 e0       	ldi	r24, 0x04	; 4
    1fde:	8e bd       	out	0x2e, r24	; 46
    1fe0:	0d b4       	in	r0, 0x2d	; 45
    1fe2:	07 fe       	sbrs	r0, 7
    1fe4:	fd cf       	rjmp	.-6      	; 0x1fe0 <rf_tx_packet+0x288>
    1fe6:	40 9a       	sbi	0x08, 0	; 8

  ENABLE_GLOBAL_INT();
    1fe8:	78 94       	sei
	// Wait for the transmission to begin before exiting (makes sure that this function cannot be called
	// a second time, and thereby cancelling the first transmission (observe the FIFOP + SFD test above).
  while (!SFD_IS_1);
    1fea:	4e 9b       	sbis	0x09, 6	; 9
    1fec:	fe cf       	rjmp	.-4      	; 0x1fea <rf_tx_packet+0x292>
  success = TRUE;

	// Turn interrupts back on
//	ENABLE_GLOBAL_INT();

    while (SFD_IS_1); // wait for packet to finish
    1fee:	4e 99       	sbic	0x09, 6	; 9
    1ff0:	fe cf       	rjmp	.-4      	; 0x1fee <rf_tx_packet+0x296>

    // Wait for the acknowledge to be received, if any
    if (auto_ack_enable) {
    1ff2:	80 91 af 06 	lds	r24, 0x06AF
    1ff6:	88 23       	and	r24, r24
    1ff8:	91 f0       	breq	.+36     	; 0x201e <rf_tx_packet+0x2c6>
		//	while (SFD_IS_1);
        // We'll enter RX automatically, so just wait until we can be sure that the 
	// ack reception should have finished
        // The timeout consists of a 12-symbol turnaround time, the ack packet duration, 
	// and a small margin
        halWait((12 * RF_SYMBOL_DURATION) + (RF_ACK_DURATION) + (2 * RF_SYMBOL_DURATION) + 100);
    1ffa:	84 ea       	ldi	r24, 0xA4	; 164
    1ffc:	92 e0       	ldi	r25, 0x02	; 2
    1ffe:	0e 94 9e 19 	call	0x333c	; 0x333c <halWait>

	if(FIFO_IS_1)
    2002:	31 9b       	sbis	0x06, 1	; 6
    2004:	0e c0       	rjmp	.+28     	; 0x2022 <rf_tx_packet+0x2ca>
	{
	FASTSPI_READ_FIFO_BYTE(length);
    2006:	40 98       	cbi	0x08, 0	; 8
    2008:	8f e7       	ldi	r24, 0x7F	; 127
    200a:	8e bd       	out	0x2e, r24	; 46
    200c:	0d b4       	in	r0, 0x2d	; 45
    200e:	07 fe       	sbrs	r0, 7
    2010:	fd cf       	rjmp	.-6      	; 0x200c <rf_tx_packet+0x2b4>
    2012:	1e bc       	out	0x2e, r1	; 46
    2014:	0d b4       	in	r0, 0x2d	; 45
    2016:	07 fe       	sbrs	r0, 7
    2018:	fd cf       	rjmp	.-6      	; 0x2014 <rf_tx_packet+0x2bc>
    201a:	8e b5       	in	r24, 0x2e	; 46
    201c:	40 9a       	sbi	0x08, 0	; 8
    201e:	11 e0       	ldi	r17, 0x01	; 1
    2020:	0f c0       	rjmp	.+30     	; 0x2040 <rf_tx_packet+0x2e8>
	length &= RF_LENGTH_MASK; // Ignore MSB
	    success = TRUE;

	}else
	{
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    2022:	40 98       	cbi	0x08, 0	; 8
    2024:	88 e0       	ldi	r24, 0x08	; 8
    2026:	8e bd       	out	0x2e, r24	; 46
    2028:	0d b4       	in	r0, 0x2d	; 45
    202a:	07 fe       	sbrs	r0, 7
    202c:	fd cf       	rjmp	.-6      	; 0x2028 <rf_tx_packet+0x2d0>
    202e:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    2030:	40 98       	cbi	0x08, 0	; 8
    2032:	88 e0       	ldi	r24, 0x08	; 8
    2034:	8e bd       	out	0x2e, r24	; 46
    2036:	0d b4       	in	r0, 0x2d	; 45
    2038:	07 fe       	sbrs	r0, 7
    203a:	fd cf       	rjmp	.-6      	; 0x2036 <rf_tx_packet+0x2de>
    203c:	40 9a       	sbi	0x08, 0	; 8
    203e:	10 e0       	ldi	r17, 0x00	; 0
    }

    
	// Turn off the receiver if it should not continue to be enabled
    
    DISABLE_GLOBAL_INT();	
    2040:	f8 94       	cli
	//FASTSPI_STROBE(CC2420_SFLUSHTX);
    
#ifdef CC2420_OSC_OPT
	FASTSPI_STROBE(CC2420_SXOSCOFF);
#endif
	FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
    2042:	40 98       	cbi	0x08, 0	; 8
    2044:	86 e0       	ldi	r24, 0x06	; 6
    2046:	8e bd       	out	0x2e, r24	; 46
    2048:	0d b4       	in	r0, 0x2d	; 45
    204a:	07 fe       	sbrs	r0, 7
    204c:	fd cf       	rjmp	.-6      	; 0x2048 <rf_tx_packet+0x2f0>
    204e:	40 9a       	sbi	0x08, 0	; 8
    ENABLE_GLOBAL_INT();
    2050:	78 94       	sei

    // agr XXX hack to test time issue
    //rf_rx_on(); 

    // Increment the sequence number, and return the result
    rfSettings.txSeqNumber++;
    2052:	80 91 a6 06 	lds	r24, 0x06A6
    2056:	8f 5f       	subi	r24, 0xFF	; 255
    2058:	80 93 a6 06 	sts	0x06A6, r24
//	while (SFD_IS_1);
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    205c:	80 91 9f 06 	lds	r24, 0x069F
    2060:	90 91 a0 06 	lds	r25, 0x06A0
    2064:	0e 94 a7 20 	call	0x414e	; 0x414e <nrk_sem_post>
#endif
    return success;
    2068:	81 2f       	mov	r24, r17
    206a:	99 27       	eor	r25, r25
    206c:	17 c0       	rjmp	.+46     	; 0x209c <rf_tx_packet+0x344>
		FASTSPI_STROBE(CC2420_STXONCCA);
		FASTSPI_UPD_STATUS(spiStatusByte);
		halWait(100);
    } while (!(spiStatusByte & BM(CC2420_TX_ACTIVE)));
*/
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    206e:	40 9a       	sbi	0x08, 0	; 8
    frameControlField = RF_FCF_NOACK;   // default
    2070:	81 e4       	ldi	r24, 0x41	; 65
    2072:	98 e8       	ldi	r25, 0x88	; 136
    2074:	9a 83       	std	Y+2, r25	; 0x02
    2076:	89 83       	std	Y+1, r24	; 0x01
    if(auto_ack_enable) frameControlField |= RF_ACK_BM;
    2078:	80 91 af 06 	lds	r24, 0x06AF
    207c:	88 23       	and	r24, r24
    207e:	09 f0       	breq	.+2      	; 0x2082 <rf_tx_packet+0x32a>
    2080:	c9 ce       	rjmp	.-622    	; 0x1e14 <rf_tx_packet+0xbc>
    2082:	cc ce       	rjmp	.-616    	; 0x1e1c <rf_tx_packet+0xc4>
    if(security_enable) frameControlField |= RF_SEC_BM;
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    2084:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    2086:	40 98       	cbi	0x08, 0	; 8
    2088:	8e e3       	ldi	r24, 0x3E	; 62
    208a:	8e bd       	out	0x2e, r24	; 46
    208c:	f2 ce       	rjmp	.-540    	; 0x1e72 <rf_tx_packet+0x11a>
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.myAddr, 2);         // Source address
    if(security_enable)
    	FASTSPI_WRITE_FIFO((uint8_t*) &tx_ctr, 4);         // CTR counter 
   
    FASTSPI_WRITE_FIFO((uint8_t*) pRTI->pPayload, pRTI->length);  // Payload
    FASTSPI_WRITE_FIFO((uint8_t*) &checksum, 1);         // Checksum
    208e:	40 9a       	sbi	0x08, 0	; 8

if (pRTI->cca == TRUE)
    2090:	f8 01       	movw	r30, r16
    2092:	85 81       	ldd	r24, Z+5	; 0x05
    2094:	88 23       	and	r24, r24
    2096:	09 f0       	breq	.+2      	; 0x209a <rf_tx_packet+0x342>
    2098:	69 cf       	rjmp	.-302    	; 0x1f6c <rf_tx_packet+0x214>
    209a:	9f cf       	rjmp	.-194    	; 0x1fda <rf_tx_packet+0x282>
    209c:	22 96       	adiw	r28, 0x02	; 2
    209e:	0f b6       	in	r0, 0x3f	; 63
    20a0:	f8 94       	cli
    20a2:	de bf       	out	0x3e, r29	; 62
    20a4:	0f be       	out	0x3f, r0	; 63
    20a6:	cd bf       	out	0x3d, r28	; 61
    20a8:	df 91       	pop	r29
    20aa:	cf 91       	pop	r28
    20ac:	1f 91       	pop	r17
    20ae:	0f 91       	pop	r16
    20b0:	ff 90       	pop	r15
    20b2:	ef 90       	pop	r14
    20b4:	08 95       	ret

000020b6 <rf_tx_tdma_packet>:
/**************************************************************************
This function is the same as normal TX, only it waits until the last
second to send the duty out with the high speed timer.  And by duty, I mean
the packet BIATCH...
**************************************************************************/
uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
    20b6:	bf 92       	push	r11
    20b8:	cf 92       	push	r12
    20ba:	df 92       	push	r13
    20bc:	ef 92       	push	r14
    20be:	ff 92       	push	r15
    20c0:	0f 93       	push	r16
    20c2:	1f 93       	push	r17
    20c4:	cf 93       	push	r28
    20c6:	df 93       	push	r29
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
    20cc:	22 97       	sbiw	r28, 0x02	; 2
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	f8 94       	cli
    20d2:	de bf       	out	0x3e, r29	; 62
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	cd bf       	out	0x3d, r28	; 61
    20d8:	8c 01       	movw	r16, r24
    20da:	6b 01       	movw	r12, r22
    20dc:	7a 01       	movw	r14, r20
    	uint8_t spiStatusByte;
   	uint8_t checksum,i;
	uint8_t timestamp;

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend (radio_sem);
    20de:	80 91 9f 06 	lds	r24, 0x069F
    20e2:	90 91 a0 06 	lds	r25, 0x06A0
    20e6:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <nrk_sem_pend>
#endif
	timestamp=_nrk_os_timer_get();
    20ea:	0e 94 ca 2c 	call	0x5994	; 0x5994 <_nrk_os_timer_get>
	// XXX 2 below are hacks...
#ifdef CC2420_OSC_OPT
	FASTSPI_STROBE(CC2420_SXOSCON);
	nrk_spin_wait_us(OSC_STARTUP_DELAY);
#endif
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    20ee:	40 98       	cbi	0x08, 0	; 8
    20f0:	88 e0       	ldi	r24, 0x08	; 8
    20f2:	8e bd       	out	0x2e, r24	; 46
    20f4:	0d b4       	in	r0, 0x2d	; 45
    20f6:	07 fe       	sbrs	r0, 7
    20f8:	fd cf       	rjmp	.-6      	; 0x20f4 <rf_tx_tdma_packet+0x3e>
    20fa:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    20fc:	40 98       	cbi	0x08, 0	; 8
    20fe:	88 e0       	ldi	r24, 0x08	; 8
    2100:	8e bd       	out	0x2e, r24	; 46
    2102:	0d b4       	in	r0, 0x2d	; 45
    2104:	07 fe       	sbrs	r0, 7
    2106:	fd cf       	rjmp	.-6      	; 0x2102 <rf_tx_tdma_packet+0x4c>
    2108:	40 9a       	sbi	0x08, 0	; 8
    // Wait until the transceiver is idle
     while (FIFOP_IS_1 || SFD_IS_1);
    210a:	67 99       	sbic	0x0c, 7	; 12
    210c:	fe cf       	rjmp	.-4      	; 0x210a <rf_tx_tdma_packet+0x54>
    210e:	4e 99       	sbic	0x09, 6	; 9
    2110:	fc cf       	rjmp	.-8      	; 0x210a <rf_tx_tdma_packet+0x54>
    // Turn off global interrupts to avoid interference on the SPI interface
      DISABLE_GLOBAL_INT();
    2112:	f8 94       	cli
	// Flush the TX FIFO just in case...
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    2114:	40 98       	cbi	0x08, 0	; 8
    2116:	89 e0       	ldi	r24, 0x09	; 9
    2118:	8e bd       	out	0x2e, r24	; 46
    211a:	0d b4       	in	r0, 0x2d	; 45
    211c:	07 fe       	sbrs	r0, 7
    211e:	fd cf       	rjmp	.-6      	; 0x211a <rf_tx_tdma_packet+0x64>
    2120:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    2122:	40 98       	cbi	0x08, 0	; 8
    2124:	89 e0       	ldi	r24, 0x09	; 9
    2126:	8e bd       	out	0x2e, r24	; 46
    2128:	0d b4       	in	r0, 0x2d	; 45
    212a:	07 fe       	sbrs	r0, 7
    212c:	fd cf       	rjmp	.-6      	; 0x2128 <rf_tx_tdma_packet+0x72>
    212e:	40 9a       	sbi	0x08, 0	; 8

    checksum=0;
    for(i=0; i<pRTI->length; i++ )
    2130:	f8 01       	movw	r30, r16
    2132:	62 81       	ldd	r22, Z+2	; 0x02
    2134:	46 2f       	mov	r20, r22
    2136:	55 27       	eor	r21, r21
    2138:	47 fd       	sbrc	r20, 7
    213a:	50 95       	com	r21
    213c:	bb 24       	eor	r11, r11
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	07 c0       	rjmp	.+14     	; 0x2152 <rf_tx_tdma_packet+0x9c>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
    2144:	f8 01       	movw	r30, r16
    2146:	83 81       	ldd	r24, Z+3	; 0x03
    2148:	94 81       	ldd	r25, Z+4	; 0x04
    214a:	a8 0f       	add	r26, r24
    214c:	b9 1f       	adc	r27, r25
    214e:	8c 91       	ld	r24, X
    2150:	b8 0e       	add	r11, r24
    2152:	82 2f       	mov	r24, r18
    2154:	2f 5f       	subi	r18, 0xFF	; 255
    2156:	3f 4f       	sbci	r19, 0xFF	; 255
	// Flush the TX FIFO just in case...
	FASTSPI_STROBE(CC2420_SFLUSHTX);
	FASTSPI_STROBE(CC2420_SFLUSHTX);

    checksum=0;
    for(i=0; i<pRTI->length; i++ )
    2158:	a8 2f       	mov	r26, r24
    215a:	bb 27       	eor	r27, r27
    215c:	a4 17       	cp	r26, r20
    215e:	b5 07       	cpc	r27, r21
    2160:	8c f3       	brlt	.-30     	; 0x2144 <rf_tx_tdma_packet+0x8e>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
    }
    packetLength = pRTI->length + RF_PACKET_OVERHEAD_SIZE + CHECKSUM_OVERHEAD;
    2162:	96 2f       	mov	r25, r22
    2164:	94 5f       	subi	r25, 0xF4	; 244
    
    // Write the packet to the TX FIFO (the FCS is appended automatically when AUTOCRC is enabled)
    // These are only the MAC AGNOSTIC parameters...
    // Slots for example are at a higher layer since they assume TDMA
    
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    2166:	40 98       	cbi	0x08, 0	; 8
    2168:	8e e3       	ldi	r24, 0x3E	; 62
    216a:	8e bd       	out	0x2e, r24	; 46
    216c:	0d b4       	in	r0, 0x2d	; 45
    216e:	07 fc       	sbrc	r0, 7
    2170:	05 c0       	rjmp	.+10     	; 0x217c <rf_tx_tdma_packet+0xc6>
    2172:	fc cf       	rjmp	.-8      	; 0x216c <rf_tx_tdma_packet+0xb6>
    2174:	0d b4       	in	r0, 0x2d	; 45
    2176:	07 fc       	sbrc	r0, 7
    2178:	16 c1       	rjmp	.+556    	; 0x23a6 <__stack+0x1a7>
    217a:	fc cf       	rjmp	.-8      	; 0x2174 <rf_tx_tdma_packet+0xbe>
    217c:	9e bd       	out	0x2e, r25	; 46
    217e:	fa cf       	rjmp	.-12     	; 0x2174 <rf_tx_tdma_packet+0xbe>
    2180:	81 e6       	ldi	r24, 0x61	; 97
    2182:	98 e8       	ldi	r25, 0x88	; 136
    frameControlField = pRTI->ackRequest ? RF_FCF_ACK : RF_FCF_NOACK;
    2184:	9a 83       	std	Y+2, r25	; 0x02
    2186:	89 83       	std	Y+1, r24	; 0x01
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    2188:	40 98       	cbi	0x08, 0	; 8
    218a:	8e e3       	ldi	r24, 0x3E	; 62
    218c:	8e bd       	out	0x2e, r24	; 46
    218e:	0d b4       	in	r0, 0x2d	; 45
    2190:	07 fe       	sbrs	r0, 7
    2192:	fd cf       	rjmp	.-6      	; 0x218e <rf_tx_tdma_packet+0xd8>
    2194:	fe 01       	movw	r30, r28
    2196:	31 96       	adiw	r30, 0x01	; 1
    2198:	9e 01       	movw	r18, r28
    219a:	2d 5f       	subi	r18, 0xFD	; 253
    219c:	3f 4f       	sbci	r19, 0xFF	; 255
    219e:	80 81       	ld	r24, Z
    21a0:	8e bd       	out	0x2e, r24	; 46
    21a2:	0d b4       	in	r0, 0x2d	; 45
    21a4:	07 fe       	sbrs	r0, 7
    21a6:	fd cf       	rjmp	.-6      	; 0x21a2 <rf_tx_tdma_packet+0xec>
    21a8:	31 96       	adiw	r30, 0x01	; 1
    21aa:	e2 17       	cp	r30, r18
    21ac:	f3 07       	cpc	r31, r19
    21ae:	b9 f7       	brne	.-18     	; 0x219e <rf_tx_tdma_packet+0xe8>
    21b0:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    21b2:	40 98       	cbi	0x08, 0	; 8
    21b4:	8e e3       	ldi	r24, 0x3E	; 62
    21b6:	8e bd       	out	0x2e, r24	; 46
    21b8:	0d b4       	in	r0, 0x2d	; 45
    21ba:	07 fc       	sbrc	r0, 7
    21bc:	05 c0       	rjmp	.+10     	; 0x21c8 <rf_tx_tdma_packet+0x112>
    21be:	fc cf       	rjmp	.-8      	; 0x21b8 <rf_tx_tdma_packet+0x102>
    21c0:	0d b4       	in	r0, 0x2d	; 45
    21c2:	07 fc       	sbrc	r0, 7
    21c4:	f9 c0       	rjmp	.+498    	; 0x23b8 <__stack+0x1b9>
    21c6:	fc cf       	rjmp	.-8      	; 0x21c0 <rf_tx_tdma_packet+0x10a>
    21c8:	80 91 a6 06 	lds	r24, 0x06A6
    21cc:	8e bd       	out	0x2e, r24	; 46
    21ce:	f8 cf       	rjmp	.-16     	; 0x21c0 <rf_tx_tdma_packet+0x10a>
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    21d0:	0d b4       	in	r0, 0x2d	; 45
    21d2:	07 fe       	sbrs	r0, 7
    21d4:	fd cf       	rjmp	.-6      	; 0x21d0 <rf_tx_tdma_packet+0x11a>
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	f9 01       	movw	r30, r18
    21dc:	e8 55       	subi	r30, 0x58	; 88
    21de:	f9 4f       	sbci	r31, 0xF9	; 249
    21e0:	80 81       	ld	r24, Z
    21e2:	8e bd       	out	0x2e, r24	; 46
    21e4:	0d b4       	in	r0, 0x2d	; 45
    21e6:	07 fe       	sbrs	r0, 7
    21e8:	fd cf       	rjmp	.-6      	; 0x21e4 <rf_tx_tdma_packet+0x12e>
    21ea:	2f 5f       	subi	r18, 0xFF	; 255
    21ec:	3f 4f       	sbci	r19, 0xFF	; 255
    21ee:	22 30       	cpi	r18, 0x02	; 2
    21f0:	31 05       	cpc	r19, r1
    21f2:	99 f7       	brne	.-26     	; 0x21da <rf_tx_tdma_packet+0x124>
    21f4:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
    21f6:	40 98       	cbi	0x08, 0	; 8
    21f8:	8e e3       	ldi	r24, 0x3E	; 62
    21fa:	8e bd       	out	0x2e, r24	; 46
    21fc:	0d b4       	in	r0, 0x2d	; 45
    21fe:	07 fe       	sbrs	r0, 7
    2200:	fd cf       	rjmp	.-6      	; 0x21fc <rf_tx_tdma_packet+0x146>
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	f8 01       	movw	r30, r16
    2208:	e2 0f       	add	r30, r18
    220a:	f3 1f       	adc	r31, r19
    220c:	80 81       	ld	r24, Z
    220e:	8e bd       	out	0x2e, r24	; 46
    2210:	0d b4       	in	r0, 0x2d	; 45
    2212:	07 fe       	sbrs	r0, 7
    2214:	fd cf       	rjmp	.-6      	; 0x2210 <__stack+0x11>
    2216:	2f 5f       	subi	r18, 0xFF	; 255
    2218:	3f 4f       	sbci	r19, 0xFF	; 255
    221a:	22 30       	cpi	r18, 0x02	; 2
    221c:	31 05       	cpc	r19, r1
    221e:	99 f7       	brne	.-26     	; 0x2206 <__stack+0x7>
    2220:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.myAddr, 2);         // Source address
    2222:	40 98       	cbi	0x08, 0	; 8
    2224:	8e e3       	ldi	r24, 0x3E	; 62
    2226:	8e bd       	out	0x2e, r24	; 46
    2228:	0d b4       	in	r0, 0x2d	; 45
    222a:	07 fe       	sbrs	r0, 7
    222c:	fd cf       	rjmp	.-6      	; 0x2228 <__stack+0x29>
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	f9 01       	movw	r30, r18
    2234:	e6 55       	subi	r30, 0x56	; 86
    2236:	f9 4f       	sbci	r31, 0xF9	; 249
    2238:	80 81       	ld	r24, Z
    223a:	8e bd       	out	0x2e, r24	; 46
    223c:	0d b4       	in	r0, 0x2d	; 45
    223e:	07 fe       	sbrs	r0, 7
    2240:	fd cf       	rjmp	.-6      	; 0x223c <__stack+0x3d>
    2242:	2f 5f       	subi	r18, 0xFF	; 255
    2244:	3f 4f       	sbci	r19, 0xFF	; 255
    2246:	22 30       	cpi	r18, 0x02	; 2
    2248:	31 05       	cpc	r19, r1
    224a:	99 f7       	brne	.-26     	; 0x2232 <__stack+0x33>
    224c:	40 9a       	sbi	0x08, 0	; 8

    nrk_high_speed_timer_wait(slot_start_time,tx_guard_time);
    224e:	b7 01       	movw	r22, r14
    2250:	c6 01       	movw	r24, r12
    2252:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <nrk_high_speed_timer_wait>
		FASTSPI_STROBE(CC2420_STXONCCA);
		FASTSPI_UPD_STATUS(spiStatusByte);
		halWait(100);
    } while (!(spiStatusByte & BM(CC2420_TX_ACTIVE)));
*/
if (pRTI->cca == TRUE)
    2256:	f8 01       	movw	r30, r16
    2258:	85 81       	ldd	r24, Z+5	; 0x05
    225a:	88 23       	and	r24, r24
    225c:	c1 f1       	breq	.+112    	; 0x22ce <__stack+0xcf>
    {
    uint8_t cnt;
      if (!rfSettings.receiveOn)
    225e:	80 91 ac 06 	lds	r24, 0x06AC
    2262:	88 23       	and	r24, r24
    2264:	39 f4       	brne	.+14     	; 0x2274 <__stack+0x75>
	{
	  FASTSPI_STROBE (CC2420_SRXON);
    2266:	40 98       	cbi	0x08, 0	; 8
    2268:	83 e0       	ldi	r24, 0x03	; 3
    226a:	8e bd       	out	0x2e, r24	; 46
    226c:	0d b4       	in	r0, 0x2d	; 45
    226e:	07 fe       	sbrs	r0, 7
    2270:	fd cf       	rjmp	.-6      	; 0x226c <__stack+0x6d>
    2272:	40 9a       	sbi	0x08, 0	; 8
	}

      // Wait for the RSSI value to become valid
      do
	{
	  FASTSPI_UPD_STATUS (spiStatusByte);
    2274:	40 98       	cbi	0x08, 0	; 8
    2276:	1e bc       	out	0x2e, r1	; 46
    2278:	0d b4       	in	r0, 0x2d	; 45
    227a:	07 fe       	sbrs	r0, 7
    227c:	fd cf       	rjmp	.-6      	; 0x2278 <__stack+0x79>
    227e:	8e b5       	in	r24, 0x2e	; 46
    2280:	40 9a       	sbi	0x08, 0	; 8
	}
      while (!(spiStatusByte & BM (CC2420_RSSI_VALID)));
    2282:	81 ff       	sbrs	r24, 1
    2284:	f7 cf       	rjmp	.-18     	; 0x2274 <__stack+0x75>
    2286:	ee 24       	eor	r14, r14

      // TX begins after the CCA check has passed
      cnt = 0;
      do
	{
	  FASTSPI_STROBE (CC2420_STXONCCA);
    2288:	40 98       	cbi	0x08, 0	; 8
    228a:	85 e0       	ldi	r24, 0x05	; 5
    228c:	8e bd       	out	0x2e, r24	; 46
    228e:	0d b4       	in	r0, 0x2d	; 45
    2290:	07 fe       	sbrs	r0, 7
    2292:	fd cf       	rjmp	.-6      	; 0x228e <__stack+0x8f>
    2294:	40 9a       	sbi	0x08, 0	; 8
	  FASTSPI_UPD_STATUS (spiStatusByte);
    2296:	40 98       	cbi	0x08, 0	; 8
    2298:	1e bc       	out	0x2e, r1	; 46
    229a:	0d b4       	in	r0, 0x2d	; 45
    229c:	07 fe       	sbrs	r0, 7
    229e:	fd cf       	rjmp	.-6      	; 0x229a <__stack+0x9b>
    22a0:	fe b4       	in	r15, 0x2e	; 46
    22a2:	40 9a       	sbi	0x08, 0	; 8
	  cnt++;
    22a4:	e3 94       	inc	r14
	  if (cnt > 100)
    22a6:	f5 e6       	ldi	r31, 0x65	; 101
    22a8:	ef 16       	cp	r14, r31
    22aa:	51 f4       	brne	.+20     	; 0x22c0 <__stack+0xc1>
	    {
	      ENABLE_GLOBAL_INT ();
    22ac:	78 94       	sei
		nrk_sem_post(radio_sem);
    22ae:	80 91 9f 06 	lds	r24, 0x069F
    22b2:	90 91 a0 06 	lds	r25, 0x06A0
    22b6:	0e 94 a7 20 	call	0x414e	; 0x414e <nrk_sem_post>
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	83 c0       	rjmp	.+262    	; 0x23c6 <__stack+0x1c7>
	      return FALSE;
	    }
	  halWait (100);
    22c0:	84 e6       	ldi	r24, 0x64	; 100
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	0e 94 9e 19 	call	0x333c	; 0x333c <halWait>
	}
      while (!(spiStatusByte & BM (CC2420_TX_ACTIVE)));
    22c8:	f3 fc       	sbrc	r15, 3
    22ca:	08 c0       	rjmp	.+16     	; 0x22dc <__stack+0xdd>
    22cc:	dd cf       	rjmp	.-70     	; 0x2288 <__stack+0x89>
    }
  else
    FASTSPI_STROBE (CC2420_STXON);
    22ce:	40 98       	cbi	0x08, 0	; 8
    22d0:	84 e0       	ldi	r24, 0x04	; 4
    22d2:	8e bd       	out	0x2e, r24	; 46
    22d4:	0d b4       	in	r0, 0x2d	; 45
    22d6:	07 fe       	sbrs	r0, 7
    22d8:	fd cf       	rjmp	.-6      	; 0x22d4 <__stack+0xd5>
    22da:	40 9a       	sbi	0x08, 0	; 8
	 //nrk_gpio_set(DEBUG_0);


    // Fill in the rest of the packet now
    FASTSPI_WRITE_FIFO((uint8_t*) pRTI->pPayload, pRTI->length);  // Payload
    22dc:	40 98       	cbi	0x08, 0	; 8
    22de:	8e e3       	ldi	r24, 0x3E	; 62
    22e0:	8e bd       	out	0x2e, r24	; 46
    22e2:	0d b4       	in	r0, 0x2d	; 45
    22e4:	07 fe       	sbrs	r0, 7
    22e6:	fd cf       	rjmp	.-6      	; 0x22e2 <__stack+0xe3>
    22e8:	f8 01       	movw	r30, r16
    22ea:	82 81       	ldd	r24, Z+2	; 0x02
    22ec:	48 2f       	mov	r20, r24
    22ee:	55 27       	eor	r21, r21
    22f0:	47 fd       	sbrc	r20, 7
    22f2:	50 95       	com	r21
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	0c c0       	rjmp	.+24     	; 0x2312 <__stack+0x113>
    22fa:	f8 01       	movw	r30, r16
    22fc:	83 81       	ldd	r24, Z+3	; 0x03
    22fe:	94 81       	ldd	r25, Z+4	; 0x04
    2300:	a8 0f       	add	r26, r24
    2302:	b9 1f       	adc	r27, r25
    2304:	8c 91       	ld	r24, X
    2306:	8e bd       	out	0x2e, r24	; 46
    2308:	0d b4       	in	r0, 0x2d	; 45
    230a:	07 fe       	sbrs	r0, 7
    230c:	fd cf       	rjmp	.-6      	; 0x2308 <__stack+0x109>
    230e:	2f 5f       	subi	r18, 0xFF	; 255
    2310:	3f 4f       	sbci	r19, 0xFF	; 255
    2312:	a2 2f       	mov	r26, r18
    2314:	bb 27       	eor	r27, r27
    2316:	a4 17       	cp	r26, r20
    2318:	b5 07       	cpc	r27, r21
    231a:	7c f3       	brlt	.-34     	; 0x22fa <__stack+0xfb>
    231c:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &checksum, 1);         // Checksum
    231e:	40 98       	cbi	0x08, 0	; 8
    2320:	8e e3       	ldi	r24, 0x3E	; 62
    2322:	8e bd       	out	0x2e, r24	; 46
    2324:	0d b4       	in	r0, 0x2d	; 45
    2326:	07 fc       	sbrc	r0, 7
    2328:	05 c0       	rjmp	.+10     	; 0x2334 <__stack+0x135>
    232a:	fc cf       	rjmp	.-8      	; 0x2324 <__stack+0x125>
    232c:	0d b4       	in	r0, 0x2d	; 45
    232e:	07 fc       	sbrc	r0, 7
    2330:	48 c0       	rjmp	.+144    	; 0x23c2 <__stack+0x1c3>
    2332:	fc cf       	rjmp	.-8      	; 0x232c <__stack+0x12d>
    2334:	be bc       	out	0x2e, r11	; 46
    2336:	fa cf       	rjmp	.-12     	; 0x232c <__stack+0x12d>

    //nrk_spin_wait_us(200);
//  FASTSPI_STROBE(CC2420_STXON);
   // Wait for the transmission to begin before exiting (makes sure that this function cannot be called
	// a second time, and thereby cancelling the first transmission (observe the FIFOP + SFD test above).
	while (!SFD_IS_1);
    2338:	4e 9b       	sbis	0x09, 6	; 9
    233a:	fe cf       	rjmp	.-4      	; 0x2338 <__stack+0x139>
		success = rfSettings.ackReceived;
    }*/

    
	// Turn off the receiver if it should not continue to be enabled
    DISABLE_GLOBAL_INT();
    233c:	f8 94       	cli
    // XXX hack, temp out
    //if (!rfSettings.receiveOn) { while (SFD_IS_1); /*FASTSPI_STROBE(CC2420_SRFOFF);*/ }
    // while (SFD_IS_1); 
    while (SFD_IS_1); // wait for packet to finish
    233e:	4e 99       	sbic	0x09, 6	; 9
    2340:	fe cf       	rjmp	.-4      	; 0x233e <__stack+0x13f>
    	
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    2342:	40 98       	cbi	0x08, 0	; 8
    2344:	88 e0       	ldi	r24, 0x08	; 8
    2346:	8e bd       	out	0x2e, r24	; 46
    2348:	0d b4       	in	r0, 0x2d	; 45
    234a:	07 fe       	sbrs	r0, 7
    234c:	fd cf       	rjmp	.-6      	; 0x2348 <__stack+0x149>
    234e:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    2350:	40 98       	cbi	0x08, 0	; 8
    2352:	88 e0       	ldi	r24, 0x08	; 8
    2354:	8e bd       	out	0x2e, r24	; 46
    2356:	0d b4       	in	r0, 0x2d	; 45
    2358:	07 fe       	sbrs	r0, 7
    235a:	fd cf       	rjmp	.-6      	; 0x2356 <__stack+0x157>
    235c:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    235e:	40 98       	cbi	0x08, 0	; 8
    2360:	89 e0       	ldi	r24, 0x09	; 9
    2362:	8e bd       	out	0x2e, r24	; 46
    2364:	0d b4       	in	r0, 0x2d	; 45
    2366:	07 fe       	sbrs	r0, 7
    2368:	fd cf       	rjmp	.-6      	; 0x2364 <__stack+0x165>
    236a:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    236c:	40 98       	cbi	0x08, 0	; 8
    236e:	89 e0       	ldi	r24, 0x09	; 9
    2370:	8e bd       	out	0x2e, r24	; 46
    2372:	0d b4       	in	r0, 0x2d	; 45
    2374:	07 fe       	sbrs	r0, 7
    2376:	fd cf       	rjmp	.-6      	; 0x2372 <__stack+0x173>
    2378:	40 9a       	sbi	0x08, 0	; 8

#ifdef CC2420_OSC_OPT
FASTSPI_STROBE(CC2420_SXOSCOFF);
#endif
FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
    237a:	40 98       	cbi	0x08, 0	; 8
    237c:	86 e0       	ldi	r24, 0x06	; 6
    237e:	8e bd       	out	0x2e, r24	; 46
    2380:	0d b4       	in	r0, 0x2d	; 45
    2382:	07 fe       	sbrs	r0, 7
    2384:	fd cf       	rjmp	.-6      	; 0x2380 <__stack+0x181>
    2386:	40 9a       	sbi	0x08, 0	; 8
    ENABLE_GLOBAL_INT();
    2388:	78 94       	sei
    

    // Increment the sequence number, and return the result
    rfSettings.txSeqNumber++;
    238a:	80 91 a6 06 	lds	r24, 0x06A6
    238e:	8f 5f       	subi	r24, 0xFF	; 255
    2390:	80 93 a6 06 	sts	0x06A6, r24
//	while (SFD_IS_1);
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    2394:	80 91 9f 06 	lds	r24, 0x069F
    2398:	90 91 a0 06 	lds	r25, 0x06A0
    239c:	0e 94 a7 20 	call	0x414e	; 0x414e <nrk_sem_post>
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	10 c0       	rjmp	.+32     	; 0x23c6 <__stack+0x1c7>
    
    // Write the packet to the TX FIFO (the FCS is appended automatically when AUTOCRC is enabled)
    // These are only the MAC AGNOSTIC parameters...
    // Slots for example are at a higher layer since they assume TDMA
    
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    23a6:	40 9a       	sbi	0x08, 0	; 8
    frameControlField = pRTI->ackRequest ? RF_FCF_ACK : RF_FCF_NOACK;
    23a8:	f8 01       	movw	r30, r16
    23aa:	86 81       	ldd	r24, Z+6	; 0x06
    23ac:	88 23       	and	r24, r24
    23ae:	09 f0       	breq	.+2      	; 0x23b2 <__stack+0x1b3>
    23b0:	e7 ce       	rjmp	.-562    	; 0x2180 <rf_tx_tdma_packet+0xca>
    23b2:	81 e4       	ldi	r24, 0x41	; 65
    23b4:	98 e8       	ldi	r25, 0x88	; 136
    23b6:	e6 ce       	rjmp	.-564    	; 0x2184 <rf_tx_tdma_packet+0xce>
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    23b8:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    23ba:	40 98       	cbi	0x08, 0	; 8
    23bc:	8e e3       	ldi	r24, 0x3E	; 62
    23be:	8e bd       	out	0x2e, r24	; 46
    23c0:	07 cf       	rjmp	.-498    	; 0x21d0 <rf_tx_tdma_packet+0x11a>
	 //nrk_gpio_set(DEBUG_0);


    // Fill in the rest of the packet now
    FASTSPI_WRITE_FIFO((uint8_t*) pRTI->pPayload, pRTI->length);  // Payload
    FASTSPI_WRITE_FIFO((uint8_t*) &checksum, 1);         // Checksum
    23c2:	40 9a       	sbi	0x08, 0	; 8
    23c4:	b9 cf       	rjmp	.-142    	; 0x2338 <__stack+0x139>
    23c6:	22 96       	adiw	r28, 0x02	; 2
    23c8:	0f b6       	in	r0, 0x3f	; 63
    23ca:	f8 94       	cli
    23cc:	de bf       	out	0x3e, r29	; 62
    23ce:	0f be       	out	0x3f, r0	; 63
    23d0:	cd bf       	out	0x3d, r28	; 61
    23d2:	df 91       	pop	r29
    23d4:	cf 91       	pop	r28
    23d6:	1f 91       	pop	r17
    23d8:	0f 91       	pop	r16
    23da:	ff 90       	pop	r15
    23dc:	ef 90       	pop	r14
    23de:	df 90       	pop	r13
    23e0:	cf 90       	pop	r12
    23e2:	bf 90       	pop	r11
    23e4:	08 95       	ret

000023e6 <rf_addr_decode_set_my_mac>:
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
}


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
    23e6:	cf 93       	push	r28
    23e8:	df 93       	push	r29
    23ea:	cd b7       	in	r28, 0x3d	; 61
    23ec:	de b7       	in	r29, 0x3e	; 62
    23ee:	22 97       	sbiw	r28, 0x02	; 2
    23f0:	0f b6       	in	r0, 0x3f	; 63
    23f2:	f8 94       	cli
    23f4:	de bf       	out	0x3e, r29	; 62
    23f6:	0f be       	out	0x3f, r0	; 63
    23f8:	cd bf       	out	0x3d, r28	; 61
    23fa:	9a 83       	std	Y+2, r25	; 0x02
    23fc:	89 83       	std	Y+1, r24	; 0x01
uint8_t n;
    rfSettings.myAddr = my_mac;
    23fe:	90 93 ab 06 	sts	0x06AB, r25
    2402:	80 93 aa 06 	sts	0x06AA, r24
    nrk_spin_wait_us(500);
    2406:	84 ef       	ldi	r24, 0xF4	; 244
    2408:	91 e0       	ldi	r25, 0x01	; 1
    240a:	0e 94 04 2c 	call	0x5808	; 0x5808 <nrk_spin_wait_us>
    FASTSPI_WRITE_RAM_LE(&my_mac, CC2420RAM_SHORTADDR, 2, n);
    240e:	40 98       	cbi	0x08, 0	; 8
    2410:	8a ee       	ldi	r24, 0xEA	; 234
    2412:	8e bd       	out	0x2e, r24	; 46
    2414:	0d b4       	in	r0, 0x2d	; 45
    2416:	07 fe       	sbrs	r0, 7
    2418:	fd cf       	rjmp	.-6      	; 0x2414 <rf_addr_decode_set_my_mac+0x2e>
    241a:	80 e8       	ldi	r24, 0x80	; 128
    241c:	8e bd       	out	0x2e, r24	; 46
    241e:	0d b4       	in	r0, 0x2d	; 45
    2420:	07 fe       	sbrs	r0, 7
    2422:	fd cf       	rjmp	.-6      	; 0x241e <rf_addr_decode_set_my_mac+0x38>
    2424:	fe 01       	movw	r30, r28
    2426:	31 96       	adiw	r30, 0x01	; 1
    2428:	9e 01       	movw	r18, r28
    242a:	2d 5f       	subi	r18, 0xFD	; 253
    242c:	3f 4f       	sbci	r19, 0xFF	; 255
    242e:	80 81       	ld	r24, Z
    2430:	8e bd       	out	0x2e, r24	; 46
    2432:	0d b4       	in	r0, 0x2d	; 45
    2434:	07 fe       	sbrs	r0, 7
    2436:	fd cf       	rjmp	.-6      	; 0x2432 <rf_addr_decode_set_my_mac+0x4c>
    2438:	31 96       	adiw	r30, 0x01	; 1
    243a:	e2 17       	cp	r30, r18
    243c:	f3 07       	cpc	r31, r19
    243e:	b9 f7       	brne	.-18     	; 0x242e <rf_addr_decode_set_my_mac+0x48>
    2440:	40 9a       	sbi	0x08, 0	; 8
    nrk_spin_wait_us(500);
    2442:	84 ef       	ldi	r24, 0xF4	; 244
    2444:	91 e0       	ldi	r25, 0x01	; 1
    2446:	0e 94 04 2c 	call	0x5808	; 0x5808 <nrk_spin_wait_us>
    244a:	22 96       	adiw	r28, 0x02	; 2
    244c:	0f b6       	in	r0, 0x3f	; 63
    244e:	f8 94       	cli
    2450:	de bf       	out	0x3e, r29	; 62
    2452:	0f be       	out	0x3f, r0	; 63
    2454:	cd bf       	out	0x3d, r28	; 61
    2456:	df 91       	pop	r29
    2458:	cf 91       	pop	r28
    245a:	08 95       	ret

0000245c <rf_security_set_key>:
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
{
    245c:	6f 92       	push	r6
    245e:	7f 92       	push	r7
    2460:	8f 92       	push	r8
    2462:	9f 92       	push	r9
    2464:	af 92       	push	r10
    2466:	bf 92       	push	r11
    2468:	cf 92       	push	r12
    246a:	df 92       	push	r13
    246c:	ef 92       	push	r14
    246e:	ff 92       	push	r15
    2470:	0f 93       	push	r16
    2472:	1f 93       	push	r17
    2474:	cf 93       	push	r28
    2476:	df 93       	push	r29
    2478:	cd b7       	in	r28, 0x3d	; 61
    247a:	de b7       	in	r29, 0x3e	; 62
    247c:	22 97       	sbiw	r28, 0x02	; 2
    247e:	0f b6       	in	r0, 0x3f	; 63
    2480:	f8 94       	cli
    2482:	de bf       	out	0x3e, r29	; 62
    2484:	0f be       	out	0x3f, r0	; 63
    2486:	cd bf       	out	0x3d, r28	; 61
    2488:	8c 01       	movw	r16, r24
uint8_t n,i;
uint16_t key_buf;

// Set AES key
nrk_spin_wait_us(100); 
    248a:	84 e6       	ldi	r24, 0x64	; 100
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	0e 94 04 2c 	call	0x5808	; 0x5808 <nrk_spin_wait_us>
    2492:	78 01       	movw	r14, r16
    2494:	c1 2c       	mov	r12, r1
    2496:	b1 e0       	ldi	r27, 0x01	; 1
    2498:	db 2e       	mov	r13, r27
for(i=0; i<8; i++ )
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    249a:	3e 01       	movw	r6, r28
    249c:	08 94       	sec
    249e:	61 1c       	adc	r6, r1
    24a0:	71 1c       	adc	r7, r1
    24a2:	a3 e0       	ldi	r26, 0x03	; 3
    24a4:	8a 2e       	mov	r8, r26
    24a6:	91 2c       	mov	r9, r1
    24a8:	8c 0e       	add	r8, r28
    24aa:	9d 1e       	adc	r9, r29

// Set AES key
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
    24ac:	f7 01       	movw	r30, r14
    24ae:	80 81       	ld	r24, Z
    24b0:	21 81       	ldd	r18, Z+1	; 0x01
    24b2:	33 27       	eor	r19, r19
    24b4:	99 27       	eor	r25, r25
    24b6:	98 2f       	mov	r25, r24
    24b8:	88 27       	eor	r24, r24
    24ba:	28 2b       	or	r18, r24
    24bc:	39 2b       	or	r19, r25
    24be:	3a 83       	std	Y+2, r19	; 0x02
    24c0:	29 83       	std	Y+1, r18	; 0x01
   	nrk_spin_wait_us(100); 
    24c2:	84 e6       	ldi	r24, 0x64	; 100
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	0e 94 04 2c 	call	0x5808	; 0x5808 <nrk_spin_wait_us>
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    24ca:	40 98       	cbi	0x08, 0	; 8
    24cc:	8c 2d       	mov	r24, r12
    24ce:	80 68       	ori	r24, 0x80	; 128
    24d0:	8e bd       	out	0x2e, r24	; 46
    24d2:	0d b4       	in	r0, 0x2d	; 45
    24d4:	07 fe       	sbrs	r0, 7
    24d6:	fd cf       	rjmp	.-6      	; 0x24d2 <rf_security_set_key+0x76>
    24d8:	c6 01       	movw	r24, r12
    24da:	95 95       	asr	r25
    24dc:	87 95       	ror	r24
    24de:	80 7c       	andi	r24, 0xC0	; 192
    24e0:	8e bd       	out	0x2e, r24	; 46
    24e2:	0d b4       	in	r0, 0x2d	; 45
    24e4:	07 fe       	sbrs	r0, 7
    24e6:	fd cf       	rjmp	.-6      	; 0x24e2 <rf_security_set_key+0x86>
    24e8:	83 01       	movw	r16, r6
    24ea:	53 01       	movw	r10, r6
    24ec:	f5 01       	movw	r30, r10
    24ee:	80 81       	ld	r24, Z
    24f0:	8e bd       	out	0x2e, r24	; 46
    24f2:	0d b4       	in	r0, 0x2d	; 45
    24f4:	07 fe       	sbrs	r0, 7
    24f6:	fd cf       	rjmp	.-6      	; 0x24f2 <rf_security_set_key+0x96>
    24f8:	08 94       	sec
    24fa:	a1 1c       	adc	r10, r1
    24fc:	b1 1c       	adc	r11, r1
    24fe:	a8 14       	cp	r10, r8
    2500:	b9 04       	cpc	r11, r9
    2502:	a1 f7       	brne	.-24     	; 0x24ec <rf_security_set_key+0x90>
    2504:	40 9a       	sbi	0x08, 0	; 8
    2506:	08 94       	sec
    2508:	e1 1c       	adc	r14, r1
    250a:	f1 1c       	adc	r15, r1
    250c:	82 e0       	ldi	r24, 0x02	; 2
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	c8 0e       	add	r12, r24
    2512:	d9 1e       	adc	r13, r25
uint8_t n,i;
uint16_t key_buf;

// Set AES key
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
    2514:	90 e1       	ldi	r25, 0x10	; 16
    2516:	c9 16       	cp	r12, r25
    2518:	91 e0       	ldi	r25, 0x01	; 1
    251a:	d9 06       	cpc	r13, r25
    251c:	39 f6       	brne	.-114    	; 0x24ac <rf_security_set_key+0x50>
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
	}

// Set AES nonce to all zeros
nrk_spin_wait_us(100); 
    251e:	84 e6       	ldi	r24, 0x64	; 100
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	0e 94 04 2c 	call	0x5808	; 0x5808 <nrk_spin_wait_us>
    2526:	20 e1       	ldi	r18, 0x10	; 16
    2528:	31 e0       	ldi	r19, 0x01	; 1
    252a:	40 e4       	ldi	r20, 0x40	; 64
    252c:	51 e0       	ldi	r21, 0x01	; 1
for(i=0; i<7; i++ )
	{
    	key_buf=0; 
    252e:	1a 82       	std	Y+2, r1	; 0x02
    2530:	19 82       	std	Y+1, r1	; 0x01
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    2532:	40 98       	cbi	0x08, 0	; 8
    2534:	84 2f       	mov	r24, r20
    2536:	80 68       	ori	r24, 0x80	; 128
    2538:	8e bd       	out	0x2e, r24	; 46
    253a:	0d b4       	in	r0, 0x2d	; 45
    253c:	07 fe       	sbrs	r0, 7
    253e:	fd cf       	rjmp	.-6      	; 0x253a <rf_security_set_key+0xde>
    2540:	ca 01       	movw	r24, r20
    2542:	95 95       	asr	r25
    2544:	87 95       	ror	r24
    2546:	80 7c       	andi	r24, 0xC0	; 192
    2548:	8e bd       	out	0x2e, r24	; 46
    254a:	0d b4       	in	r0, 0x2d	; 45
    254c:	07 fe       	sbrs	r0, 7
    254e:	fd cf       	rjmp	.-6      	; 0x254a <rf_security_set_key+0xee>
    2550:	f8 01       	movw	r30, r16
    2552:	80 81       	ld	r24, Z
    2554:	8e bd       	out	0x2e, r24	; 46
    2556:	0d b4       	in	r0, 0x2d	; 45
    2558:	07 fe       	sbrs	r0, 7
    255a:	fd cf       	rjmp	.-6      	; 0x2556 <rf_security_set_key+0xfa>
    255c:	31 96       	adiw	r30, 0x01	; 1
    255e:	ea 15       	cp	r30, r10
    2560:	fb 05       	cpc	r31, r11
    2562:	b9 f7       	brne	.-18     	; 0x2552 <rf_security_set_key+0xf6>
    2564:	40 9a       	sbi	0x08, 0	; 8
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
    2566:	40 98       	cbi	0x08, 0	; 8
    2568:	82 2f       	mov	r24, r18
    256a:	80 68       	ori	r24, 0x80	; 128
    256c:	8e bd       	out	0x2e, r24	; 46
    256e:	0d b4       	in	r0, 0x2d	; 45
    2570:	07 fe       	sbrs	r0, 7
    2572:	fd cf       	rjmp	.-6      	; 0x256e <rf_security_set_key+0x112>
    2574:	c9 01       	movw	r24, r18
    2576:	95 95       	asr	r25
    2578:	87 95       	ror	r24
    257a:	80 7c       	andi	r24, 0xC0	; 192
    257c:	8e bd       	out	0x2e, r24	; 46
    257e:	0d b4       	in	r0, 0x2d	; 45
    2580:	07 fe       	sbrs	r0, 7
    2582:	fd cf       	rjmp	.-6      	; 0x257e <rf_security_set_key+0x122>
    2584:	f8 01       	movw	r30, r16
    2586:	80 81       	ld	r24, Z
    2588:	8e bd       	out	0x2e, r24	; 46
    258a:	0d b4       	in	r0, 0x2d	; 45
    258c:	07 fe       	sbrs	r0, 7
    258e:	fd cf       	rjmp	.-6      	; 0x258a <rf_security_set_key+0x12e>
    2590:	31 96       	adiw	r30, 0x01	; 1
    2592:	ea 15       	cp	r30, r10
    2594:	fb 05       	cpc	r31, r11
    2596:	b9 f7       	brne	.-18     	; 0x2586 <rf_security_set_key+0x12a>
    2598:	40 9a       	sbi	0x08, 0	; 8
    259a:	2e 5f       	subi	r18, 0xFE	; 254
    259c:	3f 4f       	sbci	r19, 0xFF	; 255
    259e:	4e 5f       	subi	r20, 0xFE	; 254
    25a0:	5f 4f       	sbci	r21, 0xFF	; 255
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
	}

// Set AES nonce to all zeros
nrk_spin_wait_us(100); 
for(i=0; i<7; i++ )
    25a2:	e1 e0       	ldi	r30, 0x01	; 1
    25a4:	2e 31       	cpi	r18, 0x1E	; 30
    25a6:	3e 07       	cpc	r19, r30
    25a8:	11 f6       	brne	.-124    	; 0x252e <rf_security_set_key+0xd2>
    	key_buf=0; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
	}
	// block counter set 1
    	key_buf=1; 
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	9a 83       	std	Y+2, r25	; 0x02
    25b0:	89 83       	std	Y+1, r24	; 0x01
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    25b2:	40 98       	cbi	0x08, 0	; 8
    25b4:	8e ec       	ldi	r24, 0xCE	; 206
    25b6:	8e bd       	out	0x2e, r24	; 46
    25b8:	0d b4       	in	r0, 0x2d	; 45
    25ba:	07 fe       	sbrs	r0, 7
    25bc:	fd cf       	rjmp	.-6      	; 0x25b8 <rf_security_set_key+0x15c>
    25be:	80 e8       	ldi	r24, 0x80	; 128
    25c0:	8e bd       	out	0x2e, r24	; 46
    25c2:	0d b4       	in	r0, 0x2d	; 45
    25c4:	07 fe       	sbrs	r0, 7
    25c6:	fd cf       	rjmp	.-6      	; 0x25c2 <rf_security_set_key+0x166>
    25c8:	f8 01       	movw	r30, r16
    25ca:	80 81       	ld	r24, Z
    25cc:	8e bd       	out	0x2e, r24	; 46
    25ce:	0d b4       	in	r0, 0x2d	; 45
    25d0:	07 fe       	sbrs	r0, 7
    25d2:	fd cf       	rjmp	.-6      	; 0x25ce <rf_security_set_key+0x172>
    25d4:	31 96       	adiw	r30, 0x01	; 1
    25d6:	ea 15       	cp	r30, r10
    25d8:	fb 05       	cpc	r31, r11
    25da:	b9 f7       	brne	.-18     	; 0x25ca <rf_security_set_key+0x16e>
    25dc:	40 9a       	sbi	0x08, 0	; 8
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
    25de:	40 98       	cbi	0x08, 0	; 8
    25e0:	8e e9       	ldi	r24, 0x9E	; 158
    25e2:	8e bd       	out	0x2e, r24	; 46
    25e4:	0d b4       	in	r0, 0x2d	; 45
    25e6:	07 fe       	sbrs	r0, 7
    25e8:	fd cf       	rjmp	.-6      	; 0x25e4 <rf_security_set_key+0x188>
    25ea:	80 e8       	ldi	r24, 0x80	; 128
    25ec:	8e bd       	out	0x2e, r24	; 46
    25ee:	0d b4       	in	r0, 0x2d	; 45
    25f0:	07 fe       	sbrs	r0, 7
    25f2:	fd cf       	rjmp	.-6      	; 0x25ee <rf_security_set_key+0x192>
    25f4:	f8 01       	movw	r30, r16
    25f6:	80 81       	ld	r24, Z
    25f8:	8e bd       	out	0x2e, r24	; 46
    25fa:	0d b4       	in	r0, 0x2d	; 45
    25fc:	07 fe       	sbrs	r0, 7
    25fe:	fd cf       	rjmp	.-6      	; 0x25fa <rf_security_set_key+0x19e>
    2600:	0f 5f       	subi	r16, 0xFF	; 255
    2602:	1f 4f       	sbci	r17, 0xFF	; 255
    2604:	0a 15       	cp	r16, r10
    2606:	1b 05       	cpc	r17, r11
    2608:	a9 f7       	brne	.-22     	; 0x25f4 <rf_security_set_key+0x198>
    260a:	40 9a       	sbi	0x08, 0	; 8
    260c:	22 96       	adiw	r28, 0x02	; 2
    260e:	0f b6       	in	r0, 0x3f	; 63
    2610:	f8 94       	cli
    2612:	de bf       	out	0x3e, r29	; 62
    2614:	0f be       	out	0x3f, r0	; 63
    2616:	cd bf       	out	0x3d, r28	; 61
    2618:	df 91       	pop	r29
    261a:	cf 91       	pop	r28
    261c:	1f 91       	pop	r17
    261e:	0f 91       	pop	r16
    2620:	ff 90       	pop	r15
    2622:	ef 90       	pop	r14
    2624:	df 90       	pop	r13
    2626:	cf 90       	pop	r12
    2628:	bf 90       	pop	r11
    262a:	af 90       	pop	r10
    262c:	9f 90       	pop	r9
    262e:	8f 90       	pop	r8
    2630:	7f 90       	pop	r7
    2632:	6f 90       	pop	r6
    2634:	08 95       	ret

00002636 <rf_power_up>:
}

void rf_power_up()
{

    DISABLE_GLOBAL_INT();
    2636:	f8 94       	cli
    FASTSPI_STROBE(CC2420_SXOSCON);
    2638:	40 98       	cbi	0x08, 0	; 8
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	8e bd       	out	0x2e, r24	; 46
    263e:	0d b4       	in	r0, 0x2d	; 45
    2640:	07 fe       	sbrs	r0, 7
    2642:	fd cf       	rjmp	.-6      	; 0x263e <rf_power_up+0x8>
    2644:	40 9a       	sbi	0x08, 0	; 8
    nrk_spin_wait_us(OSC_STARTUP_DELAY);
    2646:	88 ee       	ldi	r24, 0xE8	; 232
    2648:	93 e0       	ldi	r25, 0x03	; 3
    264a:	0e 94 04 2c 	call	0x5808	; 0x5808 <nrk_spin_wait_us>
    ENABLE_GLOBAL_INT();
    264e:	78 94       	sei
    2650:	08 95       	ret

00002652 <rf_set_rx>:
}



void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
    2652:	1f 93       	push	r17
    2654:	cf 93       	push	r28
    2656:	df 93       	push	r29
    2658:	ec 01       	movw	r28, r24
    265a:	16 2f       	mov	r17, r22

#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    265c:	80 91 9f 06 	lds	r24, 0x069F
    2660:	90 91 a0 06 	lds	r25, 0x06A0
    2664:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <nrk_sem_pend>
#endif

    FASTSPI_STROBE(CC2420_SFLUSHRX);
    2668:	40 98       	cbi	0x08, 0	; 8
    266a:	88 e0       	ldi	r24, 0x08	; 8
    266c:	8e bd       	out	0x2e, r24	; 46
    266e:	0d b4       	in	r0, 0x2d	; 45
    2670:	07 fe       	sbrs	r0, 7
    2672:	fd cf       	rjmp	.-6      	; 0x266e <rf_set_rx+0x1c>
    2674:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_STROBE(CC2420_SFLUSHRX);
    2676:	40 98       	cbi	0x08, 0	; 8
    2678:	88 e0       	ldi	r24, 0x08	; 8
    267a:	8e bd       	out	0x2e, r24	; 46
    267c:	0d b4       	in	r0, 0x2d	; 45
    267e:	07 fe       	sbrs	r0, 7
    2680:	fd cf       	rjmp	.-6      	; 0x267c <rf_set_rx+0x2a>
    2682:	40 9a       	sbi	0x08, 0	; 8
    halRfSetChannel(channel);
    2684:	81 2f       	mov	r24, r17
    2686:	0e 94 78 09 	call	0x12f0	; 0x12f0 <halRfSetChannel>
    rfSettings.pRxInfo = pRRI;
    268a:	d0 93 a5 06 	sts	0x06A5, r29
    268e:	c0 93 a4 06 	sts	0x06A4, r28

#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    2692:	80 91 9f 06 	lds	r24, 0x069F
    2696:	90 91 a0 06 	lds	r25, 0x06A0
    269a:	0e 94 a7 20 	call	0x414e	; 0x414e <nrk_sem_post>
    269e:	df 91       	pop	r29
    26a0:	cf 91       	pop	r28
    26a2:	1f 91       	pop	r17
    26a4:	08 95       	ret

000026a6 <rf_set_channel>:
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
}
void rf_set_channel( uint8_t channel )
{
    26a6:	1f 93       	push	r17
    26a8:	18 2f       	mov	r17, r24
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    26aa:	80 91 9f 06 	lds	r24, 0x069F
    26ae:	90 91 a0 06 	lds	r25, 0x06A0
    26b2:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <nrk_sem_pend>
#endif
    halRfSetChannel(channel);
    26b6:	81 2f       	mov	r24, r17
    26b8:	0e 94 78 09 	call	0x12f0	; 0x12f0 <halRfSetChannel>
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    26bc:	80 91 9f 06 	lds	r24, 0x069F
    26c0:	90 91 a0 06 	lds	r25, 0x06A0
    26c4:	0e 94 a7 20 	call	0x414e	; 0x414e <nrk_sem_post>
    26c8:	1f 91       	pop	r17
    26ca:	08 95       	ret

000026cc <rf_init>:
//      WORD myAddr
//          The 16-bit short address which is used by this node. Must together with the PAN ID form a
//			unique 32-bit identifier to avoid addressing conflicts. Normally, in a 802.15.4 network, the
//			short address will be given to associated nodes by the PAN coordinator.
//-------------------------------------------------------------------------------------------------------
void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr) {
    26cc:	df 92       	push	r13
    26ce:	ef 92       	push	r14
    26d0:	ff 92       	push	r15
    26d2:	0f 93       	push	r16
    26d4:	1f 93       	push	r17
    26d6:	cf 93       	push	r28
    26d8:	df 93       	push	r29
    26da:	cd b7       	in	r28, 0x3d	; 61
    26dc:	de b7       	in	r29, 0x3e	; 62
    26de:	22 97       	sbiw	r28, 0x02	; 2
    26e0:	0f b6       	in	r0, 0x3f	; 63
    26e2:	f8 94       	cli
    26e4:	de bf       	out	0x3e, r29	; 62
    26e6:	0f be       	out	0x3f, r0	; 63
    26e8:	cd bf       	out	0x3d, r28	; 61
    26ea:	8c 01       	movw	r16, r24
    26ec:	d6 2e       	mov	r13, r22
    26ee:	5a 83       	std	Y+2, r21	; 0x02
    26f0:	49 83       	std	Y+1, r20	; 0x01
    26f2:	79 01       	movw	r14, r18
    uint8_t n;

#ifdef RADIO_PRIORITY_CEILING
   int8_t v;
    radio_sem = nrk_sem_create(1,RADIO_PRIORITY_CEILING);
    26f4:	6a e0       	ldi	r22, 0x0A	; 10
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	0e 94 2c 20 	call	0x4058	; 0x4058 <nrk_sem_create>
    26fc:	90 93 a0 06 	sts	0x06A0, r25
    2700:	80 93 9f 06 	sts	0x069F, r24
    if (radio_sem == NULL)
    2704:	89 2b       	or	r24, r25
    2706:	31 f4       	brne	.+12     	; 0x2714 <rf_init+0x48>
      nrk_kernel_error_add (NRK_SEMAPHORE_CREATE_ERROR, nrk_get_pid ());
    2708:	0e 94 73 23 	call	0x46e6	; 0x46e6 <nrk_get_pid>
    270c:	68 2f       	mov	r22, r24
    270e:	8f e0       	ldi	r24, 0x0F	; 15
    2710:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <nrk_kernel_error_add>

  v = nrk_sem_pend (radio_sem);
    2714:	80 91 9f 06 	lds	r24, 0x069F
    2718:	90 91 a0 06 	lds	r25, 0x06A0
    271c:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <nrk_sem_pend>
  if (v == NRK_ERROR) {
    2720:	8f 3f       	cpi	r24, 0xFF	; 255
    2722:	21 f4       	brne	.+8      	; 0x272c <rf_init+0x60>
    nrk_kprintf (PSTR ("CC2420 ERROR:  Access to semaphore failed\r\n"));
    2724:	8a e5       	ldi	r24, 0x5A	; 90
    2726:	92 e0       	ldi	r25, 0x02	; 2
    2728:	0e 94 3d 19 	call	0x327a	; 0x327a <nrk_kprintf>
  }
#endif

    // Make sure that the voltage regulator is on, and that the reset pin is inactive
    SET_VREG_ACTIVE();
    272c:	15 9a       	sbi	0x02, 5	; 2
    halWait(1000);
    272e:	88 ee       	ldi	r24, 0xE8	; 232
    2730:	93 e0       	ldi	r25, 0x03	; 3
    2732:	0e 94 9e 19 	call	0x333c	; 0x333c <halWait>
    SET_RESET_ACTIVE();
    2736:	16 98       	cbi	0x02, 6	; 2
    halWait(1);
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	0e 94 9e 19 	call	0x333c	; 0x333c <halWait>
    SET_RESET_INACTIVE();
    2740:	16 9a       	sbi	0x02, 6	; 2
    halWait(100);
    2742:	84 e6       	ldi	r24, 0x64	; 100
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	0e 94 9e 19 	call	0x333c	; 0x333c <halWait>
    // Initialize the FIFOP external interrupt
    //FIFOP_INT_INIT();
    //ENABLE_FIFOP_INT();

    // Turn off all interrupts while we're accessing the CC2420 registers
	DISABLE_GLOBAL_INT();
    274a:	f8 94       	cli

    FASTSPI_STROBE(CC2420_SXOSCON);
    274c:	40 98       	cbi	0x08, 0	; 8
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	8e bd       	out	0x2e, r24	; 46
    2752:	0d b4       	in	r0, 0x2d	; 45
    2754:	07 fe       	sbrs	r0, 7
    2756:	fd cf       	rjmp	.-6      	; 0x2752 <rf_init+0x86>
    2758:	40 9a       	sbi	0x08, 0	; 8
    mdmctrl0=0x02E2;
    275a:	82 ee       	ldi	r24, 0xE2	; 226
    275c:	92 e0       	ldi	r25, 0x02	; 2
    275e:	90 93 a3 06 	sts	0x06A3, r25
    2762:	80 93 a2 06 	sts	0x06A2, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  // Std Preamble, CRC, no auto ack, no hw addr decoding 
    2766:	40 98       	cbi	0x08, 0	; 8
    2768:	81 e1       	ldi	r24, 0x11	; 17
    276a:	8e bd       	out	0x2e, r24	; 46
    276c:	0d b4       	in	r0, 0x2d	; 45
    276e:	07 fe       	sbrs	r0, 7
    2770:	fd cf       	rjmp	.-6      	; 0x276c <rf_init+0xa0>
    2772:	82 e0       	ldi	r24, 0x02	; 2
    2774:	8e bd       	out	0x2e, r24	; 46
    2776:	0d b4       	in	r0, 0x2d	; 45
    2778:	07 fe       	sbrs	r0, 7
    277a:	fd cf       	rjmp	.-6      	; 0x2776 <rf_init+0xaa>
    277c:	82 ee       	ldi	r24, 0xE2	; 226
    277e:	8e bd       	out	0x2e, r24	; 46
    2780:	0d b4       	in	r0, 0x2d	; 45
    2782:	07 fe       	sbrs	r0, 7
    2784:	fd cf       	rjmp	.-6      	; 0x2780 <rf_init+0xb4>
    2786:	40 9a       	sbi	0x08, 0	; 8
    //FASTSPI_SETREG(CC2420_MDMCTRL0, 0x0AF2);  // Turn on automatic packet acknowledgment
						// Turn on hw addre decoding 
    FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0500); // Set the correlation threshold = 20
    2788:	40 98       	cbi	0x08, 0	; 8
    278a:	82 e1       	ldi	r24, 0x12	; 18
    278c:	8e bd       	out	0x2e, r24	; 46
    278e:	0d b4       	in	r0, 0x2d	; 45
    2790:	07 fe       	sbrs	r0, 7
    2792:	fd cf       	rjmp	.-6      	; 0x278e <rf_init+0xc2>
    2794:	85 e0       	ldi	r24, 0x05	; 5
    2796:	8e bd       	out	0x2e, r24	; 46
    2798:	0d b4       	in	r0, 0x2d	; 45
    279a:	07 fe       	sbrs	r0, 7
    279c:	fd cf       	rjmp	.-6      	; 0x2798 <rf_init+0xcc>
    279e:	1e bc       	out	0x2e, r1	; 46
    27a0:	0d b4       	in	r0, 0x2d	; 45
    27a2:	07 fe       	sbrs	r0, 7
    27a4:	fd cf       	rjmp	.-6      	; 0x27a0 <rf_init+0xd4>
    27a6:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_IOCFG0, 0x007F);   // Set the FIFOP threshold to maximum
    27a8:	40 98       	cbi	0x08, 0	; 8
    27aa:	8c e1       	ldi	r24, 0x1C	; 28
    27ac:	8e bd       	out	0x2e, r24	; 46
    27ae:	0d b4       	in	r0, 0x2d	; 45
    27b0:	07 fe       	sbrs	r0, 7
    27b2:	fd cf       	rjmp	.-6      	; 0x27ae <rf_init+0xe2>
    27b4:	1e bc       	out	0x2e, r1	; 46
    27b6:	0d b4       	in	r0, 0x2d	; 45
    27b8:	07 fe       	sbrs	r0, 7
    27ba:	fd cf       	rjmp	.-6      	; 0x27b6 <rf_init+0xea>
    27bc:	8f e7       	ldi	r24, 0x7F	; 127
    27be:	8e bd       	out	0x2e, r24	; 46
    27c0:	0d b4       	in	r0, 0x2d	; 45
    27c2:	07 fe       	sbrs	r0, 7
    27c4:	fd cf       	rjmp	.-6      	; 0x27c0 <rf_init+0xf4>
    27c6:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security"
    27c8:	40 98       	cbi	0x08, 0	; 8
    27ca:	89 e1       	ldi	r24, 0x19	; 25
    27cc:	8e bd       	out	0x2e, r24	; 46
    27ce:	0d b4       	in	r0, 0x2d	; 45
    27d0:	07 fe       	sbrs	r0, 7
    27d2:	fd cf       	rjmp	.-6      	; 0x27ce <rf_init+0x102>
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	8e bd       	out	0x2e, r24	; 46
    27d8:	0d b4       	in	r0, 0x2d	; 45
    27da:	07 fe       	sbrs	r0, 7
    27dc:	fd cf       	rjmp	.-6      	; 0x27d8 <rf_init+0x10c>
    27de:	84 ec       	ldi	r24, 0xC4	; 196
    27e0:	8e bd       	out	0x2e, r24	; 46
    27e2:	0d b4       	in	r0, 0x2d	; 45
    27e4:	07 fe       	sbrs	r0, 7
    27e6:	fd cf       	rjmp	.-6      	; 0x27e2 <rf_init+0x116>
    27e8:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_RXCTRL1, 0x1A56); // All default except
    27ea:	40 98       	cbi	0x08, 0	; 8
    27ec:	87 e1       	ldi	r24, 0x17	; 23
    27ee:	8e bd       	out	0x2e, r24	; 46
    27f0:	0d b4       	in	r0, 0x2d	; 45
    27f2:	07 fe       	sbrs	r0, 7
    27f4:	fd cf       	rjmp	.-6      	; 0x27f0 <rf_init+0x124>
    27f6:	8a e1       	ldi	r24, 0x1A	; 26
    27f8:	8e bd       	out	0x2e, r24	; 46
    27fa:	0d b4       	in	r0, 0x2d	; 45
    27fc:	07 fe       	sbrs	r0, 7
    27fe:	fd cf       	rjmp	.-6      	; 0x27fa <rf_init+0x12e>
    2800:	86 e5       	ldi	r24, 0x56	; 86
    2802:	8e bd       	out	0x2e, r24	; 46
    2804:	0d b4       	in	r0, 0x2d	; 45
    2806:	07 fe       	sbrs	r0, 7
    2808:	fd cf       	rjmp	.-6      	; 0x2804 <rf_init+0x138>
    280a:	40 9a       	sbi	0x08, 0	; 8
    nrk_spin_wait_us(500);
    
   printf( "myAddr=%d\r\n",myAddr );
*/

    nrk_spin_wait_us(500);
    280c:	84 ef       	ldi	r24, 0xF4	; 244
    280e:	91 e0       	ldi	r25, 0x01	; 1
    2810:	0e 94 04 2c 	call	0x5808	; 0x5808 <nrk_spin_wait_us>
    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
    2814:	40 98       	cbi	0x08, 0	; 8
    2816:	88 ee       	ldi	r24, 0xE8	; 232
    2818:	8e bd       	out	0x2e, r24	; 46
    281a:	0d b4       	in	r0, 0x2d	; 45
    281c:	07 fe       	sbrs	r0, 7
    281e:	fd cf       	rjmp	.-6      	; 0x281a <rf_init+0x14e>
    2820:	80 e8       	ldi	r24, 0x80	; 128
    2822:	8e bd       	out	0x2e, r24	; 46
    2824:	0d b4       	in	r0, 0x2d	; 45
    2826:	07 fe       	sbrs	r0, 7
    2828:	fd cf       	rjmp	.-6      	; 0x2824 <rf_init+0x158>
    282a:	fe 01       	movw	r30, r28
    282c:	31 96       	adiw	r30, 0x01	; 1
    282e:	9e 01       	movw	r18, r28
    2830:	2d 5f       	subi	r18, 0xFD	; 253
    2832:	3f 4f       	sbci	r19, 0xFF	; 255
    2834:	80 81       	ld	r24, Z
    2836:	8e bd       	out	0x2e, r24	; 46
    2838:	0d b4       	in	r0, 0x2d	; 45
    283a:	07 fe       	sbrs	r0, 7
    283c:	fd cf       	rjmp	.-6      	; 0x2838 <rf_init+0x16c>
    283e:	31 96       	adiw	r30, 0x01	; 1
    2840:	e2 17       	cp	r30, r18
    2842:	f3 07       	cpc	r31, r19
    2844:	b9 f7       	brne	.-18     	; 0x2834 <rf_init+0x168>
    2846:	40 9a       	sbi	0x08, 0	; 8
    nrk_spin_wait_us(500);
    2848:	84 ef       	ldi	r24, 0xF4	; 244
    284a:	91 e0       	ldi	r25, 0x01	; 1
    284c:	0e 94 04 2c 	call	0x5808	; 0x5808 <nrk_spin_wait_us>

  	ENABLE_GLOBAL_INT();
    2850:	78 94       	sei

    // Set the RF channel
    halRfSetChannel(channel);
    2852:	8d 2d       	mov	r24, r13
    2854:	0e 94 78 09 	call	0x12f0	; 0x12f0 <halRfSetChannel>

    // Turn interrupts back on
	ENABLE_GLOBAL_INT();
    2858:	78 94       	sei

	// Set the protocol configuration
	rfSettings.pRxInfo = pRRI;
    285a:	10 93 a5 06 	sts	0x06A5, r17
    285e:	00 93 a4 06 	sts	0x06A4, r16
	rfSettings.panId = panId;
    2862:	89 81       	ldd	r24, Y+1	; 0x01
    2864:	9a 81       	ldd	r25, Y+2	; 0x02
    2866:	90 93 a9 06 	sts	0x06A9, r25
    286a:	80 93 a8 06 	sts	0x06A8, r24
	rfSettings.myAddr = myAddr;
    286e:	f0 92 ab 06 	sts	0x06AB, r15
    2872:	e0 92 aa 06 	sts	0x06AA, r14
	rfSettings.txSeqNumber = 0;
    2876:	10 92 a6 06 	sts	0x06A6, r1
        rfSettings.receiveOn = FALSE;
    287a:	10 92 ac 06 	sts	0x06AC, r1

	// Wait for the crystal oscillator to become stable
    halRfWaitForCrystalOscillator();
    287e:	0e 94 97 09 	call	0x132e	; 0x132e <halRfWaitForCrystalOscillator>
//    FASTSPI_WRITE_RAM_LE(&myAddr, CC2420RAM_SHORTADDR, 2, n);
//    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
  //	ENABLE_GLOBAL_INT();

#ifdef RADIO_PRIORITY_CEILING
  v = nrk_sem_post (radio_sem);
    2882:	80 91 9f 06 	lds	r24, 0x069F
    2886:	90 91 a0 06 	lds	r25, 0x06A0
    288a:	0e 94 a7 20 	call	0x414e	; 0x414e <nrk_sem_post>
  if (v == NRK_ERROR) {
    288e:	8f 3f       	cpi	r24, 0xFF	; 255
    2890:	39 f4       	brne	.+14     	; 0x28a0 <rf_init+0x1d4>
    nrk_kprintf (PSTR ("CC2420 ERROR:  Release of semaphore failed\r\n"));
    2892:	8d e2       	ldi	r24, 0x2D	; 45
    2894:	92 e0       	ldi	r25, 0x02	; 2
    2896:	0e 94 3d 19 	call	0x327a	; 0x327a <nrk_kprintf>
    _nrk_errno_set (2);
    289a:	82 e0       	ldi	r24, 0x02	; 2
    289c:	0e 94 57 1c 	call	0x38ae	; 0x38ae <_nrk_errno_set>
  }
#endif

auto_ack_enable=0;
    28a0:	10 92 af 06 	sts	0x06AF, r1
security_enable=0;
    28a4:	10 92 a1 06 	sts	0x06A1, r1
last_pkt_encrypted=0;
    28a8:	10 92 b0 06 	sts	0x06B0, r1
    28ac:	22 96       	adiw	r28, 0x02	; 2
    28ae:	0f b6       	in	r0, 0x3f	; 63
    28b0:	f8 94       	cli
    28b2:	de bf       	out	0x3e, r29	; 62
    28b4:	0f be       	out	0x3f, r0	; 63
    28b6:	cd bf       	out	0x3d, r28	; 61
    28b8:	df 91       	pop	r29
    28ba:	cf 91       	pop	r28
    28bc:	1f 91       	pop	r17
    28be:	0f 91       	pop	r16
    28c0:	ff 90       	pop	r15
    28c2:	ef 90       	pop	r14
    28c4:	df 90       	pop	r13
    28c6:	08 95       	ret

000028c8 <cc259x_tx>:
}


void cc259x_tx()
{
    nrk_gpio_set(NRK_DEBUG_1);
    28c8:	80 91 7e 02 	lds	r24, 0x027E
    28cc:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <nrk_gpio_set>
    nrk_gpio_set(NRK_DEBUG_0);
    28d0:	80 91 7d 02 	lds	r24, 0x027D
    28d4:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <nrk_gpio_set>
    28d8:	08 95       	ret

000028da <cc259x_rx>:

#define OSC_STARTUP_DELAY	1000

void cc259x_rx()
{
    nrk_gpio_set(NRK_DEBUG_1);
    28da:	80 91 7e 02 	lds	r24, 0x027E
    28de:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <nrk_gpio_set>
    nrk_gpio_clr(NRK_DEBUG_0);
    28e2:	80 91 7d 02 	lds	r24, 0x027D
    28e6:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <nrk_gpio_clr>
    28ea:	08 95       	ret

000028ec <getc1>:
 *  This is a callback if you require immediate response to a packet
 */
RF_RX_INFO *rf_rx_callback (RF_RX_INFO * pRRI)
{
    // Any code here gets called the instant a packet is received from the interrupt   
    return pRRI;
    28ec:	20 91 b1 03 	lds	r18, 0x03B1
    28f0:	80 91 b2 03 	lds	r24, 0x03B2
    28f4:	28 17       	cp	r18, r24
    28f6:	81 f0       	breq	.+32     	; 0x2918 <getc1+0x2c>
}

    28f8:	e2 2f       	mov	r30, r18
    28fa:	ff 27       	eor	r31, r31
    28fc:	ed 54       	subi	r30, 0x4D	; 77
    28fe:	fc 4f       	sbci	r31, 0xFC	; 252
    2900:	e0 81       	ld	r30, Z
int8_t bmac_encryption_set_ctr_counter(uint8_t *counter, uint8_t len)
    2902:	82 2f       	mov	r24, r18
    2904:	8f 5f       	subi	r24, 0xFF	; 255
    2906:	80 93 b1 03 	sts	0x03B1, r24
{
    290a:	80 31       	cpi	r24, 0x10	; 16
    290c:	11 f4       	brne	.+4      	; 0x2912 <getc1+0x26>
    290e:	10 92 b1 03 	sts	0x03B1, r1
if(len!=4 ) return NRK_ERROR;
    2912:	8e 2f       	mov	r24, r30
    2914:	99 27       	eor	r25, r25
    2916:	08 95       	ret
rf_security_set_ctr_counter(counter);
   return NRK_OK;
}
    2918:	80 91 c8 00 	lds	r24, 0x00C8
    291c:	87 ff       	sbrs	r24, 7
    291e:	fc cf       	rjmp	.-8      	; 0x2918 <getc1+0x2c>
    2920:	80 91 c8 00 	lds	r24, 0x00C8
    2924:	8f 77       	andi	r24, 0x7F	; 127
    2926:	80 93 c8 00 	sts	0x00C8, r24
    292a:	80 91 ce 00 	lds	r24, 0x00CE

    292e:	99 27       	eor	r25, r25
int8_t bmac_tx_reserve_set( nrk_time_t *period, uint16_t pkts )
    2930:	08 95       	ret

00002932 <nrk_uart_data_ready>:
{

#ifdef NRK_MAX_RESERVES
// Create a reserve if it doesn't exist
    2932:	88 23       	and	r24, r24
    2934:	51 f4       	brne	.+20     	; 0x294a <nrk_uart_data_ready+0x18>
if(tx_reserve==-1) tx_reserve=nrk_reserve_create();
if(tx_reserve>=0)
    2936:	80 91 c0 00 	lds	r24, 0x00C0
    293a:	99 27       	eor	r25, r25
    293c:	87 fd       	sbrc	r24, 7
    293e:	90 95       	com	r25
    2940:	88 27       	eor	r24, r24
    2942:	99 0f       	add	r25, r25
    2944:	88 1f       	adc	r24, r24
    2946:	99 27       	eor	r25, r25
    2948:	08 95       	ret
  return nrk_reserve_set(tx_reserve, period,pkts,NULL);
else return NRK_ERROR;
    294a:	81 30       	cpi	r24, 0x01	; 1
    294c:	19 f0       	breq	.+6      	; 0x2954 <nrk_uart_data_ready+0x22>
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	08 95       	ret
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	90 91 b1 03 	lds	r25, 0x03B1
    295c:	80 91 b2 03 	lds	r24, 0x03B2
    2960:	98 17       	cp	r25, r24
    2962:	11 f0       	breq	.+4      	; 0x2968 <nrk_uart_data_ready+0x36>
    2964:	21 e0       	ldi	r18, 0x01	; 1
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	c9 01       	movw	r24, r18
#else
return NRK_ERROR;
#endif
}

    296a:	08 95       	ret

0000296c <PORT_INIT>:
nrk_sig_mask_t event;

if(bmac_rx_pkt_ready()==1) return NRK_OK;

    nrk_signal_register(bmac_rx_pkt_signal); 
    event=nrk_event_wait (SIG(bmac_rx_pkt_signal));
    296c:	85 b7       	in	r24, 0x35	; 53
    296e:	80 61       	ori	r24, 0x10	; 16
    2970:	85 bf       	out	0x35, r24	; 53

// Check if it was a time out instead of packet RX signal
if((event & SIG(bmac_rx_pkt_signal)) == 0 ) return NRK_ERROR;
else return NRK_OK;
}

    2972:	86 e0       	ldi	r24, 0x06	; 6
    2974:	84 b9       	out	0x04, r24	; 4
int8_t bmac_rx_pkt_set_buffer(uint8_t *buf, uint8_t size)
    2976:	85 b9       	out	0x05, r24	; 5
{
if(buf==NULL) return NRK_ERROR;
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	87 b9       	out	0x07, r24	; 7
    bmac_rfRxInfo.pPayload = buf;
    297c:	88 b9       	out	0x08, r24	; 8
    bmac_rfRxInfo.max_length = size;
    297e:	8c e3       	ldi	r24, 0x3C	; 60
    2980:	8d b9       	out	0x0d, r24	; 13
    rx_buf_empty=1;
    2982:	8b e0       	ldi	r24, 0x0B	; 11
    2984:	8a b9       	out	0x0a, r24	; 10
return NRK_OK;
    2986:	8e e3       	ldi	r24, 0x3E	; 62
    2988:	8e b9       	out	0x0e, r24	; 14
}
    298a:	88 e7       	ldi	r24, 0x78	; 120
    298c:	81 b9       	out	0x01, r24	; 1

    298e:	16 9a       	sbi	0x02, 6	; 2
    2990:	08 95       	ret

00002992 <nrk_setup_ports>:
}

int8_t  bmac_addr_decode_dest_mac(uint16_t dest) 
{
bmac_rfTxInfo.destAddr=dest;
return NRK_OK;
    2992:	0e 94 b6 14 	call	0x296c	; 0x296c <PORT_INIT>
}
    2996:	80 e5       	ldi	r24, 0x50	; 80
    2998:	8c bd       	out	0x2c, r24	; 44
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	8d bd       	out	0x2d, r24	; 45
    299e:	08 95       	ret

000029a0 <nrk_gpio_set>:
    cca_active=true;
    rx_failure_cnt=0;
    #ifdef NRK_SW_WDT
	#ifdef BMAC_SW_WDT_ID
	
	_bmac_check_period.secs=30;
    29a0:	8f 3f       	cpi	r24, 0xFF	; 255
    29a2:	09 f4       	brne	.+2      	; 0x29a6 <nrk_gpio_set+0x6>
    29a4:	7f c0       	rjmp	.+254    	; 0x2aa4 <nrk_gpio_set+0x104>
	_bmac_check_period.nano_secs=0;
    29a6:	48 2f       	mov	r20, r24
    29a8:	55 27       	eor	r21, r21
    29aa:	9a 01       	movw	r18, r20
    29ac:	27 70       	andi	r18, 0x07	; 7
    29ae:	30 70       	andi	r19, 0x00	; 0
    29b0:	22 30       	cpi	r18, 0x02	; 2
    29b2:	31 05       	cpc	r19, r1
    29b4:	a9 f1       	breq	.+106    	; 0x2a20 <nrk_gpio_set+0x80>
    29b6:	23 30       	cpi	r18, 0x03	; 3
    29b8:	31 05       	cpc	r19, r1
    29ba:	44 f4       	brge	.+16     	; 0x29cc <nrk_gpio_set+0x2c>
    29bc:	21 15       	cp	r18, r1
    29be:	31 05       	cpc	r19, r1
    29c0:	89 f0       	breq	.+34     	; 0x29e4 <nrk_gpio_set+0x44>
    29c2:	21 30       	cpi	r18, 0x01	; 1
    29c4:	31 05       	cpc	r19, r1
    29c6:	09 f0       	breq	.+2      	; 0x29ca <nrk_gpio_set+0x2a>
    29c8:	6d c0       	rjmp	.+218    	; 0x2aa4 <nrk_gpio_set+0x104>
    29ca:	1c c0       	rjmp	.+56     	; 0x2a04 <nrk_gpio_set+0x64>
    29cc:	24 30       	cpi	r18, 0x04	; 4
    29ce:	31 05       	cpc	r19, r1
    29d0:	09 f4       	brne	.+2      	; 0x29d4 <nrk_gpio_set+0x34>
    29d2:	46 c0       	rjmp	.+140    	; 0x2a60 <nrk_gpio_set+0xc0>
    29d4:	24 30       	cpi	r18, 0x04	; 4
    29d6:	31 05       	cpc	r19, r1
    29d8:	9c f1       	brlt	.+102    	; 0x2a40 <nrk_gpio_set+0xa0>
    29da:	25 30       	cpi	r18, 0x05	; 5
    29dc:	31 05       	cpc	r19, r1
    29de:	09 f0       	breq	.+2      	; 0x29e2 <nrk_gpio_set+0x42>
    29e0:	61 c0       	rjmp	.+194    	; 0x2aa4 <nrk_gpio_set+0x104>
    29e2:	4e c0       	rjmp	.+156    	; 0x2a80 <nrk_gpio_set+0xe0>
	nrk_sw_wdt_init(BMAC_SW_WDT_ID, &_bmac_check_period, NULL );
	nrk_sw_wdt_start(BMAC_SW_WDT_ID);
    29e4:	22 b1       	in	r18, 0x02	; 2
    29e6:	a3 e0       	ldi	r26, 0x03	; 3
    29e8:	56 95       	lsr	r21
    29ea:	47 95       	ror	r20
    29ec:	aa 95       	dec	r26
    29ee:	e1 f7       	brne	.-8      	; 0x29e8 <nrk_gpio_set+0x48>
    29f0:	81 e0       	ldi	r24, 0x01	; 1
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	02 c0       	rjmp	.+4      	; 0x29fa <nrk_gpio_set+0x5a>
    29f6:	88 0f       	add	r24, r24
    29f8:	99 1f       	adc	r25, r25
    29fa:	4a 95       	dec	r20
    29fc:	e2 f7       	brpl	.-8      	; 0x29f6 <nrk_gpio_set+0x56>
    29fe:	28 2b       	or	r18, r24
    2a00:	22 b9       	out	0x02, r18	; 2
    2a02:	4d c0       	rjmp	.+154    	; 0x2a9e <nrk_gpio_set+0xfe>
	#endif
    #endif
    2a04:	85 b1       	in	r24, 0x05	; 5
    2a06:	f3 e0       	ldi	r31, 0x03	; 3
    2a08:	56 95       	lsr	r21
    2a0a:	47 95       	ror	r20
    2a0c:	fa 95       	dec	r31
    2a0e:	e1 f7       	brne	.-8      	; 0x2a08 <nrk_gpio_set+0x68>
    2a10:	02 c0       	rjmp	.+4      	; 0x2a16 <nrk_gpio_set+0x76>
    2a12:	22 0f       	add	r18, r18
    2a14:	33 1f       	adc	r19, r19
    2a16:	4a 95       	dec	r20
    2a18:	e2 f7       	brpl	.-8      	; 0x2a12 <nrk_gpio_set+0x72>
    2a1a:	82 2b       	or	r24, r18
    2a1c:	85 b9       	out	0x05, r24	; 5
    2a1e:	3f c0       	rjmp	.+126    	; 0x2a9e <nrk_gpio_set+0xfe>


    2a20:	28 b1       	in	r18, 0x08	; 8
    2a22:	e3 e0       	ldi	r30, 0x03	; 3
    2a24:	56 95       	lsr	r21
    2a26:	47 95       	ror	r20
    2a28:	ea 95       	dec	r30
    2a2a:	e1 f7       	brne	.-8      	; 0x2a24 <nrk_gpio_set+0x84>
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	02 c0       	rjmp	.+4      	; 0x2a36 <nrk_gpio_set+0x96>
    2a32:	88 0f       	add	r24, r24
    2a34:	99 1f       	adc	r25, r25
    2a36:	4a 95       	dec	r20
    2a38:	e2 f7       	brpl	.-8      	; 0x2a32 <nrk_gpio_set+0x92>
    2a3a:	28 2b       	or	r18, r24
    2a3c:	28 b9       	out	0x08, r18	; 8
    2a3e:	2f c0       	rjmp	.+94     	; 0x2a9e <nrk_gpio_set+0xfe>

    _bmac_check_period.secs=0;
    2a40:	2b b1       	in	r18, 0x0b	; 11
    2a42:	73 e0       	ldi	r23, 0x03	; 3
    2a44:	56 95       	lsr	r21
    2a46:	47 95       	ror	r20
    2a48:	7a 95       	dec	r23
    2a4a:	e1 f7       	brne	.-8      	; 0x2a44 <nrk_gpio_set+0xa4>
    2a4c:	81 e0       	ldi	r24, 0x01	; 1
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	02 c0       	rjmp	.+4      	; 0x2a56 <nrk_gpio_set+0xb6>
    2a52:	88 0f       	add	r24, r24
    2a54:	99 1f       	adc	r25, r25
    2a56:	4a 95       	dec	r20
    2a58:	e2 f7       	brpl	.-8      	; 0x2a52 <nrk_gpio_set+0xb2>
    2a5a:	28 2b       	or	r18, r24
    2a5c:	2b b9       	out	0x0b, r18	; 11
    2a5e:	1f c0       	rjmp	.+62     	; 0x2a9e <nrk_gpio_set+0xfe>
    _bmac_check_period.nano_secs=BMAC_DEFAULT_CHECK_RATE_MS*NANOS_PER_MS;
    bmac_rx_pkt_signal=nrk_signal_create();
    2a60:	2e b1       	in	r18, 0x0e	; 14
    2a62:	63 e0       	ldi	r22, 0x03	; 3
    2a64:	56 95       	lsr	r21
    2a66:	47 95       	ror	r20
    2a68:	6a 95       	dec	r22
    2a6a:	e1 f7       	brne	.-8      	; 0x2a64 <nrk_gpio_set+0xc4>
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	02 c0       	rjmp	.+4      	; 0x2a76 <nrk_gpio_set+0xd6>
    2a72:	88 0f       	add	r24, r24
    2a74:	99 1f       	adc	r25, r25
    2a76:	4a 95       	dec	r20
    2a78:	e2 f7       	brpl	.-8      	; 0x2a72 <nrk_gpio_set+0xd2>
    2a7a:	28 2b       	or	r18, r24
    2a7c:	2e b9       	out	0x0e, r18	; 14
    2a7e:	0f c0       	rjmp	.+30     	; 0x2a9e <nrk_gpio_set+0xfe>
    if(bmac_rx_pkt_signal==NRK_ERROR)
	{
    2a80:	21 b3       	in	r18, 0x11	; 17
    2a82:	33 e0       	ldi	r19, 0x03	; 3
    2a84:	56 95       	lsr	r21
    2a86:	47 95       	ror	r20
    2a88:	3a 95       	dec	r19
    2a8a:	e1 f7       	brne	.-8      	; 0x2a84 <nrk_gpio_set+0xe4>
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	02 c0       	rjmp	.+4      	; 0x2a96 <nrk_gpio_set+0xf6>
    2a92:	88 0f       	add	r24, r24
    2a94:	99 1f       	adc	r25, r25
    2a96:	4a 95       	dec	r20
    2a98:	e2 f7       	brpl	.-8      	; 0x2a92 <nrk_gpio_set+0xf2>
    2a9a:	28 2b       	or	r18, r24
    2a9c:	21 bb       	out	0x11, r18	; 17
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	08 95       	ret
    2aa4:	8f ef       	ldi	r24, 0xFF	; 255
    2aa6:	9f ef       	ldi	r25, 0xFF	; 255
	nrk_kprintf(PSTR("BMAC ERROR: creating rx signal failed\r\n"));
	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
	return NRK_ERROR;
	}
    2aa8:	08 95       	ret

00002aaa <nrk_gpio_clr>:
    bmac_tx_pkt_done_signal=nrk_signal_create();
    if(bmac_tx_pkt_done_signal==NRK_ERROR)
	{
	nrk_kprintf(PSTR("BMAC ERROR: creating tx signal failed\r\n"));
    2aaa:	8f 3f       	cpi	r24, 0xFF	; 255
    2aac:	09 f4       	brne	.+2      	; 0x2ab0 <nrk_gpio_clr+0x6>
    2aae:	86 c0       	rjmp	.+268    	; 0x2bbc <nrk_gpio_clr+0x112>
	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
    2ab0:	48 2f       	mov	r20, r24
    2ab2:	55 27       	eor	r21, r21
    2ab4:	9a 01       	movw	r18, r20
    2ab6:	27 70       	andi	r18, 0x07	; 7
    2ab8:	30 70       	andi	r19, 0x00	; 0
    2aba:	22 30       	cpi	r18, 0x02	; 2
    2abc:	31 05       	cpc	r19, r1
    2abe:	c1 f1       	breq	.+112    	; 0x2b30 <nrk_gpio_clr+0x86>
    2ac0:	23 30       	cpi	r18, 0x03	; 3
    2ac2:	31 05       	cpc	r19, r1
    2ac4:	44 f4       	brge	.+16     	; 0x2ad6 <nrk_gpio_clr+0x2c>
    2ac6:	21 15       	cp	r18, r1
    2ac8:	31 05       	cpc	r19, r1
    2aca:	89 f0       	breq	.+34     	; 0x2aee <nrk_gpio_clr+0x44>
    2acc:	21 30       	cpi	r18, 0x01	; 1
    2ace:	31 05       	cpc	r19, r1
    2ad0:	09 f0       	breq	.+2      	; 0x2ad4 <nrk_gpio_clr+0x2a>
    2ad2:	74 c0       	rjmp	.+232    	; 0x2bbc <nrk_gpio_clr+0x112>
    2ad4:	1d c0       	rjmp	.+58     	; 0x2b10 <nrk_gpio_clr+0x66>
    2ad6:	24 30       	cpi	r18, 0x04	; 4
    2ad8:	31 05       	cpc	r19, r1
    2ada:	09 f4       	brne	.+2      	; 0x2ade <nrk_gpio_clr+0x34>
    2adc:	4b c0       	rjmp	.+150    	; 0x2b74 <nrk_gpio_clr+0xca>
    2ade:	24 30       	cpi	r18, 0x04	; 4
    2ae0:	31 05       	cpc	r19, r1
    2ae2:	bc f1       	brlt	.+110    	; 0x2b52 <nrk_gpio_clr+0xa8>
    2ae4:	25 30       	cpi	r18, 0x05	; 5
    2ae6:	31 05       	cpc	r19, r1
    2ae8:	09 f0       	breq	.+2      	; 0x2aec <nrk_gpio_clr+0x42>
    2aea:	68 c0       	rjmp	.+208    	; 0x2bbc <nrk_gpio_clr+0x112>
    2aec:	54 c0       	rjmp	.+168    	; 0x2b96 <nrk_gpio_clr+0xec>
	return NRK_ERROR;
	}
    2aee:	22 b1       	in	r18, 0x02	; 2
    2af0:	73 e0       	ldi	r23, 0x03	; 3
    2af2:	56 95       	lsr	r21
    2af4:	47 95       	ror	r20
    2af6:	7a 95       	dec	r23
    2af8:	e1 f7       	brne	.-8      	; 0x2af2 <nrk_gpio_clr+0x48>
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	02 c0       	rjmp	.+4      	; 0x2b04 <nrk_gpio_clr+0x5a>
    2b00:	88 0f       	add	r24, r24
    2b02:	99 1f       	adc	r25, r25
    2b04:	4a 95       	dec	r20
    2b06:	e2 f7       	brpl	.-8      	; 0x2b00 <nrk_gpio_clr+0x56>
    2b08:	80 95       	com	r24
    2b0a:	82 23       	and	r24, r18
    2b0c:	82 b9       	out	0x02, r24	; 2
    2b0e:	53 c0       	rjmp	.+166    	; 0x2bb6 <nrk_gpio_clr+0x10c>
    bmac_enable_signal=nrk_signal_create();
    if(bmac_enable_signal==NRK_ERROR)
    2b10:	95 b1       	in	r25, 0x05	; 5
    2b12:	63 e0       	ldi	r22, 0x03	; 3
    2b14:	56 95       	lsr	r21
    2b16:	47 95       	ror	r20
    2b18:	6a 95       	dec	r22
    2b1a:	e1 f7       	brne	.-8      	; 0x2b14 <nrk_gpio_clr+0x6a>
    2b1c:	02 c0       	rjmp	.+4      	; 0x2b22 <nrk_gpio_clr+0x78>
    2b1e:	22 0f       	add	r18, r18
    2b20:	33 1f       	adc	r19, r19
    2b22:	4a 95       	dec	r20
    2b24:	e2 f7       	brpl	.-8      	; 0x2b1e <nrk_gpio_clr+0x74>
    2b26:	82 2f       	mov	r24, r18
    2b28:	80 95       	com	r24
    2b2a:	89 23       	and	r24, r25
    2b2c:	85 b9       	out	0x05, r24	; 5
    2b2e:	43 c0       	rjmp	.+134    	; 0x2bb6 <nrk_gpio_clr+0x10c>
	{
	nrk_kprintf(PSTR("BMAC ERROR: creating enable signal failed\r\n"));
    2b30:	28 b1       	in	r18, 0x08	; 8
    2b32:	33 e0       	ldi	r19, 0x03	; 3
    2b34:	56 95       	lsr	r21
    2b36:	47 95       	ror	r20
    2b38:	3a 95       	dec	r19
    2b3a:	e1 f7       	brne	.-8      	; 0x2b34 <nrk_gpio_clr+0x8a>
    2b3c:	81 e0       	ldi	r24, 0x01	; 1
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	02 c0       	rjmp	.+4      	; 0x2b46 <nrk_gpio_clr+0x9c>
    2b42:	88 0f       	add	r24, r24
    2b44:	99 1f       	adc	r25, r25
    2b46:	4a 95       	dec	r20
    2b48:	e2 f7       	brpl	.-8      	; 0x2b42 <nrk_gpio_clr+0x98>
    2b4a:	80 95       	com	r24
    2b4c:	82 23       	and	r24, r18
    2b4e:	88 b9       	out	0x08, r24	; 8
    2b50:	32 c0       	rjmp	.+100    	; 0x2bb6 <nrk_gpio_clr+0x10c>
	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
	return NRK_ERROR;
    2b52:	2b b1       	in	r18, 0x0b	; 11
    2b54:	93 e0       	ldi	r25, 0x03	; 3
    2b56:	56 95       	lsr	r21
    2b58:	47 95       	ror	r20
    2b5a:	9a 95       	dec	r25
    2b5c:	e1 f7       	brne	.-8      	; 0x2b56 <nrk_gpio_clr+0xac>
    2b5e:	81 e0       	ldi	r24, 0x01	; 1
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	02 c0       	rjmp	.+4      	; 0x2b68 <nrk_gpio_clr+0xbe>
    2b64:	88 0f       	add	r24, r24
    2b66:	99 1f       	adc	r25, r25
    2b68:	4a 95       	dec	r20
    2b6a:	e2 f7       	brpl	.-8      	; 0x2b64 <nrk_gpio_clr+0xba>
    2b6c:	80 95       	com	r24
    2b6e:	82 23       	and	r24, r18
    2b70:	8b b9       	out	0x0b, r24	; 11
    2b72:	21 c0       	rjmp	.+66     	; 0x2bb6 <nrk_gpio_clr+0x10c>
	}

    2b74:	2e b1       	in	r18, 0x0e	; 14
    2b76:	83 e0       	ldi	r24, 0x03	; 3
    2b78:	56 95       	lsr	r21
    2b7a:	47 95       	ror	r20
    2b7c:	8a 95       	dec	r24
    2b7e:	e1 f7       	brne	.-8      	; 0x2b78 <nrk_gpio_clr+0xce>
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	02 c0       	rjmp	.+4      	; 0x2b8a <nrk_gpio_clr+0xe0>
    2b86:	88 0f       	add	r24, r24
    2b88:	99 1f       	adc	r25, r25
    2b8a:	4a 95       	dec	r20
    2b8c:	e2 f7       	brpl	.-8      	; 0x2b86 <nrk_gpio_clr+0xdc>
    2b8e:	80 95       	com	r24
    2b90:	82 23       	and	r24, r18
    2b92:	8e b9       	out	0x0e, r24	; 14
    2b94:	10 c0       	rjmp	.+32     	; 0x2bb6 <nrk_gpio_clr+0x10c>
     
    tx_data_ready=0;
    2b96:	21 b3       	in	r18, 0x11	; 17
    2b98:	b3 e0       	ldi	r27, 0x03	; 3
    2b9a:	56 95       	lsr	r21
    2b9c:	47 95       	ror	r20
    2b9e:	ba 95       	dec	r27
    2ba0:	e1 f7       	brne	.-8      	; 0x2b9a <nrk_gpio_clr+0xf0>
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	02 c0       	rjmp	.+4      	; 0x2bac <nrk_gpio_clr+0x102>
    2ba8:	88 0f       	add	r24, r24
    2baa:	99 1f       	adc	r25, r25
    2bac:	4a 95       	dec	r20
    2bae:	e2 f7       	brpl	.-8      	; 0x2ba8 <nrk_gpio_clr+0xfe>
    2bb0:	80 95       	com	r24
    2bb2:	82 23       	and	r24, r18
    2bb4:	81 bb       	out	0x11, r24	; 17
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	08 95       	ret
    2bbc:	8f ef       	ldi	r24, 0xFF	; 255
    2bbe:	9f ef       	ldi	r25, 0xFF	; 255
    // Set the one main rx buffer
    rx_buf_empty=0;
    bmac_rfRxInfo.pPayload = NULL;
    bmac_rfRxInfo.max_length = 0;
    2bc0:	08 95       	ret

00002bc2 <nrk_gpio_get>:

    // Setup the cc2420 chip
    rf_init (&bmac_rfRxInfo, chan, 0xffff, 0);
    g_chan=chan;
    2bc2:	8f 3f       	cpi	r24, 0xFF	; 255
    2bc4:	a9 f1       	breq	.+106    	; 0x2c30 <nrk_gpio_get+0x6e>
 
    2bc6:	28 2f       	mov	r18, r24
    2bc8:	33 27       	eor	r19, r19
    2bca:	c9 01       	movw	r24, r18
    2bcc:	87 70       	andi	r24, 0x07	; 7
    2bce:	90 70       	andi	r25, 0x00	; 0
    2bd0:	82 30       	cpi	r24, 0x02	; 2
    2bd2:	91 05       	cpc	r25, r1
    2bd4:	a9 f0       	breq	.+42     	; 0x2c00 <nrk_gpio_get+0x3e>
    2bd6:	83 30       	cpi	r24, 0x03	; 3
    2bd8:	91 05       	cpc	r25, r1
    2bda:	2c f4       	brge	.+10     	; 0x2be6 <nrk_gpio_get+0x24>
    2bdc:	00 97       	sbiw	r24, 0x00	; 0
    2bde:	61 f0       	breq	.+24     	; 0x2bf8 <nrk_gpio_get+0x36>
    2be0:	01 97       	sbiw	r24, 0x01	; 1
    2be2:	31 f5       	brne	.+76     	; 0x2c30 <nrk_gpio_get+0x6e>
    2be4:	0b c0       	rjmp	.+22     	; 0x2bfc <nrk_gpio_get+0x3a>
    2be6:	84 30       	cpi	r24, 0x04	; 4
    2be8:	91 05       	cpc	r25, r1
    2bea:	71 f0       	breq	.+28     	; 0x2c08 <nrk_gpio_get+0x46>
    2bec:	84 30       	cpi	r24, 0x04	; 4
    2bee:	91 05       	cpc	r25, r1
    2bf0:	4c f0       	brlt	.+18     	; 0x2c04 <nrk_gpio_get+0x42>
    2bf2:	05 97       	sbiw	r24, 0x05	; 5
    2bf4:	e9 f4       	brne	.+58     	; 0x2c30 <nrk_gpio_get+0x6e>
    2bf6:	0a c0       	rjmp	.+20     	; 0x2c0c <nrk_gpio_get+0x4a>
    FASTSPI_SETREG(CC2420_RSSI, 0xE580); // CCA THR=-25
    FASTSPI_SETREG(CC2420_TXCTRL, 0x80FF); // TX TURNAROUND = 128 us
    2bf8:	80 b1       	in	r24, 0x00	; 0
    2bfa:	09 c0       	rjmp	.+18     	; 0x2c0e <nrk_gpio_get+0x4c>
    FASTSPI_SETREG(CC2420_RXCTRL1, 0x0A56); 
    // default cca thresh of -45
    2bfc:	83 b1       	in	r24, 0x03	; 3
    2bfe:	07 c0       	rjmp	.+14     	; 0x2c0e <nrk_gpio_get+0x4c>
    //rf_set_cca_thresh(-45); 
    rf_set_cca_thresh(-45); 
    2c00:	86 b1       	in	r24, 0x06	; 6
    2c02:	05 c0       	rjmp	.+10     	; 0x2c0e <nrk_gpio_get+0x4c>
    bmac_running=1;
    is_enabled=1;
    2c04:	89 b1       	in	r24, 0x09	; 9
    2c06:	03 c0       	rjmp	.+6      	; 0x2c0e <nrk_gpio_get+0x4c>
    return NRK_OK;
}
    2c08:	8c b1       	in	r24, 0x0c	; 12
    2c0a:	01 c0       	rjmp	.+2      	; 0x2c0e <nrk_gpio_get+0x4c>

int8_t bmac_tx_pkt_nonblocking(uint8_t *buf, uint8_t len)
    2c0c:	8f b1       	in	r24, 0x0f	; 15
    2c0e:	99 27       	eor	r25, r25
    2c10:	e3 e0       	ldi	r30, 0x03	; 3
    2c12:	36 95       	lsr	r19
    2c14:	27 95       	ror	r18
    2c16:	ea 95       	dec	r30
    2c18:	e1 f7       	brne	.-8      	; 0x2c12 <nrk_gpio_get+0x50>
    2c1a:	02 c0       	rjmp	.+4      	; 0x2c20 <nrk_gpio_get+0x5e>
    2c1c:	95 95       	asr	r25
    2c1e:	87 95       	ror	r24
    2c20:	2a 95       	dec	r18
    2c22:	e2 f7       	brpl	.-8      	; 0x2c1c <nrk_gpio_get+0x5a>
    2c24:	99 27       	eor	r25, r25
    2c26:	87 fd       	sbrc	r24, 7
    2c28:	90 95       	com	r25
    2c2a:	81 70       	andi	r24, 0x01	; 1
    2c2c:	90 70       	andi	r25, 0x00	; 0
    2c2e:	08 95       	ret
    2c30:	8f ef       	ldi	r24, 0xFF	; 255
    2c32:	9f ef       	ldi	r25, 0xFF	; 255
{
  if(tx_data_ready==1) return NRK_ERROR;
  tx_data_ready=1;
  bmac_rfTxInfo.pPayload=buf;
    2c34:	08 95       	ret

00002c36 <nrk_gpio_toggle>:
  bmac_rfTxInfo.length=len;
return NRK_OK;
}

    2c36:	8f 3f       	cpi	r24, 0xFF	; 255
    2c38:	09 f4       	brne	.+2      	; 0x2c3c <nrk_gpio_toggle+0x6>
    2c3a:	03 c1       	rjmp	.+518    	; 0x2e42 <nrk_gpio_toggle+0x20c>
nrk_sig_t bmac_get_rx_pkt_signal()
    2c3c:	28 2f       	mov	r18, r24
    2c3e:	33 27       	eor	r19, r19
    2c40:	a9 01       	movw	r20, r18
    2c42:	47 70       	andi	r20, 0x07	; 7
    2c44:	50 70       	andi	r21, 0x00	; 0
    2c46:	42 30       	cpi	r20, 0x02	; 2
    2c48:	51 05       	cpc	r21, r1
    2c4a:	09 f4       	brne	.+2      	; 0x2c4e <nrk_gpio_toggle+0x18>
    2c4c:	5c c0       	rjmp	.+184    	; 0x2d06 <nrk_gpio_toggle+0xd0>
    2c4e:	43 30       	cpi	r20, 0x03	; 3
    2c50:	51 05       	cpc	r21, r1
    2c52:	44 f4       	brge	.+16     	; 0x2c64 <nrk_gpio_toggle+0x2e>
    2c54:	41 15       	cp	r20, r1
    2c56:	51 05       	cpc	r21, r1
    2c58:	91 f0       	breq	.+36     	; 0x2c7e <nrk_gpio_toggle+0x48>
    2c5a:	41 30       	cpi	r20, 0x01	; 1
    2c5c:	51 05       	cpc	r21, r1
    2c5e:	09 f0       	breq	.+2      	; 0x2c62 <nrk_gpio_toggle+0x2c>
    2c60:	f0 c0       	rjmp	.+480    	; 0x2e42 <nrk_gpio_toggle+0x20c>
    2c62:	34 c0       	rjmp	.+104    	; 0x2ccc <nrk_gpio_toggle+0x96>
    2c64:	44 30       	cpi	r20, 0x04	; 4
    2c66:	51 05       	cpc	r21, r1
    2c68:	09 f4       	brne	.+2      	; 0x2c6c <nrk_gpio_toggle+0x36>
    2c6a:	9b c0       	rjmp	.+310    	; 0x2da2 <nrk_gpio_toggle+0x16c>
    2c6c:	44 30       	cpi	r20, 0x04	; 4
    2c6e:	51 05       	cpc	r21, r1
    2c70:	0c f4       	brge	.+2      	; 0x2c74 <nrk_gpio_toggle+0x3e>
    2c72:	70 c0       	rjmp	.+224    	; 0x2d54 <nrk_gpio_toggle+0x11e>
    2c74:	45 30       	cpi	r20, 0x05	; 5
    2c76:	51 05       	cpc	r21, r1
    2c78:	09 f0       	breq	.+2      	; 0x2c7c <nrk_gpio_toggle+0x46>
    2c7a:	e3 c0       	rjmp	.+454    	; 0x2e42 <nrk_gpio_toggle+0x20c>
    2c7c:	b9 c0       	rjmp	.+370    	; 0x2df0 <nrk_gpio_toggle+0x1ba>
{
   nrk_signal_register(bmac_rx_pkt_signal); 
    2c7e:	80 b1       	in	r24, 0x00	; 0
    2c80:	a9 01       	movw	r20, r18
    2c82:	73 e0       	ldi	r23, 0x03	; 3
    2c84:	56 95       	lsr	r21
    2c86:	47 95       	ror	r20
    2c88:	7a 95       	dec	r23
    2c8a:	e1 f7       	brne	.-8      	; 0x2c84 <nrk_gpio_toggle+0x4e>
    2c8c:	99 27       	eor	r25, r25
    2c8e:	04 2e       	mov	r0, r20
    2c90:	02 c0       	rjmp	.+4      	; 0x2c96 <nrk_gpio_toggle+0x60>
    2c92:	95 95       	asr	r25
    2c94:	87 95       	ror	r24
    2c96:	0a 94       	dec	r0
    2c98:	e2 f7       	brpl	.-8      	; 0x2c92 <nrk_gpio_toggle+0x5c>
    2c9a:	80 fd       	sbrc	r24, 0
    2c9c:	0b c0       	rjmp	.+22     	; 0x2cb4 <nrk_gpio_toggle+0x7e>
return(bmac_rx_pkt_signal);
    2c9e:	22 b1       	in	r18, 0x02	; 2
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	02 c0       	rjmp	.+4      	; 0x2caa <nrk_gpio_toggle+0x74>
    2ca6:	88 0f       	add	r24, r24
    2ca8:	99 1f       	adc	r25, r25
    2caa:	4a 95       	dec	r20
    2cac:	e2 f7       	brpl	.-8      	; 0x2ca6 <nrk_gpio_toggle+0x70>
    2cae:	28 2b       	or	r18, r24
    2cb0:	22 b9       	out	0x02, r18	; 2
    2cb2:	c4 c0       	rjmp	.+392    	; 0x2e3c <nrk_gpio_toggle+0x206>
}

    2cb4:	22 b1       	in	r18, 0x02	; 2
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	02 c0       	rjmp	.+4      	; 0x2cc0 <nrk_gpio_toggle+0x8a>
    2cbc:	88 0f       	add	r24, r24
    2cbe:	99 1f       	adc	r25, r25
    2cc0:	4a 95       	dec	r20
    2cc2:	e2 f7       	brpl	.-8      	; 0x2cbc <nrk_gpio_toggle+0x86>
    2cc4:	80 95       	com	r24
    2cc6:	82 23       	and	r24, r18
    2cc8:	82 b9       	out	0x02, r24	; 2
    2cca:	b8 c0       	rjmp	.+368    	; 0x2e3c <nrk_gpio_toggle+0x206>
nrk_sig_t bmac_get_tx_done_signal()
{
   nrk_signal_register(bmac_tx_pkt_done_signal); 
return(bmac_tx_pkt_done_signal);
    2ccc:	83 b1       	in	r24, 0x03	; 3
    2cce:	63 e0       	ldi	r22, 0x03	; 3
    2cd0:	36 95       	lsr	r19
    2cd2:	27 95       	ror	r18
    2cd4:	6a 95       	dec	r22
    2cd6:	e1 f7       	brne	.-8      	; 0x2cd0 <nrk_gpio_toggle+0x9a>
    2cd8:	99 27       	eor	r25, r25
    2cda:	02 2e       	mov	r0, r18
    2cdc:	02 c0       	rjmp	.+4      	; 0x2ce2 <nrk_gpio_toggle+0xac>
    2cde:	95 95       	asr	r25
    2ce0:	87 95       	ror	r24
    2ce2:	0a 94       	dec	r0
    2ce4:	e2 f7       	brpl	.-8      	; 0x2cde <nrk_gpio_toggle+0xa8>
    2ce6:	02 c0       	rjmp	.+4      	; 0x2cec <nrk_gpio_toggle+0xb6>
    2ce8:	44 0f       	add	r20, r20
    2cea:	55 1f       	adc	r21, r21
    2cec:	2a 95       	dec	r18
    2cee:	e2 f7       	brpl	.-8      	; 0x2ce8 <nrk_gpio_toggle+0xb2>
    2cf0:	80 fd       	sbrc	r24, 0
    2cf2:	03 c0       	rjmp	.+6      	; 0x2cfa <nrk_gpio_toggle+0xc4>
}
    2cf4:	85 b1       	in	r24, 0x05	; 5
    2cf6:	84 2b       	or	r24, r20
    2cf8:	04 c0       	rjmp	.+8      	; 0x2d02 <nrk_gpio_toggle+0xcc>


    2cfa:	95 b1       	in	r25, 0x05	; 5
    2cfc:	84 2f       	mov	r24, r20
    2cfe:	80 95       	com	r24
    2d00:	89 23       	and	r24, r25
    2d02:	85 b9       	out	0x05, r24	; 5
    2d04:	9b c0       	rjmp	.+310    	; 0x2e3c <nrk_gpio_toggle+0x206>
int8_t bmac_tx_pkt(uint8_t *buf, uint8_t len)
{
uint32_t mask;
if(tx_data_ready==1) return NRK_ERROR;
    2d06:	86 b1       	in	r24, 0x06	; 6
    2d08:	a9 01       	movw	r20, r18
    2d0a:	93 e0       	ldi	r25, 0x03	; 3
    2d0c:	56 95       	lsr	r21
    2d0e:	47 95       	ror	r20
    2d10:	9a 95       	dec	r25
    2d12:	e1 f7       	brne	.-8      	; 0x2d0c <nrk_gpio_toggle+0xd6>
    2d14:	99 27       	eor	r25, r25
    2d16:	04 2e       	mov	r0, r20
    2d18:	02 c0       	rjmp	.+4      	; 0x2d1e <nrk_gpio_toggle+0xe8>
    2d1a:	95 95       	asr	r25
    2d1c:	87 95       	ror	r24
    2d1e:	0a 94       	dec	r0
    2d20:	e2 f7       	brpl	.-8      	; 0x2d1a <nrk_gpio_toggle+0xe4>
    2d22:	80 fd       	sbrc	r24, 0
    2d24:	0b c0       	rjmp	.+22     	; 0x2d3c <nrk_gpio_toggle+0x106>
// If reserve exists check it
    2d26:	28 b1       	in	r18, 0x08	; 8
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	02 c0       	rjmp	.+4      	; 0x2d32 <nrk_gpio_toggle+0xfc>
    2d2e:	88 0f       	add	r24, r24
    2d30:	99 1f       	adc	r25, r25
    2d32:	4a 95       	dec	r20
    2d34:	e2 f7       	brpl	.-8      	; 0x2d2e <nrk_gpio_toggle+0xf8>
    2d36:	28 2b       	or	r18, r24
    2d38:	28 b9       	out	0x08, r18	; 8
    2d3a:	80 c0       	rjmp	.+256    	; 0x2e3c <nrk_gpio_toggle+0x206>
#ifdef NRK_MAX_RESERVES
if(tx_reserve!=-1)
    2d3c:	28 b1       	in	r18, 0x08	; 8
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	02 c0       	rjmp	.+4      	; 0x2d48 <nrk_gpio_toggle+0x112>
    2d44:	88 0f       	add	r24, r24
    2d46:	99 1f       	adc	r25, r25
    2d48:	4a 95       	dec	r20
    2d4a:	e2 f7       	brpl	.-8      	; 0x2d44 <nrk_gpio_toggle+0x10e>
    2d4c:	80 95       	com	r24
    2d4e:	82 23       	and	r24, r18
    2d50:	88 b9       	out	0x08, r24	; 8
    2d52:	74 c0       	rjmp	.+232    	; 0x2e3c <nrk_gpio_toggle+0x206>
	{
	if( nrk_reserve_consume(tx_reserve)==NRK_ERROR ) { 
		return NRK_ERROR;
		}
    2d54:	89 b1       	in	r24, 0x09	; 9
    2d56:	a9 01       	movw	r20, r18
    2d58:	b3 e0       	ldi	r27, 0x03	; 3
    2d5a:	56 95       	lsr	r21
    2d5c:	47 95       	ror	r20
    2d5e:	ba 95       	dec	r27
    2d60:	e1 f7       	brne	.-8      	; 0x2d5a <nrk_gpio_toggle+0x124>
    2d62:	99 27       	eor	r25, r25
    2d64:	04 2e       	mov	r0, r20
    2d66:	02 c0       	rjmp	.+4      	; 0x2d6c <nrk_gpio_toggle+0x136>
    2d68:	95 95       	asr	r25
    2d6a:	87 95       	ror	r24
    2d6c:	0a 94       	dec	r0
    2d6e:	e2 f7       	brpl	.-8      	; 0x2d68 <nrk_gpio_toggle+0x132>
    2d70:	80 fd       	sbrc	r24, 0
    2d72:	0b c0       	rjmp	.+22     	; 0x2d8a <nrk_gpio_toggle+0x154>
	}
    2d74:	2b b1       	in	r18, 0x0b	; 11
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	02 c0       	rjmp	.+4      	; 0x2d80 <nrk_gpio_toggle+0x14a>
    2d7c:	88 0f       	add	r24, r24
    2d7e:	99 1f       	adc	r25, r25
    2d80:	4a 95       	dec	r20
    2d82:	e2 f7       	brpl	.-8      	; 0x2d7c <nrk_gpio_toggle+0x146>
    2d84:	28 2b       	or	r18, r24
    2d86:	2b b9       	out	0x0b, r18	; 11
    2d88:	59 c0       	rjmp	.+178    	; 0x2e3c <nrk_gpio_toggle+0x206>
#endif
nrk_signal_register(bmac_tx_pkt_done_signal); 
    2d8a:	2b b1       	in	r18, 0x0b	; 11
    2d8c:	81 e0       	ldi	r24, 0x01	; 1
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	02 c0       	rjmp	.+4      	; 0x2d96 <nrk_gpio_toggle+0x160>
    2d92:	88 0f       	add	r24, r24
    2d94:	99 1f       	adc	r25, r25
    2d96:	4a 95       	dec	r20
    2d98:	e2 f7       	brpl	.-8      	; 0x2d92 <nrk_gpio_toggle+0x15c>
    2d9a:	80 95       	com	r24
    2d9c:	82 23       	and	r24, r18
    2d9e:	8b b9       	out	0x0b, r24	; 11
    2da0:	4d c0       	rjmp	.+154    	; 0x2e3c <nrk_gpio_toggle+0x206>
tx_data_ready=1;
bmac_rfTxInfo.pPayload=buf;
bmac_rfTxInfo.length=len;
#ifdef DEBUG
    2da2:	8c b1       	in	r24, 0x0c	; 12
    2da4:	a9 01       	movw	r20, r18
    2da6:	a3 e0       	ldi	r26, 0x03	; 3
    2da8:	56 95       	lsr	r21
    2daa:	47 95       	ror	r20
    2dac:	aa 95       	dec	r26
    2dae:	e1 f7       	brne	.-8      	; 0x2da8 <nrk_gpio_toggle+0x172>
    2db0:	99 27       	eor	r25, r25
    2db2:	04 2e       	mov	r0, r20
    2db4:	02 c0       	rjmp	.+4      	; 0x2dba <nrk_gpio_toggle+0x184>
    2db6:	95 95       	asr	r25
    2db8:	87 95       	ror	r24
    2dba:	0a 94       	dec	r0
    2dbc:	e2 f7       	brpl	.-8      	; 0x2db6 <nrk_gpio_toggle+0x180>
    2dbe:	80 fd       	sbrc	r24, 0
    2dc0:	0b c0       	rjmp	.+22     	; 0x2dd8 <nrk_gpio_toggle+0x1a2>
nrk_kprintf( PSTR("Waiting for tx done signal\r\n"));
    2dc2:	2e b1       	in	r18, 0x0e	; 14
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	02 c0       	rjmp	.+4      	; 0x2dce <nrk_gpio_toggle+0x198>
    2dca:	88 0f       	add	r24, r24
    2dcc:	99 1f       	adc	r25, r25
    2dce:	4a 95       	dec	r20
    2dd0:	e2 f7       	brpl	.-8      	; 0x2dca <nrk_gpio_toggle+0x194>
    2dd2:	28 2b       	or	r18, r24
    2dd4:	2e b9       	out	0x0e, r18	; 14
    2dd6:	32 c0       	rjmp	.+100    	; 0x2e3c <nrk_gpio_toggle+0x206>
#endif
mask=nrk_event_wait (SIG(bmac_tx_pkt_done_signal));
    2dd8:	2e b1       	in	r18, 0x0e	; 14
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	02 c0       	rjmp	.+4      	; 0x2de4 <nrk_gpio_toggle+0x1ae>
    2de0:	88 0f       	add	r24, r24
    2de2:	99 1f       	adc	r25, r25
    2de4:	4a 95       	dec	r20
    2de6:	e2 f7       	brpl	.-8      	; 0x2de0 <nrk_gpio_toggle+0x1aa>
    2de8:	80 95       	com	r24
    2dea:	82 23       	and	r24, r18
    2dec:	8e b9       	out	0x0e, r24	; 14
    2dee:	26 c0       	rjmp	.+76     	; 0x2e3c <nrk_gpio_toggle+0x206>
if(mask==0) nrk_kprintf( PSTR("BMAC TX: Error calling event wait\r\n"));
if((mask&SIG(bmac_tx_pkt_done_signal))==0) nrk_kprintf( PSTR("BMAC TX: Woke up on wrong signal\r\n"));
if(pkt_got_ack) return NRK_OK;
return NRK_ERROR;
    2df0:	8f b1       	in	r24, 0x0f	; 15
    2df2:	a9 01       	movw	r20, r18
    2df4:	f3 e0       	ldi	r31, 0x03	; 3
    2df6:	56 95       	lsr	r21
    2df8:	47 95       	ror	r20
    2dfa:	fa 95       	dec	r31
    2dfc:	e1 f7       	brne	.-8      	; 0x2df6 <nrk_gpio_toggle+0x1c0>
    2dfe:	99 27       	eor	r25, r25
    2e00:	04 2e       	mov	r0, r20
    2e02:	02 c0       	rjmp	.+4      	; 0x2e08 <nrk_gpio_toggle+0x1d2>
    2e04:	95 95       	asr	r25
    2e06:	87 95       	ror	r24
    2e08:	0a 94       	dec	r0
    2e0a:	e2 f7       	brpl	.-8      	; 0x2e04 <nrk_gpio_toggle+0x1ce>
    2e0c:	80 fd       	sbrc	r24, 0
    2e0e:	0b c0       	rjmp	.+22     	; 0x2e26 <nrk_gpio_toggle+0x1f0>
}
    2e10:	21 b3       	in	r18, 0x11	; 17
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	02 c0       	rjmp	.+4      	; 0x2e1c <nrk_gpio_toggle+0x1e6>
    2e18:	88 0f       	add	r24, r24
    2e1a:	99 1f       	adc	r25, r25
    2e1c:	4a 95       	dec	r20
    2e1e:	e2 f7       	brpl	.-8      	; 0x2e18 <nrk_gpio_toggle+0x1e2>
    2e20:	28 2b       	or	r18, r24
    2e22:	21 bb       	out	0x11, r18	; 17
    2e24:	0b c0       	rjmp	.+22     	; 0x2e3c <nrk_gpio_toggle+0x206>


    2e26:	21 b3       	in	r18, 0x11	; 17
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	02 c0       	rjmp	.+4      	; 0x2e32 <nrk_gpio_toggle+0x1fc>
    2e2e:	88 0f       	add	r24, r24
    2e30:	99 1f       	adc	r25, r25
    2e32:	4a 95       	dec	r20
    2e34:	e2 f7       	brpl	.-8      	; 0x2e2e <nrk_gpio_toggle+0x1f8>
    2e36:	80 95       	com	r24
    2e38:	82 23       	and	r24, r18
    2e3a:	81 bb       	out	0x11, r24	; 17
    2e3c:	81 e0       	ldi	r24, 0x01	; 1
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	08 95       	ret
    2e42:	8f ef       	ldi	r24, 0xFF	; 255
    2e44:	9f ef       	ldi	r25, 0xFF	; 255
uint8_t *bmac_rx_pkt_get(uint8_t *len, int8_t *rssi)
{

  if(bmac_rx_pkt_ready()==0) 
	{
	*len=0;
    2e46:	08 95       	ret

00002e48 <nrk_gpio_direction>:
	*rssi=0;
	return NULL;
	}
  *len=bmac_rfRxInfo.length;
    2e48:	8f 3f       	cpi	r24, 0xFF	; 255
    2e4a:	09 f4       	brne	.+2      	; 0x2e4e <nrk_gpio_direction+0x6>
    2e4c:	1b c1       	rjmp	.+566    	; 0x3084 <nrk_gpio_direction+0x23c>
    2e4e:	48 2f       	mov	r20, r24
    2e50:	55 27       	eor	r21, r21
  *rssi=bmac_rfRxInfo.rssi;
    2e52:	66 23       	and	r22, r22
    2e54:	09 f0       	breq	.+2      	; 0x2e58 <nrk_gpio_direction+0x10>
    2e56:	99 c0       	rjmp	.+306    	; 0x2f8a <nrk_gpio_direction+0x142>
  return bmac_rfRxInfo.pPayload;
    2e58:	ca 01       	movw	r24, r20
    2e5a:	87 70       	andi	r24, 0x07	; 7
    2e5c:	90 70       	andi	r25, 0x00	; 0
    2e5e:	82 30       	cpi	r24, 0x02	; 2
    2e60:	91 05       	cpc	r25, r1
    2e62:	09 f4       	brne	.+2      	; 0x2e66 <nrk_gpio_direction+0x1e>
    2e64:	3e c0       	rjmp	.+124    	; 0x2ee2 <nrk_gpio_direction+0x9a>
    2e66:	83 30       	cpi	r24, 0x03	; 3
    2e68:	91 05       	cpc	r25, r1
    2e6a:	3c f4       	brge	.+14     	; 0x2e7a <nrk_gpio_direction+0x32>
    2e6c:	00 97       	sbiw	r24, 0x00	; 0
    2e6e:	89 f0       	breq	.+34     	; 0x2e92 <nrk_gpio_direction+0x4a>
    2e70:	81 30       	cpi	r24, 0x01	; 1
    2e72:	91 05       	cpc	r25, r1
    2e74:	09 f0       	breq	.+2      	; 0x2e78 <nrk_gpio_direction+0x30>
    2e76:	06 c1       	rjmp	.+524    	; 0x3084 <nrk_gpio_direction+0x23c>
    2e78:	21 c0       	rjmp	.+66     	; 0x2ebc <nrk_gpio_direction+0x74>
    2e7a:	84 30       	cpi	r24, 0x04	; 4
    2e7c:	91 05       	cpc	r25, r1
    2e7e:	09 f4       	brne	.+2      	; 0x2e82 <nrk_gpio_direction+0x3a>
    2e80:	5a c0       	rjmp	.+180    	; 0x2f36 <nrk_gpio_direction+0xee>
    2e82:	84 30       	cpi	r24, 0x04	; 4
    2e84:	91 05       	cpc	r25, r1
    2e86:	0c f4       	brge	.+2      	; 0x2e8a <nrk_gpio_direction+0x42>
    2e88:	41 c0       	rjmp	.+130    	; 0x2f0c <nrk_gpio_direction+0xc4>
    2e8a:	05 97       	sbiw	r24, 0x05	; 5
    2e8c:	09 f0       	breq	.+2      	; 0x2e90 <nrk_gpio_direction+0x48>
    2e8e:	fa c0       	rjmp	.+500    	; 0x3084 <nrk_gpio_direction+0x23c>
    2e90:	67 c0       	rjmp	.+206    	; 0x2f60 <nrk_gpio_direction+0x118>
}

    2e92:	31 b1       	in	r19, 0x01	; 1
    2e94:	b3 e0       	ldi	r27, 0x03	; 3
    2e96:	56 95       	lsr	r21
    2e98:	47 95       	ror	r20
    2e9a:	ba 95       	dec	r27
    2e9c:	e1 f7       	brne	.-8      	; 0x2e96 <nrk_gpio_direction+0x4e>
    2e9e:	81 e0       	ldi	r24, 0x01	; 1
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	02 c0       	rjmp	.+4      	; 0x2ea8 <nrk_gpio_direction+0x60>
    2ea4:	88 0f       	add	r24, r24
    2ea6:	99 1f       	adc	r25, r25
    2ea8:	4a 95       	dec	r20
    2eaa:	e2 f7       	brpl	.-8      	; 0x2ea4 <nrk_gpio_direction+0x5c>
    2eac:	28 2f       	mov	r18, r24
    2eae:	20 95       	com	r18
    2eb0:	23 23       	and	r18, r19
    2eb2:	21 b9       	out	0x01, r18	; 1
int8_t bmac_rx_pkt_ready(void)
    2eb4:	22 b1       	in	r18, 0x02	; 2
    2eb6:	82 2b       	or	r24, r18
    2eb8:	82 b9       	out	0x02, r24	; 2
    2eba:	e1 c0       	rjmp	.+450    	; 0x307e <nrk_gpio_direction+0x236>
{
return (!rx_buf_empty);
}
    2ebc:	24 b1       	in	r18, 0x04	; 4
    2ebe:	a3 e0       	ldi	r26, 0x03	; 3
    2ec0:	56 95       	lsr	r21
    2ec2:	47 95       	ror	r20
    2ec4:	aa 95       	dec	r26
    2ec6:	e1 f7       	brne	.-8      	; 0x2ec0 <nrk_gpio_direction+0x78>
    2ec8:	02 c0       	rjmp	.+4      	; 0x2ece <nrk_gpio_direction+0x86>
    2eca:	88 0f       	add	r24, r24
    2ecc:	99 1f       	adc	r25, r25
    2ece:	4a 95       	dec	r20
    2ed0:	e2 f7       	brpl	.-8      	; 0x2eca <nrk_gpio_direction+0x82>
    2ed2:	98 2f       	mov	r25, r24
    2ed4:	80 95       	com	r24
    2ed6:	82 23       	and	r24, r18
    2ed8:	84 b9       	out	0x04, r24	; 4

    2eda:	85 b1       	in	r24, 0x05	; 5
    2edc:	98 2b       	or	r25, r24
    2ede:	95 b9       	out	0x05, r25	; 5
    2ee0:	ce c0       	rjmp	.+412    	; 0x307e <nrk_gpio_direction+0x236>
int8_t bmac_rx_pkt_release(void)
{
    rx_buf_empty=1;
    2ee2:	37 b1       	in	r19, 0x07	; 7
    2ee4:	f3 e0       	ldi	r31, 0x03	; 3
    2ee6:	56 95       	lsr	r21
    2ee8:	47 95       	ror	r20
    2eea:	fa 95       	dec	r31
    2eec:	e1 f7       	brne	.-8      	; 0x2ee6 <nrk_gpio_direction+0x9e>
    2eee:	81 e0       	ldi	r24, 0x01	; 1
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	02 c0       	rjmp	.+4      	; 0x2ef8 <nrk_gpio_direction+0xb0>
    2ef4:	88 0f       	add	r24, r24
    2ef6:	99 1f       	adc	r25, r25
    2ef8:	4a 95       	dec	r20
    2efa:	e2 f7       	brpl	.-8      	; 0x2ef4 <nrk_gpio_direction+0xac>
    2efc:	28 2f       	mov	r18, r24
    2efe:	20 95       	com	r18
    2f00:	23 23       	and	r18, r19
    2f02:	27 b9       	out	0x07, r18	; 7
return NRK_OK;
    2f04:	28 b1       	in	r18, 0x08	; 8
    2f06:	82 2b       	or	r24, r18
    2f08:	88 b9       	out	0x08, r24	; 8
    2f0a:	b9 c0       	rjmp	.+370    	; 0x307e <nrk_gpio_direction+0x236>
}

void bmac_disable()
    2f0c:	3a b1       	in	r19, 0x0a	; 10
    2f0e:	e3 e0       	ldi	r30, 0x03	; 3
    2f10:	56 95       	lsr	r21
    2f12:	47 95       	ror	r20
    2f14:	ea 95       	dec	r30
    2f16:	e1 f7       	brne	.-8      	; 0x2f10 <nrk_gpio_direction+0xc8>
    2f18:	81 e0       	ldi	r24, 0x01	; 1
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	02 c0       	rjmp	.+4      	; 0x2f22 <nrk_gpio_direction+0xda>
    2f1e:	88 0f       	add	r24, r24
    2f20:	99 1f       	adc	r25, r25
    2f22:	4a 95       	dec	r20
    2f24:	e2 f7       	brpl	.-8      	; 0x2f1e <nrk_gpio_direction+0xd6>
    2f26:	28 2f       	mov	r18, r24
    2f28:	20 95       	com	r18
    2f2a:	23 23       	and	r18, r19
    2f2c:	2a b9       	out	0x0a, r18	; 10
{
    2f2e:	2b b1       	in	r18, 0x0b	; 11
    2f30:	82 2b       	or	r24, r18
    2f32:	8b b9       	out	0x0b, r24	; 11
    2f34:	a4 c0       	rjmp	.+328    	; 0x307e <nrk_gpio_direction+0x236>
  is_enabled=0;
  rf_power_down();
}
    2f36:	3d b1       	in	r19, 0x0d	; 13
    2f38:	73 e0       	ldi	r23, 0x03	; 3
    2f3a:	56 95       	lsr	r21
    2f3c:	47 95       	ror	r20
    2f3e:	7a 95       	dec	r23
    2f40:	e1 f7       	brne	.-8      	; 0x2f3a <nrk_gpio_direction+0xf2>
    2f42:	81 e0       	ldi	r24, 0x01	; 1
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	02 c0       	rjmp	.+4      	; 0x2f4c <nrk_gpio_direction+0x104>
    2f48:	88 0f       	add	r24, r24
    2f4a:	99 1f       	adc	r25, r25
    2f4c:	4a 95       	dec	r20
    2f4e:	e2 f7       	brpl	.-8      	; 0x2f48 <nrk_gpio_direction+0x100>
    2f50:	28 2f       	mov	r18, r24
    2f52:	20 95       	com	r18
    2f54:	23 23       	and	r18, r19
    2f56:	2d b9       	out	0x0d, r18	; 13

    2f58:	2e b1       	in	r18, 0x0e	; 14
    2f5a:	82 2b       	or	r24, r18
    2f5c:	8e b9       	out	0x0e, r24	; 14
    2f5e:	8f c0       	rjmp	.+286    	; 0x307e <nrk_gpio_direction+0x236>
void bmac_enable()
{
  is_enabled=1;
    2f60:	30 b3       	in	r19, 0x10	; 16
    2f62:	63 e0       	ldi	r22, 0x03	; 3
    2f64:	56 95       	lsr	r21
    2f66:	47 95       	ror	r20
    2f68:	6a 95       	dec	r22
    2f6a:	e1 f7       	brne	.-8      	; 0x2f64 <nrk_gpio_direction+0x11c>
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	02 c0       	rjmp	.+4      	; 0x2f76 <nrk_gpio_direction+0x12e>
    2f72:	88 0f       	add	r24, r24
    2f74:	99 1f       	adc	r25, r25
    2f76:	4a 95       	dec	r20
    2f78:	e2 f7       	brpl	.-8      	; 0x2f72 <nrk_gpio_direction+0x12a>
    2f7a:	28 2f       	mov	r18, r24
    2f7c:	20 95       	com	r18
    2f7e:	23 23       	and	r18, r19
    2f80:	20 bb       	out	0x10, r18	; 16
  rf_power_up();
    2f82:	21 b3       	in	r18, 0x11	; 17
    2f84:	82 2b       	or	r24, r18
    2f86:	81 bb       	out	0x11, r24	; 17
    2f88:	7a c0       	rjmp	.+244    	; 0x307e <nrk_gpio_direction+0x236>
  nrk_event_signal (bmac_enable_signal);
}


void bmac_nw_task ()
    2f8a:	9a 01       	movw	r18, r20
    2f8c:	27 70       	andi	r18, 0x07	; 7
    2f8e:	30 70       	andi	r19, 0x00	; 0
    2f90:	22 30       	cpi	r18, 0x02	; 2
    2f92:	31 05       	cpc	r19, r1
    2f94:	a9 f1       	breq	.+106    	; 0x3000 <nrk_gpio_direction+0x1b8>
    2f96:	23 30       	cpi	r18, 0x03	; 3
    2f98:	31 05       	cpc	r19, r1
    2f9a:	44 f4       	brge	.+16     	; 0x2fac <nrk_gpio_direction+0x164>
    2f9c:	21 15       	cp	r18, r1
    2f9e:	31 05       	cpc	r19, r1
    2fa0:	89 f0       	breq	.+34     	; 0x2fc4 <nrk_gpio_direction+0x17c>
    2fa2:	21 30       	cpi	r18, 0x01	; 1
    2fa4:	31 05       	cpc	r19, r1
    2fa6:	09 f0       	breq	.+2      	; 0x2faa <nrk_gpio_direction+0x162>
    2fa8:	6d c0       	rjmp	.+218    	; 0x3084 <nrk_gpio_direction+0x23c>
    2faa:	1c c0       	rjmp	.+56     	; 0x2fe4 <nrk_gpio_direction+0x19c>
    2fac:	24 30       	cpi	r18, 0x04	; 4
    2fae:	31 05       	cpc	r19, r1
    2fb0:	09 f4       	brne	.+2      	; 0x2fb4 <nrk_gpio_direction+0x16c>
    2fb2:	46 c0       	rjmp	.+140    	; 0x3040 <nrk_gpio_direction+0x1f8>
    2fb4:	24 30       	cpi	r18, 0x04	; 4
    2fb6:	31 05       	cpc	r19, r1
    2fb8:	9c f1       	brlt	.+102    	; 0x3020 <nrk_gpio_direction+0x1d8>
    2fba:	25 30       	cpi	r18, 0x05	; 5
    2fbc:	31 05       	cpc	r19, r1
    2fbe:	09 f0       	breq	.+2      	; 0x2fc2 <nrk_gpio_direction+0x17a>
    2fc0:	61 c0       	rjmp	.+194    	; 0x3084 <nrk_gpio_direction+0x23c>
    2fc2:	4e c0       	rjmp	.+156    	; 0x3060 <nrk_gpio_direction+0x218>
{
int8_t v;
    2fc4:	21 b1       	in	r18, 0x01	; 1
    2fc6:	33 e0       	ldi	r19, 0x03	; 3
    2fc8:	56 95       	lsr	r21
    2fca:	47 95       	ror	r20
    2fcc:	3a 95       	dec	r19
    2fce:	e1 f7       	brne	.-8      	; 0x2fc8 <nrk_gpio_direction+0x180>
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	02 c0       	rjmp	.+4      	; 0x2fda <nrk_gpio_direction+0x192>
    2fd6:	88 0f       	add	r24, r24
    2fd8:	99 1f       	adc	r25, r25
    2fda:	4a 95       	dec	r20
    2fdc:	e2 f7       	brpl	.-8      	; 0x2fd6 <nrk_gpio_direction+0x18e>
    2fde:	28 2b       	or	r18, r24
    2fe0:	21 b9       	out	0x01, r18	; 1
    2fe2:	4d c0       	rjmp	.+154    	; 0x307e <nrk_gpio_direction+0x236>
int8_t e;
uint8_t backoff;
    2fe4:	84 b1       	in	r24, 0x04	; 4
    2fe6:	93 e0       	ldi	r25, 0x03	; 3
    2fe8:	56 95       	lsr	r21
    2fea:	47 95       	ror	r20
    2fec:	9a 95       	dec	r25
    2fee:	e1 f7       	brne	.-8      	; 0x2fe8 <nrk_gpio_direction+0x1a0>
    2ff0:	02 c0       	rjmp	.+4      	; 0x2ff6 <nrk_gpio_direction+0x1ae>
    2ff2:	22 0f       	add	r18, r18
    2ff4:	33 1f       	adc	r19, r19
    2ff6:	4a 95       	dec	r20
    2ff8:	e2 f7       	brpl	.-8      	; 0x2ff2 <nrk_gpio_direction+0x1aa>
    2ffa:	82 2b       	or	r24, r18
    2ffc:	84 b9       	out	0x04, r24	; 4
    2ffe:	3f c0       	rjmp	.+126    	; 0x307e <nrk_gpio_direction+0x236>
nrk_sig_mask_t event;

    3000:	27 b1       	in	r18, 0x07	; 7
    3002:	b3 e0       	ldi	r27, 0x03	; 3
    3004:	56 95       	lsr	r21
    3006:	47 95       	ror	r20
    3008:	ba 95       	dec	r27
    300a:	e1 f7       	brne	.-8      	; 0x3004 <nrk_gpio_direction+0x1bc>
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	02 c0       	rjmp	.+4      	; 0x3016 <nrk_gpio_direction+0x1ce>
    3012:	88 0f       	add	r24, r24
    3014:	99 1f       	adc	r25, r25
    3016:	4a 95       	dec	r20
    3018:	e2 f7       	brpl	.-8      	; 0x3012 <nrk_gpio_direction+0x1ca>
    301a:	28 2b       	or	r18, r24
    301c:	27 b9       	out	0x07, r18	; 7
    301e:	2f c0       	rjmp	.+94     	; 0x307e <nrk_gpio_direction+0x236>
while(bmac_started()==0) nrk_wait_until_next_period();

    3020:	2a b1       	in	r18, 0x0a	; 10
    3022:	a3 e0       	ldi	r26, 0x03	; 3
    3024:	56 95       	lsr	r21
    3026:	47 95       	ror	r20
    3028:	aa 95       	dec	r26
    302a:	e1 f7       	brne	.-8      	; 0x3024 <nrk_gpio_direction+0x1dc>
    302c:	81 e0       	ldi	r24, 0x01	; 1
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	02 c0       	rjmp	.+4      	; 0x3036 <nrk_gpio_direction+0x1ee>
    3032:	88 0f       	add	r24, r24
    3034:	99 1f       	adc	r25, r25
    3036:	4a 95       	dec	r20
    3038:	e2 f7       	brpl	.-8      	; 0x3032 <nrk_gpio_direction+0x1ea>
    303a:	28 2b       	or	r18, r24
    303c:	2a b9       	out	0x0a, r18	; 10
    303e:	1f c0       	rjmp	.+62     	; 0x307e <nrk_gpio_direction+0x236>
//register the signal after bmac_init has been called
v=nrk_signal_register(bmac_enable_signal); 
    3040:	2d b1       	in	r18, 0x0d	; 13
    3042:	f3 e0       	ldi	r31, 0x03	; 3
    3044:	56 95       	lsr	r21
    3046:	47 95       	ror	r20
    3048:	fa 95       	dec	r31
    304a:	e1 f7       	brne	.-8      	; 0x3044 <nrk_gpio_direction+0x1fc>
    304c:	81 e0       	ldi	r24, 0x01	; 1
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	02 c0       	rjmp	.+4      	; 0x3056 <nrk_gpio_direction+0x20e>
    3052:	88 0f       	add	r24, r24
    3054:	99 1f       	adc	r25, r25
    3056:	4a 95       	dec	r20
    3058:	e2 f7       	brpl	.-8      	; 0x3052 <nrk_gpio_direction+0x20a>
    305a:	28 2b       	or	r18, r24
    305c:	2d b9       	out	0x0d, r18	; 13
    305e:	0f c0       	rjmp	.+30     	; 0x307e <nrk_gpio_direction+0x236>
if(v==NRK_ERROR) nrk_kprintf( PSTR("Failed to register signal\r\n"));
backoff=0;
    3060:	20 b3       	in	r18, 0x10	; 16
    3062:	e3 e0       	ldi	r30, 0x03	; 3
    3064:	56 95       	lsr	r21
    3066:	47 95       	ror	r20
    3068:	ea 95       	dec	r30
    306a:	e1 f7       	brne	.-8      	; 0x3064 <nrk_gpio_direction+0x21c>
    306c:	81 e0       	ldi	r24, 0x01	; 1
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	02 c0       	rjmp	.+4      	; 0x3076 <nrk_gpio_direction+0x22e>
    3072:	88 0f       	add	r24, r24
    3074:	99 1f       	adc	r25, r25
    3076:	4a 95       	dec	r20
    3078:	e2 f7       	brpl	.-8      	; 0x3072 <nrk_gpio_direction+0x22a>
    307a:	28 2b       	or	r18, r24
    307c:	20 bb       	out	0x10, r18	; 16
    307e:	81 e0       	ldi	r24, 0x01	; 1
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	08 95       	ret
    3084:	8f ef       	ldi	r24, 0xFF	; 255
    3086:	9f ef       	ldi	r25, 0xFF	; 255
    while (1) {
    #ifdef NRK_SW_WDT
	#ifdef BMAC_SW_WDT_ID
	nrk_sw_wdt_update(BMAC_SW_WDT_ID);
	#endif
    3088:	08 95       	ret

0000308a <nrk_get_button>:
    #endif
	if(is_enabled ) { 
	v=1;
	if(rx_buf_empty==1) v=_bmac_channel_check();
    308a:	88 23       	and	r24, r24
    308c:	19 f0       	breq	.+6      	; 0x3094 <nrk_get_button+0xa>
    308e:	8f ef       	ldi	r24, 0xFF	; 255
    3090:	9f ef       	ldi	r25, 0xFF	; 255
    3092:	08 95       	ret
	// If the buffer is full, signal the receiving task again.
    3094:	80 b1       	in	r24, 0x00	; 0
    3096:	99 27       	eor	r25, r25
    3098:	87 fd       	sbrc	r24, 7
    309a:	90 95       	com	r25
    309c:	80 95       	com	r24
    309e:	90 95       	com	r25
    30a0:	88 27       	eor	r24, r24
    30a2:	99 0f       	add	r25, r25
    30a4:	88 1f       	adc	r24, r24
    30a6:	99 27       	eor	r25, r25
	else e=nrk_event_signal (bmac_rx_pkt_signal);
	// bmac_channel check turns on radio, don't turn off if
	// data is coming.
    30a8:	08 95       	ret

000030aa <nrk_led_toggle>:
		if(v==0)
			{
			if(_bmac_rx()==1)
			  {
    30aa:	00 97       	sbiw	r24, 0x00	; 0
    30ac:	11 f4       	brne	.+4      	; 0x30b2 <nrk_led_toggle+0x8>
    30ae:	84 e1       	ldi	r24, 0x14	; 20
    30b0:	09 c0       	rjmp	.+18     	; 0x30c4 <nrk_led_toggle+0x1a>
				e=nrk_event_signal (bmac_rx_pkt_signal);
    30b2:	81 30       	cpi	r24, 0x01	; 1
    30b4:	91 05       	cpc	r25, r1
    30b6:	11 f4       	brne	.+4      	; 0x30bc <nrk_led_toggle+0x12>
    30b8:	8c e1       	ldi	r24, 0x1C	; 28
    30ba:	04 c0       	rjmp	.+8      	; 0x30c4 <nrk_led_toggle+0x1a>
				//if(e==NRK_ERROR) {
    30bc:	82 30       	cpi	r24, 0x02	; 2
    30be:	91 05       	cpc	r25, r1
    30c0:	31 f4       	brne	.+12     	; 0x30ce <nrk_led_toggle+0x24>
    30c2:	84 e2       	ldi	r24, 0x24	; 36
    30c4:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <nrk_gpio_toggle>
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	08 95       	ret
				//	nrk_kprintf( PSTR("bmac rx pkt signal failed\r\n"));
    30ce:	03 97       	sbiw	r24, 0x03	; 3
    30d0:	19 f0       	breq	.+6      	; 0x30d8 <nrk_led_toggle+0x2e>
    30d2:	8f ef       	ldi	r24, 0xFF	; 255
    30d4:	9f ef       	ldi	r25, 0xFF	; 255
    30d6:	08 95       	ret
    30d8:	8c e2       	ldi	r24, 0x2C	; 44
    30da:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <nrk_gpio_toggle>
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	90 e0       	ldi	r25, 0x00	; 0
				//	printf( "errno: %u \r\n",nrk_errno_get() );
				//}
    30e2:	08 95       	ret

000030e4 <nrk_led_clr>:
			  }
			  //else nrk_kprintf( PSTR("Pkt failed, buf could be corrupt\r\n" ));
			} 
		if(/*rx_buf_empty==1 &&*/ tx_data_ready==1)
    30e4:	00 97       	sbiw	r24, 0x00	; 0
    30e6:	11 f4       	brne	.+4      	; 0x30ec <nrk_led_clr+0x8>
    30e8:	84 e1       	ldi	r24, 0x14	; 20
    30ea:	09 c0       	rjmp	.+18     	; 0x30fe <nrk_led_clr+0x1a>
			{
    30ec:	81 30       	cpi	r24, 0x01	; 1
    30ee:	91 05       	cpc	r25, r1
    30f0:	11 f4       	brne	.+4      	; 0x30f6 <nrk_led_clr+0x12>
    30f2:	8c e1       	ldi	r24, 0x1C	; 28
    30f4:	04 c0       	rjmp	.+8      	; 0x30fe <nrk_led_clr+0x1a>
				rf_rx_off(); 
    30f6:	82 30       	cpi	r24, 0x02	; 2
    30f8:	91 05       	cpc	r25, r1
    30fa:	31 f4       	brne	.+12     	; 0x3108 <nrk_led_clr+0x24>
    30fc:	84 e2       	ldi	r24, 0x24	; 36
    30fe:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <nrk_gpio_set>
    3102:	81 e0       	ldi	r24, 0x01	; 1
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	08 95       	ret
				_bmac_tx();
    3108:	03 97       	sbiw	r24, 0x03	; 3
    310a:	19 f0       	breq	.+6      	; 0x3112 <nrk_led_clr+0x2e>
    310c:	8f ef       	ldi	r24, 0xFF	; 255
    310e:	9f ef       	ldi	r25, 0xFF	; 255
    3110:	08 95       	ret
    3112:	8c e2       	ldi	r24, 0x2C	; 44
    3114:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <nrk_gpio_set>
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	90 e0       	ldi	r25, 0x00	; 0
			}
	//do {
    311c:	08 95       	ret

0000311e <nrk_led_set>:
		nrk_wait(_bmac_check_period); 
	//	if(rx_buf_empty!=1)  nrk_event_signal (bmac_rx_pkt_signal);
	//} while(rx_buf_empty!=1);
	} else {
    311e:	00 97       	sbiw	r24, 0x00	; 0
    3120:	11 f4       	brne	.+4      	; 0x3126 <nrk_led_set+0x8>
    3122:	84 e1       	ldi	r24, 0x14	; 20
    3124:	09 c0       	rjmp	.+18     	; 0x3138 <nrk_led_set+0x1a>
		event=0;
    3126:	81 30       	cpi	r24, 0x01	; 1
    3128:	91 05       	cpc	r25, r1
    312a:	11 f4       	brne	.+4      	; 0x3130 <nrk_led_set+0x12>
    312c:	8c e1       	ldi	r24, 0x1C	; 28
    312e:	04 c0       	rjmp	.+8      	; 0x3138 <nrk_led_set+0x1a>
		do {
    3130:	82 30       	cpi	r24, 0x02	; 2
    3132:	91 05       	cpc	r25, r1
    3134:	31 f4       	brne	.+12     	; 0x3142 <nrk_led_set+0x24>
    3136:	84 e2       	ldi	r24, 0x24	; 36
    3138:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <nrk_gpio_clr>
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	08 95       	ret
		v=nrk_signal_register(bmac_enable_signal); 
    3142:	03 97       	sbiw	r24, 0x03	; 3
    3144:	19 f0       	breq	.+6      	; 0x314c <nrk_led_set+0x2e>
    3146:	8f ef       	ldi	r24, 0xFF	; 255
    3148:	9f ef       	ldi	r25, 0xFF	; 255
    314a:	08 95       	ret
    314c:	8c e2       	ldi	r24, 0x2C	; 44
    314e:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <nrk_gpio_clr>
    3152:	81 e0       	ldi	r24, 0x01	; 1
    3154:	90 e0       	ldi	r25, 0x00	; 0
    		event=nrk_event_wait (SIG(bmac_enable_signal));
		} while((event & SIG(bmac_enable_signal))==0);
    3156:	08 95       	ret

00003158 <nrk_gpio_pullups>:
	}
	//nrk_wait_until_next_period();
	}

    3158:	88 23       	and	r24, r24
    315a:	19 f0       	breq	.+6      	; 0x3162 <nrk_gpio_pullups+0xa>
    315c:	85 b7       	in	r24, 0x35	; 53
    315e:	8f 7e       	andi	r24, 0xEF	; 239
    3160:	02 c0       	rjmp	.+4      	; 0x3166 <nrk_gpio_pullups+0xe>
}
    3162:	85 b7       	in	r24, 0x35	; 53
    3164:	80 61       	ori	r24, 0x10	; 16
    3166:	85 bf       	out	0x35, r24	; 53


    3168:	81 e0       	ldi	r24, 0x01	; 1
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	08 95       	ret

0000316e <putc0>:
if(val) rf_rx_off(); 
return val;

}

int8_t _bmac_rx()
    316e:	98 2f       	mov	r25, r24
{
    3170:	80 91 c0 00 	lds	r24, 0x00C0
    3174:	85 ff       	sbrs	r24, 5
    3176:	fc cf       	rjmp	.-8      	; 0x3170 <putc0+0x2>
    3178:	80 91 c0 00 	lds	r24, 0x00C0
    317c:	8f 7d       	andi	r24, 0xDF	; 223
    317e:	80 93 c0 00 	sts	0x00C0, r24
    3182:	90 93 c6 00 	sts	0x00C6, r25
    3186:	08 95       	ret

00003188 <putc1>:
int8_t n;
uint8_t cnt;

	rf_set_rx (&bmac_rfRxInfo, g_chan);
    3188:	98 2f       	mov	r25, r24
        rf_polling_rx_on ();
    318a:	80 91 c8 00 	lds	r24, 0x00C8
    318e:	85 ff       	sbrs	r24, 5
    3190:	fc cf       	rjmp	.-8      	; 0x318a <putc1+0x2>
    3192:	90 93 ce 00 	sts	0x00CE, r25
    3196:	08 95       	ret

00003198 <setup_uart0>:
	cnt=0;
	while ((n = rf_rx_check_fifop()) == 0)
	{
	cnt++;
	nrk_wait(_bmac_check_period);
	if(cnt>2) { 
    3198:	29 2f       	mov	r18, r25
    319a:	33 27       	eor	r19, r19
    319c:	20 93 c5 00 	sts	0x00C5, r18
    31a0:	80 93 c4 00 	sts	0x00C4, r24
    31a4:	86 e0       	ldi	r24, 0x06	; 6
    31a6:	80 93 c2 00 	sts	0x00C2, r24
    31aa:	e1 ec       	ldi	r30, 0xC1	; 193
    31ac:	f0 e0       	ldi	r31, 0x00	; 0
    31ae:	80 81       	ld	r24, Z
    31b0:	8b 7f       	andi	r24, 0xFB	; 251
    31b2:	80 83       	st	Z, r24
    31b4:	a0 ec       	ldi	r26, 0xC0	; 192
    31b6:	b0 e0       	ldi	r27, 0x00	; 0
    31b8:	8c 91       	ld	r24, X
    31ba:	82 60       	ori	r24, 0x02	; 2
    31bc:	8c 93       	st	X, r24
			#ifdef DEBUG
    31be:	80 81       	ld	r24, Z
    31c0:	88 61       	ori	r24, 0x18	; 24
    31c2:	80 83       	st	Z, r24
    31c4:	08 95       	ret

000031c6 <setup_uart1>:
			printf( "rx timeout 1 %d\r\n",cnt );
			#endif
			if(rx_failure_cnt<65535) rx_failure_cnt++;
			rf_rx_off();
			return 0;
			} 
    31c6:	29 2f       	mov	r18, r25
    31c8:	33 27       	eor	r19, r19
    31ca:	20 93 cd 00 	sts	0x00CD, r18
    31ce:	80 93 cc 00 	sts	0x00CC, r24
    31d2:	86 e0       	ldi	r24, 0x06	; 6
    31d4:	80 93 ca 00 	sts	0x00CA, r24
    31d8:	e9 ec       	ldi	r30, 0xC9	; 201
    31da:	f0 e0       	ldi	r31, 0x00	; 0
    31dc:	80 81       	ld	r24, Z
    31de:	8b 7f       	andi	r24, 0xFB	; 251
    31e0:	80 83       	st	Z, r24
    31e2:	a8 ec       	ldi	r26, 0xC8	; 200
    31e4:	b0 e0       	ldi	r27, 0x00	; 0
    31e6:	8c 91       	ld	r24, X
    31e8:	82 60       	ori	r24, 0x02	; 2
    31ea:	8c 93       	st	X, r24
	}
    31ec:	80 81       	ld	r24, Z
    31ee:	88 61       	ori	r24, 0x18	; 24
    31f0:	80 83       	st	Z, r24
    31f2:	08 95       	ret

000031f4 <getc0>:
	#endif 
	rx_failure_cnt++;
	return 0; 
	}
rx_failure_cnt++;
return 0;
    31f4:	80 91 c0 00 	lds	r24, 0x00C0
    31f8:	87 ff       	sbrs	r24, 7
    31fa:	fc cf       	rjmp	.-8      	; 0x31f4 <getc0>
    31fc:	80 91 c0 00 	lds	r24, 0x00C0
    3200:	8f 77       	andi	r24, 0x7F	; 127
    3202:	80 93 c0 00 	sts	0x00C0, r24
    3206:	80 91 c6 00 	lds	r24, 0x00C6
}

    320a:	99 27       	eor	r25, r25
    320c:	08 95       	ret

0000320e <nrk_setup_uart>:
			rx_failure_cnt++;
			rf_rx_off(); 
			return 0;
			}        
                }
        }
    320e:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <setup_uart1>
        rf_rx_off();
        if (n == 1) {
                // CRC and checksum passed
    3212:	66 e7       	ldi	r22, 0x76	; 118
    3214:	74 e1       	ldi	r23, 0x14	; 20
    3216:	84 ec       	ldi	r24, 0xC4	; 196
    3218:	98 e1       	ldi	r25, 0x18	; 24
    321a:	0e 94 02 32 	call	0x6404	; 0x6404 <fdevopen>
    321e:	90 93 dc 07 	sts	0x07DC, r25
    3222:	80 93 db 07 	sts	0x07DB, r24
    		rx_buf_empty=0;
    3226:	66 e7       	ldi	r22, 0x76	; 118
    3228:	74 e1       	ldi	r23, 0x14	; 20
    322a:	84 ec       	ldi	r24, 0xC4	; 196
    322c:	98 e1       	ldi	r25, 0x18	; 24
    322e:	0e 94 02 32 	call	0x6404	; 0x6404 <fdevopen>
    3232:	90 93 da 07 	sts	0x07DA, r25
    3236:	80 93 d9 07 	sts	0x07D9, r24
		#ifdef DEBUG
                printf( "BMAC: SNR= %d [",bmac_rfRxInfo.rssi );
                for(uint8_t i=0; i<bmac_rfRxInfo.length; i++ )
    323a:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <nrk_signal_create>
    323e:	80 93 c3 03 	sts	0x03C3, r24
                        printf( "%c", bmac_rfRxInfo.pPayload[i]);
    3242:	8f 3f       	cpi	r24, 0xFF	; 255
    3244:	19 f4       	brne	.+6      	; 0x324c <nrk_setup_uart+0x3e>
    3246:	8e e0       	ldi	r24, 0x0E	; 14
    3248:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <nrk_error_add>
                printf( "]\r\n" );
    324c:	10 92 b1 03 	sts	0x03B1, r1
		#endif
    3250:	10 92 b2 03 	sts	0x03B2, r1
		return 1;
    3254:	80 91 c9 00 	lds	r24, 0x00C9
    3258:	80 68       	ori	r24, 0x80	; 128
    325a:	80 93 c9 00 	sts	0x00C9, r24
    325e:	08 95       	ret

00003260 <nrk_uart_rx_signal_get>:
}

uint16_t bmac_tx_reserve_get()
{
#ifdef NRK_MAX_RESERVES
if(tx_reserve>=0)
    3260:	80 91 c3 03 	lds	r24, 0x03C3
    3264:	8f 3f       	cpi	r24, 0xFF	; 255
    3266:	19 f4       	brne	.+6      	; 0x326e <nrk_uart_rx_signal_get+0xe>
    3268:	8e e0       	ldi	r24, 0x0E	; 14
    326a:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <nrk_error_add>
    326e:	80 91 c3 03 	lds	r24, 0x03C3
  return nrk_reserve_get(tx_reserve);
else return 0;
    3272:	99 27       	eor	r25, r25
    3274:	87 fd       	sbrc	r24, 7
    3276:	90 95       	com	r25
    3278:	08 95       	ret

0000327a <nrk_kprintf>:
rf_addr_decode_enable();
return NRK_OK;
}

int8_t bmac_addr_decode_set_my_mac(uint16_t my_mac)
{
    327a:	cf 93       	push	r28
    327c:	df 93       	push	r29
    327e:	ec 01       	movw	r28, r24
    3280:	07 c0       	rjmp	.+14     	; 0x3290 <nrk_kprintf+0x16>
rf_addr_decode_set_my_mac(my_mac);
return NRK_OK;
}
    3282:	60 91 db 07 	lds	r22, 0x07DB
    3286:	70 91 dc 07 	lds	r23, 0x07DC
    328a:	99 27       	eor	r25, r25
    328c:	0e 94 50 32 	call	0x64a0	; 0x64a0 <fputc>
    3290:	fe 01       	movw	r30, r28
}

int8_t bmac_addr_decode_set_my_mac(uint16_t my_mac)
{
rf_addr_decode_set_my_mac(my_mac);
return NRK_OK;
    3292:	21 96       	adiw	r28, 0x01	; 1
    3294:	84 91       	lpm	r24, Z
    3296:	88 23       	and	r24, r24
    3298:	a1 f7       	brne	.-24     	; 0x3282 <nrk_kprintf+0x8>
    329a:	df 91       	pop	r29
    329c:	cf 91       	pop	r28
    329e:	08 95       	ret

000032a0 <__vector_36>:
static NRK_STK bmac_task_stack[BMAC_STACKSIZE];


//#define DEBUG
static uint32_t rx_failure_cnt;

    32a0:	1f 92       	push	r1
    32a2:	0f 92       	push	r0
    32a4:	0f b6       	in	r0, 0x3f	; 63
    32a6:	0f 92       	push	r0
    32a8:	11 24       	eor	r1, r1
    32aa:	2f 93       	push	r18
    32ac:	3f 93       	push	r19
    32ae:	4f 93       	push	r20
    32b0:	5f 93       	push	r21
    32b2:	6f 93       	push	r22
    32b4:	7f 93       	push	r23
    32b6:	8f 93       	push	r24
    32b8:	9f 93       	push	r25
    32ba:	af 93       	push	r26
    32bc:	bf 93       	push	r27
    32be:	ef 93       	push	r30
    32c0:	ff 93       	push	r31
static uint8_t tx_data_ready;
static uint8_t rx_buf_empty;
static uint8_t bmac_running;
static uint8_t pkt_got_ack;
    32c2:	80 91 c9 00 	lds	r24, 0x00C9
    32c6:	8f 77       	andi	r24, 0x7F	; 127
    32c8:	80 93 c9 00 	sts	0x00C9, r24
static uint8_t g_chan;
    32cc:	80 91 c8 00 	lds	r24, 0x00C8
    32d0:	87 ff       	sbrs	r24, 7
    32d2:	fc cf       	rjmp	.-8      	; 0x32cc <__vector_36+0x2c>
    32d4:	80 91 c8 00 	lds	r24, 0x00C8
    32d8:	8f 77       	andi	r24, 0x7F	; 127
    32da:	80 93 c8 00 	sts	0x00C8, r24
    32de:	90 91 ce 00 	lds	r25, 0x00CE
static uint8_t is_enabled;
    32e2:	80 91 b2 03 	lds	r24, 0x03B2
    32e6:	e8 2f       	mov	r30, r24
    32e8:	ff 27       	eor	r31, r31
    32ea:	ed 54       	subi	r30, 0x4D	; 77
    32ec:	fc 4f       	sbci	r31, 0xFC	; 252
    32ee:	90 83       	st	Z, r25

static nrk_time_t _bmac_check_period;
    32f0:	8f 5f       	subi	r24, 0xFF	; 255
    32f2:	80 93 b2 03 	sts	0x03B2, r24

    32f6:	80 31       	cpi	r24, 0x10	; 16
    32f8:	11 f4       	brne	.+4      	; 0x32fe <__vector_36+0x5e>
    32fa:	10 92 b2 03 	sts	0x03B2, r1
static uint8_t cca_active;
    32fe:	80 91 c3 03 	lds	r24, 0x03C3
    3302:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <nrk_event_signal>
static int8_t tx_reserve;
    3306:	80 91 c8 00 	lds	r24, 0x00C8
    330a:	8f 77       	andi	r24, 0x7F	; 127
    330c:	80 93 c8 00 	sts	0x00C8, r24

    3310:	80 91 c9 00 	lds	r24, 0x00C9
    3314:	80 68       	ori	r24, 0x80	; 128
    3316:	80 93 c9 00 	sts	0x00C9, r24
    331a:	ff 91       	pop	r31
    331c:	ef 91       	pop	r30
    331e:	bf 91       	pop	r27
    3320:	af 91       	pop	r26
    3322:	9f 91       	pop	r25
    3324:	8f 91       	pop	r24
    3326:	7f 91       	pop	r23
    3328:	6f 91       	pop	r22
    332a:	5f 91       	pop	r21
    332c:	4f 91       	pop	r20
    332e:	3f 91       	pop	r19
    3330:	2f 91       	pop	r18
    3332:	0f 90       	pop	r0
    3334:	0f be       	out	0x3f, r0	; 63
    3336:	0f 90       	pop	r0
    3338:	1f 90       	pop	r1
    333a:	18 95       	reti

0000333c <halWait>:
	...


#ifndef BMAC_STACKSIZE
#define BMAC_STACKSIZE	128	
#endif

    3344:	01 97       	sbiw	r24, 0x01	; 1
    3346:	d1 f7       	brne	.-12     	; 0x333c <halWait>
    3348:	08 95       	ret

0000334a <read_eeprom_current_image_checksum>:


/**
 *  This is a callback if you require immediate response to a packet
 */
RF_RX_INFO *rf_rx_callback (RF_RX_INFO * pRRI)
    334a:	fc 01       	movw	r30, r24

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    334c:	a7 e0       	ldi	r26, 0x07	; 7
    334e:	b0 e0       	ldi	r27, 0x00	; 0
    3350:	0e 94 11 35 	call	0x6a22	; 0x6a22 <__eeprom_read_byte_1F2021>
    3354:	80 2d       	mov	r24, r0
{
    3356:	80 83       	st	Z, r24
    // Any code here gets called the instant a packet is received from the interrupt   
    return pRRI;
    3358:	81 e0       	ldi	r24, 0x01	; 1
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	08 95       	ret

0000335e <write_eeprom_current_image_checksum>:
}

int8_t bmac_encryption_set_ctr_counter(uint8_t *counter, uint8_t len)
    335e:	fc 01       	movw	r30, r24
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
    3360:	80 81       	ld	r24, Z
    3362:	a7 e0       	ldi	r26, 0x07	; 7
    3364:	b0 e0       	ldi	r27, 0x00	; 0
    3366:	08 2e       	mov	r0, r24
    3368:	0e 94 19 35 	call	0x6a32	; 0x6a32 <__eeprom_write_byte_1F2021>
{
if(len!=4 ) return NRK_ERROR;
rf_security_set_ctr_counter(counter);
    336c:	81 e0       	ldi	r24, 0x01	; 1
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	08 95       	ret

00003372 <nrk_eeprom_read_byte>:

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    3372:	dc 01       	movw	r26, r24
    3374:	0e 94 11 35 	call	0x6a22	; 0x6a22 <__eeprom_read_byte_1F2021>
    3378:	80 2d       	mov	r24, r0
*
*  This is the Open Source Version of Nano-RK included as part of a Dual
*  Licensing Model. If you are unsure which license to use please refer to:
*  http://www.nanork.org/nano-RK/wiki/Licensing
*
*  This program is free software: you can redistribute it and/or modify
    337a:	99 27       	eor	r25, r25
    337c:	08 95       	ret

0000337e <read_eeprom_mac_address>:
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
    337e:	fc 01       	movw	r30, r24
    3380:	a0 e0       	ldi	r26, 0x00	; 0
    3382:	b0 e0       	ldi	r27, 0x00	; 0
    3384:	0e 94 11 35 	call	0x6a22	; 0x6a22 <__eeprom_read_byte_1F2021>
    3388:	40 2d       	mov	r20, r0
*  You should have received a copy of the GNU General Public License
*  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*
*  Contributing Authors (specific to this file):
*  Anthony Rowe
    338a:	43 83       	std	Z+3, r20	; 0x03
    338c:	a1 e0       	ldi	r26, 0x01	; 1
    338e:	b0 e0       	ldi	r27, 0x00	; 0
    3390:	0e 94 11 35 	call	0x6a22	; 0x6a22 <__eeprom_read_byte_1F2021>
    3394:	80 2d       	mov	r24, r0
*******************************************************************************/
    3396:	82 83       	std	Z+2, r24	; 0x02
    3398:	a2 e0       	ldi	r26, 0x02	; 2
    339a:	b0 e0       	ldi	r27, 0x00	; 0
    339c:	0e 94 11 35 	call	0x6a22	; 0x6a22 <__eeprom_read_byte_1F2021>
    33a0:	30 2d       	mov	r19, r0

    33a2:	31 83       	std	Z+1, r19	; 0x01
    33a4:	a3 e0       	ldi	r26, 0x03	; 3
    33a6:	b0 e0       	ldi	r27, 0x00	; 0
    33a8:	0e 94 11 35 	call	0x6a22	; 0x6a22 <__eeprom_read_byte_1F2021>
    33ac:	90 2d       	mov	r25, r0

    33ae:	90 83       	st	Z, r25
    33b0:	a4 e0       	ldi	r26, 0x04	; 4
    33b2:	b0 e0       	ldi	r27, 0x00	; 0
    33b4:	0e 94 11 35 	call	0x6a22	; 0x6a22 <__eeprom_read_byte_1F2021>
    33b8:	20 2d       	mov	r18, r0

#include <include.h>
#include <ulib.h>
    33ba:	83 0f       	add	r24, r19
#include <stdlib.h>
    33bc:	84 0f       	add	r24, r20
#include <avr/sleep.h>
#include <avr/wdt.h>
    33be:	89 0f       	add	r24, r25
    33c0:	28 17       	cp	r18, r24
    33c2:	19 f4       	brne	.+6      	; 0x33ca <read_eeprom_mac_address+0x4c>
    33c4:	81 e0       	ldi	r24, 0x01	; 1
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	08 95       	ret
    33ca:	8f ef       	ldi	r24, 0xFF	; 255
    33cc:	9f ef       	ldi	r25, 0xFF	; 255
#include <avr/eeprom.h>
#include <stdio.h>
#include <avr/interrupt.h>
    33ce:	08 95       	ret

000033d0 <read_eeprom_channel>:
#include <nrk.h>
#include <nrk_events.h>
#include <nrk_timer.h>
    33d0:	fc 01       	movw	r30, r24
    33d2:	a5 e0       	ldi	r26, 0x05	; 5
    33d4:	b0 e0       	ldi	r27, 0x00	; 0
    33d6:	0e 94 11 35 	call	0x6a22	; 0x6a22 <__eeprom_read_byte_1F2021>
    33da:	80 2d       	mov	r24, r0
#include <nrk_error.h>
    33dc:	80 83       	st	Z, r24
#include <nrk_reserve.h>
#include <bmac.h>
    33de:	81 e0       	ldi	r24, 0x01	; 1
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	08 95       	ret

000033e4 <read_eeprom_load_img_pages>:
#ifndef BMAC_STACKSIZE
#define BMAC_STACKSIZE	128	
#endif

static nrk_task_type bmac_task;
static NRK_STK bmac_task_stack[BMAC_STACKSIZE];
    33e4:	fc 01       	movw	r30, r24
    33e6:	a6 e0       	ldi	r26, 0x06	; 6
    33e8:	b0 e0       	ldi	r27, 0x00	; 0
    33ea:	0e 94 11 35 	call	0x6a22	; 0x6a22 <__eeprom_read_byte_1F2021>
    33ee:	80 2d       	mov	r24, r0

    33f0:	80 83       	st	Z, r24

//#define DEBUG
    33f2:	81 e0       	ldi	r24, 0x01	; 1
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	08 95       	ret

000033f8 <read_eeprom_aes_key>:
static uint32_t rx_failure_cnt;

static uint8_t tx_data_ready;
    33f8:	ac 01       	movw	r20, r24
    33fa:	20 e0       	ldi	r18, 0x00	; 0
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	d9 01       	movw	r26, r18
    3400:	18 96       	adiw	r26, 0x08	; 8
    3402:	0e 94 11 35 	call	0x6a22	; 0x6a22 <__eeprom_read_byte_1F2021>
    3406:	80 2d       	mov	r24, r0
static uint8_t rx_buf_empty;
static uint8_t bmac_running;
static uint8_t pkt_got_ack;
    3408:	fa 01       	movw	r30, r20
    340a:	e2 0f       	add	r30, r18
    340c:	f3 1f       	adc	r31, r19
    340e:	80 83       	st	Z, r24
    3410:	2f 5f       	subi	r18, 0xFF	; 255
    3412:	3f 4f       	sbci	r19, 0xFF	; 255
//#define DEBUG
static uint32_t rx_failure_cnt;

static uint8_t tx_data_ready;
static uint8_t rx_buf_empty;
static uint8_t bmac_running;
    3414:	20 31       	cpi	r18, 0x10	; 16
    3416:	31 05       	cpc	r19, r1
    3418:	91 f7       	brne	.-28     	; 0x33fe <read_eeprom_aes_key+0x6>
static uint8_t pkt_got_ack;
static uint8_t g_chan;
static uint8_t is_enabled;
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	08 95       	ret

00003420 <nrk_eeprom_write_byte>:
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
    3420:	dc 01       	movw	r26, r24
    3422:	06 2e       	mov	r0, r22
    3424:	0e 94 19 35 	call	0x6a32	; 0x6a32 <__eeprom_write_byte_1F2021>
    3428:	08 95       	ret

0000342a <write_eeprom_load_img_pages>:
#include <nrk_error.h>
#include <nrk_reserve.h>
#include <bmac.h>
#include <nrk_cfg.h>


    342a:	fc 01       	movw	r30, r24
    342c:	80 81       	ld	r24, Z
    342e:	a6 e0       	ldi	r26, 0x06	; 6
    3430:	b0 e0       	ldi	r27, 0x00	; 0
    3432:	08 2e       	mov	r0, r24
    3434:	0e 94 19 35 	call	0x6a32	; 0x6a32 <__eeprom_write_byte_1F2021>
#ifndef BMAC_STACKSIZE
#define BMAC_STACKSIZE	128	
#endif
    3438:	81 e0       	ldi	r24, 0x01	; 1
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	08 95       	ret

0000343e <write_eeprom_aes_key>:
static uint8_t pkt_got_ack;
static uint8_t g_chan;
static uint8_t is_enabled;

static nrk_time_t _bmac_check_period;

    343e:	ac 01       	movw	r20, r24
    3440:	20 e0       	ldi	r18, 0x00	; 0
    3442:	30 e0       	ldi	r19, 0x00	; 0
    3444:	d9 01       	movw	r26, r18
    3446:	18 96       	adiw	r26, 0x08	; 8
    3448:	fa 01       	movw	r30, r20
    344a:	e2 0f       	add	r30, r18
    344c:	f3 1f       	adc	r31, r19
    344e:	80 81       	ld	r24, Z
    3450:	08 2e       	mov	r0, r24
    3452:	0e 94 19 35 	call	0x6a32	; 0x6a32 <__eeprom_write_byte_1F2021>
    3456:	2f 5f       	subi	r18, 0xFF	; 255
    3458:	3f 4f       	sbci	r19, 0xFF	; 255
static uint8_t cca_active;
static int8_t tx_reserve;
    345a:	20 31       	cpi	r18, 0x10	; 16
    345c:	31 05       	cpc	r19, r1
    345e:	91 f7       	brne	.-28     	; 0x3444 <write_eeprom_aes_key+0x6>


/**
    3460:	81 e0       	ldi	r24, 0x01	; 1
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	08 95       	ret

00003466 <nrk_int_disable>:
}


void cc259x_tx()
{
    3466:	f8 94       	cli
    3468:	08 95       	ret

0000346a <nrk_int_enable>:
    nrk_gpio_set(NRK_DEBUG_1);
    nrk_gpio_set(NRK_DEBUG_0);
}

    346a:	78 94       	sei
    346c:	08 95       	ret

0000346e <nrk_version>:

    // Set the RF channel
    halRfSetChannel(channel);

    // Turn interrupts back on
	ENABLE_GLOBAL_INT();
    346e:	85 e6       	ldi	r24, 0x65	; 101
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	08 95       	ret

00003474 <_nrk_timer_tick>:
    
   printf( "myAddr=%d\r\n",myAddr );
*/

    nrk_spin_wait_us(500);
    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
    3474:	0e 94 86 28 	call	0x510c	; 0x510c <_nrk_scheduler>
    3478:	08 95       	ret

0000347a <nrk_TCB_init>:

  v = nrk_sem_pend (radio_sem);
  if (v == NRK_ERROR) {
    nrk_kprintf (PSTR ("CC2420 ERROR:  Access to semaphore failed\r\n"));
  }
#endif
    347a:	ef 92       	push	r14
    347c:	ff 92       	push	r15
    347e:	0f 93       	push	r16
    3480:	1f 93       	push	r17
    3482:	cf 93       	push	r28
    3484:	df 93       	push	r29
    3486:	ec 01       	movw	r28, r24
    3488:	8b 01       	movw	r16, r22
    348a:	7a 01       	movw	r14, r20

    // Make sure that the voltage regulator is on, and that the reset pin is inactive
    SET_VREG_ACTIVE();
    348c:	89 85       	ldd	r24, Y+9	; 0x09
    348e:	82 30       	cpi	r24, 0x02	; 2
    3490:	21 f0       	breq	.+8      	; 0x349a <nrk_TCB_init+0x20>
    halWait(1000);
    3492:	80 91 44 07 	lds	r24, 0x0744
    3496:	88 83       	st	Y, r24
    3498:	01 c0       	rjmp	.+2      	; 0x349c <nrk_TCB_init+0x22>
    SET_RESET_ACTIVE();
    349a:	18 82       	st	Y, r1
    halWait(1);
    SET_RESET_INACTIVE();
    349c:	80 91 44 07 	lds	r24, 0x0744
    34a0:	84 30       	cpi	r24, 0x04	; 4
    34a2:	20 f0       	brcs	.+8      	; 0x34ac <nrk_TCB_init+0x32>
    34a4:	60 e0       	ldi	r22, 0x00	; 0
    34a6:	87 e0       	ldi	r24, 0x07	; 7
    34a8:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <nrk_kernel_error_add>
    halWait(100);
    34ac:	89 85       	ldd	r24, Y+9	; 0x09
    34ae:	82 30       	cpi	r24, 0x02	; 2
    34b0:	29 f0       	breq	.+10     	; 0x34bc <nrk_TCB_init+0x42>
    34b2:	80 91 44 07 	lds	r24, 0x0744
    34b6:	8f 5f       	subi	r24, 0xFF	; 255
    34b8:	80 93 44 07 	sts	0x0744, r24

    34bc:	80 91 44 07 	lds	r24, 0x0744
    34c0:	88 23       	and	r24, r24
    34c2:	19 f4       	brne	.+6      	; 0x34ca <nrk_TCB_init+0x50>
    34c4:	81 e0       	ldi	r24, 0x01	; 1
    34c6:	80 93 44 07 	sts	0x0744, r24
    // Initialize the FIFOP external interrupt
    //FIFOP_INT_INIT();
    34ca:	88 81       	ld	r24, Y
    34cc:	99 27       	eor	r25, r25
    34ce:	87 fd       	sbrc	r24, 7
    34d0:	90 95       	com	r25
    34d2:	fc 01       	movw	r30, r24
    34d4:	45 e0       	ldi	r20, 0x05	; 5
    34d6:	ee 0f       	add	r30, r30
    34d8:	ff 1f       	adc	r31, r31
    34da:	4a 95       	dec	r20
    34dc:	e1 f7       	brne	.-8      	; 0x34d6 <nrk_TCB_init+0x5c>
    34de:	e8 0f       	add	r30, r24
    34e0:	f9 1f       	adc	r31, r25
    34e2:	e8 54       	subi	r30, 0x48	; 72
    34e4:	f9 4f       	sbci	r31, 0xF9	; 249
    34e6:	11 83       	std	Z+1, r17	; 0x01
    34e8:	00 83       	st	Z, r16
    //ENABLE_FIFOP_INT();
    34ea:	88 81       	ld	r24, Y
    34ec:	99 27       	eor	r25, r25
    34ee:	87 fd       	sbrc	r24, 7
    34f0:	90 95       	com	r25
    34f2:	fc 01       	movw	r30, r24
    34f4:	35 e0       	ldi	r19, 0x05	; 5
    34f6:	ee 0f       	add	r30, r30
    34f8:	ff 1f       	adc	r31, r31
    34fa:	3a 95       	dec	r19
    34fc:	e1 f7       	brne	.-8      	; 0x34f6 <nrk_TCB_init+0x7c>
    34fe:	e8 0f       	add	r30, r24
    3500:	f9 1f       	adc	r31, r25
    3502:	e8 54       	subi	r30, 0x48	; 72
    3504:	f9 4f       	sbci	r31, 0xF9	; 249
    3506:	88 85       	ldd	r24, Y+8	; 0x08
    3508:	82 87       	std	Z+10, r24	; 0x0a

    350a:	88 81       	ld	r24, Y
    350c:	99 27       	eor	r25, r25
    350e:	87 fd       	sbrc	r24, 7
    3510:	90 95       	com	r25
    3512:	fc 01       	movw	r30, r24
    3514:	25 e0       	ldi	r18, 0x05	; 5
    3516:	ee 0f       	add	r30, r30
    3518:	ff 1f       	adc	r31, r31
    351a:	2a 95       	dec	r18
    351c:	e1 f7       	brne	.-8      	; 0x3516 <nrk_TCB_init+0x9c>
    351e:	e8 0f       	add	r30, r24
    3520:	f9 1f       	adc	r31, r25
    3522:	e8 54       	subi	r30, 0x48	; 72
    3524:	f9 4f       	sbci	r31, 0xF9	; 249
    3526:	83 e0       	ldi	r24, 0x03	; 3
    3528:	81 87       	std	Z+9, r24	; 0x09
    // Turn off all interrupts while we're accessing the CC2420 registers
	DISABLE_GLOBAL_INT();
    352a:	28 81       	ld	r18, Y
    352c:	82 2f       	mov	r24, r18
    352e:	99 27       	eor	r25, r25
    3530:	87 fd       	sbrc	r24, 7
    3532:	90 95       	com	r25
    3534:	fc 01       	movw	r30, r24
    3536:	05 e0       	ldi	r16, 0x05	; 5
    3538:	ee 0f       	add	r30, r30
    353a:	ff 1f       	adc	r31, r31
    353c:	0a 95       	dec	r16
    353e:	e1 f7       	brne	.-8      	; 0x3538 <nrk_TCB_init+0xbe>
    3540:	e8 0f       	add	r30, r24
    3542:	f9 1f       	adc	r31, r25
    3544:	e8 54       	subi	r30, 0x48	; 72
    3546:	f9 4f       	sbci	r31, 0xF9	; 249
    3548:	20 87       	std	Z+8, r18	; 0x08

    354a:	88 81       	ld	r24, Y
    354c:	99 27       	eor	r25, r25
    354e:	87 fd       	sbrc	r24, 7
    3550:	90 95       	com	r25
    3552:	fc 01       	movw	r30, r24
    3554:	15 e0       	ldi	r17, 0x05	; 5
    3556:	ee 0f       	add	r30, r30
    3558:	ff 1f       	adc	r31, r31
    355a:	1a 95       	dec	r17
    355c:	e1 f7       	brne	.-8      	; 0x3556 <nrk_TCB_init+0xdc>
    355e:	e8 0f       	add	r30, r24
    3560:	f9 1f       	adc	r31, r25
    3562:	e8 54       	subi	r30, 0x48	; 72
    3564:	f9 4f       	sbci	r31, 0xF9	; 249
    3566:	15 82       	std	Z+5, r1	; 0x05
    FASTSPI_STROBE(CC2420_SXOSCON);
    3568:	08 81       	ld	r16, Y
    356a:	11 27       	eor	r17, r17
    356c:	07 fd       	sbrc	r16, 7
    356e:	10 95       	com	r17
    3570:	ce 01       	movw	r24, r28
    3572:	0b 96       	adiw	r24, 0x0b	; 11
    3574:	0e 94 da 26 	call	0x4db4	; 0x4db4 <_nrk_time_to_ticks>
    3578:	f8 01       	movw	r30, r16
    357a:	b5 e0       	ldi	r27, 0x05	; 5
    357c:	ee 0f       	add	r30, r30
    357e:	ff 1f       	adc	r31, r31
    3580:	ba 95       	dec	r27
    3582:	e1 f7       	brne	.-8      	; 0x357c <nrk_TCB_init+0x102>
    3584:	e0 0f       	add	r30, r16
    3586:	f1 1f       	adc	r31, r17
    3588:	e8 54       	subi	r30, 0x48	; 72
    358a:	f9 4f       	sbci	r31, 0xF9	; 249
    358c:	94 8f       	std	Z+28, r25	; 0x1c
    358e:	83 8f       	std	Z+27, r24	; 0x1b
    mdmctrl0=0x02E2;
    3590:	08 81       	ld	r16, Y
    3592:	11 27       	eor	r17, r17
    3594:	07 fd       	sbrc	r16, 7
    3596:	10 95       	com	r17
    3598:	ce 01       	movw	r24, r28
    359a:	4b 96       	adiw	r24, 0x1b	; 27
    359c:	0e 94 da 26 	call	0x4db4	; 0x4db4 <_nrk_time_to_ticks>
    35a0:	f8 01       	movw	r30, r16
    35a2:	a5 e0       	ldi	r26, 0x05	; 5
    35a4:	ee 0f       	add	r30, r30
    35a6:	ff 1f       	adc	r31, r31
    35a8:	aa 95       	dec	r26
    35aa:	e1 f7       	brne	.-8      	; 0x35a4 <nrk_TCB_init+0x12a>
    35ac:	e0 0f       	add	r30, r16
    35ae:	f1 1f       	adc	r31, r17
    35b0:	e8 54       	subi	r30, 0x48	; 72
    35b2:	f9 4f       	sbci	r31, 0xF9	; 249
    35b4:	96 8b       	std	Z+22, r25	; 0x16
    35b6:	85 8b       	std	Z+21, r24	; 0x15
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  // Std Preamble, CRC, no auto ack, no hw addr decoding 
    35b8:	88 81       	ld	r24, Y
    35ba:	99 27       	eor	r25, r25
    35bc:	87 fd       	sbrc	r24, 7
    35be:	90 95       	com	r25
    35c0:	fc 01       	movw	r30, r24
    35c2:	75 e0       	ldi	r23, 0x05	; 5
    35c4:	ee 0f       	add	r30, r30
    35c6:	ff 1f       	adc	r31, r31
    35c8:	7a 95       	dec	r23
    35ca:	e1 f7       	brne	.-8      	; 0x35c4 <nrk_TCB_init+0x14a>
    35cc:	e8 0f       	add	r30, r24
    35ce:	f9 1f       	adc	r31, r25
    35d0:	e8 54       	subi	r30, 0x48	; 72
    35d2:	f9 4f       	sbci	r31, 0xF9	; 249
    35d4:	85 89       	ldd	r24, Z+21	; 0x15
    35d6:	96 89       	ldd	r25, Z+22	; 0x16
    35d8:	23 8d       	ldd	r18, Z+27	; 0x1b
    35da:	34 8d       	ldd	r19, Z+28	; 0x1c
    35dc:	82 0f       	add	r24, r18
    35de:	93 1f       	adc	r25, r19
    35e0:	90 8f       	std	Z+24, r25	; 0x18
    35e2:	87 8b       	std	Z+23, r24	; 0x17
    //FASTSPI_SETREG(CC2420_MDMCTRL0, 0x0AF2);  // Turn on automatic packet acknowledgment
    35e4:	08 81       	ld	r16, Y
    35e6:	11 27       	eor	r17, r17
    35e8:	07 fd       	sbrc	r16, 7
    35ea:	10 95       	com	r17
    35ec:	ce 01       	movw	r24, r28
    35ee:	43 96       	adiw	r24, 0x13	; 19
    35f0:	0e 94 da 26 	call	0x4db4	; 0x4db4 <_nrk_time_to_ticks>
    35f4:	f8 01       	movw	r30, r16
    35f6:	65 e0       	ldi	r22, 0x05	; 5
    35f8:	ee 0f       	add	r30, r30
    35fa:	ff 1f       	adc	r31, r31
    35fc:	6a 95       	dec	r22
    35fe:	e1 f7       	brne	.-8      	; 0x35f8 <nrk_TCB_init+0x17e>
    3600:	e0 0f       	add	r30, r16
    3602:	f1 1f       	adc	r31, r17
    3604:	e8 54       	subi	r30, 0x48	; 72
    3606:	f9 4f       	sbci	r31, 0xF9	; 249
    3608:	96 8f       	std	Z+30, r25	; 0x1e
    360a:	85 8f       	std	Z+29, r24	; 0x1d
						// Turn on hw addre decoding 
    360c:	88 81       	ld	r24, Y
    360e:	99 27       	eor	r25, r25
    3610:	87 fd       	sbrc	r24, 7
    3612:	90 95       	com	r25
    3614:	fc 01       	movw	r30, r24
    3616:	55 e0       	ldi	r21, 0x05	; 5
    3618:	ee 0f       	add	r30, r30
    361a:	ff 1f       	adc	r31, r31
    361c:	5a 95       	dec	r21
    361e:	e1 f7       	brne	.-8      	; 0x3618 <nrk_TCB_init+0x19e>
    3620:	e8 0f       	add	r30, r24
    3622:	f9 1f       	adc	r31, r25
    3624:	e8 54       	subi	r30, 0x48	; 72
    3626:	f9 4f       	sbci	r31, 0xF9	; 249
    3628:	85 8d       	ldd	r24, Z+29	; 0x1d
    362a:	96 8d       	ldd	r25, Z+30	; 0x1e
    362c:	92 8f       	std	Z+26, r25	; 0x1a
    362e:	81 8f       	std	Z+25, r24	; 0x19
    FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0500); // Set the correlation threshold = 20
    3630:	88 81       	ld	r24, Y
    3632:	99 27       	eor	r25, r25
    3634:	87 fd       	sbrc	r24, 7
    3636:	90 95       	com	r25
    3638:	fc 01       	movw	r30, r24
    363a:	45 e0       	ldi	r20, 0x05	; 5
    363c:	ee 0f       	add	r30, r30
    363e:	ff 1f       	adc	r31, r31
    3640:	4a 95       	dec	r20
    3642:	e1 f7       	brne	.-8      	; 0x363c <nrk_TCB_init+0x1c2>
    3644:	e8 0f       	add	r30, r24
    3646:	f9 1f       	adc	r31, r25
    3648:	e8 54       	subi	r30, 0x48	; 72
    364a:	f9 4f       	sbci	r31, 0xF9	; 249
    364c:	81 e0       	ldi	r24, 0x01	; 1
    364e:	90 e0       	ldi	r25, 0x00	; 0
    3650:	90 a3       	std	Z+32, r25	; 0x20
    3652:	87 8f       	std	Z+31, r24	; 0x1f
    FASTSPI_SETREG(CC2420_IOCFG0, 0x007F);   // Set the FIFOP threshold to maximum
    3654:	88 81       	ld	r24, Y
    3656:	99 27       	eor	r25, r25
    3658:	87 fd       	sbrc	r24, 7
    365a:	90 95       	com	r25
    365c:	fc 01       	movw	r30, r24
    365e:	35 e0       	ldi	r19, 0x05	; 5
    3660:	ee 0f       	add	r30, r30
    3662:	ff 1f       	adc	r31, r31
    3664:	3a 95       	dec	r19
    3666:	e1 f7       	brne	.-8      	; 0x3660 <nrk_TCB_init+0x1e6>
    3668:	e8 0f       	add	r30, r24
    366a:	f9 1f       	adc	r31, r25
    366c:	e8 54       	subi	r30, 0x48	; 72
    366e:	f9 4f       	sbci	r31, 0xF9	; 249
    3670:	f3 82       	std	Z+3, r15	; 0x03
    3672:	e2 82       	std	Z+2, r14	; 0x02
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security"
    3674:	88 81       	ld	r24, Y
    3676:	99 27       	eor	r25, r25
    3678:	87 fd       	sbrc	r24, 7
    367a:	90 95       	com	r25
    367c:	fc 01       	movw	r30, r24
    367e:	25 e0       	ldi	r18, 0x05	; 5
    3680:	ee 0f       	add	r30, r30
    3682:	ff 1f       	adc	r31, r31
    3684:	2a 95       	dec	r18
    3686:	e1 f7       	brne	.-8      	; 0x3680 <nrk_TCB_init+0x206>
    3688:	e8 0f       	add	r30, r24
    368a:	f9 1f       	adc	r31, r25
    368c:	e8 54       	subi	r30, 0x48	; 72
    368e:	f9 4f       	sbci	r31, 0xF9	; 249
    3690:	81 e0       	ldi	r24, 0x01	; 1
    3692:	84 87       	std	Z+12, r24	; 0x0c
					    // bandpass filter is set to 3uA 

/*
    // FIXME: remove later for auto ack
    myAddr=MY_MAC;
    panId=0x02;
    3694:	81 e0       	ldi	r24, 0x01	; 1
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	df 91       	pop	r29
    369a:	cf 91       	pop	r28
    369c:	1f 91       	pop	r17
    369e:	0f 91       	pop	r16
    36a0:	ff 90       	pop	r15
    36a2:	ef 90       	pop	r14
    36a4:	08 95       	ret

000036a6 <nrk_start>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
uint8_t n;
    rfSettings.myAddr = my_mac;
    36a6:	8f 92       	push	r8
    36a8:	9f 92       	push	r9
    36aa:	af 92       	push	r10
    36ac:	bf 92       	push	r11
    36ae:	cf 92       	push	r12
    36b0:	df 92       	push	r13
    36b2:	ef 92       	push	r14
    36b4:	ff 92       	push	r15
    36b6:	0f 93       	push	r16
    36b8:	1f 93       	push	r17
    36ba:	cf 93       	push	r28
    36bc:	df 93       	push	r29
    36be:	60 ec       	ldi	r22, 0xC0	; 192
    36c0:	a6 2e       	mov	r10, r22
    36c2:	66 e0       	ldi	r22, 0x06	; 6
    36c4:	b6 2e       	mov	r11, r22
    36c6:	cc 24       	eor	r12, r12
    36c8:	dd 24       	eor	r13, r13

#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif

    FASTSPI_STROBE(CC2420_SFLUSHRX);
    36ca:	45 01       	movw	r8, r10


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
uint8_t n;
    rfSettings.myAddr = my_mac;
    36cc:	ec 2c       	mov	r14, r12
void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{

#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    36ce:	f5 01       	movw	r30, r10
    36d0:	f0 80       	ld	r15, Z

    FASTSPI_STROBE(CC2420_SFLUSHRX);
    36d2:	ff ef       	ldi	r31, 0xFF	; 255
    36d4:	ff 16       	cp	r15, r31
    36d6:	91 f0       	breq	.+36     	; 0x36fc <nrk_start+0x56>
    36d8:	e4 01       	movw	r28, r8
    36da:	00 e0       	ldi	r16, 0x00	; 0
    36dc:	10 e0       	ldi	r17, 0x00	; 0
    FASTSPI_STROBE(CC2420_SFLUSHRX);
    halRfSetChannel(channel);
    rfSettings.pRxInfo = pRRI;

    36de:	e0 16       	cp	r14, r16
    36e0:	39 f0       	breq	.+14     	; 0x36f0 <nrk_start+0x4a>
    36e2:	88 81       	ld	r24, Y
    36e4:	f8 16       	cp	r15, r24
    36e6:	21 f4       	brne	.+8      	; 0x36f0 <nrk_start+0x4a>
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    36e8:	6f 2d       	mov	r22, r15
    36ea:	85 e0       	ldi	r24, 0x05	; 5
    36ec:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <nrk_kernel_error_add>
    36f0:	0f 5f       	subi	r16, 0xFF	; 255
    36f2:	1f 4f       	sbci	r17, 0xFF	; 255
    36f4:	a1 96       	adiw	r28, 0x21	; 33
    nrk_sem_pend (radio_sem);
#endif

    FASTSPI_STROBE(CC2420_SFLUSHRX);
    FASTSPI_STROBE(CC2420_SFLUSHRX);
    halRfSetChannel(channel);
    36f6:	04 30       	cpi	r16, 0x04	; 4
    36f8:	11 05       	cpc	r17, r1
    36fa:	89 f7       	brne	.-30     	; 0x36de <nrk_start+0x38>
    36fc:	08 94       	sec
    36fe:	c1 1c       	adc	r12, r1
    3700:	d1 1c       	adc	r13, r1
    3702:	81 e2       	ldi	r24, 0x21	; 33
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	a8 0e       	add	r10, r24
    3708:	b9 1e       	adc	r11, r25


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{

#ifdef RADIO_PRIORITY_CEILING
    370a:	94 e0       	ldi	r25, 0x04	; 4
    370c:	c9 16       	cp	r12, r25
    370e:	d1 04       	cpc	r13, r1
    3710:	e9 f6       	brne	.-70     	; 0x36cc <nrk_start+0x26>
//-------------------------------------------------------------------------------------------------------
//  void rf_init(RF_RX_INFO *pRRI, uint8_t channel, WORD panId, WORD myAddr)
//
//  DESCRIPTION:
//      Initializes CC2420 for radio communication via the basic RF library functions. Turns on the
//		voltage regulator, resets the CC2420, turns on the crystal oscillator, writes all necessary
    3712:	0e 94 88 22 	call	0x4510	; 0x4510 <nrk_get_high_ready_task_ID>
//		registers and protocol addresses (for automatic address recognition). Note that the crystal
    3716:	28 2f       	mov	r18, r24
    3718:	33 27       	eor	r19, r19
    371a:	27 fd       	sbrc	r18, 7
    371c:	30 95       	com	r19
    371e:	f9 01       	movw	r30, r18
    3720:	55 e0       	ldi	r21, 0x05	; 5
    3722:	ee 0f       	add	r30, r30
    3724:	ff 1f       	adc	r31, r31
    3726:	5a 95       	dec	r21
    3728:	e1 f7       	brne	.-8      	; 0x3722 <nrk_start+0x7c>
    372a:	e2 0f       	add	r30, r18
    372c:	f3 1f       	adc	r31, r19
    372e:	e8 54       	subi	r30, 0x48	; 72
    3730:	f9 4f       	sbci	r31, 0xF9	; 249
    3732:	32 85       	ldd	r19, Z+10	; 0x0a
    3734:	30 93 57 07 	sts	0x0757, r19
//		oscillator will remain on (forever).
    3738:	21 e2       	ldi	r18, 0x21	; 33
    373a:	82 02       	muls	r24, r18
    373c:	c0 01       	movw	r24, r0
    373e:	11 24       	eor	r1, r1
    3740:	88 54       	subi	r24, 0x48	; 72
    3742:	99 4f       	sbci	r25, 0xF9	; 249
    3744:	90 93 56 07 	sts	0x0756, r25
    3748:	80 93 55 07 	sts	0x0755, r24
    374c:	90 93 47 07 	sts	0x0747, r25
    3750:	80 93 46 07 	sts	0x0746, r24
//
    3754:	30 93 48 07 	sts	0x0748, r19
//			short address will be given to associated nodes by the PAN coordinator.
//-------------------------------------------------------------------------------------------------------
void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr) {
    uint8_t n;

#ifdef RADIO_PRIORITY_CEILING
    3758:	0e 94 11 30 	call	0x6022	; 0x6022 <nrk_target_start>
   int8_t v;
    375c:	0e 94 f7 2f 	call	0x5fee	; 0x5fee <nrk_stack_pointer_init>
    radio_sem = nrk_sem_create(1,RADIO_PRIORITY_CEILING);
    3760:	0e 94 35 30 	call	0x606a	; 0x606a <nrk_start_high_ready_task>
    3764:	ff cf       	rjmp	.-2      	; 0x3764 <nrk_start+0xbe>

00003766 <nrk_init>:
{
    DISABLE_GLOBAL_INT();
    FASTSPI_STROBE(CC2420_SXOSCOFF);
    FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
    ENABLE_GLOBAL_INT();
}
    3766:	0f 93       	push	r16
    3768:	1f 93       	push	r17
    376a:	cf 93       	push	r28
    376c:	df 93       	push	r29
    376e:	cd b7       	in	r28, 0x3d	; 61
    3770:	de b7       	in	r29, 0x3e	; 62
    3772:	a3 97       	sbiw	r28, 0x23	; 35
    3774:	0f b6       	in	r0, 0x3f	; 63
    3776:	f8 94       	cli
    3778:	de bf       	out	0x3e, r29	; 62
    377a:	0f be       	out	0x3f, r0	; 63
    377c:	cd bf       	out	0x3d, r28	; 61

void rf_power_up()
{

    DISABLE_GLOBAL_INT();
    FASTSPI_STROBE(CC2420_SXOSCON);
    377e:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <nrk_signal_create>
    3782:	80 93 45 07 	sts	0x0745, r24
    nrk_spin_wait_us(OSC_STARTUP_DELAY);
    3786:	8f 3f       	cpi	r24, 0xFF	; 255
    3788:	21 f4       	brne	.+8      	; 0x3792 <nrk_init+0x2c>
    378a:	60 e0       	ldi	r22, 0x00	; 0
    378c:	8e e0       	ldi	r24, 0x0E	; 14
    378e:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <nrk_kernel_error_add>
    ENABLE_GLOBAL_INT();

}
    3792:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <_nrk_startup_error>

    3796:	80 ff       	sbrs	r24, 0
    3798:	04 c0       	rjmp	.+8      	; 0x37a2 <nrk_init+0x3c>
    379a:	60 e0       	ldi	r22, 0x00	; 0
    379c:	86 e0       	ldi	r24, 0x06	; 6
    379e:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <nrk_kernel_error_add>
    FASTSPI_SETREG(CC2420_SECCTRL1, 0x0e0e); // Encrypt / Decrypt 18 bytes into header

security_enable=1;
}


    37a2:	10 92 48 07 	sts	0x0748, r1

    37a6:	10 92 56 07 	sts	0x0756, r1
    37aa:	10 92 55 07 	sts	0x0755, r1
void rf_security_disable()
{
    37ae:	10 92 47 07 	sts	0x0747, r1
    37b2:	10 92 46 07 	sts	0x0746, r1
  FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security enable"
    37b6:	10 92 57 07 	sts	0x0757, r1

//-------------------------------------------------------------------------------------------------------
// The RF settings structure is declared here, since we'll always need halRfInit()
volatile RF_SETTINGS rfSettings;
volatile uint8_t rx_ready;
//-------------------------------------------------------------------------------------------------------
    37ba:	0e 94 8a 2a 	call	0x5514	; 0x5514 <_nrk_reserve_init>
nrk_sem_t* rf_get_sem()
{
return radio_sem;
    37be:	10 92 54 07 	sts	0x0754, r1
}

void rf_tx_power(uint8_t pwr)
{
    37c2:	8f ef       	ldi	r24, 0xFF	; 255
    37c4:	80 93 3e 07 	sts	0x073E, r24
uint16_t tmp;
    37c8:	80 93 40 07 	sts	0x0740, r24
    //tmp=0x5070;
    37cc:	80 93 3f 07 	sts	0x073F, r24
{
return radio_sem;
}

void rf_tx_power(uint8_t pwr)
{
    37d0:	80 93 41 07 	sts	0x0741, r24
uint16_t tmp;
    37d4:	80 93 43 07 	sts	0x0743, r24
    //tmp=0x5070;
    37d8:	80 93 42 07 	sts	0x0742, r24
    37dc:	e8 eb       	ldi	r30, 0xB8	; 184
    37de:	f6 e0       	ldi	r31, 0x06	; 6
#endif
    tmp=0xA0E0;
    tmp=tmp | (pwr&0x1F);  
    FASTSPI_SETREG(CC2420_TXCTRL, tmp);   // Set the FIFOP threshold to maximum
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    37e0:	83 e6       	ldi	r24, 0x63	; 99
    37e2:	82 87       	std	Z+10, r24	; 0x0a
#endif
    37e4:	8f ef       	ldi	r24, 0xFF	; 255
    37e6:	80 87       	std	Z+8, r24	; 0x08
    37e8:	b1 96       	adiw	r30, 0x21	; 33
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    tmp=0xA0E0;
    tmp=tmp | (pwr&0x1F);  
    FASTSPI_SETREG(CC2420_TXCTRL, tmp);   // Set the FIFOP threshold to maximum
    37ea:	27 e0       	ldi	r18, 0x07	; 7
    37ec:	ec 33       	cpi	r30, 0x3C	; 60
    37ee:	f2 07       	cpc	r31, r18
    37f0:	b9 f7       	brne	.-18     	; 0x37e0 <nrk_init+0x7a>
    37f2:	e8 e5       	ldi	r30, 0x58	; 88
    37f4:	f7 e0       	ldi	r31, 0x07	; 7
void rf_set_channel( uint8_t channel )
{
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    halRfSetChannel(channel);
    37f6:	cf 01       	movw	r24, r30
    37f8:	05 96       	adiw	r24, 0x05	; 5
    37fa:	94 83       	std	Z+4, r25	; 0x04
    37fc:	83 83       	std	Z+3, r24	; 0x03
#ifdef RADIO_PRIORITY_CEILING
    37fe:	f7 83       	std	Z+7, r31	; 0x07
    3800:	e6 83       	std	Z+6, r30	; 0x06
    3802:	fc 01       	movw	r30, r24
#endif
}
void rf_set_channel( uint8_t channel )
{
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    3804:	27 e0       	ldi	r18, 0x07	; 7
    3806:	8c 36       	cpi	r24, 0x6C	; 108
    3808:	92 07       	cpc	r25, r18
    380a:	a9 f7       	brne	.-22     	; 0x37f6 <nrk_init+0x90>
#endif
    halRfSetChannel(channel);
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
}
    380c:	10 92 5a 07 	sts	0x075A, r1
    3810:	10 92 59 07 	sts	0x0759, r1

    3814:	10 92 70 07 	sts	0x0770, r1
    3818:	10 92 6f 07 	sts	0x076F, r1

    381c:	10 92 4b 07 	sts	0x074B, r1
    3820:	10 92 4a 07 	sts	0x074A, r1
void rf_addr_decode_enable()
    3824:	44 97       	sbiw	r24, 0x14	; 20
    3826:	90 93 b7 06 	sts	0x06B7, r25
    382a:	80 93 b6 06 	sts	0x06B6, r24
{
    mdmctrl0 |= 0x0800;
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
}

    382e:	62 e6       	ldi	r22, 0x62	; 98
    3830:	78 e2       	ldi	r23, 0x28	; 40
    3832:	8e 01       	movw	r16, r28
    3834:	0f 5f       	subi	r16, 0xFF	; 255
    3836:	1f 4f       	sbci	r17, 0xFF	; 255
    3838:	c8 01       	movw	r24, r16
    383a:	0e 94 b5 2f 	call	0x5f6a	; 0x5f6a <nrk_task_set_entry_function>
void rf_addr_decode_disable()
    383e:	40 e8       	ldi	r20, 0x80	; 128
    3840:	50 e0       	ldi	r21, 0x00	; 0
    3842:	65 e1       	ldi	r22, 0x15	; 21
    3844:	76 e0       	ldi	r23, 0x06	; 6
    3846:	c8 01       	movw	r24, r16
    3848:	0e 94 16 30 	call	0x602c	; 0x602c <nrk_task_set_stk>
{
    384c:	85 e5       	ldi	r24, 0x55	; 85
    384e:	80 93 15 06 	sts	0x0615, r24
    mdmctrl0 &= (~0x0800);
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
    3852:	19 86       	std	Y+9, r1	; 0x09
}
    3854:	1c 86       	std	Y+12, r1	; 0x0c
    3856:	1d 86       	std	Y+13, r1	; 0x0d
    3858:	1e 86       	std	Y+14, r1	; 0x0e
    385a:	1f 86       	std	Y+15, r1	; 0x0f

    385c:	18 8a       	std	Y+16, r1	; 0x10
    385e:	19 8a       	std	Y+17, r1	; 0x11
    3860:	1a 8a       	std	Y+18, r1	; 0x12
    3862:	1b 8a       	std	Y+19, r1	; 0x13

    3864:	1c 8a       	std	Y+20, r1	; 0x14
    3866:	1d 8a       	std	Y+21, r1	; 0x15
    3868:	1e 8a       	std	Y+22, r1	; 0x16
    386a:	1f 8a       	std	Y+23, r1	; 0x17
void rf_auto_ack_enable()
    386c:	18 8e       	std	Y+24, r1	; 0x18
    386e:	19 8e       	std	Y+25, r1	; 0x19
    3870:	1a 8e       	std	Y+26, r1	; 0x1a
    3872:	1b 8e       	std	Y+27, r1	; 0x1b
{
    3874:	1c 8e       	std	Y+28, r1	; 0x1c
    3876:	1d 8e       	std	Y+29, r1	; 0x1d
    3878:	1e 8e       	std	Y+30, r1	; 0x1e
    387a:	1f 8e       	std	Y+31, r1	; 0x1f
    auto_ack_enable=1;
    387c:	18 a2       	std	Y+32, r1	; 0x20
    387e:	19 a2       	std	Y+33, r1	; 0x21
    3880:	1a a2       	std	Y+34, r1	; 0x22
    3882:	1b a2       	std	Y+35, r1	; 0x23
    mdmctrl0 |= 0x0010;
    3884:	91 e0       	ldi	r25, 0x01	; 1
    3886:	98 87       	std	Y+8, r25	; 0x08
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0); 
    3888:	82 e0       	ldi	r24, 0x02	; 2
    388a:	8a 87       	std	Y+10, r24	; 0x0a
}
    388c:	9b 87       	std	Y+11, r25	; 0x0b

    388e:	c8 01       	movw	r24, r16
    3890:	0e 94 65 25 	call	0x4aca	; 0x4aca <nrk_activate_task>
    3894:	a3 96       	adiw	r28, 0x23	; 35
    3896:	0f b6       	in	r0, 0x3f	; 63
    3898:	f8 94       	cli
    389a:	de bf       	out	0x3e, r29	; 62
    389c:	0f be       	out	0x3f, r0	; 63
    389e:	cd bf       	out	0x3d, r28	; 61
    38a0:	df 91       	pop	r29
    38a2:	cf 91       	pop	r28
    38a4:	1f 91       	pop	r17
    38a6:	0f 91       	pop	r16
    38a8:	08 95       	ret

000038aa <nrk_halt>:
    nrk_gpio_clr(NRK_DEBUG_0);
}


void cc259x_tx()
{
    38aa:	f8 94       	cli
    38ac:	ff cf       	rjmp	.-2      	; 0x38ac <nrk_halt+0x2>

000038ae <_nrk_errno_set>:
void cc259x_rx()
{
    nrk_gpio_set(NRK_DEBUG_1);
    nrk_gpio_clr(NRK_DEBUG_0);
}

    38ae:	e0 91 55 07 	lds	r30, 0x0755
    38b2:	f0 91 56 07 	lds	r31, 0x0756
    38b6:	84 87       	std	Z+12, r24	; 0x0c
    38b8:	08 95       	ret

000038ba <nrk_errno_get>:

void cc259x_tx()
{
    nrk_gpio_set(NRK_DEBUG_1);
    38ba:	e0 91 55 07 	lds	r30, 0x0755
    38be:	f0 91 56 07 	lds	r31, 0x0756
    38c2:	84 85       	ldd	r24, Z+12	; 0x0c
    nrk_gpio_set(NRK_DEBUG_0);
}
    38c4:	99 27       	eor	r25, r25
    38c6:	08 95       	ret

000038c8 <nrk_error_get>:
{
  FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security enable"
  security_enable=0;
}

//-------------------------------------------------------------------------------------------------------
    38c8:	dc 01       	movw	r26, r24
    38ca:	fb 01       	movw	r30, r22
// The RF settings structure is declared here, since we'll always need halRfInit()
    38cc:	80 91 14 06 	lds	r24, 0x0614
    38d0:	88 23       	and	r24, r24
    38d2:	19 f4       	brne	.+6      	; 0x38da <nrk_error_get+0x12>
    38d4:	80 e0       	ldi	r24, 0x00	; 0
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	08 95       	ret
volatile RF_SETTINGS rfSettings;
volatile uint8_t rx_ready;
    38da:	80 83       	st	Z, r24
//-------------------------------------------------------------------------------------------------------
    38dc:	80 91 44 04 	lds	r24, 0x0444
    38e0:	8c 93       	st	X, r24
    38e2:	81 e0       	ldi	r24, 0x01	; 1
    38e4:	90 e0       	ldi	r25, 0x00	; 0
nrk_sem_t* rf_get_sem()
{
    38e6:	08 95       	ret

000038e8 <pause>:
the packet BIATCH...
**************************************************************************/
uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
	uint16_t frameControlField;
    	uint8_t packetLength;
    	uint8_t success;
    38e8:	cf 93       	push	r28
    38ea:	df 93       	push	r29
    38ec:	cd b7       	in	r28, 0x3d	; 61
    38ee:	de b7       	in	r29, 0x3e	; 62
    38f0:	21 97       	sbiw	r28, 0x01	; 1
    38f2:	0f b6       	in	r0, 0x3f	; 63
    38f4:	f8 94       	cli
    38f6:	de bf       	out	0x3e, r29	; 62
    38f8:	0f be       	out	0x3f, r0	; 63
    38fa:	cd bf       	out	0x3d, r28	; 61
    	uint8_t spiStatusByte;
   	uint8_t checksum,i;
    38fc:	19 82       	std	Y+1, r1	; 0x01
    38fe:	07 c0       	rjmp	.+14     	; 0x390e <pause+0x26>
	uint8_t timestamp;
    3900:	80 ed       	ldi	r24, 0xD0	; 208
    3902:	97 e0       	ldi	r25, 0x07	; 7
    3904:	0e 94 04 2c 	call	0x5808	; 0x5808 <nrk_spin_wait_us>
uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
	uint16_t frameControlField;
    	uint8_t packetLength;
    	uint8_t success;
    	uint8_t spiStatusByte;
   	uint8_t checksum,i;
    3908:	89 81       	ldd	r24, Y+1	; 0x01
    390a:	8f 5f       	subi	r24, 0xFF	; 255
    390c:	89 83       	std	Y+1, r24	; 0x01
    390e:	89 81       	ldd	r24, Y+1	; 0x01
    3910:	84 36       	cpi	r24, 0x64	; 100
    3912:	b0 f3       	brcs	.-20     	; 0x3900 <pause+0x18>
    3914:	21 96       	adiw	r28, 0x01	; 1
    3916:	0f b6       	in	r0, 0x3f	; 63
    3918:	f8 94       	cli
    391a:	de bf       	out	0x3e, r29	; 62
    391c:	0f be       	out	0x3f, r0	; 63
    391e:	cd bf       	out	0x3d, r28	; 61
    3920:	df 91       	pop	r29
    3922:	cf 91       	pop	r28
    3924:	08 95       	ret

00003926 <blink_dot>:
RF_RX_INFO* rf_rx_callback(RF_RX_INFO *pRRI) {
	// Its okay to leave this empty...    
	return pRRI;
}  
***********************************************************/

    3926:	81 e0       	ldi	r24, 0x01	; 1
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	0e 94 8f 18 	call	0x311e	; 0x311e <nrk_led_set>

    392e:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <pause>

    3932:	81 e0       	ldi	r24, 0x01	; 1
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	0e 94 72 18 	call	0x30e4	; 0x30e4 <nrk_led_clr>

    393a:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <pause>
    393e:	08 95       	ret

00003940 <blink_dash>:
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
} // rf_rx_on() 


    3940:	81 e0       	ldi	r24, 0x01	; 1
    3942:	90 e0       	ldi	r25, 0x00	; 0
    3944:	0e 94 8f 18 	call	0x311e	; 0x311e <nrk_led_set>
/**********************************************************
    3948:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <pause>
// Here is a sample of the rf_rx_callback() that should
    394c:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <pause>
// be placed in your application
    3950:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <pause>

    3954:	81 e0       	ldi	r24, 0x01	; 1
    3956:	90 e0       	ldi	r25, 0x00	; 0
    3958:	0e 94 72 18 	call	0x30e4	; 0x30e4 <nrk_led_clr>
RF_RX_INFO* rf_rx_callback(RF_RX_INFO *pRRI) {
    395c:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <pause>
    3960:	08 95       	ret

00003962 <blink_morse_code_error>:

//-------------------------------------------------------------------------------------------------------
//  void rf_rx_off(void)
//
//  DESCRIPTION:
//      Disables the CC2420 receiver and the FIFOP interrupt.
    3962:	ef 92       	push	r14
    3964:	ff 92       	push	r15
    3966:	0f 93       	push	r16
    3968:	1f 93       	push	r17
    396a:	cf 93       	push	r28
    396c:	df 93       	push	r29
    396e:	cd b7       	in	r28, 0x3d	; 61
    3970:	de b7       	in	r29, 0x3e	; 62
    3972:	23 97       	sbiw	r28, 0x03	; 3
    3974:	0f b6       	in	r0, 0x3f	; 63
    3976:	f8 94       	cli
    3978:	de bf       	out	0x3e, r29	; 62
    397a:	0f be       	out	0x3f, r0	; 63
    397c:	cd bf       	out	0x3d, r28	; 61
//-------------------------------------------------------------------------------------------------------
void rf_rx_off(void) {
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    397e:	99 27       	eor	r25, r25
    3980:	9f 93       	push	r25
    3982:	8f 93       	push	r24
    3984:	8e e9       	ldi	r24, 0x9E	; 158
    3986:	92 e0       	ldi	r25, 0x02	; 2
    3988:	9f 93       	push	r25
    398a:	8f 93       	push	r24
    398c:	8e 01       	movw	r16, r28
    398e:	0f 5f       	subi	r16, 0xFF	; 255
    3990:	1f 4f       	sbci	r17, 0xFF	; 255
    3992:	1f 93       	push	r17
    3994:	0f 93       	push	r16
    3996:	0e 94 ce 32 	call	0x659c	; 0x659c <sprintf>
    399a:	ee 24       	eor	r14, r14
    399c:	ff 24       	eor	r15, r15
#endif
	// XXX
    399e:	8d b7       	in	r24, 0x3d	; 61
    39a0:	9e b7       	in	r25, 0x3e	; 62
    39a2:	06 96       	adiw	r24, 0x06	; 6
    39a4:	0f b6       	in	r0, 0x3f	; 63
    39a6:	f8 94       	cli
    39a8:	9e bf       	out	0x3e, r25	; 62
    39aa:	0f be       	out	0x3f, r0	; 63
    39ac:	8d bf       	out	0x3d, r24	; 61
    39ae:	73 c0       	rjmp	.+230    	; 0x3a96 <blink_morse_code_error+0x134>
    	//SET_VREG_INACTIVE();	
	rfSettings.receiveOn = FALSE;
    39b0:	a0 0f       	add	r26, r16
    39b2:	b1 1f       	adc	r27, r17
    39b4:	8c 91       	ld	r24, X
    39b6:	84 33       	cpi	r24, 0x34	; 52
    39b8:	d1 f1       	breq	.+116    	; 0x3a2e <blink_morse_code_error+0xcc>
    39ba:	85 33       	cpi	r24, 0x35	; 53
    39bc:	70 f4       	brcc	.+28     	; 0x39da <blink_morse_code_error+0x78>
    39be:	81 33       	cpi	r24, 0x31	; 49
    39c0:	f9 f0       	breq	.+62     	; 0x3a00 <blink_morse_code_error+0x9e>
    39c2:	82 33       	cpi	r24, 0x32	; 50
    39c4:	20 f4       	brcc	.+8      	; 0x39ce <blink_morse_code_error+0x6c>
    39c6:	80 33       	cpi	r24, 0x30	; 48
    39c8:	09 f0       	breq	.+2      	; 0x39cc <blink_morse_code_error+0x6a>
    39ca:	5c c0       	rjmp	.+184    	; 0x3a84 <blink_morse_code_error+0x122>
    39cc:	16 c0       	rjmp	.+44     	; 0x39fa <blink_morse_code_error+0x98>
    39ce:	82 33       	cpi	r24, 0x32	; 50
    39d0:	11 f1       	breq	.+68     	; 0x3a16 <blink_morse_code_error+0xb4>
    39d2:	83 33       	cpi	r24, 0x33	; 51
    39d4:	09 f0       	breq	.+2      	; 0x39d8 <blink_morse_code_error+0x76>
    39d6:	56 c0       	rjmp	.+172    	; 0x3a84 <blink_morse_code_error+0x122>
    39d8:	23 c0       	rjmp	.+70     	; 0x3a20 <blink_morse_code_error+0xbe>
    39da:	87 33       	cpi	r24, 0x37	; 55
    39dc:	c9 f1       	breq	.+114    	; 0x3a50 <blink_morse_code_error+0xee>
    39de:	88 33       	cpi	r24, 0x38	; 56
    39e0:	30 f4       	brcc	.+12     	; 0x39ee <blink_morse_code_error+0x8c>
    39e2:	85 33       	cpi	r24, 0x35	; 53
    39e4:	69 f1       	breq	.+90     	; 0x3a40 <blink_morse_code_error+0xde>
    39e6:	86 33       	cpi	r24, 0x36	; 54
    39e8:	09 f0       	breq	.+2      	; 0x39ec <blink_morse_code_error+0x8a>
    39ea:	4c c0       	rjmp	.+152    	; 0x3a84 <blink_morse_code_error+0x122>
    39ec:	2c c0       	rjmp	.+88     	; 0x3a46 <blink_morse_code_error+0xe4>
    39ee:	88 33       	cpi	r24, 0x38	; 56
    39f0:	b1 f1       	breq	.+108    	; 0x3a5e <blink_morse_code_error+0xfc>
    39f2:	89 33       	cpi	r24, 0x39	; 57
    39f4:	09 f0       	breq	.+2      	; 0x39f8 <blink_morse_code_error+0x96>
    39f6:	46 c0       	rjmp	.+140    	; 0x3a84 <blink_morse_code_error+0x122>
    39f8:	3b c0       	rjmp	.+118    	; 0x3a70 <blink_morse_code_error+0x10e>
	FASTSPI_STROBE(CC2420_SRFOFF);
#ifdef CC2420_OSC_OPT
    39fa:	0e 94 a0 1c 	call	0x3940	; 0x3940 <blink_dash>
    39fe:	02 c0       	rjmp	.+4      	; 0x3a04 <blink_morse_code_error+0xa2>
	FASTSPI_STROBE(CC2420_SXOSCOFF);
    3a00:	0e 94 93 1c 	call	0x3926	; 0x3926 <blink_dot>
    3a04:	0e 94 a0 1c 	call	0x3940	; 0x3940 <blink_dash>
    3a08:	0e 94 a0 1c 	call	0x3940	; 0x3940 <blink_dash>
    3a0c:	0e 94 a0 1c 	call	0x3940	; 0x3940 <blink_dash>
    3a10:	0e 94 a0 1c 	call	0x3940	; 0x3940 <blink_dash>
    3a14:	37 c0       	rjmp	.+110    	; 0x3a84 <blink_morse_code_error+0x122>
#endif
    3a16:	0e 94 93 1c 	call	0x3926	; 0x3926 <blink_dot>
    3a1a:	0e 94 93 1c 	call	0x3926	; 0x3926 <blink_dot>
    3a1e:	f4 cf       	rjmp	.-24     	; 0x3a08 <blink_morse_code_error+0xa6>
	rx_ready=0;
    3a20:	0e 94 93 1c 	call	0x3926	; 0x3926 <blink_dot>
    3a24:	0e 94 93 1c 	call	0x3926	; 0x3926 <blink_dot>
    3a28:	0e 94 93 1c 	call	0x3926	; 0x3926 <blink_dot>
    3a2c:	ef cf       	rjmp	.-34     	; 0x3a0c <blink_morse_code_error+0xaa>
#ifdef RADIO_PRIORITY_CEILING
    3a2e:	0e 94 93 1c 	call	0x3926	; 0x3926 <blink_dot>
    3a32:	0e 94 93 1c 	call	0x3926	; 0x3926 <blink_dot>
    3a36:	0e 94 93 1c 	call	0x3926	; 0x3926 <blink_dot>
    3a3a:	0e 94 93 1c 	call	0x3926	; 0x3926 <blink_dot>
    3a3e:	e8 cf       	rjmp	.-48     	; 0x3a10 <blink_morse_code_error+0xae>
    nrk_sem_post(radio_sem);
    3a40:	0e 94 93 1c 	call	0x3926	; 0x3926 <blink_dot>
    3a44:	02 c0       	rjmp	.+4      	; 0x3a4a <blink_morse_code_error+0xe8>
#endif
    3a46:	0e 94 a0 1c 	call	0x3940	; 0x3940 <blink_dash>
    3a4a:	0e 94 93 1c 	call	0x3926	; 0x3926 <blink_dot>
    3a4e:	04 c0       	rjmp	.+8      	; 0x3a58 <blink_morse_code_error+0xf6>
    //	DISABLE_FIFOP_INT();
    3a50:	0e 94 a0 1c 	call	0x3940	; 0x3940 <blink_dash>
    3a54:	0e 94 a0 1c 	call	0x3940	; 0x3940 <blink_dash>
    3a58:	0e 94 93 1c 	call	0x3926	; 0x3926 <blink_dot>
    3a5c:	06 c0       	rjmp	.+12     	; 0x3a6a <blink_morse_code_error+0x108>
} // rf_rx_off() 
    3a5e:	0e 94 a0 1c 	call	0x3940	; 0x3940 <blink_dash>
    3a62:	0e 94 a0 1c 	call	0x3940	; 0x3940 <blink_dash>
    3a66:	0e 94 a0 1c 	call	0x3940	; 0x3940 <blink_dash>
    3a6a:	0e 94 93 1c 	call	0x3926	; 0x3926 <blink_dot>
    3a6e:	08 c0       	rjmp	.+16     	; 0x3a80 <blink_morse_code_error+0x11e>

    3a70:	0e 94 a0 1c 	call	0x3940	; 0x3940 <blink_dash>
    3a74:	0e 94 a0 1c 	call	0x3940	; 0x3940 <blink_dash>
    3a78:	0e 94 a0 1c 	call	0x3940	; 0x3940 <blink_dash>
    3a7c:	0e 94 a0 1c 	call	0x3940	; 0x3940 <blink_dash>
    3a80:	0e 94 93 1c 	call	0x3926	; 0x3926 <blink_dot>

/**************************************************************************
    3a84:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <pause>
This function is the same as normal TX, only it waits until the last
    3a88:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <pause>
second to send the duty out with the high speed timer.  And by duty, I mean
    3a8c:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <pause>
    3a90:	08 94       	sec
    3a92:	e1 1c       	adc	r14, r1
    3a94:	f1 1c       	adc	r15, r1
//-------------------------------------------------------------------------------------------------------
void rf_rx_off(void) {
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
	// XXX
    3a96:	ae 2d       	mov	r26, r14
    3a98:	bb 27       	eor	r27, r27
    3a9a:	f8 01       	movw	r30, r16
    3a9c:	01 90       	ld	r0, Z+
    3a9e:	00 20       	and	r0, r0
    3aa0:	e9 f7       	brne	.-6      	; 0x3a9c <blink_morse_code_error+0x13a>
    3aa2:	31 97       	sbiw	r30, 0x01	; 1
    3aa4:	e0 1b       	sub	r30, r16
    3aa6:	f1 0b       	sbc	r31, r17
    3aa8:	ae 17       	cp	r26, r30
    3aaa:	bf 07       	cpc	r27, r31
    3aac:	08 f4       	brcc	.+2      	; 0x3ab0 <blink_morse_code_error+0x14e>
    3aae:	80 cf       	rjmp	.-256    	; 0x39b0 <blink_morse_code_error+0x4e>
    3ab0:	23 96       	adiw	r28, 0x03	; 3
    3ab2:	0f b6       	in	r0, 0x3f	; 63
    3ab4:	f8 94       	cli
    3ab6:	de bf       	out	0x3e, r29	; 62
    3ab8:	0f be       	out	0x3f, r0	; 63
    3aba:	cd bf       	out	0x3d, r28	; 61
    3abc:	df 91       	pop	r29
    3abe:	cf 91       	pop	r28
    3ac0:	1f 91       	pop	r17
    3ac2:	0f 91       	pop	r16
    3ac4:	ff 90       	pop	r15
    3ac6:	ef 90       	pop	r14
    3ac8:	08 95       	ret

00003aca <nrk_error_print>:
//-------------------------------------------------------------------------------------------------------
nrk_sem_t* rf_get_sem()
{
return radio_sem;
}

    3aca:	2f 92       	push	r2
    3acc:	3f 92       	push	r3
    3ace:	4f 92       	push	r4
    3ad0:	5f 92       	push	r5
    3ad2:	6f 92       	push	r6
    3ad4:	7f 92       	push	r7
    3ad6:	8f 92       	push	r8
    3ad8:	9f 92       	push	r9
    3ada:	af 92       	push	r10
    3adc:	bf 92       	push	r11
    3ade:	cf 92       	push	r12
    3ae0:	df 92       	push	r13
    3ae2:	ef 92       	push	r14
    3ae4:	ff 92       	push	r15
    3ae6:	0f 93       	push	r16
    3ae8:	1f 93       	push	r17
    3aea:	cf 93       	push	r28
    3aec:	df 93       	push	r29
void rf_tx_power(uint8_t pwr)
{
    3aee:	80 91 14 06 	lds	r24, 0x0614
    3af2:	88 23       	and	r24, r24
    3af4:	09 f4       	brne	.+2      	; 0x3af8 <nrk_error_print+0x2e>
    3af6:	d2 c0       	rjmp	.+420    	; 0x3c9c <nrk_error_print+0x1d2>
    tmp=0xA0E0;
    tmp=tmp | (pwr&0x1F);  
    FASTSPI_SETREG(CC2420_TXCTRL, tmp);   // Set the FIFOP threshold to maximum
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
    3af8:	0e 94 33 1a 	call	0x3466	; 0x3466 <nrk_int_disable>
}
void rf_set_channel( uint8_t channel )
{
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    3afc:	0e 94 33 1a 	call	0x3466	; 0x3466 <nrk_int_disable>


void rf_addr_decode_enable()
{
    mdmctrl0 |= 0x0800;
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
    3b00:	62 eb       	ldi	r22, 0xB2	; 178
    3b02:	26 2e       	mov	r2, r22
    3b04:	63 e0       	ldi	r22, 0x03	; 3
    3b06:	36 2e       	mov	r3, r22
    3b08:	55 ec       	ldi	r21, 0xC5	; 197
    3b0a:	45 2e       	mov	r4, r21
    3b0c:	53 e0       	ldi	r21, 0x03	; 3
    3b0e:	55 2e       	mov	r5, r21
    3b10:	48 ed       	ldi	r20, 0xD8	; 216
    3b12:	64 2e       	mov	r6, r20
    3b14:	43 e0       	ldi	r20, 0x03	; 3
    3b16:	74 2e       	mov	r7, r20
    3b18:	30 ef       	ldi	r19, 0xF0	; 240
    3b1a:	83 2e       	mov	r8, r19
    3b1c:	33 e0       	ldi	r19, 0x03	; 3
    3b1e:	93 2e       	mov	r9, r19
    3b20:	26 e0       	ldi	r18, 0x06	; 6
    3b22:	a2 2e       	mov	r10, r18
    3b24:	24 e0       	ldi	r18, 0x04	; 4
    3b26:	b2 2e       	mov	r11, r18
    3b28:	91 e2       	ldi	r25, 0x21	; 33
    3b2a:	c9 2e       	mov	r12, r25
    3b2c:	94 e0       	ldi	r25, 0x04	; 4
    3b2e:	d9 2e       	mov	r13, r25
    3b30:	87 e3       	ldi	r24, 0x37	; 55
    3b32:	e8 2e       	mov	r14, r24
    3b34:	84 e0       	ldi	r24, 0x04	; 4
    3b36:	f8 2e       	mov	r15, r24
    3b38:	cb e4       	ldi	r28, 0x4B	; 75
    3b3a:	d4 e0       	ldi	r29, 0x04	; 4
}


void rf_addr_decode_enable()
{
    mdmctrl0 |= 0x0800;
    3b3c:	86 e7       	ldi	r24, 0x76	; 118
    3b3e:	94 e0       	ldi	r25, 0x04	; 4
    3b40:	0e 94 3d 19 	call	0x327a	; 0x327a <nrk_kprintf>
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
    3b44:	80 91 44 04 	lds	r24, 0x0444
    3b48:	99 27       	eor	r25, r25
    3b4a:	9f 93       	push	r25
    3b4c:	8f 93       	push	r24
    3b4e:	8e e9       	ldi	r24, 0x9E	; 158
    3b50:	92 e0       	ldi	r25, 0x02	; 2
    3b52:	9f 93       	push	r25
    3b54:	8f 93       	push	r24
    3b56:	0e 94 7d 32 	call	0x64fa	; 0x64fa <printf>
}
    3b5a:	82 e7       	ldi	r24, 0x72	; 114
    3b5c:	94 e0       	ldi	r25, 0x04	; 4
    3b5e:	0e 94 3d 19 	call	0x327a	; 0x327a <nrk_kprintf>

    3b62:	0f 90       	pop	r0
    3b64:	0f 90       	pop	r0
    3b66:	0f 90       	pop	r0
    3b68:	0f 90       	pop	r0
    3b6a:	80 91 14 06 	lds	r24, 0x0614
    3b6e:	87 31       	cpi	r24, 0x17	; 23
    3b70:	10 f0       	brcs	.+4      	; 0x3b76 <nrk_error_print+0xac>
void rf_addr_decode_disable()
    3b72:	10 92 14 06 	sts	0x0614, r1
{
    3b76:	80 91 14 06 	lds	r24, 0x0614
    3b7a:	99 27       	eor	r25, r25
    3b7c:	aa 27       	eor	r26, r26
    3b7e:	bb 27       	eor	r27, r27
    3b80:	fc 01       	movw	r30, r24
    3b82:	31 97       	sbiw	r30, 0x01	; 1
    3b84:	e5 31       	cpi	r30, 0x15	; 21
    3b86:	f1 05       	cpc	r31, r1
    3b88:	08 f0       	brcs	.+2      	; 0x3b8c <nrk_error_print+0xc2>
    3b8a:	3f c0       	rjmp	.+126    	; 0x3c0a <nrk_error_print+0x140>
    3b8c:	ea 59       	subi	r30, 0x9A	; 154
    3b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b90:	ee 0f       	add	r30, r30
    3b92:	ff 1f       	adc	r31, r31
    3b94:	05 90       	lpm	r0, Z+
    3b96:	f4 91       	lpm	r31, Z
    3b98:	e0 2d       	mov	r30, r0
    3b9a:	09 94       	ijmp
    mdmctrl0 &= (~0x0800);
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
}
    3b9c:	ce 01       	movw	r24, r28
    3b9e:	37 c0       	rjmp	.+110    	; 0x3c0e <nrk_error_print+0x144>


void rf_auto_ack_enable()
    3ba0:	c7 01       	movw	r24, r14
    3ba2:	35 c0       	rjmp	.+106    	; 0x3c0e <nrk_error_print+0x144>
{
    auto_ack_enable=1;
    mdmctrl0 |= 0x0010;
    3ba4:	c6 01       	movw	r24, r12
    3ba6:	33 c0       	rjmp	.+102    	; 0x3c0e <nrk_error_print+0x144>
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0); 
}

    3ba8:	c5 01       	movw	r24, r10
    3baa:	31 c0       	rjmp	.+98     	; 0x3c0e <nrk_error_print+0x144>
void rf_auto_ack_disable()
{
    auto_ack_enable=0;
    3bac:	c4 01       	movw	r24, r8
    3bae:	2f c0       	rjmp	.+94     	; 0x3c0e <nrk_error_print+0x144>
    mdmctrl0 &= (~0x0010);
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
}
    3bb0:	c3 01       	movw	r24, r6
    3bb2:	2d c0       	rjmp	.+90     	; 0x3c0e <nrk_error_print+0x144>


void rf_addr_decode_set_my_mac(uint16_t my_mac)
    3bb4:	c2 01       	movw	r24, r4
    3bb6:	2b c0       	rjmp	.+86     	; 0x3c0e <nrk_error_print+0x144>
{
uint8_t n;
    rfSettings.myAddr = my_mac;
    3bb8:	c1 01       	movw	r24, r2
    3bba:	29 c0       	rjmp	.+82     	; 0x3c0e <nrk_error_print+0x144>
    nrk_spin_wait_us(500);
    FASTSPI_WRITE_RAM_LE(&my_mac, CC2420RAM_SHORTADDR, 2, n);
    nrk_spin_wait_us(500);
    3bbc:	84 e9       	ldi	r24, 0x94	; 148
    3bbe:	93 e0       	ldi	r25, 0x03	; 3
    3bc0:	26 c0       	rjmp	.+76     	; 0x3c0e <nrk_error_print+0x144>
}


    3bc2:	8f e6       	ldi	r24, 0x6F	; 111
    3bc4:	93 e0       	ldi	r25, 0x03	; 3
    3bc6:	23 c0       	rjmp	.+70     	; 0x3c0e <nrk_error_print+0x144>

void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
    3bc8:	83 e6       	ldi	r24, 0x63	; 99
    3bca:	93 e0       	ldi	r25, 0x03	; 3
    3bcc:	20 c0       	rjmp	.+64     	; 0x3c0e <nrk_error_print+0x144>

#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    3bce:	88 e4       	ldi	r24, 0x48	; 72
    3bd0:	93 e0       	ldi	r25, 0x03	; 3
    3bd2:	1d c0       	rjmp	.+58     	; 0x3c0e <nrk_error_print+0x144>
#endif

    FASTSPI_STROBE(CC2420_SFLUSHRX);
    3bd4:	89 e3       	ldi	r24, 0x39	; 57
    3bd6:	93 e0       	ldi	r25, 0x03	; 3
    3bd8:	1a c0       	rjmp	.+52     	; 0x3c0e <nrk_error_print+0x144>
    FASTSPI_STROBE(CC2420_SFLUSHRX);
    halRfSetChannel(channel);
    rfSettings.pRxInfo = pRRI;
    3bda:	85 e2       	ldi	r24, 0x25	; 37
    3bdc:	93 e0       	ldi	r25, 0x03	; 3
    3bde:	17 c0       	rjmp	.+46     	; 0x3c0e <nrk_error_print+0x144>

#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    3be0:	84 e1       	ldi	r24, 0x14	; 20
    3be2:	93 e0       	ldi	r25, 0x03	; 3
    3be4:	14 c0       	rjmp	.+40     	; 0x3c0e <nrk_error_print+0x144>
#endif
}
//-------------------------------------------------------------------------------------------------------
    3be6:	80 e0       	ldi	r24, 0x00	; 0
    3be8:	93 e0       	ldi	r25, 0x03	; 3
    3bea:	11 c0       	rjmp	.+34     	; 0x3c0e <nrk_error_print+0x144>
//  void rf_init(RF_RX_INFO *pRRI, uint8_t channel, WORD panId, WORD myAddr)
//
//  DESCRIPTION:
    3bec:	80 ee       	ldi	r24, 0xE0	; 224
    3bee:	92 e0       	ldi	r25, 0x02	; 2
    3bf0:	0e c0       	rjmp	.+28     	; 0x3c0e <nrk_error_print+0x144>
//      Initializes CC2420 for radio communication via the basic RF library functions. Turns on the
//		voltage regulator, resets the CC2420, turns on the crystal oscillator, writes all necessary
//		registers and protocol addresses (for automatic address recognition). Note that the crystal
    3bf2:	88 ec       	ldi	r24, 0xC8	; 200
    3bf4:	92 e0       	ldi	r25, 0x02	; 2
    3bf6:	0b c0       	rjmp	.+22     	; 0x3c0e <nrk_error_print+0x144>
//		oscillator will remain on (forever).
//
//  ARGUMENTS:
    3bf8:	8d ea       	ldi	r24, 0xAD	; 173
    3bfa:	92 e0       	ldi	r25, 0x02	; 2
    3bfc:	08 c0       	rjmp	.+16     	; 0x3c0e <nrk_error_print+0x144>
//      RF_RX_INFO *pRRI
//          A pointer the RF_RX_INFO data structure to be used during the first packet reception.
//			The structure can be switched upon packet reception.
    3bfe:	8c e9       	ldi	r24, 0x9C	; 156
    3c00:	92 e0       	ldi	r25, 0x02	; 2
    3c02:	05 c0       	rjmp	.+10     	; 0x3c0e <nrk_error_print+0x144>
//      uint8_t channel
//          The RF channel to be used (11 = 2405 MHz to 26 = 2480 MHz)
//      WORD panId
    3c04:	8d e8       	ldi	r24, 0x8D	; 141
    3c06:	92 e0       	ldi	r25, 0x02	; 2
    3c08:	02 c0       	rjmp	.+4      	; 0x3c0e <nrk_error_print+0x144>
//          The personal area network identification number
//      WORD myAddr
//          The 16-bit short address which is used by this node. Must together with the PAN ID form a
    3c0a:	86 e8       	ldi	r24, 0x86	; 134
    3c0c:	92 e0       	ldi	r25, 0x02	; 2
    3c0e:	0e 94 3d 19 	call	0x327a	; 0x327a <nrk_kprintf>
//			unique 32-bit identifier to avoid addressing conflicts. Normally, in a 802.15.4 network, the
//			short address will be given to associated nodes by the PAN coordinator.
    3c12:	60 91 db 07 	lds	r22, 0x07DB
    3c16:	70 91 dc 07 	lds	r23, 0x07DC
    3c1a:	8d e0       	ldi	r24, 0x0D	; 13
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	0e 94 50 32 	call	0x64a0	; 0x64a0 <fputc>
//-------------------------------------------------------------------------------------------------------
    3c22:	60 91 db 07 	lds	r22, 0x07DB
    3c26:	70 91 dc 07 	lds	r23, 0x07DC
    3c2a:	8a e0       	ldi	r24, 0x0A	; 10
    3c2c:	90 e0       	ldi	r25, 0x00	; 0
    3c2e:	0e 94 50 32 	call	0x64a0	; 0x64a0 <fputc>
    3c32:	00 e0       	ldi	r16, 0x00	; 0
#endif

auto_ack_enable=0;
security_enable=0;
last_pkt_encrypted=0;
} // rf_init() 
    3c34:	82 e0       	ldi	r24, 0x02	; 2
    3c36:	90 e0       	ldi	r25, 0x00	; 0
    3c38:	0e 94 8f 18 	call	0x311e	; 0x311e <nrk_led_set>

    3c3c:	83 e0       	ldi	r24, 0x03	; 3
    3c3e:	90 e0       	ldi	r25, 0x00	; 0
    3c40:	0e 94 72 18 	call	0x30e4	; 0x30e4 <nrk_led_clr>
    3c44:	10 e0       	ldi	r17, 0x00	; 0

//-------------------------------------------------------------------------------------------------------
    3c46:	88 ee       	ldi	r24, 0xE8	; 232
    3c48:	93 e0       	ldi	r25, 0x03	; 3
    3c4a:	0e 94 04 2c 	call	0x5808	; 0x5808 <nrk_spin_wait_us>
auto_ack_enable=0;
security_enable=0;
last_pkt_encrypted=0;
} // rf_init() 


    3c4e:	1f 5f       	subi	r17, 0xFF	; 255
    3c50:	14 36       	cpi	r17, 0x64	; 100
    3c52:	c9 f7       	brne	.-14     	; 0x3c46 <nrk_error_print+0x17c>
//-------------------------------------------------------------------------------------------------------
//  void rf_rx_on(void)
    3c54:	83 e0       	ldi	r24, 0x03	; 3
    3c56:	90 e0       	ldi	r25, 0x00	; 0
    3c58:	0e 94 8f 18 	call	0x311e	; 0x311e <nrk_led_set>
//
    3c5c:	82 e0       	ldi	r24, 0x02	; 2
    3c5e:	90 e0       	ldi	r25, 0x00	; 0
    3c60:	0e 94 72 18 	call	0x30e4	; 0x30e4 <nrk_led_clr>
    3c64:	10 e0       	ldi	r17, 0x00	; 0
//  DESCRIPTION:
//      Enables the CC2420 receiver and the FIFOP interrupt. When a packet is received through this
    3c66:	88 ee       	ldi	r24, 0xE8	; 232
    3c68:	93 e0       	ldi	r25, 0x03	; 3
    3c6a:	0e 94 04 2c 	call	0x5808	; 0x5808 <nrk_spin_wait_us>


//-------------------------------------------------------------------------------------------------------
//  void rf_rx_on(void)
//
//  DESCRIPTION:
    3c6e:	1f 5f       	subi	r17, 0xFF	; 255
    3c70:	14 36       	cpi	r17, 0x64	; 100
    3c72:	c9 f7       	brne	.-14     	; 0x3c66 <nrk_error_print+0x19c>
    _nrk_errno_set (2);
  }
#endif

auto_ack_enable=0;
security_enable=0;
    3c74:	0f 5f       	subi	r16, 0xFF	; 255
    3c76:	04 31       	cpi	r16, 0x14	; 20
    3c78:	e9 f6       	brne	.-70     	; 0x3c34 <nrk_error_print+0x16a>
//
//  DESCRIPTION:
//      Enables the CC2420 receiver and the FIFOP interrupt. When a packet is received through this
//      interrupt, it will call rf_rx_callback(...), which must be defined by the application
//-------------------------------------------------------------------------------------------------------
void rf_rx_on(void) {
    3c7a:	82 e0       	ldi	r24, 0x02	; 2
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	0e 94 72 18 	call	0x30e4	; 0x30e4 <nrk_led_clr>
#ifdef RADIO_PRIORITY_CEILING
    3c82:	83 e0       	ldi	r24, 0x03	; 3
    3c84:	90 e0       	ldi	r25, 0x00	; 0
    3c86:	0e 94 72 18 	call	0x30e4	; 0x30e4 <nrk_led_clr>
    nrk_sem_pend (radio_sem);
    3c8a:	80 91 44 04 	lds	r24, 0x0444
    3c8e:	0e 94 b1 1c 	call	0x3962	; 0x3962 <blink_morse_code_error>
#endif
    3c92:	80 91 14 06 	lds	r24, 0x0614
    3c96:	0e 94 b1 1c 	call	0x3962	; 0x3962 <blink_morse_code_error>
    3c9a:	50 cf       	rjmp	.-352    	; 0x3b3c <nrk_error_print+0x72>
	nrk_spin_wait_us(OSC_STARTUP_DELAY);
#endif
	FASTSPI_STROBE(CC2420_SRXON);
	FASTSPI_STROBE(CC2420_SFLUSHRX);
	rx_ready=0;
#ifdef RADIO_PRIORITY_CEILING
    3c9c:	80 e0       	ldi	r24, 0x00	; 0
    3c9e:	90 e0       	ldi	r25, 0x00	; 0
    3ca0:	df 91       	pop	r29
    3ca2:	cf 91       	pop	r28
    3ca4:	1f 91       	pop	r17
    3ca6:	0f 91       	pop	r16
    3ca8:	ff 90       	pop	r15
    3caa:	ef 90       	pop	r14
    3cac:	df 90       	pop	r13
    3cae:	cf 90       	pop	r12
    3cb0:	bf 90       	pop	r11
    3cb2:	af 90       	pop	r10
    3cb4:	9f 90       	pop	r9
    3cb6:	8f 90       	pop	r8
    3cb8:	7f 90       	pop	r7
    3cba:	6f 90       	pop	r6
    3cbc:	5f 90       	pop	r5
    3cbe:	4f 90       	pop	r4
    3cc0:	3f 90       	pop	r3
    3cc2:	2f 90       	pop	r2
    3cc4:	08 95       	ret

00003cc6 <nrk_kernel_error_add>:

// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
return last_pkt_encrypted;
}
    3cc6:	80 93 14 06 	sts	0x0614, r24

    3cca:	60 93 44 04 	sts	0x0444, r22
uint8_t n;
// CTR counter value
FASTSPI_WRITE_RAM(&counter[0],(CC2420RAM_TXNONCE+9),2,n); 
FASTSPI_WRITE_RAM(&counter[2],(CC2420RAM_TXNONCE+11),2,n); 
tx_ctr[0]=counter[0];
tx_ctr[1]=counter[1];
    3cce:	0e 94 65 1d 	call	0x3aca	; 0x3aca <nrk_error_print>
    3cd2:	08 95       	ret

00003cd4 <nrk_error_add>:
    FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
    ENABLE_GLOBAL_INT();
}

void rf_power_up()
{
    3cd4:	80 93 14 06 	sts	0x0614, r24

    3cd8:	e0 91 55 07 	lds	r30, 0x0755
    3cdc:	f0 91 56 07 	lds	r31, 0x0756
    3ce0:	80 85       	ldd	r24, Z+8	; 0x08
    3ce2:	80 93 44 04 	sts	0x0444, r24
    FASTSPI_STROBE(CC2420_SXOSCON);
    nrk_spin_wait_us(OSC_STARTUP_DELAY);
    ENABLE_GLOBAL_INT();

}

    3ce6:	0e 94 65 1d 	call	0x3aca	; 0x3aca <nrk_error_print>
    3cea:	08 95       	ret

00003cec <nrk_stack_check_pid>:
{
uint8_t n,i;
uint16_t key_buf;

// Set AES key
nrk_spin_wait_us(100); 
    3cec:	99 27       	eor	r25, r25
    3cee:	87 fd       	sbrc	r24, 7
    3cf0:	90 95       	com	r25
    3cf2:	fc 01       	movw	r30, r24
    3cf4:	25 e0       	ldi	r18, 0x05	; 5
    3cf6:	ee 0f       	add	r30, r30
    3cf8:	ff 1f       	adc	r31, r31
    3cfa:	2a 95       	dec	r18
    3cfc:	e1 f7       	brne	.-8      	; 0x3cf6 <nrk_stack_check_pid+0xa>
    3cfe:	e8 0f       	add	r30, r24
    3d00:	f9 1f       	adc	r31, r25
    3d02:	e8 54       	subi	r30, 0x48	; 72
    3d04:	f9 4f       	sbci	r31, 0xF9	; 249
    3d06:	a2 81       	ldd	r26, Z+2	; 0x02
    3d08:	b3 81       	ldd	r27, Z+3	; 0x03
for(i=0; i<8; i++ )
	{
    3d0a:	8c 91       	ld	r24, X
    3d0c:	85 35       	cpi	r24, 0x55	; 85
    3d0e:	29 f0       	breq	.+10     	; 0x3d1a <nrk_stack_check_pid+0x2e>
    	key_buf=(key[i]<<8)|key[i+1]; 
    3d10:	85 e5       	ldi	r24, 0x55	; 85
    3d12:	8c 93       	st	X, r24
    3d14:	8f ef       	ldi	r24, 0xFF	; 255
    3d16:	9f ef       	ldi	r25, 0xFF	; 255
    3d18:	08 95       	ret
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
	}

// Set AES nonce to all zeros
    3d1a:	80 81       	ld	r24, Z
    3d1c:	91 81       	ldd	r25, Z+1	; 0x01
    3d1e:	80 50       	subi	r24, 0x00	; 0
    3d20:	92 42       	sbci	r25, 0x22	; 34
    3d22:	18 f4       	brcc	.+6      	; 0x3d2a <nrk_stack_check_pid+0x3e>
    3d24:	81 e0       	ldi	r24, 0x01	; 1
    3d26:	90 e0       	ldi	r25, 0x00	; 0
    3d28:	08 95       	ret
nrk_spin_wait_us(100); 
    3d2a:	82 e1       	ldi	r24, 0x12	; 18
    3d2c:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <nrk_error_add>
    3d30:	8f ef       	ldi	r24, 0xFF	; 255
    3d32:	9f ef       	ldi	r25, 0xFF	; 255
for(i=0; i<7; i++ )
	{
    	key_buf=0; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
    3d34:	08 95       	ret

00003d36 <dump_stack_info>:

#include <include.h>
#include <basic_rf.h>
#include <ulib.h>
#include <nrk.h>
#include <nrk_events.h>
    3d36:	6f 92       	push	r6
    3d38:	7f 92       	push	r7
    3d3a:	8f 92       	push	r8
    3d3c:	9f 92       	push	r9
    3d3e:	af 92       	push	r10
    3d40:	bf 92       	push	r11
    3d42:	cf 92       	push	r12
    3d44:	df 92       	push	r13
    3d46:	ef 92       	push	r14
    3d48:	ff 92       	push	r15
    3d4a:	0f 93       	push	r16
    3d4c:	1f 93       	push	r17
    3d4e:	cf 93       	push	r28
    3d50:	df 93       	push	r29
#include <nrk_error.h>
#include <nrk_timer.h>
#include <nrk_cpu.h>

#define OSC_STARTUP_DELAY	1000
    3d52:	82 e8       	ldi	r24, 0x82	; 130
    3d54:	94 e0       	ldi	r25, 0x04	; 4
    3d56:	0e 94 3d 19 	call	0x327a	; 0x327a <nrk_kprintf>

void cc259x_rx()
    3d5a:	e0 91 55 07 	lds	r30, 0x0755
    3d5e:	f0 91 56 07 	lds	r31, 0x0756
    3d62:	80 85       	ldd	r24, Z+8	; 0x08
    3d64:	99 27       	eor	r25, r25
    3d66:	87 fd       	sbrc	r24, 7
    3d68:	90 95       	com	r25
    3d6a:	9f 93       	push	r25
    3d6c:	8f 93       	push	r24
    3d6e:	81 ea       	ldi	r24, 0xA1	; 161
    3d70:	92 e0       	ldi	r25, 0x02	; 2
    3d72:	9f 93       	push	r25
    3d74:	8f 93       	push	r24
    3d76:	0e 94 7d 32 	call	0x64fa	; 0x64fa <printf>
{
    3d7a:	e0 91 55 07 	lds	r30, 0x0755
    3d7e:	f0 91 56 07 	lds	r31, 0x0756
    3d82:	02 81       	ldd	r16, Z+2	; 0x02
    3d84:	13 81       	ldd	r17, Z+3	; 0x03
    nrk_gpio_set(NRK_DEBUG_1);
    nrk_gpio_clr(NRK_DEBUG_0);
    3d86:	1f 93       	push	r17
    3d88:	0f 93       	push	r16
    3d8a:	8a ea       	ldi	r24, 0xAA	; 170
    3d8c:	92 e0       	ldi	r25, 0x02	; 2
    3d8e:	9f 93       	push	r25
    3d90:	8f 93       	push	r24
    3d92:	0e 94 7d 32 	call	0x64fa	; 0x64fa <printf>
}
    3d96:	f8 01       	movw	r30, r16
    3d98:	80 81       	ld	r24, Z
    3d9a:	99 27       	eor	r25, r25
    3d9c:	9f 93       	push	r25
    3d9e:	8f 93       	push	r24
    3da0:	57 eb       	ldi	r21, 0xB7	; 183
    3da2:	c5 2e       	mov	r12, r21
    3da4:	52 e0       	ldi	r21, 0x02	; 2
    3da6:	d5 2e       	mov	r13, r21
    3da8:	df 92       	push	r13
    3daa:	cf 92       	push	r12
    3dac:	0e 94 7d 32 	call	0x64fa	; 0x64fa <printf>


void cc259x_tx()
    3db0:	e0 91 55 07 	lds	r30, 0x0755
    3db4:	f0 91 56 07 	lds	r31, 0x0756
    3db8:	80 81       	ld	r24, Z
    3dba:	91 81       	ldd	r25, Z+1	; 0x01
    3dbc:	9f 93       	push	r25
    3dbe:	8f 93       	push	r24
    3dc0:	44 ec       	ldi	r20, 0xC4	; 196
    3dc2:	e4 2e       	mov	r14, r20
    3dc4:	42 e0       	ldi	r20, 0x02	; 2
    3dc6:	f4 2e       	mov	r15, r20
    3dc8:	ff 92       	push	r15
    3dca:	ef 92       	push	r14
    3dcc:	0e 94 7d 32 	call	0x64fa	; 0x64fa <printf>
{
    3dd0:	80 91 55 07 	lds	r24, 0x0755
    3dd4:	90 91 56 07 	lds	r25, 0x0756
    3dd8:	9f 93       	push	r25
    3dda:	8f 93       	push	r24
    3ddc:	0e ec       	ldi	r16, 0xCE	; 206
    3dde:	12 e0       	ldi	r17, 0x02	; 2
    3de0:	1f 93       	push	r17
    3de2:	0f 93       	push	r16
    3de4:	0e 94 7d 32 	call	0x64fa	; 0x64fa <printf>
    3de8:	c8 eb       	ldi	r28, 0xB8	; 184
    3dea:	d6 e0       	ldi	r29, 0x06	; 6
    3dec:	aa 24       	eor	r10, r10
    3dee:	bb 24       	eor	r11, r11
    3df0:	8d b7       	in	r24, 0x3d	; 61
    3df2:	9e b7       	in	r25, 0x3e	; 62
    3df4:	44 96       	adiw	r24, 0x14	; 20
    3df6:	0f b6       	in	r0, 0x3f	; 63
    3df8:	f8 94       	cli
    3dfa:	9e bf       	out	0x3e, r25	; 62
    3dfc:	0f be       	out	0x3f, r0	; 63
    3dfe:	8d bf       	out	0x3d, r24	; 61
    nrk_gpio_set(NRK_DEBUG_1);
    nrk_gpio_set(NRK_DEBUG_0);
}


//#ifndef RADIO_PRIORITY_CEILING
    3e00:	3e ed       	ldi	r19, 0xDE	; 222
    3e02:	63 2e       	mov	r6, r19
    3e04:	32 e0       	ldi	r19, 0x02	; 2
    3e06:	73 2e       	mov	r7, r19
//  #define RADIO_PRIORITY_CEILING	20
    3e08:	46 01       	movw	r8, r12
//#endif

nrk_sem_t *radio_sem;
    3e0a:	67 01       	movw	r12, r14
uint8_t auto_ack_enable;
    3e0c:	78 01       	movw	r14, r16
void cc259x_tx()
{
    nrk_gpio_set(NRK_DEBUG_1);
    nrk_gpio_set(NRK_DEBUG_0);
}

    3e0e:	0a 81       	ldd	r16, Y+2	; 0x02
    3e10:	1b 81       	ldd	r17, Y+3	; 0x03

//#ifndef RADIO_PRIORITY_CEILING
    3e12:	1f 93       	push	r17
    3e14:	0f 93       	push	r16
    3e16:	bf 92       	push	r11
    3e18:	af 92       	push	r10
    3e1a:	7f 92       	push	r7
    3e1c:	6f 92       	push	r6
    3e1e:	0e 94 7d 32 	call	0x64fa	; 0x64fa <printf>
//  #define RADIO_PRIORITY_CEILING	20
    3e22:	f8 01       	movw	r30, r16
    3e24:	80 81       	ld	r24, Z
    3e26:	99 27       	eor	r25, r25
    3e28:	9f 93       	push	r25
    3e2a:	8f 93       	push	r24
    3e2c:	9f 92       	push	r9
    3e2e:	8f 92       	push	r8
    3e30:	0e 94 7d 32 	call	0x64fa	; 0x64fa <printf>
//#endif

nrk_sem_t *radio_sem;
    3e34:	88 81       	ld	r24, Y
    3e36:	99 81       	ldd	r25, Y+1	; 0x01
    3e38:	9f 93       	push	r25
    3e3a:	8f 93       	push	r24
    3e3c:	df 92       	push	r13
    3e3e:	cf 92       	push	r12
    3e40:	0e 94 7d 32 	call	0x64fa	; 0x64fa <printf>
uint8_t auto_ack_enable;
    3e44:	df 93       	push	r29
    3e46:	cf 93       	push	r28
    3e48:	ff 92       	push	r15
    3e4a:	ef 92       	push	r14
    3e4c:	0e 94 7d 32 	call	0x64fa	; 0x64fa <printf>
    3e50:	08 94       	sec
    3e52:	a1 1c       	adc	r10, r1
    3e54:	b1 1c       	adc	r11, r1
    3e56:	a1 96       	adiw	r28, 0x21	; 33


void cc259x_tx()
{
    nrk_gpio_set(NRK_DEBUG_1);
    nrk_gpio_set(NRK_DEBUG_0);
    3e58:	8d b7       	in	r24, 0x3d	; 61
    3e5a:	9e b7       	in	r25, 0x3e	; 62
    3e5c:	42 96       	adiw	r24, 0x12	; 18
    3e5e:	0f b6       	in	r0, 0x3f	; 63
    3e60:	f8 94       	cli
    3e62:	9e bf       	out	0x3e, r25	; 62
    3e64:	0f be       	out	0x3f, r0	; 63
    3e66:	8d bf       	out	0x3d, r24	; 61
    3e68:	94 e0       	ldi	r25, 0x04	; 4
    3e6a:	a9 16       	cp	r10, r25
    3e6c:	b1 04       	cpc	r11, r1
    3e6e:	79 f6       	brne	.-98     	; 0x3e0e <dump_stack_info+0xd8>
    3e70:	df 91       	pop	r29
    3e72:	cf 91       	pop	r28
    3e74:	1f 91       	pop	r17
    3e76:	0f 91       	pop	r16
    3e78:	ff 90       	pop	r15
    3e7a:	ef 90       	pop	r14
    3e7c:	df 90       	pop	r13
    3e7e:	cf 90       	pop	r12
    3e80:	bf 90       	pop	r11
    3e82:	af 90       	pop	r10
    3e84:	9f 90       	pop	r9
    3e86:	8f 90       	pop	r8
    3e88:	7f 90       	pop	r7
    3e8a:	6f 90       	pop	r6
    3e8c:	08 95       	ret

00003e8e <nrk_stack_check>:
    DISABLE_GLOBAL_INT();
    FASTSPI_STROBE(CC2420_SXOSCOFF);
    FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
    ENABLE_GLOBAL_INT();
}

    3e8e:	cf 93       	push	r28
    3e90:	df 93       	push	r29
void rf_power_up()
{

    DISABLE_GLOBAL_INT();
    FASTSPI_STROBE(CC2420_SXOSCON);
    nrk_spin_wait_us(OSC_STARTUP_DELAY);
    3e92:	e0 91 55 07 	lds	r30, 0x0755
    3e96:	f0 91 56 07 	lds	r31, 0x0756
    3e9a:	c2 81       	ldd	r28, Z+2	; 0x02
    3e9c:	d3 81       	ldd	r29, Z+3	; 0x03
    ENABLE_GLOBAL_INT();

    3e9e:	88 81       	ld	r24, Y
    3ea0:	85 35       	cpi	r24, 0x55	; 85
    3ea2:	39 f0       	breq	.+14     	; 0x3eb2 <nrk_stack_check+0x24>
}

    3ea4:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <dump_stack_info>

// Returns 1 if the last packet was encrypted, 0 otherwise
    3ea8:	81 e0       	ldi	r24, 0x01	; 1
    3eaa:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <nrk_error_add>
uint8_t rf_security_last_pkt_status()
    3eae:	85 e5       	ldi	r24, 0x55	; 85
    3eb0:	88 83       	st	Y, r24
{
return last_pkt_encrypted;
}


    3eb2:	e0 91 55 07 	lds	r30, 0x0755
    3eb6:	f0 91 56 07 	lds	r31, 0x0756
    3eba:	80 81       	ld	r24, Z
    3ebc:	91 81       	ldd	r25, Z+1	; 0x01
    3ebe:	80 50       	subi	r24, 0x00	; 0
    3ec0:	92 42       	sbci	r25, 0x22	; 34
    3ec2:	28 f0       	brcs	.+10     	; 0x3ece <nrk_stack_check+0x40>
void rf_security_set_ctr_counter(uint8_t *counter)
{
    3ec4:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <dump_stack_info>
uint8_t n;
// CTR counter value
    3ec8:	82 e1       	ldi	r24, 0x12	; 18
    3eca:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <nrk_error_add>
    3ece:	df 91       	pop	r29
    3ed0:	cf 91       	pop	r28
    3ed2:	08 95       	ret

00003ed4 <nrk_signal_create>:
void cc259x_rx()
{
    nrk_gpio_set(NRK_DEBUG_1);
    nrk_gpio_clr(NRK_DEBUG_0);
}

    3ed4:	40 91 d2 04 	lds	r20, 0x04D2
    3ed8:	50 91 d3 04 	lds	r21, 0x04D3
    3edc:	60 91 d4 04 	lds	r22, 0x04D4
    3ee0:	70 91 d5 04 	lds	r23, 0x04D5
    3ee4:	20 e0       	ldi	r18, 0x00	; 0
    3ee6:	30 e0       	ldi	r19, 0x00	; 0
    3ee8:	db 01       	movw	r26, r22
    3eea:	ca 01       	movw	r24, r20
    3eec:	02 2e       	mov	r0, r18
    3eee:	04 c0       	rjmp	.+8      	; 0x3ef8 <nrk_signal_create+0x24>
    3ef0:	b6 95       	lsr	r27
    3ef2:	a7 95       	ror	r26
    3ef4:	97 95       	ror	r25
    3ef6:	87 95       	ror	r24
    3ef8:	0a 94       	dec	r0
    3efa:	d2 f7       	brpl	.-12     	; 0x3ef0 <nrk_signal_create+0x1c>
    3efc:	81 70       	andi	r24, 0x01	; 1
    3efe:	90 70       	andi	r25, 0x00	; 0
    3f00:	89 2b       	or	r24, r25
    3f02:	e9 f4       	brne	.+58     	; 0x3f3e <nrk_signal_create+0x6a>

void cc259x_tx()
    3f04:	81 e0       	ldi	r24, 0x01	; 1
    3f06:	90 e0       	ldi	r25, 0x00	; 0
    3f08:	a0 e0       	ldi	r26, 0x00	; 0
    3f0a:	b0 e0       	ldi	r27, 0x00	; 0
    3f0c:	02 2e       	mov	r0, r18
    3f0e:	04 c0       	rjmp	.+8      	; 0x3f18 <nrk_signal_create+0x44>
    3f10:	88 0f       	add	r24, r24
    3f12:	99 1f       	adc	r25, r25
    3f14:	aa 1f       	adc	r26, r26
    3f16:	bb 1f       	adc	r27, r27
    3f18:	0a 94       	dec	r0
    3f1a:	d2 f7       	brpl	.-12     	; 0x3f10 <nrk_signal_create+0x3c>
    3f1c:	84 2b       	or	r24, r20
    3f1e:	95 2b       	or	r25, r21
    3f20:	a6 2b       	or	r26, r22
    3f22:	b7 2b       	or	r27, r23
    3f24:	80 93 d2 04 	sts	0x04D2, r24
    3f28:	90 93 d3 04 	sts	0x04D3, r25
    3f2c:	a0 93 d4 04 	sts	0x04D4, r26
    3f30:	b0 93 d5 04 	sts	0x04D5, r27
{
    3f34:	82 2f       	mov	r24, r18
    3f36:	99 27       	eor	r25, r25
    3f38:	87 fd       	sbrc	r24, 7
    3f3a:	90 95       	com	r25
    3f3c:	08 95       	ret
    3f3e:	2f 5f       	subi	r18, 0xFF	; 255
    3f40:	3f 4f       	sbci	r19, 0xFF	; 255
#define OSC_STARTUP_DELAY	1000

void cc259x_rx()
{
    nrk_gpio_set(NRK_DEBUG_1);
    nrk_gpio_clr(NRK_DEBUG_0);
    3f42:	20 32       	cpi	r18, 0x20	; 32
    3f44:	31 05       	cpc	r19, r1
    3f46:	81 f6       	brne	.-96     	; 0x3ee8 <nrk_signal_create+0x14>
    3f48:	8f ef       	ldi	r24, 0xFF	; 255
    3f4a:	9f ef       	ldi	r25, 0xFF	; 255
    nrk_gpio_set(NRK_DEBUG_1);
    nrk_gpio_set(NRK_DEBUG_0);
}


//#ifndef RADIO_PRIORITY_CEILING
    3f4c:	08 95       	ret

00003f4e <nrk_signal_get_registered_mask>:
//  #define RADIO_PRIORITY_CEILING	20
//#endif

    3f4e:	e0 91 55 07 	lds	r30, 0x0755
    3f52:	f0 91 56 07 	lds	r31, 0x0756
    3f56:	65 85       	ldd	r22, Z+13	; 0x0d
    3f58:	76 85       	ldd	r23, Z+14	; 0x0e
    3f5a:	87 85       	ldd	r24, Z+15	; 0x0f
    3f5c:	90 89       	ldd	r25, Z+16	; 0x10
    3f5e:	08 95       	ret

00003f60 <nrk_signal_unregister>:
void rf_security_set_ctr_counter(uint8_t *counter)
{
uint8_t n;
// CTR counter value
FASTSPI_WRITE_RAM(&counter[0],(CC2420RAM_TXNONCE+9),2,n); 
FASTSPI_WRITE_RAM(&counter[2],(CC2420RAM_TXNONCE+11),2,n); 
    3f60:	ef 92       	push	r14
    3f62:	ff 92       	push	r15
    3f64:	0f 93       	push	r16
    3f66:	1f 93       	push	r17
tx_ctr[0]=counter[0];
tx_ctr[1]=counter[1];
tx_ctr[2]=counter[2];
    3f68:	21 e0       	ldi	r18, 0x01	; 1
    3f6a:	30 e0       	ldi	r19, 0x00	; 0
    3f6c:	40 e0       	ldi	r20, 0x00	; 0
    3f6e:	50 e0       	ldi	r21, 0x00	; 0
    3f70:	04 c0       	rjmp	.+8      	; 0x3f7a <nrk_signal_unregister+0x1a>
    3f72:	22 0f       	add	r18, r18
    3f74:	33 1f       	adc	r19, r19
    3f76:	44 1f       	adc	r20, r20
    3f78:	55 1f       	adc	r21, r21
    3f7a:	8a 95       	dec	r24
    3f7c:	d2 f7       	brpl	.-12     	; 0x3f72 <nrk_signal_unregister+0x12>
tx_ctr[3]=counter[3];
}
    3f7e:	e0 91 55 07 	lds	r30, 0x0755
    3f82:	f0 91 56 07 	lds	r31, 0x0756
    3f86:	e5 84       	ldd	r14, Z+13	; 0x0d
    3f88:	f6 84       	ldd	r15, Z+14	; 0x0e
    3f8a:	07 85       	ldd	r16, Z+15	; 0x0f
    3f8c:	10 89       	ldd	r17, Z+16	; 0x10
    3f8e:	da 01       	movw	r26, r20
    3f90:	c9 01       	movw	r24, r18
    3f92:	8e 21       	and	r24, r14
    3f94:	9f 21       	and	r25, r15
    3f96:	a0 23       	and	r26, r16
    3f98:	b1 23       	and	r27, r17
    3f9a:	00 97       	sbiw	r24, 0x00	; 0
    3f9c:	a1 05       	cpc	r26, r1
    3f9e:	b1 05       	cpc	r27, r1
    3fa0:	19 f4       	brne	.+6      	; 0x3fa8 <nrk_signal_unregister+0x48>
    3fa2:	8f ef       	ldi	r24, 0xFF	; 255
    3fa4:	9f ef       	ldi	r25, 0xFF	; 255
    3fa6:	1a c0       	rjmp	.+52     	; 0x3fdc <nrk_signal_unregister+0x7c>


    3fa8:	20 95       	com	r18
    3faa:	30 95       	com	r19
    3fac:	40 95       	com	r20
    3fae:	50 95       	com	r21
    3fb0:	e2 22       	and	r14, r18
    3fb2:	f3 22       	and	r15, r19
    3fb4:	04 23       	and	r16, r20
    3fb6:	15 23       	and	r17, r21
    3fb8:	e5 86       	std	Z+13, r14	; 0x0d
    3fba:	f6 86       	std	Z+14, r15	; 0x0e
    3fbc:	07 87       	std	Z+15, r16	; 0x0f
    3fbe:	10 8b       	std	Z+16, r17	; 0x10
void rf_security_set_key(uint8_t *key)
    3fc0:	81 89       	ldd	r24, Z+17	; 0x11
    3fc2:	92 89       	ldd	r25, Z+18	; 0x12
    3fc4:	a3 89       	ldd	r26, Z+19	; 0x13
    3fc6:	b4 89       	ldd	r27, Z+20	; 0x14
    3fc8:	82 23       	and	r24, r18
    3fca:	93 23       	and	r25, r19
    3fcc:	a4 23       	and	r26, r20
    3fce:	b5 23       	and	r27, r21
    3fd0:	81 8b       	std	Z+17, r24	; 0x11
    3fd2:	92 8b       	std	Z+18, r25	; 0x12
    3fd4:	a3 8b       	std	Z+19, r26	; 0x13
    3fd6:	b4 8b       	std	Z+20, r27	; 0x14
    3fd8:	81 e0       	ldi	r24, 0x01	; 1
    3fda:	90 e0       	ldi	r25, 0x00	; 0
    3fdc:	1f 91       	pop	r17
    3fde:	0f 91       	pop	r16
    3fe0:	ff 90       	pop	r15
    3fe2:	ef 90       	pop	r14
    3fe4:	08 95       	ret

00003fe6 <nrk_signal_register>:
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    3fe6:	68 2f       	mov	r22, r24
    3fe8:	77 27       	eor	r23, r23
    3fea:	67 fd       	sbrc	r22, 7
    3fec:	70 95       	com	r23
    3fee:	80 91 d2 04 	lds	r24, 0x04D2
    3ff2:	90 91 d3 04 	lds	r25, 0x04D3
    3ff6:	a0 91 d4 04 	lds	r26, 0x04D4
    3ffa:	b0 91 d5 04 	lds	r27, 0x04D5
    3ffe:	06 2e       	mov	r0, r22
    4000:	04 c0       	rjmp	.+8      	; 0x400a <nrk_signal_register+0x24>
    4002:	b6 95       	lsr	r27
    4004:	a7 95       	ror	r26
    4006:	97 95       	ror	r25
    4008:	87 95       	ror	r24
    400a:	0a 94       	dec	r0
    400c:	d2 f7       	brpl	.-12     	; 0x4002 <nrk_signal_register+0x1c>
    400e:	81 70       	andi	r24, 0x01	; 1
    4010:	90 70       	andi	r25, 0x00	; 0
    4012:	89 2b       	or	r24, r25
    4014:	19 f4       	brne	.+6      	; 0x401c <nrk_signal_register+0x36>
    4016:	8f ef       	ldi	r24, 0xFF	; 255
    4018:	9f ef       	ldi	r25, 0xFF	; 255
    401a:	08 95       	ret
	}

    401c:	e0 91 55 07 	lds	r30, 0x0755
    4020:	f0 91 56 07 	lds	r31, 0x0756
    4024:	21 e0       	ldi	r18, 0x01	; 1
    4026:	30 e0       	ldi	r19, 0x00	; 0
    4028:	40 e0       	ldi	r20, 0x00	; 0
    402a:	50 e0       	ldi	r21, 0x00	; 0
    402c:	04 c0       	rjmp	.+8      	; 0x4036 <nrk_signal_register+0x50>
    402e:	22 0f       	add	r18, r18
    4030:	33 1f       	adc	r19, r19
    4032:	44 1f       	adc	r20, r20
    4034:	55 1f       	adc	r21, r21
    4036:	6a 95       	dec	r22
    4038:	d2 f7       	brpl	.-12     	; 0x402e <nrk_signal_register+0x48>
    403a:	85 85       	ldd	r24, Z+13	; 0x0d
    403c:	96 85       	ldd	r25, Z+14	; 0x0e
    403e:	a7 85       	ldd	r26, Z+15	; 0x0f
    4040:	b0 89       	ldd	r27, Z+16	; 0x10
    4042:	82 2b       	or	r24, r18
    4044:	93 2b       	or	r25, r19
    4046:	a4 2b       	or	r26, r20
    4048:	b5 2b       	or	r27, r21
    404a:	85 87       	std	Z+13, r24	; 0x0d
    404c:	96 87       	std	Z+14, r25	; 0x0e
    404e:	a7 87       	std	Z+15, r26	; 0x0f
    4050:	b0 8b       	std	Z+16, r27	; 0x10
    4052:	81 e0       	ldi	r24, 0x01	; 1
    4054:	90 e0       	ldi	r25, 0x00	; 0
// Set AES nonce to all zeros
nrk_spin_wait_us(100); 
for(i=0; i<7; i++ )
	{
    	key_buf=0; 
    4056:	08 95       	ret

00004058 <nrk_sem_create>:
    // Initialize the FIFOP external interrupt
    //FIFOP_INT_INIT();
    //ENABLE_FIFOP_INT();

    // Turn off all interrupts while we're accessing the CC2420 registers
	DISABLE_GLOBAL_INT();
    4058:	38 2f       	mov	r19, r24

    FASTSPI_STROBE(CC2420_SXOSCON);
    405a:	80 91 54 07 	lds	r24, 0x0754
    405e:	88 23       	and	r24, r24
    4060:	19 f0       	breq	.+6      	; 0x4068 <nrk_sem_create+0x10>
    4062:	80 e0       	ldi	r24, 0x00	; 0
    4064:	90 e0       	ldi	r25, 0x00	; 0
    4066:	08 95       	ret
    mdmctrl0=0x02E2;
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  // Std Preamble, CRC, no auto ack, no hw addr decoding 
    //FASTSPI_SETREG(CC2420_MDMCTRL0, 0x0AF2);  // Turn on automatic packet acknowledgment
						// Turn on hw addre decoding 
    4068:	80 91 3e 07 	lds	r24, 0x073E
    406c:	8f 3f       	cpi	r24, 0xFF	; 255
    406e:	11 f4       	brne	.+4      	; 0x4074 <nrk_sem_create+0x1c>
    4070:	20 e0       	ldi	r18, 0x00	; 0
    4072:	07 c0       	rjmp	.+14     	; 0x4082 <nrk_sem_create+0x2a>
    4074:	80 91 41 07 	lds	r24, 0x0741
    4078:	8f 3f       	cpi	r24, 0xFF	; 255
    407a:	11 f0       	breq	.+4      	; 0x4080 <nrk_sem_create+0x28>
    407c:	22 e0       	ldi	r18, 0x02	; 2
    407e:	01 c0       	rjmp	.+2      	; 0x4082 <nrk_sem_create+0x2a>
    4080:	21 e0       	ldi	r18, 0x01	; 1
    FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0500); // Set the correlation threshold = 20
    FASTSPI_SETREG(CC2420_IOCFG0, 0x007F);   // Set the FIFOP threshold to maximum
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security"
    4082:	82 2f       	mov	r24, r18
    4084:	99 27       	eor	r25, r25
    4086:	fc 01       	movw	r30, r24
    4088:	ee 0f       	add	r30, r30
    408a:	ff 1f       	adc	r31, r31
    408c:	e8 0f       	add	r30, r24
    408e:	f9 1f       	adc	r31, r25
    4090:	e2 5c       	subi	r30, 0xC2	; 194
    4092:	f8 4f       	sbci	r31, 0xF8	; 248
    4094:	32 83       	std	Z+2, r19	; 0x02
    FASTSPI_SETREG(CC2420_RXCTRL1, 0x1A56); // All default except
    4096:	30 83       	st	Z, r19
					    // reference bias current to RX
    4098:	61 83       	std	Z+1, r22	; 0x01
					    // bandpass filter is set to 3uA 
    409a:	81 e0       	ldi	r24, 0x01	; 1
    409c:	80 93 54 07 	sts	0x0754, r24

    40a0:	83 e0       	ldi	r24, 0x03	; 3
    40a2:	28 9f       	mul	r18, r24
    40a4:	c0 01       	movw	r24, r0
    40a6:	11 24       	eor	r1, r1
    40a8:	82 5c       	subi	r24, 0xC2	; 194
    40aa:	98 4f       	sbci	r25, 0xF8	; 248
/*
    40ac:	08 95       	ret

000040ae <nrk_get_resource_index>:
    // FIXME: remove later for auto ack
    myAddr=MY_MAC;
    panId=0x02;
    FASTSPI_SETREG(CC2420_MDMCTRL0, 0x0AF2);  // Turn on automatic packet acknowledgment
//    FASTSPI_SETREG(CC2420_MDMCTRL0, 0x0AE2);  // Turn on automatic packet acknowledgment
    nrk_spin_wait_us(500);
    40ae:	27 e0       	ldi	r18, 0x07	; 7
    40b0:	8e 33       	cpi	r24, 0x3E	; 62
    40b2:	92 07       	cpc	r25, r18
    40b4:	11 f4       	brne	.+4      	; 0x40ba <nrk_get_resource_index+0xc>
    40b6:	80 e0       	ldi	r24, 0x00	; 0
    40b8:	07 c0       	rjmp	.+14     	; 0x40c8 <nrk_get_resource_index+0x1a>
    40ba:	81 54       	subi	r24, 0x41	; 65
    40bc:	97 40       	sbci	r25, 0x07	; 7
    40be:	19 f0       	breq	.+6      	; 0x40c6 <nrk_get_resource_index+0x18>
    40c0:	8f ef       	ldi	r24, 0xFF	; 255
    40c2:	9f ef       	ldi	r25, 0xFF	; 255
    40c4:	08 95       	ret
    40c6:	81 e0       	ldi	r24, 0x01	; 1
    nrk_spin_wait_us(500);
    40c8:	99 27       	eor	r25, r25
    40ca:	87 fd       	sbrc	r24, 7
    40cc:	90 95       	com	r25
    FASTSPI_WRITE_RAM_LE(&myAddr, CC2420RAM_SHORTADDR, 2, n);
    nrk_spin_wait_us(500);
    40ce:	08 95       	ret

000040d0 <nrk_sem_delete>:
  if (v == NRK_ERROR) {
    nrk_kprintf (PSTR ("CC2420 ERROR:  Access to semaphore failed\r\n"));
  }
#endif

    // Make sure that the voltage regulator is on, and that the reset pin is inactive
    40d0:	0e 94 57 20 	call	0x40ae	; 0x40ae <nrk_get_resource_index>
    SET_VREG_ACTIVE();
    halWait(1000);
    40d4:	8f 3f       	cpi	r24, 0xFF	; 255
    40d6:	11 f4       	brne	.+4      	; 0x40dc <nrk_sem_delete+0xc>
    40d8:	81 e0       	ldi	r24, 0x01	; 1
    40da:	02 c0       	rjmp	.+4      	; 0x40e0 <nrk_sem_delete+0x10>
    SET_RESET_ACTIVE();
    40dc:	82 30       	cpi	r24, 0x02	; 2
    40de:	29 f4       	brne	.+10     	; 0x40ea <nrk_sem_delete+0x1a>
    40e0:	0e 94 57 1c 	call	0x38ae	; 0x38ae <_nrk_errno_set>
    40e4:	8f ef       	ldi	r24, 0xFF	; 255
    40e6:	9f ef       	ldi	r25, 0xFF	; 255
    40e8:	08 95       	ret
    halWait(1);
    SET_RESET_INACTIVE();
    40ea:	99 27       	eor	r25, r25
    40ec:	87 fd       	sbrc	r24, 7
    40ee:	90 95       	com	r25
    40f0:	fc 01       	movw	r30, r24
    40f2:	ee 0f       	add	r30, r30
    40f4:	ff 1f       	adc	r31, r31
    40f6:	e8 0f       	add	r30, r24
    40f8:	f9 1f       	adc	r31, r25
    40fa:	e2 5c       	subi	r30, 0xC2	; 194
    40fc:	f8 4f       	sbci	r31, 0xF8	; 248
    40fe:	8f ef       	ldi	r24, 0xFF	; 255
    4100:	80 83       	st	Z, r24
    halWait(100);
    4102:	82 83       	std	Z+2, r24	; 0x02

    4104:	81 83       	std	Z+1, r24	; 0x01
    // Initialize the FIFOP external interrupt
    4106:	80 91 54 07 	lds	r24, 0x0754
    410a:	81 50       	subi	r24, 0x01	; 1
    410c:	80 93 54 07 	sts	0x0754, r24
    4110:	81 e0       	ldi	r24, 0x01	; 1
    4112:	90 e0       	ldi	r25, 0x00	; 0
    //FIFOP_INT_INIT();
    //ENABLE_FIFOP_INT();
    4114:	08 95       	ret

00004116 <nrk_sem_query>:
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0); 
}

void rf_auto_ack_disable()
{
    auto_ack_enable=0;
    4116:	0e 94 57 20 	call	0x40ae	; 0x40ae <nrk_get_resource_index>
    mdmctrl0 &= (~0x0010);
    411a:	8f 3f       	cpi	r24, 0xFF	; 255
    411c:	11 f4       	brne	.+4      	; 0x4122 <nrk_sem_query+0xc>
    411e:	81 e0       	ldi	r24, 0x01	; 1
    4120:	02 c0       	rjmp	.+4      	; 0x4126 <nrk_sem_query+0x10>
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
    4122:	82 30       	cpi	r24, 0x02	; 2
    4124:	29 f4       	brne	.+10     	; 0x4130 <nrk_sem_query+0x1a>
    4126:	0e 94 57 1c 	call	0x38ae	; 0x38ae <_nrk_errno_set>
    412a:	8f ef       	ldi	r24, 0xFF	; 255
    412c:	9f ef       	ldi	r25, 0xFF	; 255
    412e:	08 95       	ret
}

    4130:	99 27       	eor	r25, r25
    4132:	87 fd       	sbrc	r24, 7
    4134:	90 95       	com	r25
    4136:	fc 01       	movw	r30, r24
    4138:	ee 0f       	add	r30, r30
    413a:	ff 1f       	adc	r31, r31
    413c:	e8 0f       	add	r30, r24
    413e:	f9 1f       	adc	r31, r25
    4140:	e2 5c       	subi	r30, 0xC2	; 194
    4142:	f8 4f       	sbci	r31, 0xF8	; 248
    4144:	82 81       	ldd	r24, Z+2	; 0x02
    4146:	99 27       	eor	r25, r25
    4148:	87 fd       	sbrc	r24, 7
    414a:	90 95       	com	r25

    414c:	08 95       	ret

0000414e <nrk_sem_post>:
}
//-------------------------------------------------------------------------------------------------------
//  void rf_init(RF_RX_INFO *pRRI, uint8_t channel, WORD panId, WORD myAddr)
//
//  DESCRIPTION:
//      Initializes CC2420 for radio communication via the basic RF library functions. Turns on the
    414e:	1f 93       	push	r17
    4150:	cf 93       	push	r28
    4152:	df 93       	push	r29
//		voltage regulator, resets the CC2420, turns on the crystal oscillator, writes all necessary
    4154:	0e 94 57 20 	call	0x40ae	; 0x40ae <nrk_get_resource_index>
    4158:	18 2f       	mov	r17, r24
//		registers and protocol addresses (for automatic address recognition). Note that the crystal
//		oscillator will remain on (forever).
    415a:	8f 3f       	cpi	r24, 0xFF	; 255
    415c:	11 f4       	brne	.+4      	; 0x4162 <nrk_sem_post+0x14>
    415e:	81 e0       	ldi	r24, 0x01	; 1
    4160:	03 c0       	rjmp	.+6      	; 0x4168 <nrk_sem_post+0x1a>
//
    4162:	82 30       	cpi	r24, 0x02	; 2
    4164:	31 f4       	brne	.+12     	; 0x4172 <nrk_sem_post+0x24>
    4166:	82 e0       	ldi	r24, 0x02	; 2
    4168:	0e 94 57 1c 	call	0x38ae	; 0x38ae <_nrk_errno_set>
    416c:	8f ef       	ldi	r24, 0xFF	; 255
    416e:	9f ef       	ldi	r25, 0xFF	; 255
    4170:	3e c0       	rjmp	.+124    	; 0x41ee <nrk_sem_post+0xa0>
//  ARGUMENTS:
//      RF_RX_INFO *pRRI
    4172:	99 27       	eor	r25, r25
    4174:	87 fd       	sbrc	r24, 7
    4176:	90 95       	com	r25
    4178:	ec 01       	movw	r28, r24
    417a:	cc 0f       	add	r28, r28
    417c:	dd 1f       	adc	r29, r29
    417e:	c8 0f       	add	r28, r24
    4180:	d9 1f       	adc	r29, r25
    4182:	c2 5c       	subi	r28, 0xC2	; 194
    4184:	d8 4f       	sbci	r29, 0xF8	; 248
    4186:	9a 81       	ldd	r25, Y+2	; 0x02
    4188:	88 81       	ld	r24, Y
    418a:	98 17       	cp	r25, r24
    418c:	74 f5       	brge	.+92     	; 0x41ea <nrk_sem_post+0x9c>
//          A pointer the RF_RX_INFO data structure to be used during the first packet reception.
//			The structure can be switched upon packet reception.
//      uint8_t channel
    418e:	0e 94 33 1a 	call	0x3466	; 0x3466 <nrk_int_disable>
//          The RF channel to be used (11 = 2405 MHz to 26 = 2480 MHz)
//      WORD panId
    4192:	8a 81       	ldd	r24, Y+2	; 0x02
    4194:	8f 5f       	subi	r24, 0xFF	; 255
    4196:	8a 83       	std	Y+2, r24	; 0x02
//          The personal area network identification number
    4198:	e0 91 55 07 	lds	r30, 0x0755
    419c:	f0 91 56 07 	lds	r31, 0x0756
    41a0:	14 82       	std	Z+4, r1	; 0x04
    41a2:	ef eb       	ldi	r30, 0xBF	; 191
    41a4:	f6 e0       	ldi	r31, 0x06	; 6
//      WORD myAddr
//          The 16-bit short address which is used by this node. Must together with the PAN ID form a
//			unique 32-bit identifier to avoid addressing conflicts. Normally, in a 802.15.4 network, the
//			short address will be given to associated nodes by the PAN coordinator.
    41a6:	21 2f       	mov	r18, r17
    41a8:	33 27       	eor	r19, r19
    41aa:	27 fd       	sbrc	r18, 7
    41ac:	30 95       	com	r19
    41ae:	43 2f       	mov	r20, r19
    41b0:	53 2f       	mov	r21, r19
//          The RF channel to be used (11 = 2405 MHz to 26 = 2480 MHz)
//      WORD panId
//          The personal area network identification number
//      WORD myAddr
//          The 16-bit short address which is used by this node. Must together with the PAN ID form a
//			unique 32-bit identifier to avoid addressing conflicts. Normally, in a 802.15.4 network, the
    41b2:	80 81       	ld	r24, Z
    41b4:	82 30       	cpi	r24, 0x02	; 2
    41b6:	91 f4       	brne	.+36     	; 0x41dc <nrk_sem_post+0x8e>
//			short address will be given to associated nodes by the PAN coordinator.
    41b8:	82 85       	ldd	r24, Z+10	; 0x0a
    41ba:	93 85       	ldd	r25, Z+11	; 0x0b
    41bc:	a4 85       	ldd	r26, Z+12	; 0x0c
    41be:	b5 85       	ldd	r27, Z+13	; 0x0d
    41c0:	82 17       	cp	r24, r18
    41c2:	93 07       	cpc	r25, r19
    41c4:	a4 07       	cpc	r26, r20
    41c6:	b5 07       	cpc	r27, r21
    41c8:	49 f4       	brne	.+18     	; 0x41dc <nrk_sem_post+0x8e>
//-------------------------------------------------------------------------------------------------------
void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr) {
    41ca:	83 e0       	ldi	r24, 0x03	; 3
    41cc:	82 83       	std	Z+2, r24	; 0x02
    uint8_t n;
    41ce:	17 86       	std	Z+15, r1	; 0x0f
    41d0:	16 86       	std	Z+14, r1	; 0x0e

    41d2:	10 82       	st	Z, r1
#ifdef RADIO_PRIORITY_CEILING
    41d4:	12 86       	std	Z+10, r1	; 0x0a
    41d6:	13 86       	std	Z+11, r1	; 0x0b
    41d8:	14 86       	std	Z+12, r1	; 0x0c
    41da:	15 86       	std	Z+13, r1	; 0x0d
    41dc:	b1 96       	adiw	r30, 0x21	; 33
//      uint8_t channel
//          The RF channel to be used (11 = 2405 MHz to 26 = 2480 MHz)
//      WORD panId
//          The personal area network identification number
//      WORD myAddr
//          The 16-bit short address which is used by this node. Must together with the PAN ID form a
    41de:	87 e0       	ldi	r24, 0x07	; 7
    41e0:	e3 34       	cpi	r30, 0x43	; 67
    41e2:	f8 07       	cpc	r31, r24
    41e4:	31 f7       	brne	.-52     	; 0x41b2 <nrk_sem_post+0x64>

#ifdef RADIO_PRIORITY_CEILING
   int8_t v;
    radio_sem = nrk_sem_create(1,RADIO_PRIORITY_CEILING);
    if (radio_sem == NULL)
      nrk_kernel_error_add (NRK_SEMAPHORE_CREATE_ERROR, nrk_get_pid ());
    41e6:	0e 94 35 1a 	call	0x346a	; 0x346a <nrk_int_enable>
    41ea:	81 e0       	ldi	r24, 0x01	; 1
    41ec:	90 e0       	ldi	r25, 0x00	; 0
    41ee:	df 91       	pop	r29
    41f0:	cf 91       	pop	r28
    41f2:	1f 91       	pop	r17
    41f4:	08 95       	ret

000041f6 <nrk_event_signal>:
for(i=0; i<7; i++ )
	{
    	key_buf=0; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
	}
    41f6:	df 92       	push	r13
    41f8:	ef 92       	push	r14
    41fa:	ff 92       	push	r15
    41fc:	0f 93       	push	r16
    41fe:	1f 93       	push	r17
	// block counter set 1
    	key_buf=1; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
}

    4200:	e1 e0       	ldi	r30, 0x01	; 1
    4202:	ee 2e       	mov	r14, r30
    4204:	f1 2c       	mov	r15, r1
    4206:	01 2d       	mov	r16, r1
    4208:	11 2d       	mov	r17, r1
    420a:	04 c0       	rjmp	.+8      	; 0x4214 <nrk_event_signal+0x1e>
    420c:	ee 0c       	add	r14, r14
    420e:	ff 1c       	adc	r15, r15
    4210:	00 1f       	adc	r16, r16
    4212:	11 1f       	adc	r17, r17
    4214:	8a 95       	dec	r24
    4216:	d2 f7       	brpl	.-12     	; 0x420c <nrk_event_signal+0x16>
void rf_security_enable(uint8_t *key)
{
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x0306); // Enable CTR encryption with key 0
    4218:	80 91 d2 04 	lds	r24, 0x04D2
    421c:	90 91 d3 04 	lds	r25, 0x04D3
    4220:	a0 91 d4 04 	lds	r26, 0x04D4
    4224:	b0 91 d5 04 	lds	r27, 0x04D5
    4228:	8e 21       	and	r24, r14
    422a:	9f 21       	and	r25, r15
    422c:	a0 23       	and	r26, r16
    422e:	b1 23       	and	r27, r17
    4230:	00 97       	sbiw	r24, 0x00	; 0
    4232:	a1 05       	cpc	r26, r1
    4234:	b1 05       	cpc	r27, r1
    4236:	11 f4       	brne	.+4      	; 0x423c <nrk_event_signal+0x46>
    4238:	81 e0       	ldi	r24, 0x01	; 1
    423a:	43 c0       	rjmp	.+134    	; 0x42c2 <nrk_event_signal+0xcc>
    FASTSPI_SETREG(CC2420_SECCTRL1, 0x0e0e); // Encrypt / Decrypt 18 bytes into header

security_enable=1;
    423c:	0e 94 33 1a 	call	0x3466	; 0x3466 <nrk_int_disable>
    4240:	ef eb       	ldi	r30, 0xBF	; 191
    4242:	f6 e0       	ldi	r31, 0x06	; 6
    4244:	dd 24       	eor	r13, r13



void rf_security_disable()
{
  FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security enable"
    4246:	80 81       	ld	r24, Z
    4248:	81 30       	cpi	r24, 0x01	; 1
    424a:	b9 f4       	brne	.+46     	; 0x427a <nrk_event_signal+0x84>
  security_enable=0;
    424c:	82 85       	ldd	r24, Z+10	; 0x0a
    424e:	93 85       	ldd	r25, Z+11	; 0x0b
    4250:	a4 85       	ldd	r26, Z+12	; 0x0c
    4252:	b5 85       	ldd	r27, Z+13	; 0x0d
    4254:	8e 21       	and	r24, r14
    4256:	9f 21       	and	r25, r15
    4258:	a0 23       	and	r26, r16
    425a:	b1 23       	and	r27, r17
    425c:	00 97       	sbiw	r24, 0x00	; 0
    425e:	a1 05       	cpc	r26, r1
    4260:	b1 05       	cpc	r27, r1
    4262:	59 f0       	breq	.+22     	; 0x427a <nrk_event_signal+0x84>
}

    4264:	83 e0       	ldi	r24, 0x03	; 3
    4266:	82 83       	std	Z+2, r24	; 0x02
//-------------------------------------------------------------------------------------------------------
    4268:	17 86       	std	Z+15, r1	; 0x0f
    426a:	16 86       	std	Z+14, r1	; 0x0e
// The RF settings structure is declared here, since we'll always need halRfInit()
    426c:	10 82       	st	Z, r1
volatile RF_SETTINGS rfSettings;
volatile uint8_t rx_ready;
//-------------------------------------------------------------------------------------------------------
    426e:	e2 86       	std	Z+10, r14	; 0x0a
    4270:	f3 86       	std	Z+11, r15	; 0x0b
    4272:	04 87       	std	Z+12, r16	; 0x0c
    4274:	15 87       	std	Z+13, r17	; 0x0d
    4276:	dd 24       	eor	r13, r13
    4278:	d3 94       	inc	r13
nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    427a:	80 81       	ld	r24, Z
    427c:	82 30       	cpi	r24, 0x02	; 2
    427e:	a1 f4       	brne	.+40     	; 0x42a8 <nrk_event_signal+0xb2>

    4280:	82 85       	ldd	r24, Z+10	; 0x0a
    4282:	93 85       	ldd	r25, Z+11	; 0x0b
    4284:	a4 85       	ldd	r26, Z+12	; 0x0c
    4286:	b5 85       	ldd	r27, Z+13	; 0x0d
    4288:	8e 15       	cp	r24, r14
    428a:	9f 05       	cpc	r25, r15
    428c:	a0 07       	cpc	r26, r16
    428e:	b1 07       	cpc	r27, r17
    4290:	59 f4       	brne	.+22     	; 0x42a8 <nrk_event_signal+0xb2>
void rf_tx_power(uint8_t pwr)
{
    4292:	83 e0       	ldi	r24, 0x03	; 3
    4294:	82 83       	std	Z+2, r24	; 0x02
uint16_t tmp;
    4296:	17 86       	std	Z+15, r1	; 0x0f
    4298:	16 86       	std	Z+14, r1	; 0x0e
    //tmp=0x5070;
    429a:	10 82       	st	Z, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    429c:	12 86       	std	Z+10, r1	; 0x0a
    429e:	13 86       	std	Z+11, r1	; 0x0b
    42a0:	14 86       	std	Z+12, r1	; 0x0c
    42a2:	15 86       	std	Z+13, r1	; 0x0d
    42a4:	dd 24       	eor	r13, r13
    42a6:	d3 94       	inc	r13
    42a8:	b1 96       	adiw	r30, 0x21	; 33
{
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x0306); // Enable CTR encryption with key 0
    FASTSPI_SETREG(CC2420_SECCTRL1, 0x0e0e); // Encrypt / Decrypt 18 bytes into header

security_enable=1;
}
    42aa:	87 e0       	ldi	r24, 0x07	; 7
    42ac:	e3 34       	cpi	r30, 0x43	; 67
    42ae:	f8 07       	cpc	r31, r24
    42b0:	51 f6       	brne	.-108    	; 0x4246 <nrk_event_signal+0x50>
    tmp=0xA0E0;
    tmp=tmp | (pwr&0x1F);  
    FASTSPI_SETREG(CC2420_TXCTRL, tmp);   // Set the FIFOP threshold to maximum
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
    42b2:	0e 94 35 1a 	call	0x346a	; 0x346a <nrk_int_enable>
}
    42b6:	dd 20       	and	r13, r13
    42b8:	19 f0       	breq	.+6      	; 0x42c0 <nrk_event_signal+0xca>
    42ba:	81 e0       	ldi	r24, 0x01	; 1
    42bc:	90 e0       	ldi	r25, 0x00	; 0
    42be:	05 c0       	rjmp	.+10     	; 0x42ca <nrk_event_signal+0xd4>
void rf_set_channel( uint8_t channel )
{
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    42c0:	82 e0       	ldi	r24, 0x02	; 2
    42c2:	0e 94 57 1c 	call	0x38ae	; 0x38ae <_nrk_errno_set>
    42c6:	8f ef       	ldi	r24, 0xFF	; 255
    42c8:	9f ef       	ldi	r25, 0xFF	; 255
    42ca:	1f 91       	pop	r17
    42cc:	0f 91       	pop	r16
    42ce:	ff 90       	pop	r15
    42d0:	ef 90       	pop	r14
    42d2:	df 90       	pop	r13
    42d4:	08 95       	ret

000042d6 <nrk_signal_delete>:
nrk_sem_t *radio_sem;
uint8_t auto_ack_enable;
uint8_t security_enable;
uint8_t last_pkt_encrypted;
uint16_t mdmctrl0;
uint8_t tx_ctr[4];
    42d6:	ef 92       	push	r14
    42d8:	ff 92       	push	r15
    42da:	0f 93       	push	r16
    42dc:	1f 93       	push	r17
    42de:	cf 93       	push	r28
    42e0:	df 93       	push	r29
uint8_t rx_ctr[4];

void rf_power_down()
{
    42e2:	c8 2f       	mov	r28, r24
    42e4:	dd 27       	eor	r29, r29
    42e6:	c7 fd       	sbrc	r28, 7
    42e8:	d0 95       	com	r29
    42ea:	f1 e0       	ldi	r31, 0x01	; 1
    42ec:	ef 2e       	mov	r14, r31
    42ee:	f1 2c       	mov	r15, r1
    42f0:	01 2d       	mov	r16, r1
    42f2:	11 2d       	mov	r17, r1
    42f4:	0c 2e       	mov	r0, r28
    42f6:	04 c0       	rjmp	.+8      	; 0x4300 <nrk_signal_delete+0x2a>
    42f8:	ee 0c       	add	r14, r14
    42fa:	ff 1c       	adc	r15, r15
    42fc:	00 1f       	adc	r16, r16
    42fe:	11 1f       	adc	r17, r17
    4300:	0a 94       	dec	r0
    4302:	d2 f7       	brpl	.-12     	; 0x42f8 <nrk_signal_delete+0x22>
    DISABLE_GLOBAL_INT();
    FASTSPI_STROBE(CC2420_SXOSCOFF);
    4304:	80 91 d2 04 	lds	r24, 0x04D2
    4308:	90 91 d3 04 	lds	r25, 0x04D3
    430c:	a0 91 d4 04 	lds	r26, 0x04D4
    4310:	b0 91 d5 04 	lds	r27, 0x04D5
    4314:	8e 21       	and	r24, r14
    4316:	9f 21       	and	r25, r15
    4318:	a0 23       	and	r26, r16
    431a:	b1 23       	and	r27, r17
    431c:	00 97       	sbiw	r24, 0x00	; 0
    431e:	a1 05       	cpc	r26, r1
    4320:	b1 05       	cpc	r27, r1
    4322:	19 f4       	brne	.+6      	; 0x432a <nrk_signal_delete+0x54>
    4324:	8f ef       	ldi	r24, 0xFF	; 255
    4326:	9f ef       	ldi	r25, 0xFF	; 255
    4328:	5d c0       	rjmp	.+186    	; 0x43e4 <nrk_signal_delete+0x10e>
    FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
    ENABLE_GLOBAL_INT();
    432a:	0e 94 33 1a 	call	0x3466	; 0x3466 <nrk_int_disable>
    432e:	e8 eb       	ldi	r30, 0xB8	; 184
    4330:	f6 e0       	ldi	r31, 0x06	; 6
    nrk_spin_wait_us(OSC_STARTUP_DELAY);
    ENABLE_GLOBAL_INT();

}


    4332:	a8 01       	movw	r20, r16
    4334:	97 01       	movw	r18, r14
    4336:	20 95       	com	r18
    4338:	30 95       	com	r19
    433a:	40 95       	com	r20
    433c:	50 95       	com	r21
    DISABLE_GLOBAL_INT();
    FASTSPI_STROBE(CC2420_SXOSCOFF);
    FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
    ENABLE_GLOBAL_INT();
}

    433e:	80 85       	ldd	r24, Z+8	; 0x08
    4340:	8f 3f       	cpi	r24, 0xFF	; 255
    4342:	41 f1       	breq	.+80     	; 0x4394 <nrk_signal_delete+0xbe>
void rf_power_up()
{

    DISABLE_GLOBAL_INT();
    4344:	85 85       	ldd	r24, Z+13	; 0x0d
    4346:	96 85       	ldd	r25, Z+14	; 0x0e
    4348:	a7 85       	ldd	r26, Z+15	; 0x0f
    434a:	b0 89       	ldd	r27, Z+16	; 0x10
    434c:	8e 15       	cp	r24, r14
    434e:	9f 05       	cpc	r25, r15
    4350:	a0 07       	cpc	r26, r16
    4352:	b1 07       	cpc	r27, r17
    4354:	39 f4       	brne	.+14     	; 0x4364 <nrk_signal_delete+0x8e>
    FASTSPI_STROBE(CC2420_SXOSCON);
    nrk_spin_wait_us(OSC_STARTUP_DELAY);
    ENABLE_GLOBAL_INT();
    4356:	11 8a       	std	Z+17, r1	; 0x11
    4358:	12 8a       	std	Z+18, r1	; 0x12
    435a:	13 8a       	std	Z+19, r1	; 0x13
    435c:	14 8a       	std	Z+20, r1	; 0x14

    435e:	17 82       	std	Z+7, r1	; 0x07
}
    4360:	83 e0       	ldi	r24, 0x03	; 3
    4362:	81 87       	std	Z+9, r24	; 0x09


    4364:	85 85       	ldd	r24, Z+13	; 0x0d
    4366:	96 85       	ldd	r25, Z+14	; 0x0e
    4368:	a7 85       	ldd	r26, Z+15	; 0x0f
    436a:	b0 89       	ldd	r27, Z+16	; 0x10
    436c:	82 23       	and	r24, r18
    436e:	93 23       	and	r25, r19
    4370:	a4 23       	and	r26, r20
    4372:	b5 23       	and	r27, r21
    4374:	85 87       	std	Z+13, r24	; 0x0d
    4376:	96 87       	std	Z+14, r25	; 0x0e
    4378:	a7 87       	std	Z+15, r26	; 0x0f
    437a:	b0 8b       	std	Z+16, r27	; 0x10
// Returns 1 if the last packet was encrypted, 0 otherwise
    437c:	81 89       	ldd	r24, Z+17	; 0x11
    437e:	92 89       	ldd	r25, Z+18	; 0x12
    4380:	a3 89       	ldd	r26, Z+19	; 0x13
    4382:	b4 89       	ldd	r27, Z+20	; 0x14
    4384:	82 23       	and	r24, r18
    4386:	93 23       	and	r25, r19
    4388:	a4 23       	and	r26, r20
    438a:	b5 23       	and	r27, r21
    438c:	81 8b       	std	Z+17, r24	; 0x11
    438e:	92 8b       	std	Z+18, r25	; 0x12
    4390:	a3 8b       	std	Z+19, r26	; 0x13
    4392:	b4 8b       	std	Z+20, r27	; 0x14
    4394:	b1 96       	adiw	r30, 0x21	; 33
{
    DISABLE_GLOBAL_INT();
    FASTSPI_STROBE(CC2420_SXOSCOFF);
    FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
    ENABLE_GLOBAL_INT();
}
    4396:	87 e0       	ldi	r24, 0x07	; 7
    4398:	ec 33       	cpi	r30, 0x3C	; 60
    439a:	f8 07       	cpc	r31, r24
    439c:	81 f6       	brne	.-96     	; 0x433e <nrk_signal_delete+0x68>

// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
return last_pkt_encrypted;
}
    439e:	2e ef       	ldi	r18, 0xFE	; 254
    43a0:	3f ef       	ldi	r19, 0xFF	; 255
    43a2:	4f ef       	ldi	r20, 0xFF	; 255
    43a4:	5f ef       	ldi	r21, 0xFF	; 255
    43a6:	04 c0       	rjmp	.+8      	; 0x43b0 <nrk_signal_delete+0xda>
    43a8:	22 0f       	add	r18, r18
    43aa:	33 1f       	adc	r19, r19
    43ac:	44 1f       	adc	r20, r20
    43ae:	55 1f       	adc	r21, r21
    43b0:	ca 95       	dec	r28
    43b2:	d2 f7       	brpl	.-12     	; 0x43a8 <nrk_signal_delete+0xd2>
    43b4:	80 91 d2 04 	lds	r24, 0x04D2
    43b8:	90 91 d3 04 	lds	r25, 0x04D3
    43bc:	a0 91 d4 04 	lds	r26, 0x04D4
    43c0:	b0 91 d5 04 	lds	r27, 0x04D5
    43c4:	82 23       	and	r24, r18
    43c6:	93 23       	and	r25, r19
    43c8:	a4 23       	and	r26, r20
    43ca:	b5 23       	and	r27, r21
    43cc:	80 93 d2 04 	sts	0x04D2, r24
    43d0:	90 93 d3 04 	sts	0x04D3, r25
    43d4:	a0 93 d4 04 	sts	0x04D4, r26
    43d8:	b0 93 d5 04 	sts	0x04D5, r27

    43dc:	0e 94 35 1a 	call	0x346a	; 0x346a <nrk_int_enable>
    43e0:	81 e0       	ldi	r24, 0x01	; 1
    43e2:	90 e0       	ldi	r25, 0x00	; 0
    43e4:	df 91       	pop	r29
    43e6:	cf 91       	pop	r28
    43e8:	1f 91       	pop	r17
    43ea:	0f 91       	pop	r16
    43ec:	ff 90       	pop	r15
    43ee:	ef 90       	pop	r14
    43f0:	08 95       	ret

000043f2 <nrk_sem_pend>:

void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
uint8_t n;
    rfSettings.myAddr = my_mac;
    nrk_spin_wait_us(500);
    43f2:	1f 93       	push	r17
    43f4:	cf 93       	push	r28
    43f6:	df 93       	push	r29
    FASTSPI_WRITE_RAM_LE(&my_mac, CC2420RAM_SHORTADDR, 2, n);
    nrk_spin_wait_us(500);
    43f8:	0e 94 57 20 	call	0x40ae	; 0x40ae <nrk_get_resource_index>
    43fc:	18 2f       	mov	r17, r24
}
    43fe:	8f 3f       	cpi	r24, 0xFF	; 255
    4400:	11 f4       	brne	.+4      	; 0x4406 <nrk_sem_pend+0x14>
    4402:	81 e0       	ldi	r24, 0x01	; 1
    4404:	03 c0       	rjmp	.+6      	; 0x440c <nrk_sem_pend+0x1a>

    4406:	82 30       	cpi	r24, 0x02	; 2
    4408:	31 f4       	brne	.+12     	; 0x4416 <nrk_sem_pend+0x24>
    440a:	82 e0       	ldi	r24, 0x02	; 2
    440c:	0e 94 57 1c 	call	0x38ae	; 0x38ae <_nrk_errno_set>
    4410:	8f ef       	ldi	r24, 0xFF	; 255
    4412:	9f ef       	ldi	r25, 0xFF	; 255
    4414:	3e c0       	rjmp	.+124    	; 0x4492 <nrk_sem_pend+0xa0>


    4416:	0e 94 33 1a 	call	0x3466	; 0x3466 <nrk_int_disable>
void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
    441a:	81 2f       	mov	r24, r17
    441c:	99 27       	eor	r25, r25
    441e:	87 fd       	sbrc	r24, 7
    4420:	90 95       	com	r25
    4422:	ec 01       	movw	r28, r24
    4424:	cc 0f       	add	r28, r28
    4426:	dd 1f       	adc	r29, r29
    4428:	c8 0f       	add	r28, r24
    442a:	d9 1f       	adc	r29, r25
    442c:	c2 5c       	subi	r28, 0xC2	; 194
    442e:	d8 4f       	sbci	r29, 0xF8	; 248
    4430:	8a 81       	ldd	r24, Y+2	; 0x02
    4432:	88 23       	and	r24, r24
    4434:	d9 f4       	brne	.+54     	; 0x446c <nrk_sem_pend+0x7a>
{

    4436:	e0 91 55 07 	lds	r30, 0x0755
    443a:	f0 91 56 07 	lds	r31, 0x0756
    443e:	87 81       	ldd	r24, Z+7	; 0x07
    4440:	82 60       	ori	r24, 0x02	; 2
    4442:	87 83       	std	Z+7, r24	; 0x07
#ifdef RADIO_PRIORITY_CEILING
    4444:	e0 91 55 07 	lds	r30, 0x0755
    4448:	f0 91 56 07 	lds	r31, 0x0756
    444c:	81 2f       	mov	r24, r17
    444e:	99 27       	eor	r25, r25
    4450:	87 fd       	sbrc	r24, 7
    4452:	90 95       	com	r25
    4454:	a9 2f       	mov	r26, r25
    4456:	b9 2f       	mov	r27, r25
    4458:	81 8b       	std	Z+17, r24	; 0x11
    445a:	92 8b       	std	Z+18, r25	; 0x12
    445c:	a3 8b       	std	Z+19, r26	; 0x13
    445e:	b4 8b       	std	Z+20, r27	; 0x14
    nrk_sem_pend (radio_sem);
#endif
    4460:	0e 94 35 1a 	call	0x346a	; 0x346a <nrk_int_enable>

    4464:	80 e0       	ldi	r24, 0x00	; 0
    4466:	90 e0       	ldi	r25, 0x00	; 0
    4468:	0e 94 92 24 	call	0x4924	; 0x4924 <nrk_wait_until_ticks>
    FASTSPI_STROBE(CC2420_SFLUSHRX);
    FASTSPI_STROBE(CC2420_SFLUSHRX);
    halRfSetChannel(channel);
    446c:	8a 81       	ldd	r24, Y+2	; 0x02
    446e:	81 50       	subi	r24, 0x01	; 1
    4470:	8a 83       	std	Y+2, r24	; 0x02
    rfSettings.pRxInfo = pRRI;
    4472:	e0 91 55 07 	lds	r30, 0x0755
    4476:	f0 91 56 07 	lds	r31, 0x0756
    447a:	89 81       	ldd	r24, Y+1	; 0x01
    447c:	83 87       	std	Z+11, r24	; 0x0b

    447e:	e0 91 55 07 	lds	r30, 0x0755
    4482:	f0 91 56 07 	lds	r31, 0x0756
    4486:	81 e0       	ldi	r24, 0x01	; 1
    4488:	84 83       	std	Z+4, r24	; 0x04
#ifdef RADIO_PRIORITY_CEILING
    448a:	0e 94 35 1a 	call	0x346a	; 0x346a <nrk_int_enable>
    448e:	81 e0       	ldi	r24, 0x01	; 1
    4490:	90 e0       	ldi	r25, 0x00	; 0
    4492:	df 91       	pop	r29
    4494:	cf 91       	pop	r28
    4496:	1f 91       	pop	r17
    4498:	08 95       	ret

0000449a <nrk_event_wait>:
    halRfSetChannel(channel);
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
}

    449a:	9b 01       	movw	r18, r22
    449c:	ac 01       	movw	r20, r24

void rf_addr_decode_enable()
{
    449e:	e0 91 55 07 	lds	r30, 0x0755
    44a2:	f0 91 56 07 	lds	r31, 0x0756
    44a6:	85 85       	ldd	r24, Z+13	; 0x0d
    44a8:	96 85       	ldd	r25, Z+14	; 0x0e
    44aa:	a7 85       	ldd	r26, Z+15	; 0x0f
    44ac:	b0 89       	ldd	r27, Z+16	; 0x10
    44ae:	82 23       	and	r24, r18
    44b0:	93 23       	and	r25, r19
    44b2:	a4 23       	and	r26, r20
    44b4:	b5 23       	and	r27, r21
    44b6:	00 97       	sbiw	r24, 0x00	; 0
    44b8:	a1 05       	cpc	r26, r1
    44ba:	b1 05       	cpc	r27, r1
    44bc:	29 f4       	brne	.+10     	; 0x44c8 <nrk_event_wait+0x2e>
    44be:	60 e0       	ldi	r22, 0x00	; 0
    44c0:	70 e0       	ldi	r23, 0x00	; 0
    44c2:	80 e0       	ldi	r24, 0x00	; 0
    44c4:	90 e0       	ldi	r25, 0x00	; 0
    44c6:	08 95       	ret
    mdmctrl0 |= 0x0800;
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
    44c8:	21 8b       	std	Z+17, r18	; 0x11
    44ca:	32 8b       	std	Z+18, r19	; 0x12
    44cc:	43 8b       	std	Z+19, r20	; 0x13
    44ce:	54 8b       	std	Z+20, r21	; 0x14
}
    44d0:	81 e0       	ldi	r24, 0x01	; 1
    44d2:	87 83       	std	Z+7, r24	; 0x07
void rf_addr_decode_disable()
{
    mdmctrl0 &= (~0x0800);
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
}

    44d4:	00 90 45 07 	lds	r0, 0x0745
    44d8:	04 c0       	rjmp	.+8      	; 0x44e2 <nrk_event_wait+0x48>
    44da:	56 95       	lsr	r21
    44dc:	47 95       	ror	r20
    44de:	37 95       	ror	r19
    44e0:	27 95       	ror	r18
    44e2:	0a 94       	dec	r0
    44e4:	d2 f7       	brpl	.-12     	; 0x44da <nrk_event_wait+0x40>
    44e6:	c9 01       	movw	r24, r18
    44e8:	81 70       	andi	r24, 0x01	; 1
    44ea:	90 70       	andi	r25, 0x00	; 0
    44ec:	89 2b       	or	r24, r25
    44ee:	19 f0       	breq	.+6      	; 0x44f6 <nrk_event_wait+0x5c>

    44f0:	0e 94 33 24 	call	0x4866	; 0x4866 <nrk_wait_until_nw>
    44f4:	04 c0       	rjmp	.+8      	; 0x44fe <nrk_event_wait+0x64>
void rf_auto_ack_enable()
{
    44f6:	80 e0       	ldi	r24, 0x00	; 0
    44f8:	90 e0       	ldi	r25, 0x00	; 0
    44fa:	0e 94 92 24 	call	0x4924	; 0x4924 <nrk_wait_until_ticks>
    auto_ack_enable=1;
    mdmctrl0 |= 0x0010;
    44fe:	e0 91 55 07 	lds	r30, 0x0755
    4502:	f0 91 56 07 	lds	r31, 0x0756
    4506:	61 89       	ldd	r22, Z+17	; 0x11
    4508:	72 89       	ldd	r23, Z+18	; 0x12
    450a:	83 89       	ldd	r24, Z+19	; 0x13
    450c:	94 89       	ldd	r25, Z+20	; 0x14
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0); 
    450e:	08 95       	ret

00004510 <nrk_get_high_ready_task_ID>:

#define OSC_STARTUP_DELAY	1000

void cc259x_rx()
{
    nrk_gpio_set(NRK_DEBUG_1);
    4510:	e0 91 4a 07 	lds	r30, 0x074A
    4514:	f0 91 4b 07 	lds	r31, 0x074B
    4518:	80 81       	ld	r24, Z
    nrk_gpio_clr(NRK_DEBUG_0);
}
    451a:	99 27       	eor	r25, r25
    451c:	08 95       	ret

0000451e <nrk_print_readyQ>:


void cc259x_tx()
{
    nrk_gpio_set(NRK_DEBUG_1);
    451e:	e0 91 4a 07 	lds	r30, 0x074A
    4522:	f0 91 4b 07 	lds	r31, 0x074B
    4526:	03 c0       	rjmp	.+6      	; 0x452e <nrk_print_readyQ+0x10>
    nrk_gpio_set(NRK_DEBUG_0);
}


    4528:	03 80       	ldd	r0, Z+3	; 0x03
    452a:	f4 81       	ldd	r31, Z+4	; 0x04
    452c:	e0 2d       	mov	r30, r0

void cc259x_tx()
{
    nrk_gpio_set(NRK_DEBUG_1);
    nrk_gpio_set(NRK_DEBUG_0);
}
    452e:	30 97       	sbiw	r30, 0x00	; 0
    4530:	d9 f7       	brne	.-10     	; 0x4528 <nrk_print_readyQ+0xa>
    4532:	08 95       	ret

00004534 <nrk_add_to_readyQ>:
//  #define RADIO_PRIORITY_CEILING	20
//#endif

nrk_sem_t *radio_sem;
uint8_t auto_ack_enable;
uint8_t security_enable;
    4534:	cf 93       	push	r28
    4536:	df 93       	push	r29
    4538:	48 2f       	mov	r20, r24
uint8_t last_pkt_encrypted;
uint16_t mdmctrl0;
uint8_t tx_ctr[4];
uint8_t rx_ctr[4];

void rf_power_down()
    453a:	c0 91 b6 06 	lds	r28, 0x06B6
    453e:	d0 91 b7 06 	lds	r29, 0x06B7
    4542:	20 97       	sbiw	r28, 0x00	; 0
    4544:	09 f4       	brne	.+2      	; 0x4548 <nrk_add_to_readyQ+0x14>
    4546:	7a c0       	rjmp	.+244    	; 0x463c <nrk_add_to_readyQ+0x108>
{
    DISABLE_GLOBAL_INT();
    FASTSPI_STROBE(CC2420_SXOSCOFF);
    FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
    ENABLE_GLOBAL_INT();
    4548:	a0 91 4a 07 	lds	r26, 0x074A
    454c:	b0 91 4b 07 	lds	r27, 0x074B
}

void rf_power_up()
    4550:	10 97       	sbiw	r26, 0x00	; 0
    4552:	b9 f1       	breq	.+110    	; 0x45c2 <nrk_add_to_readyQ+0x8e>
{

    DISABLE_GLOBAL_INT();
    FASTSPI_STROBE(CC2420_SXOSCON);
    4554:	99 27       	eor	r25, r25
    4556:	87 fd       	sbrc	r24, 7
    4558:	90 95       	com	r25
    455a:	9c 01       	movw	r18, r24
    455c:	65 e0       	ldi	r22, 0x05	; 5
    455e:	22 0f       	add	r18, r18
    4560:	33 1f       	adc	r19, r19
    4562:	6a 95       	dec	r22
    4564:	e1 f7       	brne	.-8      	; 0x455e <nrk_add_to_readyQ+0x2a>
    4566:	28 0f       	add	r18, r24
    4568:	39 1f       	adc	r19, r25
    456a:	28 54       	subi	r18, 0x48	; 72
    456c:	39 4f       	sbci	r19, 0xF9	; 249
}

void rf_power_up()
{

    DISABLE_GLOBAL_INT();
    456e:	8c 91       	ld	r24, X
    4570:	99 27       	eor	r25, r25
    4572:	bc 01       	movw	r22, r24
    4574:	55 e0       	ldi	r21, 0x05	; 5
    4576:	66 0f       	add	r22, r22
    4578:	77 1f       	adc	r23, r23
    457a:	5a 95       	dec	r21
    457c:	e1 f7       	brne	.-8      	; 0x4576 <nrk_add_to_readyQ+0x42>
    457e:	68 0f       	add	r22, r24
    4580:	79 1f       	adc	r23, r25
    4582:	68 54       	subi	r22, 0x48	; 72
    4584:	79 4f       	sbci	r23, 0xF9	; 249
    4586:	fb 01       	movw	r30, r22
    4588:	84 81       	ldd	r24, Z+4	; 0x04
    458a:	88 23       	and	r24, r24
    458c:	29 f0       	breq	.+10     	; 0x4598 <nrk_add_to_readyQ+0x64>
    FASTSPI_STROBE(CC2420_SXOSCON);
    458e:	93 85       	ldd	r25, Z+11	; 0x0b
    4590:	f9 01       	movw	r30, r18
    4592:	82 85       	ldd	r24, Z+10	; 0x0a
    4594:	98 17       	cp	r25, r24
    4596:	a8 f0       	brcs	.+42     	; 0x45c2 <nrk_add_to_readyQ+0x8e>
    nrk_spin_wait_us(OSC_STARTUP_DELAY);
    ENABLE_GLOBAL_INT();

    4598:	f9 01       	movw	r30, r18
    459a:	84 81       	ldd	r24, Z+4	; 0x04
    459c:	88 23       	and	r24, r24
    459e:	31 f0       	breq	.+12     	; 0x45ac <nrk_add_to_readyQ+0x78>
}
    45a0:	fb 01       	movw	r30, r22
    45a2:	92 85       	ldd	r25, Z+10	; 0x0a
    45a4:	f9 01       	movw	r30, r18
    45a6:	83 85       	ldd	r24, Z+11	; 0x0b
    45a8:	98 17       	cp	r25, r24
    45aa:	58 f0       	brcs	.+22     	; 0x45c2 <nrk_add_to_readyQ+0x8e>


// Returns 1 if the last packet was encrypted, 0 otherwise
    45ac:	fb 01       	movw	r30, r22
    45ae:	92 85       	ldd	r25, Z+10	; 0x0a
    45b0:	f9 01       	movw	r30, r18
    45b2:	82 85       	ldd	r24, Z+10	; 0x0a
    45b4:	98 17       	cp	r25, r24
    45b6:	28 f0       	brcs	.+10     	; 0x45c2 <nrk_add_to_readyQ+0x8e>
uint8_t rf_security_last_pkt_status()
{
return last_pkt_encrypted;
}
    45b8:	fd 01       	movw	r30, r26
    45ba:	a3 81       	ldd	r26, Z+3	; 0x03
    45bc:	b4 81       	ldd	r27, Z+4	; 0x04
    ENABLE_GLOBAL_INT();
}

void rf_power_up()
{

    45be:	10 97       	sbiw	r26, 0x00	; 0
    45c0:	b1 f6       	brne	.-84     	; 0x456e <nrk_add_to_readyQ+0x3a>
FASTSPI_WRITE_RAM(&counter[0],(CC2420RAM_TXNONCE+9),2,n); 
FASTSPI_WRITE_RAM(&counter[2],(CC2420RAM_TXNONCE+11),2,n); 
tx_ctr[0]=counter[0];
tx_ctr[1]=counter[1];
tx_ctr[2]=counter[2];
tx_ctr[3]=counter[3];
    45c2:	48 83       	st	Y, r20
}
    45c4:	e0 91 b6 06 	lds	r30, 0x06B6
    45c8:	f0 91 b7 06 	lds	r31, 0x06B7
    45cc:	23 81       	ldd	r18, Z+3	; 0x03
    45ce:	34 81       	ldd	r19, Z+4	; 0x04
    45d0:	30 93 b7 06 	sts	0x06B7, r19
    45d4:	20 93 b6 06 	sts	0x06B6, r18


    45d8:	80 91 4a 07 	lds	r24, 0x074A
    45dc:	90 91 4b 07 	lds	r25, 0x074B
    45e0:	a8 17       	cp	r26, r24
    45e2:	b9 07       	cpc	r27, r25
    45e4:	a1 f4       	brne	.+40     	; 0x460e <nrk_add_to_readyQ+0xda>
void rf_security_set_key(uint8_t *key)
{
    45e6:	10 97       	sbiw	r26, 0x00	; 0
    45e8:	31 f0       	breq	.+12     	; 0x45f6 <nrk_add_to_readyQ+0xc2>
uint8_t n,i;
    45ea:	bc 83       	std	Y+4, r27	; 0x04
    45ec:	ab 83       	std	Y+3, r26	; 0x03
uint16_t key_buf;
    45ee:	1a 82       	std	Y+2, r1	; 0x02
    45f0:	19 82       	std	Y+1, r1	; 0x01

    45f2:	fd 01       	movw	r30, r26
    45f4:	05 c0       	rjmp	.+10     	; 0x4600 <nrk_add_to_readyQ+0xcc>
// Set AES key
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
    45f6:	1c 82       	std	Y+4, r1	; 0x04
    45f8:	1b 82       	std	Y+3, r1	; 0x03
	{
    45fa:	1a 82       	std	Y+2, r1	; 0x02
    45fc:	19 82       	std	Y+1, r1	; 0x01
    	key_buf=(key[i]<<8)|key[i+1]; 
    45fe:	f9 01       	movw	r30, r18
    4600:	d2 83       	std	Z+2, r29	; 0x02
    4602:	c1 83       	std	Z+1, r28	; 0x01
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    4604:	d0 93 4b 07 	sts	0x074B, r29
    4608:	c0 93 4a 07 	sts	0x074A, r28
    460c:	17 c0       	rjmp	.+46     	; 0x463c <nrk_add_to_readyQ+0x108>
    460e:	fd 01       	movw	r30, r26
    4610:	81 81       	ldd	r24, Z+1	; 0x01
    4612:	92 81       	ldd	r25, Z+2	; 0x02
	}

// Set AES nonce to all zeros
nrk_spin_wait_us(100); 
    4614:	a2 17       	cp	r26, r18
    4616:	b3 07       	cpc	r27, r19
    4618:	51 f0       	breq	.+20     	; 0x462e <nrk_add_to_readyQ+0xfa>
for(i=0; i<7; i++ )
	{
    	key_buf=0; 
    461a:	9a 83       	std	Y+2, r25	; 0x02
    461c:	89 83       	std	Y+1, r24	; 0x01
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    461e:	bc 83       	std	Y+4, r27	; 0x04
    4620:	ab 83       	std	Y+3, r26	; 0x03
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
    4622:	81 81       	ldd	r24, Z+1	; 0x01
    4624:	92 81       	ldd	r25, Z+2	; 0x02
    4626:	fc 01       	movw	r30, r24
    4628:	d4 83       	std	Z+4, r29	; 0x04
    462a:	c3 83       	std	Z+3, r28	; 0x03
    462c:	04 c0       	rjmp	.+8      	; 0x4636 <nrk_add_to_readyQ+0x102>
	}
	// block counter set 1
    	key_buf=1; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
    462e:	1c 82       	std	Y+4, r1	; 0x04
    4630:	1b 82       	std	Y+3, r1	; 0x03
}
    4632:	9a 83       	std	Y+2, r25	; 0x02
    4634:	89 83       	std	Y+1, r24	; 0x01

    4636:	fd 01       	movw	r30, r26
    4638:	d2 83       	std	Z+2, r29	; 0x02
    463a:	c1 83       	std	Z+1, r28	; 0x01
    463c:	df 91       	pop	r29
    463e:	cf 91       	pop	r28
    4640:	08 95       	ret

00004642 <nrk_rem_from_readyQ>:
    FASTSPI_SETREG(CC2420_SECCTRL1, 0x0e0e); // Encrypt / Decrypt 18 bytes into header

security_enable=1;
}


    4642:	cf 93       	push	r28
    4644:	df 93       	push	r29
    tmp=tmp | (pwr&0x1F);  
    FASTSPI_SETREG(CC2420_TXCTRL, tmp);   // Set the FIFOP threshold to maximum
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
}
    4646:	a0 91 4a 07 	lds	r26, 0x074A
    464a:	b0 91 4b 07 	lds	r27, 0x074B
    464e:	10 97       	sbiw	r26, 0x00	; 0
    4650:	09 f4       	brne	.+2      	; 0x4654 <nrk_rem_from_readyQ+0x12>
    4652:	46 c0       	rjmp	.+140    	; 0x46e0 <nrk_rem_from_readyQ+0x9e>
void rf_set_channel( uint8_t channel )
{
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    4654:	48 2f       	mov	r20, r24
    4656:	55 27       	eor	r21, r21
    4658:	47 fd       	sbrc	r20, 7
    465a:	50 95       	com	r21
    465c:	8c 91       	ld	r24, X
    465e:	99 27       	eor	r25, r25
    4660:	84 17       	cp	r24, r20
    4662:	95 07       	cpc	r25, r21
    4664:	69 f4       	brne	.+26     	; 0x4680 <nrk_rem_from_readyQ+0x3e>
    halRfSetChannel(channel);
#ifdef RADIO_PRIORITY_CEILING
    4666:	ed 01       	movw	r28, r26
    4668:	eb 81       	ldd	r30, Y+3	; 0x03
    466a:	fc 81       	ldd	r31, Y+4	; 0x04
    466c:	f0 93 4b 07 	sts	0x074B, r31
    4670:	e0 93 4a 07 	sts	0x074A, r30
    nrk_sem_post(radio_sem);
    4674:	12 82       	std	Z+2, r1	; 0x02
    4676:	11 82       	std	Z+1, r1	; 0x01
    4678:	16 c0       	rjmp	.+44     	; 0x46a6 <nrk_rem_from_readyQ+0x64>
#endif
}


    467a:	d9 01       	movw	r26, r18
    halRfSetChannel(channel);
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
}

    467c:	23 2b       	or	r18, r19
    467e:	81 f1       	breq	.+96     	; 0x46e0 <nrk_rem_from_readyQ+0x9e>
    4680:	8c 91       	ld	r24, X
    4682:	99 27       	eor	r25, r25
    4684:	fd 01       	movw	r30, r26
    4686:	23 81       	ldd	r18, Z+3	; 0x03
    4688:	34 81       	ldd	r19, Z+4	; 0x04
    468a:	84 17       	cp	r24, r20
    468c:	95 07       	cpc	r25, r21
    468e:	a9 f7       	brne	.-22     	; 0x467a <nrk_rem_from_readyQ+0x38>

void rf_addr_decode_enable()
{
    mdmctrl0 |= 0x0800;
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
}
    4690:	c1 81       	ldd	r28, Z+1	; 0x01
    4692:	d2 81       	ldd	r29, Z+2	; 0x02
    4694:	3c 83       	std	Y+4, r19	; 0x04
    4696:	2b 83       	std	Y+3, r18	; 0x03

    4698:	83 81       	ldd	r24, Z+3	; 0x03
    469a:	94 81       	ldd	r25, Z+4	; 0x04
    469c:	00 97       	sbiw	r24, 0x00	; 0
    469e:	19 f0       	breq	.+6      	; 0x46a6 <nrk_rem_from_readyQ+0x64>
void rf_addr_decode_disable()
    46a0:	fc 01       	movw	r30, r24
    46a2:	d2 83       	std	Z+2, r29	; 0x02
    46a4:	c1 83       	std	Z+1, r28	; 0x01
    mdmctrl0 &= (~0x0800);
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
}


void rf_auto_ack_enable()
    46a6:	e0 91 b6 06 	lds	r30, 0x06B6
    46aa:	f0 91 b7 06 	lds	r31, 0x06B7
    46ae:	30 97       	sbiw	r30, 0x00	; 0
    46b0:	41 f4       	brne	.+16     	; 0x46c2 <nrk_rem_from_readyQ+0x80>
{
    46b2:	b0 93 b7 06 	sts	0x06B7, r27
    46b6:	a0 93 b6 06 	sts	0x06B6, r26
    auto_ack_enable=1;
    46ba:	ed 01       	movw	r28, r26
    46bc:	1c 82       	std	Y+4, r1	; 0x04
    46be:	1b 82       	std	Y+3, r1	; 0x03
    46c0:	09 c0       	rjmp	.+18     	; 0x46d4 <nrk_rem_from_readyQ+0x92>
    mdmctrl0 |= 0x0010;
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0); 
}
    46c2:	ed 01       	movw	r28, r26
    46c4:	fc 83       	std	Y+4, r31	; 0x04
    46c6:	eb 83       	std	Y+3, r30	; 0x03

    46c8:	b2 83       	std	Z+2, r27	; 0x02
    46ca:	a1 83       	std	Z+1, r26	; 0x01
void rf_auto_ack_disable()
    46cc:	b0 93 b7 06 	sts	0x06B7, r27
    46d0:	a0 93 b6 06 	sts	0x06B6, r26
{
    auto_ack_enable=0;
    46d4:	e0 91 b6 06 	lds	r30, 0x06B6
    46d8:	f0 91 b7 06 	lds	r31, 0x06B7
    46dc:	12 82       	std	Z+2, r1	; 0x02
    46de:	11 82       	std	Z+1, r1	; 0x01
    46e0:	df 91       	pop	r29
    46e2:	cf 91       	pop	r28
    46e4:	08 95       	ret

000046e6 <nrk_get_pid>:
    ENABLE_GLOBAL_INT();
	nrk_clr_led(3);
*/
/*
    // Turn on RX if necessary
    if (!rfSettings.receiveOn) {
    46e6:	e0 91 55 07 	lds	r30, 0x0755
    46ea:	f0 91 56 07 	lds	r31, 0x0756
    46ee:	80 85       	ldd	r24, Z+8	; 0x08
		FASTSPI_STROBE(CC2420_SRXON);
		}
    46f0:	99 27       	eor	r25, r25
    46f2:	08 95       	ret

000046f4 <_nrk_wait_for_scheduler>:
    checksum=0;
    for(i=0; i<pRTI->length; i++ )
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
    }
    46f4:	0e 94 aa 2f 	call	0x5f54	; 0x5f54 <nrk_idle>
    packetLength = pRTI->length + RF_PACKET_OVERHEAD_SIZE + CHECKSUM_OVERHEAD;
    46f8:	e0 91 55 07 	lds	r30, 0x0755
    46fc:	f0 91 56 07 	lds	r31, 0x0756
    4700:	85 81       	ldd	r24, Z+5	; 0x05
    4702:	88 23       	and	r24, r24
    4704:	b9 f7       	brne	.-18     	; 0x46f4 <_nrk_wait_for_scheduler>
    4706:	08 95       	ret

00004708 <nrk_wait>:
#endif
    //	DISABLE_FIFOP_INT();
} // rf_rx_off() 


/**************************************************************************
    4708:	ff 92       	push	r15
    470a:	0f 93       	push	r16
    470c:	1f 93       	push	r17
    470e:	cf 93       	push	r28
    4710:	df 93       	push	r29
    4712:	cd b7       	in	r28, 0x3d	; 61
    4714:	de b7       	in	r29, 0x3e	; 62
    4716:	28 97       	sbiw	r28, 0x08	; 8
    4718:	0f b6       	in	r0, 0x3f	; 63
    471a:	f8 94       	cli
    471c:	de bf       	out	0x3e, r29	; 62
    471e:	0f be       	out	0x3f, r0	; 63
    4720:	cd bf       	out	0x3d, r28	; 61
    4722:	29 83       	std	Y+1, r18	; 0x01
    4724:	3a 83       	std	Y+2, r19	; 0x02
    4726:	4b 83       	std	Y+3, r20	; 0x03
    4728:	5c 83       	std	Y+4, r21	; 0x04
    472a:	6d 83       	std	Y+5, r22	; 0x05
    472c:	7e 83       	std	Y+6, r23	; 0x06
    472e:	8f 83       	std	Y+7, r24	; 0x07
    4730:	98 87       	std	Y+8, r25	; 0x08
This function is the same as normal TX, only it waits until the last
second to send the duty out with the high speed timer.  And by duty, I mean
the packet BIATCH...
**************************************************************************/
    4732:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <nrk_stack_check>
uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
	uint16_t frameControlField;
    4736:	0e 94 33 1a 	call	0x3466	; 0x3466 <nrk_int_disable>
    	uint8_t packetLength;
    473a:	e0 91 55 07 	lds	r30, 0x0755
    473e:	f0 91 56 07 	lds	r31, 0x0756
    4742:	81 e0       	ldi	r24, 0x01	; 1
    4744:	85 83       	std	Z+5, r24	; 0x05
    	uint8_t success;
    4746:	81 e0       	ldi	r24, 0x01	; 1
    4748:	90 e0       	ldi	r25, 0x00	; 0
    474a:	90 a3       	std	Z+32, r25	; 0x20
    474c:	87 8f       	std	Z+31, r24	; 0x1f
    	uint8_t spiStatusByte;
    474e:	0e 94 ca 2c 	call	0x5994	; 0x5994 <_nrk_os_timer_get>
    4752:	f8 2e       	mov	r15, r24
   	uint8_t checksum,i;
	uint8_t timestamp;

#ifdef RADIO_PRIORITY_CEILING
    4754:	ce 01       	movw	r24, r28
    4756:	01 96       	adiw	r24, 0x01	; 1
    4758:	0e 94 da 26 	call	0x4db4	; 0x4db4 <_nrk_time_to_ticks>
nrk_sem_pend (radio_sem);
#endif
    475c:	e0 91 55 07 	lds	r30, 0x0755
    4760:	f0 91 56 07 	lds	r31, 0x0756
    4764:	0f 2d       	mov	r16, r15
    4766:	11 27       	eor	r17, r17
    4768:	80 0f       	add	r24, r16
    476a:	91 1f       	adc	r25, r17
    476c:	96 8b       	std	Z+22, r25	; 0x16
    476e:	85 8b       	std	Z+21, r24	; 0x15
	timestamp=_nrk_os_timer_get();
	// XXX 2 below are hacks...
    4770:	87 ef       	ldi	r24, 0xF7	; 247
    4772:	8f 15       	cp	r24, r15
    4774:	70 f0       	brcs	.+28     	; 0x4792 <nrk_wait+0x8a>
#ifdef CC2420_OSC_OPT
	FASTSPI_STROBE(CC2420_SXOSCON);
    4776:	0e 94 56 2c 	call	0x58ac	; 0x58ac <_nrk_get_next_wakeup>
    477a:	0e 5f       	subi	r16, 0xFE	; 254
    477c:	1f 4f       	sbci	r17, 0xFF	; 255
    477e:	99 27       	eor	r25, r25
    4780:	80 17       	cp	r24, r16
    4782:	91 07       	cpc	r25, r17
    4784:	34 f0       	brlt	.+12     	; 0x4792 <nrk_wait+0x8a>
	nrk_spin_wait_us(OSC_STARTUP_DELAY);
    4786:	8f 2d       	mov	r24, r15
    4788:	8e 5f       	subi	r24, 0xFE	; 254
#endif
    478a:	80 93 9a 06 	sts	0x069A, r24
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    478e:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <_nrk_set_next_wakeup>
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    // Wait until the transceiver is idle
     while (FIFOP_IS_1 || SFD_IS_1);
    4792:	0e 94 35 1a 	call	0x346a	; 0x346a <nrk_int_enable>
    // Turn off global interrupts to avoid interference on the SPI interface
      DISABLE_GLOBAL_INT();
    4796:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <_nrk_wait_for_scheduler>
	// Flush the TX FIFO just in case...
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    479a:	81 e0       	ldi	r24, 0x01	; 1
    479c:	90 e0       	ldi	r25, 0x00	; 0
    479e:	28 96       	adiw	r28, 0x08	; 8
    47a0:	0f b6       	in	r0, 0x3f	; 63
    47a2:	f8 94       	cli
    47a4:	de bf       	out	0x3e, r29	; 62
    47a6:	0f be       	out	0x3f, r0	; 63
    47a8:	cd bf       	out	0x3d, r28	; 61
    47aa:	df 91       	pop	r29
    47ac:	cf 91       	pop	r28
    47ae:	1f 91       	pop	r17
    47b0:	0f 91       	pop	r16
    47b2:	ff 90       	pop	r15
    47b4:	08 95       	ret

000047b6 <nrk_wait_until>:
    //do { } while(_nrk_get_high_speed_timer()<(tx_guard_time));
    
    // Write the packet to the TX FIFO (the FCS is appended automatically when AUTOCRC is enabled)
    // These are only the MAC AGNOSTIC parameters...
    // Slots for example are at a higher layer since they assume TDMA
    
    47b6:	8f 92       	push	r8
    47b8:	9f 92       	push	r9
    47ba:	af 92       	push	r10
    47bc:	bf 92       	push	r11
    47be:	cf 92       	push	r12
    47c0:	df 92       	push	r13
    47c2:	ef 92       	push	r14
    47c4:	ff 92       	push	r15
    47c6:	0f 93       	push	r16
    47c8:	1f 93       	push	r17
    47ca:	cf 93       	push	r28
    47cc:	df 93       	push	r29
    47ce:	cd b7       	in	r28, 0x3d	; 61
    47d0:	de b7       	in	r29, 0x3e	; 62
    47d2:	60 97       	sbiw	r28, 0x10	; 16
    47d4:	0f b6       	in	r0, 0x3f	; 63
    47d6:	f8 94       	cli
    47d8:	de bf       	out	0x3e, r29	; 62
    47da:	0f be       	out	0x3f, r0	; 63
    47dc:	cd bf       	out	0x3d, r28	; 61
    47de:	29 87       	std	Y+9, r18	; 0x09
    47e0:	3a 87       	std	Y+10, r19	; 0x0a
    47e2:	4b 87       	std	Y+11, r20	; 0x0b
    47e4:	5c 87       	std	Y+12, r21	; 0x0c
    47e6:	6d 87       	std	Y+13, r22	; 0x0d
    47e8:	7e 87       	std	Y+14, r23	; 0x0e
    47ea:	8f 87       	std	Y+15, r24	; 0x0f
    47ec:	98 8b       	std	Y+16, r25	; 0x10
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.myAddr, 2);         // Source address

    nrk_high_speed_timer_wait(slot_start_time,tx_guard_time);
    //nrk_clr_led(3);
    47ee:	ce 01       	movw	r24, r28
    47f0:	01 96       	adiw	r24, 0x01	; 1
    47f2:	0e 94 07 28 	call	0x500e	; 0x500e <nrk_time_get>
    /*
	DISABLE_GLOBAL_INT();
    47f6:	89 80       	ldd	r8, Y+1	; 0x01
    47f8:	9a 80       	ldd	r9, Y+2	; 0x02
    47fa:	ab 80       	ldd	r10, Y+3	; 0x03
    47fc:	bc 80       	ldd	r11, Y+4	; 0x04
    47fe:	cd 80       	ldd	r12, Y+5	; 0x05
    4800:	de 80       	ldd	r13, Y+6	; 0x06
    4802:	ef 80       	ldd	r14, Y+7	; 0x07
    4804:	f8 84       	ldd	r15, Y+8	; 0x08
    4806:	09 85       	ldd	r16, Y+9	; 0x09
    4808:	1a 85       	ldd	r17, Y+10	; 0x0a
    480a:	2b 85       	ldd	r18, Y+11	; 0x0b
    480c:	3c 85       	ldd	r19, Y+12	; 0x0c
    480e:	4d 85       	ldd	r20, Y+13	; 0x0d
    4810:	5e 85       	ldd	r21, Y+14	; 0x0e
    4812:	6f 85       	ldd	r22, Y+15	; 0x0f
    4814:	78 89       	ldd	r23, Y+16	; 0x10
    4816:	ce 01       	movw	r24, r28
    4818:	09 96       	adiw	r24, 0x09	; 9
    481a:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <nrk_time_sub>
     nrk_set_led(3);
    last=0;
    481e:	8f 3f       	cpi	r24, 0xFF	; 255
    4820:	19 f4       	brne	.+6      	; 0x4828 <nrk_wait_until+0x72>
    4822:	8f ef       	ldi	r24, 0xFF	; 255
    4824:	9f ef       	ldi	r25, 0xFF	; 255
    4826:	0c c0       	rjmp	.+24     	; 0x4840 <nrk_wait_until+0x8a>
		//printf( "TX ERROR %d vs %d\r\n",_nrk_get_high_speed_timer(),tx_guard_time );
		break;
		}	
	last=_nrk_get_high_speed_timer();
	}
	while((volatile)last<(tx_guard_time));
    4828:	29 85       	ldd	r18, Y+9	; 0x09
    482a:	3a 85       	ldd	r19, Y+10	; 0x0a
    482c:	4b 85       	ldd	r20, Y+11	; 0x0b
    482e:	5c 85       	ldd	r21, Y+12	; 0x0c
    4830:	6d 85       	ldd	r22, Y+13	; 0x0d
    4832:	7e 85       	ldd	r23, Y+14	; 0x0e
    4834:	8f 85       	ldd	r24, Y+15	; 0x0f
    4836:	98 89       	ldd	r25, Y+16	; 0x10
    4838:	0e 94 84 23 	call	0x4708	; 0x4708 <nrk_wait>
    483c:	81 e0       	ldi	r24, 0x01	; 1
    483e:	90 e0       	ldi	r25, 0x00	; 0
    4840:	60 96       	adiw	r28, 0x10	; 16
    4842:	0f b6       	in	r0, 0x3f	; 63
    4844:	f8 94       	cli
    4846:	de bf       	out	0x3e, r29	; 62
    4848:	0f be       	out	0x3f, r0	; 63
    484a:	cd bf       	out	0x3d, r28	; 61
    484c:	df 91       	pop	r29
    484e:	cf 91       	pop	r28
    4850:	1f 91       	pop	r17
    4852:	0f 91       	pop	r16
    4854:	ff 90       	pop	r15
    4856:	ef 90       	pop	r14
    4858:	df 90       	pop	r13
    485a:	cf 90       	pop	r12
    485c:	bf 90       	pop	r11
    485e:	af 90       	pop	r10
    4860:	9f 90       	pop	r9
    4862:	8f 90       	pop	r8
    4864:	08 95       	ret

00004866 <nrk_wait_until_nw>:


//-------------------------------------------------------------------------------------------------------
//  void rf_rx_off(void)
//
//  DESCRIPTION:
    4866:	1f 93       	push	r17
//      Disables the CC2420 receiver and the FIFOP interrupt.
//-------------------------------------------------------------------------------------------------------
    4868:	0e 94 33 1a 	call	0x3466	; 0x3466 <nrk_int_disable>
void rf_rx_off(void) {
    486c:	e0 91 55 07 	lds	r30, 0x0755
    4870:	f0 91 56 07 	lds	r31, 0x0756
    4874:	81 e0       	ldi	r24, 0x01	; 1
    4876:	85 83       	std	Z+5, r24	; 0x05
#ifdef RADIO_PRIORITY_CEILING
    4878:	86 83       	std	Z+6, r24	; 0x06
    nrk_sem_pend (radio_sem);
    487a:	0e 94 ca 2c 	call	0x5994	; 0x5994 <_nrk_os_timer_get>
    487e:	18 2f       	mov	r17, r24
#endif
	// XXX
    4880:	88 3f       	cpi	r24, 0xF8	; 248
    4882:	80 f4       	brcc	.+32     	; 0x48a4 <nrk_wait_until_nw+0x3e>
    	//SET_VREG_INACTIVE();	
    4884:	0e 94 56 2c 	call	0x58ac	; 0x58ac <_nrk_get_next_wakeup>
    4888:	21 2f       	mov	r18, r17
    488a:	33 27       	eor	r19, r19
    488c:	2e 5f       	subi	r18, 0xFE	; 254
    488e:	3f 4f       	sbci	r19, 0xFF	; 255
    4890:	99 27       	eor	r25, r25
    4892:	82 17       	cp	r24, r18
    4894:	93 07       	cpc	r25, r19
    4896:	34 f0       	brlt	.+12     	; 0x48a4 <nrk_wait_until_nw+0x3e>
	rfSettings.receiveOn = FALSE;
    4898:	81 2f       	mov	r24, r17
    489a:	8e 5f       	subi	r24, 0xFE	; 254
	FASTSPI_STROBE(CC2420_SRFOFF);
    489c:	80 93 9a 06 	sts	0x069A, r24
#ifdef CC2420_OSC_OPT
    48a0:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <_nrk_set_next_wakeup>
	FASTSPI_STROBE(CC2420_SXOSCOFF);
#endif
	rx_ready=0;
    48a4:	0e 94 35 1a 	call	0x346a	; 0x346a <nrk_int_enable>
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    48a8:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <_nrk_wait_for_scheduler>
#endif
    //	DISABLE_FIFOP_INT();
    48ac:	81 e0       	ldi	r24, 0x01	; 1
    48ae:	90 e0       	ldi	r25, 0x00	; 0
    48b0:	1f 91       	pop	r17
    48b2:	08 95       	ret

000048b4 <nrk_set_next_wakeup>:
    nrk_sem_post(radio_sem);
#endif
    //	ENABLE_FIFOP_INT();
} // rf_rx_on() 

void rf_polling_rx_on(void) {
    48b4:	1f 93       	push	r17
    48b6:	cf 93       	push	r28
    48b8:	df 93       	push	r29
    48ba:	cd b7       	in	r28, 0x3d	; 61
    48bc:	de b7       	in	r29, 0x3e	; 62
    48be:	28 97       	sbiw	r28, 0x08	; 8
    48c0:	0f b6       	in	r0, 0x3f	; 63
    48c2:	f8 94       	cli
    48c4:	de bf       	out	0x3e, r29	; 62
    48c6:	0f be       	out	0x3f, r0	; 63
    48c8:	cd bf       	out	0x3d, r28	; 61
    48ca:	29 83       	std	Y+1, r18	; 0x01
    48cc:	3a 83       	std	Y+2, r19	; 0x02
    48ce:	4b 83       	std	Y+3, r20	; 0x03
    48d0:	5c 83       	std	Y+4, r21	; 0x04
    48d2:	6d 83       	std	Y+5, r22	; 0x05
    48d4:	7e 83       	std	Y+6, r23	; 0x06
    48d6:	8f 83       	std	Y+7, r24	; 0x07
    48d8:	98 87       	std	Y+8, r25	; 0x08
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    48da:	0e 94 33 1a 	call	0x3466	; 0x3466 <nrk_int_disable>
    	rfSettings.receiveOn = TRUE;
    48de:	0e 94 ca 2c 	call	0x5994	; 0x5994 <_nrk_os_timer_get>
    48e2:	18 2f       	mov	r17, r24
#ifdef CC2420_OSC_OPT
    48e4:	ce 01       	movw	r24, r28
    48e6:	01 96       	adiw	r24, 0x01	; 1
    48e8:	0e 94 da 26 	call	0x4db4	; 0x4db4 <_nrk_time_to_ticks>
	FASTSPI_STROBE(CC2420_SXOSCON);
    48ec:	83 30       	cpi	r24, 0x03	; 3
    48ee:	91 05       	cpc	r25, r1
    48f0:	18 f4       	brcc	.+6      	; 0x48f8 <nrk_set_next_wakeup+0x44>
    48f2:	8f ef       	ldi	r24, 0xFF	; 255
    48f4:	9f ef       	ldi	r25, 0xFF	; 255
    48f6:	0c c0       	rjmp	.+24     	; 0x4910 <nrk_set_next_wakeup+0x5c>
	nrk_spin_wait_us(OSC_STARTUP_DELAY);
#endif
    48f8:	e0 91 55 07 	lds	r30, 0x0755
    48fc:	f0 91 56 07 	lds	r31, 0x0756
    4900:	81 0f       	add	r24, r17
    4902:	91 1d       	adc	r25, r1
    4904:	96 8b       	std	Z+22, r25	; 0x16
    4906:	85 8b       	std	Z+21, r24	; 0x15
    nrk_sem_post(radio_sem);
#endif
} // rf_rx_on() 


/**********************************************************
    4908:	0e 94 35 1a 	call	0x346a	; 0x346a <nrk_int_enable>
    490c:	81 e0       	ldi	r24, 0x01	; 1
    490e:	90 e0       	ldi	r25, 0x00	; 0
    4910:	28 96       	adiw	r28, 0x08	; 8
    4912:	0f b6       	in	r0, 0x3f	; 63
    4914:	f8 94       	cli
    4916:	de bf       	out	0x3e, r29	; 62
    4918:	0f be       	out	0x3f, r0	; 63
    491a:	cd bf       	out	0x3d, r28	; 61
    491c:	df 91       	pop	r29
    491e:	cf 91       	pop	r28
    4920:	1f 91       	pop	r17
    4922:	08 95       	ret

00004924 <nrk_wait_until_ticks>:

//-------------------------------------------------------------------------------------------------------
//  void rf_rx_on(void)
//
//  DESCRIPTION:
//      Enables the CC2420 receiver and the FIFOP interrupt. When a packet is received through this
    4924:	0f 93       	push	r16
    4926:	1f 93       	push	r17
    4928:	8c 01       	movw	r16, r24
//      interrupt, it will call rf_rx_callback(...), which must be defined by the application
//-------------------------------------------------------------------------------------------------------
    492a:	0e 94 33 1a 	call	0x3466	; 0x3466 <nrk_int_disable>
void rf_rx_on(void) {
    492e:	e0 91 55 07 	lds	r30, 0x0755
    4932:	f0 91 56 07 	lds	r31, 0x0756
    4936:	81 e0       	ldi	r24, 0x01	; 1
    4938:	85 83       	std	Z+5, r24	; 0x05
#ifdef RADIO_PRIORITY_CEILING
    493a:	16 8b       	std	Z+22, r17	; 0x16
    493c:	05 8b       	std	Z+21, r16	; 0x15
    nrk_sem_pend (radio_sem);
#endif
    493e:	0e 94 ca 2c 	call	0x5994	; 0x5994 <_nrk_os_timer_get>
    4942:	08 2f       	mov	r16, r24
    	rfSettings.receiveOn = TRUE;

    4944:	88 3f       	cpi	r24, 0xF8	; 248
    4946:	80 f4       	brcc	.+32     	; 0x4968 <nrk_wait_until_ticks+0x44>
#ifdef CC2420_OSC_OPT
    4948:	0e 94 56 2c 	call	0x58ac	; 0x58ac <_nrk_get_next_wakeup>
    494c:	20 2f       	mov	r18, r16
    494e:	33 27       	eor	r19, r19
    4950:	2e 5f       	subi	r18, 0xFE	; 254
    4952:	3f 4f       	sbci	r19, 0xFF	; 255
    4954:	99 27       	eor	r25, r25
    4956:	82 17       	cp	r24, r18
    4958:	93 07       	cpc	r25, r19
    495a:	34 f0       	brlt	.+12     	; 0x4968 <nrk_wait_until_ticks+0x44>
	FASTSPI_STROBE(CC2420_SXOSCON);
    495c:	80 2f       	mov	r24, r16
    495e:	8e 5f       	subi	r24, 0xFE	; 254
	nrk_spin_wait_us(OSC_STARTUP_DELAY);
    4960:	80 93 9a 06 	sts	0x069A, r24
#endif
    4964:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <_nrk_set_next_wakeup>
	FASTSPI_STROBE(CC2420_SRXON);
	FASTSPI_STROBE(CC2420_SFLUSHRX);
	rx_ready=0;
    4968:	0e 94 35 1a 	call	0x346a	; 0x346a <nrk_int_enable>
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    496c:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <_nrk_wait_for_scheduler>
#endif
    //	ENABLE_FIFOP_INT();
    4970:	81 e0       	ldi	r24, 0x01	; 1
    4972:	90 e0       	ldi	r25, 0x00	; 0
    4974:	1f 91       	pop	r17
    4976:	0f 91       	pop	r16
    4978:	08 95       	ret

0000497a <nrk_wait_ticks>:
    // Turn interrupts back on
	ENABLE_GLOBAL_INT();

	// Set the protocol configuration
	rfSettings.pRxInfo = pRRI;
	rfSettings.panId = panId;
    497a:	ff 92       	push	r15
    497c:	0f 93       	push	r16
    497e:	1f 93       	push	r17
    4980:	cf 93       	push	r28
    4982:	df 93       	push	r29
    4984:	8c 01       	movw	r16, r24
	rfSettings.myAddr = myAddr;
	rfSettings.txSeqNumber = 0;
    4986:	0e 94 33 1a 	call	0x3466	; 0x3466 <nrk_int_disable>
        rfSettings.receiveOn = FALSE;
    498a:	e0 91 55 07 	lds	r30, 0x0755
    498e:	f0 91 56 07 	lds	r31, 0x0756
    4992:	81 e0       	ldi	r24, 0x01	; 1
    4994:	85 83       	std	Z+5, r24	; 0x05

    4996:	0e 94 ca 2c 	call	0x5994	; 0x5994 <_nrk_os_timer_get>
    499a:	f8 2e       	mov	r15, r24
	// Wait for the crystal oscillator to become stable
    499c:	e0 91 55 07 	lds	r30, 0x0755
    49a0:	f0 91 56 07 	lds	r31, 0x0756
    49a4:	c8 2f       	mov	r28, r24
    49a6:	dd 27       	eor	r29, r29
    49a8:	0c 0f       	add	r16, r28
    49aa:	1d 1f       	adc	r17, r29
    49ac:	16 8b       	std	Z+22, r17	; 0x16
    49ae:	05 8b       	std	Z+21, r16	; 0x15
    halRfWaitForCrystalOscillator();

    49b0:	87 ef       	ldi	r24, 0xF7	; 247
    49b2:	8f 15       	cp	r24, r15
    49b4:	68 f0       	brcs	.+26     	; 0x49d0 <nrk_wait_ticks+0x56>
	// Write the short address and the PAN ID to the CC2420 RAM (requires that the XOSC is on and stable)
    49b6:	0e 94 56 2c 	call	0x58ac	; 0x58ac <_nrk_get_next_wakeup>
    49ba:	22 96       	adiw	r28, 0x02	; 2
    49bc:	99 27       	eor	r25, r25
    49be:	8c 17       	cp	r24, r28
    49c0:	9d 07       	cpc	r25, r29
    49c2:	34 f0       	brlt	.+12     	; 0x49d0 <nrk_wait_ticks+0x56>
   //	DISABLE_GLOBAL_INT();
    49c4:	8f 2d       	mov	r24, r15
    49c6:	8e 5f       	subi	r24, 0xFE	; 254
//    FASTSPI_WRITE_RAM_LE(&myAddr, CC2420RAM_SHORTADDR, 2, n);
    49c8:	80 93 9a 06 	sts	0x069A, r24
//    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
    49cc:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <_nrk_set_next_wakeup>
  //	ENABLE_GLOBAL_INT();

#ifdef RADIO_PRIORITY_CEILING
    49d0:	0e 94 35 1a 	call	0x346a	; 0x346a <nrk_int_enable>
  v = nrk_sem_post (radio_sem);
  if (v == NRK_ERROR) {
    49d4:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <_nrk_wait_for_scheduler>
    nrk_kprintf (PSTR ("CC2420 ERROR:  Release of semaphore failed\r\n"));
    _nrk_errno_set (2);
    49d8:	81 e0       	ldi	r24, 0x01	; 1
    49da:	90 e0       	ldi	r25, 0x00	; 0
    49dc:	df 91       	pop	r29
    49de:	cf 91       	pop	r28
    49e0:	1f 91       	pop	r17
    49e2:	0f 91       	pop	r16
    49e4:	ff 90       	pop	r15
    49e6:	08 95       	ret

000049e8 <nrk_wait_until_next_n_periods>:
    FASTSPI_STROBE(CC2420_SXOSCON);
    mdmctrl0=0x02E2;
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  // Std Preamble, CRC, no auto ack, no hw addr decoding 
    //FASTSPI_SETREG(CC2420_MDMCTRL0, 0x0AF2);  // Turn on automatic packet acknowledgment
						// Turn on hw addre decoding 
    FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0500); // Set the correlation threshold = 20
    49e8:	1f 93       	push	r17
    49ea:	cf 93       	push	r28
    49ec:	df 93       	push	r29
    49ee:	ec 01       	movw	r28, r24
    FASTSPI_SETREG(CC2420_IOCFG0, 0x007F);   // Set the FIFOP threshold to maximum
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security"
    FASTSPI_SETREG(CC2420_RXCTRL1, 0x1A56); // All default except
    49f0:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <nrk_stack_check>
					    // reference bias current to RX
					    // bandpass filter is set to 3uA 
    49f4:	20 97       	sbiw	r28, 0x00	; 0
    49f6:	11 f4       	brne	.+4      	; 0x49fc <nrk_wait_until_next_n_periods+0x14>
    49f8:	c1 e0       	ldi	r28, 0x01	; 1
    49fa:	d0 e0       	ldi	r29, 0x00	; 0

/*
    // FIXME: remove later for auto ack
    49fc:	0e 94 33 1a 	call	0x3466	; 0x3466 <nrk_int_disable>
    myAddr=MY_MAC;
    4a00:	e0 91 55 07 	lds	r30, 0x0755
    4a04:	f0 91 56 07 	lds	r31, 0x0756
    4a08:	81 e0       	ldi	r24, 0x01	; 1
    4a0a:	85 83       	std	Z+5, r24	; 0x05
    panId=0x02;
    4a0c:	d0 a3       	std	Z+32, r29	; 0x20
    4a0e:	c7 8f       	std	Z+31, r28	; 0x1f
    FASTSPI_SETREG(CC2420_MDMCTRL0, 0x0AF2);  // Turn on automatic packet acknowledgment
    4a10:	0e 94 ca 2c 	call	0x5994	; 0x5994 <_nrk_os_timer_get>
    4a14:	18 2f       	mov	r17, r24
//    FASTSPI_SETREG(CC2420_MDMCTRL0, 0x0AE2);  // Turn on automatic packet acknowledgment
    nrk_spin_wait_us(500);
    nrk_spin_wait_us(500);
    FASTSPI_WRITE_RAM_LE(&myAddr, CC2420RAM_SHORTADDR, 2, n);
    nrk_spin_wait_us(500);
    4a16:	88 3f       	cpi	r24, 0xF8	; 248
    4a18:	80 f4       	brcc	.+32     	; 0x4a3a <nrk_wait_until_next_n_periods+0x52>
    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
    4a1a:	0e 94 56 2c 	call	0x58ac	; 0x58ac <_nrk_get_next_wakeup>
    4a1e:	21 2f       	mov	r18, r17
    4a20:	33 27       	eor	r19, r19
    4a22:	2e 5f       	subi	r18, 0xFE	; 254
    4a24:	3f 4f       	sbci	r19, 0xFF	; 255
    4a26:	99 27       	eor	r25, r25
    4a28:	82 17       	cp	r24, r18
    4a2a:	93 07       	cpc	r25, r19
    4a2c:	34 f0       	brlt	.+12     	; 0x4a3a <nrk_wait_until_next_n_periods+0x52>
    nrk_spin_wait_us(500);
    4a2e:	81 2f       	mov	r24, r17
    4a30:	8e 5f       	subi	r24, 0xFE	; 254
    
    4a32:	80 93 9a 06 	sts	0x069A, r24
   printf( "myAddr=%d\r\n",myAddr );
    4a36:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <_nrk_set_next_wakeup>
*/

    nrk_spin_wait_us(500);
    4a3a:	0e 94 35 1a 	call	0x346a	; 0x346a <nrk_int_enable>
    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
    4a3e:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <_nrk_wait_for_scheduler>
    nrk_spin_wait_us(500);

    4a42:	81 e0       	ldi	r24, 0x01	; 1
    4a44:	90 e0       	ldi	r25, 0x00	; 0
    4a46:	df 91       	pop	r29
    4a48:	cf 91       	pop	r28
    4a4a:	1f 91       	pop	r17
    4a4c:	08 95       	ret

00004a4e <nrk_wait_until_next_period>:
    radio_sem = nrk_sem_create(1,RADIO_PRIORITY_CEILING);
    if (radio_sem == NULL)
      nrk_kernel_error_add (NRK_SEMAPHORE_CREATE_ERROR, nrk_get_pid ());

  v = nrk_sem_pend (radio_sem);
  if (v == NRK_ERROR) {
    4a4e:	1f 93       	push	r17
    nrk_kprintf (PSTR ("CC2420 ERROR:  Access to semaphore failed\r\n"));
  }
#endif
    4a50:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <nrk_stack_check>

    // Make sure that the voltage regulator is on, and that the reset pin is inactive
    4a54:	0e 94 33 1a 	call	0x3466	; 0x3466 <nrk_int_disable>
    SET_VREG_ACTIVE();
    4a58:	e0 91 55 07 	lds	r30, 0x0755
    4a5c:	f0 91 56 07 	lds	r31, 0x0756
    4a60:	81 e0       	ldi	r24, 0x01	; 1
    4a62:	90 e0       	ldi	r25, 0x00	; 0
    4a64:	90 a3       	std	Z+32, r25	; 0x20
    4a66:	87 8f       	std	Z+31, r24	; 0x1f
    halWait(1000);
    4a68:	81 e0       	ldi	r24, 0x01	; 1
    4a6a:	85 83       	std	Z+5, r24	; 0x05
    SET_RESET_ACTIVE();
    4a6c:	0e 94 ca 2c 	call	0x5994	; 0x5994 <_nrk_os_timer_get>
    4a70:	18 2f       	mov	r17, r24
    halWait(1);
    SET_RESET_INACTIVE();
    halWait(100);

    4a72:	88 3f       	cpi	r24, 0xF8	; 248
    4a74:	80 f4       	brcc	.+32     	; 0x4a96 <nrk_wait_until_next_period+0x48>
    // Initialize the FIFOP external interrupt
    4a76:	0e 94 56 2c 	call	0x58ac	; 0x58ac <_nrk_get_next_wakeup>
    4a7a:	21 2f       	mov	r18, r17
    4a7c:	33 27       	eor	r19, r19
    4a7e:	2e 5f       	subi	r18, 0xFE	; 254
    4a80:	3f 4f       	sbci	r19, 0xFF	; 255
    4a82:	99 27       	eor	r25, r25
    4a84:	82 17       	cp	r24, r18
    4a86:	93 07       	cpc	r25, r19
    4a88:	34 f0       	brlt	.+12     	; 0x4a96 <nrk_wait_until_next_period+0x48>
    //FIFOP_INT_INIT();
    4a8a:	81 2f       	mov	r24, r17
    4a8c:	8e 5f       	subi	r24, 0xFE	; 254
    //ENABLE_FIFOP_INT();
    4a8e:	80 93 9a 06 	sts	0x069A, r24

    4a92:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <_nrk_set_next_wakeup>
    // Turn off all interrupts while we're accessing the CC2420 registers
	DISABLE_GLOBAL_INT();

    4a96:	0e 94 35 1a 	call	0x346a	; 0x346a <nrk_int_enable>
    FASTSPI_STROBE(CC2420_SXOSCON);
    4a9a:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <_nrk_wait_for_scheduler>
    mdmctrl0=0x02E2;
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  // Std Preamble, CRC, no auto ack, no hw addr decoding 
    4a9e:	81 e0       	ldi	r24, 0x01	; 1
    4aa0:	90 e0       	ldi	r25, 0x00	; 0
    4aa2:	1f 91       	pop	r17
    4aa4:	08 95       	ret

00004aa6 <nrk_terminate_task>:
//          The 16-bit short address which is used by this node. Must together with the PAN ID form a
//			unique 32-bit identifier to avoid addressing conflicts. Normally, in a 802.15.4 network, the
//			short address will be given to associated nodes by the PAN coordinator.
//-------------------------------------------------------------------------------------------------------
void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr) {
    uint8_t n;
    4aa6:	e0 91 55 07 	lds	r30, 0x0755
    4aaa:	f0 91 56 07 	lds	r31, 0x0756
    4aae:	80 85       	ldd	r24, Z+8	; 0x08
    4ab0:	0e 94 21 23 	call	0x4642	; 0x4642 <nrk_rem_from_readyQ>

    4ab4:	e0 91 55 07 	lds	r30, 0x0755
    4ab8:	f0 91 56 07 	lds	r31, 0x0756
    4abc:	84 e0       	ldi	r24, 0x04	; 4
    4abe:	81 87       	std	Z+9, r24	; 0x09
#ifdef RADIO_PRIORITY_CEILING
   int8_t v;
    radio_sem = nrk_sem_create(1,RADIO_PRIORITY_CEILING);
    4ac0:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <nrk_wait_until_next_period>
    if (radio_sem == NULL)
      nrk_kernel_error_add (NRK_SEMAPHORE_CREATE_ERROR, nrk_get_pid ());
    4ac4:	81 e0       	ldi	r24, 0x01	; 1
    4ac6:	90 e0       	ldi	r25, 0x00	; 0
    4ac8:	08 95       	ret

00004aca <nrk_activate_task>:
}


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
uint8_t n;
    4aca:	ef 92       	push	r14
    4acc:	ff 92       	push	r15
    4ace:	0f 93       	push	r16
    4ad0:	1f 93       	push	r17
    4ad2:	cf 93       	push	r28
    4ad4:	df 93       	push	r29
    4ad6:	ec 01       	movw	r28, r24
    rfSettings.myAddr = my_mac;
    nrk_spin_wait_us(500);
    FASTSPI_WRITE_RAM_LE(&my_mac, CC2420RAM_SHORTADDR, 2, n);
    nrk_spin_wait_us(500);
    4ad8:	4b 81       	ldd	r20, Y+3	; 0x03
    4ada:	5c 81       	ldd	r21, Y+4	; 0x04
    4adc:	69 81       	ldd	r22, Y+1	; 0x01
    4ade:	7a 81       	ldd	r23, Y+2	; 0x02
    4ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    4ae2:	9e 81       	ldd	r25, Y+6	; 0x06
    4ae4:	0e 94 b9 2f 	call	0x5f72	; 0x5f72 <nrk_task_stk_init>
    4ae8:	bc 01       	movw	r22, r24
}



    4aea:	8f 81       	ldd	r24, Y+7	; 0x07
    4aec:	88 23       	and	r24, r24
    4aee:	69 f0       	breq	.+26     	; 0x4b0a <nrk_activate_task+0x40>
void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
    4af0:	4b 81       	ldd	r20, Y+3	; 0x03
    4af2:	5c 81       	ldd	r21, Y+4	; 0x04
    4af4:	ee 24       	eor	r14, r14
    4af6:	ff 24       	eor	r15, r15
    4af8:	00 e0       	ldi	r16, 0x00	; 0
    4afa:	10 e0       	ldi	r17, 0x00	; 0
    4afc:	20 e0       	ldi	r18, 0x00	; 0
    4afe:	30 e0       	ldi	r19, 0x00	; 0
    4b00:	ce 01       	movw	r24, r28
    4b02:	0e 94 3d 1a 	call	0x347a	; 0x347a <nrk_TCB_init>
{
    4b06:	1f 82       	std	Y+7, r1	; 0x07
    4b08:	16 c0       	rjmp	.+44     	; 0x4b36 <nrk_activate_task+0x6c>

#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    4b0a:	88 81       	ld	r24, Y
    4b0c:	99 27       	eor	r25, r25
    4b0e:	87 fd       	sbrc	r24, 7
    4b10:	90 95       	com	r25
    4b12:	fc 01       	movw	r30, r24
    4b14:	a5 e0       	ldi	r26, 0x05	; 5
    4b16:	ee 0f       	add	r30, r30
    4b18:	ff 1f       	adc	r31, r31
    4b1a:	aa 95       	dec	r26
    4b1c:	e1 f7       	brne	.-8      	; 0x4b16 <nrk_activate_task+0x4c>
    4b1e:	e8 0f       	add	r30, r24
    4b20:	f9 1f       	adc	r31, r25
    4b22:	e8 54       	subi	r30, 0x48	; 72
    4b24:	f9 4f       	sbci	r31, 0xF9	; 249
    4b26:	81 85       	ldd	r24, Z+9	; 0x09
    4b28:	83 30       	cpi	r24, 0x03	; 3
    4b2a:	19 f0       	breq	.+6      	; 0x4b32 <nrk_activate_task+0x68>
    4b2c:	8f ef       	ldi	r24, 0xFF	; 255
    4b2e:	9f ef       	ldi	r25, 0xFF	; 255
    4b30:	1b c0       	rjmp	.+54     	; 0x4b68 <nrk_activate_task+0x9e>

    FASTSPI_STROBE(CC2420_SFLUSHRX);
    FASTSPI_STROBE(CC2420_SFLUSHRX);
    halRfSetChannel(channel);
    4b32:	71 83       	std	Z+1, r23	; 0x01
    4b34:	60 83       	st	Z, r22
//		registers and protocol addresses (for automatic address recognition). Note that the crystal
//		oscillator will remain on (forever).
//
//  ARGUMENTS:
//      RF_RX_INFO *pRRI
//          A pointer the RF_RX_INFO data structure to be used during the first packet reception.
    4b36:	88 81       	ld	r24, Y
    4b38:	99 27       	eor	r25, r25
    4b3a:	87 fd       	sbrc	r24, 7
    4b3c:	90 95       	com	r25
    4b3e:	fc 01       	movw	r30, r24
    4b40:	75 e0       	ldi	r23, 0x05	; 5
    4b42:	ee 0f       	add	r30, r30
    4b44:	ff 1f       	adc	r31, r31
    4b46:	7a 95       	dec	r23
    4b48:	e1 f7       	brne	.-8      	; 0x4b42 <nrk_activate_task+0x78>
    4b4a:	e8 0f       	add	r30, r24
    4b4c:	f9 1f       	adc	r31, r25
    4b4e:	e8 54       	subi	r30, 0x48	; 72
    4b50:	f9 4f       	sbci	r31, 0xF9	; 249
    4b52:	85 89       	ldd	r24, Z+21	; 0x15
    4b54:	96 89       	ldd	r25, Z+22	; 0x16
    4b56:	89 2b       	or	r24, r25
    4b58:	29 f4       	brne	.+10     	; 0x4b64 <nrk_activate_task+0x9a>
//			The structure can be switched upon packet reception.
    4b5a:	82 e0       	ldi	r24, 0x02	; 2
    4b5c:	81 87       	std	Z+9, r24	; 0x09
//      uint8_t channel
    4b5e:	88 81       	ld	r24, Y
    4b60:	0e 94 9a 22 	call	0x4534	; 0x4534 <nrk_add_to_readyQ>
    4b64:	81 e0       	ldi	r24, 0x01	; 1
    4b66:	90 e0       	ldi	r25, 0x00	; 0
    4b68:	df 91       	pop	r29
    4b6a:	cf 91       	pop	r28
    4b6c:	1f 91       	pop	r17
    4b6e:	0f 91       	pop	r16
    4b70:	ff 90       	pop	r15
    4b72:	ef 90       	pop	r14
    4b74:	08 95       	ret

00004b76 <nrk_time_sub>:

nrk_sem_t *radio_sem;
uint8_t auto_ack_enable;
uint8_t security_enable;
uint8_t last_pkt_encrypted;
uint16_t mdmctrl0;
    4b76:	8f 92       	push	r8
    4b78:	9f 92       	push	r9
    4b7a:	af 92       	push	r10
    4b7c:	bf 92       	push	r11
    4b7e:	cf 92       	push	r12
    4b80:	df 92       	push	r13
    4b82:	ef 92       	push	r14
    4b84:	ff 92       	push	r15
    4b86:	0f 93       	push	r16
    4b88:	1f 93       	push	r17
    4b8a:	cf 93       	push	r28
    4b8c:	df 93       	push	r29
    4b8e:	cd b7       	in	r28, 0x3d	; 61
    4b90:	de b7       	in	r29, 0x3e	; 62
    4b92:	60 97       	sbiw	r28, 0x10	; 16
    4b94:	0f b6       	in	r0, 0x3f	; 63
    4b96:	f8 94       	cli
    4b98:	de bf       	out	0x3e, r29	; 62
    4b9a:	0f be       	out	0x3f, r0	; 63
    4b9c:	cd bf       	out	0x3d, r28	; 61
    4b9e:	fc 01       	movw	r30, r24
    4ba0:	09 83       	std	Y+1, r16	; 0x01
    4ba2:	1a 83       	std	Y+2, r17	; 0x02
    4ba4:	2b 83       	std	Y+3, r18	; 0x03
    4ba6:	3c 83       	std	Y+4, r19	; 0x04
    4ba8:	4d 83       	std	Y+5, r20	; 0x05
    4baa:	5e 83       	std	Y+6, r21	; 0x06
    4bac:	6f 83       	std	Y+7, r22	; 0x07
    4bae:	78 87       	std	Y+8, r23	; 0x08
    4bb0:	89 86       	std	Y+9, r8	; 0x09
    4bb2:	9a 86       	std	Y+10, r9	; 0x0a
    4bb4:	ab 86       	std	Y+11, r10	; 0x0b
    4bb6:	bc 86       	std	Y+12, r11	; 0x0c
    4bb8:	cd 86       	std	Y+13, r12	; 0x0d
    4bba:	de 86       	std	Y+14, r13	; 0x0e
    4bbc:	ef 86       	std	Y+15, r14	; 0x0f
    4bbe:	f8 8a       	std	Y+16, r15	; 0x10
    4bc0:	2d 81       	ldd	r18, Y+5	; 0x05
    4bc2:	3e 81       	ldd	r19, Y+6	; 0x06
    4bc4:	4f 81       	ldd	r20, Y+7	; 0x07
    4bc6:	58 85       	ldd	r21, Y+8	; 0x08
    4bc8:	89 81       	ldd	r24, Y+1	; 0x01
    4bca:	9a 81       	ldd	r25, Y+2	; 0x02
    4bcc:	ab 81       	ldd	r26, Y+3	; 0x03
    4bce:	bc 81       	ldd	r27, Y+4	; 0x04
    4bd0:	ad 84       	ldd	r10, Y+13	; 0x0d
    4bd2:	be 84       	ldd	r11, Y+14	; 0x0e
    4bd4:	cf 84       	ldd	r12, Y+15	; 0x0f
    4bd6:	d8 88       	ldd	r13, Y+16	; 0x10
    4bd8:	e9 84       	ldd	r14, Y+9	; 0x09
    4bda:	fa 84       	ldd	r15, Y+10	; 0x0a
    4bdc:	0b 85       	ldd	r16, Y+11	; 0x0b
    4bde:	1c 85       	ldd	r17, Y+12	; 0x0c
uint8_t tx_ctr[4];
    4be0:	8e 15       	cp	r24, r14
    4be2:	9f 05       	cpc	r25, r15
    4be4:	a0 07       	cpc	r26, r16
    4be6:	b1 07       	cpc	r27, r17
    4be8:	08 f4       	brcc	.+2      	; 0x4bec <nrk_time_sub+0x76>
    4bea:	3f c0       	rjmp	.+126    	; 0x4c6a <nrk_time_sub+0xf4>
uint8_t rx_ctr[4];
    4bec:	e8 16       	cp	r14, r24
    4bee:	f9 06       	cpc	r15, r25
    4bf0:	0a 07       	cpc	r16, r26
    4bf2:	1b 07       	cpc	r17, r27
    4bf4:	91 f4       	brne	.+36     	; 0x4c1a <nrk_time_sub+0xa4>

void rf_power_down()
    4bf6:	2a 15       	cp	r18, r10
    4bf8:	3b 05       	cpc	r19, r11
    4bfa:	4c 05       	cpc	r20, r12
    4bfc:	5d 05       	cpc	r21, r13
    4bfe:	a8 f1       	brcs	.+106    	; 0x4c6a <nrk_time_sub+0xf4>
{
    4c00:	2a 19       	sub	r18, r10
    4c02:	3b 09       	sbc	r19, r11
    4c04:	4c 09       	sbc	r20, r12
    4c06:	5d 09       	sbc	r21, r13
    4c08:	24 83       	std	Z+4, r18	; 0x04
    4c0a:	35 83       	std	Z+5, r19	; 0x05
    4c0c:	46 83       	std	Z+6, r20	; 0x06
    4c0e:	57 83       	std	Z+7, r21	; 0x07
    DISABLE_GLOBAL_INT();
    4c10:	10 82       	st	Z, r1
    4c12:	11 82       	std	Z+1, r1	; 0x01
    4c14:	12 82       	std	Z+2, r1	; 0x02
    4c16:	13 82       	std	Z+3, r1	; 0x03
    4c18:	1c c0       	rjmp	.+56     	; 0x4c52 <nrk_time_sub+0xdc>
    FASTSPI_STROBE(CC2420_SXOSCOFF);
    FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
    ENABLE_GLOBAL_INT();
    4c1a:	2a 15       	cp	r18, r10
    4c1c:	3b 05       	cpc	r19, r11
    4c1e:	4c 05       	cpc	r20, r12
    4c20:	5d 05       	cpc	r21, r13
    4c22:	d0 f4       	brcc	.+52     	; 0x4c58 <nrk_time_sub+0xe2>
}

void rf_power_up()
{
    4c24:	01 97       	sbiw	r24, 0x01	; 1
    4c26:	a1 09       	sbc	r26, r1
    4c28:	b1 09       	sbc	r27, r1
    4c2a:	8e 19       	sub	r24, r14
    4c2c:	9f 09       	sbc	r25, r15
    4c2e:	a0 0b       	sbc	r26, r16
    4c30:	b1 0b       	sbc	r27, r17
    4c32:	80 83       	st	Z, r24
    4c34:	91 83       	std	Z+1, r25	; 0x01
    4c36:	a2 83       	std	Z+2, r26	; 0x02
    4c38:	b3 83       	std	Z+3, r27	; 0x03

    4c3a:	20 50       	subi	r18, 0x00	; 0
    4c3c:	36 43       	sbci	r19, 0x36	; 54
    4c3e:	45 46       	sbci	r20, 0x65	; 101
    4c40:	54 4c       	sbci	r21, 0xC4	; 196
    4c42:	2a 19       	sub	r18, r10
    4c44:	3b 09       	sbc	r19, r11
    4c46:	4c 09       	sbc	r20, r12
    4c48:	5d 09       	sbc	r21, r13
    4c4a:	24 83       	std	Z+4, r18	; 0x04
    4c4c:	35 83       	std	Z+5, r19	; 0x05
    4c4e:	46 83       	std	Z+6, r20	; 0x06
    4c50:	57 83       	std	Z+7, r21	; 0x07
    4c52:	81 e0       	ldi	r24, 0x01	; 1
    4c54:	90 e0       	ldi	r25, 0x00	; 0
    4c56:	0b c0       	rjmp	.+22     	; 0x4c6e <nrk_time_sub+0xf8>
    DISABLE_GLOBAL_INT();
    FASTSPI_STROBE(CC2420_SXOSCON);
    nrk_spin_wait_us(OSC_STARTUP_DELAY);
    ENABLE_GLOBAL_INT();
    4c58:	8e 19       	sub	r24, r14
    4c5a:	9f 09       	sbc	r25, r15
    4c5c:	a0 0b       	sbc	r26, r16
    4c5e:	b1 0b       	sbc	r27, r17
    4c60:	80 83       	st	Z, r24
    4c62:	91 83       	std	Z+1, r25	; 0x01
    4c64:	a2 83       	std	Z+2, r26	; 0x02
    4c66:	b3 83       	std	Z+3, r27	; 0x03
    4c68:	ec cf       	rjmp	.-40     	; 0x4c42 <nrk_time_sub+0xcc>

}
    4c6a:	8f ef       	ldi	r24, 0xFF	; 255
    4c6c:	9f ef       	ldi	r25, 0xFF	; 255
    4c6e:	60 96       	adiw	r28, 0x10	; 16
    4c70:	0f b6       	in	r0, 0x3f	; 63
    4c72:	f8 94       	cli
    4c74:	de bf       	out	0x3e, r29	; 62
    4c76:	0f be       	out	0x3f, r0	; 63
    4c78:	cd bf       	out	0x3d, r28	; 61
    4c7a:	df 91       	pop	r29
    4c7c:	cf 91       	pop	r28
    4c7e:	1f 91       	pop	r17
    4c80:	0f 91       	pop	r16
    4c82:	ff 90       	pop	r15
    4c84:	ef 90       	pop	r14
    4c86:	df 90       	pop	r13
    4c88:	cf 90       	pop	r12
    4c8a:	bf 90       	pop	r11
    4c8c:	af 90       	pop	r10
    4c8e:	9f 90       	pop	r9
    4c90:	8f 90       	pop	r8
    4c92:	08 95       	ret

00004c94 <nrk_time_compact_nanos>:
}


void rf_security_set_key(uint8_t *key)
{
uint8_t n,i;
    4c94:	fc 01       	movw	r30, r24
    4c96:	13 c0       	rjmp	.+38     	; 0x4cbe <nrk_time_compact_nanos+0x2a>
uint16_t key_buf;

// Set AES key
    4c98:	80 50       	subi	r24, 0x00	; 0
    4c9a:	9a 4c       	sbci	r25, 0xCA	; 202
    4c9c:	aa 49       	sbci	r26, 0x9A	; 154
    4c9e:	bb 43       	sbci	r27, 0x3B	; 59
    4ca0:	84 83       	std	Z+4, r24	; 0x04
    4ca2:	95 83       	std	Z+5, r25	; 0x05
    4ca4:	a6 83       	std	Z+6, r26	; 0x06
    4ca6:	b7 83       	std	Z+7, r27	; 0x07
nrk_spin_wait_us(100); 
    4ca8:	80 81       	ld	r24, Z
    4caa:	91 81       	ldd	r25, Z+1	; 0x01
    4cac:	a2 81       	ldd	r26, Z+2	; 0x02
    4cae:	b3 81       	ldd	r27, Z+3	; 0x03
    4cb0:	01 96       	adiw	r24, 0x01	; 1
    4cb2:	a1 1d       	adc	r26, r1
    4cb4:	b1 1d       	adc	r27, r1
    4cb6:	80 83       	st	Z, r24
    4cb8:	91 83       	std	Z+1, r25	; 0x01
    4cba:	a2 83       	std	Z+2, r26	; 0x02
    4cbc:	b3 83       	std	Z+3, r27	; 0x03


void rf_security_set_key(uint8_t *key)
{
uint8_t n,i;
uint16_t key_buf;
    4cbe:	84 81       	ldd	r24, Z+4	; 0x04
    4cc0:	95 81       	ldd	r25, Z+5	; 0x05
    4cc2:	a6 81       	ldd	r26, Z+6	; 0x06
    4cc4:	b7 81       	ldd	r27, Z+7	; 0x07
    4cc6:	80 30       	cpi	r24, 0x00	; 0
    4cc8:	2a ec       	ldi	r18, 0xCA	; 202
    4cca:	92 07       	cpc	r25, r18
    4ccc:	2a e9       	ldi	r18, 0x9A	; 154
    4cce:	a2 07       	cpc	r26, r18
    4cd0:	2b e3       	ldi	r18, 0x3B	; 59
    4cd2:	b2 07       	cpc	r27, r18
    4cd4:	08 f7       	brcc	.-62     	; 0x4c98 <nrk_time_compact_nanos+0x4>
    4cd6:	08 95       	ret

00004cd8 <nrk_time_add>:
uint8_t rf_security_last_pkt_status()
{
return last_pkt_encrypted;
}


    4cd8:	8f 92       	push	r8
    4cda:	9f 92       	push	r9
    4cdc:	af 92       	push	r10
    4cde:	bf 92       	push	r11
    4ce0:	cf 92       	push	r12
    4ce2:	df 92       	push	r13
    4ce4:	ef 92       	push	r14
    4ce6:	ff 92       	push	r15
    4ce8:	0f 93       	push	r16
    4cea:	1f 93       	push	r17
    4cec:	cf 93       	push	r28
    4cee:	df 93       	push	r29
    4cf0:	cd b7       	in	r28, 0x3d	; 61
    4cf2:	de b7       	in	r29, 0x3e	; 62
    4cf4:	60 97       	sbiw	r28, 0x10	; 16
    4cf6:	0f b6       	in	r0, 0x3f	; 63
    4cf8:	f8 94       	cli
    4cfa:	de bf       	out	0x3e, r29	; 62
    4cfc:	0f be       	out	0x3f, r0	; 63
    4cfe:	cd bf       	out	0x3d, r28	; 61
    4d00:	fc 01       	movw	r30, r24
    4d02:	09 83       	std	Y+1, r16	; 0x01
    4d04:	1a 83       	std	Y+2, r17	; 0x02
    4d06:	2b 83       	std	Y+3, r18	; 0x03
    4d08:	3c 83       	std	Y+4, r19	; 0x04
    4d0a:	4d 83       	std	Y+5, r20	; 0x05
    4d0c:	5e 83       	std	Y+6, r21	; 0x06
    4d0e:	6f 83       	std	Y+7, r22	; 0x07
    4d10:	78 87       	std	Y+8, r23	; 0x08
    4d12:	89 86       	std	Y+9, r8	; 0x09
    4d14:	9a 86       	std	Y+10, r9	; 0x0a
    4d16:	ab 86       	std	Y+11, r10	; 0x0b
    4d18:	bc 86       	std	Y+12, r11	; 0x0c
    4d1a:	cd 86       	std	Y+13, r12	; 0x0d
    4d1c:	de 86       	std	Y+14, r13	; 0x0e
    4d1e:	ef 86       	std	Y+15, r14	; 0x0f
    4d20:	f8 8a       	std	Y+16, r15	; 0x10
    4d22:	ad 80       	ldd	r10, Y+5	; 0x05
    4d24:	be 80       	ldd	r11, Y+6	; 0x06
    4d26:	cf 80       	ldd	r12, Y+7	; 0x07
    4d28:	d8 84       	ldd	r13, Y+8	; 0x08
    4d2a:	ed 84       	ldd	r14, Y+13	; 0x0d
    4d2c:	fe 84       	ldd	r15, Y+14	; 0x0e
    4d2e:	0f 85       	ldd	r16, Y+15	; 0x0f
    4d30:	18 89       	ldd	r17, Y+16	; 0x10
void rf_security_set_ctr_counter(uint8_t *counter)
    4d32:	89 85       	ldd	r24, Y+9	; 0x09
    4d34:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d36:	ab 85       	ldd	r26, Y+11	; 0x0b
    4d38:	bc 85       	ldd	r27, Y+12	; 0x0c
    4d3a:	29 81       	ldd	r18, Y+1	; 0x01
    4d3c:	3a 81       	ldd	r19, Y+2	; 0x02
    4d3e:	4b 81       	ldd	r20, Y+3	; 0x03
    4d40:	5c 81       	ldd	r21, Y+4	; 0x04
    4d42:	82 0f       	add	r24, r18
    4d44:	93 1f       	adc	r25, r19
    4d46:	a4 1f       	adc	r26, r20
    4d48:	b5 1f       	adc	r27, r21
    4d4a:	80 83       	st	Z, r24
    4d4c:	91 83       	std	Z+1, r25	; 0x01
    4d4e:	a2 83       	std	Z+2, r26	; 0x02
    4d50:	b3 83       	std	Z+3, r27	; 0x03
{
    4d52:	ea 0c       	add	r14, r10
    4d54:	fb 1c       	adc	r15, r11
    4d56:	0c 1d       	adc	r16, r12
    4d58:	1d 1d       	adc	r17, r13
    4d5a:	e4 82       	std	Z+4, r14	; 0x04
    4d5c:	f5 82       	std	Z+5, r15	; 0x05
    4d5e:	06 83       	std	Z+6, r16	; 0x06
    4d60:	17 83       	std	Z+7, r17	; 0x07
uint8_t n;
    4d62:	cf 01       	movw	r24, r30
    4d64:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <nrk_time_compact_nanos>
// CTR counter value
FASTSPI_WRITE_RAM(&counter[0],(CC2420RAM_TXNONCE+9),2,n); 
    4d68:	81 e0       	ldi	r24, 0x01	; 1
    4d6a:	90 e0       	ldi	r25, 0x00	; 0
    4d6c:	60 96       	adiw	r28, 0x10	; 16
    4d6e:	0f b6       	in	r0, 0x3f	; 63
    4d70:	f8 94       	cli
    4d72:	de bf       	out	0x3e, r29	; 62
    4d74:	0f be       	out	0x3f, r0	; 63
    4d76:	cd bf       	out	0x3d, r28	; 61
    4d78:	df 91       	pop	r29
    4d7a:	cf 91       	pop	r28
    4d7c:	1f 91       	pop	r17
    4d7e:	0f 91       	pop	r16
    4d80:	ff 90       	pop	r15
    4d82:	ef 90       	pop	r14
    4d84:	df 90       	pop	r13
    4d86:	cf 90       	pop	r12
    4d88:	bf 90       	pop	r11
    4d8a:	af 90       	pop	r10
    4d8c:	9f 90       	pop	r9
    4d8e:	8f 90       	pop	r8
    4d90:	08 95       	ret

00004d92 <nrk_time_set>:
    	key_buf=(key[i]<<8)|key[i+1]; 
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
	}

// Set AES nonce to all zeros
    4d92:	60 93 4c 07 	sts	0x074C, r22
    4d96:	70 93 4d 07 	sts	0x074D, r23
    4d9a:	80 93 4e 07 	sts	0x074E, r24
    4d9e:	90 93 4f 07 	sts	0x074F, r25
nrk_spin_wait_us(100); 
    4da2:	20 93 50 07 	sts	0x0750, r18
    4da6:	30 93 51 07 	sts	0x0751, r19
    4daa:	40 93 52 07 	sts	0x0752, r20
    4dae:	50 93 53 07 	sts	0x0753, r21
    4db2:	08 95       	ret

00004db4 <_nrk_time_to_ticks>:
for(i=0; i<7; i++ )
	{
    	key_buf=0; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    4db4:	ef 92       	push	r14
    4db6:	ff 92       	push	r15
    4db8:	0f 93       	push	r16
    4dba:	1f 93       	push	r17
    4dbc:	fc 01       	movw	r30, r24
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
	}
	// block counter set 1
    	key_buf=1; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
    4dbe:	80 81       	ld	r24, Z
    4dc0:	91 81       	ldd	r25, Z+1	; 0x01
    4dc2:	a2 81       	ldd	r26, Z+2	; 0x02
    4dc4:	b3 81       	ldd	r27, Z+3	; 0x03
    4dc6:	00 97       	sbiw	r24, 0x00	; 0
    4dc8:	a1 05       	cpc	r26, r1
    4dca:	b1 05       	cpc	r27, r1
    4dcc:	61 f1       	breq	.+88     	; 0x4e26 <_nrk_time_to_ticks+0x72>
}

    4dce:	8b 97       	sbiw	r24, 0x2b	; 43
    4dd0:	a1 05       	cpc	r26, r1
    4dd2:	b1 05       	cpc	r27, r1
    4dd4:	18 f0       	brcs	.+6      	; 0x4ddc <_nrk_time_to_ticks+0x28>
    4dd6:	80 e0       	ldi	r24, 0x00	; 0
    4dd8:	90 e0       	ldi	r25, 0x00	; 0
    4dda:	30 c0       	rjmp	.+96     	; 0x4e3c <_nrk_time_to_ticks+0x88>
    4ddc:	60 e0       	ldi	r22, 0x00	; 0
    4dde:	70 e0       	ldi	r23, 0x00	; 0
    4de0:	0c c0       	rjmp	.+24     	; 0x4dfa <_nrk_time_to_ticks+0x46>
void rf_security_enable(uint8_t *key)
    4de2:	80 e0       	ldi	r24, 0x00	; 0
    4de4:	9a ec       	ldi	r25, 0xCA	; 202
    4de6:	aa e9       	ldi	r26, 0x9A	; 154
    4de8:	bb e3       	ldi	r27, 0x3B	; 59
    4dea:	e8 0e       	add	r14, r24
    4dec:	f9 1e       	adc	r15, r25
    4dee:	0a 1f       	adc	r16, r26
    4df0:	1b 1f       	adc	r17, r27
    4df2:	e4 82       	std	Z+4, r14	; 0x04
    4df4:	f5 82       	std	Z+5, r15	; 0x05
    4df6:	06 83       	std	Z+6, r16	; 0x06
    4df8:	17 83       	std	Z+7, r17	; 0x07
    4dfa:	26 2f       	mov	r18, r22
    4dfc:	33 27       	eor	r19, r19
    4dfe:	44 27       	eor	r20, r20
    4e00:	55 27       	eor	r21, r21
    4e02:	6f 5f       	subi	r22, 0xFF	; 255
    4e04:	7f 4f       	sbci	r23, 0xFF	; 255
    4e06:	80 81       	ld	r24, Z
    4e08:	91 81       	ldd	r25, Z+1	; 0x01
    4e0a:	a2 81       	ldd	r26, Z+2	; 0x02
    4e0c:	b3 81       	ldd	r27, Z+3	; 0x03
    4e0e:	e4 80       	ldd	r14, Z+4	; 0x04
    4e10:	f5 80       	ldd	r15, Z+5	; 0x05
    4e12:	06 81       	ldd	r16, Z+6	; 0x06
    4e14:	17 81       	ldd	r17, Z+7	; 0x07
    4e16:	28 17       	cp	r18, r24
    4e18:	39 07       	cpc	r19, r25
    4e1a:	4a 07       	cpc	r20, r26
    4e1c:	5b 07       	cpc	r21, r27
    4e1e:	08 f3       	brcs	.-62     	; 0x4de2 <_nrk_time_to_ticks+0x2e>
{
    4e20:	c8 01       	movw	r24, r16
    4e22:	b7 01       	movw	r22, r14
    4e24:	04 c0       	rjmp	.+8      	; 0x4e2e <_nrk_time_to_ticks+0x7a>
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x0306); // Enable CTR encryption with key 0
    FASTSPI_SETREG(CC2420_SECCTRL1, 0x0e0e); // Encrypt / Decrypt 18 bytes into header

    4e26:	64 81       	ldd	r22, Z+4	; 0x04
    4e28:	75 81       	ldd	r23, Z+5	; 0x05
    4e2a:	86 81       	ldd	r24, Z+6	; 0x06
    4e2c:	97 81       	ldd	r25, Z+7	; 0x07
    4e2e:	23 eb       	ldi	r18, 0xB3	; 179
    4e30:	36 ee       	ldi	r19, 0xE6	; 230
    4e32:	4e e0       	ldi	r20, 0x0E	; 14
    4e34:	50 e0       	ldi	r21, 0x00	; 0
    4e36:	0e 94 b8 34 	call	0x6970	; 0x6970 <__udivmodsi4>
    4e3a:	c9 01       	movw	r24, r18
    4e3c:	1f 91       	pop	r17
    4e3e:	0f 91       	pop	r16
    4e40:	ff 90       	pop	r15
    4e42:	ef 90       	pop	r14
    4e44:	08 95       	ret

00004e46 <_nrk_ticks_to_time>:
    tmp=tmp | (pwr&0x1F);  
    FASTSPI_SETREG(CC2420_TXCTRL, tmp);   // Set the FIFOP threshold to maximum
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
}
    4e46:	2f 92       	push	r2
    4e48:	3f 92       	push	r3
    4e4a:	4f 92       	push	r4
    4e4c:	5f 92       	push	r5
    4e4e:	6f 92       	push	r6
    4e50:	7f 92       	push	r7
    4e52:	8f 92       	push	r8
    4e54:	9f 92       	push	r9
    4e56:	af 92       	push	r10
    4e58:	bf 92       	push	r11
    4e5a:	cf 92       	push	r12
    4e5c:	df 92       	push	r13
    4e5e:	ef 92       	push	r14
    4e60:	ff 92       	push	r15
    4e62:	0f 93       	push	r16
    4e64:	1f 93       	push	r17
    4e66:	cf 93       	push	r28
    4e68:	df 93       	push	r29
    4e6a:	cd b7       	in	r28, 0x3d	; 61
    4e6c:	de b7       	in	r29, 0x3e	; 62
    4e6e:	28 97       	sbiw	r28, 0x08	; 8
    4e70:	0f b6       	in	r0, 0x3f	; 63
    4e72:	f8 94       	cli
    4e74:	de bf       	out	0x3e, r29	; 62
    4e76:	0f be       	out	0x3f, r0	; 63
    4e78:	cd bf       	out	0x3d, r28	; 61
    4e7a:	7b 01       	movw	r14, r22
    4e7c:	8c 01       	movw	r16, r24
void rf_set_channel( uint8_t channel )
{
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    halRfSetChannel(channel);
    4e7e:	73 70       	andi	r23, 0x03	; 3
    4e80:	80 70       	andi	r24, 0x00	; 0
    4e82:	90 70       	andi	r25, 0x00	; 0
    4e84:	23 eb       	ldi	r18, 0xB3	; 179
    4e86:	36 ee       	ldi	r19, 0xE6	; 230
    4e88:	4e e0       	ldi	r20, 0x0E	; 14
    4e8a:	50 e0       	ldi	r21, 0x00	; 0
    4e8c:	0e 94 72 34 	call	0x68e4	; 0x68e4 <__mulsi3>
    4e90:	6d 83       	std	Y+5, r22	; 0x05
    4e92:	7e 83       	std	Y+6, r23	; 0x06
    4e94:	8f 83       	std	Y+7, r24	; 0x07
    4e96:	98 87       	std	Y+8, r25	; 0x08
    4e98:	8a e0       	ldi	r24, 0x0A	; 10
    4e9a:	16 95       	lsr	r17
    4e9c:	07 95       	ror	r16
    4e9e:	f7 94       	ror	r15
    4ea0:	e7 94       	ror	r14
    4ea2:	8a 95       	dec	r24
    4ea4:	d1 f7       	brne	.-12     	; 0x4e9a <_nrk_ticks_to_time+0x54>
    4ea6:	e9 82       	std	Y+1, r14	; 0x01
    4ea8:	fa 82       	std	Y+2, r15	; 0x02
    4eaa:	0b 83       	std	Y+3, r16	; 0x03
    4eac:	1c 83       	std	Y+4, r17	; 0x04
    4eae:	98 85       	ldd	r25, Y+8	; 0x08
    4eb0:	29 80       	ldd	r2, Y+1	; 0x01
    4eb2:	3a 80       	ldd	r3, Y+2	; 0x02
    4eb4:	4b 80       	ldd	r4, Y+3	; 0x03
    4eb6:	5c 80       	ldd	r5, Y+4	; 0x04
    4eb8:	6d 80       	ldd	r6, Y+5	; 0x05
    4eba:	7e 80       	ldd	r7, Y+6	; 0x06
    4ebc:	8f 80       	ldd	r8, Y+7	; 0x07
#ifdef RADIO_PRIORITY_CEILING
    4ebe:	22 2d       	mov	r18, r2
    4ec0:	33 2d       	mov	r19, r3
    4ec2:	44 2d       	mov	r20, r4
    4ec4:	55 2d       	mov	r21, r5
    4ec6:	66 2d       	mov	r22, r6
    4ec8:	77 2d       	mov	r23, r7
    4eca:	88 2d       	mov	r24, r8
    4ecc:	28 96       	adiw	r28, 0x08	; 8
    4ece:	0f b6       	in	r0, 0x3f	; 63
    4ed0:	f8 94       	cli
    4ed2:	de bf       	out	0x3e, r29	; 62
    4ed4:	0f be       	out	0x3f, r0	; 63
    4ed6:	cd bf       	out	0x3d, r28	; 61
    4ed8:	df 91       	pop	r29
    4eda:	cf 91       	pop	r28
    4edc:	1f 91       	pop	r17
    4ede:	0f 91       	pop	r16
    4ee0:	ff 90       	pop	r15
    4ee2:	ef 90       	pop	r14
    4ee4:	df 90       	pop	r13
    4ee6:	cf 90       	pop	r12
    4ee8:	bf 90       	pop	r11
    4eea:	af 90       	pop	r10
    4eec:	9f 90       	pop	r9
    4eee:	8f 90       	pop	r8
    4ef0:	7f 90       	pop	r7
    4ef2:	6f 90       	pop	r6
    4ef4:	5f 90       	pop	r5
    4ef6:	4f 90       	pop	r4
    4ef8:	3f 90       	pop	r3
    4efa:	2f 90       	pop	r2
    4efc:	08 95       	ret

00004efe <_nrk_time_to_ticks_long>:
    nrk_sem_post(radio_sem);
#endif
}
    4efe:	af 92       	push	r10
    4f00:	bf 92       	push	r11
    4f02:	cf 92       	push	r12
    4f04:	df 92       	push	r13
    4f06:	ef 92       	push	r14
    4f08:	ff 92       	push	r15
    4f0a:	0f 93       	push	r16
    4f0c:	1f 93       	push	r17
    4f0e:	cf 93       	push	r28
    4f10:	df 93       	push	r29
    4f12:	cd b7       	in	r28, 0x3d	; 61
    4f14:	de b7       	in	r29, 0x3e	; 62
    4f16:	28 97       	sbiw	r28, 0x08	; 8
    4f18:	0f b6       	in	r0, 0x3f	; 63
    4f1a:	f8 94       	cli
    4f1c:	de bf       	out	0x3e, r29	; 62
    4f1e:	0f be       	out	0x3f, r0	; 63
    4f20:	cd bf       	out	0x3d, r28	; 61
    4f22:	29 83       	std	Y+1, r18	; 0x01
    4f24:	3a 83       	std	Y+2, r19	; 0x02
    4f26:	4b 83       	std	Y+3, r20	; 0x03
    4f28:	5c 83       	std	Y+4, r21	; 0x04
    4f2a:	6d 83       	std	Y+5, r22	; 0x05
    4f2c:	7e 83       	std	Y+6, r23	; 0x06
    4f2e:	8f 83       	std	Y+7, r24	; 0x07
    4f30:	98 87       	std	Y+8, r25	; 0x08
    4f32:	ad 80       	ldd	r10, Y+5	; 0x05
    4f34:	be 80       	ldd	r11, Y+6	; 0x06
    4f36:	cf 80       	ldd	r12, Y+7	; 0x07
    4f38:	d8 84       	ldd	r13, Y+8	; 0x08
    4f3a:	e9 80       	ldd	r14, Y+1	; 0x01
    4f3c:	fa 80       	ldd	r15, Y+2	; 0x02
    4f3e:	0b 81       	ldd	r16, Y+3	; 0x03
    4f40:	1c 81       	ldd	r17, Y+4	; 0x04


void rf_addr_decode_enable()
{
    4f42:	e1 14       	cp	r14, r1
    4f44:	f1 04       	cpc	r15, r1
    4f46:	01 05       	cpc	r16, r1
    4f48:	11 05       	cpc	r17, r1
    4f4a:	09 f1       	breq	.+66     	; 0x4f8e <_nrk_time_to_ticks_long+0x90>
    mdmctrl0 |= 0x0800;
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
    4f4c:	80 e0       	ldi	r24, 0x00	; 0
    4f4e:	9a ec       	ldi	r25, 0xCA	; 202
    4f50:	aa e9       	ldi	r26, 0x9A	; 154
    4f52:	bb e3       	ldi	r27, 0x3B	; 59
    4f54:	a8 0e       	add	r10, r24
    4f56:	b9 1e       	adc	r11, r25
    4f58:	ca 1e       	adc	r12, r26
    4f5a:	db 1e       	adc	r13, r27
}

    4f5c:	c6 01       	movw	r24, r12
    4f5e:	b5 01       	movw	r22, r10
    4f60:	23 eb       	ldi	r18, 0xB3	; 179
    4f62:	36 ee       	ldi	r19, 0xE6	; 230
    4f64:	4e e0       	ldi	r20, 0x0E	; 14
    4f66:	50 e0       	ldi	r21, 0x00	; 0
    4f68:	0e 94 b8 34 	call	0x6970	; 0x6970 <__udivmodsi4>
void rf_addr_decode_disable()
    4f6c:	08 94       	sec
    4f6e:	e1 08       	sbc	r14, r1
    4f70:	f1 08       	sbc	r15, r1
    4f72:	01 09       	sbc	r16, r1
    4f74:	11 09       	sbc	r17, r1
    4f76:	9a e0       	ldi	r25, 0x0A	; 10
    4f78:	ee 0c       	add	r14, r14
    4f7a:	ff 1c       	adc	r15, r15
    4f7c:	00 1f       	adc	r16, r16
    4f7e:	11 1f       	adc	r17, r17
    4f80:	9a 95       	dec	r25
    4f82:	d1 f7       	brne	.-12     	; 0x4f78 <_nrk_time_to_ticks_long+0x7a>
    4f84:	e2 0e       	add	r14, r18
    4f86:	f3 1e       	adc	r15, r19
    4f88:	04 1f       	adc	r16, r20
    4f8a:	15 1f       	adc	r17, r21
    4f8c:	0a c0       	rjmp	.+20     	; 0x4fa2 <_nrk_time_to_ticks_long+0xa4>
{
    mdmctrl0 &= (~0x0800);
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
    4f8e:	c6 01       	movw	r24, r12
    4f90:	b5 01       	movw	r22, r10
    4f92:	23 eb       	ldi	r18, 0xB3	; 179
    4f94:	36 ee       	ldi	r19, 0xE6	; 230
    4f96:	4e e0       	ldi	r20, 0x0E	; 14
    4f98:	50 e0       	ldi	r21, 0x00	; 0
    4f9a:	0e 94 b8 34 	call	0x6970	; 0x6970 <__udivmodsi4>
    4f9e:	79 01       	movw	r14, r18
    4fa0:	8a 01       	movw	r16, r20
    4fa2:	c8 01       	movw	r24, r16
    4fa4:	b7 01       	movw	r22, r14
    4fa6:	04 c0       	rjmp	.+8      	; 0x4fb0 <_nrk_time_to_ticks_long+0xb2>
}


void rf_auto_ack_enable()
    4fa8:	60 50       	subi	r22, 0x00	; 0
    4faa:	74 40       	sbci	r23, 0x04	; 4
    4fac:	80 40       	sbci	r24, 0x00	; 0
    4fae:	90 40       	sbci	r25, 0x00	; 0
    4fb0:	61 30       	cpi	r22, 0x01	; 1
    4fb2:	a4 e0       	ldi	r26, 0x04	; 4
    4fb4:	7a 07       	cpc	r23, r26
    4fb6:	a0 e0       	ldi	r26, 0x00	; 0
    4fb8:	8a 07       	cpc	r24, r26
    4fba:	a0 e0       	ldi	r26, 0x00	; 0
    4fbc:	9a 07       	cpc	r25, r26
    4fbe:	a0 f7       	brcc	.-24     	; 0x4fa8 <_nrk_time_to_ticks_long+0xaa>
{
    auto_ack_enable=1;
    mdmctrl0 |= 0x0010;
    4fc0:	23 eb       	ldi	r18, 0xB3	; 179
    4fc2:	36 ee       	ldi	r19, 0xE6	; 230
    4fc4:	4e e0       	ldi	r20, 0x0E	; 14
    4fc6:	50 e0       	ldi	r21, 0x00	; 0
    4fc8:	0e 94 72 34 	call	0x68e4	; 0x68e4 <__mulsi3>
    4fcc:	67 5a       	subi	r22, 0xA7	; 167
    4fce:	7c 48       	sbci	r23, 0x8C	; 140
    4fd0:	88 4f       	sbci	r24, 0xF8	; 248
    4fd2:	9f 4f       	sbci	r25, 0xFF	; 255
    4fd4:	6a 15       	cp	r22, r10
    4fd6:	7b 05       	cpc	r23, r11
    4fd8:	8c 05       	cpc	r24, r12
    4fda:	9d 05       	cpc	r25, r13
    4fdc:	28 f4       	brcc	.+10     	; 0x4fe8 <_nrk_time_to_ticks_long+0xea>
    4fde:	08 94       	sec
    4fe0:	e1 1c       	adc	r14, r1
    4fe2:	f1 1c       	adc	r15, r1
    4fe4:	01 1d       	adc	r16, r1
    4fe6:	11 1d       	adc	r17, r1
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0); 
}

void rf_auto_ack_disable()
{
    4fe8:	c8 01       	movw	r24, r16
    4fea:	b7 01       	movw	r22, r14
    4fec:	28 96       	adiw	r28, 0x08	; 8
    4fee:	0f b6       	in	r0, 0x3f	; 63
    4ff0:	f8 94       	cli
    4ff2:	de bf       	out	0x3e, r29	; 62
    4ff4:	0f be       	out	0x3f, r0	; 63
    4ff6:	cd bf       	out	0x3d, r28	; 61
    4ff8:	df 91       	pop	r29
    4ffa:	cf 91       	pop	r28
    4ffc:	1f 91       	pop	r17
    4ffe:	0f 91       	pop	r16
    5000:	ff 90       	pop	r15
    5002:	ef 90       	pop	r14
    5004:	df 90       	pop	r13
    5006:	cf 90       	pop	r12
    5008:	bf 90       	pop	r11
    500a:	af 90       	pop	r10
    500c:	08 95       	ret

0000500e <nrk_time_get>:
void cc259x_rx()
{
    nrk_gpio_set(NRK_DEBUG_1);
    nrk_gpio_clr(NRK_DEBUG_0);
}

    500e:	ef 92       	push	r14
    5010:	ff 92       	push	r15
    5012:	0f 93       	push	r16
    5014:	1f 93       	push	r17
    5016:	cf 93       	push	r28
    5018:	df 93       	push	r29
    501a:	ec 01       	movw	r28, r24

    501c:	80 91 4c 07 	lds	r24, 0x074C
    5020:	90 91 4d 07 	lds	r25, 0x074D
    5024:	a0 91 4e 07 	lds	r26, 0x074E
    5028:	b0 91 4f 07 	lds	r27, 0x074F
    502c:	88 83       	st	Y, r24
    502e:	99 83       	std	Y+1, r25	; 0x01
    5030:	aa 83       	std	Y+2, r26	; 0x02
    5032:	bb 83       	std	Y+3, r27	; 0x03
void cc259x_tx()
    5034:	e0 90 50 07 	lds	r14, 0x0750
    5038:	f0 90 51 07 	lds	r15, 0x0751
    503c:	00 91 52 07 	lds	r16, 0x0752
    5040:	10 91 53 07 	lds	r17, 0x0753
    5044:	ec 82       	std	Y+4, r14	; 0x04
    5046:	fd 82       	std	Y+5, r15	; 0x05
    5048:	0e 83       	std	Y+6, r16	; 0x06
    504a:	1f 83       	std	Y+7, r17	; 0x07
{
    nrk_gpio_set(NRK_DEBUG_1);
    504c:	0e 94 ca 2c 	call	0x5994	; 0x5994 <_nrk_os_timer_get>
    5050:	99 27       	eor	r25, r25
    5052:	aa 27       	eor	r26, r26
    5054:	bb 27       	eor	r27, r27
    5056:	bc 01       	movw	r22, r24
    5058:	cd 01       	movw	r24, r26
    505a:	23 eb       	ldi	r18, 0xB3	; 179
    505c:	36 ee       	ldi	r19, 0xE6	; 230
    505e:	4e e0       	ldi	r20, 0x0E	; 14
    5060:	50 e0       	ldi	r21, 0x00	; 0
    5062:	0e 94 72 34 	call	0x68e4	; 0x68e4 <__mulsi3>
    5066:	e6 0e       	add	r14, r22
    5068:	f7 1e       	adc	r15, r23
    506a:	08 1f       	adc	r16, r24
    506c:	19 1f       	adc	r17, r25
    506e:	ec 82       	std	Y+4, r14	; 0x04
    5070:	fd 82       	std	Y+5, r15	; 0x05
    5072:	0e 83       	std	Y+6, r16	; 0x06
    5074:	1f 83       	std	Y+7, r17	; 0x07
    5076:	13 c0       	rjmp	.+38     	; 0x509e <nrk_time_get+0x90>
    nrk_gpio_set(NRK_DEBUG_0);
}

    5078:	80 50       	subi	r24, 0x00	; 0
    507a:	9a 4c       	sbci	r25, 0xCA	; 202
    507c:	aa 49       	sbci	r26, 0x9A	; 154
    507e:	bb 43       	sbci	r27, 0x3B	; 59
    5080:	8c 83       	std	Y+4, r24	; 0x04
    5082:	9d 83       	std	Y+5, r25	; 0x05
    5084:	ae 83       	std	Y+6, r26	; 0x06
    5086:	bf 83       	std	Y+7, r27	; 0x07

    5088:	88 81       	ld	r24, Y
    508a:	99 81       	ldd	r25, Y+1	; 0x01
    508c:	aa 81       	ldd	r26, Y+2	; 0x02
    508e:	bb 81       	ldd	r27, Y+3	; 0x03
    5090:	01 96       	adiw	r24, 0x01	; 1
    5092:	a1 1d       	adc	r26, r1
    5094:	b1 1d       	adc	r27, r1
    5096:	88 83       	st	Y, r24
    5098:	99 83       	std	Y+1, r25	; 0x01
    509a:	aa 83       	std	Y+2, r26	; 0x02
    509c:	bb 83       	std	Y+3, r27	; 0x03


void cc259x_tx()
{
    nrk_gpio_set(NRK_DEBUG_1);
    nrk_gpio_set(NRK_DEBUG_0);
    509e:	8c 81       	ldd	r24, Y+4	; 0x04
    50a0:	9d 81       	ldd	r25, Y+5	; 0x05
    50a2:	ae 81       	ldd	r26, Y+6	; 0x06
    50a4:	bf 81       	ldd	r27, Y+7	; 0x07
    50a6:	80 30       	cpi	r24, 0x00	; 0
    50a8:	2a ec       	ldi	r18, 0xCA	; 202
    50aa:	92 07       	cpc	r25, r18
    50ac:	2a e9       	ldi	r18, 0x9A	; 154
    50ae:	a2 07       	cpc	r26, r18
    50b0:	2b e3       	ldi	r18, 0x3B	; 59
    50b2:	b2 07       	cpc	r27, r18
    50b4:	08 f7       	brcc	.-62     	; 0x5078 <nrk_time_get+0x6a>
    50b6:	df 91       	pop	r29
    50b8:	cf 91       	pop	r28
    50ba:	1f 91       	pop	r17
    50bc:	0f 91       	pop	r16
    50be:	ff 90       	pop	r15
    50c0:	ef 90       	pop	r14
    50c2:	08 95       	ret

000050c4 <nrk_idle_task>:

void cc259x_rx()
{
    nrk_gpio_set(NRK_DEBUG_1);
    nrk_gpio_clr(NRK_DEBUG_0);
}
    50c4:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <nrk_stack_check>


    50c8:	0e 94 56 2c 	call	0x58ac	; 0x58ac <_nrk_get_next_wakeup>
    50cc:	8b 30       	cpi	r24, 0x0B	; 11
    50ce:	30 f4       	brcc	.+12     	; 0x50dc <nrk_idle_task+0x18>
void cc259x_tx()
{
    50d0:	81 e0       	ldi	r24, 0x01	; 1
    50d2:	80 93 49 07 	sts	0x0749, r24
    nrk_gpio_set(NRK_DEBUG_1);
    50d6:	0e 94 aa 2f 	call	0x5f54	; 0x5f54 <nrk_idle>
    50da:	09 c0       	rjmp	.+18     	; 0x50ee <nrk_idle_task+0x2a>
    nrk_gpio_set(NRK_DEBUG_0);
}


//#ifndef RADIO_PRIORITY_CEILING
    50dc:	8a e0       	ldi	r24, 0x0A	; 10
    50de:	90 e0       	ldi	r25, 0x00	; 0
    50e0:	0e 94 04 2c 	call	0x5808	; 0x5808 <nrk_spin_wait_us>
//  #define RADIO_PRIORITY_CEILING	20
    50e4:	82 e0       	ldi	r24, 0x02	; 2
    50e6:	80 93 49 07 	sts	0x0749, r24
//#endif
    50ea:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <nrk_sleep>
nrk_sem_t *radio_sem;
uint8_t auto_ack_enable;
uint8_t security_enable;
uint8_t last_pkt_encrypted;
uint16_t mdmctrl0;
uint8_t tx_ctr[4];
    50ee:	80 91 15 06 	lds	r24, 0x0615
    50f2:	85 35       	cpi	r24, 0x55	; 85
    50f4:	19 f0       	breq	.+6      	; 0x50fc <nrk_idle_task+0x38>
    50f6:	88 e0       	ldi	r24, 0x08	; 8
    50f8:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <nrk_error_add>
uint8_t rx_ctr[4];

void rf_power_down()
{
    DISABLE_GLOBAL_INT();
    50fc:	80 91 fe 20 	lds	r24, 0x20FE
    5100:	85 35       	cpi	r24, 0x55	; 85
    5102:	01 f3       	breq	.-64     	; 0x50c4 <nrk_idle_task>
    5104:	88 e0       	ldi	r24, 0x08	; 8
    5106:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <nrk_error_add>
    510a:	dc cf       	rjmp	.-72     	; 0x50c4 <nrk_idle_task>

0000510c <_nrk_scheduler>:
}


void cc259x_tx()
{
    nrk_gpio_set(NRK_DEBUG_1);
    510c:	8f 92       	push	r8
    510e:	9f 92       	push	r9
    5110:	af 92       	push	r10
    5112:	bf 92       	push	r11
    5114:	cf 92       	push	r12
    5116:	df 92       	push	r13
    5118:	ef 92       	push	r14
    511a:	ff 92       	push	r15
    511c:	0f 93       	push	r16
    511e:	1f 93       	push	r17
    5120:	cf 93       	push	r28
    5122:	df 93       	push	r29
    nrk_gpio_set(NRK_DEBUG_0);
}


//#ifndef RADIO_PRIORITY_CEILING
    5124:	0e 94 33 1a 	call	0x3466	; 0x3466 <nrk_int_disable>
//  #define RADIO_PRIORITY_CEILING	20
//#endif

nrk_sem_t *radio_sem;
    5128:	0e 94 12 2c 	call	0x5824	; 0x5824 <_nrk_high_speed_timer_reset>
uint8_t auto_ack_enable;
    512c:	0e 94 1a 2c 	call	0x5834	; 0x5834 <_nrk_high_speed_timer_get>
    5130:	4c 01       	movw	r8, r24
uint8_t security_enable;
uint8_t last_pkt_encrypted;
    5132:	8a ef       	ldi	r24, 0xFA	; 250
    5134:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <_nrk_set_next_wakeup>
uint8_t rf_security_last_pkt_status()
{
return last_pkt_encrypted;
}


    5138:	60 91 9a 06 	lds	r22, 0x069A
    513c:	77 27       	eor	r23, r23
    513e:	88 27       	eor	r24, r24
    5140:	99 27       	eor	r25, r25
    5142:	23 eb       	ldi	r18, 0xB3	; 179
    5144:	36 ee       	ldi	r19, 0xE6	; 230
    5146:	4e e0       	ldi	r20, 0x0E	; 14
    5148:	50 e0       	ldi	r21, 0x00	; 0
    514a:	0e 94 72 34 	call	0x68e4	; 0x68e4 <__mulsi3>
    514e:	7b 01       	movw	r14, r22
    5150:	8c 01       	movw	r16, r24
    5152:	80 91 50 07 	lds	r24, 0x0750
    5156:	90 91 51 07 	lds	r25, 0x0751
    515a:	a0 91 52 07 	lds	r26, 0x0752
    515e:	b0 91 53 07 	lds	r27, 0x0753
    5162:	e8 0e       	add	r14, r24
    5164:	f9 1e       	adc	r15, r25
    5166:	0a 1f       	adc	r16, r26
    5168:	1b 1f       	adc	r17, r27
void rf_security_set_ctr_counter(uint8_t *counter)
    516a:	c8 01       	movw	r24, r16
    516c:	b7 01       	movw	r22, r14
    516e:	0e 94 b8 34 	call	0x6970	; 0x6970 <__udivmodsi4>
    5172:	a8 01       	movw	r20, r16
    5174:	97 01       	movw	r18, r14
    5176:	26 1b       	sub	r18, r22
    5178:	37 0b       	sbc	r19, r23
    517a:	48 0b       	sbc	r20, r24
    517c:	59 0b       	sbc	r21, r25
    517e:	80 91 4c 07 	lds	r24, 0x074C
    5182:	90 91 4d 07 	lds	r25, 0x074D
    5186:	a0 91 4e 07 	lds	r26, 0x074E
    518a:	b0 91 4f 07 	lds	r27, 0x074F
    518e:	1b c0       	rjmp	.+54     	; 0x51c6 <_nrk_scheduler+0xba>
uint16_t key_buf;

// Set AES key
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
	{
    5190:	e1 2c       	mov	r14, r1
    5192:	66 e3       	ldi	r22, 0x36	; 54
    5194:	f6 2e       	mov	r15, r22
    5196:	65 e6       	ldi	r22, 0x65	; 101
    5198:	06 2f       	mov	r16, r22
    519a:	64 ec       	ldi	r22, 0xC4	; 196
    519c:	16 2f       	mov	r17, r22
    519e:	e2 0e       	add	r14, r18
    51a0:	f3 1e       	adc	r15, r19
    51a2:	04 1f       	adc	r16, r20
    51a4:	15 1f       	adc	r17, r21
    	key_buf=(key[i]<<8)|key[i+1]; 
   	nrk_spin_wait_us(100); 
    51a6:	c8 01       	movw	r24, r16
    51a8:	b7 01       	movw	r22, r14
    51aa:	23 eb       	ldi	r18, 0xB3	; 179
    51ac:	36 ee       	ldi	r19, 0xE6	; 230
    51ae:	4e e0       	ldi	r20, 0x0E	; 14
    51b0:	50 e0       	ldi	r21, 0x00	; 0
    51b2:	0e 94 b8 34 	call	0x6970	; 0x6970 <__udivmodsi4>
    51b6:	a8 01       	movw	r20, r16
    51b8:	97 01       	movw	r18, r14
    51ba:	26 1b       	sub	r18, r22
    51bc:	37 0b       	sbc	r19, r23
    51be:	48 0b       	sbc	r20, r24
    51c0:	59 0b       	sbc	r21, r25
    51c2:	d6 01       	movw	r26, r12
    51c4:	c5 01       	movw	r24, r10
    51c6:	5c 01       	movw	r10, r24
    51c8:	6d 01       	movw	r12, r26
    51ca:	08 94       	sec
    51cc:	a1 1c       	adc	r10, r1
    51ce:	b1 1c       	adc	r11, r1
    51d0:	c1 1c       	adc	r12, r1
    51d2:	d1 1c       	adc	r13, r1
{
uint8_t n,i;
uint16_t key_buf;

// Set AES key
nrk_spin_wait_us(100); 
    51d4:	20 30       	cpi	r18, 0x00	; 0
    51d6:	6a ec       	ldi	r22, 0xCA	; 202
    51d8:	36 07       	cpc	r19, r22
    51da:	6a e9       	ldi	r22, 0x9A	; 154
    51dc:	46 07       	cpc	r20, r22
    51de:	6b e3       	ldi	r22, 0x3B	; 59
    51e0:	56 07       	cpc	r21, r22
    51e2:	b0 f6       	brcc	.-84     	; 0x5190 <_nrk_scheduler+0x84>
    51e4:	80 93 4c 07 	sts	0x074C, r24
    51e8:	90 93 4d 07 	sts	0x074D, r25
    51ec:	a0 93 4e 07 	sts	0x074E, r26
    51f0:	b0 93 4f 07 	sts	0x074F, r27
    51f4:	20 93 50 07 	sts	0x0750, r18
    51f8:	30 93 51 07 	sts	0x0751, r19
    51fc:	40 93 52 07 	sts	0x0752, r20
    5200:	50 93 53 07 	sts	0x0753, r21
    	key_buf=(key[i]<<8)|key[i+1]; 
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
	}

// Set AES nonce to all zeros
    5204:	e0 91 55 07 	lds	r30, 0x0755
    5208:	f0 91 56 07 	lds	r31, 0x0756
    520c:	85 81       	ldd	r24, Z+5	; 0x05
    520e:	88 23       	and	r24, r24
    5210:	19 f1       	breq	.+70     	; 0x5258 <_nrk_scheduler+0x14c>
    5212:	81 85       	ldd	r24, Z+9	; 0x09
    5214:	84 30       	cpi	r24, 0x04	; 4
    5216:	01 f1       	breq	.+64     	; 0x5258 <_nrk_scheduler+0x14c>
nrk_spin_wait_us(100); 
for(i=0; i<7; i++ )
	{
    	key_buf=0; 
    5218:	87 81       	ldd	r24, Z+7	; 0x07
    521a:	82 30       	cpi	r24, 0x02	; 2
    521c:	29 f0       	breq	.+10     	; 0x5228 <_nrk_scheduler+0x11c>
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
    521e:	88 23       	and	r24, r24
    5220:	41 f0       	breq	.+16     	; 0x5232 <_nrk_scheduler+0x126>
    5222:	86 81       	ldd	r24, Z+6	; 0x06
    5224:	88 23       	and	r24, r24
    5226:	11 f4       	brne	.+4      	; 0x522c <_nrk_scheduler+0x120>
	}
    5228:	85 e0       	ldi	r24, 0x05	; 5
    522a:	01 c0       	rjmp	.+2      	; 0x522e <_nrk_scheduler+0x122>
	// block counter set 1
    	key_buf=1; 
    522c:	83 e0       	ldi	r24, 0x03	; 3
    522e:	81 87       	std	Z+9, r24	; 0x09
    5230:	0c c0       	rjmp	.+24     	; 0x524a <_nrk_scheduler+0x13e>
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
}
    5232:	83 e0       	ldi	r24, 0x03	; 3
    5234:	81 87       	std	Z+9, r24	; 0x09

    5236:	e0 91 55 07 	lds	r30, 0x0755
    523a:	f0 91 56 07 	lds	r31, 0x0756
    523e:	17 82       	std	Z+7, r1	; 0x07
void rf_security_enable(uint8_t *key)
    5240:	e0 91 55 07 	lds	r30, 0x0755
    5244:	f0 91 56 07 	lds	r31, 0x0756
    5248:	16 82       	std	Z+6, r1	; 0x06
{
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x0306); // Enable CTR encryption with key 0
    524a:	e0 91 55 07 	lds	r30, 0x0755
    524e:	f0 91 56 07 	lds	r31, 0x0756
    5252:	80 85       	ldd	r24, Z+8	; 0x08
    5254:	0e 94 21 23 	call	0x4642	; 0x4642 <nrk_rem_from_readyQ>
security_enable=1;
}



void rf_security_disable()
    5258:	e0 91 55 07 	lds	r30, 0x0755
    525c:	f0 91 56 07 	lds	r31, 0x0756
    5260:	85 8d       	ldd	r24, Z+29	; 0x1d
    5262:	96 8d       	ldd	r25, Z+30	; 0x1e
    5264:	89 2b       	or	r24, r25
    5266:	91 f1       	breq	.+100    	; 0x52cc <_nrk_scheduler+0x1c0>
    5268:	60 85       	ldd	r22, Z+8	; 0x08
    526a:	66 23       	and	r22, r22
    526c:	79 f1       	breq	.+94     	; 0x52cc <_nrk_scheduler+0x1c0>
    526e:	81 85       	ldd	r24, Z+9	; 0x09
    5270:	84 30       	cpi	r24, 0x04	; 4
    5272:	61 f1       	breq	.+88     	; 0x52cc <_nrk_scheduler+0x1c0>
{
  FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security enable"
    5274:	21 8d       	ldd	r18, Z+25	; 0x19
    5276:	32 8d       	ldd	r19, Z+26	; 0x1a
    5278:	80 91 9a 06 	lds	r24, 0x069A
    527c:	99 27       	eor	r25, r25
    527e:	28 17       	cp	r18, r24
    5280:	39 07       	cpc	r19, r25
    5282:	50 f4       	brcc	.+20     	; 0x5298 <_nrk_scheduler+0x18c>
  security_enable=0;
}

//-------------------------------------------------------------------------------------------------------
// The RF settings structure is declared here, since we'll always need halRfInit()
    5284:	82 e0       	ldi	r24, 0x02	; 2
    5286:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <nrk_kernel_error_add>
volatile RF_SETTINGS rfSettings;
    528a:	e0 91 55 07 	lds	r30, 0x0755
    528e:	f0 91 56 07 	lds	r31, 0x0756
    5292:	12 8e       	std	Z+26, r1	; 0x1a
    5294:	11 8e       	std	Z+25, r1	; 0x19
    5296:	04 c0       	rjmp	.+8      	; 0x52a0 <_nrk_scheduler+0x194>
volatile uint8_t rx_ready;
//-------------------------------------------------------------------------------------------------------
    5298:	28 1b       	sub	r18, r24
    529a:	39 0b       	sbc	r19, r25
    529c:	32 8f       	std	Z+26, r19	; 0x1a
    529e:	21 8f       	std	Z+25, r18	; 0x19
nrk_sem_t* rf_get_sem()
{
    52a0:	e0 91 55 07 	lds	r30, 0x0755
    52a4:	f0 91 56 07 	lds	r31, 0x0756
    52a8:	10 85       	ldd	r17, Z+8	; 0x08
return radio_sem;
}
    52aa:	81 8d       	ldd	r24, Z+25	; 0x19
    52ac:	92 8d       	ldd	r25, Z+26	; 0x1a
    52ae:	89 2b       	or	r24, r25
    52b0:	69 f4       	brne	.+26     	; 0x52cc <_nrk_scheduler+0x1c0>

void rf_tx_power(uint8_t pwr)
{
uint16_t tmp;
    52b2:	61 2f       	mov	r22, r17
    52b4:	83 e0       	ldi	r24, 0x03	; 3
    52b6:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <nrk_kernel_error_add>
    //tmp=0x5070;
    52ba:	e0 91 55 07 	lds	r30, 0x0755
    52be:	f0 91 56 07 	lds	r31, 0x0756
    52c2:	83 e0       	ldi	r24, 0x03	; 3
    52c4:	81 87       	std	Z+9, r24	; 0x09
#ifdef RADIO_PRIORITY_CEILING
    52c6:	81 2f       	mov	r24, r17
    52c8:	0e 94 21 23 	call	0x4642	; 0x4642 <nrk_rem_from_readyQ>
    52cc:	c8 eb       	ldi	r28, 0xB8	; 184
    52ce:	d6 e0       	ldi	r29, 0x06	; 6
    52d0:	00 e6       	ldi	r16, 0x60	; 96
    52d2:	1a ee       	ldi	r17, 0xEA	; 234
    52d4:	cc 24       	eor	r12, r12
    52d6:	dd 24       	eor	r13, r13
    52d8:	ec 2d       	mov	r30, r12
    tmp=tmp | (pwr&0x1F);  
    FASTSPI_SETREG(CC2420_TXCTRL, tmp);   // Set the FIFOP threshold to maximum
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
}
    52da:	88 85       	ldd	r24, Y+8	; 0x08
    52dc:	8f 3f       	cpi	r24, 0xFF	; 255
    52de:	09 f4       	brne	.+2      	; 0x52e2 <_nrk_scheduler+0x1d6>
    52e0:	94 c0       	rjmp	.+296    	; 0x540a <_nrk_scheduler+0x2fe>
void rf_set_channel( uint8_t channel )
    52e2:	1d 82       	std	Y+5, r1	; 0x05
{
    52e4:	88 23       	and	r24, r24
    52e6:	91 f1       	breq	.+100    	; 0x534c <_nrk_scheduler+0x240>
    52e8:	89 85       	ldd	r24, Y+9	; 0x09
    52ea:	84 30       	cpi	r24, 0x04	; 4
    52ec:	79 f1       	breq	.+94     	; 0x534c <_nrk_scheduler+0x240>
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    52ee:	2d 89       	ldd	r18, Y+21	; 0x15
    52f0:	3e 89       	ldd	r19, Y+22	; 0x16
    52f2:	80 91 9a 06 	lds	r24, 0x069A
    52f6:	99 27       	eor	r25, r25
    52f8:	28 17       	cp	r18, r24
    52fa:	39 07       	cpc	r19, r25
    52fc:	28 f0       	brcs	.+10     	; 0x5308 <_nrk_scheduler+0x1fc>
#endif
    52fe:	28 1b       	sub	r18, r24
    5300:	39 0b       	sbc	r19, r25
    5302:	3e 8b       	std	Y+22, r19	; 0x16
    5304:	2d 8b       	std	Y+21, r18	; 0x15
    5306:	02 c0       	rjmp	.+4      	; 0x530c <_nrk_scheduler+0x200>
    halRfSetChannel(channel);
#ifdef RADIO_PRIORITY_CEILING
    5308:	1e 8a       	std	Y+22, r1	; 0x16
    530a:	1d 8a       	std	Y+21, r1	; 0x15
    nrk_sem_post(radio_sem);
#endif
}


    530c:	2f 89       	ldd	r18, Y+23	; 0x17
    530e:	38 8d       	ldd	r19, Y+24	; 0x18
    5310:	28 17       	cp	r18, r24
    5312:	39 07       	cpc	r19, r25
    5314:	28 f0       	brcs	.+10     	; 0x5320 <_nrk_scheduler+0x214>
void rf_addr_decode_enable()
    5316:	28 1b       	sub	r18, r24
    5318:	39 0b       	sbc	r19, r25
    531a:	38 8f       	std	Y+24, r19	; 0x18
    531c:	2f 8b       	std	Y+23, r18	; 0x17
    531e:	0e c0       	rjmp	.+28     	; 0x533c <_nrk_scheduler+0x230>
{
    mdmctrl0 |= 0x0800;
    5320:	6b 8d       	ldd	r22, Y+27	; 0x1b
    5322:	7c 8d       	ldd	r23, Y+28	; 0x1c
    5324:	86 17       	cp	r24, r22
    5326:	97 07       	cpc	r25, r23
    5328:	28 f4       	brcc	.+10     	; 0x5334 <_nrk_scheduler+0x228>
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
    532a:	68 1b       	sub	r22, r24
    532c:	79 0b       	sbc	r23, r25
    532e:	78 8f       	std	Y+24, r23	; 0x18
    5330:	6f 8b       	std	Y+23, r22	; 0x17
    5332:	04 c0       	rjmp	.+8      	; 0x533c <_nrk_scheduler+0x230>
}

    5334:	0e 94 91 34 	call	0x6922	; 0x6922 <__udivmodhi4>
    5338:	98 8f       	std	Y+24, r25	; 0x18
    533a:	8f 8b       	std	Y+23, r24	; 0x17
void rf_addr_decode_disable()
{
    533c:	8f 89       	ldd	r24, Y+23	; 0x17
    533e:	98 8d       	ldd	r25, Y+24	; 0x18
    5340:	89 2b       	or	r24, r25
    5342:	21 f4       	brne	.+8      	; 0x534c <_nrk_scheduler+0x240>
    5344:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5346:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5348:	98 8f       	std	Y+24, r25	; 0x18
    534a:	8f 8b       	std	Y+23, r24	; 0x17
    mdmctrl0 &= (~0x0800);
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
}


void rf_auto_ack_enable()
    534c:	89 85       	ldd	r24, Y+9	; 0x09
    534e:	83 30       	cpi	r24, 0x03	; 3
    5350:	09 f0       	breq	.+2      	; 0x5354 <_nrk_scheduler+0x248>
    5352:	5b c0       	rjmp	.+182    	; 0x540a <_nrk_scheduler+0x2fe>
{
    auto_ack_enable=1;
    mdmctrl0 |= 0x0010;
    5354:	8d 89       	ldd	r24, Y+21	; 0x15
    5356:	9e 89       	ldd	r25, Y+22	; 0x16
    5358:	89 2b       	or	r24, r25
    535a:	09 f0       	breq	.+2      	; 0x535e <_nrk_scheduler+0x252>
    535c:	4e c0       	rjmp	.+156    	; 0x53fa <_nrk_scheduler+0x2ee>
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0); 
}
    535e:	8f 81       	ldd	r24, Y+7	; 0x07
    5360:	88 23       	and	r24, r24
    5362:	a1 f0       	breq	.+40     	; 0x538c <_nrk_scheduler+0x280>
    5364:	8e 81       	ldd	r24, Y+6	; 0x06
    5366:	88 23       	and	r24, r24
    5368:	89 f0       	breq	.+34     	; 0x538c <_nrk_scheduler+0x280>
    536a:	81 e0       	ldi	r24, 0x01	; 1
    536c:	90 e0       	ldi	r25, 0x00	; 0
    536e:	a0 e0       	ldi	r26, 0x00	; 0
    5370:	b0 e0       	ldi	r27, 0x00	; 0
    5372:	00 90 45 07 	lds	r0, 0x0745
    5376:	04 c0       	rjmp	.+8      	; 0x5380 <_nrk_scheduler+0x274>
    5378:	88 0f       	add	r24, r24
    537a:	99 1f       	adc	r25, r25
    537c:	aa 1f       	adc	r26, r26
    537e:	bb 1f       	adc	r27, r27
    5380:	0a 94       	dec	r0
    5382:	d2 f7       	brpl	.-12     	; 0x5378 <_nrk_scheduler+0x26c>
    5384:	89 8b       	std	Y+17, r24	; 0x11
    5386:	9a 8b       	std	Y+18, r25	; 0x12
    5388:	ab 8b       	std	Y+19, r26	; 0x13
    538a:	bc 8b       	std	Y+20, r27	; 0x14

void rf_auto_ack_disable()
    538c:	1f 82       	std	Y+7, r1	; 0x07
{
    538e:	1e 82       	std	Y+6, r1	; 0x06
    auto_ack_enable=0;
    5390:	1d 82       	std	Y+5, r1	; 0x05
    mdmctrl0 &= (~0x0010);
    5392:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5394:	98 a1       	ldd	r25, Y+32	; 0x20
    5396:	4b 8d       	ldd	r20, Y+27	; 0x1b
    5398:	5c 8d       	ldd	r21, Y+28	; 0x1c
    539a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    539c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    539e:	81 30       	cpi	r24, 0x01	; 1
    53a0:	91 05       	cpc	r25, r1
    53a2:	91 f4       	brne	.+36     	; 0x53c8 <_nrk_scheduler+0x2bc>
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
}
    53a4:	3a 8f       	std	Y+26, r19	; 0x1a
    53a6:	29 8f       	std	Y+25, r18	; 0x19

    53a8:	82 e0       	ldi	r24, 0x02	; 2
    53aa:	89 87       	std	Y+9, r24	; 0x09

    53ac:	8f 89       	ldd	r24, Y+23	; 0x17
    53ae:	98 8d       	ldd	r25, Y+24	; 0x18
    53b0:	9e 8b       	std	Y+22, r25	; 0x16
    53b2:	8d 8b       	std	Y+21, r24	; 0x15
void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
    53b4:	45 2b       	or	r20, r21
    53b6:	21 f4       	brne	.+8      	; 0x53c0 <_nrk_scheduler+0x2b4>
    53b8:	8a ef       	ldi	r24, 0xFA	; 250
    53ba:	90 e0       	ldi	r25, 0x00	; 0
    53bc:	9e 8b       	std	Y+22, r25	; 0x16
    53be:	8d 8b       	std	Y+21, r24	; 0x15
uint8_t n;
    53c0:	8e 2f       	mov	r24, r30
    53c2:	0e 94 9a 22 	call	0x4534	; 0x4534 <nrk_add_to_readyQ>
    53c6:	19 c0       	rjmp	.+50     	; 0x53fa <_nrk_scheduler+0x2ee>
    rfSettings.myAddr = my_mac;
    nrk_spin_wait_us(500);
    FASTSPI_WRITE_RAM_LE(&my_mac, CC2420RAM_SHORTADDR, 2, n);
    53c8:	3a 8f       	std	Y+26, r19	; 0x1a
    53ca:	29 8f       	std	Y+25, r18	; 0x19
    nrk_spin_wait_us(500);
}

    53cc:	01 97       	sbiw	r24, 0x01	; 1
    53ce:	9c 01       	movw	r18, r24
    53d0:	24 9f       	mul	r18, r20
    53d2:	c0 01       	movw	r24, r0
    53d4:	25 9f       	mul	r18, r21
    53d6:	90 0d       	add	r25, r0
    53d8:	34 9f       	mul	r19, r20
    53da:	90 0d       	add	r25, r0
    53dc:	11 24       	eor	r1, r1
    53de:	9e 8b       	std	Y+22, r25	; 0x16
    53e0:	8d 8b       	std	Y+21, r24	; 0x15

    53e2:	98 8f       	std	Y+24, r25	; 0x18
    53e4:	8f 8b       	std	Y+23, r24	; 0x17

    53e6:	45 2b       	or	r20, r21
    53e8:	21 f4       	brne	.+8      	; 0x53f2 <_nrk_scheduler+0x2e6>
    53ea:	8a ef       	ldi	r24, 0xFA	; 250
    53ec:	90 e0       	ldi	r25, 0x00	; 0
    53ee:	9e 8b       	std	Y+22, r25	; 0x16
    53f0:	8d 8b       	std	Y+21, r24	; 0x15
void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
    53f2:	81 e0       	ldi	r24, 0x01	; 1
    53f4:	90 e0       	ldi	r25, 0x00	; 0
    53f6:	98 a3       	std	Y+32, r25	; 0x20
    53f8:	8f 8f       	std	Y+31, r24	; 0x1f
{

#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif

    53fa:	8d 89       	ldd	r24, Y+21	; 0x15
    53fc:	9e 89       	ldd	r25, Y+22	; 0x16
    53fe:	00 97       	sbiw	r24, 0x00	; 0
    5400:	21 f0       	breq	.+8      	; 0x540a <_nrk_scheduler+0x2fe>
    5402:	80 17       	cp	r24, r16
    5404:	91 07       	cpc	r25, r17
    5406:	08 f4       	brcc	.+2      	; 0x540a <_nrk_scheduler+0x2fe>
    5408:	8c 01       	movw	r16, r24
    540a:	08 94       	sec
    540c:	c1 1c       	adc	r12, r1
    540e:	d1 1c       	adc	r13, r1
    5410:	a1 96       	adiw	r28, 0x21	; 33
    tmp=0xA0E0;
    tmp=tmp | (pwr&0x1F);  
    FASTSPI_SETREG(CC2420_TXCTRL, tmp);   // Set the FIFOP threshold to maximum
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
    5412:	34 e0       	ldi	r19, 0x04	; 4
    5414:	c3 16       	cp	r12, r19
    5416:	d1 04       	cpc	r13, r1
    5418:	09 f0       	breq	.+2      	; 0x541c <_nrk_scheduler+0x310>
    541a:	5e cf       	rjmp	.-324    	; 0x52d8 <_nrk_scheduler+0x1cc>
}
//-------------------------------------------------------------------------------------------------------
//  void rf_init(RF_RX_INFO *pRRI, uint8_t channel, WORD panId, WORD myAddr)
//
//  DESCRIPTION:
//      Initializes CC2420 for radio communication via the basic RF library functions. Turns on the
    541c:	0e 94 88 22 	call	0x4510	; 0x4510 <nrk_get_high_ready_task_ID>
    5420:	e8 2e       	mov	r14, r24
//		voltage regulator, resets the CC2420, turns on the crystal oscillator, writes all necessary
    5422:	99 27       	eor	r25, r25
    5424:	87 fd       	sbrc	r24, 7
    5426:	90 95       	com	r25
    5428:	fc 01       	movw	r30, r24
    542a:	25 e0       	ldi	r18, 0x05	; 5
    542c:	ee 0f       	add	r30, r30
    542e:	ff 1f       	adc	r31, r31
    5430:	2a 95       	dec	r18
    5432:	e1 f7       	brne	.-8      	; 0x542c <_nrk_scheduler+0x320>
    5434:	e8 0f       	add	r30, r24
    5436:	f9 1f       	adc	r31, r25
    5438:	e8 54       	subi	r30, 0x48	; 72
    543a:	f9 4f       	sbci	r31, 0xF9	; 249
    543c:	42 85       	ldd	r20, Z+10	; 0x0a
    543e:	40 93 57 07 	sts	0x0757, r20
//		registers and protocol addresses (for automatic address recognition). Note that the crystal
    5442:	81 e2       	ldi	r24, 0x21	; 33
    5444:	6e 2d       	mov	r22, r14
    5446:	68 02       	muls	r22, r24
    5448:	90 01       	movw	r18, r0
    544a:	11 24       	eor	r1, r1
    544c:	28 54       	subi	r18, 0x48	; 72
    544e:	39 4f       	sbci	r19, 0xF9	; 249
    5450:	30 93 47 07 	sts	0x0747, r19
    5454:	20 93 46 07 	sts	0x0746, r18
//  ARGUMENTS:
//      RF_RX_INFO *pRRI
//          A pointer the RF_RX_INFO data structure to be used during the first packet reception.
//			The structure can be switched upon packet reception.
//      uint8_t channel
//          The RF channel to be used (11 = 2405 MHz to 26 = 2480 MHz)
    5458:	ee 20       	and	r14, r14
    545a:	91 f0       	breq	.+36     	; 0x5480 <_nrk_scheduler+0x374>
//      WORD panId
//          The personal area network identification number
//      WORD myAddr
    545c:	85 8d       	ldd	r24, Z+29	; 0x1d
    545e:	96 8d       	ldd	r25, Z+30	; 0x1e
    5460:	89 2b       	or	r24, r25
    5462:	51 f0       	breq	.+20     	; 0x5478 <_nrk_scheduler+0x36c>
    5464:	81 8d       	ldd	r24, Z+25	; 0x19
    5466:	92 8d       	ldd	r25, Z+26	; 0x1a
    5468:	8a 3f       	cpi	r24, 0xFA	; 250
    546a:	91 05       	cpc	r25, r1
    546c:	28 f4       	brcc	.+10     	; 0x5478 <_nrk_scheduler+0x36c>
    546e:	80 17       	cp	r24, r16
    5470:	91 07       	cpc	r25, r17
    5472:	e0 f4       	brcc	.+56     	; 0x54ac <_nrk_scheduler+0x3a0>
    5474:	8c 01       	movw	r16, r24
    5476:	1a c0       	rjmp	.+52     	; 0x54ac <_nrk_scheduler+0x3a0>
    5478:	0b 3f       	cpi	r16, 0xFB	; 251
    547a:	11 05       	cpc	r17, r1
    547c:	b8 f0       	brcs	.+46     	; 0x54ac <_nrk_scheduler+0x3a0>
    547e:	14 c0       	rjmp	.+40     	; 0x54a8 <_nrk_scheduler+0x39c>
      nrk_kernel_error_add (NRK_SEMAPHORE_CREATE_ERROR, nrk_get_pid ());

  v = nrk_sem_pend (radio_sem);
  if (v == NRK_ERROR) {
    nrk_kprintf (PSTR ("CC2420 ERROR:  Access to semaphore failed\r\n"));
  }
    5480:	0b 30       	cpi	r16, 0x0B	; 11
    5482:	11 05       	cpc	r17, r1
    5484:	98 f0       	brcs	.+38     	; 0x54ac <_nrk_scheduler+0x3a0>
#endif

    5486:	c8 01       	movw	r24, r16
    5488:	0a 97       	sbiw	r24, 0x0a	; 10
    548a:	8a 3f       	cpi	r24, 0xFA	; 250
    548c:	91 05       	cpc	r25, r1
    548e:	30 f4       	brcc	.+12     	; 0x549c <_nrk_scheduler+0x390>
    5490:	8c 01       	movw	r16, r24
    5492:	09 97       	sbiw	r24, 0x09	; 9
    5494:	58 f4       	brcc	.+22     	; 0x54ac <_nrk_scheduler+0x3a0>
    5496:	09 e0       	ldi	r16, 0x09	; 9
    5498:	10 e0       	ldi	r17, 0x00	; 0
    549a:	08 c0       	rjmp	.+16     	; 0x54ac <_nrk_scheduler+0x3a0>
    halWait(1000);
    SET_RESET_ACTIVE();
    halWait(1);
    SET_RESET_INACTIVE();
    halWait(100);

    549c:	05 50       	subi	r16, 0x05	; 5
    549e:	11 40       	sbci	r17, 0x01	; 1
    54a0:	18 f4       	brcc	.+6      	; 0x54a8 <_nrk_scheduler+0x39c>
    54a2:	00 ef       	ldi	r16, 0xF0	; 240
    54a4:	10 e0       	ldi	r17, 0x00	; 0
    54a6:	02 c0       	rjmp	.+4      	; 0x54ac <_nrk_scheduler+0x3a0>
    54a8:	0a ef       	ldi	r16, 0xFA	; 250
    54aa:	10 e0       	ldi	r17, 0x00	; 0
    nrk_spin_wait_us(500);
    nrk_spin_wait_us(500);
    FASTSPI_WRITE_RAM_LE(&myAddr, CC2420RAM_SHORTADDR, 2, n);
    nrk_spin_wait_us(500);
    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
    nrk_spin_wait_us(500);
    54ac:	40 93 48 07 	sts	0x0748, r20
    
    54b0:	30 93 56 07 	sts	0x0756, r19
    54b4:	20 93 55 07 	sts	0x0755, r18
    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
    nrk_spin_wait_us(500);

  	ENABLE_GLOBAL_INT();

    // Set the RF channel
    54b8:	00 93 9a 06 	sts	0x069A, r16
    halRfSetChannel(channel);

    // Turn interrupts back on
    54bc:	0e 94 ca 2c 	call	0x5994	; 0x5994 <_nrk_os_timer_get>
    54c0:	99 27       	eor	r25, r25
    54c2:	01 96       	adiw	r24, 0x01	; 1
    54c4:	80 17       	cp	r24, r16
    54c6:	91 07       	cpc	r25, r17
    54c8:	40 f0       	brcs	.+16     	; 0x54da <_nrk_scheduler+0x3ce>
	rfSettings.myAddr = myAddr;
	rfSettings.txSeqNumber = 0;
        rfSettings.receiveOn = FALSE;

	// Wait for the crystal oscillator to become stable
    halRfWaitForCrystalOscillator();
    54ca:	0e 94 ca 2c 	call	0x5994	; 0x5994 <_nrk_os_timer_get>
    54ce:	08 2f       	mov	r16, r24
    54d0:	11 27       	eor	r17, r17
    54d2:	0e 5f       	subi	r16, 0xFE	; 254
    54d4:	1f 4f       	sbci	r17, 0xFF	; 255

    54d6:	00 93 9a 06 	sts	0x069A, r16
	// Write the short address and the PAN ID to the CC2420 RAM (requires that the XOSC is on and stable)
   //	DISABLE_GLOBAL_INT();
//    FASTSPI_WRITE_RAM_LE(&myAddr, CC2420RAM_SHORTADDR, 2, n);
    54da:	ee 20       	and	r14, r14
    54dc:	11 f0       	breq	.+4      	; 0x54e2 <_nrk_scheduler+0x3d6>
    54de:	10 92 49 07 	sts	0x0749, r1
//    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
  //	ENABLE_GLOBAL_INT();
    54e2:	80 2f       	mov	r24, r16
    54e4:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <_nrk_set_next_wakeup>

#ifdef RADIO_PRIORITY_CEILING
  v = nrk_sem_post (radio_sem);
  if (v == NRK_ERROR) {
    54e8:	6e ee       	ldi	r22, 0xEE	; 238
    54ea:	72 e0       	ldi	r23, 0x02	; 2
    54ec:	c4 01       	movw	r24, r8
    54ee:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <nrk_high_speed_timer_wait>
    nrk_kprintf (PSTR ("CC2420 ERROR:  Release of semaphore failed\r\n"));
    _nrk_errno_set (2);
    54f2:	0e 94 08 30 	call	0x6010	; 0x6010 <nrk_stack_pointer_restore>
  }
#endif
    54f6:	0e 94 35 30 	call	0x606a	; 0x606a <nrk_start_high_ready_task>
    54fa:	df 91       	pop	r29
    54fc:	cf 91       	pop	r28
    54fe:	1f 91       	pop	r17
    5500:	0f 91       	pop	r16
    5502:	ff 90       	pop	r15
    5504:	ef 90       	pop	r14
    5506:	df 90       	pop	r13
    5508:	cf 90       	pop	r12
    550a:	bf 90       	pop	r11
    550c:	af 90       	pop	r10
    550e:	9f 90       	pop	r9
    5510:	8f 90       	pop	r8
    5512:	08 95       	ret

00005514 <_nrk_reserve_init>:
    nrk_gpio_set(NRK_DEBUG_1);
    nrk_gpio_clr(NRK_DEBUG_0);
}


void cc259x_tx()
    5514:	8f ef       	ldi	r24, 0xFF	; 255
    5516:	80 93 82 07 	sts	0x0782, r24
    551a:	80 93 95 07 	sts	0x0795, r24
    551e:	80 93 a8 07 	sts	0x07A8, r24
    5522:	80 93 bb 07 	sts	0x07BB, r24
    5526:	80 93 ce 07 	sts	0x07CE, r24
    552a:	08 95       	ret

0000552c <nrk_reserve_create>:
{
    nrk_gpio_set(NRK_DEBUG_1);
    nrk_gpio_set(NRK_DEBUG_0);
}


    552c:	e2 e8       	ldi	r30, 0x82	; 130
    552e:	f7 e0       	ldi	r31, 0x07	; 7
    5530:	80 e0       	ldi	r24, 0x00	; 0
    5532:	90 e0       	ldi	r25, 0x00	; 0
    5534:	9c 01       	movw	r18, r24
//#ifndef RADIO_PRIORITY_CEILING
//  #define RADIO_PRIORITY_CEILING	20
//#endif
    5536:	80 81       	ld	r24, Z
    5538:	8f 3f       	cpi	r24, 0xFF	; 255
    553a:	71 f4       	brne	.+28     	; 0x5558 <nrk_reserve_create+0x2c>

nrk_sem_t *radio_sem;
    553c:	83 e1       	ldi	r24, 0x13	; 19
    553e:	90 e0       	ldi	r25, 0x00	; 0
    5540:	28 9f       	mul	r18, r24
    5542:	f0 01       	movw	r30, r0
    5544:	29 9f       	mul	r18, r25
    5546:	f0 0d       	add	r31, r0
    5548:	38 9f       	mul	r19, r24
    554a:	f0 0d       	add	r31, r0
    554c:	11 24       	eor	r1, r1
    554e:	ee 58       	subi	r30, 0x8E	; 142
    5550:	f8 4f       	sbci	r31, 0xF8	; 248
    5552:	81 e0       	ldi	r24, 0x01	; 1
    5554:	80 8b       	std	Z+16, r24	; 0x10
    5556:	08 c0       	rjmp	.+16     	; 0x5568 <nrk_reserve_create+0x3c>
uint8_t auto_ack_enable;
    5558:	c9 01       	movw	r24, r18
    555a:	01 96       	adiw	r24, 0x01	; 1
    555c:	73 96       	adiw	r30, 0x13	; 19
    nrk_gpio_set(NRK_DEBUG_0);
}


//#ifndef RADIO_PRIORITY_CEILING
//  #define RADIO_PRIORITY_CEILING	20
    555e:	85 30       	cpi	r24, 0x05	; 5
    5560:	91 05       	cpc	r25, r1
    5562:	41 f7       	brne	.-48     	; 0x5534 <nrk_reserve_create+0x8>
    5564:	2f ef       	ldi	r18, 0xFF	; 255
    5566:	3f ef       	ldi	r19, 0xFF	; 255
uint8_t auto_ack_enable;
uint8_t security_enable;
uint8_t last_pkt_encrypted;
uint16_t mdmctrl0;
uint8_t tx_ctr[4];
uint8_t rx_ctr[4];
    5568:	c9 01       	movw	r24, r18
    556a:	08 95       	ret

0000556c <nrk_reserve_delete>:
void rf_power_down()
{
    DISABLE_GLOBAL_INT();
    FASTSPI_STROBE(CC2420_SXOSCOFF);
    FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
    ENABLE_GLOBAL_INT();
    556c:	85 30       	cpi	r24, 0x05	; 5
    556e:	a8 f4       	brcc	.+42     	; 0x559a <nrk_reserve_delete+0x2e>
}
    5570:	99 27       	eor	r25, r25
    5572:	87 fd       	sbrc	r24, 7
    5574:	90 95       	com	r25
    5576:	23 e1       	ldi	r18, 0x13	; 19
    5578:	30 e0       	ldi	r19, 0x00	; 0
    557a:	82 9f       	mul	r24, r18
    557c:	f0 01       	movw	r30, r0
    557e:	83 9f       	mul	r24, r19
    5580:	f0 0d       	add	r31, r0
    5582:	92 9f       	mul	r25, r18
    5584:	f0 0d       	add	r31, r0
    5586:	11 24       	eor	r1, r1
    5588:	ee 58       	subi	r30, 0x8E	; 142
    558a:	f8 4f       	sbci	r31, 0xF8	; 248
    558c:	80 89       	ldd	r24, Z+16	; 0x10
    558e:	81 30       	cpi	r24, 0x01	; 1
    5590:	21 f4       	brne	.+8      	; 0x559a <nrk_reserve_delete+0x2e>

    5592:	10 8a       	std	Z+16, r1	; 0x10
    5594:	81 e0       	ldi	r24, 0x01	; 1
    5596:	90 e0       	ldi	r25, 0x00	; 0
    5598:	08 95       	ret
void rf_power_up()
    559a:	8f ef       	ldi	r24, 0xFF	; 255
    559c:	9f ef       	ldi	r25, 0xFF	; 255
{

    DISABLE_GLOBAL_INT();
    FASTSPI_STROBE(CC2420_SXOSCON);
    559e:	08 95       	ret

000055a0 <nrk_reserve_set>:
volatile uint8_t rx_ready;
//-------------------------------------------------------------------------------------------------------
nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    55a0:	cf 92       	push	r12
    55a2:	df 92       	push	r13
    55a4:	ef 92       	push	r14
    55a6:	ff 92       	push	r15
    55a8:	0f 93       	push	r16
    55aa:	1f 93       	push	r17
    55ac:	cf 93       	push	r28
    55ae:	df 93       	push	r29
    55b0:	cd b7       	in	r28, 0x3d	; 61
    55b2:	de b7       	in	r29, 0x3e	; 62
    55b4:	28 97       	sbiw	r28, 0x08	; 8
    55b6:	0f b6       	in	r0, 0x3f	; 63
    55b8:	f8 94       	cli
    55ba:	de bf       	out	0x3e, r29	; 62
    55bc:	0f be       	out	0x3f, r0	; 63
    55be:	cd bf       	out	0x3d, r28	; 61
    55c0:	7a 01       	movw	r14, r20
    55c2:	69 01       	movw	r12, r18

void rf_tx_power(uint8_t pwr)
{
    55c4:	85 30       	cpi	r24, 0x05	; 5
    55c6:	08 f0       	brcs	.+2      	; 0x55ca <nrk_reserve_set+0x2a>
    55c8:	59 c0       	rjmp	.+178    	; 0x567c <nrk_reserve_set+0xdc>
uint16_t tmp;
    //tmp=0x5070;
    55ca:	99 27       	eor	r25, r25
    55cc:	23 e1       	ldi	r18, 0x13	; 19
    55ce:	30 e0       	ldi	r19, 0x00	; 0
    55d0:	82 9f       	mul	r24, r18
    55d2:	80 01       	movw	r16, r0
    55d4:	83 9f       	mul	r24, r19
    55d6:	10 0d       	add	r17, r0
    55d8:	92 9f       	mul	r25, r18
    55da:	10 0d       	add	r17, r0
    55dc:	11 24       	eor	r1, r1
    55de:	0e 58       	subi	r16, 0x8E	; 142
    55e0:	18 4f       	sbci	r17, 0xF8	; 248
    55e2:	f8 01       	movw	r30, r16
    55e4:	80 89       	ldd	r24, Z+16	; 0x10
    55e6:	8f 3f       	cpi	r24, 0xFF	; 255
    55e8:	09 f4       	brne	.+2      	; 0x55ec <nrk_reserve_set+0x4c>
    55ea:	48 c0       	rjmp	.+144    	; 0x567c <nrk_reserve_set+0xdc>
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    55ec:	fb 01       	movw	r30, r22
    55ee:	80 81       	ld	r24, Z
    55f0:	91 81       	ldd	r25, Z+1	; 0x01
    55f2:	a2 81       	ldd	r26, Z+2	; 0x02
    55f4:	b3 81       	ldd	r27, Z+3	; 0x03
    55f6:	89 83       	std	Y+1, r24	; 0x01
    55f8:	9a 83       	std	Y+2, r25	; 0x02
    55fa:	ab 83       	std	Y+3, r26	; 0x03
    55fc:	bc 83       	std	Y+4, r27	; 0x04
    tmp=0xA0E0;
    55fe:	84 81       	ldd	r24, Z+4	; 0x04
    5600:	95 81       	ldd	r25, Z+5	; 0x05
    5602:	a6 81       	ldd	r26, Z+6	; 0x06
    5604:	b7 81       	ldd	r27, Z+7	; 0x07
    5606:	8d 83       	std	Y+5, r24	; 0x05
    5608:	9e 83       	std	Y+6, r25	; 0x06
    560a:	af 83       	std	Y+7, r26	; 0x07
    560c:	b8 87       	std	Y+8, r27	; 0x08
    tmp=tmp | (pwr&0x1F);  
    560e:	29 81       	ldd	r18, Y+1	; 0x01
    5610:	3a 81       	ldd	r19, Y+2	; 0x02
    5612:	4b 81       	ldd	r20, Y+3	; 0x03
    5614:	5c 81       	ldd	r21, Y+4	; 0x04
    5616:	6d 81       	ldd	r22, Y+5	; 0x05
    5618:	7e 81       	ldd	r23, Y+6	; 0x06
    561a:	8f 81       	ldd	r24, Y+7	; 0x07
    561c:	98 85       	ldd	r25, Y+8	; 0x08
    561e:	0e 94 7f 27 	call	0x4efe	; 0x4efe <_nrk_time_to_ticks_long>
    5622:	f8 01       	movw	r30, r16
    5624:	60 83       	st	Z, r22
    5626:	71 83       	std	Z+1, r23	; 0x01
    5628:	82 83       	std	Z+2, r24	; 0x02
    562a:	93 83       	std	Z+3, r25	; 0x03
    FASTSPI_SETREG(CC2420_TXCTRL, tmp);   // Set the FIFOP threshold to maximum
    562c:	f5 86       	std	Z+13, r15	; 0x0d
    562e:	e4 86       	std	Z+12, r14	; 0x0c
#ifdef RADIO_PRIORITY_CEILING
    5630:	17 86       	std	Z+15, r1	; 0x0f
    5632:	16 86       	std	Z+14, r1	; 0x0e
    nrk_sem_post(radio_sem);
#endif
    5634:	ce 01       	movw	r24, r28
    5636:	01 96       	adiw	r24, 0x01	; 1
    5638:	0e 94 07 28 	call	0x500e	; 0x500e <nrk_time_get>
}
    563c:	29 81       	ldd	r18, Y+1	; 0x01
    563e:	3a 81       	ldd	r19, Y+2	; 0x02
    5640:	4b 81       	ldd	r20, Y+3	; 0x03
    5642:	5c 81       	ldd	r21, Y+4	; 0x04
    5644:	6d 81       	ldd	r22, Y+5	; 0x05
    5646:	7e 81       	ldd	r23, Y+6	; 0x06
    5648:	8f 81       	ldd	r24, Y+7	; 0x07
    564a:	98 85       	ldd	r25, Y+8	; 0x08
    564c:	0e 94 7f 27 	call	0x4efe	; 0x4efe <_nrk_time_to_ticks_long>
    5650:	f8 01       	movw	r30, r16
    5652:	60 87       	std	Z+8, r22	; 0x08
    5654:	71 87       	std	Z+9, r23	; 0x09
    5656:	82 87       	std	Z+10, r24	; 0x0a
    5658:	93 87       	std	Z+11, r25	; 0x0b
void rf_set_channel( uint8_t channel )
    565a:	20 81       	ld	r18, Z
    565c:	31 81       	ldd	r19, Z+1	; 0x01
    565e:	42 81       	ldd	r20, Z+2	; 0x02
    5660:	53 81       	ldd	r21, Z+3	; 0x03
    5662:	26 0f       	add	r18, r22
    5664:	37 1f       	adc	r19, r23
    5666:	48 1f       	adc	r20, r24
    5668:	59 1f       	adc	r21, r25
    566a:	24 83       	std	Z+4, r18	; 0x04
    566c:	35 83       	std	Z+5, r19	; 0x05
    566e:	46 83       	std	Z+6, r20	; 0x06
    5670:	57 83       	std	Z+7, r21	; 0x07
{
#ifdef RADIO_PRIORITY_CEILING
    5672:	d2 8a       	std	Z+18, r13	; 0x12
    5674:	c1 8a       	std	Z+17, r12	; 0x11
    5676:	81 e0       	ldi	r24, 0x01	; 1
    5678:	90 e0       	ldi	r25, 0x00	; 0
    567a:	02 c0       	rjmp	.+4      	; 0x5680 <nrk_reserve_set+0xe0>
    nrk_sem_pend (radio_sem);
#endif
    567c:	8f ef       	ldi	r24, 0xFF	; 255
    567e:	9f ef       	ldi	r25, 0xFF	; 255
    5680:	28 96       	adiw	r28, 0x08	; 8
    5682:	0f b6       	in	r0, 0x3f	; 63
    5684:	f8 94       	cli
    5686:	de bf       	out	0x3e, r29	; 62
    5688:	0f be       	out	0x3f, r0	; 63
    568a:	cd bf       	out	0x3d, r28	; 61
    568c:	df 91       	pop	r29
    568e:	cf 91       	pop	r28
    5690:	1f 91       	pop	r17
    5692:	0f 91       	pop	r16
    5694:	ff 90       	pop	r15
    5696:	ef 90       	pop	r14
    5698:	df 90       	pop	r13
    569a:	cf 90       	pop	r12
    569c:	08 95       	ret

0000569e <_nrk_reserve_update>:
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
{
    569e:	0f 93       	push	r16
    56a0:	1f 93       	push	r17
    56a2:	cf 93       	push	r28
    56a4:	df 93       	push	r29
    56a6:	cd b7       	in	r28, 0x3d	; 61
    56a8:	de b7       	in	r29, 0x3e	; 62
    56aa:	28 97       	sbiw	r28, 0x08	; 8
    56ac:	0f b6       	in	r0, 0x3f	; 63
    56ae:	f8 94       	cli
    56b0:	de bf       	out	0x3e, r29	; 62
    56b2:	0f be       	out	0x3f, r0	; 63
    56b4:	cd bf       	out	0x3d, r28	; 61
    56b6:	08 2f       	mov	r16, r24
uint8_t n,i;
uint16_t key_buf;

    56b8:	0e 94 33 1a 	call	0x3466	; 0x3466 <nrk_int_disable>
// Set AES key
    56bc:	ce 01       	movw	r24, r28
    56be:	01 96       	adiw	r24, 0x01	; 1
    56c0:	0e 94 07 28 	call	0x500e	; 0x500e <nrk_time_get>
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
    56c4:	11 27       	eor	r17, r17
    56c6:	29 81       	ldd	r18, Y+1	; 0x01
    56c8:	3a 81       	ldd	r19, Y+2	; 0x02
    56ca:	4b 81       	ldd	r20, Y+3	; 0x03
    56cc:	5c 81       	ldd	r21, Y+4	; 0x04
    56ce:	6d 81       	ldd	r22, Y+5	; 0x05
    56d0:	7e 81       	ldd	r23, Y+6	; 0x06
    56d2:	8f 81       	ldd	r24, Y+7	; 0x07
    56d4:	98 85       	ldd	r25, Y+8	; 0x08
    56d6:	0e 94 7f 27 	call	0x4efe	; 0x4efe <_nrk_time_to_ticks_long>
    56da:	9b 01       	movw	r18, r22
    56dc:	ac 01       	movw	r20, r24
    56de:	83 e1       	ldi	r24, 0x13	; 19
    56e0:	90 e0       	ldi	r25, 0x00	; 0
    56e2:	08 9f       	mul	r16, r24
    56e4:	f0 01       	movw	r30, r0
    56e6:	09 9f       	mul	r16, r25
    56e8:	f0 0d       	add	r31, r0
    56ea:	18 9f       	mul	r17, r24
    56ec:	f0 0d       	add	r31, r0
    56ee:	11 24       	eor	r1, r1
    56f0:	ee 58       	subi	r30, 0x8E	; 142
    56f2:	f8 4f       	sbci	r31, 0xF8	; 248
    56f4:	20 87       	std	Z+8, r18	; 0x08
    56f6:	31 87       	std	Z+9, r19	; 0x09
    56f8:	42 87       	std	Z+10, r20	; 0x0a
    56fa:	53 87       	std	Z+11, r21	; 0x0b
	{
    56fc:	84 81       	ldd	r24, Z+4	; 0x04
    56fe:	95 81       	ldd	r25, Z+5	; 0x05
    5700:	a6 81       	ldd	r26, Z+6	; 0x06
    5702:	b7 81       	ldd	r27, Z+7	; 0x07
    5704:	28 17       	cp	r18, r24
    5706:	39 07       	cpc	r19, r25
    5708:	4a 07       	cpc	r20, r26
    570a:	5b 07       	cpc	r21, r27
    570c:	70 f0       	brcs	.+28     	; 0x572a <_nrk_reserve_update+0x8c>
    	key_buf=(key[i]<<8)|key[i+1]; 
   	nrk_spin_wait_us(100); 
    570e:	80 81       	ld	r24, Z
    5710:	91 81       	ldd	r25, Z+1	; 0x01
    5712:	a2 81       	ldd	r26, Z+2	; 0x02
    5714:	b3 81       	ldd	r27, Z+3	; 0x03
    5716:	82 0f       	add	r24, r18
    5718:	93 1f       	adc	r25, r19
    571a:	a4 1f       	adc	r26, r20
    571c:	b5 1f       	adc	r27, r21
    571e:	84 83       	std	Z+4, r24	; 0x04
    5720:	95 83       	std	Z+5, r25	; 0x05
    5722:	a6 83       	std	Z+6, r26	; 0x06
    5724:	b7 83       	std	Z+7, r27	; 0x07
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
	}

    5726:	17 86       	std	Z+15, r1	; 0x0f
    5728:	16 86       	std	Z+14, r1	; 0x0e
// Set AES nonce to all zeros
nrk_spin_wait_us(100); 
    572a:	0e 94 35 1a 	call	0x346a	; 0x346a <nrk_int_enable>
    572e:	28 96       	adiw	r28, 0x08	; 8
    5730:	0f b6       	in	r0, 0x3f	; 63
    5732:	f8 94       	cli
    5734:	de bf       	out	0x3e, r29	; 62
    5736:	0f be       	out	0x3f, r0	; 63
    5738:	cd bf       	out	0x3d, r28	; 61
    573a:	df 91       	pop	r29
    573c:	cf 91       	pop	r28
    573e:	1f 91       	pop	r17
    5740:	0f 91       	pop	r16
    5742:	08 95       	ret

00005744 <nrk_reserve_consume>:
for(i=0; i<7; i++ )
	{
    	key_buf=0; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
    5744:	cf 93       	push	r28
    5746:	df 93       	push	r29
    5748:	48 2f       	mov	r20, r24
	}
	// block counter set 1
    574a:	85 30       	cpi	r24, 0x05	; 5
    574c:	10 f0       	brcs	.+4      	; 0x5752 <nrk_reserve_consume+0xe>
    	key_buf=1; 
    574e:	81 e0       	ldi	r24, 0x01	; 1
    5750:	10 c0       	rjmp	.+32     	; 0x5772 <nrk_reserve_consume+0x2e>
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
}
    5752:	99 27       	eor	r25, r25
    5754:	23 e1       	ldi	r18, 0x13	; 19
    5756:	30 e0       	ldi	r19, 0x00	; 0
    5758:	82 9f       	mul	r24, r18
    575a:	e0 01       	movw	r28, r0
    575c:	83 9f       	mul	r24, r19
    575e:	d0 0d       	add	r29, r0
    5760:	92 9f       	mul	r25, r18
    5762:	d0 0d       	add	r29, r0
    5764:	11 24       	eor	r1, r1
    5766:	ce 58       	subi	r28, 0x8E	; 142
    5768:	d8 4f       	sbci	r29, 0xF8	; 248
    576a:	88 89       	ldd	r24, Y+16	; 0x10
    576c:	8f 3f       	cpi	r24, 0xFF	; 255
    576e:	21 f4       	brne	.+8      	; 0x5778 <nrk_reserve_consume+0x34>

    5770:	82 e0       	ldi	r24, 0x02	; 2
    5772:	0e 94 57 1c 	call	0x38ae	; 0x38ae <_nrk_errno_set>
    5776:	11 c0       	rjmp	.+34     	; 0x579a <nrk_reserve_consume+0x56>
void rf_security_enable(uint8_t *key)
{
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x0306); // Enable CTR encryption with key 0
    FASTSPI_SETREG(CC2420_SECCTRL1, 0x0e0e); // Encrypt / Decrypt 18 bytes into header
    5778:	84 2f       	mov	r24, r20
    577a:	0e 94 4f 2b 	call	0x569e	; 0x569e <_nrk_reserve_update>

security_enable=1;
    577e:	2e 85       	ldd	r18, Y+14	; 0x0e
    5780:	3f 85       	ldd	r19, Y+15	; 0x0f
    5782:	8c 85       	ldd	r24, Y+12	; 0x0c
    5784:	9d 85       	ldd	r25, Y+13	; 0x0d
    5786:	28 17       	cp	r18, r24
    5788:	39 07       	cpc	r19, r25
    578a:	54 f0       	brlt	.+20     	; 0x57a0 <nrk_reserve_consume+0x5c>
}


    578c:	0e 94 35 1a 	call	0x346a	; 0x346a <nrk_int_enable>

    5790:	e9 89       	ldd	r30, Y+17	; 0x11
    5792:	fa 89       	ldd	r31, Y+18	; 0x12
    5794:	30 97       	sbiw	r30, 0x00	; 0
    5796:	09 f0       	breq	.+2      	; 0x579a <nrk_reserve_consume+0x56>
void rf_security_disable()
    5798:	09 95       	icall
    579a:	8f ef       	ldi	r24, 0xFF	; 255
    579c:	9f ef       	ldi	r25, 0xFF	; 255
    579e:	06 c0       	rjmp	.+12     	; 0x57ac <nrk_reserve_consume+0x68>
{
  FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security enable"
  security_enable=0;
}

    57a0:	2f 5f       	subi	r18, 0xFF	; 255
    57a2:	3f 4f       	sbci	r19, 0xFF	; 255
    57a4:	3f 87       	std	Y+15, r19	; 0x0f
    57a6:	2e 87       	std	Y+14, r18	; 0x0e
    57a8:	81 e0       	ldi	r24, 0x01	; 1
    57aa:	90 e0       	ldi	r25, 0x00	; 0
    57ac:	df 91       	pop	r29
    57ae:	cf 91       	pop	r28
    57b0:	08 95       	ret

000057b2 <nrk_reserve_get>:
    nrk_spin_wait_us(OSC_STARTUP_DELAY);
    ENABLE_GLOBAL_INT();

}


    57b2:	cf 93       	push	r28
    57b4:	df 93       	push	r29
    57b6:	48 2f       	mov	r20, r24
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
    57b8:	85 30       	cpi	r24, 0x05	; 5
    57ba:	10 f0       	brcs	.+4      	; 0x57c0 <nrk_reserve_get+0xe>
{
    57bc:	81 e0       	ldi	r24, 0x01	; 1
    57be:	10 c0       	rjmp	.+32     	; 0x57e0 <nrk_reserve_get+0x2e>
return last_pkt_encrypted;
}

    57c0:	99 27       	eor	r25, r25
    57c2:	23 e1       	ldi	r18, 0x13	; 19
    57c4:	30 e0       	ldi	r19, 0x00	; 0
    57c6:	82 9f       	mul	r24, r18
    57c8:	e0 01       	movw	r28, r0
    57ca:	83 9f       	mul	r24, r19
    57cc:	d0 0d       	add	r29, r0
    57ce:	92 9f       	mul	r25, r18
    57d0:	d0 0d       	add	r29, r0
    57d2:	11 24       	eor	r1, r1
    57d4:	ce 58       	subi	r28, 0x8E	; 142
    57d6:	d8 4f       	sbci	r29, 0xF8	; 248
    57d8:	88 89       	ldd	r24, Y+16	; 0x10
    57da:	8f 3f       	cpi	r24, 0xFF	; 255
    57dc:	31 f4       	brne	.+12     	; 0x57ea <nrk_reserve_get+0x38>

void rf_security_set_ctr_counter(uint8_t *counter)
    57de:	82 e0       	ldi	r24, 0x02	; 2
    57e0:	0e 94 57 1c 	call	0x38ae	; 0x38ae <_nrk_errno_set>
    57e4:	80 e0       	ldi	r24, 0x00	; 0
    57e6:	90 e0       	ldi	r25, 0x00	; 0
    57e8:	0c c0       	rjmp	.+24     	; 0x5802 <nrk_reserve_get+0x50>
{
uint8_t n;
// CTR counter value
FASTSPI_WRITE_RAM(&counter[0],(CC2420RAM_TXNONCE+9),2,n); 
    57ea:	84 2f       	mov	r24, r20
    57ec:	0e 94 4f 2b 	call	0x569e	; 0x569e <_nrk_reserve_update>
FASTSPI_WRITE_RAM(&counter[2],(CC2420RAM_TXNONCE+11),2,n); 
tx_ctr[0]=counter[0];
    57f0:	2e 85       	ldd	r18, Y+14	; 0x0e
    57f2:	3f 85       	ldd	r19, Y+15	; 0x0f
    57f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    57f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    57f8:	82 17       	cp	r24, r18
    57fa:	93 07       	cpc	r25, r19
    57fc:	9c f3       	brlt	.-26     	; 0x57e4 <nrk_reserve_get+0x32>
tx_ctr[1]=counter[1];
tx_ctr[2]=counter[2];
tx_ctr[3]=counter[3];
    57fe:	82 1b       	sub	r24, r18
    5800:	99 27       	eor	r25, r25
    5802:	df 91       	pop	r29
    5804:	cf 91       	pop	r28
    5806:	08 95       	ret

00005808 <nrk_spin_wait_us>:
	...
#include <nrk_events.h>
#include <nrk_timer.h>
#include <nrk_error.h>
#include <nrk_reserve.h>
#include <bmac.h>
#include <nrk_cfg.h>
    5810:	01 97       	sbiw	r24, 0x01	; 1
    5812:	d1 f7       	brne	.-12     	; 0x5808 <nrk_spin_wait_us>
    5814:	08 95       	ret

00005816 <_nrk_high_speed_timer_stop>:
    return pRRI;
}

int8_t bmac_encryption_set_ctr_counter(uint8_t *counter, uint8_t len)
{
if(len!=4 ) return NRK_ERROR;
    5816:	10 92 81 00 	sts	0x0081, r1
    581a:	08 95       	ret

0000581c <_nrk_high_speed_timer_start>:
rf_security_set_ctr_counter(counter);
   return NRK_OK;
}

int8_t bmac_tx_reserve_set( nrk_time_t *period, uint16_t pkts )
    581c:	81 e0       	ldi	r24, 0x01	; 1
    581e:	80 93 81 00 	sts	0x0081, r24
    5822:	08 95       	ret

00005824 <_nrk_high_speed_timer_reset>:
#ifdef NRK_MAX_RESERVES
// Create a reserve if it doesn't exist
if(tx_reserve==-1) tx_reserve=nrk_reserve_create();
if(tx_reserve>=0)
  return nrk_reserve_set(tx_reserve, period,pkts,NULL);
else return NRK_ERROR;
    5824:	83 b5       	in	r24, 0x23	; 35
    5826:	81 60       	ori	r24, 0x01	; 1
    5828:	83 bd       	out	0x23, r24	; 35
#else
    582a:	10 92 85 00 	sts	0x0085, r1
    582e:	10 92 84 00 	sts	0x0084, r1
    5832:	08 95       	ret

00005834 <_nrk_high_speed_timer_get>:
return NRK_OK;
}

int8_t  bmac_auto_ack_enable() 
{
rf_auto_ack_enable();
    5834:	cf 93       	push	r28
    5836:	df 93       	push	r29
    5838:	cd b7       	in	r28, 0x3d	; 61
    583a:	de b7       	in	r29, 0x3e	; 62
    583c:	22 97       	sbiw	r28, 0x02	; 2
    583e:	0f b6       	in	r0, 0x3f	; 63
    5840:	f8 94       	cli
    5842:	de bf       	out	0x3e, r29	; 62
    5844:	0f be       	out	0x3f, r0	; 63
    5846:	cd bf       	out	0x3d, r28	; 61
return NRK_OK;
}

    5848:	80 91 84 00 	lds	r24, 0x0084
    584c:	90 91 85 00 	lds	r25, 0x0085
    5850:	9a 83       	std	Y+2, r25	; 0x02
    5852:	89 83       	std	Y+1, r24	; 0x01
int8_t  bmac_addr_decode_disable() 
{
    5854:	89 81       	ldd	r24, Y+1	; 0x01
    5856:	9a 81       	ldd	r25, Y+2	; 0x02
    5858:	22 96       	adiw	r28, 0x02	; 2
    585a:	0f b6       	in	r0, 0x3f	; 63
    585c:	f8 94       	cli
    585e:	de bf       	out	0x3e, r29	; 62
    5860:	0f be       	out	0x3f, r0	; 63
    5862:	cd bf       	out	0x3d, r28	; 61
    5864:	df 91       	pop	r29
    5866:	cf 91       	pop	r28
    5868:	08 95       	ret

0000586a <_nrk_os_timer_stop>:
rf_addr_decode_disable();
return NRK_OK;
}

int8_t  bmac_addr_decode_enable() 
    586a:	10 92 b1 00 	sts	0x00B1, r1
{
    586e:	e0 e7       	ldi	r30, 0x70	; 112
    5870:	f0 e0       	ldi	r31, 0x00	; 0
    5872:	80 81       	ld	r24, Z
    5874:	8d 7f       	andi	r24, 0xFD	; 253
    5876:	80 83       	st	Z, r24
rf_addr_decode_enable();
    5878:	80 81       	ld	r24, Z
    587a:	8e 7f       	andi	r24, 0xFE	; 254
    587c:	80 83       	st	Z, r24
    587e:	08 95       	ret

00005880 <_nrk_os_timer_set>:
return NRK_OK;
}

int8_t bmac_addr_decode_set_my_mac(uint16_t my_mac)
{
    5880:	80 93 b2 00 	sts	0x00B2, r24
    5884:	08 95       	ret

00005886 <_nrk_os_timer_start>:
return NRK_OK;
}

int8_t  bmac_addr_decode_dest_mac(uint16_t dest) 
{
bmac_rfTxInfo.destAddr=dest;
    5886:	e0 e7       	ldi	r30, 0x70	; 112
    5888:	f0 e0       	ldi	r31, 0x00	; 0
    588a:	80 81       	ld	r24, Z
    588c:	83 60       	ori	r24, 0x03	; 3
    588e:	80 83       	st	Z, r24
return NRK_OK;
    5890:	83 e0       	ldi	r24, 0x03	; 3
    5892:	80 93 b1 00 	sts	0x00B1, r24
    5896:	08 95       	ret

00005898 <_nrk_os_timer_reset>:
}

int8_t bmac_rx_pkt_is_encrypted()
{
return rf_security_last_pkt_status();
}
    5898:	83 b5       	in	r24, 0x23	; 35
    589a:	82 60       	ori	r24, 0x02	; 2
    589c:	83 bd       	out	0x23, r24	; 35

    589e:	10 92 b2 00 	sts	0x00B2, r1
int8_t bmac_encryption_set_key(uint8_t *key, uint8_t len)
    58a2:	10 92 98 06 	sts	0x0698, r1
{
    58a6:	10 92 9a 06 	sts	0x069A, r1
    58aa:	08 95       	ret

000058ac <_nrk_get_next_wakeup>:
  if(len!=16) return NRK_ERROR;
  rf_security_set_key(key);
  return NRK_OK;
}

int8_t bmac_encryption_enable()
    58ac:	80 91 b3 00 	lds	r24, 0x00B3
    58b0:	8f 5f       	subi	r24, 0xFF	; 255
{
    58b2:	99 27       	eor	r25, r25
    58b4:	08 95       	ret

000058b6 <_nrk_set_next_wakeup>:
  rf_security_enable();
  return NRK_OK;
}

    58b6:	81 50       	subi	r24, 0x01	; 1
    58b8:	80 93 b3 00 	sts	0x00B3, r24
    58bc:	08 95       	ret

000058be <nrk_timer_int_stop>:
int8_t bmac_encryption_disable()
{
  rf_security_disable();
  return NRK_OK;
}
    58be:	88 23       	and	r24, r24
    58c0:	11 f4       	brne	.+4      	; 0x58c6 <nrk_timer_int_stop+0x8>


    58c2:	10 92 71 00 	sts	0x0071, r1
int8_t bmac_set_rf_power(uint8_t power)
{
if(power>31) return NRK_ERROR;
    58c6:	8f ef       	ldi	r24, 0xFF	; 255
    58c8:	9f ef       	ldi	r25, 0xFF	; 255
    58ca:	08 95       	ret

000058cc <nrk_timer_int_reset>:
rf_tx_power(power);
return NRK_OK;
}

    58cc:	88 23       	and	r24, r24
    58ce:	19 f0       	breq	.+6      	; 0x58d6 <nrk_timer_int_reset+0xa>
    58d0:	8f ef       	ldi	r24, 0xFF	; 255
    58d2:	9f ef       	ldi	r25, 0xFF	; 255
    58d4:	08 95       	ret
void bmac_set_cca_active(uint8_t active)
{
    58d6:	10 92 95 00 	sts	0x0095, r1
    58da:	10 92 94 00 	sts	0x0094, r1
    58de:	81 e0       	ldi	r24, 0x01	; 1
    58e0:	90 e0       	ldi	r25, 0x00	; 0
cca_active=active;
}

int8_t bmac_set_cca_thresh(int8_t thresh)
    58e2:	08 95       	ret

000058e4 <nrk_timer_int_read>:
{
  rf_set_cca_thresh(thresh); 
return NRK_OK;
}
    58e4:	88 23       	and	r24, r24
    58e6:	19 f0       	breq	.+6      	; 0x58ee <nrk_timer_int_read+0xa>
    58e8:	80 e0       	ldi	r24, 0x00	; 0
    58ea:	90 e0       	ldi	r25, 0x00	; 0
    58ec:	08 95       	ret

int8_t bmac_set_channel(uint8_t chan)
    58ee:	80 91 94 00 	lds	r24, 0x0094
    58f2:	90 91 95 00 	lds	r25, 0x0095
{
if(chan>26) return NRK_ERROR;
g_chan=chan;
rf_init (&bmac_rfRxInfo, chan, 0xFFFF, 0x00000);
    58f6:	08 95       	ret

000058f8 <nrk_timer_int_start>:
return NRK_OK;
}


    58f8:	88 23       	and	r24, r24
    58fa:	19 f0       	breq	.+6      	; 0x5902 <nrk_timer_int_start+0xa>
    58fc:	8f ef       	ldi	r24, 0xFF	; 255
    58fe:	9f ef       	ldi	r25, 0xFF	; 255
    5900:	08 95       	ret
int8_t bmac_wait_until_rx_pkt()
{
    5902:	82 e0       	ldi	r24, 0x02	; 2
    5904:	80 93 71 00 	sts	0x0071, r24
    5908:	81 e0       	ldi	r24, 0x01	; 1
    590a:	90 e0       	ldi	r25, 0x00	; 0
nrk_sig_mask_t event;

if(bmac_rx_pkt_ready()==1) return NRK_OK;

    590c:	08 95       	ret

0000590e <nrk_timer_int_configure>:
    nrk_signal_register(bmac_rx_pkt_signal); 
    event=nrk_event_wait (SIG(bmac_rx_pkt_signal));

// Check if it was a time out instead of packet RX signal
    590e:	88 23       	and	r24, r24
    5910:	19 f0       	breq	.+6      	; 0x5918 <nrk_timer_int_configure+0xa>
    5912:	8f ef       	ldi	r24, 0xFF	; 255
    5914:	9f ef       	ldi	r25, 0xFF	; 255
    5916:	08 95       	ret
if((event & SIG(bmac_rx_pkt_signal)) == 0 ) return NRK_ERROR;
else return NRK_OK;
    5918:	cb 01       	movw	r24, r22
    591a:	01 97       	sbiw	r24, 0x01	; 1
    591c:	05 97       	sbiw	r24, 0x05	; 5
    591e:	10 f4       	brcc	.+4      	; 0x5924 <nrk_timer_int_configure+0x16>
    5920:	60 93 99 06 	sts	0x0699, r22
}
    5924:	10 92 90 00 	sts	0x0090, r1

    5928:	88 e0       	ldi	r24, 0x08	; 8
    592a:	80 93 91 00 	sts	0x0091, r24
int8_t bmac_rx_pkt_set_buffer(uint8_t *buf, uint8_t size)
    592e:	85 2f       	mov	r24, r21
    5930:	99 27       	eor	r25, r25
    5932:	80 93 99 00 	sts	0x0099, r24
{
    5936:	40 93 98 00 	sts	0x0098, r20
if(buf==NULL) return NRK_ERROR;
    593a:	30 93 97 06 	sts	0x0697, r19
    593e:	20 93 96 06 	sts	0x0696, r18
    bmac_rfRxInfo.pPayload = buf;
    5942:	80 91 99 06 	lds	r24, 0x0699
    5946:	81 30       	cpi	r24, 0x01	; 1
    5948:	21 f4       	brne	.+8      	; 0x5952 <nrk_timer_int_configure+0x44>
    594a:	80 91 91 00 	lds	r24, 0x0091
    594e:	81 60       	ori	r24, 0x01	; 1
    5950:	0b c0       	rjmp	.+22     	; 0x5968 <nrk_timer_int_configure+0x5a>
    bmac_rfRxInfo.max_length = size;
    rx_buf_empty=1;
    5952:	82 30       	cpi	r24, 0x02	; 2
    5954:	21 f4       	brne	.+8      	; 0x595e <nrk_timer_int_configure+0x50>
    5956:	80 91 91 00 	lds	r24, 0x0091
    595a:	82 60       	ori	r24, 0x02	; 2
    595c:	05 c0       	rjmp	.+10     	; 0x5968 <nrk_timer_int_configure+0x5a>
return NRK_OK;
}
    595e:	83 30       	cpi	r24, 0x03	; 3
    5960:	31 f4       	brne	.+12     	; 0x596e <nrk_timer_int_configure+0x60>
    5962:	80 91 91 00 	lds	r24, 0x0091
    5966:	83 60       	ori	r24, 0x03	; 3
    5968:	80 93 91 00 	sts	0x0091, r24
    596c:	08 c0       	rjmp	.+16     	; 0x597e <nrk_timer_int_configure+0x70>

int8_t bmac_init (uint8_t chan)
    596e:	84 30       	cpi	r24, 0x04	; 4
    5970:	21 f4       	brne	.+8      	; 0x597a <nrk_timer_int_configure+0x6c>
    5972:	80 91 91 00 	lds	r24, 0x0091
    5976:	84 60       	ori	r24, 0x04	; 4
    5978:	f7 cf       	rjmp	.-18     	; 0x5968 <nrk_timer_int_configure+0x5a>
{
    bmac_running=0;
    597a:	85 30       	cpi	r24, 0x05	; 5
    597c:	19 f0       	breq	.+6      	; 0x5984 <nrk_timer_int_configure+0x76>
    597e:	81 e0       	ldi	r24, 0x01	; 1
    5980:	90 e0       	ldi	r25, 0x00	; 0
    5982:	08 95       	ret
    5984:	80 91 91 00 	lds	r24, 0x0091
    5988:	85 60       	ori	r24, 0x05	; 5
    598a:	80 93 91 00 	sts	0x0091, r24
    598e:	81 e0       	ldi	r24, 0x01	; 1
    5990:	90 e0       	ldi	r25, 0x00	; 0
    tx_reserve=-1;
    cca_active=true;
    rx_failure_cnt=0;
    #ifdef NRK_SW_WDT
	#ifdef BMAC_SW_WDT_ID
	
    5992:	08 95       	ret

00005994 <_nrk_os_timer_get>:
	_bmac_check_period.secs=30;
	_bmac_check_period.nano_secs=0;
	nrk_sw_wdt_init(BMAC_SW_WDT_ID, &_bmac_check_period, NULL );
	nrk_sw_wdt_start(BMAC_SW_WDT_ID);
	#endif
    5994:	80 91 b2 00 	lds	r24, 0x00B2
    #endif
    5998:	99 27       	eor	r25, r25
    599a:	08 95       	ret

0000599c <__vector_13>:
	return NRK_ERROR;
	}
    bmac_enable_signal=nrk_signal_create();
    if(bmac_enable_signal==NRK_ERROR)
	{
	nrk_kprintf(PSTR("BMAC ERROR: creating enable signal failed\r\n"));
    599c:	0f 92       	push	r0
    599e:	0f b6       	in	r0, 0x3f	; 63
    59a0:	0f 92       	push	r0
    59a2:	1f 92       	push	r1
    59a4:	2f 92       	push	r2
    59a6:	3f 92       	push	r3
    59a8:	4f 92       	push	r4
    59aa:	5f 92       	push	r5
    59ac:	6f 92       	push	r6
    59ae:	7f 92       	push	r7
    59b0:	8f 92       	push	r8
    59b2:	9f 92       	push	r9
    59b4:	af 92       	push	r10
    59b6:	bf 92       	push	r11
    59b8:	cf 92       	push	r12
    59ba:	df 92       	push	r13
    59bc:	ef 92       	push	r14
    59be:	ff 92       	push	r15
    59c0:	0f 93       	push	r16
    59c2:	1f 93       	push	r17
    59c4:	2f 93       	push	r18
    59c6:	3f 93       	push	r19
    59c8:	4f 93       	push	r20
    59ca:	5f 93       	push	r21
    59cc:	6f 93       	push	r22
    59ce:	7f 93       	push	r23
    59d0:	8f 93       	push	r24
    59d2:	9f 93       	push	r25
    59d4:	af 93       	push	r26
    59d6:	bf 93       	push	r27
    59d8:	cf 93       	push	r28
    59da:	df 93       	push	r29
    59dc:	ef 93       	push	r30
    59de:	ff 93       	push	r31
    59e0:	a0 91 55 07 	lds	r26, 0x0755
    59e4:	b0 91 56 07 	lds	r27, 0x0756
    59e8:	0d b6       	in	r0, 0x3d	; 61
    59ea:	0d 92       	st	X+, r0
    59ec:	0e b6       	in	r0, 0x3e	; 62
    59ee:	0d 92       	st	X+, r0
    59f0:	1f 92       	push	r1
    59f2:	a0 91 4f 05 	lds	r26, 0x054F
    59f6:	b0 91 50 05 	lds	r27, 0x0550
    59fa:	1e 90       	ld	r1, -X
    59fc:	be bf       	out	0x3e, r27	; 62
    59fe:	ad bf       	out	0x3d, r26	; 61
    5a00:	08 95       	ret

00005a02 <__vector_17>:
		return NRK_ERROR;
		}
	}
#endif
nrk_signal_register(bmac_tx_pkt_done_signal); 
tx_data_ready=1;
    5a02:	1f 92       	push	r1
    5a04:	0f 92       	push	r0
    5a06:	0f b6       	in	r0, 0x3f	; 63
    5a08:	0f 92       	push	r0
    5a0a:	11 24       	eor	r1, r1
    5a0c:	0f 90       	pop	r0
    5a0e:	0f be       	out	0x3f, r0	; 63
    5a10:	0f 90       	pop	r0
    5a12:	1f 90       	pop	r1
    5a14:	18 95       	reti

00005a16 <__vector_32>:

int8_t bmac_tx_pkt(uint8_t *buf, uint8_t len)
{
uint32_t mask;
if(tx_data_ready==1) return NRK_ERROR;
// If reserve exists check it
    5a16:	1f 92       	push	r1
    5a18:	0f 92       	push	r0
    5a1a:	0f b6       	in	r0, 0x3f	; 63
    5a1c:	0f 92       	push	r0
    5a1e:	11 24       	eor	r1, r1
    5a20:	2f 93       	push	r18
    5a22:	3f 93       	push	r19
    5a24:	4f 93       	push	r20
    5a26:	5f 93       	push	r21
    5a28:	6f 93       	push	r22
    5a2a:	7f 93       	push	r23
    5a2c:	8f 93       	push	r24
    5a2e:	9f 93       	push	r25
    5a30:	af 93       	push	r26
    5a32:	bf 93       	push	r27
    5a34:	ef 93       	push	r30
    5a36:	ff 93       	push	r31
#ifdef NRK_MAX_RESERVES
    5a38:	e0 91 96 06 	lds	r30, 0x0696
    5a3c:	f0 91 97 06 	lds	r31, 0x0697
    5a40:	30 97       	sbiw	r30, 0x00	; 0
    5a42:	11 f0       	breq	.+4      	; 0x5a48 <__vector_32+0x32>
    5a44:	09 95       	icall
    5a46:	04 c0       	rjmp	.+8      	; 0x5a50 <__vector_32+0x3a>
if(tx_reserve!=-1)
	{
    5a48:	60 e0       	ldi	r22, 0x00	; 0
    5a4a:	8a e0       	ldi	r24, 0x0A	; 10
    5a4c:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <nrk_kernel_error_add>
    5a50:	ff 91       	pop	r31
    5a52:	ef 91       	pop	r30
    5a54:	bf 91       	pop	r27
    5a56:	af 91       	pop	r26
    5a58:	9f 91       	pop	r25
    5a5a:	8f 91       	pop	r24
    5a5c:	7f 91       	pop	r23
    5a5e:	6f 91       	pop	r22
    5a60:	5f 91       	pop	r21
    5a62:	4f 91       	pop	r20
    5a64:	3f 91       	pop	r19
    5a66:	2f 91       	pop	r18
    5a68:	0f 90       	pop	r0
    5a6a:	0f be       	out	0x3f, r0	; 63
    5a6c:	0f 90       	pop	r0
    5a6e:	1f 90       	pop	r1
    5a70:	18 95       	reti

00005a72 <__vector_default>:
    #endif



    _bmac_check_period.secs=0;
    _bmac_check_period.nano_secs=BMAC_DEFAULT_CHECK_RATE_MS*NANOS_PER_MS;
    5a72:	1f 92       	push	r1
    5a74:	0f 92       	push	r0
    5a76:	0f b6       	in	r0, 0x3f	; 63
    5a78:	0f 92       	push	r0
    5a7a:	11 24       	eor	r1, r1
    5a7c:	2f 93       	push	r18
    5a7e:	3f 93       	push	r19
    5a80:	4f 93       	push	r20
    5a82:	5f 93       	push	r21
    5a84:	6f 93       	push	r22
    5a86:	7f 93       	push	r23
    5a88:	8f 93       	push	r24
    5a8a:	9f 93       	push	r25
    5a8c:	af 93       	push	r26
    5a8e:	bf 93       	push	r27
    5a90:	ef 93       	push	r30
    5a92:	ff 93       	push	r31
    bmac_rx_pkt_signal=nrk_signal_create();
    5a94:	60 e0       	ldi	r22, 0x00	; 0
    5a96:	8a e0       	ldi	r24, 0x0A	; 10
    5a98:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <nrk_kernel_error_add>
    5a9c:	ff cf       	rjmp	.-2      	; 0x5a9c <__vector_default+0x2a>

00005a9e <nrk_high_speed_timer_wait>:
uint16_t bmac_tx_reserve_get()
{
#ifdef NRK_MAX_RESERVES
if(tx_reserve>=0)
  return nrk_reserve_get(tx_reserve);
else return 0;
    5a9e:	cf 93       	push	r28
    5aa0:	df 93       	push	r29
    5aa2:	cd b7       	in	r28, 0x3d	; 61
    5aa4:	de b7       	in	r29, 0x3e	; 62
    5aa6:	22 97       	sbiw	r28, 0x02	; 2
    5aa8:	0f b6       	in	r0, 0x3f	; 63
    5aaa:	f8 94       	cli
    5aac:	de bf       	out	0x3e, r29	; 62
    5aae:	0f be       	out	0x3f, r0	; 63
    5ab0:	cd bf       	out	0x3d, r28	; 61
    5ab2:	fc 01       	movw	r30, r24
#else
return 0;
    5ab4:	8f ef       	ldi	r24, 0xFF	; 255
    5ab6:	e9 37       	cpi	r30, 0x79	; 121
    5ab8:	f8 07       	cpc	r31, r24
    5aba:	10 f0       	brcs	.+4      	; 0x5ac0 <nrk_high_speed_timer_wait+0x22>
    5abc:	e0 e0       	ldi	r30, 0x00	; 0
    5abe:	f0 e0       	ldi	r31, 0x00	; 0
#endif
    5ac0:	9f 01       	movw	r18, r30
    5ac2:	44 27       	eor	r20, r20
    5ac4:	55 27       	eor	r21, r21
    5ac6:	cb 01       	movw	r24, r22
    5ac8:	aa 27       	eor	r26, r26
    5aca:	bb 27       	eor	r27, r27
    5acc:	28 0f       	add	r18, r24
    5ace:	39 1f       	adc	r19, r25
    5ad0:	4a 1f       	adc	r20, r26
    5ad2:	5b 1f       	adc	r21, r27
}
    5ad4:	21 30       	cpi	r18, 0x01	; 1
    5ad6:	80 e0       	ldi	r24, 0x00	; 0
    5ad8:	38 07       	cpc	r19, r24
    5ada:	81 e0       	ldi	r24, 0x01	; 1
    5adc:	48 07       	cpc	r20, r24
    5ade:	80 e0       	ldi	r24, 0x00	; 0
    5ae0:	58 07       	cpc	r21, r24
    5ae2:	78 f0       	brcs	.+30     	; 0x5b02 <nrk_high_speed_timer_wait+0x64>
int8_t  bmac_auto_ack_enable() 
{
rf_auto_ack_enable();
return NRK_OK;
}

    5ae4:	80 91 84 00 	lds	r24, 0x0084
    5ae8:	90 91 85 00 	lds	r25, 0x0085
    5aec:	9a 83       	std	Y+2, r25	; 0x02
    5aee:	89 83       	std	Y+1, r24	; 0x01
int8_t  bmac_addr_decode_disable() 
{
    5af0:	89 81       	ldd	r24, Y+1	; 0x01
    5af2:	9a 81       	ldd	r25, Y+2	; 0x02
return 0;
#endif
}


int8_t  bmac_auto_ack_disable() 
    5af4:	e8 17       	cp	r30, r24
    5af6:	f9 07       	cpc	r31, r25
    5af8:	a8 f3       	brcs	.-22     	; 0x5ae4 <nrk_high_speed_timer_wait+0x46>
#else
return 0;
#endif
}


    5afa:	20 50       	subi	r18, 0x00	; 0
    5afc:	30 40       	sbci	r19, 0x00	; 0
    5afe:	41 40       	sbci	r20, 0x01	; 1
    5b00:	50 40       	sbci	r21, 0x00	; 0
int8_t  bmac_auto_ack_enable() 
{
rf_auto_ack_enable();
return NRK_OK;
}

    5b02:	80 91 84 00 	lds	r24, 0x0084
    5b06:	90 91 85 00 	lds	r25, 0x0085
    5b0a:	9a 83       	std	Y+2, r25	; 0x02
    5b0c:	89 83       	std	Y+1, r24	; 0x01
int8_t  bmac_addr_decode_disable() 
{
    5b0e:	89 81       	ldd	r24, Y+1	; 0x01
    5b10:	9a 81       	ldd	r25, Y+2	; 0x02

int8_t  bmac_auto_ack_disable() 
{
rf_auto_ack_disable();
return NRK_OK;
}
    5b12:	82 17       	cp	r24, r18
    5b14:	93 07       	cpc	r25, r19
    5b16:	a8 f3       	brcs	.-22     	; 0x5b02 <nrk_high_speed_timer_wait+0x64>
    5b18:	22 96       	adiw	r28, 0x02	; 2
    5b1a:	0f b6       	in	r0, 0x3f	; 63
    5b1c:	f8 94       	cli
    5b1e:	de bf       	out	0x3e, r29	; 62
    5b20:	0f be       	out	0x3f, r0	; 63
    5b22:	cd bf       	out	0x3d, r28	; 61
    5b24:	df 91       	pop	r29
    5b26:	cf 91       	pop	r28
    5b28:	08 95       	ret

00005b2a <_nrk_setup_timer>:
#include <nrk_cfg.h>


#ifndef BMAC_STACKSIZE
#define BMAC_STACKSIZE	128	
#endif
    5b2a:	ef 92       	push	r14
    5b2c:	ff 92       	push	r15
    5b2e:	1f 93       	push	r17

    5b30:	9e ef       	ldi	r25, 0xFE	; 254
    5b32:	90 93 9a 06 	sts	0x069A, r25
static nrk_task_type bmac_task;
static NRK_STK bmac_task_stack[BMAC_STACKSIZE];

    5b36:	80 e2       	ldi	r24, 0x20	; 32
    5b38:	80 93 b6 00 	sts	0x00B6, r24

    5b3c:	90 93 b3 00 	sts	0x00B3, r25
//#define DEBUG
    5b40:	13 e0       	ldi	r17, 0x03	; 3
    5b42:	17 bb       	out	0x17, r17	; 23
static uint32_t rx_failure_cnt;
    5b44:	82 e0       	ldi	r24, 0x02	; 2
    5b46:	80 93 b0 00 	sts	0x00B0, r24

    5b4a:	91 eb       	ldi	r25, 0xB1	; 177
    5b4c:	e9 2e       	mov	r14, r25
    5b4e:	f1 2c       	mov	r15, r1
    5b50:	f7 01       	movw	r30, r14
    5b52:	10 83       	st	Z, r17
static uint8_t tx_data_ready;
    5b54:	83 b5       	in	r24, 0x23	; 35
    5b56:	82 60       	ori	r24, 0x02	; 2
    5b58:	83 bd       	out	0x23, r24	; 35
static uint8_t rx_buf_empty;
static uint8_t bmac_running;
    5b5a:	17 bb       	out	0x17, r17	; 23
static uint8_t pkt_got_ack;
static uint8_t g_chan;
    5b5c:	14 bd       	out	0x24, r17	; 36
static uint8_t is_enabled;

static nrk_time_t _bmac_check_period;
    5b5e:	83 b5       	in	r24, 0x23	; 35
    5b60:	82 60       	ori	r24, 0x02	; 2
    5b62:	83 bd       	out	0x23, r24	; 35

static uint8_t cca_active;
static int8_t tx_reserve;

    5b64:	10 92 80 00 	sts	0x0080, r1

    5b68:	81 e0       	ldi	r24, 0x01	; 1
    5b6a:	80 93 81 00 	sts	0x0081, r24
/**
    5b6e:	10 92 85 00 	sts	0x0085, r1
    5b72:	10 92 84 00 	sts	0x0084, r1
 *  This is a callback if you require immediate response to a packet
    5b76:	83 b5       	in	r24, 0x23	; 35
    5b78:	82 60       	ori	r24, 0x02	; 2
    5b7a:	83 bd       	out	0x23, r24	; 35
 */
    5b7c:	83 b5       	in	r24, 0x23	; 35
    5b7e:	81 60       	ori	r24, 0x01	; 1
    5b80:	83 bd       	out	0x23, r24	; 35
RF_RX_INFO *rf_rx_callback (RF_RX_INFO * pRRI)
{
    5b82:	0e 94 4c 2c 	call	0x5898	; 0x5898 <_nrk_os_timer_reset>
return NRK_OK;
}

int8_t  bmac_addr_decode_dest_mac(uint16_t dest) 
{
bmac_rfTxInfo.destAddr=dest;
    5b86:	e0 e7       	ldi	r30, 0x70	; 112
    5b88:	f0 e0       	ldi	r31, 0x00	; 0
    5b8a:	80 81       	ld	r24, Z
    5b8c:	83 60       	ori	r24, 0x03	; 3
    5b8e:	80 83       	st	Z, r24
return NRK_OK;
    5b90:	f7 01       	movw	r30, r14
    5b92:	10 83       	st	Z, r17
 *  This is a callback if you require immediate response to a packet
 */
RF_RX_INFO *rf_rx_callback (RF_RX_INFO * pRRI)
{
    // Any code here gets called the instant a packet is received from the interrupt   
    return pRRI;
    5b94:	10 92 98 06 	sts	0x0698, r1
    5b98:	1f 91       	pop	r17
    5b9a:	ff 90       	pop	r15
    5b9c:	ef 90       	pop	r14
    5b9e:	08 95       	ret

00005ba0 <nrk_ext_int_enable>:
#include <avr/sleep.h>
#include <avr/wdt.h>
#include <avr/eeprom.h>
#include <stdio.h>
#include <avr/interrupt.h>
#include <nrk.h>
    5ba0:	88 23       	and	r24, r24
    5ba2:	11 f4       	brne	.+4      	; 0x5ba8 <nrk_ext_int_enable+0x8>
    5ba4:	e8 9a       	sbi	0x1d, 0	; 29
    5ba6:	33 c0       	rjmp	.+102    	; 0x5c0e <nrk_ext_int_enable+0x6e>
#include <nrk_events.h>
    5ba8:	81 30       	cpi	r24, 0x01	; 1
    5baa:	11 f4       	brne	.+4      	; 0x5bb0 <nrk_ext_int_enable+0x10>
    5bac:	e9 9a       	sbi	0x1d, 1	; 29
    5bae:	2f c0       	rjmp	.+94     	; 0x5c0e <nrk_ext_int_enable+0x6e>
#include <nrk_timer.h>
    5bb0:	82 30       	cpi	r24, 0x02	; 2
    5bb2:	11 f4       	brne	.+4      	; 0x5bb8 <nrk_ext_int_enable+0x18>
    5bb4:	ea 9a       	sbi	0x1d, 2	; 29
    5bb6:	2b c0       	rjmp	.+86     	; 0x5c0e <nrk_ext_int_enable+0x6e>
#include <nrk_error.h>
    5bb8:	83 30       	cpi	r24, 0x03	; 3
    5bba:	21 f4       	brne	.+8      	; 0x5bc4 <nrk_ext_int_enable+0x24>
    5bbc:	80 91 6b 00 	lds	r24, 0x006B
    5bc0:	81 60       	ori	r24, 0x01	; 1
    5bc2:	23 c0       	rjmp	.+70     	; 0x5c0a <nrk_ext_int_enable+0x6a>
#include <nrk_reserve.h>
    5bc4:	84 30       	cpi	r24, 0x04	; 4
    5bc6:	21 f4       	brne	.+8      	; 0x5bd0 <nrk_ext_int_enable+0x30>
    5bc8:	80 91 6b 00 	lds	r24, 0x006B
    5bcc:	82 60       	ori	r24, 0x02	; 2
    5bce:	1d c0       	rjmp	.+58     	; 0x5c0a <nrk_ext_int_enable+0x6a>
#include <bmac.h>
    5bd0:	85 30       	cpi	r24, 0x05	; 5
    5bd2:	21 f4       	brne	.+8      	; 0x5bdc <nrk_ext_int_enable+0x3c>
    5bd4:	80 91 6b 00 	lds	r24, 0x006B
    5bd8:	84 60       	ori	r24, 0x04	; 4
    5bda:	17 c0       	rjmp	.+46     	; 0x5c0a <nrk_ext_int_enable+0x6a>
#include <nrk_cfg.h>
    5bdc:	86 30       	cpi	r24, 0x06	; 6
    5bde:	21 f4       	brne	.+8      	; 0x5be8 <nrk_ext_int_enable+0x48>
    5be0:	80 91 6b 00 	lds	r24, 0x006B
    5be4:	88 60       	ori	r24, 0x08	; 8
    5be6:	11 c0       	rjmp	.+34     	; 0x5c0a <nrk_ext_int_enable+0x6a>

    5be8:	87 30       	cpi	r24, 0x07	; 7
    5bea:	21 f4       	brne	.+8      	; 0x5bf4 <nrk_ext_int_enable+0x54>
    5bec:	80 91 6b 00 	lds	r24, 0x006B
    5bf0:	80 61       	ori	r24, 0x10	; 16
    5bf2:	0b c0       	rjmp	.+22     	; 0x5c0a <nrk_ext_int_enable+0x6a>

    5bf4:	88 30       	cpi	r24, 0x08	; 8
    5bf6:	21 f4       	brne	.+8      	; 0x5c00 <nrk_ext_int_enable+0x60>
    5bf8:	80 91 6b 00 	lds	r24, 0x006B
    5bfc:	80 62       	ori	r24, 0x20	; 32
    5bfe:	05 c0       	rjmp	.+10     	; 0x5c0a <nrk_ext_int_enable+0x6a>
#ifndef BMAC_STACKSIZE
    5c00:	89 30       	cpi	r24, 0x09	; 9
    5c02:	41 f4       	brne	.+16     	; 0x5c14 <nrk_ext_int_enable+0x74>
    5c04:	80 91 6b 00 	lds	r24, 0x006B
    5c08:	80 64       	ori	r24, 0x40	; 64
    5c0a:	80 93 6b 00 	sts	0x006B, r24
    5c0e:	81 e0       	ldi	r24, 0x01	; 1
    5c10:	90 e0       	ldi	r25, 0x00	; 0
    5c12:	08 95       	ret
#define BMAC_STACKSIZE	128	
    5c14:	8a 30       	cpi	r24, 0x0A	; 10
    5c16:	19 f0       	breq	.+6      	; 0x5c1e <nrk_ext_int_enable+0x7e>
    5c18:	8f ef       	ldi	r24, 0xFF	; 255
    5c1a:	9f ef       	ldi	r25, 0xFF	; 255
    5c1c:	08 95       	ret
    5c1e:	80 91 6b 00 	lds	r24, 0x006B
    5c22:	80 68       	ori	r24, 0x80	; 128
    5c24:	80 93 6b 00 	sts	0x006B, r24
    5c28:	81 e0       	ldi	r24, 0x01	; 1
    5c2a:	90 e0       	ldi	r25, 0x00	; 0
#endif

    5c2c:	08 95       	ret

00005c2e <nrk_ext_int_disable>:
static nrk_task_type bmac_task;
static NRK_STK bmac_task_stack[BMAC_STACKSIZE];


    5c2e:	88 23       	and	r24, r24
    5c30:	11 f4       	brne	.+4      	; 0x5c36 <nrk_ext_int_disable+0x8>
    5c32:	e8 98       	cbi	0x1d, 0	; 29
    5c34:	31 c0       	rjmp	.+98     	; 0x5c98 <nrk_ext_int_disable+0x6a>
//#define DEBUG
    5c36:	81 30       	cpi	r24, 0x01	; 1
    5c38:	11 f0       	breq	.+4      	; 0x5c3e <nrk_ext_int_disable+0x10>
static uint32_t rx_failure_cnt;
    5c3a:	82 30       	cpi	r24, 0x02	; 2
    5c3c:	11 f4       	brne	.+4      	; 0x5c42 <nrk_ext_int_disable+0x14>
    5c3e:	e9 98       	cbi	0x1d, 1	; 29
    5c40:	2b c0       	rjmp	.+86     	; 0x5c98 <nrk_ext_int_disable+0x6a>

    5c42:	83 30       	cpi	r24, 0x03	; 3
    5c44:	21 f4       	brne	.+8      	; 0x5c4e <nrk_ext_int_disable+0x20>
    5c46:	80 91 6b 00 	lds	r24, 0x006B
    5c4a:	8e 7f       	andi	r24, 0xFE	; 254
    5c4c:	23 c0       	rjmp	.+70     	; 0x5c94 <nrk_ext_int_disable+0x66>
static uint8_t tx_data_ready;
    5c4e:	84 30       	cpi	r24, 0x04	; 4
    5c50:	21 f4       	brne	.+8      	; 0x5c5a <nrk_ext_int_disable+0x2c>
    5c52:	80 91 6b 00 	lds	r24, 0x006B
    5c56:	8d 7f       	andi	r24, 0xFD	; 253
    5c58:	1d c0       	rjmp	.+58     	; 0x5c94 <nrk_ext_int_disable+0x66>
static uint8_t rx_buf_empty;
    5c5a:	85 30       	cpi	r24, 0x05	; 5
    5c5c:	21 f4       	brne	.+8      	; 0x5c66 <nrk_ext_int_disable+0x38>
    5c5e:	80 91 6b 00 	lds	r24, 0x006B
    5c62:	8b 7f       	andi	r24, 0xFB	; 251
    5c64:	17 c0       	rjmp	.+46     	; 0x5c94 <nrk_ext_int_disable+0x66>
static uint8_t bmac_running;
    5c66:	86 30       	cpi	r24, 0x06	; 6
    5c68:	21 f4       	brne	.+8      	; 0x5c72 <nrk_ext_int_disable+0x44>
    5c6a:	80 91 6b 00 	lds	r24, 0x006B
    5c6e:	87 7f       	andi	r24, 0xF7	; 247
    5c70:	11 c0       	rjmp	.+34     	; 0x5c94 <nrk_ext_int_disable+0x66>
static uint8_t pkt_got_ack;
    5c72:	87 30       	cpi	r24, 0x07	; 7
    5c74:	21 f4       	brne	.+8      	; 0x5c7e <nrk_ext_int_disable+0x50>
    5c76:	80 91 6b 00 	lds	r24, 0x006B
    5c7a:	8f 7e       	andi	r24, 0xEF	; 239
    5c7c:	0b c0       	rjmp	.+22     	; 0x5c94 <nrk_ext_int_disable+0x66>
static uint8_t g_chan;
    5c7e:	88 30       	cpi	r24, 0x08	; 8
    5c80:	21 f4       	brne	.+8      	; 0x5c8a <nrk_ext_int_disable+0x5c>
    5c82:	80 91 6b 00 	lds	r24, 0x006B
    5c86:	8f 7d       	andi	r24, 0xDF	; 223
    5c88:	05 c0       	rjmp	.+10     	; 0x5c94 <nrk_ext_int_disable+0x66>
static uint8_t is_enabled;
    5c8a:	89 30       	cpi	r24, 0x09	; 9
    5c8c:	41 f4       	brne	.+16     	; 0x5c9e <nrk_ext_int_disable+0x70>
    5c8e:	80 91 6b 00 	lds	r24, 0x006B
    5c92:	8f 7b       	andi	r24, 0xBF	; 191
    5c94:	80 93 6b 00 	sts	0x006B, r24
    5c98:	81 e0       	ldi	r24, 0x01	; 1
    5c9a:	90 e0       	ldi	r25, 0x00	; 0
    5c9c:	08 95       	ret

    5c9e:	8a 30       	cpi	r24, 0x0A	; 10
    5ca0:	19 f0       	breq	.+6      	; 0x5ca8 <nrk_ext_int_disable+0x7a>
    5ca2:	8f ef       	ldi	r24, 0xFF	; 255
    5ca4:	9f ef       	ldi	r25, 0xFF	; 255
    5ca6:	08 95       	ret
    5ca8:	80 91 6b 00 	lds	r24, 0x006B
    5cac:	8f 77       	andi	r24, 0x7F	; 127
    5cae:	80 93 6b 00 	sts	0x006B, r24
    5cb2:	81 e0       	ldi	r24, 0x01	; 1
    5cb4:	90 e0       	ldi	r25, 0x00	; 0
static nrk_time_t _bmac_check_period;

    5cb6:	08 95       	ret

00005cb8 <nrk_ext_int_configure>:
static uint8_t cca_active;
static int8_t tx_reserve;


/**
 *  This is a callback if you require immediate response to a packet
    5cb8:	88 23       	and	r24, r24
    5cba:	39 f5       	brne	.+78     	; 0x5d0a <nrk_ext_int_configure+0x52>
 */
RF_RX_INFO *rf_rx_callback (RF_RX_INFO * pRRI)
    5cbc:	50 93 d4 07 	sts	0x07D4, r21
    5cc0:	40 93 d3 07 	sts	0x07D3, r20
{
    5cc4:	66 23       	and	r22, r22
    5cc6:	21 f4       	brne	.+8      	; 0x5cd0 <nrk_ext_int_configure+0x18>
    5cc8:	80 91 69 00 	lds	r24, 0x0069
    5ccc:	8c 7f       	andi	r24, 0xFC	; 252
    5cce:	45 c0       	rjmp	.+138    	; 0x5d5a <nrk_ext_int_configure+0xa2>
    // Any code here gets called the instant a packet is received from the interrupt   
    5cd0:	61 30       	cpi	r22, 0x01	; 1
    5cd2:	49 f4       	brne	.+18     	; 0x5ce6 <nrk_ext_int_configure+0x2e>
    return pRRI;
    5cd4:	80 91 69 00 	lds	r24, 0x0069
    5cd8:	8d 7f       	andi	r24, 0xFD	; 253
    5cda:	80 93 69 00 	sts	0x0069, r24
    5cde:	80 91 69 00 	lds	r24, 0x0069
    5ce2:	81 60       	ori	r24, 0x01	; 1
    5ce4:	3a c0       	rjmp	.+116    	; 0x5d5a <nrk_ext_int_configure+0xa2>
}
    5ce6:	62 30       	cpi	r22, 0x02	; 2
    5ce8:	49 f4       	brne	.+18     	; 0x5cfc <nrk_ext_int_configure+0x44>

    5cea:	80 91 69 00 	lds	r24, 0x0069
    5cee:	82 60       	ori	r24, 0x02	; 2
    5cf0:	80 93 69 00 	sts	0x0069, r24
    5cf4:	80 91 69 00 	lds	r24, 0x0069
    5cf8:	8e 7f       	andi	r24, 0xFE	; 254
    5cfa:	2f c0       	rjmp	.+94     	; 0x5d5a <nrk_ext_int_configure+0xa2>
int8_t bmac_encryption_set_ctr_counter(uint8_t *counter, uint8_t len)
    5cfc:	63 30       	cpi	r22, 0x03	; 3
    5cfe:	09 f0       	breq	.+2      	; 0x5d02 <nrk_ext_int_configure+0x4a>
    5d00:	69 c0       	rjmp	.+210    	; 0x5dd4 <nrk_ext_int_configure+0x11c>
    5d02:	80 91 69 00 	lds	r24, 0x0069
    5d06:	83 60       	ori	r24, 0x03	; 3
    5d08:	28 c0       	rjmp	.+80     	; 0x5d5a <nrk_ext_int_configure+0xa2>
{
if(len!=4 ) return NRK_ERROR;
rf_security_set_ctr_counter(counter);
    5d0a:	81 30       	cpi	r24, 0x01	; 1
    5d0c:	49 f5       	brne	.+82     	; 0x5d60 <nrk_ext_int_configure+0xa8>
   return NRK_OK;
}
    5d0e:	50 93 d2 07 	sts	0x07D2, r21
    5d12:	40 93 d1 07 	sts	0x07D1, r20

    5d16:	66 23       	and	r22, r22
    5d18:	21 f4       	brne	.+8      	; 0x5d22 <nrk_ext_int_configure+0x6a>
    5d1a:	80 91 69 00 	lds	r24, 0x0069
    5d1e:	83 7f       	andi	r24, 0xF3	; 243
    5d20:	1c c0       	rjmp	.+56     	; 0x5d5a <nrk_ext_int_configure+0xa2>
int8_t bmac_tx_reserve_set( nrk_time_t *period, uint16_t pkts )
    5d22:	61 30       	cpi	r22, 0x01	; 1
    5d24:	49 f4       	brne	.+18     	; 0x5d38 <nrk_ext_int_configure+0x80>
{
    5d26:	80 91 69 00 	lds	r24, 0x0069
    5d2a:	87 7f       	andi	r24, 0xF7	; 247
    5d2c:	80 93 69 00 	sts	0x0069, r24
    5d30:	80 91 69 00 	lds	r24, 0x0069
    5d34:	84 60       	ori	r24, 0x04	; 4
    5d36:	11 c0       	rjmp	.+34     	; 0x5d5a <nrk_ext_int_configure+0xa2>

    5d38:	62 30       	cpi	r22, 0x02	; 2
    5d3a:	49 f4       	brne	.+18     	; 0x5d4e <nrk_ext_int_configure+0x96>
#ifdef NRK_MAX_RESERVES
    5d3c:	80 91 69 00 	lds	r24, 0x0069
    5d40:	88 60       	ori	r24, 0x08	; 8
    5d42:	80 93 69 00 	sts	0x0069, r24
    5d46:	80 91 69 00 	lds	r24, 0x0069
    5d4a:	8b 7f       	andi	r24, 0xFB	; 251
    5d4c:	06 c0       	rjmp	.+12     	; 0x5d5a <nrk_ext_int_configure+0xa2>
// Create a reserve if it doesn't exist
    5d4e:	63 30       	cpi	r22, 0x03	; 3
    5d50:	09 f0       	breq	.+2      	; 0x5d54 <nrk_ext_int_configure+0x9c>
    5d52:	40 c0       	rjmp	.+128    	; 0x5dd4 <nrk_ext_int_configure+0x11c>
    5d54:	80 91 69 00 	lds	r24, 0x0069
    5d58:	8c 60       	ori	r24, 0x0C	; 12
    5d5a:	80 93 69 00 	sts	0x0069, r24
    5d5e:	37 c0       	rjmp	.+110    	; 0x5dce <nrk_ext_int_configure+0x116>
if(tx_reserve==-1) tx_reserve=nrk_reserve_create();
if(tx_reserve>=0)
  return nrk_reserve_set(tx_reserve, period,pkts,NULL);
    5d60:	82 30       	cpi	r24, 0x02	; 2
    5d62:	31 f5       	brne	.+76     	; 0x5db0 <nrk_ext_int_configure+0xf8>
else return NRK_ERROR;
#else
    5d64:	50 93 d2 07 	sts	0x07D2, r21
    5d68:	40 93 d1 07 	sts	0x07D1, r20
return NRK_ERROR;
    5d6c:	66 23       	and	r22, r22
    5d6e:	21 f4       	brne	.+8      	; 0x5d78 <nrk_ext_int_configure+0xc0>
    5d70:	80 91 69 00 	lds	r24, 0x0069
    5d74:	8f 7c       	andi	r24, 0xCF	; 207
    5d76:	f1 cf       	rjmp	.-30     	; 0x5d5a <nrk_ext_int_configure+0xa2>
#endif
    5d78:	61 30       	cpi	r22, 0x01	; 1
    5d7a:	49 f4       	brne	.+18     	; 0x5d8e <nrk_ext_int_configure+0xd6>
}
    5d7c:	80 91 69 00 	lds	r24, 0x0069
    5d80:	8f 7d       	andi	r24, 0xDF	; 223
    5d82:	80 93 69 00 	sts	0x0069, r24
    5d86:	80 91 69 00 	lds	r24, 0x0069
    5d8a:	80 61       	ori	r24, 0x10	; 16
    5d8c:	e6 cf       	rjmp	.-52     	; 0x5d5a <nrk_ext_int_configure+0xa2>

    5d8e:	62 30       	cpi	r22, 0x02	; 2
    5d90:	49 f4       	brne	.+18     	; 0x5da4 <nrk_ext_int_configure+0xec>
uint16_t bmac_tx_reserve_get()
    5d92:	80 91 69 00 	lds	r24, 0x0069
    5d96:	80 62       	ori	r24, 0x20	; 32
    5d98:	80 93 69 00 	sts	0x0069, r24
    5d9c:	80 91 69 00 	lds	r24, 0x0069
    5da0:	8f 7e       	andi	r24, 0xEF	; 239
    5da2:	db cf       	rjmp	.-74     	; 0x5d5a <nrk_ext_int_configure+0xa2>
{
    5da4:	63 30       	cpi	r22, 0x03	; 3
    5da6:	b1 f4       	brne	.+44     	; 0x5dd4 <nrk_ext_int_configure+0x11c>
    5da8:	80 91 69 00 	lds	r24, 0x0069
    5dac:	80 63       	ori	r24, 0x30	; 48
    5dae:	d5 cf       	rjmp	.-86     	; 0x5d5a <nrk_ext_int_configure+0xa2>
#ifdef NRK_MAX_RESERVES
if(tx_reserve>=0)
  return nrk_reserve_get(tx_reserve);
else return 0;
#else
return 0;
    5db0:	83 50       	subi	r24, 0x03	; 3
    5db2:	88 30       	cpi	r24, 0x08	; 8
    5db4:	18 f0       	brcs	.+6      	; 0x5dbc <nrk_ext_int_configure+0x104>
    5db6:	8f ef       	ldi	r24, 0xFF	; 255
    5db8:	9f ef       	ldi	r25, 0xFF	; 255
    5dba:	08 95       	ret
#endif
    5dbc:	80 91 68 00 	lds	r24, 0x0068
    5dc0:	81 60       	ori	r24, 0x01	; 1
    5dc2:	80 93 68 00 	sts	0x0068, r24
}
    5dc6:	50 93 d8 07 	sts	0x07D8, r21
    5dca:	40 93 d7 07 	sts	0x07D7, r20
    5dce:	81 e0       	ldi	r24, 0x01	; 1
    5dd0:	90 e0       	ldi	r25, 0x00	; 0
    5dd2:	08 95       	ret

    5dd4:	81 e0       	ldi	r24, 0x01	; 1
    5dd6:	90 e0       	ldi	r25, 0x00	; 0

int8_t  bmac_auto_ack_disable() 
{
    5dd8:	08 95       	ret

00005dda <__vector_1>:
{
rf_auto_ack_enable();
return NRK_OK;
}

int8_t  bmac_addr_decode_disable() 
    5dda:	1f 92       	push	r1
    5ddc:	0f 92       	push	r0
    5dde:	0f b6       	in	r0, 0x3f	; 63
    5de0:	0f 92       	push	r0
    5de2:	11 24       	eor	r1, r1
    5de4:	2f 93       	push	r18
    5de6:	3f 93       	push	r19
    5de8:	4f 93       	push	r20
    5dea:	5f 93       	push	r21
    5dec:	6f 93       	push	r22
    5dee:	7f 93       	push	r23
    5df0:	8f 93       	push	r24
    5df2:	9f 93       	push	r25
    5df4:	af 93       	push	r26
    5df6:	bf 93       	push	r27
    5df8:	ef 93       	push	r30
    5dfa:	ff 93       	push	r31
{
    5dfc:	e0 91 d3 07 	lds	r30, 0x07D3
    5e00:	f0 91 d4 07 	lds	r31, 0x07D4
    5e04:	30 97       	sbiw	r30, 0x00	; 0
    5e06:	11 f0       	breq	.+4      	; 0x5e0c <__vector_1+0x32>
    5e08:	09 95       	icall
    5e0a:	04 c0       	rjmp	.+8      	; 0x5e14 <__vector_1+0x3a>
rf_addr_decode_disable();
return NRK_OK;
    5e0c:	60 e0       	ldi	r22, 0x00	; 0
    5e0e:	8a e0       	ldi	r24, 0x0A	; 10
    5e10:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <nrk_kernel_error_add>
    5e14:	ff 91       	pop	r31
    5e16:	ef 91       	pop	r30
    5e18:	bf 91       	pop	r27
    5e1a:	af 91       	pop	r26
    5e1c:	9f 91       	pop	r25
    5e1e:	8f 91       	pop	r24
    5e20:	7f 91       	pop	r23
    5e22:	6f 91       	pop	r22
    5e24:	5f 91       	pop	r21
    5e26:	4f 91       	pop	r20
    5e28:	3f 91       	pop	r19
    5e2a:	2f 91       	pop	r18
    5e2c:	0f 90       	pop	r0
    5e2e:	0f be       	out	0x3f, r0	; 63
    5e30:	0f 90       	pop	r0
    5e32:	1f 90       	pop	r1
    5e34:	18 95       	reti

00005e36 <__vector_9>:

int8_t  bmac_auto_ack_disable() 
{
rf_auto_ack_disable();
return NRK_OK;
}
    5e36:	1f 92       	push	r1
    5e38:	0f 92       	push	r0
    5e3a:	0f b6       	in	r0, 0x3f	; 63
    5e3c:	0f 92       	push	r0
    5e3e:	11 24       	eor	r1, r1
    5e40:	2f 93       	push	r18
    5e42:	3f 93       	push	r19
    5e44:	4f 93       	push	r20
    5e46:	5f 93       	push	r21
    5e48:	6f 93       	push	r22
    5e4a:	7f 93       	push	r23
    5e4c:	8f 93       	push	r24
    5e4e:	9f 93       	push	r25
    5e50:	af 93       	push	r26
    5e52:	bf 93       	push	r27
    5e54:	ef 93       	push	r30
    5e56:	ff 93       	push	r31

    5e58:	e0 91 d7 07 	lds	r30, 0x07D7
    5e5c:	f0 91 d8 07 	lds	r31, 0x07D8
    5e60:	30 97       	sbiw	r30, 0x00	; 0
    5e62:	11 f0       	breq	.+4      	; 0x5e68 <__vector_9+0x32>
    5e64:	09 95       	icall
    5e66:	04 c0       	rjmp	.+8      	; 0x5e70 <__vector_9+0x3a>
int8_t  bmac_auto_ack_enable() 
{
    5e68:	60 e0       	ldi	r22, 0x00	; 0
    5e6a:	8a e0       	ldi	r24, 0x0A	; 10
    5e6c:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <nrk_kernel_error_add>
    5e70:	ff 91       	pop	r31
    5e72:	ef 91       	pop	r30
    5e74:	bf 91       	pop	r27
    5e76:	af 91       	pop	r26
    5e78:	9f 91       	pop	r25
    5e7a:	8f 91       	pop	r24
    5e7c:	7f 91       	pop	r23
    5e7e:	6f 91       	pop	r22
    5e80:	5f 91       	pop	r21
    5e82:	4f 91       	pop	r20
    5e84:	3f 91       	pop	r19
    5e86:	2f 91       	pop	r18
    5e88:	0f 90       	pop	r0
    5e8a:	0f be       	out	0x3f, r0	; 63
    5e8c:	0f 90       	pop	r0
    5e8e:	1f 90       	pop	r1
    5e90:	18 95       	reti

00005e92 <_nrk_startup_error>:
#include <avr/interrupt.h>
#include <nrk.h>
#include <nrk_events.h>
#include <nrk_timer.h>
#include <nrk_error.h>
#include <nrk_reserve.h>
    5e92:	04 b6       	in	r0, 0x34	; 52
    5e94:	03 fe       	sbrs	r0, 3
    5e96:	02 c0       	rjmp	.+4      	; 0x5e9c <_nrk_startup_error+0xa>
    5e98:	90 e1       	ldi	r25, 0x10	; 16
    5e9a:	01 c0       	rjmp	.+2      	; 0x5e9e <_nrk_startup_error+0xc>
    5e9c:	90 e0       	ldi	r25, 0x00	; 0


#ifndef BMAC_STACKSIZE
#define BMAC_STACKSIZE	128	
#endif

    5e9e:	04 b6       	in	r0, 0x34	; 52
    5ea0:	02 fe       	sbrs	r0, 2
    5ea2:	06 c0       	rjmp	.+12     	; 0x5eb0 <_nrk_startup_error+0x1e>
static nrk_task_type bmac_task;
static NRK_STK bmac_task_stack[BMAC_STACKSIZE];
    5ea4:	84 b7       	in	r24, 0x34	; 52
    5ea6:	8b 7f       	andi	r24, 0xFB	; 251
    5ea8:	84 bf       	out	0x34, r24	; 52


    5eaa:	04 b6       	in	r0, 0x34	; 52
    5eac:	00 fe       	sbrs	r0, 0
//#define DEBUG
    5eae:	94 60       	ori	r25, 0x04	; 4
static uint32_t rx_failure_cnt;

static uint8_t tx_data_ready;
static uint8_t rx_buf_empty;
    5eb0:	04 b6       	in	r0, 0x34	; 52
    5eb2:	01 fe       	sbrs	r0, 1
    5eb4:	04 c0       	rjmp	.+8      	; 0x5ebe <_nrk_startup_error+0x2c>
static uint8_t bmac_running;
static uint8_t pkt_got_ack;
    5eb6:	84 b7       	in	r24, 0x34	; 52
    5eb8:	8d 7f       	andi	r24, 0xFD	; 253
    5eba:	84 bf       	out	0x34, r24	; 52
static uint8_t g_chan;
    5ebc:	92 60       	ori	r25, 0x02	; 2
static uint8_t is_enabled;

static nrk_time_t _bmac_check_period;

static uint8_t cca_active;
    5ebe:	99 23       	and	r25, r25
    5ec0:	19 f0       	breq	.+6      	; 0x5ec8 <_nrk_startup_error+0x36>
    5ec2:	89 2f       	mov	r24, r25
    5ec4:	99 27       	eor	r25, r25
    5ec6:	08 95       	ret
static int8_t tx_reserve;


    5ec8:	04 b6       	in	r0, 0x34	; 52
    5eca:	00 fc       	sbrc	r0, 0
    5ecc:	02 c0       	rjmp	.+4      	; 0x5ed2 <_nrk_startup_error+0x40>
    5ece:	91 e0       	ldi	r25, 0x01	; 1
    5ed0:	03 c0       	rjmp	.+6      	; 0x5ed8 <_nrk_startup_error+0x46>
/**
 *  This is a callback if you require immediate response to a packet
    5ed2:	84 b7       	in	r24, 0x34	; 52
    5ed4:	8e 7f       	andi	r24, 0xFE	; 254
    5ed6:	84 bf       	out	0x34, r24	; 52
RF_RX_INFO *rf_rx_callback (RF_RX_INFO * pRRI)
{
    // Any code here gets called the instant a packet is received from the interrupt   
    return pRRI;
}

    5ed8:	80 91 b0 00 	lds	r24, 0x00B0
    5edc:	81 11       	cpse	r24, r1
    5ede:	91 60       	ori	r25, 0x01	; 1
int8_t bmac_encryption_set_ctr_counter(uint8_t *counter, uint8_t len)
{
    5ee0:	89 2f       	mov	r24, r25
    5ee2:	99 27       	eor	r25, r25
if(len!=4 ) return NRK_ERROR;
    5ee4:	08 95       	ret

00005ee6 <nrk_watchdog_check>:
//#define DEBUG
static uint32_t rx_failure_cnt;

static uint8_t tx_data_ready;
static uint8_t rx_buf_empty;
static uint8_t bmac_running;
    5ee6:	04 b6       	in	r0, 0x34	; 52
    5ee8:	03 fc       	sbrc	r0, 3
    5eea:	03 c0       	rjmp	.+6      	; 0x5ef2 <nrk_watchdog_check+0xc>
    5eec:	81 e0       	ldi	r24, 0x01	; 1
    5eee:	90 e0       	ldi	r25, 0x00	; 0
    5ef0:	08 95       	ret
    5ef2:	8f ef       	ldi	r24, 0xFF	; 255
    5ef4:	9f ef       	ldi	r25, 0xFF	; 255
static uint8_t pkt_got_ack;
static uint8_t g_chan;
    5ef6:	08 95       	ret

00005ef8 <nrk_watchdog_reset>:
static uint8_t is_enabled;

static nrk_time_t _bmac_check_period;

    5ef8:	a8 95       	wdr
    5efa:	08 95       	ret

00005efc <nrk_watchdog_disable>:
#include <ulib.h>
#include <stdlib.h>
#include <avr/sleep.h>
#include <avr/wdt.h>
#include <avr/eeprom.h>
#include <stdio.h>
    5efc:	0e 94 33 1a 	call	0x3466	; 0x3466 <nrk_int_disable>
static uint8_t pkt_got_ack;
static uint8_t g_chan;
static uint8_t is_enabled;

static nrk_time_t _bmac_check_period;

    5f00:	a8 95       	wdr
#include <avr/sleep.h>
#include <avr/wdt.h>
#include <avr/eeprom.h>
#include <stdio.h>
#include <avr/interrupt.h>
#include <nrk.h>
    5f02:	84 b7       	in	r24, 0x34	; 52
    5f04:	87 7f       	andi	r24, 0xF7	; 247
    5f06:	84 bf       	out	0x34, r24	; 52
#include <nrk_events.h>
    5f08:	e0 e6       	ldi	r30, 0x60	; 96
    5f0a:	f0 e0       	ldi	r31, 0x00	; 0
    5f0c:	80 81       	ld	r24, Z
    5f0e:	88 61       	ori	r24, 0x18	; 24
    5f10:	80 83       	st	Z, r24
#include <nrk_timer.h>
    5f12:	10 82       	st	Z, r1
#include <nrk_error.h>
    5f14:	0e 94 35 1a 	call	0x346a	; 0x346a <nrk_int_enable>
    5f18:	08 95       	ret

00005f1a <nrk_watchdog_enable>:
#include <bmac.h>
#include <nrk_cfg.h>


#ifndef BMAC_STACKSIZE
#define BMAC_STACKSIZE	128	
    5f1a:	0e 94 33 1a 	call	0x3466	; 0x3466 <nrk_int_disable>
#endif
    5f1e:	84 b7       	in	r24, 0x34	; 52
    5f20:	87 7f       	andi	r24, 0xF7	; 247
    5f22:	84 bf       	out	0x34, r24	; 52
static uint8_t pkt_got_ack;
static uint8_t g_chan;
static uint8_t is_enabled;

static nrk_time_t _bmac_check_period;

    5f24:	a8 95       	wdr

#ifndef BMAC_STACKSIZE
#define BMAC_STACKSIZE	128	
#endif

static nrk_task_type bmac_task;
    5f26:	e0 e6       	ldi	r30, 0x60	; 96
    5f28:	f0 e0       	ldi	r31, 0x00	; 0
    5f2a:	80 81       	ld	r24, Z
    5f2c:	88 61       	ori	r24, 0x18	; 24
    5f2e:	80 83       	st	Z, r24
static NRK_STK bmac_task_stack[BMAC_STACKSIZE];
    5f30:	8d e0       	ldi	r24, 0x0D	; 13
    5f32:	80 83       	st	Z, r24

    5f34:	0e 94 35 1a 	call	0x346a	; 0x346a <nrk_int_enable>
    5f38:	08 95       	ret

00005f3a <nrk_battery_save>:
uint8_t tx_ctr[4];
uint8_t rx_ctr[4];

void rf_power_down()
{
    DISABLE_GLOBAL_INT();
    5f3a:	08 95       	ret

00005f3c <nrk_sleep>:
    nrk_spin_wait_us(OSC_STARTUP_DELAY);
    ENABLE_GLOBAL_INT();

}


    5f3c:	83 b7       	in	r24, 0x33	; 51
    5f3e:	81 7f       	andi	r24, 0xF1	; 241
    5f40:	86 60       	ori	r24, 0x06	; 6
    5f42:	83 bf       	out	0x33, r24	; 51
// Returns 1 if the last packet was encrypted, 0 otherwise
    5f44:	83 b7       	in	r24, 0x33	; 51
    5f46:	81 60       	ori	r24, 0x01	; 1
    5f48:	83 bf       	out	0x33, r24	; 51
    5f4a:	88 95       	sleep
    5f4c:	83 b7       	in	r24, 0x33	; 51
    5f4e:	8e 7f       	andi	r24, 0xFE	; 254
    5f50:	83 bf       	out	0x33, r24	; 51
    5f52:	08 95       	ret

00005f54 <nrk_idle>:
{
return last_pkt_encrypted;
}


void rf_security_set_ctr_counter(uint8_t *counter)
    5f54:	83 b7       	in	r24, 0x33	; 51
    5f56:	81 7f       	andi	r24, 0xF1	; 241
    5f58:	83 bf       	out	0x33, r24	; 51
{
    5f5a:	83 b7       	in	r24, 0x33	; 51
    5f5c:	81 60       	ori	r24, 0x01	; 1
    5f5e:	83 bf       	out	0x33, r24	; 51
    5f60:	88 95       	sleep
    5f62:	83 b7       	in	r24, 0x33	; 51
    5f64:	8e 7f       	andi	r24, 0xFE	; 254
    5f66:	83 bf       	out	0x33, r24	; 51
    5f68:	08 95       	ret

00005f6a <nrk_task_set_entry_function>:
uint8_t n;
// CTR counter value
FASTSPI_WRITE_RAM(&counter[0],(CC2420RAM_TXNONCE+9),2,n); 
FASTSPI_WRITE_RAM(&counter[2],(CC2420RAM_TXNONCE+11),2,n); 
tx_ctr[0]=counter[0];
tx_ctr[1]=counter[1];
    5f6a:	fc 01       	movw	r30, r24
    5f6c:	76 83       	std	Z+6, r23	; 0x06
    5f6e:	65 83       	std	Z+5, r22	; 0x05
    5f70:	08 95       	ret

00005f72 <nrk_task_stk_init>:
uint8_t n,i;
uint16_t key_buf;

// Set AES key
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
    5f72:	fb 01       	movw	r30, r22
    5f74:	da 01       	movw	r26, r20
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
	}

    5f76:	25 e5       	ldi	r18, 0x55	; 85
    5f78:	2c 93       	st	X, r18
	}
	// block counter set 1
    	key_buf=1; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
}
    5f7a:	32 97       	sbiw	r30, 0x02	; 2

void rf_security_enable(uint8_t *key)
    5f7c:	29 2f       	mov	r18, r25
    5f7e:	33 27       	eor	r19, r19
    5f80:	20 83       	st	Z, r18
{
    5f82:	81 83       	std	Z+1, r24	; 0x01
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x0306); // Enable CTR encryption with key 0
    FASTSPI_SETREG(CC2420_SECCTRL1, 0x0e0e); // Encrypt / Decrypt 18 bytes into header
    5f84:	32 97       	sbiw	r30, 0x02	; 2
    5f86:	11 82       	std	Z+1, r1	; 0x01
    5f88:	10 82       	st	Z, r1

    5f8a:	32 97       	sbiw	r30, 0x02	; 2
    5f8c:	11 82       	std	Z+1, r1	; 0x01
    5f8e:	10 82       	st	Z, r1
security_enable=1;
    5f90:	32 97       	sbiw	r30, 0x02	; 2
    5f92:	11 82       	std	Z+1, r1	; 0x01
    5f94:	10 82       	st	Z, r1
}
    5f96:	32 97       	sbiw	r30, 0x02	; 2
    5f98:	11 82       	std	Z+1, r1	; 0x01
    5f9a:	10 82       	st	Z, r1

    5f9c:	32 97       	sbiw	r30, 0x02	; 2
    5f9e:	11 82       	std	Z+1, r1	; 0x01
    5fa0:	10 82       	st	Z, r1

    5fa2:	32 97       	sbiw	r30, 0x02	; 2
    5fa4:	11 82       	std	Z+1, r1	; 0x01
    5fa6:	10 82       	st	Z, r1

    5fa8:	32 97       	sbiw	r30, 0x02	; 2
    5faa:	11 82       	std	Z+1, r1	; 0x01
    5fac:	10 82       	st	Z, r1
void rf_security_disable()
    5fae:	32 97       	sbiw	r30, 0x02	; 2
    5fb0:	11 82       	std	Z+1, r1	; 0x01
    5fb2:	10 82       	st	Z, r1
{
  FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security enable"
    5fb4:	32 97       	sbiw	r30, 0x02	; 2
    5fb6:	11 82       	std	Z+1, r1	; 0x01
    5fb8:	10 82       	st	Z, r1
  security_enable=0;
    5fba:	32 97       	sbiw	r30, 0x02	; 2
    5fbc:	11 82       	std	Z+1, r1	; 0x01
    5fbe:	10 82       	st	Z, r1
}
    5fc0:	32 97       	sbiw	r30, 0x02	; 2
    5fc2:	11 82       	std	Z+1, r1	; 0x01
    5fc4:	10 82       	st	Z, r1

    5fc6:	32 97       	sbiw	r30, 0x02	; 2
    5fc8:	11 82       	std	Z+1, r1	; 0x01
    5fca:	10 82       	st	Z, r1
//-------------------------------------------------------------------------------------------------------
    5fcc:	32 97       	sbiw	r30, 0x02	; 2
    5fce:	11 82       	std	Z+1, r1	; 0x01
    5fd0:	10 82       	st	Z, r1
// The RF settings structure is declared here, since we'll always need halRfInit()
    5fd2:	32 97       	sbiw	r30, 0x02	; 2
    5fd4:	11 82       	std	Z+1, r1	; 0x01
    5fd6:	10 82       	st	Z, r1
volatile RF_SETTINGS rfSettings;
    5fd8:	32 97       	sbiw	r30, 0x02	; 2
    5fda:	11 82       	std	Z+1, r1	; 0x01
    5fdc:	10 82       	st	Z, r1
volatile uint8_t rx_ready;
    5fde:	32 97       	sbiw	r30, 0x02	; 2
    5fe0:	11 82       	std	Z+1, r1	; 0x01
    5fe2:	10 82       	st	Z, r1
//-------------------------------------------------------------------------------------------------------
    5fe4:	32 97       	sbiw	r30, 0x02	; 2
    5fe6:	11 82       	std	Z+1, r1	; 0x01
    5fe8:	10 82       	st	Z, r1
nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    5fea:	cf 01       	movw	r24, r30
    5fec:	08 95       	ret

00005fee <nrk_stack_pointer_init>:
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    tmp=0xA0E0;
    tmp=tmp | (pwr&0x1F);  
    FASTSPI_SETREG(CC2420_TXCTRL, tmp);   // Set the FIFOP threshold to maximum
    5fee:	85 e5       	ldi	r24, 0x55	; 85
    5ff0:	80 93 fe 20 	sts	0x20FE, r24
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    5ff4:	ee ef       	ldi	r30, 0xFE	; 254
    5ff6:	f1 e2       	ldi	r31, 0x21	; 33
    5ff8:	f0 93 50 05 	sts	0x0550, r31
    5ffc:	e0 93 4f 05 	sts	0x054F, r30
#endif
}
    6000:	2a e3       	ldi	r18, 0x3A	; 58
    6002:	3a e1       	ldi	r19, 0x1A	; 26
    6004:	83 2f       	mov	r24, r19
    6006:	99 27       	eor	r25, r25
    6008:	80 83       	st	Z, r24
void rf_set_channel( uint8_t channel )
    600a:	20 93 ff 21 	sts	0x21FF, r18
    600e:	08 95       	ret

00006010 <nrk_stack_pointer_restore>:
}


void rf_addr_decode_enable()
{
    mdmctrl0 |= 0x0800;
    6010:	2a e3       	ldi	r18, 0x3A	; 58
    6012:	3a e1       	ldi	r19, 0x1A	; 26
    6014:	83 2f       	mov	r24, r19
    6016:	99 27       	eor	r25, r25
    6018:	80 93 fe 21 	sts	0x21FE, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
    601c:	20 93 ff 21 	sts	0x21FF, r18
    6020:	08 95       	ret

00006022 <nrk_target_start>:

void rf_addr_decode_disable()
{
    mdmctrl0 &= (~0x0800);
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
}
    6022:	0e 94 95 2d 	call	0x5b2a	; 0x5b2a <_nrk_setup_timer>

    6026:	0e 94 35 1a 	call	0x346a	; 0x346a <nrk_int_enable>
    602a:	08 95       	ret

0000602c <nrk_task_set_stk>:
tx_ctr[0]=counter[0];
tx_ctr[1]=counter[1];
tx_ctr[2]=counter[2];
tx_ctr[3]=counter[3];
}

    602c:	ef 92       	push	r14
    602e:	ff 92       	push	r15
    6030:	0f 93       	push	r16
    6032:	1f 93       	push	r17
    6034:	cf 93       	push	r28
    6036:	df 93       	push	r29
    6038:	7c 01       	movw	r14, r24
    603a:	8b 01       	movw	r16, r22
    603c:	ea 01       	movw	r28, r20

void rf_security_set_key(uint8_t *key)
    603e:	40 32       	cpi	r20, 0x20	; 32
    6040:	51 05       	cpc	r21, r1
    6042:	18 f4       	brcc	.+6      	; 0x604a <nrk_task_set_stk+0x1e>
    6044:	81 e1       	ldi	r24, 0x11	; 17
    6046:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <nrk_error_add>
{
    604a:	c8 01       	movw	r24, r16
    604c:	01 97       	sbiw	r24, 0x01	; 1
    604e:	8c 0f       	add	r24, r28
    6050:	9d 1f       	adc	r25, r29
    6052:	f7 01       	movw	r30, r14
    6054:	92 83       	std	Z+2, r25	; 0x02
    6056:	81 83       	std	Z+1, r24	; 0x01
uint8_t n,i;
    6058:	14 83       	std	Z+4, r17	; 0x04
    605a:	03 83       	std	Z+3, r16	; 0x03
    605c:	df 91       	pop	r29
    605e:	cf 91       	pop	r28
    6060:	1f 91       	pop	r17
    6062:	0f 91       	pop	r16
    6064:	ff 90       	pop	r15
    6066:	ef 90       	pop	r14
    6068:	08 95       	ret

0000606a <nrk_start_high_ready_task>:

.global nrk_start_high_ready_task 

nrk_start_high_ready_task:

	lds r26,nrk_high_ready_TCB		
    606a:	a0 91 46 07 	lds	r26, 0x0746
	lds r27,nrk_high_ready_TCB+1
    606e:	b0 91 47 07 	lds	r27, 0x0747

    	;x points to &OSTCB[x]
    
	ld r28,x+
    6072:	cd 91       	ld	r28, X+
	out __SP_L__, r28
    6074:	cd bf       	out	0x3d, r28	; 61
	ld r29,x+
    6076:	dd 91       	ld	r29, X+
	out __SP_H__, r29
    6078:	de bf       	out	0x3e, r29	; 62
  
	pop r31	
    607a:	ff 91       	pop	r31
	pop r30
    607c:	ef 91       	pop	r30
	pop r29
    607e:	df 91       	pop	r29
	pop r28
    6080:	cf 91       	pop	r28
	pop r27
    6082:	bf 91       	pop	r27
	pop r26
    6084:	af 91       	pop	r26
	pop r25
    6086:	9f 91       	pop	r25
	pop r24			
    6088:	8f 91       	pop	r24
	pop r23
    608a:	7f 91       	pop	r23
	pop r22
    608c:	6f 91       	pop	r22
	pop r21
    608e:	5f 91       	pop	r21
	pop r20	
    6090:	4f 91       	pop	r20
	pop r19
    6092:	3f 91       	pop	r19
	pop r18	
    6094:	2f 91       	pop	r18
	pop r17
    6096:	1f 91       	pop	r17
	pop r16
    6098:	0f 91       	pop	r16
	pop r15
    609a:	ff 90       	pop	r15
	pop r14
    609c:	ef 90       	pop	r14
	pop r13
    609e:	df 90       	pop	r13
	pop r12
    60a0:	cf 90       	pop	r12
	pop r11
    60a2:	bf 90       	pop	r11
	pop r10
    60a4:	af 90       	pop	r10
	pop r9
    60a6:	9f 90       	pop	r9
	pop r8
    60a8:	8f 90       	pop	r8
	pop r7
    60aa:	7f 90       	pop	r7
	pop r6
    60ac:	6f 90       	pop	r6
	pop r5
    60ae:	5f 90       	pop	r5
	pop r4
    60b0:	4f 90       	pop	r4
	pop r3
    60b2:	3f 90       	pop	r3
	pop r2
    60b4:	2f 90       	pop	r2
	pop r1
    60b6:	1f 90       	pop	r1
	pop r0
    60b8:	0f 90       	pop	r0
	out __SREG__, r0
    60ba:	0f be       	out	0x3f, r0	; 63
	pop r0	
    60bc:	0f 90       	pop	r0
	   
    	reti 
    60be:	18 95       	reti

000060c0 <vfprintf>:
#define FL_ALTLWR	0x20
#define FL_NEGATIVE	0x40
#define FL_LONG 	0x80

int vfprintf (FILE * stream, const char *fmt, va_list ap)
{
    60c0:	ab e0       	ldi	r26, 0x0B	; 11
    60c2:	b0 e0       	ldi	r27, 0x00	; 0
    60c4:	e6 e6       	ldi	r30, 0x66	; 102
    60c6:	f0 e3       	ldi	r31, 0x30	; 48
    60c8:	0c 94 da 34 	jmp	0x69b4	; 0x69b4 <__prologue_saves__>
    60cc:	4c 01       	movw	r8, r24
    60ce:	6b 01       	movw	r12, r22
    60d0:	7a 01       	movw	r14, r20
    unsigned char c;		/* holds a char from the format string */
    unsigned char flags;
    unsigned char buf[11];	/* size for -1 in octal, without '\0'	*/

    stream->len = 0;
    60d2:	fc 01       	movw	r30, r24
    60d4:	17 82       	std	Z+7, r1	; 0x07
    60d6:	16 82       	std	Z+6, r1	; 0x06

    if ((stream->flags & __SWR) == 0)
    60d8:	83 81       	ldd	r24, Z+3	; 0x03
    60da:	81 fd       	sbrc	r24, 1
    60dc:	08 c0       	rjmp	.+16     	; 0x60ee <vfprintf+0x2e>
    60de:	8f ef       	ldi	r24, 0xFF	; 255
    60e0:	9f ef       	ldi	r25, 0xFF	; 255
    60e2:	1a c1       	rjmp	.+564    	; 0x6318 <vfprintf+0x258>
	      case 'S':
		flags |= FL_PGMSTRING;
		/* FALLTHROUGH */

	      case 's':
		pnt = va_arg (ap, char *);
    60e4:	22 e0       	ldi	r18, 0x02	; 2
    60e6:	30 e0       	ldi	r19, 0x00	; 0
    60e8:	e2 0e       	add	r14, r18
    60ea:	f3 1e       	adc	r15, r19
    60ec:	0c c0       	rjmp	.+24     	; 0x6106 <vfprintf+0x46>
	for (;;) {
	    c = GETBYTE (stream->flags, __SPGM, fmt);
	    if (!c) goto ret;
	    if (c == '%') {
		c = GETBYTE (stream->flags, __SPGM, fmt);
		if (c != '%') break;
    60ee:	98 e9       	ldi	r25, 0x98	; 152
    60f0:	29 2e       	mov	r2, r25
    60f2:	94 e0       	ldi	r25, 0x04	; 4
    60f4:	39 2e       	mov	r3, r25
# error
#endif
		putc ('X' + (flags & FL_ALTLWR), stream);
	}
	do {
	    putc (buf[--c], stream);
    60f6:	3e 01       	movw	r6, r28
    60f8:	08 94       	sec
    60fa:	61 1c       	adc	r6, r1
    60fc:	71 1c       	adc	r7, r1
    60fe:	81 e9       	ldi	r24, 0x91	; 145
    6100:	48 2e       	mov	r4, r24
    6102:	84 e0       	ldi	r24, 0x04	; 4
    6104:	58 2e       	mov	r5, r24
	return EOF;

    for (;;) {

	for (;;) {
	    c = GETBYTE (stream->flags, __SPGM, fmt);
    6106:	f4 01       	movw	r30, r8
    6108:	03 81       	ldd	r16, Z+3	; 0x03
    610a:	f6 01       	movw	r30, r12
    610c:	03 fd       	sbrc	r16, 3
    610e:	85 91       	lpm	r24, Z+
    6110:	03 ff       	sbrs	r16, 3
    6112:	81 91       	ld	r24, Z+
    6114:	6f 01       	movw	r12, r30
	    if (!c) goto ret;
    6116:	88 23       	and	r24, r24
    6118:	09 f4       	brne	.+2      	; 0x611c <vfprintf+0x5c>
    611a:	fb c0       	rjmp	.+502    	; 0x6312 <vfprintf+0x252>
	    if (c == '%') {
    611c:	85 32       	cpi	r24, 0x25	; 37
    611e:	59 f4       	brne	.+22     	; 0x6136 <vfprintf+0x76>
		c = GETBYTE (stream->flags, __SPGM, fmt);
    6120:	03 fd       	sbrc	r16, 3
    6122:	65 91       	lpm	r22, Z+
    6124:	03 ff       	sbrs	r16, 3
    6126:	61 91       	ld	r22, Z+
    6128:	6f 01       	movw	r12, r30
		if (c != '%') break;
    612a:	65 32       	cpi	r22, 0x25	; 37
    612c:	19 f0       	breq	.+6      	; 0x6134 <vfprintf+0x74>
    612e:	16 2f       	mov	r17, r22
    6130:	bb 24       	eor	r11, r11
    6132:	1c c0       	rjmp	.+56     	; 0x616c <vfprintf+0xac>
    6134:	85 e2       	ldi	r24, 0x25	; 37
	    }
	    putc (c, stream);
    6136:	b4 01       	movw	r22, r8
    6138:	99 27       	eor	r25, r25
    613a:	2a c0       	rjmp	.+84     	; 0x6190 <vfprintf+0xd0>

	for (flags = 0;
	     !(flags & FL_LONG);	/* 'll' will detect as error	*/
	     c = GETBYTE (stream->flags, __SPGM, fmt))
	{
	    if (c && strchr_P (PSTR(" +-.0123456789h"), c))
    613c:	11 23       	and	r17, r17
    613e:	59 f1       	breq	.+86     	; 0x6196 <vfprintf+0xd6>
    6140:	61 2f       	mov	r22, r17
    6142:	77 27       	eor	r23, r23
    6144:	c1 01       	movw	r24, r2
    6146:	0e 94 f7 31 	call	0x63ee	; 0x63ee <strchr_P>
    614a:	89 2b       	or	r24, r25
    614c:	49 f4       	brne	.+18     	; 0x6160 <vfprintf+0xa0>
		continue;
	    if (c == '#') {
    614e:	13 32       	cpi	r17, 0x23	; 35
    6150:	19 f4       	brne	.+6      	; 0x6158 <vfprintf+0x98>
		flags |= FL_ALT;
    6152:	f0 e1       	ldi	r31, 0x10	; 16
    6154:	bf 2a       	or	r11, r31
    6156:	04 c0       	rjmp	.+8      	; 0x6160 <vfprintf+0xa0>
		continue;
	    }
	    if (c == 'l') {
    6158:	1c 36       	cpi	r17, 0x6C	; 108
    615a:	61 f4       	brne	.+24     	; 0x6174 <vfprintf+0xb4>
		flags |= FL_LONG;
    615c:	20 e8       	ldi	r18, 0x80	; 128
    615e:	b2 2a       	or	r11, r18
	    putc (c, stream);
	}

	for (flags = 0;
	     !(flags & FL_LONG);	/* 'll' will detect as error	*/
	     c = GETBYTE (stream->flags, __SPGM, fmt))
    6160:	f6 01       	movw	r30, r12
    6162:	03 fd       	sbrc	r16, 3
    6164:	15 91       	lpm	r17, Z+
    6166:	03 ff       	sbrs	r16, 3
    6168:	11 91       	ld	r17, Z+
    616a:	6f 01       	movw	r12, r30
	    }
	    putc (c, stream);
	}

	for (flags = 0;
	     !(flags & FL_LONG);	/* 'll' will detect as error	*/
    616c:	b7 fe       	sbrs	r11, 7
    616e:	e6 cf       	rjmp	.-52     	; 0x613c <vfprintf+0x7c>
	    break;
	}

	/* Only a format character is valid.	*/

	if (c && strchr_P (PSTR("EFGefg"), c)) {
    6170:	11 23       	and	r17, r17
    6172:	89 f0       	breq	.+34     	; 0x6196 <vfprintf+0xd6>
    6174:	61 2f       	mov	r22, r17
    6176:	77 27       	eor	r23, r23
    6178:	c2 01       	movw	r24, r4
    617a:	0e 94 f7 31 	call	0x63ee	; 0x63ee <strchr_P>
    617e:	89 2b       	or	r24, r25
    6180:	51 f0       	breq	.+20     	; 0x6196 <vfprintf+0xd6>
	    (void) va_arg (ap, double);
    6182:	24 e0       	ldi	r18, 0x04	; 4
    6184:	30 e0       	ldi	r19, 0x00	; 0
    6186:	e2 0e       	add	r14, r18
    6188:	f3 1e       	adc	r15, r19
	    putc ('?', stream);
    618a:	b4 01       	movw	r22, r8
    618c:	8f e3       	ldi	r24, 0x3F	; 63
    618e:	90 e0       	ldi	r25, 0x00	; 0
    6190:	0e 94 50 32 	call	0x64a0	; 0x64a0 <fputc>
    6194:	b8 cf       	rjmp	.-144    	; 0x6106 <vfprintf+0x46>
	}

	{
	    const char * pnt;

	    switch (c) {
    6196:	13 36       	cpi	r17, 0x63	; 99
    6198:	29 f0       	breq	.+10     	; 0x61a4 <vfprintf+0xe4>
    619a:	13 37       	cpi	r17, 0x73	; 115
    619c:	81 f0       	breq	.+32     	; 0x61be <vfprintf+0xfe>
    619e:	13 35       	cpi	r17, 0x53	; 83
    61a0:	f9 f4       	brne	.+62     	; 0x61e0 <vfprintf+0x120>
    61a2:	0b c0       	rjmp	.+22     	; 0x61ba <vfprintf+0xfa>

	      case 'c':
		putc (va_arg (ap, int), stream);
    61a4:	87 01       	movw	r16, r14
    61a6:	0e 5f       	subi	r16, 0xFE	; 254
    61a8:	1f 4f       	sbci	r17, 0xFF	; 255
    61aa:	b4 01       	movw	r22, r8
    61ac:	f7 01       	movw	r30, r14
    61ae:	80 81       	ld	r24, Z
    61b0:	91 81       	ldd	r25, Z+1	; 0x01
    61b2:	0e 94 50 32 	call	0x64a0	; 0x64a0 <fputc>
    61b6:	78 01       	movw	r14, r16
    61b8:	a6 cf       	rjmp	.-180    	; 0x6106 <vfprintf+0x46>
		continue;

	      case 'S':
		flags |= FL_PGMSTRING;
    61ba:	f1 e0       	ldi	r31, 0x01	; 1
    61bc:	bf 2a       	or	r11, r31
		/* FALLTHROUGH */

	      case 's':
		pnt = va_arg (ap, char *);
    61be:	f7 01       	movw	r30, r14
    61c0:	00 81       	ld	r16, Z
    61c2:	11 81       	ldd	r17, Z+1	; 0x01
    61c4:	04 c0       	rjmp	.+8      	; 0x61ce <vfprintf+0x10e>
	        while ( (c = GETBYTE (flags, FL_PGMSTRING, pnt)) != 0)
		    putc (c, stream);
    61c6:	b4 01       	movw	r22, r8
    61c8:	99 27       	eor	r25, r25
    61ca:	0e 94 50 32 	call	0x64a0	; 0x64a0 <fputc>
		flags |= FL_PGMSTRING;
		/* FALLTHROUGH */

	      case 's':
		pnt = va_arg (ap, char *);
	        while ( (c = GETBYTE (flags, FL_PGMSTRING, pnt)) != 0)
    61ce:	f8 01       	movw	r30, r16
    61d0:	b0 fc       	sbrc	r11, 0
    61d2:	85 91       	lpm	r24, Z+
    61d4:	b0 fe       	sbrs	r11, 0
    61d6:	81 91       	ld	r24, Z+
    61d8:	8f 01       	movw	r16, r30
    61da:	88 23       	and	r24, r24
    61dc:	a1 f7       	brne	.-24     	; 0x61c6 <vfprintf+0x106>
    61de:	82 cf       	rjmp	.-252    	; 0x60e4 <vfprintf+0x24>
		    putc (c, stream);
		continue;
	    }
	}

	if (c == 'd' || c == 'i') {
    61e0:	14 36       	cpi	r17, 0x64	; 100
    61e2:	11 f0       	breq	.+4      	; 0x61e8 <vfprintf+0x128>
    61e4:	19 36       	cpi	r17, 0x69	; 105
    61e6:	49 f5       	brne	.+82     	; 0x623a <vfprintf+0x17a>
	    long x = (flags & FL_LONG) ? va_arg(ap,long) : va_arg(ap,int);
    61e8:	b7 fe       	sbrs	r11, 7
    61ea:	0a c0       	rjmp	.+20     	; 0x6200 <vfprintf+0x140>
    61ec:	f7 01       	movw	r30, r14
    61ee:	60 81       	ld	r22, Z
    61f0:	71 81       	ldd	r23, Z+1	; 0x01
    61f2:	82 81       	ldd	r24, Z+2	; 0x02
    61f4:	93 81       	ldd	r25, Z+3	; 0x03
    61f6:	24 e0       	ldi	r18, 0x04	; 4
    61f8:	30 e0       	ldi	r19, 0x00	; 0
    61fa:	e2 0e       	add	r14, r18
    61fc:	f3 1e       	adc	r15, r19
    61fe:	0d c0       	rjmp	.+26     	; 0x621a <vfprintf+0x15a>
    6200:	f7 01       	movw	r30, r14
    6202:	80 81       	ld	r24, Z
    6204:	91 81       	ldd	r25, Z+1	; 0x01
    6206:	9c 01       	movw	r18, r24
    6208:	b9 01       	movw	r22, r18
    620a:	88 27       	eor	r24, r24
    620c:	77 fd       	sbrc	r23, 7
    620e:	80 95       	com	r24
    6210:	98 2f       	mov	r25, r24
    6212:	42 e0       	ldi	r20, 0x02	; 2
    6214:	50 e0       	ldi	r21, 0x00	; 0
    6216:	e4 0e       	add	r14, r20
    6218:	f5 1e       	adc	r15, r21
	    flags &= ~FL_ALT;
    621a:	5f ee       	ldi	r21, 0xEF	; 239
    621c:	b5 22       	and	r11, r21
	    if (x < 0) {
    621e:	97 ff       	sbrs	r25, 7
    6220:	09 c0       	rjmp	.+18     	; 0x6234 <vfprintf+0x174>
		x = -x;
    6222:	90 95       	com	r25
    6224:	80 95       	com	r24
    6226:	70 95       	com	r23
    6228:	61 95       	neg	r22
    622a:	7f 4f       	sbci	r23, 0xFF	; 255
    622c:	8f 4f       	sbci	r24, 0xFF	; 255
    622e:	9f 4f       	sbci	r25, 0xFF	; 255
		/* `putc ('-', stream)' will considarably inlarge stack size.
		   So flag is used.	*/
		flags |= FL_NEGATIVE;
    6230:	e0 e4       	ldi	r30, 0x40	; 64
    6232:	be 2a       	or	r11, r30
	    }
	    c = __ultoa_invert (x, (char *)buf, 10) - (char *)buf;
    6234:	2a e0       	ldi	r18, 0x0A	; 10
    6236:	30 e0       	ldi	r19, 0x00	; 0
    6238:	3a c0       	rjmp	.+116    	; 0x62ae <vfprintf+0x1ee>

	} else {
	    int base;

	    switch (c) {
    623a:	10 37       	cpi	r17, 0x70	; 112
    623c:	b1 f0       	breq	.+44     	; 0x626a <vfprintf+0x1aa>
    623e:	11 37       	cpi	r17, 0x71	; 113
    6240:	30 f4       	brcc	.+12     	; 0x624e <vfprintf+0x18e>
    6242:	18 35       	cpi	r17, 0x58	; 88
    6244:	c9 f0       	breq	.+50     	; 0x6278 <vfprintf+0x1b8>
    6246:	1f 36       	cpi	r17, 0x6F	; 111
    6248:	09 f0       	breq	.+2      	; 0x624c <vfprintf+0x18c>
    624a:	63 c0       	rjmp	.+198    	; 0x6312 <vfprintf+0x252>
    624c:	06 c0       	rjmp	.+12     	; 0x625a <vfprintf+0x19a>
    624e:	15 37       	cpi	r17, 0x75	; 117
    6250:	39 f0       	breq	.+14     	; 0x6260 <vfprintf+0x1a0>
    6252:	18 37       	cpi	r17, 0x78	; 120
    6254:	09 f0       	breq	.+2      	; 0x6258 <vfprintf+0x198>
    6256:	5d c0       	rjmp	.+186    	; 0x6312 <vfprintf+0x252>
    6258:	0a c0       	rjmp	.+20     	; 0x626e <vfprintf+0x1ae>
    625a:	28 e0       	ldi	r18, 0x08	; 8
    625c:	30 e0       	ldi	r19, 0x00	; 0
    625e:	10 c0       	rjmp	.+32     	; 0x6280 <vfprintf+0x1c0>
	      case 'u':
		flags &= ~FL_ALT;
    6260:	ff ee       	ldi	r31, 0xEF	; 239
    6262:	bf 22       	and	r11, r31
    6264:	2a e0       	ldi	r18, 0x0A	; 10
    6266:	30 e0       	ldi	r19, 0x00	; 0
    6268:	0b c0       	rjmp	.+22     	; 0x6280 <vfprintf+0x1c0>
		goto ultoa;
	      case 'o':
	        base = 8;
		goto ultoa;
	      case 'p':
	        flags |= FL_ALT;
    626a:	20 e1       	ldi	r18, 0x10	; 16
    626c:	b2 2a       	or	r11, r18
		/* no break */
	      case 'x':
		flags |= (FL_ALTHEX | FL_ALTLWR);
    626e:	34 e2       	ldi	r19, 0x24	; 36
    6270:	b3 2a       	or	r11, r19
    6272:	20 e1       	ldi	r18, 0x10	; 16
    6274:	30 e0       	ldi	r19, 0x00	; 0
    6276:	04 c0       	rjmp	.+8      	; 0x6280 <vfprintf+0x1c0>
	        base = 16;
		goto ultoa;
	      case 'X':
		flags |= FL_ALTHEX;
    6278:	44 e0       	ldi	r20, 0x04	; 4
    627a:	b4 2a       	or	r11, r20
    627c:	20 e1       	ldi	r18, 0x10	; 16
    627e:	32 e0       	ldi	r19, 0x02	; 2
	        base = 16 | XTOA_UPPER;
	      ultoa:
		c = __ultoa_invert ((flags & FL_LONG)
    6280:	b7 fe       	sbrs	r11, 7
    6282:	0a c0       	rjmp	.+20     	; 0x6298 <vfprintf+0x1d8>
    6284:	f7 01       	movw	r30, r14
    6286:	60 81       	ld	r22, Z
    6288:	71 81       	ldd	r23, Z+1	; 0x01
    628a:	82 81       	ldd	r24, Z+2	; 0x02
    628c:	93 81       	ldd	r25, Z+3	; 0x03
    628e:	44 e0       	ldi	r20, 0x04	; 4
    6290:	50 e0       	ldi	r21, 0x00	; 0
    6292:	e4 0e       	add	r14, r20
    6294:	f5 1e       	adc	r15, r21
    6296:	0b c0       	rjmp	.+22     	; 0x62ae <vfprintf+0x1ee>
    6298:	f7 01       	movw	r30, r14
    629a:	80 81       	ld	r24, Z
    629c:	91 81       	ldd	r25, Z+1	; 0x01
    629e:	ac 01       	movw	r20, r24
    62a0:	ba 01       	movw	r22, r20
    62a2:	88 27       	eor	r24, r24
    62a4:	99 27       	eor	r25, r25
    62a6:	e2 e0       	ldi	r30, 0x02	; 2
    62a8:	f0 e0       	ldi	r31, 0x00	; 0
    62aa:	ee 0e       	add	r14, r30
    62ac:	ff 1e       	adc	r15, r31
    62ae:	a3 01       	movw	r20, r6
    62b0:	0e 94 f3 32 	call	0x65e6	; 0x65e6 <__ultoa_invert>
    62b4:	a8 2e       	mov	r10, r24
    62b6:	a6 18       	sub	r10, r6
	        goto ret;
	    }
	}

	/* Integer number output.	*/
	if (flags & FL_NEGATIVE)
    62b8:	0b 2d       	mov	r16, r11
    62ba:	11 27       	eor	r17, r17
    62bc:	06 ff       	sbrs	r16, 6
    62be:	05 c0       	rjmp	.+10     	; 0x62ca <vfprintf+0x20a>
	    putc ('-', stream);
    62c0:	b4 01       	movw	r22, r8
    62c2:	8d e2       	ldi	r24, 0x2D	; 45
    62c4:	90 e0       	ldi	r25, 0x00	; 0
    62c6:	0e 94 50 32 	call	0x64a0	; 0x64a0 <fputc>
	if ((flags & FL_ALT) && (buf[c-1] != '0')) {
    62ca:	04 ff       	sbrs	r16, 4
    62cc:	15 c0       	rjmp	.+42     	; 0x62f8 <vfprintf+0x238>
    62ce:	fe 01       	movw	r30, r28
    62d0:	ea 0d       	add	r30, r10
    62d2:	f1 1d       	adc	r31, r1
    62d4:	80 81       	ld	r24, Z
    62d6:	80 33       	cpi	r24, 0x30	; 48
    62d8:	79 f0       	breq	.+30     	; 0x62f8 <vfprintf+0x238>
	    putc ('0', stream);
    62da:	b4 01       	movw	r22, r8
    62dc:	80 e3       	ldi	r24, 0x30	; 48
    62de:	90 e0       	ldi	r25, 0x00	; 0
    62e0:	0e 94 50 32 	call	0x64a0	; 0x64a0 <fputc>
	    if (flags & FL_ALTHEX)
    62e4:	02 ff       	sbrs	r16, 2
    62e6:	08 c0       	rjmp	.+16     	; 0x62f8 <vfprintf+0x238>
#if  FL_ALTLWR != 'x' - 'X'
# error
#endif
		putc ('X' + (flags & FL_ALTLWR), stream);
    62e8:	00 72       	andi	r16, 0x20	; 32
    62ea:	10 70       	andi	r17, 0x00	; 0
    62ec:	b4 01       	movw	r22, r8
    62ee:	c8 01       	movw	r24, r16
    62f0:	88 5a       	subi	r24, 0xA8	; 168
    62f2:	9f 4f       	sbci	r25, 0xFF	; 255
    62f4:	0e 94 50 32 	call	0x64a0	; 0x64a0 <fputc>
	}
	do {
	    putc (buf[--c], stream);
    62f8:	aa 94       	dec	r10
    62fa:	f3 01       	movw	r30, r6
    62fc:	ea 0d       	add	r30, r10
    62fe:	f1 1d       	adc	r31, r1
    6300:	80 81       	ld	r24, Z
    6302:	b4 01       	movw	r22, r8
    6304:	99 27       	eor	r25, r25
    6306:	0e 94 50 32 	call	0x64a0	; 0x64a0 <fputc>
	} while (c);
    630a:	aa 20       	and	r10, r10
    630c:	09 f4       	brne	.+2      	; 0x6310 <vfprintf+0x250>
    630e:	fb ce       	rjmp	.-522    	; 0x6106 <vfprintf+0x46>
    6310:	f3 cf       	rjmp	.-26     	; 0x62f8 <vfprintf+0x238>

    } /* for (;;) */

  ret:
    return stream->len;
    6312:	f4 01       	movw	r30, r8
    6314:	86 81       	ldd	r24, Z+6	; 0x06
    6316:	97 81       	ldd	r25, Z+7	; 0x07
    6318:	e2 e1       	ldi	r30, 0x12	; 18
    631a:	2b 96       	adiw	r28, 0x0b	; 11
    631c:	0c 94 f6 34 	jmp	0x69ec	; 0x69ec <__epilogue_restores__>

00006320 <do_rand>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "stdio_private.h"
#include "ftoa_engine.h"
    6320:	a0 e0       	ldi	r26, 0x00	; 0
    6322:	b0 e0       	ldi	r27, 0x00	; 0
    6324:	e6 e9       	ldi	r30, 0x96	; 150
    6326:	f1 e3       	ldi	r31, 0x31	; 49
    6328:	0c 94 e2 34 	jmp	0x69c4	; 0x69c4 <__prologue_saves__+0x10>
    632c:	ec 01       	movw	r28, r24

#if PRINTF_LEVEL == PRINTF_MIN || PRINTF_LEVEL == PRINTF_STD \
    || PRINTF_LEVEL == PRINTF_FLT
/* OK */
#else
# error "Not a known printf level."
    632e:	68 81       	ld	r22, Y
    6330:	79 81       	ldd	r23, Y+1	; 0x01
    6332:	8a 81       	ldd	r24, Y+2	; 0x02
    6334:	9b 81       	ldd	r25, Y+3	; 0x03
#endif

    6336:	61 15       	cp	r22, r1
    6338:	71 05       	cpc	r23, r1
    633a:	81 05       	cpc	r24, r1
    633c:	91 05       	cpc	r25, r1
    633e:	49 f4       	brne	.+18     	; 0x6352 <do_rand+0x32>
    6340:	84 e2       	ldi	r24, 0x24	; 36
    6342:	a8 2e       	mov	r10, r24
    6344:	89 ed       	ldi	r24, 0xD9	; 217
    6346:	b8 2e       	mov	r11, r24
    6348:	8b e5       	ldi	r24, 0x5B	; 91
    634a:	c8 2e       	mov	r12, r24
    634c:	87 e0       	ldi	r24, 0x07	; 7
    634e:	d8 2e       	mov	r13, r24
    6350:	02 c0       	rjmp	.+4      	; 0x6356 <do_rand+0x36>

#if PRINTF_LEVEL == PRINTF_MIN || PRINTF_LEVEL == PRINTF_STD \
    || PRINTF_LEVEL == PRINTF_FLT
/* OK */
#else
# error "Not a known printf level."
    6352:	5b 01       	movw	r10, r22
    6354:	6c 01       	movw	r12, r24
#endif

#ifndef	__AVR_HAVE_LPMX__
# if  defined(__AVR_ENHANCED__) && __AVR_ENHANCED__
#  define __AVR_HAVE_LPMX__	1
# endif
    6356:	c6 01       	movw	r24, r12
    6358:	b5 01       	movw	r22, r10
    635a:	2d e1       	ldi	r18, 0x1D	; 29
    635c:	33 ef       	ldi	r19, 0xF3	; 243
    635e:	41 e0       	ldi	r20, 0x01	; 1
    6360:	50 e0       	ldi	r21, 0x00	; 0
    6362:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <__divmodsi4>
    6366:	27 ea       	ldi	r18, 0xA7	; 167
    6368:	31 e4       	ldi	r19, 0x41	; 65
    636a:	40 e0       	ldi	r20, 0x00	; 0
    636c:	50 e0       	ldi	r21, 0x00	; 0
    636e:	0e 94 72 34 	call	0x68e4	; 0x68e4 <__mulsi3>
    6372:	7b 01       	movw	r14, r22
    6374:	8c 01       	movw	r16, r24
    6376:	c6 01       	movw	r24, r12
    6378:	b5 01       	movw	r22, r10
    637a:	2d e1       	ldi	r18, 0x1D	; 29
    637c:	33 ef       	ldi	r19, 0xF3	; 243
    637e:	41 e0       	ldi	r20, 0x01	; 1
    6380:	50 e0       	ldi	r21, 0x00	; 0
    6382:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <__divmodsi4>
    6386:	ca 01       	movw	r24, r20
    6388:	b9 01       	movw	r22, r18
    638a:	24 e1       	ldi	r18, 0x14	; 20
    638c:	3b e0       	ldi	r19, 0x0B	; 11
    638e:	40 e0       	ldi	r20, 0x00	; 0
    6390:	50 e0       	ldi	r21, 0x00	; 0
    6392:	0e 94 72 34 	call	0x68e4	; 0x68e4 <__mulsi3>
    6396:	e6 1a       	sub	r14, r22
    6398:	f7 0a       	sbc	r15, r23
    639a:	08 0b       	sbc	r16, r24
    639c:	19 0b       	sbc	r17, r25
#endif
    639e:	17 ff       	sbrs	r17, 7
    63a0:	08 c0       	rjmp	.+16     	; 0x63b2 <do_rand+0x92>

    63a2:	8f ef       	ldi	r24, 0xFF	; 255
    63a4:	9f ef       	ldi	r25, 0xFF	; 255
    63a6:	af ef       	ldi	r26, 0xFF	; 255
    63a8:	bf e7       	ldi	r27, 0x7F	; 127
    63aa:	e8 0e       	add	r14, r24
    63ac:	f9 1e       	adc	r15, r25
    63ae:	0a 1f       	adc	r16, r26
    63b0:	1b 1f       	adc	r17, r27
#if  defined(__AVR_HAVE_LPMX__) && __AVR_HAVE_LPMX__
    63b2:	e8 82       	st	Y, r14
    63b4:	f9 82       	std	Y+1, r15	; 0x01
    63b6:	0a 83       	std	Y+2, r16	; 0x02
    63b8:	1b 83       	std	Y+3, r17	; 0x03
# define GETBYTE(flag, mask, pnt)	({	\
    unsigned char __c;				\
    63ba:	c7 01       	movw	r24, r14
    63bc:	9f 77       	andi	r25, 0x7F	; 127
    63be:	ea e0       	ldi	r30, 0x0A	; 10
    63c0:	cd b7       	in	r28, 0x3d	; 61
    63c2:	de b7       	in	r29, 0x3e	; 62
    63c4:	0c 94 fe 34 	jmp	0x69fc	; 0x69fc <__epilogue_restores__+0x10>

000063c8 <rand_r>:
    asm (					\
	"sbrc	%2,%3	\n\t"			\
	"lpm	%0,Z+	\n\t"			\
	"sbrs	%2,%3	\n\t"			\
	"ld	%0,Z+	"			\
	: "=r" (__c),				\
    63c8:	0e 94 90 31 	call	0x6320	; 0x6320 <do_rand>
    63cc:	08 95       	ret

000063ce <rand>:
    );						\
    __c;					\
})
#elif	1
# define GETBYTE(flag, mask, pnt)	({	\
    unsigned char __c;				\
    63ce:	8f ee       	ldi	r24, 0xEF	; 239
    63d0:	92 e0       	ldi	r25, 0x02	; 2
    63d2:	0e 94 90 31 	call	0x6320	; 0x6320 <do_rand>
    63d6:	08 95       	ret

000063d8 <srand>:
    asm (					\
	"sbrc	%2,%3	\n\t"			\
	"lpm		\n\t"			\
	"sbrs	%2,%3	\n\t"			\
	"ld	r0,Z	\n\t"			\
	"adiw	r30,1	\n\t"			\
    63d8:	aa 27       	eor	r26, r26
    63da:	bb 27       	eor	r27, r27
    63dc:	80 93 ef 02 	sts	0x02EF, r24
    63e0:	90 93 f0 02 	sts	0x02F0, r25
    63e4:	a0 93 f1 02 	sts	0x02F1, r26
    63e8:	b0 93 f2 02 	sts	0x02F2, r27
    63ec:	08 95       	ret

000063ee <strchr_P>:
    63ee:	fc 01       	movw	r30, r24
    63f0:	05 90       	lpm	r0, Z+
    63f2:	06 16       	cp	r0, r22
    63f4:	21 f0       	breq	.+8      	; 0x63fe <strchr_P+0x10>
    63f6:	00 20       	and	r0, r0
    63f8:	d9 f7       	brne	.-10     	; 0x63f0 <strchr_P+0x2>
    63fa:	c0 01       	movw	r24, r0
    63fc:	08 95       	ret
    63fe:	31 97       	sbiw	r30, 0x01	; 1
    6400:	cf 01       	movw	r24, r30
    6402:	08 95       	ret

00006404 <fdevopen>:
	: "r" (flag),				\
	  "I" (ntz(mask))			\
    );						\
    __c;					\
})
#elif	1
    6404:	ef 92       	push	r14
    6406:	ff 92       	push	r15
    6408:	0f 93       	push	r16
    640a:	1f 93       	push	r17
    640c:	cf 93       	push	r28
    640e:	df 93       	push	r29
    6410:	8c 01       	movw	r16, r24
    6412:	7b 01       	movw	r14, r22
# define GETBYTE(flag, mask, pnt)	({	\
    unsigned char __c;				\
    asm (					\
    6414:	89 2b       	or	r24, r25
    6416:	11 f4       	brne	.+4      	; 0x641c <fdevopen+0x18>
    6418:	67 2b       	or	r22, r23
    641a:	d1 f1       	breq	.+116    	; 0x6490 <fdevopen+0x8c>
	"sbrc	%2,%3	\n\t"			\
	"lpm		\n\t"			\
	"sbrs	%2,%3	\n\t"			\
    641c:	6e e0       	ldi	r22, 0x0E	; 14
    641e:	70 e0       	ldi	r23, 0x00	; 0
    6420:	81 e0       	ldi	r24, 0x01	; 1
    6422:	90 e0       	ldi	r25, 0x00	; 0
    6424:	0e 94 51 33 	call	0x66a2	; 0x66a2 <calloc>
    6428:	fc 01       	movw	r30, r24
    642a:	00 97       	sbiw	r24, 0x00	; 0
    642c:	89 f1       	breq	.+98     	; 0x6490 <fdevopen+0x8c>
    642e:	dc 01       	movw	r26, r24
	"ld	r0,Z	\n\t"			\
	"adiw	r30,1	\n\t"			\
	"mov	%0,r0	"			\
    6430:	80 e8       	ldi	r24, 0x80	; 128
    6432:	83 83       	std	Z+3, r24	; 0x03
	: "=r" (__c),				\
	  "+z" (pnt)				\
    6434:	e1 14       	cp	r14, r1
    6436:	f1 04       	cpc	r15, r1
    6438:	71 f0       	breq	.+28     	; 0x6456 <fdevopen+0x52>
	: "r" (flag),				\
    643a:	f3 86       	std	Z+11, r15	; 0x0b
    643c:	e2 86       	std	Z+10, r14	; 0x0a
	  "I" (ntz(mask))			\
    643e:	81 e8       	ldi	r24, 0x81	; 129
    6440:	83 83       	std	Z+3, r24	; 0x03
	: "r0"					\
    6442:	80 91 d9 07 	lds	r24, 0x07D9
    6446:	90 91 da 07 	lds	r25, 0x07DA
    644a:	89 2b       	or	r24, r25
    644c:	21 f4       	brne	.+8      	; 0x6456 <fdevopen+0x52>
    );						\
    644e:	f0 93 da 07 	sts	0x07DA, r31
    6452:	e0 93 d9 07 	sts	0x07D9, r30
    __c;					\
})
#else
    6456:	01 15       	cp	r16, r1
    6458:	11 05       	cpc	r17, r1
    645a:	e1 f0       	breq	.+56     	; 0x6494 <fdevopen+0x90>
# define GETBYTE(flag, mask, pnt)	({	\
    645c:	11 87       	std	Z+9, r17	; 0x09
    645e:	00 87       	std	Z+8, r16	; 0x08
    unsigned char __c;				\
    6460:	83 81       	ldd	r24, Z+3	; 0x03
    6462:	82 60       	ori	r24, 0x02	; 2
    6464:	83 83       	std	Z+3, r24	; 0x03
    __c = ((flag) & (mask))			\
    6466:	80 91 db 07 	lds	r24, 0x07DB
    646a:	90 91 dc 07 	lds	r25, 0x07DC
    646e:	89 2b       	or	r24, r25
    6470:	89 f4       	brne	.+34     	; 0x6494 <fdevopen+0x90>
	  ? pgm_read_byte(pnt) : *pnt;		\
    6472:	f0 93 dc 07 	sts	0x07DC, r31
    6476:	e0 93 db 07 	sts	0x07DB, r30
    pnt++;					\
    647a:	80 91 dd 07 	lds	r24, 0x07DD
    647e:	90 91 de 07 	lds	r25, 0x07DE
    6482:	89 2b       	or	r24, r25
    6484:	39 f4       	brne	.+14     	; 0x6494 <fdevopen+0x90>
    __c;					\
    6486:	f0 93 de 07 	sts	0x07DE, r31
    648a:	e0 93 dd 07 	sts	0x07DD, r30
    648e:	02 c0       	rjmp	.+4      	; 0x6494 <fdevopen+0x90>
    6490:	a0 e0       	ldi	r26, 0x00	; 0
    6492:	b0 e0       	ldi	r27, 0x00	; 0
})
#endif

/* --------------------------------------------------------------------	*/
#if  PRINTF_LEVEL <= PRINTF_MIN
    6494:	cd 01       	movw	r24, r26
    6496:	e6 e0       	ldi	r30, 0x06	; 6
    6498:	cd b7       	in	r28, 0x3d	; 61
    649a:	de b7       	in	r29, 0x3e	; 62
    649c:	0c 94 02 35 	jmp	0x6a04	; 0x6a04 <__epilogue_restores__+0x18>

000064a0 <fputc>:
/* From: Id: printf_p_new.c,v 1.1.1.9 2002/10/15 20:10:28 joerg_wunsch Exp */
/* $Id: vfprintf.c,v 1.18 2007/03/11 03:34:51 dmix Exp $ */

#include <avr/pgmspace.h>
#include <stdarg.h>
#include <stdio.h>
    64a0:	0f 93       	push	r16
    64a2:	1f 93       	push	r17
    64a4:	cf 93       	push	r28
    64a6:	df 93       	push	r29
    64a8:	8c 01       	movw	r16, r24
    64aa:	eb 01       	movw	r28, r22
#include <stdlib.h>
#include <string.h>
    64ac:	8b 81       	ldd	r24, Y+3	; 0x03
    64ae:	99 27       	eor	r25, r25
    64b0:	81 ff       	sbrs	r24, 1
    64b2:	1b c0       	rjmp	.+54     	; 0x64ea <fputc+0x4a>

#include "stdio_private.h"
#include "ftoa_engine.h"
    64b4:	82 ff       	sbrs	r24, 2
    64b6:	0d c0       	rjmp	.+26     	; 0x64d2 <fputc+0x32>
#include "ntz.h"
    64b8:	2e 81       	ldd	r18, Y+6	; 0x06
    64ba:	3f 81       	ldd	r19, Y+7	; 0x07
    64bc:	8c 81       	ldd	r24, Y+4	; 0x04
    64be:	9d 81       	ldd	r25, Y+5	; 0x05
    64c0:	28 17       	cp	r18, r24
    64c2:	39 07       	cpc	r19, r25
    64c4:	64 f4       	brge	.+24     	; 0x64de <fputc+0x3e>
#include "xtoa_fast.h"
    64c6:	e8 81       	ld	r30, Y
    64c8:	f9 81       	ldd	r31, Y+1	; 0x01
    64ca:	01 93       	st	Z+, r16
    64cc:	f9 83       	std	Y+1, r31	; 0x01
    64ce:	e8 83       	st	Y, r30
    64d0:	06 c0       	rjmp	.+12     	; 0x64de <fputc+0x3e>

/*
 * This file can be compiled into more than one flavour.  The default
 * is to offer the usual modifiers and integer formatting support
    64d2:	e8 85       	ldd	r30, Y+8	; 0x08
    64d4:	f9 85       	ldd	r31, Y+9	; 0x09
    64d6:	80 2f       	mov	r24, r16
    64d8:	09 95       	icall
    64da:	89 2b       	or	r24, r25
    64dc:	31 f4       	brne	.+12     	; 0x64ea <fputc+0x4a>
 * (level 2).  Level 1 maintains a minimal version that just offers
    64de:	8e 81       	ldd	r24, Y+6	; 0x06
    64e0:	9f 81       	ldd	r25, Y+7	; 0x07
    64e2:	01 96       	adiw	r24, 0x01	; 1
    64e4:	9f 83       	std	Y+7, r25	; 0x07
    64e6:	8e 83       	std	Y+6, r24	; 0x06
    64e8:	02 c0       	rjmp	.+4      	; 0x64ee <fputc+0x4e>
 * integer formatting, but no modifier support whatsoever.  Level 3 is
    64ea:	0f ef       	ldi	r16, 0xFF	; 255
    64ec:	1f ef       	ldi	r17, 0xFF	; 255
 * intented for floating point support.
 */

#ifndef PRINTF_LEVEL
    64ee:	c8 01       	movw	r24, r16
    64f0:	df 91       	pop	r29
    64f2:	cf 91       	pop	r28
    64f4:	1f 91       	pop	r17
    64f6:	0f 91       	pop	r16
    64f8:	08 95       	ret

000064fa <printf>:

/* From: Id: printf_p_new.c,v 1.1.1.9 2002/10/15 20:10:28 joerg_wunsch Exp */
/* $Id: vfprintf.c,v 1.18 2007/03/11 03:34:51 dmix Exp $ */

#include <avr/pgmspace.h>
#include <stdarg.h>
    64fa:	a2 e0       	ldi	r26, 0x02	; 2
    64fc:	b0 e0       	ldi	r27, 0x00	; 0
    64fe:	e3 e8       	ldi	r30, 0x83	; 131
    6500:	f2 e3       	ldi	r31, 0x32	; 50
    6502:	0c 94 ea 34 	jmp	0x69d4	; 0x69d4 <__prologue_saves__+0x20>
    6506:	fe 01       	movw	r30, r28
    6508:	37 96       	adiw	r30, 0x07	; 7
    650a:	61 91       	ld	r22, Z+
    650c:	71 91       	ld	r23, Z+
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

    650e:	fa 83       	std	Y+2, r31	; 0x02
    6510:	e9 83       	std	Y+1, r30	; 0x01
#include "stdio_private.h"
    6512:	af 01       	movw	r20, r30
    6514:	80 91 db 07 	lds	r24, 0x07DB
    6518:	90 91 dc 07 	lds	r25, 0x07DC
    651c:	0e 94 60 30 	call	0x60c0	; 0x60c0 <vfprintf>
    6520:	e2 e0       	ldi	r30, 0x02	; 2
    6522:	22 96       	adiw	r28, 0x02	; 2
    6524:	0c 94 06 35 	jmp	0x6a0c	; 0x6a0c <__epilogue_restores__+0x20>

00006528 <putchar>:

#include <avr/pgmspace.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
    6528:	60 91 db 07 	lds	r22, 0x07DB
    652c:	70 91 dc 07 	lds	r23, 0x07DC
    6530:	0e 94 50 32 	call	0x64a0	; 0x64a0 <fputc>
    6534:	08 95       	ret

00006536 <puts>:
/* From: Id: printf_p_new.c,v 1.1.1.9 2002/10/15 20:10:28 joerg_wunsch Exp */
/* $Id: vfprintf.c,v 1.18 2007/03/11 03:34:51 dmix Exp $ */

#include <avr/pgmspace.h>
#include <stdarg.h>
#include <stdio.h>
    6536:	0f 93       	push	r16
    6538:	1f 93       	push	r17
    653a:	cf 93       	push	r28
    653c:	df 93       	push	r29
    653e:	8c 01       	movw	r16, r24
#include <stdlib.h>
#include <string.h>

#include "stdio_private.h"
    6540:	e0 91 db 07 	lds	r30, 0x07DB
    6544:	f0 91 dc 07 	lds	r31, 0x07DC
    6548:	83 81       	ldd	r24, Z+3	; 0x03
    654a:	81 ff       	sbrs	r24, 1
    654c:	1f c0       	rjmp	.+62     	; 0x658c <puts+0x56>
    654e:	c0 e0       	ldi	r28, 0x00	; 0
    6550:	d0 e0       	ldi	r29, 0x00	; 0
    6552:	0a c0       	rjmp	.+20     	; 0x6568 <puts+0x32>
#include "ftoa_engine.h"
#include "ntz.h"
#include "xtoa_fast.h"

    6554:	fd 01       	movw	r30, r26
    6556:	20 85       	ldd	r18, Z+8	; 0x08
    6558:	31 85       	ldd	r19, Z+9	; 0x09
    655a:	bd 01       	movw	r22, r26
    655c:	f9 01       	movw	r30, r18
    655e:	09 95       	icall
    6560:	89 2b       	or	r24, r25
    6562:	11 f0       	breq	.+4      	; 0x6568 <puts+0x32>
    6564:	cf ef       	ldi	r28, 0xFF	; 255
    6566:	df ef       	ldi	r29, 0xFF	; 255
#include <string.h>

#include "stdio_private.h"
#include "ftoa_engine.h"
#include "ntz.h"
#include "xtoa_fast.h"
    6568:	f8 01       	movw	r30, r16
    656a:	81 91       	ld	r24, Z+
    656c:	8f 01       	movw	r16, r30
    656e:	a0 91 db 07 	lds	r26, 0x07DB
    6572:	b0 91 dc 07 	lds	r27, 0x07DC
    6576:	88 23       	and	r24, r24
    6578:	69 f7       	brne	.-38     	; 0x6554 <puts+0x1e>

/*
 * This file can be compiled into more than one flavour.  The default
    657a:	fd 01       	movw	r30, r26
    657c:	20 85       	ldd	r18, Z+8	; 0x08
    657e:	31 85       	ldd	r19, Z+9	; 0x09
    6580:	bd 01       	movw	r22, r26
    6582:	8a e0       	ldi	r24, 0x0A	; 10
    6584:	f9 01       	movw	r30, r18
    6586:	09 95       	icall
    6588:	89 2b       	or	r24, r25
    658a:	11 f0       	breq	.+4      	; 0x6590 <puts+0x5a>
    658c:	cf ef       	ldi	r28, 0xFF	; 255
    658e:	df ef       	ldi	r29, 0xFF	; 255
 * is to offer the usual modifiers and integer formatting support
 * (level 2).  Level 1 maintains a minimal version that just offers
 * integer formatting, but no modifier support whatsoever.  Level 3 is
 * intented for floating point support.
    6590:	ce 01       	movw	r24, r28
    6592:	df 91       	pop	r29
    6594:	cf 91       	pop	r28
    6596:	1f 91       	pop	r17
    6598:	0f 91       	pop	r16
    659a:	08 95       	ret

0000659c <sprintf>:

#include <avr/pgmspace.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
    659c:	a0 e1       	ldi	r26, 0x10	; 16
    659e:	b0 e0       	ldi	r27, 0x00	; 0
    65a0:	e4 ed       	ldi	r30, 0xD4	; 212
    65a2:	f2 e3       	ldi	r31, 0x32	; 50
    65a4:	0c 94 e8 34 	jmp	0x69d0	; 0x69d0 <__prologue_saves__+0x1c>
    65a8:	0f 89       	ldd	r16, Y+23	; 0x17
    65aa:	18 8d       	ldd	r17, Y+24	; 0x18

#include "stdio_private.h"
#include "ftoa_engine.h"
#include "ntz.h"
#include "xtoa_fast.h"
    65ac:	86 e0       	ldi	r24, 0x06	; 6
    65ae:	8e 83       	std	Y+6, r24	; 0x06

    65b0:	1c 83       	std	Y+4, r17	; 0x04
    65b2:	0b 83       	std	Y+3, r16	; 0x03
/*
    65b4:	8f ef       	ldi	r24, 0xFF	; 255
    65b6:	9f e7       	ldi	r25, 0x7F	; 127
    65b8:	98 87       	std	Y+8, r25	; 0x08
    65ba:	8f 83       	std	Y+7, r24	; 0x07
 * This file can be compiled into more than one flavour.  The default
    65bc:	ae 01       	movw	r20, r28
    65be:	45 5e       	subi	r20, 0xE5	; 229
    65c0:	5f 4f       	sbci	r21, 0xFF	; 255
    65c2:	5a 83       	std	Y+2, r21	; 0x02
    65c4:	49 83       	std	Y+1, r20	; 0x01
 * is to offer the usual modifiers and integer formatting support
    65c6:	69 8d       	ldd	r22, Y+25	; 0x19
    65c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    65ca:	ce 01       	movw	r24, r28
    65cc:	03 96       	adiw	r24, 0x03	; 3
    65ce:	0e 94 60 30 	call	0x60c0	; 0x60c0 <vfprintf>
 * (level 2).  Level 1 maintains a minimal version that just offers
 * integer formatting, but no modifier support whatsoever.  Level 3 is
    65d2:	29 85       	ldd	r18, Y+9	; 0x09
    65d4:	3a 85       	ldd	r19, Y+10	; 0x0a
    65d6:	02 0f       	add	r16, r18
    65d8:	13 1f       	adc	r17, r19
    65da:	f8 01       	movw	r30, r16
    65dc:	10 82       	st	Z, r1
    65de:	e4 e0       	ldi	r30, 0x04	; 4
    65e0:	60 96       	adiw	r28, 0x10	; 16
    65e2:	0c 94 04 35 	jmp	0x6a08	; 0x6a08 <__epilogue_restores__+0x1c>

000065e6 <__ultoa_invert>:
    65e6:	fa 01       	movw	r30, r20
    65e8:	aa 27       	eor	r26, r26
    65ea:	28 30       	cpi	r18, 0x08	; 8
    65ec:	51 f1       	breq	.+84     	; 0x6642 <__ultoa_invert+0x5c>
    65ee:	20 31       	cpi	r18, 0x10	; 16
    65f0:	81 f1       	breq	.+96     	; 0x6652 <__ultoa_invert+0x6c>
    65f2:	e8 94       	clt
    65f4:	6f 93       	push	r22
    65f6:	6e 7f       	andi	r22, 0xFE	; 254
    65f8:	6e 5f       	subi	r22, 0xFE	; 254
    65fa:	7f 4f       	sbci	r23, 0xFF	; 255
    65fc:	8f 4f       	sbci	r24, 0xFF	; 255
    65fe:	9f 4f       	sbci	r25, 0xFF	; 255
    6600:	af 4f       	sbci	r26, 0xFF	; 255
    6602:	b1 e0       	ldi	r27, 0x01	; 1
    6604:	3e d0       	rcall	.+124    	; 0x6682 <__ultoa_invert+0x9c>
    6606:	b4 e0       	ldi	r27, 0x04	; 4
    6608:	3c d0       	rcall	.+120    	; 0x6682 <__ultoa_invert+0x9c>
    660a:	67 0f       	add	r22, r23
    660c:	78 1f       	adc	r23, r24
    660e:	89 1f       	adc	r24, r25
    6610:	9a 1f       	adc	r25, r26
    6612:	a1 1d       	adc	r26, r1
    6614:	68 0f       	add	r22, r24
    6616:	79 1f       	adc	r23, r25
    6618:	8a 1f       	adc	r24, r26
    661a:	91 1d       	adc	r25, r1
    661c:	a1 1d       	adc	r26, r1
    661e:	6a 0f       	add	r22, r26
    6620:	71 1d       	adc	r23, r1
    6622:	81 1d       	adc	r24, r1
    6624:	91 1d       	adc	r25, r1
    6626:	a1 1d       	adc	r26, r1
    6628:	20 d0       	rcall	.+64     	; 0x666a <__ultoa_invert+0x84>
    662a:	09 f4       	brne	.+2      	; 0x662e <__ultoa_invert+0x48>
    662c:	68 94       	set
    662e:	3f 91       	pop	r19
    6630:	2a e0       	ldi	r18, 0x0A	; 10
    6632:	26 9f       	mul	r18, r22
    6634:	11 24       	eor	r1, r1
    6636:	30 19       	sub	r19, r0
    6638:	30 5d       	subi	r19, 0xD0	; 208
    663a:	31 93       	st	Z+, r19
    663c:	de f6       	brtc	.-74     	; 0x65f4 <__ultoa_invert+0xe>
    663e:	cf 01       	movw	r24, r30
    6640:	08 95       	ret
    6642:	46 2f       	mov	r20, r22
    6644:	47 70       	andi	r20, 0x07	; 7
    6646:	40 5d       	subi	r20, 0xD0	; 208
    6648:	41 93       	st	Z+, r20
    664a:	b3 e0       	ldi	r27, 0x03	; 3
    664c:	0f d0       	rcall	.+30     	; 0x666c <__ultoa_invert+0x86>
    664e:	c9 f7       	brne	.-14     	; 0x6642 <__ultoa_invert+0x5c>
    6650:	f6 cf       	rjmp	.-20     	; 0x663e <__ultoa_invert+0x58>
    6652:	46 2f       	mov	r20, r22
    6654:	4f 70       	andi	r20, 0x0F	; 15
    6656:	40 5d       	subi	r20, 0xD0	; 208
    6658:	4a 33       	cpi	r20, 0x3A	; 58
    665a:	18 f0       	brcs	.+6      	; 0x6662 <__ultoa_invert+0x7c>
    665c:	49 5d       	subi	r20, 0xD9	; 217
    665e:	31 fd       	sbrc	r19, 1
    6660:	40 52       	subi	r20, 0x20	; 32
    6662:	41 93       	st	Z+, r20
    6664:	02 d0       	rcall	.+4      	; 0x666a <__ultoa_invert+0x84>
    6666:	a9 f7       	brne	.-22     	; 0x6652 <__ultoa_invert+0x6c>
    6668:	ea cf       	rjmp	.-44     	; 0x663e <__ultoa_invert+0x58>
    666a:	b4 e0       	ldi	r27, 0x04	; 4
    666c:	a6 95       	lsr	r26
    666e:	97 95       	ror	r25
    6670:	87 95       	ror	r24
    6672:	77 95       	ror	r23
    6674:	67 95       	ror	r22
    6676:	ba 95       	dec	r27
    6678:	c9 f7       	brne	.-14     	; 0x666c <__ultoa_invert+0x86>
    667a:	00 97       	sbiw	r24, 0x00	; 0
    667c:	61 05       	cpc	r22, r1
    667e:	71 05       	cpc	r23, r1
    6680:	08 95       	ret
    6682:	9b 01       	movw	r18, r22
    6684:	ac 01       	movw	r20, r24
    6686:	0a 2e       	mov	r0, r26
    6688:	06 94       	lsr	r0
    668a:	57 95       	ror	r21
    668c:	47 95       	ror	r20
    668e:	37 95       	ror	r19
    6690:	27 95       	ror	r18
    6692:	ba 95       	dec	r27
    6694:	c9 f7       	brne	.-14     	; 0x6688 <__ultoa_invert+0xa2>
    6696:	62 0f       	add	r22, r18
    6698:	73 1f       	adc	r23, r19
    669a:	84 1f       	adc	r24, r20
    669c:	95 1f       	adc	r25, r21
    669e:	a0 1d       	adc	r26, r0
    66a0:	08 95       	ret

000066a2 <calloc>:
/* From: Id: printf_p_new.c,v 1.1.1.9 2002/10/15 20:10:28 joerg_wunsch Exp */
/* $Id: vfprintf.c,v 1.18 2007/03/11 03:34:51 dmix Exp $ */

#include <avr/pgmspace.h>
#include <stdarg.h>
#include <stdio.h>
    66a2:	0f 93       	push	r16
    66a4:	1f 93       	push	r17
    66a6:	cf 93       	push	r28
    66a8:	df 93       	push	r29
#include <stdlib.h>
#include <string.h>

    66aa:	68 9f       	mul	r22, r24
    66ac:	80 01       	movw	r16, r0
    66ae:	69 9f       	mul	r22, r25
    66b0:	10 0d       	add	r17, r0
    66b2:	78 9f       	mul	r23, r24
    66b4:	10 0d       	add	r17, r0
    66b6:	11 24       	eor	r1, r1
    66b8:	c8 01       	movw	r24, r16
    66ba:	0e 94 6d 33 	call	0x66da	; 0x66da <malloc>
    66be:	ec 01       	movw	r28, r24
    66c0:	00 97       	sbiw	r24, 0x00	; 0
    66c2:	29 f0       	breq	.+10     	; 0x66ce <calloc+0x2c>
#include "stdio_private.h"
#include "ftoa_engine.h"
    66c4:	a8 01       	movw	r20, r16
    66c6:	60 e0       	ldi	r22, 0x00	; 0
    66c8:	70 e0       	ldi	r23, 0x00	; 0
    66ca:	0e 94 6b 34 	call	0x68d6	; 0x68d6 <memset>
#include "ntz.h"
#include "xtoa_fast.h"
    66ce:	ce 01       	movw	r24, r28
    66d0:	df 91       	pop	r29
    66d2:	cf 91       	pop	r28
    66d4:	1f 91       	pop	r17
    66d6:	0f 91       	pop	r16
    66d8:	08 95       	ret

000066da <malloc>:
#else
# error "Not a known printf level."
#endif

#ifndef	__AVR_HAVE_LPMX__
# if  defined(__AVR_ENHANCED__) && __AVR_ENHANCED__
    66da:	cf 93       	push	r28
    66dc:	df 93       	push	r29
    66de:	ac 01       	movw	r20, r24
# define GETBYTE(flag, mask, pnt)	({	\
    unsigned char __c;				\
    asm (					\
	"sbrc	%2,%3	\n\t"			\
	"lpm	%0,Z+	\n\t"			\
	"sbrs	%2,%3	\n\t"			\
    66e0:	02 97       	sbiw	r24, 0x02	; 2
    66e2:	10 f4       	brcc	.+4      	; 0x66e8 <malloc+0xe>
    66e4:	42 e0       	ldi	r20, 0x02	; 2
    66e6:	50 e0       	ldi	r21, 0x00	; 0
	  "I" (ntz(mask))			\
    );						\
    __c;					\
})
#elif	1
# define GETBYTE(flag, mask, pnt)	({	\
    66e8:	a0 91 e1 07 	lds	r26, 0x07E1
    66ec:	b0 91 e2 07 	lds	r27, 0x07E2
    66f0:	fd 01       	movw	r30, r26
    66f2:	c0 e0       	ldi	r28, 0x00	; 0
    66f4:	d0 e0       	ldi	r29, 0x00	; 0
    66f6:	20 e0       	ldi	r18, 0x00	; 0
    66f8:	30 e0       	ldi	r19, 0x00	; 0
    66fa:	20 c0       	rjmp	.+64     	; 0x673c <malloc+0x62>
    unsigned char __c;				\
    asm (					\
	"sbrc	%2,%3	\n\t"			\
    66fc:	80 81       	ld	r24, Z
    66fe:	91 81       	ldd	r25, Z+1	; 0x01
    6700:	84 17       	cp	r24, r20
    6702:	95 07       	cpc	r25, r21
    6704:	69 f4       	brne	.+26     	; 0x6720 <malloc+0x46>
    6706:	82 81       	ldd	r24, Z+2	; 0x02
    6708:	93 81       	ldd	r25, Z+3	; 0x03
	"lpm		\n\t"			\
	"sbrs	%2,%3	\n\t"			\
	"ld	r0,Z	\n\t"			\
	"adiw	r30,1	\n\t"			\
	"mov	%0,r0	"			\
    670a:	20 97       	sbiw	r28, 0x00	; 0
    670c:	19 f0       	breq	.+6      	; 0x6714 <malloc+0x3a>
	: "=r" (__c),				\
    670e:	9b 83       	std	Y+3, r25	; 0x03
    6710:	8a 83       	std	Y+2, r24	; 0x02
    6712:	04 c0       	rjmp	.+8      	; 0x671c <malloc+0x42>
	  "+z" (pnt)				\
	: "r" (flag),				\
    6714:	90 93 e2 07 	sts	0x07E2, r25
    6718:	80 93 e1 07 	sts	0x07E1, r24
	  "I" (ntz(mask))			\
    671c:	9f 01       	movw	r18, r30
    671e:	32 c0       	rjmp	.+100    	; 0x6784 <malloc+0xaa>
	: "r0"					\
    );						\
    6720:	48 17       	cp	r20, r24
    6722:	59 07       	cpc	r21, r25
    6724:	38 f4       	brcc	.+14     	; 0x6734 <malloc+0x5a>
    __c;					\
    6726:	21 15       	cp	r18, r1
    6728:	31 05       	cpc	r19, r1
    672a:	19 f0       	breq	.+6      	; 0x6732 <malloc+0x58>
    672c:	82 17       	cp	r24, r18
    672e:	93 07       	cpc	r25, r19
    6730:	08 f4       	brcc	.+2      	; 0x6734 <malloc+0x5a>
    6732:	9c 01       	movw	r18, r24
    __c;					\
})
#elif	1
# define GETBYTE(flag, mask, pnt)	({	\
    unsigned char __c;				\
    asm (					\
    6734:	ef 01       	movw	r28, r30
    6736:	02 80       	ldd	r0, Z+2	; 0x02
    6738:	f3 81       	ldd	r31, Z+3	; 0x03
    673a:	e0 2d       	mov	r30, r0
    );						\
    __c;					\
})
#elif	1
# define GETBYTE(flag, mask, pnt)	({	\
    unsigned char __c;				\
    673c:	30 97       	sbiw	r30, 0x00	; 0
    673e:	f1 f6       	brne	.-68     	; 0x66fc <malloc+0x22>
})
#endif

/* --------------------------------------------------------------------	*/
#if  PRINTF_LEVEL <= PRINTF_MIN

    6740:	21 15       	cp	r18, r1
    6742:	31 05       	cpc	r19, r1
    6744:	99 f1       	breq	.+102    	; 0x67ac <malloc+0xd2>
#define FL_PGMSTRING	0x01
    6746:	c9 01       	movw	r24, r18
    6748:	84 1b       	sub	r24, r20
    674a:	95 0b       	sbc	r25, r21
    674c:	04 97       	sbiw	r24, 0x04	; 4
    674e:	08 f4       	brcc	.+2      	; 0x6752 <malloc+0x78>
    6750:	a9 01       	movw	r20, r18
    6752:	e0 e0       	ldi	r30, 0x00	; 0
    6754:	f0 e0       	ldi	r31, 0x00	; 0
    6756:	28 c0       	rjmp	.+80     	; 0x67a8 <malloc+0xce>
#define FL_ALTHEX	0x04
#define FL_ALT		0x10
#define FL_ALTLWR	0x20
#define FL_NEGATIVE	0x40
#define FL_LONG 	0x80
    6758:	8d 91       	ld	r24, X+
    675a:	9c 91       	ld	r25, X
    675c:	11 97       	sbiw	r26, 0x01	; 1
    675e:	82 17       	cp	r24, r18
    6760:	93 07       	cpc	r25, r19
    6762:	f9 f4       	brne	.+62     	; 0x67a2 <malloc+0xc8>

    6764:	48 17       	cp	r20, r24
    6766:	59 07       	cpc	r21, r25
    6768:	81 f4       	brne	.+32     	; 0x678a <malloc+0xb0>
    676a:	ed 01       	movw	r28, r26
    676c:	8a 81       	ldd	r24, Y+2	; 0x02
    676e:	9b 81       	ldd	r25, Y+3	; 0x03
int vfprintf (FILE * stream, const char *fmt, va_list ap)
{
    unsigned char c;		/* holds a char from the format string */
    unsigned char flags;
    unsigned char buf[11];	/* size for -1 in octal, without '\0'	*/
    6770:	30 97       	sbiw	r30, 0x00	; 0
    6772:	19 f0       	breq	.+6      	; 0x677a <malloc+0xa0>

    6774:	93 83       	std	Z+3, r25	; 0x03
    6776:	82 83       	std	Z+2, r24	; 0x02
    6778:	04 c0       	rjmp	.+8      	; 0x6782 <malloc+0xa8>
    stream->len = 0;

    677a:	90 93 e2 07 	sts	0x07E2, r25
    677e:	80 93 e1 07 	sts	0x07E1, r24
    if ((stream->flags & __SWR) == 0)
    6782:	9d 01       	movw	r18, r26
    6784:	2e 5f       	subi	r18, 0xFE	; 254
    6786:	3f 4f       	sbci	r19, 0xFF	; 255
    6788:	4c c0       	rjmp	.+152    	; 0x6822 <malloc+0x148>
		if (c != '%') break;
	    }
	    putc (c, stream);
	}

	for (flags = 0;
    678a:	84 1b       	sub	r24, r20
    678c:	95 0b       	sbc	r25, r21
	     !(flags & FL_LONG);	/* 'll' will detect as error	*/
	     c = GETBYTE (stream->flags, __SPGM, fmt))
    678e:	fd 01       	movw	r30, r26
    6790:	e8 0f       	add	r30, r24
    6792:	f9 1f       	adc	r31, r25
	{
    6794:	41 93       	st	Z+, r20
    6796:	51 93       	st	Z+, r21
	    if (c && strchr_P (PSTR(" +-.0123456789h"), c))
    6798:	02 97       	sbiw	r24, 0x02	; 2
    679a:	8d 93       	st	X+, r24
    679c:	9c 93       	st	X, r25
		continue;
    679e:	9f 01       	movw	r18, r30
    67a0:	40 c0       	rjmp	.+128    	; 0x6822 <malloc+0x148>

#define FL_PGMSTRING	0x01
#define FL_ALTHEX	0x04
#define FL_ALT		0x10
#define FL_ALTLWR	0x20
#define FL_NEGATIVE	0x40
    67a2:	fd 01       	movw	r30, r26
    67a4:	a2 81       	ldd	r26, Z+2	; 0x02
    67a6:	b3 81       	ldd	r27, Z+3	; 0x03
#if  PRINTF_LEVEL <= PRINTF_MIN

#define FL_PGMSTRING	0x01
#define FL_ALTHEX	0x04
#define FL_ALT		0x10
#define FL_ALTLWR	0x20
    67a8:	10 97       	sbiw	r26, 0x00	; 0
    67aa:	b1 f6       	brne	.-84     	; 0x6758 <malloc+0x7e>
	    break;
	}

	/* Only a format character is valid.	*/

	if (c && strchr_P (PSTR("EFGefg"), c)) {
    67ac:	80 91 df 07 	lds	r24, 0x07DF
    67b0:	90 91 e0 07 	lds	r25, 0x07E0
    67b4:	89 2b       	or	r24, r25
    67b6:	41 f4       	brne	.+16     	; 0x67c8 <malloc+0xee>
	    (void) va_arg (ap, double);
    67b8:	80 91 f5 02 	lds	r24, 0x02F5
    67bc:	90 91 f6 02 	lds	r25, 0x02F6
    67c0:	90 93 e0 07 	sts	0x07E0, r25
    67c4:	80 93 df 07 	sts	0x07DF, r24
	    putc ('?', stream);
    67c8:	20 91 f7 02 	lds	r18, 0x02F7
    67cc:	30 91 f8 02 	lds	r19, 0x02F8
	    continue;
    67d0:	21 15       	cp	r18, r1
    67d2:	31 05       	cpc	r19, r1
    67d4:	49 f4       	brne	.+18     	; 0x67e8 <malloc+0x10e>
	}
    67d6:	8d b7       	in	r24, 0x3d	; 61
    67d8:	28 2f       	mov	r18, r24
    67da:	33 27       	eor	r19, r19
    67dc:	80 91 f3 02 	lds	r24, 0x02F3
    67e0:	90 91 f4 02 	lds	r25, 0x02F4
    67e4:	28 1b       	sub	r18, r24
    67e6:	39 0b       	sbc	r19, r25

    67e8:	a0 91 df 07 	lds	r26, 0x07DF
    67ec:	b0 91 e0 07 	lds	r27, 0x07E0
    67f0:	2a 1b       	sub	r18, r26
    67f2:	3b 0b       	sbc	r19, r27
	{
	    const char * pnt;

	    switch (c) {
    67f4:	24 17       	cp	r18, r20
    67f6:	35 07       	cpc	r19, r21
    67f8:	90 f0       	brcs	.+36     	; 0x681e <malloc+0x144>
    67fa:	ca 01       	movw	r24, r20
    67fc:	02 96       	adiw	r24, 0x02	; 2
    67fe:	28 17       	cp	r18, r24
    6800:	39 07       	cpc	r19, r25
    6802:	68 f0       	brcs	.+26     	; 0x681e <malloc+0x144>

	      case 'c':
    6804:	9d 01       	movw	r18, r26
    6806:	2e 5f       	subi	r18, 0xFE	; 254
    6808:	3f 4f       	sbci	r19, 0xFF	; 255
    680a:	c9 01       	movw	r24, r18
    680c:	84 0f       	add	r24, r20
    680e:	95 1f       	adc	r25, r21
    6810:	90 93 e0 07 	sts	0x07E0, r25
    6814:	80 93 df 07 	sts	0x07DF, r24
		putc (va_arg (ap, int), stream);
    6818:	4d 93       	st	X+, r20
    681a:	5c 93       	st	X, r21
    681c:	02 c0       	rjmp	.+4      	; 0x6822 <malloc+0x148>
		continue;
    681e:	20 e0       	ldi	r18, 0x00	; 0
    6820:	30 e0       	ldi	r19, 0x00	; 0

	      case 'S':
		flags |= FL_PGMSTRING;
		/* FALLTHROUGH */

	      case 's':
    6822:	c9 01       	movw	r24, r18
    6824:	df 91       	pop	r29
    6826:	cf 91       	pop	r28
    6828:	08 95       	ret

0000682a <free>:
		pnt = va_arg (ap, char *);
	        while ( (c = GETBYTE (flags, FL_PGMSTRING, pnt)) != 0)
		    putc (c, stream);
		continue;
    682a:	cf 93       	push	r28
    682c:	df 93       	push	r29
	    }
	}

	if (c == 'd' || c == 'i') {
	    long x = (flags & FL_LONG) ? va_arg(ap,long) : va_arg(ap,int);
    682e:	00 97       	sbiw	r24, 0x00	; 0
    6830:	09 f4       	brne	.+2      	; 0x6834 <free+0xa>
    6832:	4e c0       	rjmp	.+156    	; 0x68d0 <free+0xa6>
	    flags &= ~FL_ALT;
	    if (x < 0) {
		x = -x;
		/* `putc ('-', stream)' will considarably inlarge stack size.
    6834:	ec 01       	movw	r28, r24
    6836:	22 97       	sbiw	r28, 0x02	; 2
		   So flag is used.	*/
		flags |= FL_NEGATIVE;
    6838:	1b 82       	std	Y+3, r1	; 0x03
    683a:	1a 82       	std	Y+2, r1	; 0x02
	    }
	    c = __ultoa_invert (x, (char *)buf, 10) - (char *)buf;

	} else {
	    int base;

    683c:	a0 91 e1 07 	lds	r26, 0x07E1
    6840:	b0 91 e2 07 	lds	r27, 0x07E2
    6844:	10 97       	sbiw	r26, 0x00	; 0
    6846:	11 f1       	breq	.+68     	; 0x688c <free+0x62>
    6848:	40 e0       	ldi	r20, 0x00	; 0
    684a:	50 e0       	ldi	r21, 0x00	; 0
    684c:	01 c0       	rjmp	.+2      	; 0x6850 <free+0x26>
	    switch (c) {
	      case 'u':
    684e:	dc 01       	movw	r26, r24
		goto ultoa;
	      case 'p':
	        flags |= FL_ALT;
		/* no break */
	      case 'x':
		flags |= (FL_ALTHEX | FL_ALTLWR);
    6850:	ac 17       	cp	r26, r28
    6852:	bd 07       	cpc	r27, r29
    6854:	00 f1       	brcs	.+64     	; 0x6896 <free+0x6c>
	        base = 16;
		goto ultoa;
	      case 'X':
    6856:	bb 83       	std	Y+3, r27	; 0x03
    6858:	aa 83       	std	Y+2, r26	; 0x02
		flags |= FL_ALTHEX;
    685a:	fe 01       	movw	r30, r28
    685c:	21 91       	ld	r18, Z+
    685e:	31 91       	ld	r19, Z+
    6860:	e2 0f       	add	r30, r18
    6862:	f3 1f       	adc	r31, r19
    6864:	ea 17       	cp	r30, r26
    6866:	fb 07       	cpc	r31, r27
    6868:	71 f4       	brne	.+28     	; 0x6886 <free+0x5c>
	        base = 16 | XTOA_UPPER;
	      ultoa:
    686a:	8d 91       	ld	r24, X+
    686c:	9c 91       	ld	r25, X
    686e:	11 97       	sbiw	r26, 0x01	; 1
    6870:	28 0f       	add	r18, r24
    6872:	39 1f       	adc	r19, r25
    6874:	2e 5f       	subi	r18, 0xFE	; 254
    6876:	3f 4f       	sbci	r19, 0xFF	; 255
    6878:	39 83       	std	Y+1, r19	; 0x01
    687a:	28 83       	st	Y, r18
		c = __ultoa_invert ((flags & FL_LONG)
    687c:	fd 01       	movw	r30, r26
    687e:	82 81       	ldd	r24, Z+2	; 0x02
    6880:	93 81       	ldd	r25, Z+3	; 0x03
    6882:	9b 83       	std	Y+3, r25	; 0x03
    6884:	8a 83       	std	Y+2, r24	; 0x02
				    ? va_arg(ap, unsigned long)
				    : va_arg(ap, unsigned int),
    6886:	41 15       	cp	r20, r1
    6888:	51 05       	cpc	r21, r1
    688a:	59 f4       	brne	.+22     	; 0x68a2 <free+0x78>
				    (char *)buf, base)  -  (char *)buf;
		break;
    688c:	d0 93 e2 07 	sts	0x07E2, r29
    6890:	c0 93 e1 07 	sts	0x07E1, r28
    6894:	1d c0       	rjmp	.+58     	; 0x68d0 <free+0xa6>
	        base = 8;
		goto ultoa;
	      case 'p':
	        flags |= FL_ALT;
		/* no break */
	      case 'x':
    6896:	fd 01       	movw	r30, r26
    6898:	82 81       	ldd	r24, Z+2	; 0x02
    689a:	93 81       	ldd	r25, Z+3	; 0x03
    689c:	ad 01       	movw	r20, r26
	      case 'o':
	        base = 8;
		goto ultoa;
	      case 'p':
	        flags |= FL_ALT;
		/* no break */
    689e:	00 97       	sbiw	r24, 0x00	; 0
    68a0:	b1 f6       	brne	.-84     	; 0x684e <free+0x24>

	/* Integer number output.	*/
	if (flags & FL_NEGATIVE)
	    putc ('-', stream);
	if ((flags & FL_ALT) && (buf[c-1] != '0')) {
	    putc ('0', stream);
    68a2:	fa 01       	movw	r30, r20
    68a4:	d3 83       	std	Z+3, r29	; 0x03
    68a6:	c2 83       	std	Z+2, r28	; 0x02
	    if (flags & FL_ALTHEX)
#if  FL_ALTLWR != 'x' - 'X'
    68a8:	21 91       	ld	r18, Z+
    68aa:	31 91       	ld	r19, Z+
    68ac:	e2 0f       	add	r30, r18
    68ae:	f3 1f       	adc	r31, r19
    68b0:	ec 17       	cp	r30, r28
    68b2:	fd 07       	cpc	r31, r29
    68b4:	69 f4       	brne	.+26     	; 0x68d0 <free+0xa6>
# error
#endif
    68b6:	88 81       	ld	r24, Y
    68b8:	99 81       	ldd	r25, Y+1	; 0x01
    68ba:	28 0f       	add	r18, r24
    68bc:	39 1f       	adc	r19, r25
    68be:	2e 5f       	subi	r18, 0xFE	; 254
    68c0:	3f 4f       	sbci	r19, 0xFF	; 255
    68c2:	fa 01       	movw	r30, r20
    68c4:	31 83       	std	Z+1, r19	; 0x01
    68c6:	20 83       	st	Z, r18
		putc ('X' + (flags & FL_ALTLWR), stream);
    68c8:	8a 81       	ldd	r24, Y+2	; 0x02
    68ca:	9b 81       	ldd	r25, Y+3	; 0x03
    68cc:	93 83       	std	Z+3, r25	; 0x03
    68ce:	82 83       	std	Z+2, r24	; 0x02
    68d0:	df 91       	pop	r29
    68d2:	cf 91       	pop	r28
    68d4:	08 95       	ret

000068d6 <memset>:
    68d6:	dc 01       	movw	r26, r24
    68d8:	01 c0       	rjmp	.+2      	; 0x68dc <memset+0x6>
    68da:	6d 93       	st	X+, r22
    68dc:	41 50       	subi	r20, 0x01	; 1
    68de:	50 40       	sbci	r21, 0x00	; 0
    68e0:	e0 f7       	brcc	.-8      	; 0x68da <memset+0x4>
    68e2:	08 95       	ret

000068e4 <__mulsi3>:
    68e4:	62 9f       	mul	r22, r18
    68e6:	d0 01       	movw	r26, r0
    68e8:	73 9f       	mul	r23, r19
    68ea:	f0 01       	movw	r30, r0
    68ec:	82 9f       	mul	r24, r18
    68ee:	e0 0d       	add	r30, r0
    68f0:	f1 1d       	adc	r31, r1
    68f2:	64 9f       	mul	r22, r20
    68f4:	e0 0d       	add	r30, r0
    68f6:	f1 1d       	adc	r31, r1
    68f8:	92 9f       	mul	r25, r18
    68fa:	f0 0d       	add	r31, r0
    68fc:	83 9f       	mul	r24, r19
    68fe:	f0 0d       	add	r31, r0
    6900:	74 9f       	mul	r23, r20
    6902:	f0 0d       	add	r31, r0
    6904:	65 9f       	mul	r22, r21
    6906:	f0 0d       	add	r31, r0
    6908:	99 27       	eor	r25, r25
    690a:	72 9f       	mul	r23, r18
    690c:	b0 0d       	add	r27, r0
    690e:	e1 1d       	adc	r30, r1
    6910:	f9 1f       	adc	r31, r25
    6912:	63 9f       	mul	r22, r19
    6914:	b0 0d       	add	r27, r0
    6916:	e1 1d       	adc	r30, r1
    6918:	f9 1f       	adc	r31, r25
    691a:	bd 01       	movw	r22, r26
    691c:	cf 01       	movw	r24, r30
    691e:	11 24       	eor	r1, r1
    6920:	08 95       	ret

00006922 <__udivmodhi4>:
    6922:	aa 1b       	sub	r26, r26
    6924:	bb 1b       	sub	r27, r27
    6926:	51 e1       	ldi	r21, 0x11	; 17
    6928:	07 c0       	rjmp	.+14     	; 0x6938 <__udivmodhi4_ep>

0000692a <__udivmodhi4_loop>:
    692a:	aa 1f       	adc	r26, r26
    692c:	bb 1f       	adc	r27, r27
    692e:	a6 17       	cp	r26, r22
    6930:	b7 07       	cpc	r27, r23
    6932:	10 f0       	brcs	.+4      	; 0x6938 <__udivmodhi4_ep>
    6934:	a6 1b       	sub	r26, r22
    6936:	b7 0b       	sbc	r27, r23

00006938 <__udivmodhi4_ep>:
    6938:	88 1f       	adc	r24, r24
    693a:	99 1f       	adc	r25, r25
    693c:	5a 95       	dec	r21
    693e:	a9 f7       	brne	.-22     	; 0x692a <__udivmodhi4_loop>
    6940:	80 95       	com	r24
    6942:	90 95       	com	r25
    6944:	bc 01       	movw	r22, r24
    6946:	cd 01       	movw	r24, r26
    6948:	08 95       	ret

0000694a <__divmodhi4>:
    694a:	97 fb       	bst	r25, 7
    694c:	09 2e       	mov	r0, r25
    694e:	07 26       	eor	r0, r23
    6950:	0a d0       	rcall	.+20     	; 0x6966 <__divmodhi4_neg1>
    6952:	77 fd       	sbrc	r23, 7
    6954:	04 d0       	rcall	.+8      	; 0x695e <__divmodhi4_neg2>
    6956:	e5 df       	rcall	.-54     	; 0x6922 <__udivmodhi4>
    6958:	06 d0       	rcall	.+12     	; 0x6966 <__divmodhi4_neg1>
    695a:	00 20       	and	r0, r0
    695c:	1a f4       	brpl	.+6      	; 0x6964 <__divmodhi4_exit>

0000695e <__divmodhi4_neg2>:
    695e:	70 95       	com	r23
    6960:	61 95       	neg	r22
    6962:	7f 4f       	sbci	r23, 0xFF	; 255

00006964 <__divmodhi4_exit>:
    6964:	08 95       	ret

00006966 <__divmodhi4_neg1>:
    6966:	f6 f7       	brtc	.-4      	; 0x6964 <__divmodhi4_exit>
    6968:	90 95       	com	r25
    696a:	81 95       	neg	r24
    696c:	9f 4f       	sbci	r25, 0xFF	; 255
    696e:	08 95       	ret

00006970 <__udivmodsi4>:
    6970:	a1 e2       	ldi	r26, 0x21	; 33
    6972:	1a 2e       	mov	r1, r26
    6974:	aa 1b       	sub	r26, r26
    6976:	bb 1b       	sub	r27, r27
    6978:	fd 01       	movw	r30, r26
    697a:	0d c0       	rjmp	.+26     	; 0x6996 <__udivmodsi4_ep>

0000697c <__udivmodsi4_loop>:
    697c:	aa 1f       	adc	r26, r26
    697e:	bb 1f       	adc	r27, r27
    6980:	ee 1f       	adc	r30, r30
    6982:	ff 1f       	adc	r31, r31
    6984:	a2 17       	cp	r26, r18
    6986:	b3 07       	cpc	r27, r19
    6988:	e4 07       	cpc	r30, r20
    698a:	f5 07       	cpc	r31, r21
    698c:	20 f0       	brcs	.+8      	; 0x6996 <__udivmodsi4_ep>
    698e:	a2 1b       	sub	r26, r18
    6990:	b3 0b       	sbc	r27, r19
    6992:	e4 0b       	sbc	r30, r20
    6994:	f5 0b       	sbc	r31, r21

00006996 <__udivmodsi4_ep>:
    6996:	66 1f       	adc	r22, r22
    6998:	77 1f       	adc	r23, r23
    699a:	88 1f       	adc	r24, r24
    699c:	99 1f       	adc	r25, r25
    699e:	1a 94       	dec	r1
    69a0:	69 f7       	brne	.-38     	; 0x697c <__udivmodsi4_loop>
    69a2:	60 95       	com	r22
    69a4:	70 95       	com	r23
    69a6:	80 95       	com	r24
    69a8:	90 95       	com	r25
    69aa:	9b 01       	movw	r18, r22
    69ac:	ac 01       	movw	r20, r24
    69ae:	bd 01       	movw	r22, r26
    69b0:	cf 01       	movw	r24, r30
    69b2:	08 95       	ret

000069b4 <__prologue_saves__>:
    69b4:	2f 92       	push	r2
    69b6:	3f 92       	push	r3
    69b8:	4f 92       	push	r4
    69ba:	5f 92       	push	r5
    69bc:	6f 92       	push	r6
    69be:	7f 92       	push	r7
    69c0:	8f 92       	push	r8
    69c2:	9f 92       	push	r9
    69c4:	af 92       	push	r10
    69c6:	bf 92       	push	r11
    69c8:	cf 92       	push	r12
    69ca:	df 92       	push	r13
    69cc:	ef 92       	push	r14
    69ce:	ff 92       	push	r15
    69d0:	0f 93       	push	r16
    69d2:	1f 93       	push	r17
    69d4:	cf 93       	push	r28
    69d6:	df 93       	push	r29
    69d8:	cd b7       	in	r28, 0x3d	; 61
    69da:	de b7       	in	r29, 0x3e	; 62
    69dc:	ca 1b       	sub	r28, r26
    69de:	db 0b       	sbc	r29, r27
    69e0:	0f b6       	in	r0, 0x3f	; 63
    69e2:	f8 94       	cli
    69e4:	de bf       	out	0x3e, r29	; 62
    69e6:	0f be       	out	0x3f, r0	; 63
    69e8:	cd bf       	out	0x3d, r28	; 61
    69ea:	09 94       	ijmp

000069ec <__epilogue_restores__>:
    69ec:	2a 88       	ldd	r2, Y+18	; 0x12
    69ee:	39 88       	ldd	r3, Y+17	; 0x11
    69f0:	48 88       	ldd	r4, Y+16	; 0x10
    69f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    69f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    69f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    69f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    69fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    69fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    69fe:	b9 84       	ldd	r11, Y+9	; 0x09
    6a00:	c8 84       	ldd	r12, Y+8	; 0x08
    6a02:	df 80       	ldd	r13, Y+7	; 0x07
    6a04:	ee 80       	ldd	r14, Y+6	; 0x06
    6a06:	fd 80       	ldd	r15, Y+5	; 0x05
    6a08:	0c 81       	ldd	r16, Y+4	; 0x04
    6a0a:	1b 81       	ldd	r17, Y+3	; 0x03
    6a0c:	aa 81       	ldd	r26, Y+2	; 0x02
    6a0e:	b9 81       	ldd	r27, Y+1	; 0x01
    6a10:	ce 0f       	add	r28, r30
    6a12:	d1 1d       	adc	r29, r1
    6a14:	0f b6       	in	r0, 0x3f	; 63
    6a16:	f8 94       	cli
    6a18:	de bf       	out	0x3e, r29	; 62
    6a1a:	0f be       	out	0x3f, r0	; 63
    6a1c:	cd bf       	out	0x3d, r28	; 61
    6a1e:	ed 01       	movw	r28, r26
    6a20:	08 95       	ret

00006a22 <__eeprom_read_byte_1F2021>:
    6a22:	f9 99       	sbic	0x1f, 1	; 31
    6a24:	fe cf       	rjmp	.-4      	; 0x6a22 <__eeprom_read_byte_1F2021>
    6a26:	b2 bd       	out	0x22, r27	; 34
    6a28:	a1 bd       	out	0x21, r26	; 33
    6a2a:	f8 9a       	sbi	0x1f, 0	; 31
    6a2c:	11 96       	adiw	r26, 0x01	; 1
    6a2e:	00 b4       	in	r0, 0x20	; 32
    6a30:	08 95       	ret

00006a32 <__eeprom_write_byte_1F2021>:
    6a32:	f9 99       	sbic	0x1f, 1	; 31
    6a34:	fe cf       	rjmp	.-4      	; 0x6a32 <__eeprom_write_byte_1F2021>
    6a36:	b2 bd       	out	0x22, r27	; 34
    6a38:	a1 bd       	out	0x21, r26	; 33
    6a3a:	00 bc       	out	0x20, r0	; 32
    6a3c:	11 96       	adiw	r26, 0x01	; 1
    6a3e:	0f b6       	in	r0, 0x3f	; 63
    6a40:	f8 94       	cli
    6a42:	fa 9a       	sbi	0x1f, 2	; 31
    6a44:	f9 9a       	sbi	0x1f, 1	; 31
    6a46:	0f be       	out	0x3f, r0	; 63
    6a48:	08 95       	ret

00006a4a <__divmodsi4>:
    6a4a:	97 fb       	bst	r25, 7
    6a4c:	09 2e       	mov	r0, r25
    6a4e:	05 26       	eor	r0, r21
    6a50:	0e d0       	rcall	.+28     	; 0x6a6e <__divmodsi4_neg1>
    6a52:	57 fd       	sbrc	r21, 7
    6a54:	04 d0       	rcall	.+8      	; 0x6a5e <__divmodsi4_neg2>
    6a56:	8c df       	rcall	.-232    	; 0x6970 <__udivmodsi4>
    6a58:	0a d0       	rcall	.+20     	; 0x6a6e <__divmodsi4_neg1>
    6a5a:	00 1c       	adc	r0, r0
    6a5c:	38 f4       	brcc	.+14     	; 0x6a6c <__divmodsi4_exit>

00006a5e <__divmodsi4_neg2>:
    6a5e:	50 95       	com	r21
    6a60:	40 95       	com	r20
    6a62:	30 95       	com	r19
    6a64:	21 95       	neg	r18
    6a66:	3f 4f       	sbci	r19, 0xFF	; 255
    6a68:	4f 4f       	sbci	r20, 0xFF	; 255
    6a6a:	5f 4f       	sbci	r21, 0xFF	; 255

00006a6c <__divmodsi4_exit>:
    6a6c:	08 95       	ret

00006a6e <__divmodsi4_neg1>:
    6a6e:	f6 f7       	brtc	.-4      	; 0x6a6c <__divmodsi4_exit>
    6a70:	90 95       	com	r25
    6a72:	80 95       	com	r24
    6a74:	70 95       	com	r23
    6a76:	61 95       	neg	r22
    6a78:	7f 4f       	sbci	r23, 0xFF	; 255
    6a7a:	8f 4f       	sbci	r24, 0xFF	; 255
    6a7c:	9f 4f       	sbci	r25, 0xFF	; 255
    6a7e:	08 95       	ret

00006a80 <_exit>:
    6a80:	ff cf       	rjmp	.-2      	; 0x6a80 <_exit>
