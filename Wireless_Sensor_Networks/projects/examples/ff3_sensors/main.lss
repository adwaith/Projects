
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000336  00800200  00006d9a  00006e2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006d9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000026e  00800536  00800536  00007164  2**0
                  ALLOC
  3 .stab         000118ec  00000000  00000000  00007164  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000097b3  00000000  00000000  00018a50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__ctors_end>
       4:	0c 94 44 2a 	jmp	0x5488	; 0x5488 <__vector_1>
       8:	0c 94 76 2a 	jmp	0x54ec	; 0x54ec <__vector_2>
       c:	0c 94 a8 2a 	jmp	0x5550	; 0x5550 <__vector_3>
      10:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      14:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      18:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      1c:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      20:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      24:	0c 94 12 2a 	jmp	0x5424	; 0x5424 <__vector_9>
      28:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      2c:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      30:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      34:	0c 94 70 28 	jmp	0x50e0	; 0x50e0 <__vector_13>
      38:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      3c:	0c 94 70 28 	jmp	0x50e0	; 0x50e0 <__vector_13>
      40:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      44:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      48:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      4c:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      50:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      54:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      58:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      5c:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      60:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      64:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      68:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      6c:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      70:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      74:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      78:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      7c:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      80:	0c 94 a3 28 	jmp	0x5146	; 0x5146 <__vector_32>
      84:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      88:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      8c:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      90:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      94:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      98:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      9c:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      a0:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      a4:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      a8:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      ac:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      b0:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      b4:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      b8:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      bc:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      c0:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      c4:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      c8:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      cc:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      d0:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      d4:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      d8:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      dc:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      e0:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
      e4:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <__vector_57>
      e8:	0c 94 cb 0d 	jmp	0x1b96	; 0x1b96 <__vector_58>
      ec:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__vector_59>
      f0:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <__vector_60>
      f4:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <__vector_61>
      f8:	0c 94 7d 0d 	jmp	0x1afa	; 0x1afa <__vector_62>
      fc:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__vector_63>
     100:	0c 94 5c 0d 	jmp	0x1ab8	; 0x1ab8 <__vector_64>
     104:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
     108:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
     10c:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
     110:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
     114:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
     118:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
     11c:	0c 94 13 02 	jmp	0x426	; 0x426 <__bad_interrupt>
     120:	04 17       	cp	r16, r20
     122:	0a 17       	cp	r16, r26
     124:	0d 17       	cp	r16, r29
     126:	10 17       	cp	r17, r16
     128:	13 17       	cp	r17, r19
     12a:	16 17       	cp	r17, r22
     12c:	1c 17       	cp	r17, r28
     12e:	19 17       	cp	r17, r25
     130:	1f 17       	cp	r17, r31
     132:	22 17       	cp	r18, r18
     134:	25 17       	cp	r18, r21
     136:	2e 17       	cp	r18, r30
     138:	31 17       	cp	r19, r17
     13a:	34 17       	cp	r19, r20
     13c:	37 17       	cp	r19, r23
     13e:	2b 17       	cp	r18, r27
     140:	01 17       	cp	r16, r17
     142:	07 17       	cp	r16, r23
     144:	3a 17       	cp	r19, r26
     146:	3d 17       	cp	r19, r29
     148:	28 17       	cp	r18, r24
     14a:	fe 16       	cp	r15, r30

0000014c <__c.2929>:
     14c:	46 61 69 6c 65 64 20 74 6f 20 6c 6f 61 64 20 6d     Failed to load m
     15c:	79 20 41 44 43 20 64 72 69 76 65 72 0d 0a 00        y ADC driver...

0000016b <__c.2921>:
     16b:	46 61 69 6c 65 64 20 74 6f 20 6f 70 65 6e 20 73     Failed to open s
     17b:	65 6e 73 6f 72 20 64 72 69 76 65 72 0d 0a 00        ensor driver...

0000018a <__c.2906>:
     18a:	55 4e 4b 4f 57 4e 00                                UNKOWN.

00000191 <__c.2903>:
     191:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

000001a0 <__c.2900>:
     1a0:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

000001b1 <__c.2897>:
     1b1:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     1c1:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

000001cc <__c.2894>:
     1cc:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     1dc:	20 53 69 67 6e 61 6c 00                              Signal.

000001e4 <__c.2891>:
     1e4:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     1f4:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

00000204 <__c.2888>:
     204:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     214:	72 6f 72 00                                         ror.

00000218 <__c.2885>:
     218:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

00000229 <__c.2882>:
     229:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     239:	61 72 74 00                                         art.

0000023d <__c.2879>:
     23d:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

0000024c <__c.2876>:
     24c:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     25c:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

00000267 <__c.2873>:
     267:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

00000273 <__c.2870>:
     273:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     283:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     293:	20 6f 6b 3f 00                                       ok?.

00000298 <__c.2867>:
     298:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     2a8:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

000002b6 <__c.2864>:
     2b6:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     2c6:	72 74 00                                            rt.

000002c9 <__c.2861>:
     2c9:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     2d9:	49 44 00                                            ID.

000002dc <__c.2858>:
     2dc:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     2ec:	20 57 61 6b 65 75 70 00                              Wakeup.

000002f4 <__c.2855>:
     2f4:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     304:	6c 61 74 65 64 00                                   lated.

0000030a <__c.2852>:
     30a:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     31a:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

00000325 <__c.2849>:
     325:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     335:	69 6e 74 65 72 00                                   inter.

0000033b <__c.2846>:
     33b:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     34b:	6c 6f 77 00                                         low.

0000034f <__c.2843>:
     34f:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     35f:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     36f:	6e 6f 75 67 68 21 00                                nough!.

00000376 <__c.2839>:
     376:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     386:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     396:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     3a6:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

000003b2 <__c.2836>:
     3b2:	29 3a 20 00                                         ): .

000003b6 <__c.2834>:
     3b6:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

000003c2 <__c.2771>:
     3c2:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

000003d1 <__c.1851>:
     3d1:	45 46 47 65 66 67 00                                EFGefg.

000003d8 <__c.1845>:
     3d8:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

000003e8 <__ctors_end>:
     3e8:	11 24       	eor	r1, r1
     3ea:	1f be       	out	0x3f, r1	; 63
     3ec:	cf ef       	ldi	r28, 0xFF	; 255
     3ee:	d1 e4       	ldi	r29, 0x41	; 65
     3f0:	de bf       	out	0x3e, r29	; 62
     3f2:	cd bf       	out	0x3d, r28	; 61

000003f4 <__do_copy_data>:
     3f4:	15 e0       	ldi	r17, 0x05	; 5
     3f6:	a0 e0       	ldi	r26, 0x00	; 0
     3f8:	b2 e0       	ldi	r27, 0x02	; 2
     3fa:	ea e9       	ldi	r30, 0x9A	; 154
     3fc:	fd e6       	ldi	r31, 0x6D	; 109
     3fe:	00 e0       	ldi	r16, 0x00	; 0
     400:	0b bf       	out	0x3b, r16	; 59
     402:	02 c0       	rjmp	.+4      	; 0x408 <__do_copy_data+0x14>
     404:	07 90       	elpm	r0, Z+
     406:	0d 92       	st	X+, r0
     408:	a6 33       	cpi	r26, 0x36	; 54
     40a:	b1 07       	cpc	r27, r17
     40c:	d9 f7       	brne	.-10     	; 0x404 <__do_copy_data+0x10>

0000040e <__do_clear_bss>:
     40e:	17 e0       	ldi	r17, 0x07	; 7
     410:	a6 e3       	ldi	r26, 0x36	; 54
     412:	b5 e0       	ldi	r27, 0x05	; 5
     414:	01 c0       	rjmp	.+2      	; 0x418 <.do_clear_bss_start>

00000416 <.do_clear_bss_loop>:
     416:	1d 92       	st	X+, r1

00000418 <.do_clear_bss_start>:
     418:	a4 3a       	cpi	r26, 0xA4	; 164
     41a:	b1 07       	cpc	r27, r17
     41c:	e1 f7       	brne	.-8      	; 0x416 <.do_clear_bss_loop>
     41e:	0e 94 91 03 	call	0x722	; 0x722 <main>
     422:	0c 94 cb 36 	jmp	0x6d96	; 0x6d96 <_exit>

00000426 <__bad_interrupt>:
     426:	0c 94 58 28 	jmp	0x50b0	; 0x50b0 <__vector_default>

0000042a <Task1>:
  return 0;
}


void Task1()
{
     42a:	2f 92       	push	r2
     42c:	3f 92       	push	r3
     42e:	4f 92       	push	r4
     430:	5f 92       	push	r5
     432:	6f 92       	push	r6
     434:	7f 92       	push	r7
     436:	8f 92       	push	r8
     438:	9f 92       	push	r9
     43a:	af 92       	push	r10
     43c:	bf 92       	push	r11
     43e:	cf 92       	push	r12
     440:	df 92       	push	r13
     442:	ef 92       	push	r14
     444:	ff 92       	push	r15
     446:	0f 93       	push	r16
     448:	1f 93       	push	r17
     44a:	df 93       	push	r29
     44c:	cf 93       	push	r28
     44e:	00 d0       	rcall	.+0      	; 0x450 <Task1+0x26>
     450:	00 d0       	rcall	.+0      	; 0x452 <Task1+0x28>
     452:	cd b7       	in	r28, 0x3d	; 61
     454:	de b7       	in	r29, 0x3e	; 62
uint16_t buf;
uint64_t bbuf;
int16_t y_axis[100];
i = 0;

  printf( "My node's address is %d\r\n",NODE_ADDR );
     456:	00 d0       	rcall	.+0      	; 0x458 <Task1+0x2e>
     458:	00 d0       	rcall	.+0      	; 0x45a <Task1+0x30>
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	92 e0       	ldi	r25, 0x02	; 2
     45e:	ad b7       	in	r26, 0x3d	; 61
     460:	be b7       	in	r27, 0x3e	; 62
     462:	12 96       	adiw	r26, 0x02	; 2
     464:	9c 93       	st	X, r25
     466:	8e 93       	st	-X, r24
     468:	11 97       	sbiw	r26, 0x01	; 1
     46a:	14 96       	adiw	r26, 0x04	; 4
     46c:	1c 92       	st	X, r1
     46e:	1e 92       	st	-X, r1
     470:	13 97       	sbiw	r26, 0x03	; 3
     472:	0e 94 78 34 	call	0x68f0	; 0x68f0 <printf>

  printf( "Task1 PID=%d\r\n",nrk_get_pid());
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
     47e:	0e 94 2d 20 	call	0x405a	; 0x405a <nrk_get_pid>
     482:	00 d0       	rcall	.+0      	; 0x484 <Task1+0x5a>
     484:	00 d0       	rcall	.+0      	; 0x486 <Task1+0x5c>
     486:	ed b7       	in	r30, 0x3d	; 61
     488:	fe b7       	in	r31, 0x3e	; 62
     48a:	31 96       	adiw	r30, 0x01	; 1
     48c:	2a e1       	ldi	r18, 0x1A	; 26
     48e:	32 e0       	ldi	r19, 0x02	; 2
     490:	ad b7       	in	r26, 0x3d	; 61
     492:	be b7       	in	r27, 0x3e	; 62
     494:	12 96       	adiw	r26, 0x02	; 2
     496:	3c 93       	st	X, r19
     498:	2e 93       	st	-X, r18
     49a:	11 97       	sbiw	r26, 0x01	; 1
     49c:	82 83       	std	Z+2, r24	; 0x02
     49e:	13 82       	std	Z+3, r1	; 0x03
     4a0:	0e 94 78 34 	call	0x68f0	; 0x68f0 <printf>

  
  	// Open ADC device as read 
  	fd=nrk_open(FIREFLY_3_SENSOR_BASIC,READ);
     4a4:	0f 90       	pop	r0
     4a6:	0f 90       	pop	r0
     4a8:	0f 90       	pop	r0
     4aa:	0f 90       	pop	r0
     4ac:	83 e0       	ldi	r24, 0x03	; 3
     4ae:	65 e0       	ldi	r22, 0x05	; 5
     4b0:	0e 94 1a 26 	call	0x4c34	; 0x4c34 <nrk_open>
     4b4:	88 2e       	mov	r8, r24
  	if(fd==NRK_ERROR) nrk_kprintf(PSTR("Failed to open sensor driver\r\n"));
     4b6:	8f 3f       	cpi	r24, 0xFF	; 255
     4b8:	21 f4       	brne	.+8      	; 0x4c2 <Task1+0x98>
     4ba:	8b e6       	ldi	r24, 0x6B	; 107
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <nrk_kprintf>
  return 0;
}


void Task1()
{
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	aa 24       	eor	r10, r10
     4c6:	00 e0       	ldi	r16, 0x00	; 0
     4c8:	bb 24       	eor	r11, r11
     4ca:	99 24       	eor	r9, r9
     4cc:	20 e0       	ldi	r18, 0x00	; 0
     4ce:	10 e0       	ldi	r17, 0x00	; 0
	// Example of setting a sensor 
//	val=nrk_set_status(fd,SENSOR_SELECT,ACC_X);
//	val=nrk_read(fd,&buf,2);
//	printf( "\nacc_x=%d",buf);
	val=nrk_set_status(fd,SENSOR_SELECT,ACC_Y);
	val=nrk_read(fd,&buf,2);
     4d0:	2e 01       	movw	r4, r28
     4d2:	08 94       	sec
     4d4:	41 1c       	adc	r4, r1
     4d6:	51 1c       	adc	r5, r1
	else if (y_axis[i] >= -350 && y_axis[i] <= -300)
		run_n_count++; 
	
	if (i == 9)
	{
		printf("\nsit_count %d, walk_p_count %d; walk_n_count %d; run_p_count %d; run_n_count %d\r\n", sit_count, walk_p_count, walk_n_count, run_p_count, run_n_count);
     4d8:	89 e2       	ldi	r24, 0x29	; 41
     4da:	28 2e       	mov	r2, r24
     4dc:	82 e0       	ldi	r24, 0x02	; 2
     4de:	38 2e       	mov	r3, r24

	// Example of setting a sensor 
//	val=nrk_set_status(fd,SENSOR_SELECT,ACC_X);
//	val=nrk_read(fd,&buf,2);
//	printf( "\nacc_x=%d",buf);
	val=nrk_set_status(fd,SENSOR_SELECT,ACC_Y);
     4e0:	88 2d       	mov	r24, r8
     4e2:	61 e0       	ldi	r22, 0x01	; 1
     4e4:	45 e0       	ldi	r20, 0x05	; 5
     4e6:	2c 83       	std	Y+4, r18	; 0x04
     4e8:	9b 83       	std	Y+3, r25	; 0x03
     4ea:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <nrk_set_status>
	val=nrk_read(fd,&buf,2);
     4ee:	88 2d       	mov	r24, r8
     4f0:	b2 01       	movw	r22, r4
     4f2:	42 e0       	ldi	r20, 0x02	; 2
     4f4:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <nrk_read>
//	printf( "\nacc_y=%d\r\n",buf);
	y_axis[i] = buf;
	y_axis[i] -= 430;
     4f8:	49 81       	ldd	r20, Y+1	; 0x01
     4fa:	5a 81       	ldd	r21, Y+2	; 0x02
     4fc:	4e 5a       	subi	r20, 0xAE	; 174
     4fe:	51 40       	sbci	r21, 0x01	; 1
	if (y_axis[i] <= 30 && y_axis[i] > 0)
     500:	ba 01       	movw	r22, r20
     502:	61 50       	subi	r22, 0x01	; 1
     504:	70 40       	sbci	r23, 0x00	; 0
     506:	2c 81       	ldd	r18, Y+4	; 0x04
     508:	9b 81       	ldd	r25, Y+3	; 0x03
     50a:	6e 31       	cpi	r22, 0x1E	; 30
     50c:	71 05       	cpc	r23, r1
     50e:	08 f4       	brcc	.+2      	; 0x512 <Task1+0xe8>
		stand_still++;
     510:	93 94       	inc	r9
	if (y_axis[i] <= 90 && y_axis[i] > 30)
     512:	ba 01       	movw	r22, r20
     514:	6f 51       	subi	r22, 0x1F	; 31
     516:	70 40       	sbci	r23, 0x00	; 0
     518:	6c 33       	cpi	r22, 0x3C	; 60
     51a:	71 05       	cpc	r23, r1
     51c:	10 f4       	brcc	.+4      	; 0x522 <Task1+0xf8>
		sit_count++;
     51e:	2f 5f       	subi	r18, 0xFF	; 255
     520:	1e c0       	rjmp	.+60     	; 0x55e <Task1+0x134>
	else if (y_axis[i] >= 40 && y_axis[i] <= 125)
     522:	ba 01       	movw	r22, r20
     524:	68 52       	subi	r22, 0x28	; 40
     526:	70 40       	sbci	r23, 0x00	; 0
     528:	66 35       	cpi	r22, 0x56	; 86
     52a:	71 05       	cpc	r23, r1
     52c:	10 f4       	brcc	.+4      	; 0x532 <Task1+0x108>
		walk_p_count++;
     52e:	b3 94       	inc	r11
     530:	16 c0       	rjmp	.+44     	; 0x55e <Task1+0x134>
	else if (y_axis[i] >= 150 && y_axis[i] <= 200)
     532:	ba 01       	movw	r22, r20
     534:	66 59       	subi	r22, 0x96	; 150
     536:	70 40       	sbci	r23, 0x00	; 0
     538:	63 33       	cpi	r22, 0x33	; 51
     53a:	71 05       	cpc	r23, r1
     53c:	10 f4       	brcc	.+4      	; 0x542 <Task1+0x118>
		run_p_count++;
     53e:	a3 94       	inc	r10
     540:	0e c0       	rjmp	.+28     	; 0x55e <Task1+0x134>
	else if (y_axis[i] >= -250 && y_axis[i] <= -175)
     542:	ba 01       	movw	r22, r20
     544:	66 50       	subi	r22, 0x06	; 6
     546:	7f 4f       	sbci	r23, 0xFF	; 255
     548:	6c 34       	cpi	r22, 0x4C	; 76
     54a:	71 05       	cpc	r23, r1
     54c:	10 f4       	brcc	.+4      	; 0x552 <Task1+0x128>
		walk_n_count++;
     54e:	0f 5f       	subi	r16, 0xFF	; 255
     550:	06 c0       	rjmp	.+12     	; 0x55e <Task1+0x134>
	else if (y_axis[i] >= -350 && y_axis[i] <= -300)
     552:	42 5a       	subi	r20, 0xA2	; 162
     554:	5e 4f       	sbci	r21, 0xFE	; 254
     556:	43 33       	cpi	r20, 0x33	; 51
     558:	51 05       	cpc	r21, r1
     55a:	08 f4       	brcc	.+2      	; 0x55e <Task1+0x134>
		run_n_count++; 
     55c:	9f 5f       	subi	r25, 0xFF	; 255
	
	if (i == 9)
     55e:	19 30       	cpi	r17, 0x09	; 9
     560:	09 f0       	breq	.+2      	; 0x564 <Task1+0x13a>
     562:	8f c0       	rjmp	.+286    	; 0x682 <Task1+0x258>
	{
		printf("\nsit_count %d, walk_p_count %d; walk_n_count %d; run_p_count %d; run_n_count %d\r\n", sit_count, walk_p_count, walk_n_count, run_p_count, run_n_count);
     564:	eb 2c       	mov	r14, r11
     566:	ff 24       	eor	r15, r15
     568:	e7 fc       	sbrc	r14, 7
     56a:	f0 94       	com	r15
     56c:	60 2e       	mov	r6, r16
     56e:	77 24       	eor	r7, r7
     570:	67 fc       	sbrc	r6, 7
     572:	70 94       	com	r7
     574:	0a 2d       	mov	r16, r10
     576:	11 27       	eor	r17, r17
     578:	07 fd       	sbrc	r16, 7
     57a:	10 95       	com	r17
     57c:	c9 2e       	mov	r12, r25
     57e:	dd 24       	eor	r13, r13
     580:	c7 fc       	sbrc	r12, 7
     582:	d0 94       	com	r13
     584:	ed b7       	in	r30, 0x3d	; 61
     586:	fe b7       	in	r31, 0x3e	; 62
     588:	3c 97       	sbiw	r30, 0x0c	; 12
     58a:	0f b6       	in	r0, 0x3f	; 63
     58c:	f8 94       	cli
     58e:	fe bf       	out	0x3e, r31	; 62
     590:	0f be       	out	0x3f, r0	; 63
     592:	ed bf       	out	0x3d, r30	; 61
     594:	31 96       	adiw	r30, 0x01	; 1
     596:	ad b7       	in	r26, 0x3d	; 61
     598:	be b7       	in	r27, 0x3e	; 62
     59a:	12 96       	adiw	r26, 0x02	; 2
     59c:	3c 92       	st	X, r3
     59e:	2e 92       	st	-X, r2
     5a0:	11 97       	sbiw	r26, 0x01	; 1
     5a2:	82 2f       	mov	r24, r18
     5a4:	99 27       	eor	r25, r25
     5a6:	87 fd       	sbrc	r24, 7
     5a8:	90 95       	com	r25
     5aa:	93 83       	std	Z+3, r25	; 0x03
     5ac:	82 83       	std	Z+2, r24	; 0x02
     5ae:	f5 82       	std	Z+5, r15	; 0x05
     5b0:	e4 82       	std	Z+4, r14	; 0x04
     5b2:	77 82       	std	Z+7, r7	; 0x07
     5b4:	66 82       	std	Z+6, r6	; 0x06
     5b6:	11 87       	std	Z+9, r17	; 0x09
     5b8:	00 87       	std	Z+8, r16	; 0x08
     5ba:	d3 86       	std	Z+11, r13	; 0x0b
     5bc:	c2 86       	std	Z+10, r12	; 0x0a
     5be:	2c 83       	std	Y+4, r18	; 0x04
     5c0:	0e 94 78 34 	call	0x68f0	; 0x68f0 <printf>
		if (sit_count > 8 && stand_still < 3 && walk_p_count < 1 && run_p_count < 1)
     5c4:	ed b7       	in	r30, 0x3d	; 61
     5c6:	fe b7       	in	r31, 0x3e	; 62
     5c8:	3c 96       	adiw	r30, 0x0c	; 12
     5ca:	0f b6       	in	r0, 0x3f	; 63
     5cc:	f8 94       	cli
     5ce:	fe bf       	out	0x3e, r31	; 62
     5d0:	0f be       	out	0x3f, r0	; 63
     5d2:	ed bf       	out	0x3d, r30	; 61
     5d4:	2c 81       	ldd	r18, Y+4	; 0x04
     5d6:	29 30       	cpi	r18, 0x09	; 9
     5d8:	54 f0       	brlt	.+20     	; 0x5ee <Task1+0x1c4>
     5da:	f9 2d       	mov	r31, r9
     5dc:	f3 30       	cpi	r31, 0x03	; 3
     5de:	3c f4       	brge	.+14     	; 0x5ee <Task1+0x1c4>
     5e0:	bb 20       	and	r11, r11
     5e2:	99 f4       	brne	.+38     	; 0x60a <Task1+0x1e0>
     5e4:	aa 20       	and	r10, r10
     5e6:	89 f4       	brne	.+34     	; 0x60a <Task1+0x1e0>
			printf("\nYou've been sitting\r\n");
     5e8:	8b e7       	ldi	r24, 0x7B	; 123
     5ea:	92 e0       	ldi	r25, 0x02	; 2
     5ec:	09 c0       	rjmp	.+18     	; 0x600 <Task1+0x1d6>
		else if (stand_still > 6 && walk_p_count < 1 && run_p_count < 1)
     5ee:	89 2d       	mov	r24, r9
     5f0:	87 30       	cpi	r24, 0x07	; 7
     5f2:	5c f0       	brlt	.+22     	; 0x60a <Task1+0x1e0>
     5f4:	bb 20       	and	r11, r11
     5f6:	49 f4       	brne	.+18     	; 0x60a <Task1+0x1e0>
     5f8:	aa 20       	and	r10, r10
     5fa:	39 f4       	brne	.+14     	; 0x60a <Task1+0x1e0>
			printf("\nYou're standing still\r\n");
     5fc:	81 e9       	ldi	r24, 0x91	; 145
     5fe:	92 e0       	ldi	r25, 0x02	; 2
     600:	0e 94 91 34 	call	0x6922	; 0x6922 <puts>
			printf("\nYou've run about %d steps\r\n", run_p_count);
		sit_count = 0;
		walk_p_count = 0;
		run_p_count = 0;
		walk_n_count = 0;
		run_n_count = 0;
     604:	90 e0       	ldi	r25, 0x00	; 0
		else if ((run_p_count + run_n_count) > 1)
			printf("\nYou've run about %d steps\r\n", run_p_count);
		sit_count = 0;
		walk_p_count = 0;
		run_p_count = 0;
		walk_n_count = 0;
     606:	00 e0       	ldi	r16, 0x00	; 0
     608:	3a c0       	rjmp	.+116    	; 0x67e <Task1+0x254>
		printf("\nsit_count %d, walk_p_count %d; walk_n_count %d; run_p_count %d; run_n_count %d\r\n", sit_count, walk_p_count, walk_n_count, run_p_count, run_n_count);
		if (sit_count > 8 && stand_still < 3 && walk_p_count < 1 && run_p_count < 1)
			printf("\nYou've been sitting\r\n");
		else if (stand_still > 6 && walk_p_count < 1 && run_p_count < 1)
			printf("\nYou're standing still\r\n");
		else if (((walk_p_count + walk_n_count) >= 1) && ((run_p_count + run_n_count) <= 1) && (sit_count < 4))
     60a:	6e 0c       	add	r6, r14
     60c:	7f 1c       	adc	r7, r15
     60e:	61 14       	cp	r6, r1
     610:	71 04       	cpc	r7, r1
     612:	b9 f0       	breq	.+46     	; 0x642 <Task1+0x218>
     614:	c6 01       	movw	r24, r12
     616:	80 0f       	add	r24, r16
     618:	91 1f       	adc	r25, r17
     61a:	82 30       	cpi	r24, 0x02	; 2
     61c:	91 05       	cpc	r25, r1
     61e:	8c f4       	brge	.+34     	; 0x642 <Task1+0x218>
     620:	24 30       	cpi	r18, 0x04	; 4
     622:	7c f4       	brge	.+30     	; 0x642 <Task1+0x218>
			printf("\nYou've walked about %d steps\r\n", walk_p_count);
     624:	00 d0       	rcall	.+0      	; 0x626 <Task1+0x1fc>
     626:	00 d0       	rcall	.+0      	; 0x628 <Task1+0x1fe>
     628:	e9 ea       	ldi	r30, 0xA9	; 169
     62a:	f2 e0       	ldi	r31, 0x02	; 2
     62c:	ad b7       	in	r26, 0x3d	; 61
     62e:	be b7       	in	r27, 0x3e	; 62
     630:	12 96       	adiw	r26, 0x02	; 2
     632:	fc 93       	st	X, r31
     634:	ee 93       	st	-X, r30
     636:	11 97       	sbiw	r26, 0x01	; 1
     638:	14 96       	adiw	r26, 0x04	; 4
     63a:	fc 92       	st	X, r15
     63c:	ee 92       	st	-X, r14
     63e:	13 97       	sbiw	r26, 0x03	; 3
     640:	14 c0       	rjmp	.+40     	; 0x66a <Task1+0x240>
		else if ((run_p_count + run_n_count) > 1)
     642:	c0 0e       	add	r12, r16
     644:	d1 1e       	adc	r13, r17
     646:	f2 e0       	ldi	r31, 0x02	; 2
     648:	cf 16       	cp	r12, r31
     64a:	d1 04       	cpc	r13, r1
     64c:	a4 f0       	brlt	.+40     	; 0x676 <Task1+0x24c>
			printf("\nYou've run about %d steps\r\n", run_p_count);
     64e:	00 d0       	rcall	.+0      	; 0x650 <Task1+0x226>
     650:	00 d0       	rcall	.+0      	; 0x652 <Task1+0x228>
     652:	e9 ec       	ldi	r30, 0xC9	; 201
     654:	f2 e0       	ldi	r31, 0x02	; 2
     656:	ad b7       	in	r26, 0x3d	; 61
     658:	be b7       	in	r27, 0x3e	; 62
     65a:	12 96       	adiw	r26, 0x02	; 2
     65c:	fc 93       	st	X, r31
     65e:	ee 93       	st	-X, r30
     660:	11 97       	sbiw	r26, 0x01	; 1
     662:	14 96       	adiw	r26, 0x04	; 4
     664:	1c 93       	st	X, r17
     666:	0e 93       	st	-X, r16
     668:	13 97       	sbiw	r26, 0x03	; 3
     66a:	0e 94 78 34 	call	0x68f0	; 0x68f0 <printf>
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
		sit_count = 0;
		walk_p_count = 0;
		run_p_count = 0;
		walk_n_count = 0;
		run_n_count = 0;
     676:	90 e0       	ldi	r25, 0x00	; 0
			printf("\nYou've walked about %d steps\r\n", walk_p_count);
		else if ((run_p_count + run_n_count) > 1)
			printf("\nYou've run about %d steps\r\n", run_p_count);
		sit_count = 0;
		walk_p_count = 0;
		run_p_count = 0;
     678:	aa 24       	eor	r10, r10
		walk_n_count = 0;
     67a:	00 e0       	ldi	r16, 0x00	; 0
		else if (((walk_p_count + walk_n_count) >= 1) && ((run_p_count + run_n_count) <= 1) && (sit_count < 4))
			printf("\nYou've walked about %d steps\r\n", walk_p_count);
		else if ((run_p_count + run_n_count) > 1)
			printf("\nYou've run about %d steps\r\n", run_p_count);
		sit_count = 0;
		walk_p_count = 0;
     67c:	bb 24       	eor	r11, r11
			printf("\nYou're standing still\r\n");
		else if (((walk_p_count + walk_n_count) >= 1) && ((run_p_count + run_n_count) <= 1) && (sit_count < 4))
			printf("\nYou've walked about %d steps\r\n", walk_p_count);
		else if ((run_p_count + run_n_count) > 1)
			printf("\nYou've run about %d steps\r\n", run_p_count);
		sit_count = 0;
     67e:	20 e0       	ldi	r18, 0x00	; 0
		walk_p_count = 0;
		run_p_count = 0;
		walk_n_count = 0;
		run_n_count = 0;
		i = 0;
     680:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	i++;
     682:	1f 5f       	subi	r17, 0xFF	; 255
//	val=nrk_set_status(fd,SENSOR_SELECT,ACC_Z);
//	val=nrk_read(fd,&buf,2);
//	printf( " motion=%d\r\n",buf);
	//nrk_close(fd);
	nrk_wait_until_next_period();
     684:	2c 83       	std	Y+4, r18	; 0x04
     686:	9b 83       	std	Y+3, r25	; 0x03
     688:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <nrk_wait_until_next_period>
	cnt++;
	}
     68c:	2c 81       	ldd	r18, Y+4	; 0x04
     68e:	9b 81       	ldd	r25, Y+3	; 0x03
     690:	27 cf       	rjmp	.-434    	; 0x4e0 <Task1+0xb6>

00000692 <nrk_create_taskset>:
}


void
nrk_create_taskset()
{
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
  TaskOne.task = Task1;
     696:	85 e1       	ldi	r24, 0x15	; 21
     698:	92 e0       	ldi	r25, 0x02	; 2
     69a:	90 93 44 05 	sts	0x0544, r25
     69e:	80 93 43 05 	sts	0x0543, r24
  nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
     6a2:	ce e3       	ldi	r28, 0x3E	; 62
     6a4:	d5 e0       	ldi	r29, 0x05	; 5
     6a6:	ce 01       	movw	r24, r28
     6a8:	65 e6       	ldi	r22, 0x65	; 101
     6aa:	75 e0       	ldi	r23, 0x05	; 5
     6ac:	40 e8       	ldi	r20, 0x80	; 128
     6ae:	50 e0       	ldi	r21, 0x00	; 0
     6b0:	0e 94 1e 2b 	call	0x563c	; 0x563c <nrk_task_set_stk>
  TaskOne.prio = 1;
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	88 87       	std	Y+8, r24	; 0x08
  TaskOne.FirstActivation = TRUE;
     6b8:	8f 83       	std	Y+7, r24	; 0x07
  TaskOne.Type = BASIC_TASK;
     6ba:	89 87       	std	Y+9, r24	; 0x09
  TaskOne.SchType = PREEMPTIVE;
     6bc:	8a 87       	std	Y+10, r24	; 0x0a
  TaskOne.period.secs = 0;
     6be:	1b 86       	std	Y+11, r1	; 0x0b
     6c0:	1c 86       	std	Y+12, r1	; 0x0c
     6c2:	1d 86       	std	Y+13, r1	; 0x0d
     6c4:	1e 86       	std	Y+14, r1	; 0x0e
  TaskOne.period.nano_secs = 100*NANOS_PER_MS; //*NANOS_PER_MS;
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	91 ee       	ldi	r25, 0xE1	; 225
     6ca:	a5 ef       	ldi	r26, 0xF5	; 245
     6cc:	b5 e0       	ldi	r27, 0x05	; 5
     6ce:	8f 87       	std	Y+15, r24	; 0x0f
     6d0:	98 8b       	std	Y+16, r25	; 0x10
     6d2:	a9 8b       	std	Y+17, r26	; 0x11
     6d4:	ba 8b       	std	Y+18, r27	; 0x12
  TaskOne.cpu_reserve.secs = 0;
     6d6:	1b 8a       	std	Y+19, r1	; 0x13
     6d8:	1c 8a       	std	Y+20, r1	; 0x14
     6da:	1d 8a       	std	Y+21, r1	; 0x15
     6dc:	1e 8a       	std	Y+22, r1	; 0x16
  TaskOne.cpu_reserve.nano_secs =  15*NANOS_PER_MS;
     6de:	80 ec       	ldi	r24, 0xC0	; 192
     6e0:	91 ee       	ldi	r25, 0xE1	; 225
     6e2:	a4 ee       	ldi	r26, 0xE4	; 228
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	8f 8b       	std	Y+23, r24	; 0x17
     6e8:	98 8f       	std	Y+24, r25	; 0x18
     6ea:	a9 8f       	std	Y+25, r26	; 0x19
     6ec:	ba 8f       	std	Y+26, r27	; 0x1a
  TaskOne.offset.secs = 0;
     6ee:	1b 8e       	std	Y+27, r1	; 0x1b
     6f0:	1c 8e       	std	Y+28, r1	; 0x1c
     6f2:	1d 8e       	std	Y+29, r1	; 0x1d
     6f4:	1e 8e       	std	Y+30, r1	; 0x1e
  TaskOne.offset.nano_secs= 0;
     6f6:	1f 8e       	std	Y+31, r1	; 0x1f
     6f8:	18 a2       	std	Y+32, r1	; 0x20
     6fa:	19 a2       	std	Y+33, r1	; 0x21
     6fc:	1a a2       	std	Y+34, r1	; 0x22
  nrk_activate_task (&TaskOne);
     6fe:	ce 01       	movw	r24, r28
     700:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <nrk_activate_task>

}
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	08 95       	ret

0000070a <nrk_register_drivers>:
//     #define NRK_MAX_DRIVER_CNT  
//     in nrk_cfg.h
// Make sure to add: 
//     SRC += $(ROOT_DIR)/src/drivers/platform/$(PLATFORM_TYPE)/source/ff_basic_sensor.c
//     in makefile
val=nrk_register_driver( &dev_manager_ff3_sensors,FIREFLY_3_SENSOR_BASIC);
     70a:	89 e7       	ldi	r24, 0x79	; 121
     70c:	98 e0       	ldi	r25, 0x08	; 8
     70e:	63 e0       	ldi	r22, 0x03	; 3
     710:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <nrk_register_driver>
if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to load my ADC driver\r\n") );
     714:	8f 3f       	cpi	r24, 0xFF	; 255
     716:	21 f4       	brne	.+8      	; 0x720 <nrk_register_drivers+0x16>
     718:	8c e4       	ldi	r24, 0x4C	; 76
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <nrk_kprintf>
     720:	08 95       	ret

00000722 <main>:

int
main ()
{
  uint8_t t;
  nrk_setup_ports();
     722:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <nrk_setup_ports>
  nrk_setup_uart(UART_BAUDRATE_115K2);
     726:	80 e1       	ldi	r24, 0x10	; 16
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	0e 94 07 14 	call	0x280e	; 0x280e <nrk_setup_uart>


  printf( PSTR("starting...\r\n") );
     72e:	86 ee       	ldi	r24, 0xE6	; 230
     730:	92 e0       	ldi	r25, 0x02	; 2
     732:	0e 94 91 34 	call	0x6922	; 0x6922 <puts>

  nrk_init();
     736:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <nrk_init>
  nrk_time_set(0,0);
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	cb 01       	movw	r24, r22
     740:	20 e0       	ldi	r18, 0x00	; 0
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	a9 01       	movw	r20, r18
     746:	0e 94 9e 21 	call	0x433c	; 0x433c <nrk_time_set>

  nrk_register_drivers();
     74a:	0e 94 85 03 	call	0x70a	; 0x70a <nrk_register_drivers>
  nrk_create_taskset ();
     74e:	0e 94 49 03 	call	0x692	; 0x692 <nrk_create_taskset>
  nrk_start();
     752:	0e 94 7f 15 	call	0x2afe	; 0x2afe <nrk_start>
  
  return 0;
}
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	08 95       	ret

0000075c <open>:
}

int8_t open(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {
    // Note that here nothing needs to be done for the I2C. This is the original
    // code for the firefly 2.2 board driver
	if (is_open == 1) return NRK_ERROR;
     75c:	80 91 94 06 	lds	r24, 0x0694
     760:	81 30       	cpi	r24, 0x01	; 1
     762:	51 f1       	breq	.+84     	; 0x7b8 <open+0x5c>
    is_open = 1;
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	80 93 94 06 	sts	0x0694, r24
    if (opt & READ_FLAG) {
     76a:	70 e0       	ldi	r23, 0x00	; 0
     76c:	60 ff       	sbrs	r22, 0
     76e:	18 c0       	rjmp	.+48     	; 0x7a0 <open+0x44>
        // Turn on Sensor Node Power
        //PORTE &= ~(PWR_CTRL_MASK);
        //PORTE |= PWR_CTRL_MASK;
        nrk_gpio_set(PWR_CTRL_PIN);
     770:	80 91 bf 03 	lds	r24, 0x03BF
     774:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <nrk_gpio_set>
        channel = 0;
     778:	10 92 99 06 	sts	0x0699, r1
        ADC_SET_CHANNEL(0);
     77c:	80 91 7c 00 	lds	r24, 0x007C
     780:	80 7e       	andi	r24, 0xE0	; 224
     782:	80 93 7c 00 	sts	0x007C, r24
     786:	90 91 7c 00 	lds	r25, 0x007C
     78a:	80 91 7c 00 	lds	r24, 0x007C
     78e:	80 7e       	andi	r24, 0xE0	; 224
     790:	89 2b       	or	r24, r25
     792:	80 93 7c 00 	sts	0x007C, r24
        nrk_spin_wait_us(ADC_STARTUP_DELAY);
     796:	88 ee       	ldi	r24, 0xE8	; 232
     798:	93 e0       	ldi	r25, 0x03	; 3
     79a:	0e 94 0d 27 	call	0x4e1a	; 0x4e1a <nrk_spin_wait_us>
     79e:	0a c0       	rjmp	.+20     	; 0x7b4 <open+0x58>
        is_open = 0;
        return 1;
    
}

int8_t open(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {
     7a0:	cb 01       	movw	r24, r22
     7a2:	86 70       	andi	r24, 0x06	; 6
     7a4:	90 70       	andi	r25, 0x00	; 0
        return NRK_OK;
    }
    if (opt & WRITE_FLAG) {
        return NRK_ERROR;
    }
    if (opt & APPEND_FLAG) {
     7a6:	00 97       	sbiw	r24, 0x00	; 0
     7a8:	39 f4       	brne	.+14     	; 0x7b8 <open+0x5c>
        return NRK_ERROR;
    }
    if (((opt)&(READ_FLAG | WRITE_FLAG | APPEND_FLAG)) == 0)
     7aa:	67 70       	andi	r22, 0x07	; 7
     7ac:	70 70       	andi	r23, 0x00	; 0
     7ae:	61 15       	cp	r22, r1
     7b0:	71 05       	cpc	r23, r1
     7b2:	21 f0       	breq	.+8      	; 0x7bc <open+0x60>
        return NRK_ERROR;
    else return NRK_OK;
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	08 95       	ret
    }
    if (opt & WRITE_FLAG) {
        return NRK_ERROR;
    }
    if (opt & APPEND_FLAG) {
        return NRK_ERROR;
     7b8:	8f ef       	ldi	r24, 0xFF	; 255
     7ba:	08 95       	ret
    }
    if (((opt)&(READ_FLAG | WRITE_FLAG | APPEND_FLAG)) == 0)
        return NRK_ERROR;
     7bc:	8f ef       	ldi	r24, 0xFF	; 255
    else return NRK_OK;

}
     7be:	08 95       	ret

000007c0 <close>:

int8_t close(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {

    // Turn off sensor power
    //PORTE |= PWR_CTRL_MASK;
    nrk_gpio_clr(PWR_CTRL_PIN);
     7c0:	80 91 bf 03 	lds	r24, 0x03BF
     7c4:	0e 94 80 10 	call	0x2100	; 0x2100 <nrk_gpio_clr>
    //PORTE &= ~(PWR_CTRL_MASK);
    	is_open = 0;
     7c8:	10 92 94 06 	sts	0x0694, r1
    close_i2c(); // Shut down the I2C
     7cc:	0e 94 bd 08 	call	0x117a	; 0x117a <close_i2c>
    ADC_DISABLE();
     7d0:	ea e7       	ldi	r30, 0x7A	; 122
     7d2:	f0 e0       	ldi	r31, 0x00	; 0
     7d4:	80 81       	ld	r24, Z
     7d6:	8f 77       	andi	r24, 0x7F	; 127
     7d8:	80 83       	st	Z, r24
    return NRK_OK;
}
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	08 95       	ret

000007de <get_status>:

    // key and value get passed as opt and size
    uint8_t key = opt;

    // use "key" here
    if (key == SENSOR_SELECT) return channel;
     7de:	61 30       	cpi	r22, 0x01	; 1
     7e0:	19 f4       	brne	.+6      	; 0x7e8 <get_status+0xa>
     7e2:	80 91 99 06 	lds	r24, 0x0699
     7e6:	08 95       	ret
    return NRK_ERROR;
     7e8:	8f ef       	ldi	r24, 0xFF	; 255
}
     7ea:	08 95       	ret

000007ec <set_status>:
    // key and value get passed as opt and size
    uint8_t key = opt;
    uint8_t value = size;

    // use "key" and "value" here
    if (key == SENSOR_SELECT) {
     7ec:	61 30       	cpi	r22, 0x01	; 1
     7ee:	61 f5       	brne	.+88     	; 0x848 <set_status+0x5c>
        // Set to audio channel if it is an average value
        if (value == AUDIO_P2P) {
     7f0:	2c 30       	cpi	r18, 0x0C	; 12
     7f2:	69 f4       	brne	.+26     	; 0x80e <set_status+0x22>
            channel = value;
     7f4:	20 93 99 06 	sts	0x0699, r18
            ADC_VREF_VCC();
            ADC_SET_CHANNEL(AUDIO);
     7f8:	80 91 7c 00 	lds	r24, 0x007C
     7fc:	80 7e       	andi	r24, 0xE0	; 224
     7fe:	80 93 7c 00 	sts	0x007C, r24
     802:	80 91 7c 00 	lds	r24, 0x007C
     806:	90 91 7c 00 	lds	r25, 0x007C
     80a:	83 60       	ori	r24, 0x03	; 3
     80c:	13 c0       	rjmp	.+38     	; 0x834 <set_status+0x48>
            nrk_spin_wait_us(ADC_SETUP_DELAY);
            return NRK_OK;

        } else {
            if (value > 13) { // Update for all of the sensors
     80e:	2e 30       	cpi	r18, 0x0E	; 14
     810:	28 f0       	brcs	.+10     	; 0x81c <set_status+0x30>
                _nrk_errno_set(1);
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <_nrk_errno_set>
                return NRK_ERROR;
     818:	8f ef       	ldi	r24, 0xFF	; 255
     81a:	08 95       	ret
            }
            channel = value;
     81c:	20 93 99 06 	sts	0x0699, r18
            ADC_VREF_VCC();
            ADC_SET_CHANNEL(channel);
     820:	80 91 7c 00 	lds	r24, 0x007C
     824:	80 7e       	andi	r24, 0xE0	; 224
     826:	80 93 7c 00 	sts	0x007C, r24
     82a:	80 91 7c 00 	lds	r24, 0x007C
     82e:	90 91 7c 00 	lds	r25, 0x007C
     832:	82 2b       	or	r24, r18
     834:	90 7e       	andi	r25, 0xE0	; 224
     836:	89 2b       	or	r24, r25
     838:	80 93 7c 00 	sts	0x007C, r24
            nrk_spin_wait_us(ADC_SETUP_DELAY);
     83c:	88 ec       	ldi	r24, 0xC8	; 200
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	0e 94 0d 27 	call	0x4e1a	; 0x4e1a <nrk_spin_wait_us>
            return NRK_OK;
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	08 95       	ret
        }
    }
    return NRK_ERROR;
     848:	8f ef       	ldi	r24, 0xFF	; 255
}
     84a:	08 95       	ret

0000084c <get_eeprom_values>:

void get_eeprom_values(){
     84c:	ef 92       	push	r14
     84e:	ff 92       	push	r15
     850:	0f 93       	push	r16
     852:	1f 93       	push	r17
     854:	df 93       	push	r29
     856:	cf 93       	push	r28
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	66 97       	sbiw	r28, 0x16	; 22
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	f8 94       	cli
     862:	de bf       	out	0x3e, r29	; 62
     864:	0f be       	out	0x3f, r0	; 63
     866:	cd bf       	out	0x3d, r28	; 61
   uint8_t raw_eeprom_data[22]; // Buffer for storing the raw values being returned
   int j = 0;
   int rv;

   // Get the values
  rv = ee24xx_read_bytes(0xAA, 22, raw_eeprom_data);
     868:	8a ea       	ldi	r24, 0xAA	; 170
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	66 e1       	ldi	r22, 0x16	; 22
     86e:	70 e0       	ldi	r23, 0x00	; 0
     870:	8e 01       	movw	r16, r28
     872:	0f 5f       	subi	r16, 0xFF	; 255
     874:	1f 4f       	sbci	r17, 0xFF	; 255
     876:	a8 01       	movw	r20, r16
     878:	0e 94 c7 08 	call	0x118e	; 0x118e <ee24xx_read_bytes>
     87c:	f8 01       	movw	r30, r16
     87e:	aa e6       	ldi	r26, 0x6A	; 106
     880:	b6 e0       	ldi	r27, 0x06	; 6
        }
    }
    return NRK_ERROR;
}

void get_eeprom_values(){
     882:	9e 01       	movw	r18, r28
     884:	29 5e       	subi	r18, 0xE9	; 233
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     // printf("\r\n");
  }

  // Place the data in a formatted buffer
  for(j = 0; j < 11; j++){
      eeprom_values[j] = ((raw_eeprom_data[2*j] | 0x0000) << 8) |
     888:	f0 80       	ld	r15, Z
     88a:	ee 24       	eor	r14, r14
     88c:	81 81       	ldd	r24, Z+1	; 0x01
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	8e 29       	or	r24, r14
     892:	9f 29       	or	r25, r15
     894:	8d 93       	st	X+, r24
     896:	9d 93       	st	X+, r25
     898:	32 96       	adiw	r30, 0x02	; 2
      //  printf("%02x ", raw_eeprom_data[j]);
     // printf("\r\n");
  }

  // Place the data in a formatted buffer
  for(j = 0; j < 11; j++){
     89a:	e2 17       	cp	r30, r18
     89c:	f3 07       	cpc	r31, r19
     89e:	a1 f7       	brne	.-24     	; 0x888 <get_eeprom_values+0x3c>
      printf("MC: %i\r\n", MC);
      printf("MD: %i\r\n", MD);
      printf("-------------------------------------------------\r\n");
  }
  */
}
     8a0:	66 96       	adiw	r28, 0x16	; 22
     8a2:	0f b6       	in	r0, 0x3f	; 63
     8a4:	f8 94       	cli
     8a6:	de bf       	out	0x3e, r29	; 62
     8a8:	0f be       	out	0x3f, r0	; 63
     8aa:	cd bf       	out	0x3d, r28	; 61
     8ac:	cf 91       	pop	r28
     8ae:	df 91       	pop	r29
     8b0:	1f 91       	pop	r17
     8b2:	0f 91       	pop	r16
     8b4:	ff 90       	pop	r15
     8b6:	ef 90       	pop	r14
     8b8:	08 95       	ret

000008ba <init_adc>:
    return val;
}
*/
void init_adc() {
    // Initialize values here
    ADC_INIT();
     8ba:	ea e7       	ldi	r30, 0x7A	; 122
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	83 e0       	ldi	r24, 0x03	; 3
     8c0:	80 83       	st	Z, r24
    ADC_ENABLE();
     8c2:	80 81       	ld	r24, Z
     8c4:	80 68       	ori	r24, 0x80	; 128
     8c6:	80 83       	st	Z, r24
    channel = 0;
     8c8:	10 92 99 06 	sts	0x0699, r1
    ADC_SET_CHANNEL(0);
     8cc:	ac e7       	ldi	r26, 0x7C	; 124
     8ce:	b0 e0       	ldi	r27, 0x00	; 0
     8d0:	8c 91       	ld	r24, X
     8d2:	80 7e       	andi	r24, 0xE0	; 224
     8d4:	8c 93       	st	X, r24
     8d6:	9c 91       	ld	r25, X
     8d8:	8c 91       	ld	r24, X
     8da:	80 7e       	andi	r24, 0xE0	; 224
     8dc:	89 2b       	or	r24, r25
     8de:	8c 93       	st	X, r24
    ADC_DISABLE();
     8e0:	80 81       	ld	r24, Z
     8e2:	8f 77       	andi	r24, 0x7F	; 127
     8e4:	80 83       	st	Z, r24
}
     8e6:	08 95       	ret

000008e8 <init>:
            nrk_kernel_error_add(NRK_DEVICE_DRIVER, 0);
            return 0;
    }
}

int8_t init(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {
     8e8:	1f 93       	push	r17
        // For handling the ADC
        // Set the pwr ctrl pin as output
	//DDRE = 0;
        //DDRE |= PWR_CTRL_MASK;
        //PORTE |= PWR_CTRL_MASK;
        nrk_gpio_direction(PWR_CTRL_PIN, NRK_PIN_OUTPUT);
     8ea:	10 91 bf 03 	lds	r17, 0x03BF
     8ee:	81 2f       	mov	r24, r17
     8f0:	61 e0       	ldi	r22, 0x01	; 1
     8f2:	0e 94 67 12 	call	0x24ce	; 0x24ce <nrk_gpio_direction>
        //nrk_gpio_clr(PWR_CTRL_PIN);
        nrk_gpio_set(PWR_CTRL_PIN);
     8f6:	81 2f       	mov	r24, r17
     8f8:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <nrk_gpio_set>
	// Input for motion detector
        nrk_gpio_direction(NRK_PORTF_6, NRK_PIN_INPUT );
     8fc:	10 91 d4 03 	lds	r17, 0x03D4
     900:	81 2f       	mov	r24, r17
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	0e 94 67 12 	call	0x24ce	; 0x24ce <nrk_gpio_direction>
        nrk_gpio_clr(NRK_PORTF_6);
     908:	81 2f       	mov	r24, r17
     90a:	0e 94 80 10 	call	0x2100	; 0x2100 <nrk_gpio_clr>
        nrk_gpio_direction(NRK_PORTE_2, NRK_PIN_INPUT);
     90e:	10 91 be 03 	lds	r17, 0x03BE
     912:	81 2f       	mov	r24, r17
     914:	60 e0       	ldi	r22, 0x00	; 0
     916:	0e 94 67 12 	call	0x24ce	; 0x24ce <nrk_gpio_direction>
        nrk_gpio_clr(NRK_PORTE_2);
     91a:	81 2f       	mov	r24, r17
     91c:	0e 94 80 10 	call	0x2100	; 0x2100 <nrk_gpio_clr>
	nrk_gpio_pullups(0);
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	0e 94 cc 13 	call	0x2798	; 0x2798 <nrk_gpio_pullups>

        init_adc();
     926:	0e 94 5d 04 	call	0x8ba	; 0x8ba <init_adc>
        
        // For handling the I2C
         init_i2c();
     92a:	0e 94 ad 08 	call	0x115a	; 0x115a <init_i2c>

	set_i2c_device(BOSCH_EEPROM_ADDRESS);
     92e:	8e ee       	ldi	r24, 0xEE	; 238
     930:	0e 94 aa 08 	call	0x1154	; 0x1154 <set_i2c_device>
        get_eeprom_values();
     934:	0e 94 26 04 	call	0x84c	; 0x84c <get_eeprom_values>
        is_open = 0;
     938:	10 92 94 06 	sts	0x0694, r1
        return 1;
    
}
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	1f 91       	pop	r17
     940:	08 95       	ret

00000942 <delay>:
    ADC_GET_SAMPLE_10(adc_val);
    return adc_val;
}

void delay() {
    nrk_spin_wait_us(ADC_SETUP_DELAY);
     942:	88 ec       	ldi	r24, 0xC8	; 200
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	0e 94 0d 27 	call	0x4e1a	; 0x4e1a <nrk_spin_wait_us>
}
     94a:	08 95       	ret

0000094c <get_adc_val>:
    ADC_DISABLE();
}

uint16_t get_adc_val() {
    uint16_t adc_val;
    ADC_SAMPLE_SINGLE();
     94c:	80 91 7a 00 	lds	r24, 0x007A
     950:	80 64       	ori	r24, 0x40	; 64
     952:	80 93 7a 00 	sts	0x007A, r24
     956:	80 91 7a 00 	lds	r24, 0x007A
     95a:	84 ff       	sbrs	r24, 4
     95c:	fc cf       	rjmp	.-8      	; 0x956 <get_adc_val+0xa>
    delay();
     95e:	0e 94 a1 04 	call	0x942	; 0x942 <delay>
    ADC_GET_SAMPLE_10(adc_val);
     962:	20 91 78 00 	lds	r18, 0x0078
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	40 91 79 00 	lds	r20, 0x0079
     96c:	94 2f       	mov	r25, r20
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	28 2b       	or	r18, r24
     972:	39 2b       	or	r19, r25
    return adc_val;
}
     974:	c9 01       	movw	r24, r18
     976:	08 95       	ret

00000978 <calc_true_press>:

void delay() {
    nrk_spin_wait_us(ADC_SETUP_DELAY);
}

int32_t calc_true_press(uint8_t oss){
     978:	2f 92       	push	r2
     97a:	3f 92       	push	r3
     97c:	4f 92       	push	r4
     97e:	5f 92       	push	r5
     980:	6f 92       	push	r6
     982:	7f 92       	push	r7
     984:	8f 92       	push	r8
     986:	9f 92       	push	r9
     988:	af 92       	push	r10
     98a:	bf 92       	push	r11
     98c:	cf 92       	push	r12
     98e:	df 92       	push	r13
     990:	ef 92       	push	r14
     992:	ff 92       	push	r15
     994:	0f 93       	push	r16
     996:	1f 93       	push	r17
     998:	df 93       	push	r29
     99a:	cf 93       	push	r28
     99c:	00 d0       	rcall	.+0      	; 0x99e <calc_true_press+0x26>
     99e:	00 d0       	rcall	.+0      	; 0x9a0 <calc_true_press+0x28>
     9a0:	0f 92       	push	r0
     9a2:	cd b7       	in	r28, 0x3d	; 61
     9a4:	de b7       	in	r29, 0x3e	; 62
     9a6:	89 83       	std	Y+1, r24	; 0x01

    B6 = B5 - 4000;                                     if(DEBUG) printf("B6 %li\r\n", B6);
     9a8:	a0 90 90 06 	lds	r10, 0x0690
     9ac:	b0 90 91 06 	lds	r11, 0x0691
     9b0:	c0 90 92 06 	lds	r12, 0x0692
     9b4:	d0 90 93 06 	lds	r13, 0x0693
     9b8:	20 e6       	ldi	r18, 0x60	; 96
     9ba:	30 ef       	ldi	r19, 0xF0	; 240
     9bc:	4f ef       	ldi	r20, 0xFF	; 255
     9be:	5f ef       	ldi	r21, 0xFF	; 255
     9c0:	a2 0e       	add	r10, r18
     9c2:	b3 1e       	adc	r11, r19
     9c4:	c4 1e       	adc	r12, r20
     9c6:	d5 1e       	adc	r13, r21
     9c8:	a0 92 80 06 	sts	0x0680, r10
     9cc:	b0 92 81 06 	sts	0x0681, r11
     9d0:	c0 92 82 06 	sts	0x0682, r12
     9d4:	d0 92 83 06 	sts	0x0683, r13
//    X1 = (B2 * (B6 * B6/ pow(2,12)))/ pow(2,11);        if(DEBUG) printf("X1 %li\r\n", X1);
    X1 = (B2 * (B6 * B6/ 4096))/ 2048;        if(DEBUG) printf("X1 %li\r\n", X1);
     9d8:	c6 01       	movw	r24, r12
     9da:	b5 01       	movw	r22, r10
     9dc:	a6 01       	movw	r20, r12
     9de:	95 01       	movw	r18, r10
     9e0:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__mulsi3>
     9e4:	20 e0       	ldi	r18, 0x00	; 0
     9e6:	30 e1       	ldi	r19, 0x10	; 16
     9e8:	40 e0       	ldi	r20, 0x00	; 0
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	0e 94 9b 33 	call	0x6736	; 0x6736 <__divmodsi4>
     9f0:	92 2e       	mov	r9, r18
     9f2:	83 2e       	mov	r8, r19
     9f4:	34 2e       	mov	r3, r20
     9f6:	25 2e       	mov	r2, r21
    X2 = (int32_t)AC2 * B6 / 2048;                          if(DEBUG) printf("X2 %li\r\n", X2);
     9f8:	60 91 6c 06 	lds	r22, 0x066C
     9fc:	70 91 6d 06 	lds	r23, 0x066D
     a00:	88 27       	eor	r24, r24
     a02:	77 fd       	sbrc	r23, 7
     a04:	80 95       	com	r24
     a06:	98 2f       	mov	r25, r24
     a08:	a6 01       	movw	r20, r12
     a0a:	95 01       	movw	r18, r10
     a0c:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__mulsi3>
     a10:	41 2c       	mov	r4, r1
     a12:	38 e0       	ldi	r19, 0x08	; 8
     a14:	53 2e       	mov	r5, r19
     a16:	61 2c       	mov	r6, r1
     a18:	71 2c       	mov	r7, r1
     a1a:	a3 01       	movw	r20, r6
     a1c:	92 01       	movw	r18, r4
     a1e:	0e 94 9b 33 	call	0x6736	; 0x6736 <__divmodsi4>
     a22:	79 01       	movw	r14, r18
     a24:	8a 01       	movw	r16, r20
//    X2 = AC2 * B6 / pow(2,11);                          if(DEBUG) printf("X2 %li\r\n", X2);
    X3 = X1 + X2;                                       if(DEBUG) printf("X3 %li\r\n", X3);
    B3 = ((((int32_t)AC1 * 4 + X3) << oss) + 2) / 4;               if(DEBUG) printf("B3 %li\r\n", B3);
     a26:	80 91 6a 06 	lds	r24, 0x066A
     a2a:	90 91 6b 06 	lds	r25, 0x066B
     a2e:	aa 27       	eor	r26, r26
     a30:	97 fd       	sbrc	r25, 7
     a32:	a0 95       	com	r26
     a34:	ba 2f       	mov	r27, r26
     a36:	22 e0       	ldi	r18, 0x02	; 2
     a38:	88 0f       	add	r24, r24
     a3a:	99 1f       	adc	r25, r25
     a3c:	aa 1f       	adc	r26, r26
     a3e:	bb 1f       	adc	r27, r27
     a40:	2a 95       	dec	r18
     a42:	d1 f7       	brne	.-12     	; 0xa38 <calc_true_press+0xc0>
    B6 = B5 - 4000;                                     if(DEBUG) printf("B6 %li\r\n", B6);
//    X1 = (B2 * (B6 * B6/ pow(2,12)))/ pow(2,11);        if(DEBUG) printf("X1 %li\r\n", X1);
    X1 = (B2 * (B6 * B6/ 4096))/ 2048;        if(DEBUG) printf("X1 %li\r\n", X1);
    X2 = (int32_t)AC2 * B6 / 2048;                          if(DEBUG) printf("X2 %li\r\n", X2);
//    X2 = AC2 * B6 / pow(2,11);                          if(DEBUG) printf("X2 %li\r\n", X2);
    X3 = X1 + X2;                                       if(DEBUG) printf("X3 %li\r\n", X3);
     a44:	e8 0e       	add	r14, r24
     a46:	f9 1e       	adc	r15, r25
     a48:	0a 1f       	adc	r16, r26
     a4a:	1b 1f       	adc	r17, r27

int32_t calc_true_press(uint8_t oss){

    B6 = B5 - 4000;                                     if(DEBUG) printf("B6 %li\r\n", B6);
//    X1 = (B2 * (B6 * B6/ pow(2,12)))/ pow(2,11);        if(DEBUG) printf("X1 %li\r\n", X1);
    X1 = (B2 * (B6 * B6/ 4096))/ 2048;        if(DEBUG) printf("X1 %li\r\n", X1);
     a4c:	20 91 78 06 	lds	r18, 0x0678
     a50:	30 91 79 06 	lds	r19, 0x0679
     a54:	44 27       	eor	r20, r20
     a56:	37 fd       	sbrc	r19, 7
     a58:	40 95       	com	r20
     a5a:	54 2f       	mov	r21, r20
     a5c:	69 2d       	mov	r22, r9
     a5e:	78 2d       	mov	r23, r8
     a60:	83 2d       	mov	r24, r3
     a62:	92 2d       	mov	r25, r2
     a64:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__mulsi3>
     a68:	a3 01       	movw	r20, r6
     a6a:	92 01       	movw	r18, r4
     a6c:	0e 94 9b 33 	call	0x6736	; 0x6736 <__divmodsi4>
    X2 = (int32_t)AC2 * B6 / 2048;                          if(DEBUG) printf("X2 %li\r\n", X2);
//    X2 = AC2 * B6 / pow(2,11);                          if(DEBUG) printf("X2 %li\r\n", X2);
    X3 = X1 + X2;                                       if(DEBUG) printf("X3 %li\r\n", X3);
    B3 = ((((int32_t)AC1 * 4 + X3) << oss) + 2) / 4;               if(DEBUG) printf("B3 %li\r\n", B3);
     a70:	e2 0e       	add	r14, r18
     a72:	f3 1e       	adc	r15, r19
     a74:	04 1f       	adc	r16, r20
     a76:	15 1f       	adc	r17, r21
     a78:	09 80       	ldd	r0, Y+1	; 0x01
     a7a:	04 c0       	rjmp	.+8      	; 0xa84 <calc_true_press+0x10c>
     a7c:	ee 0c       	add	r14, r14
     a7e:	ff 1c       	adc	r15, r15
     a80:	00 1f       	adc	r16, r16
     a82:	11 1f       	adc	r17, r17
     a84:	0a 94       	dec	r0
     a86:	d2 f7       	brpl	.-12     	; 0xa7c <calc_true_press+0x104>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	a0 e0       	ldi	r26, 0x00	; 0
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	e8 0e       	add	r14, r24
     a92:	f9 1e       	adc	r15, r25
     a94:	0a 1f       	adc	r16, r26
     a96:	1b 1f       	adc	r17, r27
     a98:	f4 e0       	ldi	r31, 0x04	; 4
     a9a:	4f 2e       	mov	r4, r31
     a9c:	51 2c       	mov	r5, r1
     a9e:	61 2c       	mov	r6, r1
     aa0:	71 2c       	mov	r7, r1
     aa2:	c8 01       	movw	r24, r16
     aa4:	b7 01       	movw	r22, r14
     aa6:	a3 01       	movw	r20, r6
     aa8:	92 01       	movw	r18, r4
     aaa:	0e 94 9b 33 	call	0x6736	; 0x6736 <__divmodsi4>
     aae:	2a 83       	std	Y+2, r18	; 0x02
     ab0:	3b 83       	std	Y+3, r19	; 0x03
     ab2:	4c 83       	std	Y+4, r20	; 0x04
     ab4:	5d 83       	std	Y+5, r21	; 0x05
     ab6:	20 93 af 06 	sts	0x06AF, r18
     aba:	30 93 b0 06 	sts	0x06B0, r19
     abe:	40 93 b1 06 	sts	0x06B1, r20
     ac2:	50 93 b2 06 	sts	0x06B2, r21
//    X1 = AC3 * B6 / pow(2,13);                          if(DEBUG) printf("X1 %li\r\n", X1);
    X1 = AC3 * B6 / 8192;                          if(DEBUG) printf("X1 %li\r\n", X1);
     ac6:	60 91 6e 06 	lds	r22, 0x066E
     aca:	70 91 6f 06 	lds	r23, 0x066F
     ace:	88 27       	eor	r24, r24
     ad0:	77 fd       	sbrc	r23, 7
     ad2:	80 95       	com	r24
     ad4:	98 2f       	mov	r25, r24
     ad6:	a6 01       	movw	r20, r12
     ad8:	95 01       	movw	r18, r10
     ada:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__mulsi3>
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	30 e2       	ldi	r19, 0x20	; 32
     ae2:	40 e0       	ldi	r20, 0x00	; 0
     ae4:	50 e0       	ldi	r21, 0x00	; 0
     ae6:	0e 94 9b 33 	call	0x6736	; 0x6736 <__divmodsi4>
     aea:	79 01       	movw	r14, r18
     aec:	8a 01       	movw	r16, r20
//    X2 = (B1 * (B6 * B6 / pow(2,12))) / pow(2,16);      if(DEBUG) printf("X2 %li\r\n", X2);
    X2 = (B1 * (B6 * B6 / 4096)) / 65536;      if(DEBUG) printf("X2 %li\r\n", X2);
     aee:	20 91 76 06 	lds	r18, 0x0676
     af2:	30 91 77 06 	lds	r19, 0x0677
     af6:	44 27       	eor	r20, r20
     af8:	37 fd       	sbrc	r19, 7
     afa:	40 95       	com	r20
     afc:	54 2f       	mov	r21, r20
     afe:	69 2d       	mov	r22, r9
     b00:	78 2d       	mov	r23, r8
     b02:	83 2d       	mov	r24, r3
     b04:	92 2d       	mov	r25, r2
     b06:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__mulsi3>
     b0a:	20 e0       	ldi	r18, 0x00	; 0
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	41 e0       	ldi	r20, 0x01	; 1
     b10:	50 e0       	ldi	r21, 0x00	; 0
     b12:	0e 94 9b 33 	call	0x6736	; 0x6736 <__divmodsi4>
//    X3 = ((X1 + X2) + 2) / pow(2,2);                    if(DEBUG) printf("X3 %li\r\n", X3);
    X3 = ((X1 + X2) + 2) / 4;                    if(DEBUG) printf("X3 %li\r\n", X3);
     b16:	82 e0       	ldi	r24, 0x02	; 2
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	a0 e0       	ldi	r26, 0x00	; 0
     b1c:	b0 e0       	ldi	r27, 0x00	; 0
     b1e:	e8 0e       	add	r14, r24
     b20:	f9 1e       	adc	r15, r25
     b22:	0a 1f       	adc	r16, r26
     b24:	1b 1f       	adc	r17, r27
     b26:	e2 0e       	add	r14, r18
     b28:	f3 1e       	adc	r15, r19
     b2a:	04 1f       	adc	r16, r20
     b2c:	15 1f       	adc	r17, r21
     b2e:	c8 01       	movw	r24, r16
     b30:	b7 01       	movw	r22, r14
     b32:	a3 01       	movw	r20, r6
     b34:	92 01       	movw	r18, r4
     b36:	0e 94 9b 33 	call	0x6736	; 0x6736 <__divmodsi4>
     b3a:	20 93 9a 06 	sts	0x069A, r18
     b3e:	30 93 9b 06 	sts	0x069B, r19
     b42:	40 93 9c 06 	sts	0x069C, r20
     b46:	50 93 9d 06 	sts	0x069D, r21
//    B4 = AC4 * (X3 + 32768) / pow(2,15);                if(DEBUG) printf("B4 %lu\r\n", B4);
    B4 = AC4 * (X3 + 32768) / 32768;                if(DEBUG) printf("B4 %lu\r\n", B4);
     b4a:	ca 01       	movw	r24, r20
     b4c:	b9 01       	movw	r22, r18
     b4e:	60 50       	subi	r22, 0x00	; 0
     b50:	70 48       	sbci	r23, 0x80	; 128
     b52:	8f 4f       	sbci	r24, 0xFF	; 255
     b54:	9f 4f       	sbci	r25, 0xFF	; 255
     b56:	20 91 70 06 	lds	r18, 0x0670
     b5a:	30 91 71 06 	lds	r19, 0x0671
     b5e:	40 e0       	ldi	r20, 0x00	; 0
     b60:	50 e0       	ldi	r21, 0x00	; 0
     b62:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__mulsi3>
     b66:	20 e0       	ldi	r18, 0x00	; 0
     b68:	30 e8       	ldi	r19, 0x80	; 128
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	50 e0       	ldi	r21, 0x00	; 0
     b6e:	0e 94 9b 33 	call	0x6736	; 0x6736 <__divmodsi4>
     b72:	79 01       	movw	r14, r18
     b74:	8a 01       	movw	r16, r20
     b76:	20 93 9e 06 	sts	0x069E, r18
     b7a:	30 93 9f 06 	sts	0x069F, r19
     b7e:	40 93 a0 06 	sts	0x06A0, r20
     b82:	50 93 a1 06 	sts	0x06A1, r21
    B7 = (UP - B3) * (50000 >> oss);                    if(DEBUG) printf("B7 %lu\r\n", B7);
     b86:	60 91 a7 06 	lds	r22, 0x06A7
     b8a:	70 91 a8 06 	lds	r23, 0x06A8
     b8e:	80 91 a9 06 	lds	r24, 0x06A9
     b92:	90 91 aa 06 	lds	r25, 0x06AA
     b96:	2a 81       	ldd	r18, Y+2	; 0x02
     b98:	3b 81       	ldd	r19, Y+3	; 0x03
     b9a:	4c 81       	ldd	r20, Y+4	; 0x04
     b9c:	5d 81       	ldd	r21, Y+5	; 0x05
     b9e:	62 1b       	sub	r22, r18
     ba0:	73 0b       	sbc	r23, r19
     ba2:	84 0b       	sbc	r24, r20
     ba4:	95 0b       	sbc	r25, r21
     ba6:	20 e5       	ldi	r18, 0x50	; 80
     ba8:	33 ec       	ldi	r19, 0xC3	; 195
     baa:	40 e0       	ldi	r20, 0x00	; 0
     bac:	50 e0       	ldi	r21, 0x00	; 0
     bae:	09 80       	ldd	r0, Y+1	; 0x01
     bb0:	04 c0       	rjmp	.+8      	; 0xbba <calc_true_press+0x242>
     bb2:	55 95       	asr	r21
     bb4:	47 95       	ror	r20
     bb6:	37 95       	ror	r19
     bb8:	27 95       	ror	r18
     bba:	0a 94       	dec	r0
     bbc:	d2 f7       	brpl	.-12     	; 0xbb2 <calc_true_press+0x23a>
     bbe:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__mulsi3>
     bc2:	60 93 a3 06 	sts	0x06A3, r22
     bc6:	70 93 a4 06 	sts	0x06A4, r23
     bca:	80 93 a5 06 	sts	0x06A5, r24
     bce:	90 93 a6 06 	sts	0x06A6, r25

    if(B7 < 0x80000000)
     bd2:	97 fd       	sbrc	r25, 7
     bd4:	09 c0       	rjmp	.+18     	; 0xbe8 <calc_true_press+0x270>
       P = (B7 * 2)/ B4;
     bd6:	66 0f       	add	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	88 1f       	adc	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	a8 01       	movw	r20, r16
     be0:	97 01       	movw	r18, r14
     be2:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__udivmodsi4>
     be6:	08 c0       	rjmp	.+16     	; 0xbf8 <calc_true_press+0x280>
    else
        P = (B7 / B4) * 2;
     be8:	a8 01       	movw	r20, r16
     bea:	97 01       	movw	r18, r14
     bec:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__udivmodsi4>
     bf0:	22 0f       	add	r18, r18
     bf2:	33 1f       	adc	r19, r19
     bf4:	44 1f       	adc	r20, r20
     bf6:	55 1f       	adc	r21, r21
     bf8:	20 93 ab 06 	sts	0x06AB, r18
     bfc:	30 93 ac 06 	sts	0x06AC, r19
     c00:	40 93 ad 06 	sts	0x06AD, r20
     c04:	50 93 ae 06 	sts	0x06AE, r21
                                                        if(DEBUG) printf("P %li\r\n", P);
    X1 = (P / 256) * (P / 256);               if(DEBUG) printf("X1 %li\r\n", X1);
     c08:	a0 90 ab 06 	lds	r10, 0x06AB
     c0c:	b0 90 ac 06 	lds	r11, 0x06AC
     c10:	c0 90 ad 06 	lds	r12, 0x06AD
     c14:	d0 90 ae 06 	lds	r13, 0x06AE
     c18:	c6 01       	movw	r24, r12
     c1a:	b5 01       	movw	r22, r10
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	31 e0       	ldi	r19, 0x01	; 1
     c20:	40 e0       	ldi	r20, 0x00	; 0
     c22:	50 e0       	ldi	r21, 0x00	; 0
     c24:	0e 94 9b 33 	call	0x6736	; 0x6736 <__divmodsi4>
     c28:	b9 01       	movw	r22, r18
     c2a:	ca 01       	movw	r24, r20
     c2c:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__mulsi3>
//    X1 = (P / pow(2,8)) * (P / pow(2,8));               if(DEBUG) printf("X1 %li\r\n", X1);
    X1 = (X1 * 3038) / 65536;                       if(DEBUG) printf("X1 %li\r\n", X1);
     c30:	2e ed       	ldi	r18, 0xDE	; 222
     c32:	3b e0       	ldi	r19, 0x0B	; 11
     c34:	40 e0       	ldi	r20, 0x00	; 0
     c36:	50 e0       	ldi	r21, 0x00	; 0
     c38:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__mulsi3>
     c3c:	e1 2c       	mov	r14, r1
     c3e:	f1 2c       	mov	r15, r1
     c40:	21 e0       	ldi	r18, 0x01	; 1
     c42:	02 2f       	mov	r16, r18
     c44:	11 2d       	mov	r17, r1
     c46:	a8 01       	movw	r20, r16
     c48:	97 01       	movw	r18, r14
     c4a:	0e 94 9b 33 	call	0x6736	; 0x6736 <__divmodsi4>
     c4e:	29 01       	movw	r4, r18
     c50:	3a 01       	movw	r6, r20
     c52:	20 93 95 06 	sts	0x0695, r18
     c56:	30 93 96 06 	sts	0x0696, r19
     c5a:	40 93 97 06 	sts	0x0697, r20
     c5e:	50 93 98 06 	sts	0x0698, r21
//    X1 = (X1 * 3038) / pow(2,16);                       if(DEBUG) printf("X1 %li\r\n", X1);
    X2 = (-7357 * P ) / 65536;                      if(DEBUG) printf("X2 %li\r\n", X2);
     c62:	c6 01       	movw	r24, r12
     c64:	b5 01       	movw	r22, r10
     c66:	23 e4       	ldi	r18, 0x43	; 67
     c68:	33 ee       	ldi	r19, 0xE3	; 227
     c6a:	4f ef       	ldi	r20, 0xFF	; 255
     c6c:	5f ef       	ldi	r21, 0xFF	; 255
     c6e:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__mulsi3>
     c72:	a8 01       	movw	r20, r16
     c74:	97 01       	movw	r18, r14
     c76:	0e 94 9b 33 	call	0x6736	; 0x6736 <__divmodsi4>
     c7a:	20 93 88 06 	sts	0x0688, r18
     c7e:	30 93 89 06 	sts	0x0689, r19
     c82:	40 93 8a 06 	sts	0x068A, r20
     c86:	50 93 8b 06 	sts	0x068B, r21
//	X2 = (-7357 * P ) / pow(2,16);                      if(DEBUG) printf("X2 %li\r\n", X2);
//    P = P + (X1 + X2 + 3791) / pow(2,4);                if(DEBUG) printf("P %li\r\n", P);
    P = P + (X1 + X2 + 3791) / 16;                if(DEBUG) printf("P %li\r\n", P);
     c8a:	ca 01       	movw	r24, r20
     c8c:	b9 01       	movw	r22, r18
     c8e:	61 53       	subi	r22, 0x31	; 49
     c90:	71 4f       	sbci	r23, 0xF1	; 241
     c92:	8f 4f       	sbci	r24, 0xFF	; 255
     c94:	9f 4f       	sbci	r25, 0xFF	; 255
     c96:	64 0d       	add	r22, r4
     c98:	75 1d       	adc	r23, r5
     c9a:	86 1d       	adc	r24, r6
     c9c:	97 1d       	adc	r25, r7
     c9e:	20 e1       	ldi	r18, 0x10	; 16
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	40 e0       	ldi	r20, 0x00	; 0
     ca4:	50 e0       	ldi	r21, 0x00	; 0
     ca6:	0e 94 9b 33 	call	0x6736	; 0x6736 <__divmodsi4>
     caa:	2a 0d       	add	r18, r10
     cac:	3b 1d       	adc	r19, r11
     cae:	4c 1d       	adc	r20, r12
     cb0:	5d 1d       	adc	r21, r13
     cb2:	20 93 ab 06 	sts	0x06AB, r18
     cb6:	30 93 ac 06 	sts	0x06AC, r19
     cba:	40 93 ad 06 	sts	0x06AD, r20
     cbe:	50 93 ae 06 	sts	0x06AE, r21

    if(DEBUG) printf("Pressure is %li Pascals\r\n", P);

    return P;

}
     cc2:	b9 01       	movw	r22, r18
     cc4:	ca 01       	movw	r24, r20
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	1f 91       	pop	r17
     cd6:	0f 91       	pop	r16
     cd8:	ff 90       	pop	r15
     cda:	ef 90       	pop	r14
     cdc:	df 90       	pop	r13
     cde:	cf 90       	pop	r12
     ce0:	bf 90       	pop	r11
     ce2:	af 90       	pop	r10
     ce4:	9f 90       	pop	r9
     ce6:	8f 90       	pop	r8
     ce8:	7f 90       	pop	r7
     cea:	6f 90       	pop	r6
     cec:	5f 90       	pop	r5
     cee:	4f 90       	pop	r4
     cf0:	3f 90       	pop	r3
     cf2:	2f 90       	pop	r2
     cf4:	08 95       	ret

00000cf6 <calc_true_temp>:


inline int32_t calc_true_temp(){
     cf6:	ef 92       	push	r14
     cf8:	ff 92       	push	r15
     cfa:	0f 93       	push	r16
     cfc:	1f 93       	push	r17

    X1 = ((int32_t)UT - (int32_t)AC6) * (int32_t)AC5 / (int32_t)32768;
     cfe:	20 91 74 06 	lds	r18, 0x0674
     d02:	30 91 75 06 	lds	r19, 0x0675
     d06:	40 e0       	ldi	r20, 0x00	; 0
     d08:	50 e0       	ldi	r21, 0x00	; 0
     d0a:	60 91 84 06 	lds	r22, 0x0684
     d0e:	70 91 85 06 	lds	r23, 0x0685
     d12:	80 91 86 06 	lds	r24, 0x0686
     d16:	90 91 87 06 	lds	r25, 0x0687
     d1a:	62 1b       	sub	r22, r18
     d1c:	73 0b       	sbc	r23, r19
     d1e:	84 0b       	sbc	r24, r20
     d20:	95 0b       	sbc	r25, r21
     d22:	20 91 72 06 	lds	r18, 0x0672
     d26:	30 91 73 06 	lds	r19, 0x0673
     d2a:	40 e0       	ldi	r20, 0x00	; 0
     d2c:	50 e0       	ldi	r21, 0x00	; 0
     d2e:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__mulsi3>
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e8       	ldi	r19, 0x80	; 128
     d36:	40 e0       	ldi	r20, 0x00	; 0
     d38:	50 e0       	ldi	r21, 0x00	; 0
     d3a:	0e 94 9b 33 	call	0x6736	; 0x6736 <__divmodsi4>
     d3e:	79 01       	movw	r14, r18
     d40:	8a 01       	movw	r16, r20
     d42:	20 93 95 06 	sts	0x0695, r18
     d46:	30 93 96 06 	sts	0x0696, r19
     d4a:	40 93 97 06 	sts	0x0697, r20
     d4e:	50 93 98 06 	sts	0x0698, r21
//    X1 = ((int32_t)UT - (int32_t)AC6) * (int32_t)AC5 / (int32_t)pow(2,15);
if(DEBUG) printf("X1 %li\r\n", X1);
//    X2 = (int32_t) MC * pow(2,11) / (X1 + MD);
    X2 = (int32_t) MC * 2048 / (X1 + MD);
     d52:	60 91 7c 06 	lds	r22, 0x067C
     d56:	70 91 7d 06 	lds	r23, 0x067D
     d5a:	88 27       	eor	r24, r24
     d5c:	77 fd       	sbrc	r23, 7
     d5e:	80 95       	com	r24
     d60:	98 2f       	mov	r25, r24
     d62:	4b e0       	ldi	r20, 0x0B	; 11
     d64:	66 0f       	add	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	88 1f       	adc	r24, r24
     d6a:	99 1f       	adc	r25, r25
     d6c:	4a 95       	dec	r20
     d6e:	d1 f7       	brne	.-12     	; 0xd64 <calc_true_temp+0x6e>
     d70:	20 91 7e 06 	lds	r18, 0x067E
     d74:	30 91 7f 06 	lds	r19, 0x067F
     d78:	44 27       	eor	r20, r20
     d7a:	37 fd       	sbrc	r19, 7
     d7c:	40 95       	com	r20
     d7e:	54 2f       	mov	r21, r20
     d80:	2e 0d       	add	r18, r14
     d82:	3f 1d       	adc	r19, r15
     d84:	40 1f       	adc	r20, r16
     d86:	51 1f       	adc	r21, r17
     d88:	0e 94 9b 33 	call	0x6736	; 0x6736 <__divmodsi4>
     d8c:	20 93 88 06 	sts	0x0688, r18
     d90:	30 93 89 06 	sts	0x0689, r19
     d94:	40 93 8a 06 	sts	0x068A, r20
     d98:	50 93 8b 06 	sts	0x068B, r21
if(DEBUG) printf("X2 %li\r\n", X2);
    B5 = X1 + X2;
     d9c:	2e 0d       	add	r18, r14
     d9e:	3f 1d       	adc	r19, r15
     da0:	40 1f       	adc	r20, r16
     da2:	51 1f       	adc	r21, r17
     da4:	20 93 90 06 	sts	0x0690, r18
     da8:	30 93 91 06 	sts	0x0691, r19
     dac:	40 93 92 06 	sts	0x0692, r20
     db0:	50 93 93 06 	sts	0x0693, r21
if(DEBUG) printf("B5 %li\r\n", B5);
//    T = (B5 + 8) / pow(2,4);
    T = (B5 + 8) / 16;
     db4:	ca 01       	movw	r24, r20
     db6:	b9 01       	movw	r22, r18
     db8:	68 5f       	subi	r22, 0xF8	; 248
     dba:	7f 4f       	sbci	r23, 0xFF	; 255
     dbc:	8f 4f       	sbci	r24, 0xFF	; 255
     dbe:	9f 4f       	sbci	r25, 0xFF	; 255
     dc0:	20 e1       	ldi	r18, 0x10	; 16
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	40 e0       	ldi	r20, 0x00	; 0
     dc6:	50 e0       	ldi	r21, 0x00	; 0
     dc8:	0e 94 9b 33 	call	0x6736	; 0x6736 <__divmodsi4>
     dcc:	f9 01       	movw	r30, r18
     dce:	20 93 8c 06 	sts	0x068C, r18
     dd2:	f0 93 8d 06 	sts	0x068D, r31
     dd6:	40 93 8e 06 	sts	0x068E, r20
     dda:	50 93 8f 06 	sts	0x068F, r21
if(DEBUG) printf("XT %li\r\n", T);

    if(DEBUG) printf("Temperature is %li /10 degrees Celcius.\r\n", T);

    return T;
}
     dde:	b9 01       	movw	r22, r18
     de0:	ca 01       	movw	r24, r20
     de2:	1f 91       	pop	r17
     de4:	0f 91       	pop	r16
     de6:	ff 90       	pop	r15
     de8:	ef 90       	pop	r14
     dea:	08 95       	ret

00000dec <read_uncomp_temp>:

void read_uncomp_temp(){
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	00 d0       	rcall	.+0      	; 0xdf2 <read_uncomp_temp+0x6>
     df2:	0f 92       	push	r0
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62

    uint8_t write_buf[1];
    uint8_t rx_buf[2];
    uint8_t i;

    write_buf[0] = 0x2E;
     df8:	8e e2       	ldi	r24, 0x2E	; 46
     dfa:	89 83       	std	Y+1, r24	; 0x01

    // Step 1: Write 0x2E into register 0xF4
    ee24xx_write_bytes(0xF4, 1, write_buf);
     dfc:	84 ef       	ldi	r24, 0xF4	; 244
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	61 e0       	ldi	r22, 0x01	; 1
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	ae 01       	movw	r20, r28
     e06:	4f 5f       	subi	r20, 0xFF	; 255
     e08:	5f 4f       	sbci	r21, 0xFF	; 255
     e0a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <ee24xx_write_bytes>

    // Step 2: Wait 4.5 ms
 //   nrk_wait_ticks(1000); // 1 tick is 1 ms I believe
    nrk_spin_wait_us(4500);
     e0e:	84 e9       	ldi	r24, 0x94	; 148
     e10:	91 e1       	ldi	r25, 0x11	; 17
     e12:	0e 94 0d 27 	call	0x4e1a	; 0x4e1a <nrk_spin_wait_us>

    // Step 3: Read registers 0xF6, 0xF7
    ee24xx_read_bytes(0xF6, 2, rx_buf);
     e16:	86 ef       	ldi	r24, 0xF6	; 246
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	62 e0       	ldi	r22, 0x02	; 2
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	ae 01       	movw	r20, r28
     e20:	4e 5f       	subi	r20, 0xFE	; 254
     e22:	5f 4f       	sbci	r21, 0xFF	; 255
     e24:	0e 94 c7 08 	call	0x118e	; 0x118e <ee24xx_read_bytes>
//    if(DEBUG){
  //      for(i = 0; i < 2; i++)
  //          printf("uncomp_temp[%i] is %u\r\n", i, rx_buf[i]);
  //  }

    UT = (((uint16_t)rx_buf[0] | 0x0000) << 8) | ((uint16_t)rx_buf[1]);
     e28:	3a 81       	ldd	r19, Y+2	; 0x02
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	8b 81       	ldd	r24, Y+3	; 0x03
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	82 2b       	or	r24, r18
     e32:	93 2b       	or	r25, r19
     e34:	a0 e0       	ldi	r26, 0x00	; 0
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	80 93 84 06 	sts	0x0684, r24
     e3c:	90 93 85 06 	sts	0x0685, r25
     e40:	a0 93 86 06 	sts	0x0686, r26
     e44:	b0 93 87 06 	sts	0x0687, r27

//    if(DEBUG)
  //   printf("UT is %i\r\n", UT);

}
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	08 95       	ret

00000e54 <calc_temp>:


int32_t calc_temp(){
    read_uncomp_temp();
     e54:	0e 94 f6 06 	call	0xdec	; 0xdec <read_uncomp_temp>
    return calc_true_temp();
     e58:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <calc_true_temp>
}
     e5c:	08 95       	ret

00000e5e <read_uncomp_press>:
int32_t calc_press(uint8_t oss){
    read_uncomp_press(oss);
    return calc_true_press(oss);
}

void read_uncomp_press(uint8_t oss){
     e5e:	1f 93       	push	r17
     e60:	df 93       	push	r29
     e62:	cf 93       	push	r28
     e64:	00 d0       	rcall	.+0      	; 0xe66 <read_uncomp_press+0x8>
     e66:	00 d0       	rcall	.+0      	; 0xe68 <read_uncomp_press+0xa>
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
     e6c:	18 2f       	mov	r17, r24

    uint8_t write_buf[1]; // Used to send a value to the Bosch sensor
    uint8_t rx_buf[3]; // Used to store the received values from the sensor
    uint8_t i;

    write_buf[0] = 0x34 + (oss << 6);
     e6e:	82 95       	swap	r24
     e70:	88 0f       	add	r24, r24
     e72:	88 0f       	add	r24, r24
     e74:	80 7c       	andi	r24, 0xC0	; 192
     e76:	8c 5c       	subi	r24, 0xCC	; 204
     e78:	89 83       	std	Y+1, r24	; 0x01

    // Step 1: Write 0x2E into register 0xF4
    ee24xx_write_bytes(0xF4, sizeof(write_buf), write_buf);
     e7a:	84 ef       	ldi	r24, 0xF4	; 244
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	61 e0       	ldi	r22, 0x01	; 1
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	ae 01       	movw	r20, r28
     e84:	4f 5f       	subi	r20, 0xFF	; 255
     e86:	5f 4f       	sbci	r21, 0xFF	; 255
     e88:	0e 94 e6 09 	call	0x13cc	; 0x13cc <ee24xx_write_bytes>

    // Step 2: Wait 4.5 ms
//    nrk_wait_ticks(1000); // 1 tick is 1 ms I believe
    nrk_spin_wait_us(4500);
     e8c:	84 e9       	ldi	r24, 0x94	; 148
     e8e:	91 e1       	ldi	r25, 0x11	; 17
     e90:	0e 94 0d 27 	call	0x4e1a	; 0x4e1a <nrk_spin_wait_us>

    // Step 3: Read registers 0xF6, 0xF7, 0xF8
    ee24xx_read_bytes(PRESS_BASE_REGISTER, sizeof(rx_buf), rx_buf);
     e94:	86 ef       	ldi	r24, 0xF6	; 246
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	63 e0       	ldi	r22, 0x03	; 3
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	ae 01       	movw	r20, r28
     e9e:	4e 5f       	subi	r20, 0xFE	; 254
     ea0:	5f 4f       	sbci	r21, 0xFF	; 255
     ea2:	0e 94 c7 08 	call	0x118e	; 0x118e <ee24xx_read_bytes>
    }
*/
     // Assemble the raw pressure value

     UP = ((uint32_t) rx_buf[0]) << 16;
     UP = UP  | ((uint32_t)(rx_buf[1]) << 8);
     ea6:	2b 81       	ldd	r18, Y+3	; 0x03
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	40 e0       	ldi	r20, 0x00	; 0
     eac:	50 e0       	ldi	r21, 0x00	; 0
     eae:	54 2f       	mov	r21, r20
     eb0:	43 2f       	mov	r20, r19
     eb2:	32 2f       	mov	r19, r18
     eb4:	22 27       	eor	r18, r18
            printf("uncomp_press[%i] is %u\r\n", i, rx_buf[i]);
    }
*/
     // Assemble the raw pressure value

     UP = ((uint32_t) rx_buf[0]) << 16;
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	a0 e0       	ldi	r26, 0x00	; 0
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	dc 01       	movw	r26, r24
     ec0:	99 27       	eor	r25, r25
     ec2:	88 27       	eor	r24, r24
     UP = UP  | ((uint32_t)(rx_buf[1]) << 8);
     ec4:	28 2b       	or	r18, r24
     ec6:	39 2b       	or	r19, r25
     ec8:	4a 2b       	or	r20, r26
     eca:	5b 2b       	or	r21, r27
     UP = UP  + rx_buf[2];
     ecc:	8c 81       	ldd	r24, Y+4	; 0x04
     ece:	28 0f       	add	r18, r24
     ed0:	31 1d       	adc	r19, r1
     ed2:	41 1d       	adc	r20, r1
     ed4:	51 1d       	adc	r21, r1
     UP = UP >> (8-oss);
     ed6:	88 e0       	ldi	r24, 0x08	; 8
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	81 1b       	sub	r24, r17
     edc:	91 09       	sbc	r25, r1
     ede:	04 c0       	rjmp	.+8      	; 0xee8 <read_uncomp_press+0x8a>
     ee0:	55 95       	asr	r21
     ee2:	47 95       	ror	r20
     ee4:	37 95       	ror	r19
     ee6:	27 95       	ror	r18
     ee8:	8a 95       	dec	r24
     eea:	d2 f7       	brpl	.-12     	; 0xee0 <read_uncomp_press+0x82>
     eec:	20 93 a7 06 	sts	0x06A7, r18
     ef0:	30 93 a8 06 	sts	0x06A8, r19
     ef4:	40 93 a9 06 	sts	0x06A9, r20
     ef8:	50 93 aa 06 	sts	0x06AA, r21

 //    if(DEBUG)
 //    printf("UP is %li\r\n", UP);

}
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	1f 91       	pop	r17
     f0a:	08 95       	ret

00000f0c <calc_press>:
    read_uncomp_temp();
    return calc_true_temp();
}


int32_t calc_press(uint8_t oss){
     f0c:	1f 93       	push	r17
     f0e:	18 2f       	mov	r17, r24
    read_uncomp_press(oss);
     f10:	0e 94 2f 07 	call	0xe5e	; 0xe5e <read_uncomp_press>
    return calc_true_press(oss);
     f14:	81 2f       	mov	r24, r17
     f16:	0e 94 bc 04 	call	0x978	; 0x978 <calc_true_press>
}
     f1a:	1f 91       	pop	r17
     f1c:	08 95       	ret

00000f1e <read>:
        return NRK_ERROR;
    else return NRK_OK;

}

int8_t read(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {
     f1e:	8f 92       	push	r8
     f20:	9f 92       	push	r9
     f22:	af 92       	push	r10
     f24:	bf 92       	push	r11
     f26:	cf 92       	push	r12
     f28:	df 92       	push	r13
     f2a:	ef 92       	push	r14
     f2c:	ff 92       	push	r15
     f2e:	0f 93       	push	r16
     f30:	1f 93       	push	r17
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	0f 92       	push	r0
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
     f3c:	4a 01       	movw	r8, r20

    int32_t value_from_sensor;



    ADC_ENABLE();
     f3e:	80 91 7a 00 	lds	r24, 0x007A
     f42:	80 68       	ori	r24, 0x80	; 128
     f44:	80 93 7a 00 	sts	0x007A, r24
    uint8_t count = 0;
    // key and value get passed as opt and size
    uint8_t key = opt;
    uint8_t value = size;

    if (size != 1 && size != 2 && size != 4) return 0;
     f48:	82 2f       	mov	r24, r18
     f4a:	81 50       	subi	r24, 0x01	; 1
     f4c:	82 30       	cpi	r24, 0x02	; 2
     f4e:	18 f0       	brcs	.+6      	; 0xf56 <read+0x38>
     f50:	24 30       	cpi	r18, 0x04	; 4
     f52:	09 f0       	breq	.+2      	; 0xf56 <read+0x38>
     f54:	bf c0       	rjmp	.+382    	; 0x10d4 <read+0x1b6>
    if ((channel != TEMP2) && (channel != PRESS) && channel <= 7) {
     f56:	80 91 99 06 	lds	r24, 0x0699
     f5a:	88 30       	cpi	r24, 0x08	; 8
     f5c:	90 f4       	brcc	.+36     	; 0xf82 <read+0x64>
        /* Conversion to 8-bit value*/
        uint16_t val = get_adc_val();
     f5e:	29 83       	std	Y+1, r18	; 0x01
     f60:	0e 94 a6 04 	call	0x94c	; 0x94c <get_adc_val>

        if (size == 2) {
     f64:	29 81       	ldd	r18, Y+1	; 0x01
     f66:	22 30       	cpi	r18, 0x02	; 2
     f68:	21 f4       	brne	.+8      	; 0xf72 <read+0x54>
            buffer[count] = val & 0xFF;
     f6a:	f4 01       	movw	r30, r8
     f6c:	80 83       	st	Z, r24
            count++;
            buffer[count] = (val >> 8) & 0xFF;
     f6e:	91 83       	std	Z+1, r25	; 0x01
     f70:	21 c0       	rjmp	.+66     	; 0xfb4 <read+0x96>
        }

        if (size == 1) {
     f72:	21 30       	cpi	r18, 0x01	; 1
     f74:	09 f0       	breq	.+2      	; 0xf78 <read+0x5a>
     f76:	a6 c0       	rjmp	.+332    	; 0x10c4 <read+0x1a6>
            buffer[count] = (val >> 2) & 0xFF;
     f78:	96 95       	lsr	r25
     f7a:	87 95       	ror	r24
     f7c:	96 95       	lsr	r25
     f7e:	87 95       	ror	r24
     f80:	21 c0       	rjmp	.+66     	; 0xfc4 <read+0xa6>
        }


    } else if (channel == MOTION ){
     f82:	8d 30       	cpi	r24, 0x0D	; 13
     f84:	11 f5       	brne	.+68     	; 0xfca <read+0xac>

	// Pull the pin low to dissipate charge otherwise it always floats high
	// In the future, we either need a buffer or a tiny pull down 
        nrk_gpio_direction(NRK_PORTE_2, NRK_PIN_OUTPUT);
     f86:	00 91 be 03 	lds	r16, 0x03BE
     f8a:	80 2f       	mov	r24, r16
     f8c:	61 e0       	ldi	r22, 0x01	; 1
     f8e:	29 83       	std	Y+1, r18	; 0x01
     f90:	0e 94 67 12 	call	0x24ce	; 0x24ce <nrk_gpio_direction>
        nrk_gpio_clr(NRK_PORTE_2);
     f94:	80 2f       	mov	r24, r16
     f96:	0e 94 80 10 	call	0x2100	; 0x2100 <nrk_gpio_clr>
        nrk_gpio_direction(NRK_PORTE_2, NRK_PIN_INPUT);
     f9a:	80 2f       	mov	r24, r16
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	0e 94 67 12 	call	0x24ce	; 0x24ce <nrk_gpio_direction>
	if(size==2) {buffer[count]=nrk_gpio_get(NRK_PORTE_2); count++; buffer[count]=0;  }
     fa2:	29 81       	ldd	r18, Y+1	; 0x01
     fa4:	22 30       	cpi	r18, 0x02	; 2
     fa6:	41 f4       	brne	.+16     	; 0xfb8 <read+0x9a>
     fa8:	80 2f       	mov	r24, r16
     faa:	0e 94 02 11 	call	0x2204	; 0x2204 <nrk_gpio_get>
     fae:	f4 01       	movw	r30, r8
     fb0:	80 83       	st	Z, r24
     fb2:	11 82       	std	Z+1, r1	; 0x01
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	87 c0       	rjmp	.+270    	; 0x10c6 <read+0x1a8>
	if(size==1) {buffer[count]=nrk_gpio_get(NRK_PORTE_2); }
     fb8:	21 30       	cpi	r18, 0x01	; 1
     fba:	09 f0       	breq	.+2      	; 0xfbe <read+0xa0>
     fbc:	83 c0       	rjmp	.+262    	; 0x10c4 <read+0x1a6>
     fbe:	80 2f       	mov	r24, r16
     fc0:	0e 94 02 11 	call	0x2204	; 0x2204 <nrk_gpio_get>
     fc4:	f4 01       	movw	r30, r8
     fc6:	80 83       	st	Z, r24
     fc8:	7d c0       	rjmp	.+250    	; 0x10c4 <read+0x1a6>
     } 
	else if (channel == AUDIO_P2P) {
     fca:	8c 30       	cpi	r24, 0x0C	; 12
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <read+0xb2>
     fce:	42 c0       	rjmp	.+132    	; 0x1054 <read+0x136>
     fd0:	ee 24       	eor	r14, r14
     fd2:	ff 24       	eor	r15, r15
     fd4:	00 e0       	ldi	r16, 0x00	; 0
     fd6:	10 e0       	ldi	r17, 0x00	; 0
     fd8:	91 e0       	ldi	r25, 0x01	; 1
     fda:	c9 2e       	mov	r12, r25
     fdc:	94 e0       	ldi	r25, 0x04	; 4
     fde:	d9 2e       	mov	r13, r25
        uint16_t i;
        max = 0;
        min = 1025;
        for (i = 0; i < 256; i++) {
            // 10ms snapshot at around 11KHz measured on scope
	    ADC_SAMPLE_SINGLE();
     fe0:	80 91 7a 00 	lds	r24, 0x007A
     fe4:	80 64       	ori	r24, 0x40	; 64
     fe6:	80 93 7a 00 	sts	0x007A, r24
     fea:	80 91 7a 00 	lds	r24, 0x007A
     fee:	84 ff       	sbrs	r24, 4
     ff0:	fc cf       	rjmp	.-8      	; 0xfea <read+0xcc>
            nrk_spin_wait_us(32);
     ff2:	80 e2       	ldi	r24, 0x20	; 32
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	29 83       	std	Y+1, r18	; 0x01
     ff8:	0e 94 0d 27 	call	0x4e1a	; 0x4e1a <nrk_spin_wait_us>
    	    ADC_GET_SAMPLE_10(val);
     ffc:	80 91 78 00 	lds	r24, 0x0078
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	30 91 79 00 	lds	r19, 0x0079
    1006:	b3 2e       	mov	r11, r19
    1008:	aa 24       	eor	r10, r10
    100a:	8a 29       	or	r24, r10
    100c:	9b 29       	or	r25, r11
    100e:	29 81       	ldd	r18, Y+1	; 0x01
    1010:	8c 15       	cp	r24, r12
    1012:	9d 05       	cpc	r25, r13
    1014:	08 f4       	brcc	.+2      	; 0x1018 <read+0xfa>
    1016:	6c 01       	movw	r12, r24
    1018:	08 17       	cp	r16, r24
    101a:	19 07       	cpc	r17, r25
    101c:	08 f4       	brcc	.+2      	; 0x1020 <read+0x102>
    101e:	8c 01       	movw	r16, r24
        //uint16_t val=get_adc_val();
        uint16_t val, min, max;
        uint16_t i;
        max = 0;
        min = 1025;
        for (i = 0; i < 256; i++) {
    1020:	08 94       	sec
    1022:	e1 1c       	adc	r14, r1
    1024:	f1 1c       	adc	r15, r1
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	ef 16       	cp	r14, r31
    102a:	f1 e0       	ldi	r31, 0x01	; 1
    102c:	ff 06       	cpc	r15, r31
    102e:	c1 f6       	brne	.-80     	; 0xfe0 <read+0xc2>
            nrk_spin_wait_us(32);
    	    ADC_GET_SAMPLE_10(val);
            if (val < min)min = val;
            if (val > max)max = val;
        }
        val = max - min;
    1030:	0c 19       	sub	r16, r12
    1032:	1d 09       	sbc	r17, r13
        if (size == 2) {
    1034:	22 30       	cpi	r18, 0x02	; 2
    1036:	21 f4       	brne	.+8      	; 0x1040 <read+0x122>
            buffer[count] = val & 0xFF;
    1038:	f4 01       	movw	r30, r8
    103a:	00 83       	st	Z, r16
            count++;
            buffer[count] = (val >> 8) & 0xFF;
    103c:	11 83       	std	Z+1, r17	; 0x01
    103e:	ba cf       	rjmp	.-140    	; 0xfb4 <read+0x96>
        }

        if (size == 1) {
    1040:	21 30       	cpi	r18, 0x01	; 1
    1042:	09 f0       	breq	.+2      	; 0x1046 <read+0x128>
    1044:	3f c0       	rjmp	.+126    	; 0x10c4 <read+0x1a6>
            buffer[count] = (val >> 2) & 0xFF;
    1046:	16 95       	lsr	r17
    1048:	07 95       	ror	r16
    104a:	16 95       	lsr	r17
    104c:	07 95       	ror	r16
    104e:	f4 01       	movw	r30, r8
    1050:	00 83       	st	Z, r16
    1052:	38 c0       	rjmp	.+112    	; 0x10c4 <read+0x1a6>
        }
    }
    else if(channel == HUMIDITY)
    1054:	8b 30       	cpi	r24, 0x0B	; 11
    1056:	f9 f4       	brne	.+62     	; 0x1096 <read+0x178>
    {
	h_cnt=0;
    1058:	10 92 a2 06 	sts	0x06A2, r1
	// Port F.2
	// Wait while pin is high
	do{
	}while((PINF & 0x4) == 0x4 );
    105c:	7a 99       	sbic	0x0f, 2	; 15
    105e:	fe cf       	rjmp	.-4      	; 0x105c <read+0x13e>
	// Wait while pin is low
	do{
	}while((PINF & 0x4) == 0 );
    1060:	7a 9b       	sbis	0x0f, 2	; 15
    1062:	fe cf       	rjmp	.-4      	; 0x1060 <read+0x142>
	//_nrk_high_speed_timer_stop();
	//_nrk_high_speed_timer_reset();
	//_nrk_high_speed_timer_start();
	do{
	// Make h_cnt only 8 bit so it accumulates faster
	h_cnt++;
    1064:	80 91 a2 06 	lds	r24, 0x06A2
    1068:	8f 5f       	subi	r24, 0xFF	; 255
    106a:	80 93 a2 06 	sts	0x06A2, r24
	}while((PINF & 0x4) == 0x4 );
    106e:	7a 99       	sbic	0x0f, 2	; 15
    1070:	f9 cf       	rjmp	.-14     	; 0x1064 <read+0x146>
//	h_cnt=_nrk_high_speed_timer_get();
	buffer[0]=h_cnt&0xff;
    1072:	f4 01       	movw	r30, r8
    1074:	80 83       	st	Z, r24
	buffer[1]=h_cnt >> 8;
    1076:	11 82       	std	Z+1, r1	; 0x01
	buffer[2]=h_cnt >> 16;
    1078:	80 91 a2 06 	lds	r24, 0x06A2
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	99 0f       	add	r25, r25
    1080:	88 0b       	sbc	r24, r24
    1082:	98 2f       	mov	r25, r24
    1084:	82 83       	std	Z+2, r24	; 0x02
	buffer[3]=h_cnt >> 24;
    1086:	80 91 a2 06 	lds	r24, 0x06A2
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	99 0f       	add	r25, r25
    108e:	88 0b       	sbc	r24, r24
    1090:	98 2f       	mov	r25, r24
    1092:	83 83       	std	Z+3, r24	; 0x03
    1094:	17 c0       	rjmp	.+46     	; 0x10c4 <read+0x1a6>

    }
    // Here the special cases of the I2C sensors (pressure and temperature)
    // are dealt with
    else if(channel == TEMP2 || channel == PRESS){
    1096:	98 2f       	mov	r25, r24
    1098:	99 50       	subi	r25, 0x09	; 9
    109a:	92 30       	cpi	r25, 0x02	; 2
    109c:	98 f4       	brcc	.+38     	; 0x10c4 <read+0x1a6>

        // Size must be 2 for these measurements. If the user has specified 1,
        // give them a zero to indicate something is wrong
        if(size != 4)
    109e:	24 30       	cpi	r18, 0x04	; 4
    10a0:	c9 f4       	brne	.+50     	; 0x10d4 <read+0x1b6>
            return 0;

        if(channel == TEMP2)
    10a2:	8a 30       	cpi	r24, 0x0A	; 10
    10a4:	19 f4       	brne	.+6      	; 0x10ac <read+0x18e>
	{
            value_from_sensor = calc_temp();
    10a6:	0e 94 2a 07 	call	0xe54	; 0xe54 <calc_temp>
    10aa:	05 c0       	rjmp	.+10     	; 0x10b6 <read+0x198>
	}
	    else{
            calc_temp(); /* Note this is neccessary because the pressure calculations depend upon the
    10ac:	0e 94 2a 07 	call	0xe54	; 0xe54 <calc_temp>
             raw temperature values*/
            value_from_sensor = calc_press(0); // OSS hard coded to 0 for now, doesn't really matter
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	0e 94 86 07 	call	0xf0c	; 0xf0c <calc_press>
        }
        // Now break up the value to fit in the buffer
        buffer[count] = value_from_sensor & 0xFF;
    10b6:	f4 01       	movw	r30, r8
    10b8:	60 83       	st	Z, r22
        count++;
        buffer[count] = (value_from_sensor >> 8 ) & 0xFF;
    10ba:	71 83       	std	Z+1, r23	; 0x01
        count++;
        buffer[count] = (value_from_sensor >> 16 ) & 0xFF;
    10bc:	82 83       	std	Z+2, r24	; 0x02
        count++;
        buffer[count] = (value_from_sensor >> 24 ) & 0xFF;
    10be:	93 83       	std	Z+3, r25	; 0x03
        buffer[count] = value_from_sensor & 0xFF;
        count++;
        buffer[count] = (value_from_sensor >> 8 ) & 0xFF;
        count++;
        buffer[count] = (value_from_sensor >> 16 ) & 0xFF;
        count++;
    10c0:	83 e0       	ldi	r24, 0x03	; 3
    10c2:	01 c0       	rjmp	.+2      	; 0x10c6 <read+0x1a8>
    int32_t value_from_sensor;



    ADC_ENABLE();
    uint8_t count = 0;
    10c4:	80 e0       	ldi	r24, 0x00	; 0
        count++;
        buffer[count] = (value_from_sensor >> 24 ) & 0xFF;

    }

    ADC_DISABLE();
    10c6:	90 91 7a 00 	lds	r25, 0x007A
    10ca:	9f 77       	andi	r25, 0x7F	; 127
    10cc:	90 93 7a 00 	sts	0x007A, r25
    count++;
    10d0:	8f 5f       	subi	r24, 0xFF	; 255
    return count;
    10d2:	01 c0       	rjmp	.+2      	; 0x10d6 <read+0x1b8>
    else if(channel == TEMP2 || channel == PRESS){

        // Size must be 2 for these measurements. If the user has specified 1,
        // give them a zero to indicate something is wrong
        if(size != 4)
            return 0;
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    ADC_DISABLE();
    count++;
    return count;


}
    10d6:	0f 90       	pop	r0
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	1f 91       	pop	r17
    10de:	0f 91       	pop	r16
    10e0:	ff 90       	pop	r15
    10e2:	ef 90       	pop	r14
    10e4:	df 90       	pop	r13
    10e6:	cf 90       	pop	r12
    10e8:	bf 90       	pop	r11
    10ea:	af 90       	pop	r10
    10ec:	9f 90       	pop	r9
    10ee:	8f 90       	pop	r8
    10f0:	08 95       	ret

000010f2 <dev_manager_ff3_sensors>:



int8_t dev_manager_ff3_sensors(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {

    switch (action) {
    10f2:	82 30       	cpi	r24, 0x02	; 2
    10f4:	d1 f0       	breq	.+52     	; 0x112a <dev_manager_ff3_sensors+0x38>
    10f6:	83 30       	cpi	r24, 0x03	; 3
    10f8:	28 f4       	brcc	.+10     	; 0x1104 <dev_manager_ff3_sensors+0x12>
    10fa:	88 23       	and	r24, r24
    10fc:	51 f0       	breq	.+20     	; 0x1112 <dev_manager_ff3_sensors+0x20>
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	09 f5       	brne	.+66     	; 0x1144 <dev_manager_ff3_sensors+0x52>
    1102:	0b c0       	rjmp	.+22     	; 0x111a <dev_manager_ff3_sensors+0x28>
    1104:	84 30       	cpi	r24, 0x04	; 4
    1106:	d1 f0       	breq	.+52     	; 0x113c <dev_manager_ff3_sensors+0x4a>
    1108:	84 30       	cpi	r24, 0x04	; 4
    110a:	98 f0       	brcs	.+38     	; 0x1132 <dev_manager_ff3_sensors+0x40>
    110c:	85 30       	cpi	r24, 0x05	; 5
    110e:	d1 f4       	brne	.+52     	; 0x1144 <dev_manager_ff3_sensors+0x52>
    1110:	08 c0       	rjmp	.+16     	; 0x1122 <dev_manager_ff3_sensors+0x30>
         * well as the I2C methods of getting inputs, even though only one of
         * them will be used at any given time.
         */

        case INIT:
            return init(action, opt, buffer, size);
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	0e 94 74 04 	call	0x8e8	; 0x8e8 <init>
    1118:	08 95       	ret

        case OPEN:
            return open(action, opt, buffer, size);
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	0e 94 ae 03 	call	0x75c	; 0x75c <open>
    1120:	08 95       	ret

        case READ:
            return read(action, opt, buffer, size);
    1122:	85 e0       	ldi	r24, 0x05	; 5
    1124:	0e 94 8f 07 	call	0xf1e	; 0xf1e <read>
    1128:	08 95       	ret

        case CLOSE:
            return close(action, opt, buffer, size);
    112a:	82 e0       	ldi	r24, 0x02	; 2
    112c:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <close>
    1130:	08 95       	ret

    // key and value get passed as opt and size
    uint8_t key = opt;

    // use "key" here
    if (key == SENSOR_SELECT) return channel;
    1132:	61 30       	cpi	r22, 0x01	; 1
    1134:	69 f4       	brne	.+26     	; 0x1150 <dev_manager_ff3_sensors+0x5e>
    1136:	80 91 99 06 	lds	r24, 0x0699
    113a:	08 95       	ret

        case GET_STATUS:
            return get_status(action, opt, buffer, size);

        case SET_STATUS:
            return set_status(action, opt, buffer, size);
    113c:	84 e0       	ldi	r24, 0x04	; 4
    113e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <set_status>
    1142:	08 95       	ret

        default:
            nrk_kernel_error_add(NRK_DEVICE_DRIVER, 0);
    1144:	8c e0       	ldi	r24, 0x0C	; 12
    1146:	60 e0       	ldi	r22, 0x00	; 0
    1148:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <nrk_kernel_error_add>
            return 0;
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	08 95       	ret
    // key and value get passed as opt and size
    uint8_t key = opt;

    // use "key" here
    if (key == SENSOR_SELECT) return channel;
    return NRK_ERROR;
    1150:	8f ef       	ldi	r24, 0xFF	; 255

        default:
            nrk_kernel_error_add(NRK_DEVICE_DRIVER, 0);
            return 0;
    }
}
    1152:	08 95       	ret

00001154 <set_i2c_device>:

uint8_t i2c_address; // The address of the slave node to write to

void set_i2c_device(uint8_t address)
{
    i2c_address = address;
    1154:	80 93 b4 06 	sts	0x06B4, r24
}
    1158:	08 95       	ret

0000115a <init_i2c>:
{

  // Set up the SCL frequency
  // To operate at a clock frequency of 1 MHz, set TWBR and TWPS to 0
  // TODO: Generalize later
  TWBR = 0x02; // TWI Bit Rate Register
    115a:	82 e0       	ldi	r24, 0x02	; 2
    115c:	80 93 b8 00 	sts	0x00B8, r24
  TWSR = 0x00; // TWPS is the value of the prescaler in the TWI status register (the 2 LSB)
    1160:	10 92 b9 00 	sts	0x00B9, r1

  // Enable the SCL/SDA
  PRR0 = PRR0 & 0x7F; // Set the MSB in PRRO to 0 (see page 378)
    1164:	e4 e6       	ldi	r30, 0x64	; 100
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	8f 77       	andi	r24, 0x7F	; 127
    116c:	80 83       	st	Z, r24
  TWCR = TWCR | 0x04; // Set the TWEN bit in the TWCR (see page 196)
    116e:	ec eb       	ldi	r30, 0xBC	; 188
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	84 60       	ori	r24, 0x04	; 4
    1176:	80 83       	st	Z, r24

}
    1178:	08 95       	ret

0000117a <close_i2c>:

void close_i2c(void)
{
   PRR0 = PRR0 & 0xFF; // Set the MSB in PRRO to 1 (see page 378)
    117a:	e4 e6       	ldi	r30, 0x64	; 100
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	80 83       	st	Z, r24
   TWCR = TWCR & 0xFB; // Set the TWEN bit in the TWCR (see page 196)
    1182:	ec eb       	ldi	r30, 0xBC	; 188
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	8b 7f       	andi	r24, 0xFB	; 251
    118a:	80 83       	st	Z, r24
}
    118c:	08 95       	ret

0000118e <ee24xx_read_bytes>:
 * be NACKed, which the client will take as an indication to not
 * initiate further transfers.
 */
int
ee24xx_read_bytes(uint16_t eeaddr, int len, uint8_t *buf)
{
    118e:	fa 01       	movw	r30, r20

  uint8_t sla, twcr, n = 0;
  int rv = 0;

  /* patch high bits of EEPROM address into SLA */
  sla = i2c_address | (((eeaddr >> 8) & 0x07) << 1);
    1190:	97 70       	andi	r25, 0x07	; 7
    1192:	99 0f       	add	r25, r25
    1194:	20 91 b4 06 	lds	r18, 0x06B4
    1198:	92 2b       	or	r25, r18
int
ee24xx_read_bytes(uint16_t eeaddr, int len, uint8_t *buf)
{


  uint8_t sla, twcr, n = 0;
    119a:	40 e0       	ldi	r20, 0x00	; 0
  restart:
  if (n++ >= MAX_ITER)
    return -1;
  begin:

  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
    119c:	54 ea       	ldi	r21, 0xA4	; 164
    }

  /* Note [10] */
  /* send SLA+W */
  TWDR = sla | TW_WRITE;
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    119e:	34 e8       	ldi	r19, 0x84	; 132
    default:
      goto error;
    }

  /* send SLA+R */
  TWDR = sla | TW_READ;
    11a0:	a9 2f       	mov	r26, r25
    11a2:	a1 60       	ori	r26, 0x01	; 1
  /*
   * Note [8]
   * First cycle: master transmitter mode
   */
  restart:
  if (n++ >= MAX_ITER)
    11a4:	4f 5f       	subi	r20, 0xFF	; 255
    11a6:	45 36       	cpi	r20, 0x65	; 101
    11a8:	09 f4       	brne	.+2      	; 0x11ac <ee24xx_read_bytes+0x1e>
    11aa:	8d c0       	rjmp	.+282    	; 0x12c6 <ee24xx_read_bytes+0x138>
    return -1;
  begin:

  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
    11ac:	50 93 bc 00 	sts	0x00BC, r21
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    11b0:	20 91 bc 00 	lds	r18, 0x00BC
    11b4:	27 ff       	sbrs	r18, 7
    11b6:	fc cf       	rjmp	.-8      	; 0x11b0 <ee24xx_read_bytes+0x22>
  switch ((twst = TW_STATUS))
    11b8:	20 91 b9 00 	lds	r18, 0x00B9
    11bc:	28 7f       	andi	r18, 0xF8	; 248
    11be:	20 93 b3 06 	sts	0x06B3, r18
    11c2:	20 31       	cpi	r18, 0x10	; 16
    11c4:	29 f0       	breq	.+10     	; 0x11d0 <ee24xx_read_bytes+0x42>
    11c6:	28 33       	cpi	r18, 0x38	; 56
    11c8:	89 f3       	breq	.-30     	; 0x11ac <ee24xx_read_bytes+0x1e>
    11ca:	28 30       	cpi	r18, 0x08	; 8
    11cc:	09 f0       	breq	.+2      	; 0x11d0 <ee24xx_read_bytes+0x42>
    11ce:	7b c0       	rjmp	.+246    	; 0x12c6 <ee24xx_read_bytes+0x138>
				/* NB: do /not/ send stop condition */
    }

  /* Note [10] */
  /* send SLA+W */
  TWDR = sla | TW_WRITE;
    11d0:	90 93 bb 00 	sts	0x00BB, r25
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    11d4:	30 93 bc 00 	sts	0x00BC, r19
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    11d8:	20 91 bc 00 	lds	r18, 0x00BC
    11dc:	27 ff       	sbrs	r18, 7
    11de:	fc cf       	rjmp	.-8      	; 0x11d8 <ee24xx_read_bytes+0x4a>
  switch ((twst = TW_STATUS))
    11e0:	20 91 b9 00 	lds	r18, 0x00B9
    11e4:	28 7f       	andi	r18, 0xF8	; 248
    11e6:	20 93 b3 06 	sts	0x06B3, r18
    11ea:	20 32       	cpi	r18, 0x20	; 32
    11ec:	d9 f2       	breq	.-74     	; 0x11a4 <ee24xx_read_bytes+0x16>
    11ee:	28 33       	cpi	r18, 0x38	; 56
    11f0:	e9 f2       	breq	.-70     	; 0x11ac <ee24xx_read_bytes+0x1e>
    11f2:	28 31       	cpi	r18, 0x18	; 24
    11f4:	09 f0       	breq	.+2      	; 0x11f8 <ee24xx_read_bytes+0x6a>
    11f6:	61 c0       	rjmp	.+194    	; 0x12ba <ee24xx_read_bytes+0x12c>

    default:
      goto error;		/* must send stop condition */
    }

  TWDR = eeaddr;		/* low 8 bits of addr */
    11f8:	80 93 bb 00 	sts	0x00BB, r24
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    11fc:	30 93 bc 00 	sts	0x00BC, r19
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1200:	20 91 bc 00 	lds	r18, 0x00BC
    1204:	27 ff       	sbrs	r18, 7
    1206:	fc cf       	rjmp	.-8      	; 0x1200 <ee24xx_read_bytes+0x72>
  switch ((twst = TW_STATUS))
    1208:	20 91 b9 00 	lds	r18, 0x00B9
    120c:	28 7f       	andi	r18, 0xF8	; 248
    120e:	20 93 b3 06 	sts	0x06B3, r18
    1212:	20 33       	cpi	r18, 0x30	; 48
    1214:	79 f1       	breq	.+94     	; 0x1274 <ee24xx_read_bytes+0xe6>
    1216:	28 33       	cpi	r18, 0x38	; 56
    1218:	49 f2       	breq	.-110    	; 0x11ac <ee24xx_read_bytes+0x1e>
    121a:	28 32       	cpi	r18, 0x28	; 40
    121c:	09 f0       	breq	.+2      	; 0x1220 <ee24xx_read_bytes+0x92>
    121e:	4d c0       	rjmp	.+154    	; 0x12ba <ee24xx_read_bytes+0x12c>

  /*
   * Note [12]
   * Next cycle(s): master receiver mode
   */
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send (rep.) start condition */
    1220:	50 93 bc 00 	sts	0x00BC, r21
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1224:	20 91 bc 00 	lds	r18, 0x00BC
    1228:	27 ff       	sbrs	r18, 7
    122a:	fc cf       	rjmp	.-8      	; 0x1224 <ee24xx_read_bytes+0x96>
  switch ((twst = TW_STATUS))
    122c:	20 91 b9 00 	lds	r18, 0x00B9
    1230:	28 7f       	andi	r18, 0xF8	; 248
    1232:	20 93 b3 06 	sts	0x06B3, r18
    1236:	20 31       	cpi	r18, 0x10	; 16
    1238:	29 f0       	breq	.+10     	; 0x1244 <ee24xx_read_bytes+0xb6>
    123a:	28 33       	cpi	r18, 0x38	; 56
    123c:	09 f4       	brne	.+2      	; 0x1240 <ee24xx_read_bytes+0xb2>
    123e:	b6 cf       	rjmp	.-148    	; 0x11ac <ee24xx_read_bytes+0x1e>
    1240:	28 30       	cpi	r18, 0x08	; 8
    1242:	d9 f5       	brne	.+118    	; 0x12ba <ee24xx_read_bytes+0x12c>
    default:
      goto error;
    }

  /* send SLA+R */
  TWDR = sla | TW_READ;
    1244:	a0 93 bb 00 	sts	0x00BB, r26
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    1248:	30 93 bc 00 	sts	0x00BC, r19
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    124c:	20 91 bc 00 	lds	r18, 0x00BC
    1250:	27 ff       	sbrs	r18, 7
    1252:	fc cf       	rjmp	.-8      	; 0x124c <ee24xx_read_bytes+0xbe>
  switch ((twst = TW_STATUS))
    1254:	20 91 b9 00 	lds	r18, 0x00B9
    1258:	28 7f       	andi	r18, 0xF8	; 248
    125a:	20 93 b3 06 	sts	0x06B3, r18
    125e:	20 34       	cpi	r18, 0x40	; 64
    1260:	29 f0       	breq	.+10     	; 0x126c <ee24xx_read_bytes+0xde>
    1262:	28 34       	cpi	r18, 0x48	; 72
    1264:	39 f0       	breq	.+14     	; 0x1274 <ee24xx_read_bytes+0xe6>
    1266:	28 33       	cpi	r18, 0x38	; 56
    1268:	41 f5       	brne	.+80     	; 0x12ba <ee24xx_read_bytes+0x12c>
    126a:	a0 cf       	rjmp	.-192    	; 0x11ac <ee24xx_read_bytes+0x1e>
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	94 ec       	ldi	r25, 0xC4	; 196
    1272:	1f c0       	rjmp	.+62     	; 0x12b2 <ee24xx_read_bytes+0x124>
ee24xx_read_bytes(uint16_t eeaddr, int len, uint8_t *buf)
{


  uint8_t sla, twcr, n = 0;
  int rv = 0;
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	22 c0       	rjmp	.+68     	; 0x12be <ee24xx_read_bytes+0x130>

  for (twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA) /* Note [13] */;
       len > 0;
       len--)
    {
      if (len == 1)
    127a:	61 30       	cpi	r22, 0x01	; 1
    127c:	71 05       	cpc	r23, r1
    127e:	09 f4       	brne	.+2      	; 0x1282 <ee24xx_read_bytes+0xf4>
	twcr = _BV(TWINT) | _BV(TWEN); /* send NAK this time */
    1280:	94 e8       	ldi	r25, 0x84	; 132
      TWCR = twcr;		/* clear int to start transmission */
    1282:	90 93 bc 00 	sts	0x00BC, r25
      while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1286:	80 91 bc 00 	lds	r24, 0x00BC
    128a:	87 ff       	sbrs	r24, 7
    128c:	fc cf       	rjmp	.-8      	; 0x1286 <ee24xx_read_bytes+0xf8>
      switch ((twst = TW_STATUS))
    128e:	80 91 b9 00 	lds	r24, 0x00B9
    1292:	88 7f       	andi	r24, 0xF8	; 248
    1294:	80 93 b3 06 	sts	0x06B3, r24
    1298:	80 35       	cpi	r24, 0x50	; 80
    129a:	21 f0       	breq	.+8      	; 0x12a4 <ee24xx_read_bytes+0x116>
    129c:	88 35       	cpi	r24, 0x58	; 88
    129e:	69 f4       	brne	.+26     	; 0x12ba <ee24xx_read_bytes+0x12c>
	{
	case TW_MR_DATA_NACK:
	  len = 0;		/* force end of loop */
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	70 e0       	ldi	r23, 0x00	; 0
	  /* FALLTHROUGH */
	case TW_MR_DATA_ACK:
	  *buf++ = TWDR;
    12a4:	80 91 bb 00 	lds	r24, 0x00BB
    12a8:	81 93       	st	Z+, r24
	  rv++;
    12aa:	2f 5f       	subi	r18, 0xFF	; 255
    12ac:	3f 4f       	sbci	r19, 0xFF	; 255
      goto error;
    }

  for (twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA) /* Note [13] */;
       len > 0;
       len--)
    12ae:	61 50       	subi	r22, 0x01	; 1
    12b0:	70 40       	sbci	r23, 0x00	; 0

    default:
      goto error;
    }

  for (twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA) /* Note [13] */;
    12b2:	16 16       	cp	r1, r22
    12b4:	17 06       	cpc	r1, r23
    12b6:	0c f3       	brlt	.-62     	; 0x127a <ee24xx_read_bytes+0xec>
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <ee24xx_read_bytes+0x130>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

  error:
  rv = -1;
    12ba:	2f ef       	ldi	r18, 0xFF	; 255
    12bc:	3f ef       	ldi	r19, 0xFF	; 255
	  goto error;
	}
    }
  quit:
  /* Note [14] */
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */
    12be:	84 e9       	ldi	r24, 0x94	; 148
    12c0:	80 93 bc 00 	sts	0x00BC, r24

  return rv;
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <ee24xx_read_bytes+0x13c>

    case TW_MT_ARB_LOST:	/* Note [9] */
      goto begin;

    default:
      return -1;		/* error: not in start condition */
    12c6:	2f ef       	ldi	r18, 0xFF	; 255
    12c8:	3f ef       	ldi	r19, 0xFF	; 255
  return rv;

  error:
  rv = -1;
  goto quit;
}
    12ca:	c9 01       	movw	r24, r18
    12cc:	08 95       	ret

000012ce <ee24xx_write_page>:
  int rv = 0;
  uint16_t endaddr;



  if (eeaddr + len < (eeaddr | (PAGE_SIZE - 1)))
    12ce:	68 0f       	add	r22, r24
    12d0:	79 1f       	adc	r23, r25
    12d2:	9c 01       	movw	r18, r24
    12d4:	27 60       	ori	r18, 0x07	; 7
    12d6:	62 17       	cp	r22, r18
    12d8:	73 07       	cpc	r23, r19
    12da:	18 f0       	brcs	.+6      	; 0x12e2 <ee24xx_write_page+0x14>
    endaddr = eeaddr + len;
  else
    endaddr = (eeaddr | (PAGE_SIZE - 1)) + 1;
    12dc:	b9 01       	movw	r22, r18
    12de:	6f 5f       	subi	r22, 0xFF	; 255
    12e0:	7f 4f       	sbci	r23, 0xFF	; 255
  len = endaddr - eeaddr;

  /* patch high bits of EEPROM address into SLA */
  sla = i2c_address | (((eeaddr >> 8) & 0x07) << 1);
    12e2:	39 2f       	mov	r19, r25
    12e4:	37 70       	andi	r19, 0x07	; 7
    12e6:	33 0f       	add	r19, r19
    12e8:	20 91 b4 06 	lds	r18, 0x06B4
    12ec:	32 2b       	or	r19, r18
 * re-invoke it in order to write further data.
 */
int
ee24xx_write_page(uint16_t eeaddr, int len, uint8_t *buf)
{
  uint8_t sla, n = 0;
    12ee:	e0 e0       	ldi	r30, 0x00	; 0
  if (n++ >= MAX_ITER)
    return -1;
  begin:

  /* Note [15] */
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
    12f0:	a4 ea       	ldi	r26, 0xA4	; 164
				/* NB: do /not/ send stop condition */
    }

  /* send SLA+W */
  TWDR = sla | TW_WRITE;
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    12f2:	f4 e8       	ldi	r31, 0x84	; 132

  /* patch high bits of EEPROM address into SLA */
  sla = i2c_address | (((eeaddr >> 8) & 0x07) << 1);

  restart:
  if (n++ >= MAX_ITER)
    12f4:	ef 5f       	subi	r30, 0xFF	; 255
    12f6:	e5 36       	cpi	r30, 0x65	; 101
    12f8:	09 f4       	brne	.+2      	; 0x12fc <ee24xx_write_page+0x2e>
    12fa:	64 c0       	rjmp	.+200    	; 0x13c4 <ee24xx_write_page+0xf6>
    return -1;
  begin:

  /* Note [15] */
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
    12fc:	a0 93 bc 00 	sts	0x00BC, r26
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1300:	20 91 bc 00 	lds	r18, 0x00BC
    1304:	27 ff       	sbrs	r18, 7
    1306:	fc cf       	rjmp	.-8      	; 0x1300 <ee24xx_write_page+0x32>
  switch ((twst = TW_STATUS))
    1308:	20 91 b9 00 	lds	r18, 0x00B9
    130c:	28 7f       	andi	r18, 0xF8	; 248
    130e:	20 93 b3 06 	sts	0x06B3, r18
    1312:	20 31       	cpi	r18, 0x10	; 16
    1314:	29 f0       	breq	.+10     	; 0x1320 <ee24xx_write_page+0x52>
    1316:	28 33       	cpi	r18, 0x38	; 56
    1318:	89 f3       	breq	.-30     	; 0x12fc <ee24xx_write_page+0x2e>
    131a:	28 30       	cpi	r18, 0x08	; 8
    131c:	09 f0       	breq	.+2      	; 0x1320 <ee24xx_write_page+0x52>
    131e:	52 c0       	rjmp	.+164    	; 0x13c4 <ee24xx_write_page+0xf6>
        return -1;		/* error: not in start condition */
				/* NB: do /not/ send stop condition */
    }

  /* send SLA+W */
  TWDR = sla | TW_WRITE;
    1320:	30 93 bb 00 	sts	0x00BB, r19
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    1324:	f0 93 bc 00 	sts	0x00BC, r31
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1328:	20 91 bc 00 	lds	r18, 0x00BC
    132c:	27 ff       	sbrs	r18, 7
    132e:	fc cf       	rjmp	.-8      	; 0x1328 <ee24xx_write_page+0x5a>
  switch ((twst = TW_STATUS))
    1330:	20 91 b9 00 	lds	r18, 0x00B9
    1334:	28 7f       	andi	r18, 0xF8	; 248
    1336:	20 93 b3 06 	sts	0x06B3, r18
    133a:	20 32       	cpi	r18, 0x20	; 32
    133c:	d9 f2       	breq	.-74     	; 0x12f4 <ee24xx_write_page+0x26>
    133e:	28 33       	cpi	r18, 0x38	; 56
    1340:	e9 f2       	breq	.-70     	; 0x12fc <ee24xx_write_page+0x2e>
    1342:	28 31       	cpi	r18, 0x18	; 24
    1344:	c9 f5       	brne	.+114    	; 0x13b8 <ee24xx_write_page+0xea>

    default:
        goto error;		/* must send stop condition */
    }

  TWDR = eeaddr;		/* low 8 bits of addr */
    1346:	80 93 bb 00 	sts	0x00BB, r24
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    134a:	f0 93 bc 00 	sts	0x00BC, r31
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    134e:	20 91 bc 00 	lds	r18, 0x00BC
    1352:	27 ff       	sbrs	r18, 7
    1354:	fc cf       	rjmp	.-8      	; 0x134e <ee24xx_write_page+0x80>
  switch ((twst = TW_STATUS))
    1356:	20 91 b9 00 	lds	r18, 0x00B9
    135a:	28 7f       	andi	r18, 0xF8	; 248
    135c:	20 93 b3 06 	sts	0x06B3, r18
    1360:	20 33       	cpi	r18, 0x30	; 48
    1362:	29 f0       	breq	.+10     	; 0x136e <ee24xx_write_page+0xa0>
    1364:	28 33       	cpi	r18, 0x38	; 56
    1366:	51 f2       	breq	.-108    	; 0x12fc <ee24xx_write_page+0x2e>
    1368:	28 32       	cpi	r18, 0x28	; 40
    136a:	31 f5       	brne	.+76     	; 0x13b8 <ee24xx_write_page+0xea>
    136c:	03 c0       	rjmp	.+6      	; 0x1374 <ee24xx_write_page+0xa6>
 */
int
ee24xx_write_page(uint16_t eeaddr, int len, uint8_t *buf)
{
  uint8_t sla, n = 0;
  int rv = 0;
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	24 c0       	rjmp	.+72     	; 0x13bc <ee24xx_write_page+0xee>

  if (eeaddr + len < (eeaddr | (PAGE_SIZE - 1)))
    endaddr = eeaddr + len;
  else
    endaddr = (eeaddr | (PAGE_SIZE - 1)) + 1;
  len = endaddr - eeaddr;
    1374:	68 1b       	sub	r22, r24
    1376:	79 0b       	sbc	r23, r25
    1378:	84 2f       	mov	r24, r20
    137a:	95 2f       	mov	r25, r21
    137c:	fc 01       	movw	r30, r24
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	30 e0       	ldi	r19, 0x00	; 0
    }

  for (; len > 0; len--)
    {
      TWDR = *buf++;
      TWCR = _BV(TWINT) | _BV(TWEN); /* start transmission */
    1382:	44 e8       	ldi	r20, 0x84	; 132
    1384:	12 c0       	rjmp	.+36     	; 0x13aa <ee24xx_write_page+0xdc>
        goto error;		/* must send stop condition */
    }

  for (; len > 0; len--)
    {
      TWDR = *buf++;
    1386:	81 91       	ld	r24, Z+
    1388:	80 93 bb 00 	sts	0x00BB, r24
      TWCR = _BV(TWINT) | _BV(TWEN); /* start transmission */
    138c:	40 93 bc 00 	sts	0x00BC, r20
      while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1390:	80 91 bc 00 	lds	r24, 0x00BC
    1394:	87 ff       	sbrs	r24, 7
    1396:	fc cf       	rjmp	.-8      	; 0x1390 <ee24xx_write_page+0xc2>
      switch ((twst = TW_STATUS))
    1398:	80 91 b9 00 	lds	r24, 0x00B9
    139c:	88 7f       	andi	r24, 0xF8	; 248
    139e:	80 93 b3 06 	sts	0x06B3, r24
    13a2:	88 32       	cpi	r24, 0x28	; 40
    13a4:	49 f4       	brne	.+18     	; 0x13b8 <ee24xx_write_page+0xea>
	{
	case TW_MT_DATA_NACK:
	  goto error;		/* device write protected -- Note [16] */

	case TW_MT_DATA_ACK:
	  rv++;
    13a6:	2f 5f       	subi	r18, 0xFF	; 255
    13a8:	3f 4f       	sbci	r19, 0xFF	; 255
 * The function simply returns after writing one page, returning the
 * actual number of data byte written.  It is up to the caller to
 * re-invoke it in order to write further data.
 */
int
ee24xx_write_page(uint16_t eeaddr, int len, uint8_t *buf)
    13aa:	cb 01       	movw	r24, r22
    13ac:	82 1b       	sub	r24, r18
    13ae:	93 0b       	sbc	r25, r19
    default:

        goto error;		/* must send stop condition */
    }

  for (; len > 0; len--)
    13b0:	18 16       	cp	r1, r24
    13b2:	19 06       	cpc	r1, r25
    13b4:	44 f3       	brlt	.-48     	; 0x1386 <ee24xx_write_page+0xb8>
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <ee24xx_write_page+0xee>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

  error:
  rv = -1;
    13b8:	2f ef       	ldi	r18, 0xFF	; 255
    13ba:	3f ef       	ldi	r19, 0xFF	; 255
	default:
            goto error;
	}
    }
  quit:
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */
    13bc:	84 e9       	ldi	r24, 0x94	; 148
    13be:	80 93 bc 00 	sts	0x00BC, r24

  return rv;
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <ee24xx_write_page+0xfa>

    case TW_MT_ARB_LOST:
      goto begin;

    default:
        return -1;		/* error: not in start condition */
    13c4:	2f ef       	ldi	r18, 0xFF	; 255
    13c6:	3f ef       	ldi	r19, 0xFF	; 255
  return rv;

  error:
  rv = -1;
  goto quit;
}
    13c8:	c9 01       	movw	r24, r18
    13ca:	08 95       	ret

000013cc <ee24xx_write_bytes>:
 * function until either an error has been returned, or all bytes
 * have been written.
 */
int
ee24xx_write_bytes(uint16_t eeaddr, int len, uint8_t *buf)
{
    13cc:	cf 92       	push	r12
    13ce:	df 92       	push	r13
    13d0:	ef 92       	push	r14
    13d2:	ff 92       	push	r15
    13d4:	0f 93       	push	r16
    13d6:	1f 93       	push	r17
    13d8:	cf 93       	push	r28
    13da:	df 93       	push	r29
    13dc:	7c 01       	movw	r14, r24
    13de:	eb 01       	movw	r28, r22
    13e0:	6a 01       	movw	r12, r20
  int rv, total;



  total = 0;
    13e2:	00 e0       	ldi	r16, 0x00	; 0
    13e4:	10 e0       	ldi	r17, 0x00	; 0
    {
#if DEBUG
      printf("Calling ee24xx_write_page(%d, %d, %p)",
	     eeaddr, len, buf);
#endif
      rv = ee24xx_write_page(eeaddr, len, buf);
    13e6:	c7 01       	movw	r24, r14
    13e8:	be 01       	movw	r22, r28
    13ea:	a6 01       	movw	r20, r12
    13ec:	0e 94 67 09 	call	0x12ce	; 0x12ce <ee24xx_write_page>
#if DEBUG
      printf(" => %d\n", rv);
#endif
      if (rv == -1)
    13f0:	2f ef       	ldi	r18, 0xFF	; 255
    13f2:	8f 3f       	cpi	r24, 0xFF	; 255
    13f4:	92 07       	cpc	r25, r18
    13f6:	61 f0       	breq	.+24     	; 0x1410 <ee24xx_write_bytes+0x44>
	return -1;
      eeaddr += rv;
      len -= rv;
    13f8:	c8 1b       	sub	r28, r24
    13fa:	d9 0b       	sbc	r29, r25
      buf += rv;
      total += rv;
    13fc:	08 0f       	add	r16, r24
    13fe:	19 1f       	adc	r17, r25
    }
  while (len > 0);
    1400:	1c 16       	cp	r1, r28
    1402:	1d 06       	cpc	r1, r29
    1404:	3c f4       	brge	.+14     	; 0x1414 <ee24xx_write_bytes+0x48>
#if DEBUG
      printf(" => %d\n", rv);
#endif
      if (rv == -1)
	return -1;
      eeaddr += rv;
    1406:	e8 0e       	add	r14, r24
    1408:	f9 1e       	adc	r15, r25
      len -= rv;
      buf += rv;
    140a:	c8 0e       	add	r12, r24
    140c:	d9 1e       	adc	r13, r25
    140e:	eb cf       	rjmp	.-42     	; 0x13e6 <ee24xx_write_bytes+0x1a>
      rv = ee24xx_write_page(eeaddr, len, buf);
#if DEBUG
      printf(" => %d\n", rv);
#endif
      if (rv == -1)
	return -1;
    1410:	0f ef       	ldi	r16, 0xFF	; 255
    1412:	1f ef       	ldi	r17, 0xFF	; 255
      total += rv;
    }
  while (len > 0);

  return total;
}
    1414:	c8 01       	movw	r24, r16
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	1f 91       	pop	r17
    141c:	0f 91       	pop	r16
    141e:	ff 90       	pop	r15
    1420:	ef 90       	pop	r14
    1422:	df 90       	pop	r13
    1424:	cf 90       	pop	r12
    1426:	08 95       	ret

00001428 <error>:

void
error(void)
{

  printf("error: TWI status %#x\n", twst);
    1428:	00 d0       	rcall	.+0      	; 0x142a <error+0x2>
    142a:	00 d0       	rcall	.+0      	; 0x142c <error+0x4>
    142c:	ed b7       	in	r30, 0x3d	; 61
    142e:	fe b7       	in	r31, 0x3e	; 62
    1430:	31 96       	adiw	r30, 0x01	; 1
    1432:	83 ef       	ldi	r24, 0xF3	; 243
    1434:	92 e0       	ldi	r25, 0x02	; 2
    1436:	ad b7       	in	r26, 0x3d	; 61
    1438:	be b7       	in	r27, 0x3e	; 62
    143a:	12 96       	adiw	r26, 0x02	; 2
    143c:	9c 93       	st	X, r25
    143e:	8e 93       	st	-X, r24
    1440:	11 97       	sbiw	r26, 0x01	; 1
    1442:	80 91 b3 06 	lds	r24, 0x06B3
    1446:	82 83       	std	Z+2, r24	; 0x02
    1448:	13 82       	std	Z+3, r1	; 0x03
    144a:	0e 94 78 34 	call	0x68f0	; 0x68f0 <printf>
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0

}
    1456:	08 95       	ret

00001458 <rf_cmd>:


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    1458:	90 91 41 01 	lds	r25, 0x0141
    145c:	9f 71       	andi	r25, 0x1F	; 31
    145e:	9f 31       	cpi	r25, 0x1F	; 31
    1460:	d9 f3       	breq	.-10     	; 0x1458 <rf_cmd>
		continue;
	TRX_STATE = cmd;
    1462:	80 93 42 01 	sts	0x0142, r24
}
    1466:	08 95       	ret

00001468 <rf_enable_glossy>:



void rf_enable_glossy()
{
	use_glossy = 1;
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	80 93 bb 06 	sts	0x06BB, r24
}
    146e:	08 95       	ret

00001470 <rf_disable_glossy>:

void rf_disable_glossy()
{
	use_glossy = 0;
    1470:	10 92 bb 06 	sts	0x06BB, r1
}
    1474:	08 95       	ret

00001476 <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    1476:	80 91 41 01 	lds	r24, 0x0141
    147a:	8f 71       	andi	r24, 0x1F	; 31
    147c:	8f 31       	cpi	r24, 0x1F	; 31
    147e:	d9 f3       	breq	.-10     	; 0x1476 <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    1480:	80 91 41 01 	lds	r24, 0x0141
    1484:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
    1486:	d1 f0       	breq	.+52     	; 0x14bc <rf_power_down+0x46>
    1488:	8f 30       	cpi	r24, 0x0F	; 15
    148a:	c1 f0       	breq	.+48     	; 0x14bc <rf_power_down+0x46>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
    148c:	80 91 41 01 	lds	r24, 0x0141
    1490:	8f 71       	andi	r24, 0x1F	; 31
    1492:	88 30       	cpi	r24, 0x08	; 8
    1494:	41 f0       	breq	.+16     	; 0x14a6 <rf_power_down+0x30>
		rf_cmd(TRX_OFF);
    1496:	88 e0       	ldi	r24, 0x08	; 8
    1498:	0e 94 2c 0a 	call	0x1458	; 0x1458 <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
    149c:	80 91 41 01 	lds	r24, 0x0141
    14a0:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
    14a2:	88 30       	cpi	r24, 0x08	; 8
    14a4:	d9 f7       	brne	.-10     	; 0x149c <rf_power_down+0x26>
	}

	TRXPR |= (1 << SLPTR);
    14a6:	80 91 39 01 	lds	r24, 0x0139
    14aa:	82 60       	ori	r24, 0x02	; 2
    14ac:	80 93 39 01 	sts	0x0139, r24
	do{
		status = (TRX_STATUS & 0x1F);
    14b0:	80 91 41 01 	lds	r24, 0x0141
    14b4:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
    14b6:	11 f0       	breq	.+4      	; 0x14bc <rf_power_down+0x46>
    14b8:	8f 30       	cpi	r24, 0x0F	; 15
    14ba:	d1 f7       	brne	.-12     	; 0x14b0 <rf_power_down+0x3a>
    14bc:	08 95       	ret

000014be <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    14be:	80 91 41 01 	lds	r24, 0x0141
    14c2:	8f 71       	andi	r24, 0x1F	; 31
    14c4:	8f 31       	cpi	r24, 0x1F	; 31
    14c6:	d9 f3       	breq	.-10     	; 0x14be <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    14c8:	80 91 41 01 	lds	r24, 0x0141
    14cc:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
    14ce:	11 f0       	breq	.+4      	; 0x14d4 <rf_power_up+0x16>
    14d0:	8f 30       	cpi	r24, 0x0F	; 15
    14d2:	51 f4       	brne	.+20     	; 0x14e8 <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
    14d4:	80 91 39 01 	lds	r24, 0x0139
    14d8:	8d 7f       	andi	r24, 0xFD	; 253
    14da:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
    14de:	80 91 41 01 	lds	r24, 0x0141
    14e2:	8f 71       	andi	r24, 0x1F	; 31
    14e4:	88 30       	cpi	r24, 0x08	; 8
    14e6:	d9 f7       	brne	.-10     	; 0x14de <rf_power_up+0x20>
    14e8:	08 95       	ret

000014ea <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
    14ea:	e5 e4       	ldi	r30, 0x45	; 69
    14ec:	f1 e0       	ldi	r31, 0x01	; 1
    14ee:	90 81       	ld	r25, Z
    14f0:	90 7f       	andi	r25, 0xF0	; 240
    14f2:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
    14f4:	90 81       	ld	r25, Z
    14f6:	8f 70       	andi	r24, 0x0F	; 15
    14f8:	89 2b       	or	r24, r25
    14fa:	80 83       	st	Z, r24
}
    14fc:	08 95       	ret

000014fe <rf_addr_decode_enable>:

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
    14fe:	e7 e5       	ldi	r30, 0x57	; 87
    1500:	f1 e0       	ldi	r31, 0x01	; 1
    1502:	80 81       	ld	r24, Z
    1504:	8d 7f       	andi	r24, 0xFD	; 253
    1506:	80 83       	st	Z, r24
}
    1508:	08 95       	ret

0000150a <rf_addr_decode_disable>:


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
    150a:	e7 e5       	ldi	r30, 0x57	; 87
    150c:	f1 e0       	ldi	r31, 0x01	; 1
    150e:	80 81       	ld	r24, Z
    1510:	82 60       	ori	r24, 0x02	; 2
    1512:	80 83       	st	Z, r24
}
    1514:	08 95       	ret

00001516 <rf_auto_ack_enable>:


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
    1516:	ee e6       	ldi	r30, 0x6E	; 110
    1518:	f1 e0       	ldi	r31, 0x01	; 1
    151a:	80 81       	ld	r24, Z
    151c:	8f 7e       	andi	r24, 0xEF	; 239
    151e:	80 83       	st	Z, r24
}
    1520:	08 95       	ret

00001522 <rf_auto_ack_disable>:

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
    1522:	ee e6       	ldi	r30, 0x6E	; 110
    1524:	f1 e0       	ldi	r31, 0x01	; 1
    1526:	80 81       	ld	r24, Z
    1528:	80 61       	ori	r24, 0x10	; 16
    152a:	80 83       	st	Z, r24
}
    152c:	08 95       	ret

0000152e <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
    152e:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
    1532:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
    1536:	90 93 c5 06 	sts	0x06C5, r25
    153a:	80 93 c4 06 	sts	0x06C4, r24
}
    153e:	08 95       	ret

00001540 <rf_set_rx>:


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
    1540:	90 93 bf 06 	sts	0x06BF, r25
    1544:	80 93 be 06 	sts	0x06BE, r24
	PHY_CC_CCA &= ~(0x1F);
    1548:	e8 e4       	ldi	r30, 0x48	; 72
    154a:	f1 e0       	ldi	r31, 0x01	; 1
    154c:	80 81       	ld	r24, Z
    154e:	80 7e       	andi	r24, 0xE0	; 224
    1550:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
    1552:	80 81       	ld	r24, Z
    1554:	68 2b       	or	r22, r24
    1556:	60 83       	st	Z, r22
}
    1558:	08 95       	ret

0000155a <rx_start_callback>:

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
    155a:	90 93 37 05 	sts	0x0537, r25
    155e:	80 93 36 05 	sts	0x0536, r24
}
    1562:	08 95       	ret

00001564 <rx_end_callback>:

void rx_end_callback(void (*func)(void)){
	rx_end_func = func;
    1564:	90 93 39 05 	sts	0x0539, r25
    1568:	80 93 38 05 	sts	0x0538, r24
}
    156c:	08 95       	ret

0000156e <rf_init>:


void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
    156e:	1f 93       	push	r17

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
    1570:	70 e2       	ldi	r23, 0x20	; 32
    1572:	70 93 44 01 	sts	0x0144, r23
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
    1576:	70 ec       	ldi	r23, 0xC0	; 192
    1578:	70 93 45 01 	sts	0x0145, r23
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
    157c:	60 62       	ori	r22, 0x20	; 32
    157e:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
    1582:	65 ec       	ldi	r22, 0xC5	; 197
    1584:	60 93 49 01 	sts	0x0149, r22
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
    1588:	67 ea       	ldi	r22, 0xA7	; 167
    158a:	60 93 4b 01 	sts	0x014B, r22
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
    158e:	60 e8       	ldi	r22, 0x80	; 128
    1590:	60 93 4c 01 	sts	0x014C, r22
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
    1594:	20 93 60 01 	sts	0x0160, r18
    1598:	30 93 61 01 	sts	0x0161, r19
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
    159c:	40 93 62 01 	sts	0x0162, r20
    15a0:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    15a4:	e6 e4       	ldi	r30, 0x46	; 70
    15a6:	f1 e0       	ldi	r31, 0x01	; 1
    15a8:	10 81       	ld	r17, Z
    15aa:	a0 81       	ld	r26, Z
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    15ac:	60 81       	ld	r22, Z
    15ae:	70 81       	ld	r23, Z
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    15b0:	12 95       	swap	r17
    15b2:	16 95       	lsr	r17
    15b4:	17 70       	andi	r17, 0x07	; 7
    15b6:	12 95       	swap	r17
    15b8:	11 0f       	add	r17, r17
    15ba:	11 0f       	add	r17, r17
    15bc:	10 7c       	andi	r17, 0xC0	; 192
    15be:	72 95       	swap	r23
    15c0:	76 95       	lsr	r23
    15c2:	73 70       	andi	r23, 0x03	; 3
    15c4:	17 2b       	or	r17, r23
    15c6:	a2 95       	swap	r26
    15c8:	a6 95       	lsr	r26
    15ca:	a7 70       	andi	r26, 0x07	; 7
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	a3 70       	andi	r26, 0x03	; 3
    15d0:	b0 70       	andi	r27, 0x00	; 0
    15d2:	74 e0       	ldi	r23, 0x04	; 4
    15d4:	aa 0f       	add	r26, r26
    15d6:	bb 1f       	adc	r27, r27
    15d8:	7a 95       	dec	r23
    15da:	e1 f7       	brne	.-8      	; 0x15d4 <rf_init+0x66>
    15dc:	1a 2b       	or	r17, r26
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    15de:	62 95       	swap	r22
    15e0:	66 95       	lsr	r22
    15e2:	67 70       	andi	r22, 0x07	; 7
    15e4:	70 e0       	ldi	r23, 0x00	; 0
    15e6:	63 70       	andi	r22, 0x03	; 3
    15e8:	70 70       	andi	r23, 0x00	; 0
    15ea:	66 0f       	add	r22, r22
    15ec:	77 1f       	adc	r23, r23
    15ee:	66 0f       	add	r22, r22
    15f0:	77 1f       	adc	r23, r23
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    15f2:	16 2b       	or	r17, r22
    15f4:	10 93 6d 01 	sts	0x016D, r17
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    15f8:	60 81       	ld	r22, Z
    15fa:	e0 81       	ld	r30, Z
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    15fc:	e2 95       	swap	r30
    15fe:	e6 95       	lsr	r30
    1600:	e3 70       	andi	r30, 0x03	; 3
    1602:	e0 64       	ori	r30, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    1604:	62 95       	swap	r22
    1606:	66 95       	lsr	r22
    1608:	67 70       	andi	r22, 0x07	; 7
    160a:	70 e0       	ldi	r23, 0x00	; 0
    160c:	63 70       	andi	r22, 0x03	; 3
    160e:	70 70       	andi	r23, 0x00	; 0
    1610:	66 0f       	add	r22, r22
    1612:	77 1f       	adc	r23, r23
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    1614:	e6 2b       	or	r30, r22
    1616:	e0 93 6e 01 	sts	0x016E, r30
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
    161a:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
	/* Enable radio interrupts */
	IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
    161e:	6f ef       	ldi	r22, 0xFF	; 255
    1620:	60 93 4e 01 	sts	0x014E, r22
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN);

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
    1624:	90 93 bf 06 	sts	0x06BF, r25
    1628:	80 93 be 06 	sts	0x06BE, r24
	rfSettings.txSeqNumber = 0;
    162c:	10 92 c0 06 	sts	0x06C0, r1
	rfSettings.ackReceived = 0;
    1630:	10 92 c1 06 	sts	0x06C1, r1
	rfSettings.panId = panId;
    1634:	50 93 c3 06 	sts	0x06C3, r21
    1638:	40 93 c2 06 	sts	0x06C2, r20
	rfSettings.myAddr = myAddr;
    163c:	30 93 c5 06 	sts	0x06C5, r19
    1640:	20 93 c4 06 	sts	0x06C4, r18
	rfSettings.receiveOn = 0;
    1644:	10 92 c6 06 	sts	0x06C6, r1

	rf_ready = 1;
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	80 93 e0 06 	sts	0x06E0, r24
	rx_ready = 0;
    164e:	10 92 ff 06 	sts	0x06FF, r1
	tx_done = 0;
    1652:	10 92 cf 06 	sts	0x06CF, r1

	use_glossy = 0;
    1656:	10 92 bb 06 	sts	0x06BB, r1

} // rf_init() 
    165a:	1f 91       	pop	r17
    165c:	08 95       	ret

0000165e <rf_rx_on>:
	rf_cc2591_rx_on();
#endif
#ifdef GLOSSY_TESTING
	clear_packet_flags();
#endif
	rf_cmd(RX_AACK_ON);
    165e:	86 e1       	ldi	r24, 0x16	; 22
    1660:	0e 94 2c 0a 	call	0x1458	; 0x1458 <rf_cmd>
}
    1664:	08 95       	ret

00001666 <rf_polling_rx_on>:

#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	rf_cmd(RX_AACK_ON);
    1666:	86 e1       	ldi	r24, 0x16	; 22
    1668:	0e 94 2c 0a 	call	0x1458	; 0x1458 <rf_cmd>
}
    166c:	08 95       	ret

0000166e <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
	rf_cmd(TRX_OFF);
    166e:	88 e0       	ldi	r24, 0x08	; 8
    1670:	0e 94 2c 0a 	call	0x1458	; 0x1458 <rf_cmd>
	rx_ready = 0;
    1674:	10 92 ff 06 	sts	0x06FF, r1
}
    1678:	08 95       	ret

0000167a <rf_tx_packet_repeat>:
uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
}

uint8_t rf_tx_packet_repeat(RF_TX_INFO *pRTI, uint16_t ms)
{
    167a:	2f 92       	push	r2
    167c:	3f 92       	push	r3
    167e:	4f 92       	push	r4
    1680:	5f 92       	push	r5
    1682:	7f 92       	push	r7
    1684:	8f 92       	push	r8
    1686:	9f 92       	push	r9
    1688:	af 92       	push	r10
    168a:	bf 92       	push	r11
    168c:	cf 92       	push	r12
    168e:	df 92       	push	r13
    1690:	ef 92       	push	r14
    1692:	ff 92       	push	r15
    1694:	0f 93       	push	r16
    1696:	1f 93       	push	r17
    1698:	cf 93       	push	r28
    169a:	df 93       	push	r29
    169c:	ec 01       	movw	r28, r24
    169e:	1b 01       	movw	r2, r22
	*/

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready) 
    16a0:	80 91 e0 06 	lds	r24, 0x06E0
    16a4:	88 23       	and	r24, r24
    16a6:	09 f4       	brne	.+2      	; 0x16aa <rf_tx_packet_repeat+0x30>
    16a8:	0e c1       	rjmp	.+540    	; 0x18c6 <rf_tx_packet_repeat+0x24c>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
    16aa:	8e 81       	ldd	r24, Y+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
    16ac:	90 91 c0 06 	lds	r25, 0x06C0
    16b0:	9f 5f       	subi	r25, 0xFF	; 255
    16b2:	90 93 c0 06 	sts	0x06C0, r25
	machead->fcf = fcf;
    16b6:	e1 e8       	ldi	r30, 0x81	; 129
    16b8:	f1 e0       	ldi	r31, 0x01	; 1
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
    16ba:	81 70       	andi	r24, 0x01	; 1
    16bc:	82 95       	swap	r24
    16be:	88 0f       	add	r24, r24
    16c0:	80 72       	andi	r24, 0x20	; 32
    16c2:	81 64       	ori	r24, 0x41	; 65
    16c4:	80 93 81 01 	sts	0x0181, r24
    16c8:	88 e8       	ldi	r24, 0x88	; 136
    16ca:	81 83       	std	Z+1, r24	; 0x01
	machead->fcf = fcf;
	if (use_glossy) {
    16cc:	80 91 bb 06 	lds	r24, 0x06BB
    16d0:	88 23       	and	r24, r24
    16d2:	49 f0       	breq	.+18     	; 0x16e6 <rf_tx_packet_repeat+0x6c>
		machead->seq_num = 0xFF;
    16d4:	8f ef       	ldi	r24, 0xFF	; 255
    16d6:	82 83       	std	Z+2, r24	; 0x02
		machead->src_addr = 0xAAAA;
    16d8:	8a ea       	ldi	r24, 0xAA	; 170
    16da:	9a ea       	ldi	r25, 0xAA	; 170
    16dc:	90 87       	std	Z+8, r25	; 0x08
    16de:	87 83       	std	Z+7, r24	; 0x07
		machead->dest_addr = 0xFFFF;
    16e0:	8f ef       	ldi	r24, 0xFF	; 255
    16e2:	9f ef       	ldi	r25, 0xFF	; 255
    16e4:	10 c0       	rjmp	.+32     	; 0x1706 <rf_tx_packet_repeat+0x8c>
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	} else {
		machead->seq_num = rfSettings.txSeqNumber;
    16e6:	80 91 c0 06 	lds	r24, 0x06C0
    16ea:	82 83       	std	Z+2, r24	; 0x02
		machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
    16ec:	90 91 61 01 	lds	r25, 0x0161
    16f0:	80 91 60 01 	lds	r24, 0x0160
    16f4:	39 2f       	mov	r19, r25
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	82 2b       	or	r24, r18
    16fc:	93 2b       	or	r25, r19
    16fe:	90 87       	std	Z+8, r25	; 0x08
    1700:	87 83       	std	Z+7, r24	; 0x07
		machead->dest_addr = pRTI->destAddr;
    1702:	88 81       	ld	r24, Y
    1704:	99 81       	ldd	r25, Y+1	; 0x01
    1706:	96 83       	std	Z+6, r25	; 0x06
    1708:	85 83       	std	Z+5, r24	; 0x05
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
    170a:	90 91 63 01 	lds	r25, 0x0163
    170e:	80 91 62 01 	lds	r24, 0x0162
    1712:	39 2f       	mov	r19, r25
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	82 2b       	or	r24, r18
    171a:	93 2b       	or	r25, r19
    171c:	94 83       	std	Z+4, r25	; 0x04
    171e:	83 83       	std	Z+3, r24	; 0x03
	}
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
    1720:	4a 81       	ldd	r20, Y+2	; 0x02
    1722:	24 2f       	mov	r18, r20
    1724:	33 27       	eor	r19, r19
    1726:	27 fd       	sbrc	r18, 7
    1728:	30 95       	com	r19
    172a:	6b 81       	ldd	r22, Y+3	; 0x03
    172c:	7c 81       	ldd	r23, Y+4	; 0x04
    172e:	8a e8       	ldi	r24, 0x8A	; 138
    1730:	91 e0       	ldi	r25, 0x01	; 1
    1732:	53 2f       	mov	r21, r19
    1734:	0e 94 f8 33 	call	0x67f0	; 0x67f0 <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	85 5f       	subi	r24, 0xF5	; 245
    173c:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    1740:	70 90 41 01 	lds	r7, 0x0141
    1744:	8f e1       	ldi	r24, 0x1F	; 31
    1746:	78 22       	and	r7, r24
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    1748:	87 2d       	mov	r24, r7
    174a:	81 50       	subi	r24, 0x01	; 1
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    174c:	82 30       	cpi	r24, 0x02	; 2
    174e:	c0 f3       	brcs	.-16     	; 0x1740 <rf_tx_packet_repeat+0xc6>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    1750:	87 2d       	mov	r24, r7
    1752:	81 31       	cpi	r24, 0x11	; 17
    1754:	a9 f3       	breq	.-22     	; 0x1740 <rf_tx_packet_repeat+0xc6>
    1756:	82 31       	cpi	r24, 0x12	; 18
    1758:	99 f3       	breq	.-26     	; 0x1740 <rf_tx_packet_repeat+0xc6>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    175a:	8f 31       	cpi	r24, 0x1F	; 31
    175c:	89 f3       	breq	.-30     	; 0x1740 <rf_tx_packet_repeat+0xc6>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    175e:	88 30       	cpi	r24, 0x08	; 8
    1760:	39 f0       	breq	.+14     	; 0x1770 <rf_tx_packet_repeat+0xf6>
    1762:	86 30       	cpi	r24, 0x06	; 6
    1764:	29 f0       	breq	.+10     	; 0x1770 <rf_tx_packet_repeat+0xf6>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
    1766:	86 31       	cpi	r24, 0x16	; 22
    1768:	19 f0       	breq	.+6      	; 0x1770 <rf_tx_packet_repeat+0xf6>
    176a:	89 30       	cpi	r24, 0x09	; 9
    176c:	09 f0       	breq	.+2      	; 0x1770 <rf_tx_packet_repeat+0xf6>
    176e:	ab c0       	rjmp	.+342    	; 0x18c6 <rf_tx_packet_repeat+0x24c>
		return NRK_ERROR;
	}

	rf_cmd(RX_AACK_ON);
    1770:	86 e1       	ldi	r24, 0x16	; 22
    1772:	0e 94 2c 0a 	call	0x1458	; 0x1458 <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
    1776:	8d 81       	ldd	r24, Y+5	; 0x05
    1778:	88 23       	and	r24, r24
    177a:	69 f0       	breq	.+26     	; 0x1796 <rf_tx_packet_repeat+0x11c>
		PHY_CC_CCA |= (1 << CCA_REQUEST);
    177c:	80 91 48 01 	lds	r24, 0x0148
    1780:	80 68       	ori	r24, 0x80	; 128
    1782:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
    1786:	80 91 41 01 	lds	r24, 0x0141
    178a:	87 ff       	sbrs	r24, 7
    178c:	fc cf       	rjmp	.-8      	; 0x1786 <rf_tx_packet_repeat+0x10c>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
    178e:	80 91 41 01 	lds	r24, 0x0141
    1792:	86 ff       	sbrs	r24, 6
    1794:	98 c0       	rjmp	.+304    	; 0x18c6 <rf_tx_packet_repeat+0x24c>
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
    1796:	89 e0       	ldi	r24, 0x09	; 9
    1798:	0e 94 2c 0a 	call	0x1458	; 0x1458 <rf_cmd>
	if(pRTI->ackRequest)
    179c:	8e 81       	ldd	r24, Y+6	; 0x06
    179e:	88 23       	and	r24, r24
    17a0:	19 f0       	breq	.+6      	; 0x17a8 <rf_tx_packet_repeat+0x12e>
		rf_cmd(TX_ARET_ON);
    17a2:	89 e1       	ldi	r24, 0x19	; 25
    17a4:	0e 94 2c 0a 	call	0x1458	; 0x1458 <rf_cmd>
	
	if(ms != 0){
    17a8:	21 14       	cp	r2, r1
    17aa:	31 04       	cpc	r3, r1
    17ac:	a9 f1       	breq	.+106    	; 0x1818 <rf_tx_packet_repeat+0x19e>
		nrk_time_get(&curr_t);
    17ae:	87 ec       	ldi	r24, 0xC7	; 199
    17b0:	96 e0       	ldi	r25, 0x06	; 6
    17b2:	0e 94 33 20 	call	0x4066	; 0x4066 <nrk_time_get>
		target_t.secs = curr_t.secs;
    17b6:	80 91 c7 06 	lds	r24, 0x06C7
    17ba:	90 91 c8 06 	lds	r25, 0x06C8
    17be:	a0 91 c9 06 	lds	r26, 0x06C9
    17c2:	b0 91 ca 06 	lds	r27, 0x06CA
    17c6:	80 93 e1 06 	sts	0x06E1, r24
    17ca:	90 93 e2 06 	sts	0x06E2, r25
    17ce:	a0 93 e3 06 	sts	0x06E3, r26
    17d2:	b0 93 e4 06 	sts	0x06E4, r27
		target_t.nano_secs = curr_t.nano_secs + (ms * NANOS_PER_MS);
    17d6:	b1 01       	movw	r22, r2
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	20 e4       	ldi	r18, 0x40	; 64
    17de:	32 e4       	ldi	r19, 0x42	; 66
    17e0:	4f e0       	ldi	r20, 0x0F	; 15
    17e2:	50 e0       	ldi	r21, 0x00	; 0
    17e4:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__mulsi3>
    17e8:	20 91 cb 06 	lds	r18, 0x06CB
    17ec:	30 91 cc 06 	lds	r19, 0x06CC
    17f0:	40 91 cd 06 	lds	r20, 0x06CD
    17f4:	50 91 ce 06 	lds	r21, 0x06CE
    17f8:	62 0f       	add	r22, r18
    17fa:	73 1f       	adc	r23, r19
    17fc:	84 1f       	adc	r24, r20
    17fe:	95 1f       	adc	r25, r21
    1800:	60 93 e5 06 	sts	0x06E5, r22
    1804:	70 93 e6 06 	sts	0x06E6, r23
    1808:	80 93 e7 06 	sts	0x06E7, r24
    180c:	90 93 e8 06 	sts	0x06E8, r25
		nrk_time_compact_nanos(&target_t);
    1810:	81 ee       	ldi	r24, 0xE1	; 225
    1812:	96 e0       	ldi	r25, 0x06	; 6
    1814:	0e 94 20 21 	call	0x4240	; 0x4240 <nrk_time_compact_nanos>
	do{
#ifdef RADIO_CC2591
		rf_cc2591_tx_on();
#endif

		tx_done = 0;
    1818:	10 92 cf 06 	sts	0x06CF, r1
		/* Send the packet. 0x2 is equivalent to TX_START */
		rf_cmd(0x2);
    181c:	82 e0       	ldi	r24, 0x02	; 2
    181e:	0e 94 2c 0a 	call	0x1458	; 0x1458 <rf_cmd>

		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
    1822:	44 24       	eor	r4, r4
    1824:	55 24       	eor	r5, r5
    1826:	08 c0       	rjmp	.+16     	; 0x1838 <rf_tx_packet_repeat+0x1be>
    1828:	08 94       	sec
    182a:	41 1c       	adc	r4, r1
    182c:	51 1c       	adc	r5, r1
    182e:	88 ee       	ldi	r24, 0xE8	; 232
    1830:	48 16       	cp	r4, r24
    1832:	8d ef       	ldi	r24, 0xFD	; 253
    1834:	58 06       	cpc	r5, r24
    1836:	21 f0       	breq	.+8      	; 0x1840 <rf_tx_packet_repeat+0x1c6>
    1838:	80 91 cf 06 	lds	r24, 0x06CF
    183c:	88 23       	and	r24, r24
    183e:	a1 f3       	breq	.-24     	; 0x1828 <rf_tx_packet_repeat+0x1ae>
			continue;
		if(ms == 0)
    1840:	21 14       	cp	r2, r1
    1842:	31 04       	cpc	r3, r1
    1844:	59 f1       	breq	.+86     	; 0x189c <rf_tx_packet_repeat+0x222>
			break;
		nrk_time_get(&curr_t);
    1846:	87 ec       	ldi	r24, 0xC7	; 199
    1848:	96 e0       	ldi	r25, 0x06	; 6
    184a:	0e 94 33 20 	call	0x4066	; 0x4066 <nrk_time_get>
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);
    184e:	80 e0       	ldi	r24, 0x00	; 0
    1850:	97 e0       	ldi	r25, 0x07	; 7
    1852:	00 91 e1 06 	lds	r16, 0x06E1
    1856:	10 91 e2 06 	lds	r17, 0x06E2
    185a:	20 91 e3 06 	lds	r18, 0x06E3
    185e:	30 91 e4 06 	lds	r19, 0x06E4
    1862:	40 91 e5 06 	lds	r20, 0x06E5
    1866:	50 91 e6 06 	lds	r21, 0x06E6
    186a:	60 91 e7 06 	lds	r22, 0x06E7
    186e:	70 91 e8 06 	lds	r23, 0x06E8
    1872:	80 90 c7 06 	lds	r8, 0x06C7
    1876:	90 90 c8 06 	lds	r9, 0x06C8
    187a:	a0 90 c9 06 	lds	r10, 0x06C9
    187e:	b0 90 ca 06 	lds	r11, 0x06CA
    1882:	c0 90 cb 06 	lds	r12, 0x06CB
    1886:	d0 90 cc 06 	lds	r13, 0x06CC
    188a:	e0 90 cd 06 	lds	r14, 0x06CD
    188e:	f0 90 ce 06 	lds	r15, 0x06CE
    1892:	0e 94 91 20 	call	0x4122	; 0x4122 <nrk_time_sub>
    1896:	8f 3f       	cpi	r24, 0xFF	; 255
    1898:	09 f0       	breq	.+2      	; 0x189c <rf_tx_packet_repeat+0x222>
    189a:	be cf       	rjmp	.-132    	; 0x1818 <rf_tx_packet_repeat+0x19e>

	trx_error = ((pRTI->ackRequest && 
    189c:	8e 81       	ldd	r24, Y+6	; 0x06
    189e:	88 23       	and	r24, r24
    18a0:	31 f0       	breq	.+12     	; 0x18ae <rf_tx_packet_repeat+0x234>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
    18a2:	80 91 42 01 	lds	r24, 0x0142
    18a6:	82 95       	swap	r24
    18a8:	86 95       	lsr	r24
    18aa:	87 70       	andi	r24, 0x07	; 7
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    18ac:	29 f4       	brne	.+10     	; 0x18b8 <rf_tx_packet_repeat+0x23e>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
    18ae:	88 ee       	ldi	r24, 0xE8	; 232
    18b0:	48 16       	cp	r4, r24
    18b2:	8d ef       	ldi	r24, 0xFD	; 253
    18b4:	58 06       	cpc	r5, r24
    18b6:	11 f4       	brne	.+4      	; 0x18bc <rf_tx_packet_repeat+0x242>
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    18b8:	1f ef       	ldi	r17, 0xFF	; 255
    18ba:	01 c0       	rjmp	.+2      	; 0x18be <rf_tx_packet_repeat+0x244>
    18bc:	11 e0       	ldi	r17, 0x01	; 1
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
    18be:	87 2d       	mov	r24, r7
    18c0:	0e 94 2c 0a 	call	0x1458	; 0x1458 <rf_cmd>

#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
    18c4:	01 c0       	rjmp	.+2      	; 0x18c8 <rf_tx_packet_repeat+0x24e>
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
		while(!(TRX_STATUS & (1 << CCA_DONE)))
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
    18c6:	1f ef       	ldi	r17, 0xFF	; 255
#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
}
    18c8:	81 2f       	mov	r24, r17
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	1f 91       	pop	r17
    18d0:	0f 91       	pop	r16
    18d2:	ff 90       	pop	r15
    18d4:	ef 90       	pop	r14
    18d6:	df 90       	pop	r13
    18d8:	cf 90       	pop	r12
    18da:	bf 90       	pop	r11
    18dc:	af 90       	pop	r10
    18de:	9f 90       	pop	r9
    18e0:	8f 90       	pop	r8
    18e2:	7f 90       	pop	r7
    18e4:	5f 90       	pop	r5
    18e6:	4f 90       	pop	r4
    18e8:	3f 90       	pop	r3
    18ea:	2f 90       	pop	r2
    18ec:	08 95       	ret

000018ee <rf_tx_packet>:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------

uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
    18ee:	60 e0       	ldi	r22, 0x00	; 0
    18f0:	70 e0       	ldi	r23, 0x00	; 0
    18f2:	0e 94 3d 0b 	call	0x167a	; 0x167a <rf_tx_packet_repeat>
}
    18f6:	08 95       	ret

000018f8 <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
    18f8:	0f 93       	push	r16
    18fa:	1f 93       	push	r17
	uint8_t trx_status, cca_value;

	if(!rf_ready)
    18fc:	80 91 e0 06 	lds	r24, 0x06E0
    1900:	88 23       	and	r24, r24
    1902:	49 f1       	breq	.+82     	; 0x1956 <rf_cca_check+0x5e>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    1904:	10 91 41 01 	lds	r17, 0x0141
    1908:	1f 71       	andi	r17, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    190a:	81 2f       	mov	r24, r17
    190c:	81 50       	subi	r24, 0x01	; 1
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    190e:	82 30       	cpi	r24, 0x02	; 2
    1910:	c8 f3       	brcs	.-14     	; 0x1904 <rf_cca_check+0xc>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    1912:	11 31       	cpi	r17, 0x11	; 17
    1914:	b9 f3       	breq	.-18     	; 0x1904 <rf_cca_check+0xc>
    1916:	12 31       	cpi	r17, 0x12	; 18
    1918:	a9 f3       	breq	.-22     	; 0x1904 <rf_cca_check+0xc>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    191a:	1f 31       	cpi	r17, 0x1F	; 31
    191c:	99 f3       	breq	.-26     	; 0x1904 <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    191e:	18 30       	cpi	r17, 0x08	; 8
    1920:	21 f0       	breq	.+8      	; 0x192a <rf_cca_check+0x32>
    1922:	16 30       	cpi	r17, 0x06	; 6
    1924:	11 f0       	breq	.+4      	; 0x192a <rf_cca_check+0x32>
			&& (trx_status != RX_AACK_ON))
    1926:	16 31       	cpi	r17, 0x16	; 22
    1928:	b1 f4       	brne	.+44     	; 0x1956 <rf_cca_check+0x5e>
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
    192a:	86 e1       	ldi	r24, 0x16	; 22
    192c:	0e 94 2c 0a 	call	0x1458	; 0x1458 <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
    1930:	80 91 48 01 	lds	r24, 0x0148
    1934:	80 68       	ori	r24, 0x80	; 128
    1936:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
    193a:	80 91 41 01 	lds	r24, 0x0141
    193e:	87 ff       	sbrs	r24, 7
    1940:	fc cf       	rjmp	.-8      	; 0x193a <rf_cca_check+0x42>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    1942:	00 91 41 01 	lds	r16, 0x0141
	rf_cmd(trx_status);
    1946:	81 2f       	mov	r24, r17
    1948:	0e 94 2c 0a 	call	0x1458	; 0x1458 <rf_cmd>

	return cca_value;
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	06 fd       	sbrc	r16, 6
    1950:	03 c0       	rjmp	.+6      	; 0x1958 <rf_cca_check+0x60>
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	01 c0       	rjmp	.+2      	; 0x1958 <rf_cca_check+0x60>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
    1956:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	08 95       	ret

0000195e <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
    195e:	80 91 e0 06 	lds	r24, 0x06E0
    1962:	88 23       	and	r24, r24
    1964:	09 f4       	brne	.+2      	; 0x1968 <rf_rx_packet_nonblock+0xa>
    1966:	a2 c0       	rjmp	.+324    	; 0x1aac <rf_rx_packet_nonblock+0x14e>
		return NRK_ERROR;

	if(!rx_ready)
    1968:	80 91 ff 06 	lds	r24, 0x06FF
    196c:	88 23       	and	r24, r24
    196e:	09 f4       	brne	.+2      	; 0x1972 <rf_rx_packet_nonblock+0x14>
    1970:	9f c0       	rjmp	.+318    	; 0x1ab0 <rf_rx_packet_nonblock+0x152>
		return 0;
	else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
    1972:	80 91 7b 01 	lds	r24, 0x017B
    1976:	e0 91 be 06 	lds	r30, 0x06BE
    197a:	f0 91 bf 06 	lds	r31, 0x06BF
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	02 97       	sbiw	r24, 0x02	; 2
    1982:	24 81       	ldd	r18, Z+4	; 0x04
    1984:	33 27       	eor	r19, r19
    1986:	27 fd       	sbrc	r18, 7
    1988:	30 95       	com	r19
    198a:	28 17       	cp	r18, r24
    198c:	39 07       	cpc	r19, r25
    198e:	0c f4       	brge	.+2      	; 0x1992 <rf_rx_packet_nonblock+0x34>
    1990:	91 c0       	rjmp	.+290    	; 0x1ab4 <rf_rx_packet_nonblock+0x156>
		return NRK_ERROR;

	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
    1992:	e0 91 be 06 	lds	r30, 0x06BE
    1996:	f0 91 bf 06 	lds	r31, 0x06BF
    199a:	80 91 82 01 	lds	r24, 0x0182
    199e:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
    19a0:	e0 91 be 06 	lds	r30, 0x06BE
    19a4:	f0 91 bf 06 	lds	r31, 0x06BF
    19a8:	80 91 87 01 	lds	r24, 0x0187
    19ac:	90 91 88 01 	lds	r25, 0x0188
    19b0:	92 83       	std	Z+2, r25	; 0x02
    19b2:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
    19b4:	e0 91 be 06 	lds	r30, 0x06BE
    19b8:	f0 91 bf 06 	lds	r31, 0x06BF
    19bc:	80 91 7b 01 	lds	r24, 0x017B
    19c0:	8b 50       	subi	r24, 0x0B	; 11
    19c2:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
    19c4:	a0 91 be 06 	lds	r26, 0x06BE
    19c8:	b0 91 bf 06 	lds	r27, 0x06BF
    19cc:	e0 91 be 06 	lds	r30, 0x06BE
    19d0:	f0 91 bf 06 	lds	r31, 0x06BF
    19d4:	13 96       	adiw	r26, 0x03	; 3
    19d6:	9c 91       	ld	r25, X
    19d8:	13 97       	sbiw	r26, 0x03	; 3
    19da:	84 81       	ldd	r24, Z+4	; 0x04
    19dc:	89 17       	cp	r24, r25
    19de:	3c f0       	brlt	.+14     	; 0x19ee <rf_rx_packet_nonblock+0x90>
			|| (rfSettings.pRxInfo->length < 0)){
    19e0:	e0 91 be 06 	lds	r30, 0x06BE
    19e4:	f0 91 bf 06 	lds	r31, 0x06BF
    19e8:	83 81       	ldd	r24, Z+3	; 0x03
    19ea:	87 ff       	sbrs	r24, 7
    19ec:	0d c0       	rjmp	.+26     	; 0x1a08 <rf_rx_packet_nonblock+0xaa>
		rx_ready = 0;
    19ee:	10 92 ff 06 	sts	0x06FF, r1
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    19f2:	80 91 4c 01 	lds	r24, 0x014C
    19f6:	8f 77       	andi	r24, 0x7F	; 127
    19f8:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    19fc:	80 91 4c 01 	lds	r24, 0x014C
    1a00:	80 68       	ori	r24, 0x80	; 128
    1a02:	80 93 4c 01 	sts	0x014C, r24
    1a06:	52 c0       	rjmp	.+164    	; 0x1aac <rf_rx_packet_nonblock+0x14e>
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
    1a08:	e0 91 be 06 	lds	r30, 0x06BE
    1a0c:	f0 91 bf 06 	lds	r31, 0x06BF
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
    1a10:	a0 91 be 06 	lds	r26, 0x06BE
    1a14:	b0 91 bf 06 	lds	r27, 0x06BF
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
    1a18:	13 96       	adiw	r26, 0x03	; 3
    1a1a:	4c 91       	ld	r20, X
    1a1c:	24 2f       	mov	r18, r20
    1a1e:	33 27       	eor	r19, r19
    1a20:	27 fd       	sbrc	r18, 7
    1a22:	30 95       	com	r19
    1a24:	85 81       	ldd	r24, Z+5	; 0x05
    1a26:	96 81       	ldd	r25, Z+6	; 0x06
    1a28:	69 e8       	ldi	r22, 0x89	; 137
    1a2a:	71 e0       	ldi	r23, 0x01	; 1
    1a2c:	53 2f       	mov	r21, r19
    1a2e:	0e 94 f8 33 	call	0x67f0	; 0x67f0 <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
	
	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
    1a32:	e0 91 be 06 	lds	r30, 0x06BE
    1a36:	f0 91 bf 06 	lds	r31, 0x06BF
    1a3a:	80 91 80 01 	lds	r24, 0x0180
    1a3e:	82 95       	swap	r24
    1a40:	86 95       	lsr	r24
    1a42:	81 70       	andi	r24, 0x01	; 1
    1a44:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
    1a46:	e0 91 be 06 	lds	r30, 0x06BE
    1a4a:	f0 91 bf 06 	lds	r31, 0x06BF
    1a4e:	80 91 47 01 	lds	r24, 0x0147
    1a52:	80 87       	std	Z+8, r24	; 0x08
	rfSettings.pRxInfo->actualRssi = PHY_RSSI >> 3;
    1a54:	e0 91 be 06 	lds	r30, 0x06BE
    1a58:	f0 91 bf 06 	lds	r31, 0x06BF
    1a5c:	80 91 46 01 	lds	r24, 0x0146
    1a60:	86 95       	lsr	r24
    1a62:	86 95       	lsr	r24
    1a64:	86 95       	lsr	r24
    1a66:	81 87       	std	Z+9, r24	; 0x09
	rfSettings.pRxInfo->energyDetectionLevel = PHY_ED_LEVEL;
    1a68:	e0 91 be 06 	lds	r30, 0x06BE
    1a6c:	f0 91 bf 06 	lds	r31, 0x06BF
    1a70:	80 91 47 01 	lds	r24, 0x0147
    1a74:	82 87       	std	Z+10, r24	; 0x0a
	rfSettings.pRxInfo->linkQualityIndication = *(frame_start + TST_RX_LENGTH);
    1a76:	a0 91 be 06 	lds	r26, 0x06BE
    1a7a:	b0 91 bf 06 	lds	r27, 0x06BF
    1a7e:	e0 91 7b 01 	lds	r30, 0x017B
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	e0 58       	subi	r30, 0x80	; 128
    1a86:	fe 4f       	sbci	r31, 0xFE	; 254
    1a88:	80 81       	ld	r24, Z
    1a8a:	1b 96       	adiw	r26, 0x0b	; 11
    1a8c:	8c 93       	st	X, r24
    1a8e:	1b 97       	sbiw	r26, 0x0b	; 11

	/* Reset frame buffer protection */
	rx_ready = 0;
    1a90:	10 92 ff 06 	sts	0x06FF, r1
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    1a94:	80 91 4c 01 	lds	r24, 0x014C
    1a98:	8f 77       	andi	r24, 0x7F	; 127
    1a9a:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    1a9e:	80 91 4c 01 	lds	r24, 0x014C
    1aa2:	80 68       	ori	r24, 0x80	; 128
    1aa4:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	08 95       	ret
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
		return NRK_ERROR;
    1aac:	8f ef       	ldi	r24, 0xFF	; 255
    1aae:	08 95       	ret

	if(!rx_ready)
		return 0;
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	08 95       	ret
	else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
		return NRK_ERROR;
    1ab4:	8f ef       	ldi	r24, 0xFF	; 255
	rx_ready = 0;
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);

	return NRK_OK;
}
    1ab6:	08 95       	ret

00001ab8 <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
    1ab8:	1f 92       	push	r1
    1aba:	0f 92       	push	r0
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	0f 92       	push	r0
    1ac0:	11 24       	eor	r1, r1
    1ac2:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
    1ac4:	80 e8       	ldi	r24, 0x80	; 128
    1ac6:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1aca:	8f 91       	pop	r24
    1acc:	0f 90       	pop	r0
    1ace:	0f be       	out	0x3f, r0	; 63
    1ad0:	0f 90       	pop	r0
    1ad2:	1f 90       	pop	r1
    1ad4:	18 95       	reti

00001ad6 <__vector_63>:

SIGNAL(TRX24_TX_END_vect)
{
    1ad6:	1f 92       	push	r1
    1ad8:	0f 92       	push	r0
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	0f 92       	push	r0
    1ade:	11 24       	eor	r1, r1
    1ae0:	8f 93       	push	r24
	vprintf("TX_END IRQ!\r\n");
	tx_done = 1;
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	80 93 cf 06 	sts	0x06CF, r24
	IRQ_STATUS = (1 << TX_END);
    1ae8:	80 e4       	ldi	r24, 0x40	; 64
    1aea:	80 93 4f 01 	sts	0x014F, r24
#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	return;
}
    1aee:	8f 91       	pop	r24
    1af0:	0f 90       	pop	r0
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	0f 90       	pop	r0
    1af6:	1f 90       	pop	r1
    1af8:	18 95       	reti

00001afa <__vector_62>:

SIGNAL(TRX24_XAH_AMI_vect)
{
    1afa:	1f 92       	push	r1
    1afc:	0f 92       	push	r0
    1afe:	0f b6       	in	r0, 0x3f	; 63
    1b00:	0f 92       	push	r0
    1b02:	11 24       	eor	r1, r1
    1b04:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
    1b06:	80 e2       	ldi	r24, 0x20	; 32
    1b08:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1b0c:	8f 91       	pop	r24
    1b0e:	0f 90       	pop	r0
    1b10:	0f be       	out	0x3f, r0	; 63
    1b12:	0f 90       	pop	r0
    1b14:	1f 90       	pop	r1
    1b16:	18 95       	reti

00001b18 <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
    1b18:	1f 92       	push	r1
    1b1a:	0f 92       	push	r0
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	0f 92       	push	r0
    1b20:	11 24       	eor	r1, r1
    1b22:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
    1b24:	80 e1       	ldi	r24, 0x10	; 16
    1b26:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1b2a:	8f 91       	pop	r24
    1b2c:	0f 90       	pop	r0
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	0f 90       	pop	r0
    1b32:	1f 90       	pop	r1
    1b34:	18 95       	reti

00001b36 <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
    1b36:	1f 92       	push	r1
    1b38:	0f 92       	push	r0
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	0f 92       	push	r0
    1b3e:	0b b6       	in	r0, 0x3b	; 59
    1b40:	0f 92       	push	r0
    1b42:	11 24       	eor	r1, r1
    1b44:	2f 93       	push	r18
    1b46:	3f 93       	push	r19
    1b48:	4f 93       	push	r20
    1b4a:	5f 93       	push	r21
    1b4c:	6f 93       	push	r22
    1b4e:	7f 93       	push	r23
    1b50:	8f 93       	push	r24
    1b52:	9f 93       	push	r25
    1b54:	af 93       	push	r26
    1b56:	bf 93       	push	r27
    1b58:	ef 93       	push	r30
    1b5a:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
    1b5c:	84 e0       	ldi	r24, 0x04	; 4
    1b5e:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
    1b62:	e0 91 36 05 	lds	r30, 0x0536
    1b66:	f0 91 37 05 	lds	r31, 0x0537
    1b6a:	30 97       	sbiw	r30, 0x00	; 0
    1b6c:	09 f0       	breq	.+2      	; 0x1b70 <__vector_59+0x3a>
		rx_start_func();
    1b6e:	09 95       	icall

	return;
}
    1b70:	ff 91       	pop	r31
    1b72:	ef 91       	pop	r30
    1b74:	bf 91       	pop	r27
    1b76:	af 91       	pop	r26
    1b78:	9f 91       	pop	r25
    1b7a:	8f 91       	pop	r24
    1b7c:	7f 91       	pop	r23
    1b7e:	6f 91       	pop	r22
    1b80:	5f 91       	pop	r21
    1b82:	4f 91       	pop	r20
    1b84:	3f 91       	pop	r19
    1b86:	2f 91       	pop	r18
    1b88:	0f 90       	pop	r0
    1b8a:	0b be       	out	0x3b, r0	; 59
    1b8c:	0f 90       	pop	r0
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	0f 90       	pop	r0
    1b92:	1f 90       	pop	r1
    1b94:	18 95       	reti

00001b96 <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
    1b96:	1f 92       	push	r1
    1b98:	0f 92       	push	r0
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	0f 92       	push	r0
    1b9e:	11 24       	eor	r1, r1
    1ba0:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
    1ba2:	82 e0       	ldi	r24, 0x02	; 2
    1ba4:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1ba8:	8f 91       	pop	r24
    1baa:	0f 90       	pop	r0
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	0f 90       	pop	r0
    1bb0:	1f 90       	pop	r1
    1bb2:	18 95       	reti

00001bb4 <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
    1bb4:	1f 92       	push	r1
    1bb6:	0f 92       	push	r0
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	0f 92       	push	r0
    1bbc:	11 24       	eor	r1, r1
    1bbe:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1bc6:	8f 91       	pop	r24
    1bc8:	0f 90       	pop	r0
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	0f 90       	pop	r0
    1bce:	1f 90       	pop	r1
    1bd0:	18 95       	reti

00001bd2 <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
    1bd2:	e9 e4       	ldi	r30, 0x49	; 73
    1bd4:	f1 e0       	ldi	r31, 0x01	; 1
    1bd6:	90 81       	ld	r25, Z
    1bd8:	90 7f       	andi	r25, 0xF0	; 240
    1bda:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
    1bdc:	90 81       	ld	r25, Z
    1bde:	8f 70       	andi	r24, 0x0F	; 15
    1be0:	89 2b       	or	r24, r25
    1be2:	80 83       	st	Z, r24
	return;
}
    1be4:	08 95       	ret

00001be6 <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
    1be6:	8f ef       	ldi	r24, 0xFF	; 255
    1be8:	08 95       	ret

00001bea <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
	return;
}
    1bea:	08 95       	ret

00001bec <rf_security_set_key>:


void rf_security_set_key(uint8_t *key)
{
	return;
}
    1bec:	08 95       	ret

00001bee <rf_security_disable>:


void rf_security_disable()
{
	return;
}
    1bee:	08 95       	ret

00001bf0 <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
    1bf0:	8f ef       	ldi	r24, 0xFF	; 255
    1bf2:	08 95       	ret

00001bf4 <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    1bf4:	80 91 b9 06 	lds	r24, 0x06B9
    1bf8:	90 91 ba 06 	lds	r25, 0x06BA
    1bfc:	08 95       	ret

00001bfe <rf_rx_packet>:
	/*
	int8_t tmp;
	if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
	*/
	return 0;
}
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	08 95       	ret

00001c02 <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
}
    1c02:	08 95       	ret

00001c04 <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	08 95       	ret

00001c08 <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	08 95       	ret

00001c0c <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	08 95       	ret

00001c10 <rf_carrier_on>:
     
#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
}
    1c10:	08 95       	ret

00001c12 <rf_carrier_off>:
     
#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
}
    1c12:	08 95       	ret

00001c14 <rf_test_mode>:

#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
}
    1c14:	08 95       	ret

00001c16 <rf_data_mode>:

#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
}
    1c16:	08 95       	ret

00001c18 <rf_rx_set_serial>:
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
}
    1c18:	08 95       	ret

00001c1a <rf_tx_set_serial>:
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
}
    1c1a:	08 95       	ret

00001c1c <rf_set_preamble_length>:
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
}
    1c1c:	08 95       	ret

00001c1e <rf_set_cca_mode>:


void rf_set_cca_mode(uint8_t mode)
{
}
    1c1e:	08 95       	ret

00001c20 <rf_cc2591_tx_on>:


void rf_cc2591_tx_on()
{
	DPDS1	|= 0x3; 
    1c20:	e7 e3       	ldi	r30, 0x37	; 55
    1c22:	f1 e0       	ldi	r31, 0x01	; 1
    1c24:	80 81       	ld	r24, Z
    1c26:	83 60       	ori	r24, 0x03	; 3
    1c28:	80 83       	st	Z, r24
	DDRG	|= 0x1;
    1c2a:	98 9a       	sbi	0x13, 0	; 19
	PORTG	|= 0x1;
    1c2c:	a0 9a       	sbi	0x14, 0	; 20
	DDRE	|= 0xE0;
    1c2e:	8d b1       	in	r24, 0x0d	; 13
    1c30:	80 6e       	ori	r24, 0xE0	; 224
    1c32:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
    1c34:	8e b1       	in	r24, 0x0e	; 14
    1c36:	80 6e       	ori	r24, 0xE0	; 224
    1c38:	8e b9       	out	0x0e, r24	; 14

    //nrk_spin_wait_us(12);
}
    1c3a:	08 95       	ret

00001c3c <rf_cc2591_rx_on>:

void rf_cc2591_rx_on()
{
	DPDS1	|= 0x3; 
    1c3c:	e7 e3       	ldi	r30, 0x37	; 55
    1c3e:	f1 e0       	ldi	r31, 0x01	; 1
    1c40:	80 81       	ld	r24, Z
    1c42:	83 60       	ori	r24, 0x03	; 3
    1c44:	80 83       	st	Z, r24
	DDRG	|= 0x1;
    1c46:	98 9a       	sbi	0x13, 0	; 19
	PORTG	&= ~(0x1);
    1c48:	a0 98       	cbi	0x14, 0	; 20
	DDRE	|= 0xE0;
    1c4a:	8d b1       	in	r24, 0x0d	; 13
    1c4c:	80 6e       	ori	r24, 0xE0	; 224
    1c4e:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
    1c50:	8e b1       	in	r24, 0x0e	; 14
    1c52:	80 6e       	ori	r24, 0xE0	; 224
    1c54:	8e b9       	out	0x0e, r24	; 14

    //nrk_spin_wait_us(12);
}
    1c56:	08 95       	ret

00001c58 <rf_glossy_interrupt>:
	curr_count = 0;
}
#endif

void rf_glossy_interrupt()
{
    1c58:	cf 92       	push	r12
    1c5a:	df 92       	push	r13
    1c5c:	ef 92       	push	r14
    1c5e:	ff 92       	push	r15
    1c60:	0f 93       	push	r16
    1c62:	1f 93       	push	r17
    1c64:	df 93       	push	r29
    1c66:	cf 93       	push	r28
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
    1c6c:	27 97       	sbiw	r28, 0x07	; 7
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	f8 94       	cli
    1c72:	de bf       	out	0x3e, r29	; 62
    1c74:	0f be       	out	0x3f, r0	; 63
    1c76:	cd bf       	out	0x3d, r28	; 61
	nrk_int_disable();
    1c78:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <nrk_int_disable>

	RF_RX_INFO rfRxInfo = *(rfSettings.pRxInfo);
    1c7c:	e0 91 be 06 	lds	r30, 0x06BE
    1c80:	f0 91 bf 06 	lds	r31, 0x06BF
    1c84:	c0 80       	ld	r12, Z
    1c86:	e3 80       	ldd	r14, Z+3	; 0x03
    1c88:	05 81       	ldd	r16, Z+5	; 0x05
    1c8a:	16 81       	ldd	r17, Z+6	; 0x06
    1c8c:	d0 84       	ldd	r13, Z+8	; 0x08
	RF_TX_INFO rfTxInfo;

	/* Grab packet */
	int err = rf_rx_packet_nonblock();
    1c8e:	0e 94 af 0c 	call	0x195e	; 0x195e <rf_rx_packet_nonblock>
	if (err < 1) {
    1c92:	18 16       	cp	r1, r24
    1c94:	1c f0       	brlt	.+6      	; 0x1c9c <rf_glossy_interrupt+0x44>
		printf("rf_rx_packet_nonblock failed]\r\n");
    1c96:	8a e0       	ldi	r24, 0x0A	; 10
    1c98:	93 e0       	ldi	r25, 0x03	; 3
    1c9a:	06 c0       	rjmp	.+12     	; 0x1ca8 <rf_glossy_interrupt+0x50>
		nrk_int_enable();
		return;
	}

	/* TTL should be the first byte of the payload */
	uint8_t ttl = rfRxInfo.pPayload[0];
    1c9c:	d8 01       	movw	r26, r16
    1c9e:	fc 90       	ld	r15, X
	if (ttl == 0) {
    1ca0:	ff 20       	and	r15, r15
    1ca2:	39 f4       	brne	.+14     	; 0x1cb2 <rf_glossy_interrupt+0x5a>
#ifndef GLOSSY_TESTING
		printf("Packet is done bouncing around!\r\n\n");
    1ca4:	89 e2       	ldi	r24, 0x29	; 41
    1ca6:	93 e0       	ldi	r25, 0x03	; 3
    1ca8:	0e 94 91 34 	call	0x6922	; 0x6922 <puts>
#endif
		nrk_int_enable();
    1cac:	0e 94 db 14 	call	0x29b6	; 0x29b6 <nrk_int_enable>
		return;
    1cb0:	42 c0       	rjmp	.+132    	; 0x1d36 <rf_glossy_interrupt+0xde>
	} else if (ttl == 5) {
    1cb2:	bf 2d       	mov	r27, r15
    1cb4:	b5 30       	cpi	r27, 0x05	; 5
    1cb6:	21 f4       	brne	.+8      	; 0x1cc0 <rf_glossy_interrupt+0x68>
#ifndef GLOSSY_TESTING
		printf("\n");
    1cb8:	8a e0       	ldi	r24, 0x0A	; 10
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	0e 94 8a 34 	call	0x6914	; 0x6914 <putchar>

	/* Print packet information */
#ifndef GLOSSY_TESTING
	int8_t rssi = rfRxInfo.rssi;
	uint8_t snum = rfRxInfo.seqNumber;
	printf("SEQ:%4u\tTTL:%2d\tRSSI:%4d\tPayload: [%s]\r\n", 
    1cc0:	ed b7       	in	r30, 0x3d	; 61
    1cc2:	fe b7       	in	r31, 0x3e	; 62
    1cc4:	3a 97       	sbiw	r30, 0x0a	; 10
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	fe bf       	out	0x3e, r31	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	ed bf       	out	0x3d, r30	; 61
    1cd0:	31 96       	adiw	r30, 0x01	; 1
    1cd2:	2b e4       	ldi	r18, 0x4B	; 75
    1cd4:	33 e0       	ldi	r19, 0x03	; 3
    1cd6:	ad b7       	in	r26, 0x3d	; 61
    1cd8:	be b7       	in	r27, 0x3e	; 62
    1cda:	12 96       	adiw	r26, 0x02	; 2
    1cdc:	3c 93       	st	X, r19
    1cde:	2e 93       	st	-X, r18
    1ce0:	11 97       	sbiw	r26, 0x01	; 1
    1ce2:	c2 82       	std	Z+2, r12	; 0x02
    1ce4:	13 82       	std	Z+3, r1	; 0x03
    1ce6:	f4 82       	std	Z+4, r15	; 0x04
    1ce8:	15 82       	std	Z+5, r1	; 0x05
    1cea:	8d 2d       	mov	r24, r13
    1cec:	99 27       	eor	r25, r25
    1cee:	87 fd       	sbrc	r24, 7
    1cf0:	90 95       	com	r25
    1cf2:	97 83       	std	Z+7, r25	; 0x07
    1cf4:	86 83       	std	Z+6, r24	; 0x06
    1cf6:	c8 01       	movw	r24, r16
    1cf8:	01 96       	adiw	r24, 0x01	; 1
    1cfa:	91 87       	std	Z+9, r25	; 0x09
    1cfc:	80 87       	std	Z+8, r24	; 0x08
    1cfe:	0e 94 78 34 	call	0x68f0	; 0x68f0 <printf>
					snum, ttl, rssi, rfRxInfo.pPayload + 1);
#endif
	/* Copy pointer to payload and length */
	rfTxInfo.pPayload = rfRxInfo.pPayload;
    1d02:	1d 83       	std	Y+5, r17	; 0x05
    1d04:	0c 83       	std	Y+4, r16	; 0x04
	rfTxInfo.pPayload[0] = ttl - 1;
    1d06:	fa 94       	dec	r15
    1d08:	f8 01       	movw	r30, r16
    1d0a:	f0 82       	st	Z, r15
	rfTxInfo.length = rfRxInfo.length;
    1d0c:	eb 82       	std	Y+3, r14	; 0x03
	rfTxInfo.cca = 0;
    1d0e:	1e 82       	std	Y+6, r1	; 0x06
	rfTxInfo.ackRequest = 0;
    1d10:	1f 82       	std	Y+7, r1	; 0x07
	rfTxInfo.destAddr = 0xFFFF;
    1d12:	8f ef       	ldi	r24, 0xFF	; 255
    1d14:	9f ef       	ldi	r25, 0xFF	; 255
    1d16:	9a 83       	std	Y+2, r25	; 0x02
    1d18:	89 83       	std	Y+1, r24	; 0x01
		rf_tx_packet(&rfTxInfo);
	} else {
		nrk_int_enable();
	}
#else
	nrk_int_enable();
    1d1a:	8d b7       	in	r24, 0x3d	; 61
    1d1c:	9e b7       	in	r25, 0x3e	; 62
    1d1e:	0a 96       	adiw	r24, 0x0a	; 10
    1d20:	0f b6       	in	r0, 0x3f	; 63
    1d22:	f8 94       	cli
    1d24:	9e bf       	out	0x3e, r25	; 62
    1d26:	0f be       	out	0x3f, r0	; 63
    1d28:	8d bf       	out	0x3d, r24	; 61
    1d2a:	0e 94 db 14 	call	0x29b6	; 0x29b6 <nrk_int_enable>
	rf_tx_packet(&rfTxInfo);
    1d2e:	ce 01       	movw	r24, r28
    1d30:	01 96       	adiw	r24, 0x01	; 1
    1d32:	0e 94 77 0c 	call	0x18ee	; 0x18ee <rf_tx_packet>
#endif
	return;
}
    1d36:	27 96       	adiw	r28, 0x07	; 7
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	de bf       	out	0x3e, r29	; 62
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	cd bf       	out	0x3d, r28	; 61
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	1f 91       	pop	r17
    1d48:	0f 91       	pop	r16
    1d4a:	ff 90       	pop	r15
    1d4c:	ef 90       	pop	r14
    1d4e:	df 90       	pop	r13
    1d50:	cf 90       	pop	r12
    1d52:	08 95       	ret

00001d54 <__vector_60>:
	return NRK_OK;
}


SIGNAL(TRX24_RX_END_vect)
{	
    1d54:	1f 92       	push	r1
    1d56:	0f 92       	push	r0
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	0f 92       	push	r0
    1d5c:	0b b6       	in	r0, 0x3b	; 59
    1d5e:	0f 92       	push	r0
    1d60:	11 24       	eor	r1, r1
    1d62:	2f 93       	push	r18
    1d64:	3f 93       	push	r19
    1d66:	4f 93       	push	r20
    1d68:	5f 93       	push	r21
    1d6a:	6f 93       	push	r22
    1d6c:	7f 93       	push	r23
    1d6e:	8f 93       	push	r24
    1d70:	9f 93       	push	r25
    1d72:	af 93       	push	r26
    1d74:	bf 93       	push	r27
    1d76:	ef 93       	push	r30
    1d78:	ff 93       	push	r31
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	01 c0       	rjmp	.+2      	; 0x1d80 <__vector_60+0x2c>
    1d7e:	8f 5f       	subi	r24, 0xFF	; 255
    1d80:	90 91 7b 01 	lds	r25, 0x017B
    1d84:	89 17       	cp	r24, r25
    1d86:	d8 f3       	brcs	.-10     	; 0x1d7e <__vector_60+0x2a>
		if(((i+1) % 16) == 0)
			vprintf("\r\n");
	}
	vprintf("\r\n");

	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    1d88:	80 91 46 01 	lds	r24, 0x0146
    1d8c:	87 ff       	sbrs	r24, 7
    1d8e:	04 c0       	rjmp	.+8      	; 0x1d98 <__vector_60+0x44>
		rx_ready = 1;
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	80 93 ff 06 	sts	0x06FF, r24
    1d96:	04 c0       	rjmp	.+8      	; 0x1da0 <__vector_60+0x4c>
	} else {
		printf("RX end failed checksum!\r\n");
    1d98:	84 e7       	ldi	r24, 0x74	; 116
    1d9a:	93 e0       	ldi	r25, 0x03	; 3
    1d9c:	0e 94 91 34 	call	0x6922	; 0x6922 <puts>
	}
	IRQ_STATUS = (1 << RX_END);
    1da0:	88 e0       	ldi	r24, 0x08	; 8
    1da2:	80 93 4f 01 	sts	0x014F, r24
	
	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    1da6:	80 91 46 01 	lds	r24, 0x0146
    1daa:	87 ff       	sbrs	r24, 7
    1dac:	06 c0       	rjmp	.+12     	; 0x1dba <__vector_60+0x66>
		if (use_glossy) rf_glossy_interrupt();
    1dae:	80 91 bb 06 	lds	r24, 0x06BB
    1db2:	88 23       	and	r24, r24
    1db4:	11 f0       	breq	.+4      	; 0x1dba <__vector_60+0x66>
    1db6:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <rf_glossy_interrupt>
	}

	if(rx_end_func)
    1dba:	e0 91 38 05 	lds	r30, 0x0538
    1dbe:	f0 91 39 05 	lds	r31, 0x0539
    1dc2:	30 97       	sbiw	r30, 0x00	; 0
    1dc4:	09 f0       	breq	.+2      	; 0x1dc8 <__vector_60+0x74>
		rx_end_func();
    1dc6:	09 95       	icall

	return;
}
    1dc8:	ff 91       	pop	r31
    1dca:	ef 91       	pop	r30
    1dcc:	bf 91       	pop	r27
    1dce:	af 91       	pop	r26
    1dd0:	9f 91       	pop	r25
    1dd2:	8f 91       	pop	r24
    1dd4:	7f 91       	pop	r23
    1dd6:	6f 91       	pop	r22
    1dd8:	5f 91       	pop	r21
    1dda:	4f 91       	pop	r20
    1ddc:	3f 91       	pop	r19
    1dde:	2f 91       	pop	r18
    1de0:	0f 90       	pop	r0
    1de2:	0b be       	out	0x3b, r0	; 59
    1de4:	0f 90       	pop	r0
    1de6:	0f be       	out	0x3f, r0	; 63
    1de8:	0f 90       	pop	r0
    1dea:	1f 90       	pop	r1
    1dec:	18 95       	reti

00001dee <aes_setkey>:

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
    1dee:	e0 ed       	ldi	r30, 0xD0	; 208
    1df0:	f6 e0       	ldi	r31, 0x06	; 6
    1df2:	a8 2f       	mov	r26, r24
    1df4:	b9 2f       	mov	r27, r25
      ekey[i] = key[i];
    1df6:	8c 91       	ld	r24, X
    1df8:	81 93       	st	Z+, r24
      AES_KEY = key[i];
    1dfa:	8d 91       	ld	r24, X+
    1dfc:	80 93 3f 01 	sts	0x013F, r24

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
    1e00:	86 e0       	ldi	r24, 0x06	; 6
    1e02:	e0 3e       	cpi	r30, 0xE0	; 224
    1e04:	f8 07       	cpc	r31, r24
    1e06:	b9 f7       	brne	.-18     	; 0x1df6 <aes_setkey+0x8>
    1e08:	80 e1       	ldi	r24, 0x10	; 16
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
      AES_STATE = 0x00;
    1e0a:	10 92 3e 01 	sts	0x013E, r1
    1e0e:	81 50       	subi	r24, 0x01	; 1

   for(i=0; i<16; i++){
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
    1e10:	e1 f7       	brne	.-8      	; 0x1e0a <aes_setkey+0x1c>
      AES_STATE = 0x00;
   }
   AES_CTRL = (1 << AES_REQUEST);
    1e12:	80 e8       	ldi	r24, 0x80	; 128
    1e14:	80 93 3c 01 	sts	0x013C, r24

   while(!(AES_STATUS & (1 << AES_DONE))){
    1e18:	80 91 3d 01 	lds	r24, 0x013D
    1e1c:	80 ff       	sbrs	r24, 0
    1e1e:	fc cf       	rjmp	.-8      	; 0x1e18 <aes_setkey+0x2a>
    1e20:	e9 ee       	ldi	r30, 0xE9	; 233
    1e22:	f6 e0       	ldi	r31, 0x06	; 6
      continue;
   }
   for(i=0; i<16; i++){
      dkey[i] = AES_KEY;
    1e24:	80 91 3f 01 	lds	r24, 0x013F
    1e28:	81 93       	st	Z+, r24
   AES_CTRL = (1 << AES_REQUEST);

   while(!(AES_STATUS & (1 << AES_DONE))){
      continue;
   }
   for(i=0; i<16; i++){
    1e2a:	86 e0       	ldi	r24, 0x06	; 6
    1e2c:	e9 3f       	cpi	r30, 0xF9	; 249
    1e2e:	f8 07       	cpc	r31, r24
    1e30:	c9 f7       	brne	.-14     	; 0x1e24 <aes_setkey+0x36>
      dkey[i] = AES_KEY;
   }
}
    1e32:	08 95       	ret

00001e34 <aes_encrypt>:

uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
    1e34:	66 23       	and	r22, r22
    1e36:	09 f4       	brne	.+2      	; 0x1e3a <aes_encrypt+0x6>
    1e38:	3d c0       	rjmp	.+122    	; 0x1eb4 <aes_encrypt+0x80>
    1e3a:	26 2f       	mov	r18, r22
    1e3c:	2f 70       	andi	r18, 0x0F	; 15
    1e3e:	e1 f5       	brne	.+120    	; 0x1eb8 <aes_encrypt+0x84>
    1e40:	e0 ed       	ldi	r30, 0xD0	; 208
    1e42:	f6 e0       	ldi	r31, 0x06	; 6
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];
    1e44:	21 91       	ld	r18, Z+
    1e46:	20 93 3f 01 	sts	0x013F, r18
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    1e4a:	26 e0       	ldi	r18, 0x06	; 6
    1e4c:	e0 3e       	cpi	r30, 0xE0	; 224
    1e4e:	f2 07       	cpc	r31, r18
    1e50:	c9 f7       	brne	.-14     	; 0x1e44 <aes_encrypt+0x10>
    1e52:	40 e0       	ldi	r20, 0x00	; 0
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    1e54:	70 e0       	ldi	r23, 0x00	; 0
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    1e56:	50 e2       	ldi	r21, 0x20	; 32
    1e58:	21 c0       	rjmp	.+66     	; 0x1e9c <aes_encrypt+0x68>

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
      if(i==0)
    1e5a:	44 23       	and	r20, r20
    1e5c:	19 f4       	brne	.+6      	; 0x1e64 <aes_encrypt+0x30>
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
    1e5e:	10 92 3c 01 	sts	0x013C, r1
    1e62:	02 c0       	rjmp	.+4      	; 0x1e68 <aes_encrypt+0x34>
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    1e64:	50 93 3c 01 	sts	0x013C, r21
      dkey[i] = AES_KEY;
   }
}


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
    1e68:	fc 01       	movw	r30, r24
    1e6a:	e2 0f       	add	r30, r18
    1e6c:	f3 1f       	adc	r31, r19
    1e6e:	df 01       	movw	r26, r30
    1e70:	20 e1       	ldi	r18, 0x10	; 16
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    1e72:	3d 91       	ld	r19, X+
    1e74:	30 93 3e 01 	sts	0x013E, r19
    1e78:	21 50       	subi	r18, 0x01	; 1
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
    1e7a:	d9 f7       	brne	.-10     	; 0x1e72 <aes_encrypt+0x3e>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    1e7c:	20 91 3c 01 	lds	r18, 0x013C
    1e80:	20 68       	ori	r18, 0x80	; 128
    1e82:	20 93 3c 01 	sts	0x013C, r18
      while(!(AES_STATUS & (1 << AES_DONE)))
    1e86:	20 91 3d 01 	lds	r18, 0x013D
    1e8a:	20 ff       	sbrs	r18, 0
    1e8c:	fc cf       	rjmp	.-8      	; 0x1e86 <aes_encrypt+0x52>
    1e8e:	20 e1       	ldi	r18, 0x10	; 16
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
    1e90:	30 91 3e 01 	lds	r19, 0x013E
    1e94:	31 93       	st	Z+, r19
    1e96:	21 50       	subi	r18, 0x01	; 1
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
    1e98:	d9 f7       	brne	.-10     	; 0x1e90 <aes_encrypt+0x5c>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    1e9a:	4f 5f       	subi	r20, 0xFF	; 255
    1e9c:	24 2f       	mov	r18, r20
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	e4 e0       	ldi	r30, 0x04	; 4
    1ea2:	22 0f       	add	r18, r18
    1ea4:	33 1f       	adc	r19, r19
    1ea6:	ea 95       	dec	r30
    1ea8:	e1 f7       	brne	.-8      	; 0x1ea2 <aes_encrypt+0x6e>
    1eaa:	26 17       	cp	r18, r22
    1eac:	37 07       	cpc	r19, r23
    1eae:	ac f2       	brlt	.-86     	; 0x1e5a <aes_encrypt+0x26>
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	08 95       	ret
uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	08 95       	ret
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
}
    1eba:	08 95       	ret

00001ebc <aes_decrypt>:
uint8_t aes_decrypt(uint8_t *data, uint8_t len)
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
    1ebc:	61 30       	cpi	r22, 0x01	; 1
    1ebe:	09 f4       	brne	.+2      	; 0x1ec2 <aes_decrypt+0x6>
    1ec0:	48 c0       	rjmp	.+144    	; 0x1f52 <aes_decrypt+0x96>
    1ec2:	26 2f       	mov	r18, r22
    1ec4:	2f 70       	andi	r18, 0x0F	; 15
    1ec6:	09 f0       	breq	.+2      	; 0x1eca <aes_decrypt+0xe>
    1ec8:	46 c0       	rjmp	.+140    	; 0x1f56 <aes_decrypt+0x9a>
    1eca:	e9 ee       	ldi	r30, 0xE9	; 233
    1ecc:	f6 e0       	ldi	r31, 0x06	; 6
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];
    1ece:	21 91       	ld	r18, Z+
    1ed0:	20 93 3f 01 	sts	0x013F, r18
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    1ed4:	26 e0       	ldi	r18, 0x06	; 6
    1ed6:	e9 3f       	cpi	r30, 0xF9	; 249
    1ed8:	f2 07       	cpc	r31, r18
    1eda:	c9 f7       	brne	.-14     	; 0x1ece <aes_decrypt+0x12>
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    1edc:	62 95       	swap	r22
    1ede:	6f 70       	andi	r22, 0x0F	; 15
    1ee0:	61 50       	subi	r22, 0x01	; 1
         data[16*i+j] = AES_STATE;
   }
   return 0;
}

uint8_t aes_decrypt(uint8_t *data, uint8_t len)
    1ee2:	26 2f       	mov	r18, r22
    1ee4:	33 27       	eor	r19, r19
    1ee6:	27 fd       	sbrc	r18, 7
    1ee8:	30 95       	com	r19
    1eea:	f4 e0       	ldi	r31, 0x04	; 4
    1eec:	22 0f       	add	r18, r18
    1eee:	33 1f       	adc	r19, r19
    1ef0:	fa 95       	dec	r31
    1ef2:	e1 f7       	brne	.-8      	; 0x1eec <aes_decrypt+0x30>
    1ef4:	28 0f       	add	r18, r24
    1ef6:	39 1f       	adc	r19, r25

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    1ef8:	78 e0       	ldi	r23, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    1efa:	27 c0       	rjmp	.+78     	; 0x1f4a <aes_decrypt+0x8e>
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    1efc:	70 93 3c 01 	sts	0x013C, r23
    1f00:	f9 01       	movw	r30, r18
    1f02:	80 e1       	ldi	r24, 0x10	; 16
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    1f04:	91 91       	ld	r25, Z+
    1f06:	90 93 3e 01 	sts	0x013E, r25
    1f0a:	81 50       	subi	r24, 0x01	; 1
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
      
      for(j=0; j<16; j++)
    1f0c:	d9 f7       	brne	.-10     	; 0x1f04 <aes_decrypt+0x48>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    1f0e:	80 91 3c 01 	lds	r24, 0x013C
    1f12:	80 68       	ori	r24, 0x80	; 128
    1f14:	80 93 3c 01 	sts	0x013C, r24
      while(!(AES_STATUS & (1 << AES_DONE)))
    1f18:	80 91 3d 01 	lds	r24, 0x013D
    1f1c:	80 ff       	sbrs	r24, 0
    1f1e:	fc cf       	rjmp	.-8      	; 0x1f18 <aes_decrypt+0x5c>
    1f20:	d9 01       	movw	r26, r18
    1f22:	50 97       	sbiw	r26, 0x10	; 16
    1f24:	c9 01       	movw	r24, r18
    1f26:	40 96       	adiw	r24, 0x10	; 16
    1f28:	f9 01       	movw	r30, r18
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
    1f2a:	50 91 3e 01 	lds	r21, 0x013E
    1f2e:	50 83       	st	Z, r21
         if(i!=0)
    1f30:	66 23       	and	r22, r22
    1f32:	19 f0       	breq	.+6      	; 0x1f3a <aes_decrypt+0x7e>
            data[16*i+j] ^= data[16*(i-1)+j];
    1f34:	4c 91       	ld	r20, X
    1f36:	45 27       	eor	r20, r21
    1f38:	40 83       	st	Z, r20
    1f3a:	31 96       	adiw	r30, 0x01	; 1
    1f3c:	11 96       	adiw	r26, 0x01	; 1
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
    1f3e:	e8 17       	cp	r30, r24
    1f40:	f9 07       	cpc	r31, r25
    1f42:	99 f7       	brne	.-26     	; 0x1f2a <aes_decrypt+0x6e>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    1f44:	61 50       	subi	r22, 0x01	; 1
    1f46:	20 51       	subi	r18, 0x10	; 16
    1f48:	30 40       	sbci	r19, 0x00	; 0
    1f4a:	67 ff       	sbrs	r22, 7
    1f4c:	d7 cf       	rjmp	.-82     	; 0x1efc <aes_decrypt+0x40>
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	08 95       	ret
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	08 95       	ret
    1f56:	81 e0       	ldi	r24, 0x01	; 1
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
}
    1f58:	08 95       	ret

00001f5a <getc0>:
return 0;
}

char getc0(void){
        unsigned char tmp;
        UART0_WAIT_AND_RECEIVE(tmp);
    1f5a:	80 91 c0 00 	lds	r24, 0x00C0
    1f5e:	87 ff       	sbrs	r24, 7
    1f60:	fc cf       	rjmp	.-8      	; 0x1f5a <getc0>
    1f62:	80 91 c0 00 	lds	r24, 0x00C0
    1f66:	8f 77       	andi	r24, 0x7F	; 127
    1f68:	80 93 c0 00 	sts	0x00C0, r24
    1f6c:	80 91 c6 00 	lds	r24, 0x00C6
        return tmp;
}
    1f70:	08 95       	ret

00001f72 <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
    1f72:	90 91 c0 00 	lds	r25, 0x00C0
    1f76:	95 ff       	sbrs	r25, 5
    1f78:	fc cf       	rjmp	.-8      	; 0x1f72 <putc0>
    1f7a:	90 91 c0 00 	lds	r25, 0x00C0
    1f7e:	9f 7d       	andi	r25, 0xDF	; 223
    1f80:	90 93 c0 00 	sts	0x00C0, r25
    1f84:	80 93 c6 00 	sts	0x00C6, r24
}
    1f88:	08 95       	ret

00001f8a <nrk_uart_rx_signal_get>:
#else

nrk_sig_t nrk_uart_rx_signal_get()
{
   return NRK_ERROR;
}
    1f8a:	8f ef       	ldi	r24, 0xFF	; 255
    1f8c:	08 95       	ret

00001f8e <nrk_uart_data_ready>:


uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==1)
    1f8e:	81 30       	cpi	r24, 0x01	; 1
    1f90:	19 f4       	brne	.+6      	; 0x1f98 <nrk_uart_data_ready+0xa>
        {
        if( UCSR1A & BM(RXC1) ) return 1;
    1f92:	80 91 c8 00 	lds	r24, 0x00C8
    1f96:	04 c0       	rjmp	.+8      	; 0x1fa0 <nrk_uart_data_ready+0x12>
        }
if(uart_num==0)
    1f98:	88 23       	and	r24, r24
    1f9a:	31 f4       	brne	.+12     	; 0x1fa8 <nrk_uart_data_ready+0x1a>
        {
        if( UCSR0A & BM(RXC0) ) return 1;
    1f9c:	80 91 c0 00 	lds	r24, 0x00C0
{
   return NRK_ERROR;
}


uint8_t nrk_uart_data_ready(uint8_t uart_num)
    1fa0:	88 1f       	adc	r24, r24
    1fa2:	88 27       	eor	r24, r24
    1fa4:	88 1f       	adc	r24, r24
    1fa6:	08 95       	ret
        }
if(uart_num==0)
        {
        if( UCSR0A & BM(RXC0) ) return 1;
        }
return 0;
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
}
    1faa:	08 95       	ret

00001fac <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    1fac:	cf 93       	push	r28
    1fae:	df 93       	push	r29
    1fb0:	ec 01       	movw	r28, r24
 char c;
   while((c=pgm_read_byte(addr++)))
    1fb2:	07 c0       	rjmp	.+14     	; 0x1fc2 <nrk_kprintf+0x16>
        putchar(c);
    1fb4:	60 91 9c 07 	lds	r22, 0x079C
    1fb8:	70 91 9d 07 	lds	r23, 0x079D
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	0e 94 4c 34 	call	0x6898	; 0x6898 <fputc>
    1fc2:	fe 01       	movw	r30, r28
#endif

void nrk_kprintf( const char *addr)
{
 char c;
   while((c=pgm_read_byte(addr++)))
    1fc4:	21 96       	adiw	r28, 0x01	; 1
    1fc6:	84 91       	lpm	r24, Z+
    1fc8:	88 23       	and	r24, r24
    1fca:	a1 f7       	brne	.-24     	; 0x1fb4 <nrk_kprintf+0x8>
        putchar(c);
}
    1fcc:	df 91       	pop	r29
    1fce:	cf 91       	pop	r28
    1fd0:	08 95       	ret

00001fd2 <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
    1fd2:	86 e0       	ldi	r24, 0x06	; 6
    1fd4:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
    1fd6:	85 b9       	out	0x05, r24	; 5
#endif
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
    1fd8:	88 ef       	ldi	r24, 0xF8	; 248
    1fda:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
    1fdc:	80 ef       	ldi	r24, 0xF0	; 240
    1fde:	8b b9       	out	0x0b, r24	; 11
        DDRE = BM(UART0_TXD); 
    1fe0:	82 e0       	ldi	r24, 0x02	; 2
    1fe2:	8d b9       	out	0x0d, r24	; 13
} 
    1fe4:	08 95       	ret

00001fe6 <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    1fe6:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <PORT_INIT>
//SPI_INIT();
}
    1fea:	08 95       	ret

00001fec <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1fec:	8f 3f       	cpi	r24, 0xFF	; 255
    1fee:	09 f4       	brne	.+2      	; 0x1ff2 <nrk_gpio_set+0x6>
    1ff0:	83 c0       	rjmp	.+262    	; 0x20f8 <nrk_gpio_set+0x10c>
        switch (pin & 0x07) {
    1ff2:	28 2f       	mov	r18, r24
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	27 70       	andi	r18, 0x07	; 7
    1ff8:	30 70       	andi	r19, 0x00	; 0
    1ffa:	23 30       	cpi	r18, 0x03	; 3
    1ffc:	31 05       	cpc	r19, r1
    1ffe:	09 f4       	brne	.+2      	; 0x2002 <nrk_gpio_set+0x16>
    2000:	43 c0       	rjmp	.+134    	; 0x2088 <nrk_gpio_set+0x9c>
    2002:	24 30       	cpi	r18, 0x04	; 4
    2004:	31 05       	cpc	r19, r1
    2006:	54 f4       	brge	.+20     	; 0x201c <nrk_gpio_set+0x30>
    2008:	21 30       	cpi	r18, 0x01	; 1
    200a:	31 05       	cpc	r19, r1
    200c:	11 f1       	breq	.+68     	; 0x2052 <nrk_gpio_set+0x66>
    200e:	22 30       	cpi	r18, 0x02	; 2
    2010:	31 05       	cpc	r19, r1
    2012:	5c f5       	brge	.+86     	; 0x206a <nrk_gpio_set+0x7e>
    2014:	21 15       	cp	r18, r1
    2016:	31 05       	cpc	r19, r1
    2018:	71 f0       	breq	.+28     	; 0x2036 <nrk_gpio_set+0x4a>
    201a:	70 c0       	rjmp	.+224    	; 0x20fc <nrk_gpio_set+0x110>
    201c:	25 30       	cpi	r18, 0x05	; 5
    201e:	31 05       	cpc	r19, r1
    2020:	09 f4       	brne	.+2      	; 0x2024 <nrk_gpio_set+0x38>
    2022:	4e c0       	rjmp	.+156    	; 0x20c0 <nrk_gpio_set+0xd4>
    2024:	25 30       	cpi	r18, 0x05	; 5
    2026:	31 05       	cpc	r19, r1
    2028:	0c f4       	brge	.+2      	; 0x202c <nrk_gpio_set+0x40>
    202a:	3c c0       	rjmp	.+120    	; 0x20a4 <nrk_gpio_set+0xb8>
    202c:	26 30       	cpi	r18, 0x06	; 6
    202e:	31 05       	cpc	r19, r1
    2030:	09 f0       	breq	.+2      	; 0x2034 <nrk_gpio_set+0x48>
    2032:	64 c0       	rjmp	.+200    	; 0x20fc <nrk_gpio_set+0x110>
    2034:	53 c0       	rjmp	.+166    	; 0x20dc <nrk_gpio_set+0xf0>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2036:	92 b1       	in	r25, 0x02	; 2
    2038:	86 95       	lsr	r24
    203a:	86 95       	lsr	r24
    203c:	86 95       	lsr	r24
    203e:	41 e0       	ldi	r20, 0x01	; 1
    2040:	50 e0       	ldi	r21, 0x00	; 0
    2042:	02 c0       	rjmp	.+4      	; 0x2048 <nrk_gpio_set+0x5c>
    2044:	44 0f       	add	r20, r20
    2046:	55 1f       	adc	r21, r21
    2048:	8a 95       	dec	r24
    204a:	e2 f7       	brpl	.-8      	; 0x2044 <nrk_gpio_set+0x58>
    204c:	94 2b       	or	r25, r20
    204e:	92 b9       	out	0x02, r25	; 2
    2050:	19 c0       	rjmp	.+50     	; 0x2084 <nrk_gpio_set+0x98>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2052:	95 b1       	in	r25, 0x05	; 5
    2054:	86 95       	lsr	r24
    2056:	86 95       	lsr	r24
    2058:	86 95       	lsr	r24
    205a:	02 c0       	rjmp	.+4      	; 0x2060 <nrk_gpio_set+0x74>
    205c:	22 0f       	add	r18, r18
    205e:	33 1f       	adc	r19, r19
    2060:	8a 95       	dec	r24
    2062:	e2 f7       	brpl	.-8      	; 0x205c <nrk_gpio_set+0x70>
    2064:	92 2b       	or	r25, r18
    2066:	95 b9       	out	0x05, r25	; 5
    2068:	0d c0       	rjmp	.+26     	; 0x2084 <nrk_gpio_set+0x98>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    206a:	98 b1       	in	r25, 0x08	; 8
    206c:	86 95       	lsr	r24
    206e:	86 95       	lsr	r24
    2070:	86 95       	lsr	r24
    2072:	41 e0       	ldi	r20, 0x01	; 1
    2074:	50 e0       	ldi	r21, 0x00	; 0
    2076:	02 c0       	rjmp	.+4      	; 0x207c <nrk_gpio_set+0x90>
    2078:	44 0f       	add	r20, r20
    207a:	55 1f       	adc	r21, r21
    207c:	8a 95       	dec	r24
    207e:	e2 f7       	brpl	.-8      	; 0x2078 <nrk_gpio_set+0x8c>
    2080:	94 2b       	or	r25, r20
    2082:	98 b9       	out	0x08, r25	; 8
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
                default: return -1;
        }
        return 1;
    2084:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2086:	08 95       	ret
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2088:	9b b1       	in	r25, 0x0b	; 11
    208a:	86 95       	lsr	r24
    208c:	86 95       	lsr	r24
    208e:	86 95       	lsr	r24
    2090:	41 e0       	ldi	r20, 0x01	; 1
    2092:	50 e0       	ldi	r21, 0x00	; 0
    2094:	02 c0       	rjmp	.+4      	; 0x209a <nrk_gpio_set+0xae>
    2096:	44 0f       	add	r20, r20
    2098:	55 1f       	adc	r21, r21
    209a:	8a 95       	dec	r24
    209c:	e2 f7       	brpl	.-8      	; 0x2096 <nrk_gpio_set+0xaa>
    209e:	94 2b       	or	r25, r20
    20a0:	9b b9       	out	0x0b, r25	; 11
    20a2:	f0 cf       	rjmp	.-32     	; 0x2084 <nrk_gpio_set+0x98>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    20a4:	9e b1       	in	r25, 0x0e	; 14
    20a6:	86 95       	lsr	r24
    20a8:	86 95       	lsr	r24
    20aa:	86 95       	lsr	r24
    20ac:	41 e0       	ldi	r20, 0x01	; 1
    20ae:	50 e0       	ldi	r21, 0x00	; 0
    20b0:	02 c0       	rjmp	.+4      	; 0x20b6 <nrk_gpio_set+0xca>
    20b2:	44 0f       	add	r20, r20
    20b4:	55 1f       	adc	r21, r21
    20b6:	8a 95       	dec	r24
    20b8:	e2 f7       	brpl	.-8      	; 0x20b2 <nrk_gpio_set+0xc6>
    20ba:	94 2b       	or	r25, r20
    20bc:	9e b9       	out	0x0e, r25	; 14
    20be:	e2 cf       	rjmp	.-60     	; 0x2084 <nrk_gpio_set+0x98>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    20c0:	91 b3       	in	r25, 0x11	; 17
    20c2:	86 95       	lsr	r24
    20c4:	86 95       	lsr	r24
    20c6:	86 95       	lsr	r24
    20c8:	41 e0       	ldi	r20, 0x01	; 1
    20ca:	50 e0       	ldi	r21, 0x00	; 0
    20cc:	02 c0       	rjmp	.+4      	; 0x20d2 <nrk_gpio_set+0xe6>
    20ce:	44 0f       	add	r20, r20
    20d0:	55 1f       	adc	r21, r21
    20d2:	8a 95       	dec	r24
    20d4:	e2 f7       	brpl	.-8      	; 0x20ce <nrk_gpio_set+0xe2>
    20d6:	94 2b       	or	r25, r20
    20d8:	91 bb       	out	0x11, r25	; 17
    20da:	d4 cf       	rjmp	.-88     	; 0x2084 <nrk_gpio_set+0x98>
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    20dc:	94 b3       	in	r25, 0x14	; 20
    20de:	86 95       	lsr	r24
    20e0:	86 95       	lsr	r24
    20e2:	86 95       	lsr	r24
    20e4:	41 e0       	ldi	r20, 0x01	; 1
    20e6:	50 e0       	ldi	r21, 0x00	; 0
    20e8:	02 c0       	rjmp	.+4      	; 0x20ee <nrk_gpio_set+0x102>
    20ea:	44 0f       	add	r20, r20
    20ec:	55 1f       	adc	r21, r21
    20ee:	8a 95       	dec	r24
    20f0:	e2 f7       	brpl	.-8      	; 0x20ea <nrk_gpio_set+0xfe>
    20f2:	94 2b       	or	r25, r20
    20f4:	94 bb       	out	0x14, r25	; 20
    20f6:	c6 cf       	rjmp	.-116    	; 0x2084 <nrk_gpio_set+0x98>
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    20f8:	8f ef       	ldi	r24, 0xFF	; 255
    20fa:	08 95       	ret
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
                default: return -1;
    20fc:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    20fe:	08 95       	ret

00002100 <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    2100:	8f 3f       	cpi	r24, 0xFF	; 255
    2102:	09 f4       	brne	.+2      	; 0x2106 <nrk_gpio_clr+0x6>
    2104:	7b c0       	rjmp	.+246    	; 0x21fc <nrk_gpio_clr+0xfc>
        switch (pin & 0x07) {
    2106:	28 2f       	mov	r18, r24
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	27 70       	andi	r18, 0x07	; 7
    210c:	30 70       	andi	r19, 0x00	; 0
    210e:	23 30       	cpi	r18, 0x03	; 3
    2110:	31 05       	cpc	r19, r1
    2112:	09 f4       	brne	.+2      	; 0x2116 <nrk_gpio_clr+0x16>
    2114:	46 c0       	rjmp	.+140    	; 0x21a2 <nrk_gpio_clr+0xa2>
    2116:	24 30       	cpi	r18, 0x04	; 4
    2118:	31 05       	cpc	r19, r1
    211a:	54 f4       	brge	.+20     	; 0x2130 <nrk_gpio_clr+0x30>
    211c:	21 30       	cpi	r18, 0x01	; 1
    211e:	31 05       	cpc	r19, r1
    2120:	19 f1       	breq	.+70     	; 0x2168 <nrk_gpio_clr+0x68>
    2122:	22 30       	cpi	r18, 0x02	; 2
    2124:	31 05       	cpc	r19, r1
    2126:	6c f5       	brge	.+90     	; 0x2182 <nrk_gpio_clr+0x82>
    2128:	21 15       	cp	r18, r1
    212a:	31 05       	cpc	r19, r1
    212c:	71 f0       	breq	.+28     	; 0x214a <nrk_gpio_clr+0x4a>
    212e:	68 c0       	rjmp	.+208    	; 0x2200 <nrk_gpio_clr+0x100>
    2130:	25 30       	cpi	r18, 0x05	; 5
    2132:	31 05       	cpc	r19, r1
    2134:	09 f4       	brne	.+2      	; 0x2138 <nrk_gpio_clr+0x38>
    2136:	53 c0       	rjmp	.+166    	; 0x21de <nrk_gpio_clr+0xde>
    2138:	25 30       	cpi	r18, 0x05	; 5
    213a:	31 05       	cpc	r19, r1
    213c:	0c f4       	brge	.+2      	; 0x2140 <nrk_gpio_clr+0x40>
    213e:	40 c0       	rjmp	.+128    	; 0x21c0 <nrk_gpio_clr+0xc0>
    2140:	26 30       	cpi	r18, 0x06	; 6
    2142:	31 05       	cpc	r19, r1
    2144:	09 f0       	breq	.+2      	; 0x2148 <nrk_gpio_clr+0x48>
    2146:	5c c0       	rjmp	.+184    	; 0x2200 <nrk_gpio_clr+0x100>
    2148:	4a c0       	rjmp	.+148    	; 0x21de <nrk_gpio_clr+0xde>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    214a:	92 b1       	in	r25, 0x02	; 2
    214c:	86 95       	lsr	r24
    214e:	86 95       	lsr	r24
    2150:	86 95       	lsr	r24
    2152:	41 e0       	ldi	r20, 0x01	; 1
    2154:	50 e0       	ldi	r21, 0x00	; 0
    2156:	02 c0       	rjmp	.+4      	; 0x215c <nrk_gpio_clr+0x5c>
    2158:	44 0f       	add	r20, r20
    215a:	55 1f       	adc	r21, r21
    215c:	8a 95       	dec	r24
    215e:	e2 f7       	brpl	.-8      	; 0x2158 <nrk_gpio_clr+0x58>
    2160:	40 95       	com	r20
    2162:	49 23       	and	r20, r25
    2164:	42 b9       	out	0x02, r20	; 2
    2166:	1b c0       	rjmp	.+54     	; 0x219e <nrk_gpio_clr+0x9e>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    2168:	95 b1       	in	r25, 0x05	; 5
    216a:	86 95       	lsr	r24
    216c:	86 95       	lsr	r24
    216e:	86 95       	lsr	r24
    2170:	02 c0       	rjmp	.+4      	; 0x2176 <nrk_gpio_clr+0x76>
    2172:	22 0f       	add	r18, r18
    2174:	33 1f       	adc	r19, r19
    2176:	8a 95       	dec	r24
    2178:	e2 f7       	brpl	.-8      	; 0x2172 <nrk_gpio_clr+0x72>
    217a:	20 95       	com	r18
    217c:	29 23       	and	r18, r25
    217e:	25 b9       	out	0x05, r18	; 5
    2180:	0e c0       	rjmp	.+28     	; 0x219e <nrk_gpio_clr+0x9e>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2182:	98 b1       	in	r25, 0x08	; 8
    2184:	86 95       	lsr	r24
    2186:	86 95       	lsr	r24
    2188:	86 95       	lsr	r24
    218a:	41 e0       	ldi	r20, 0x01	; 1
    218c:	50 e0       	ldi	r21, 0x00	; 0
    218e:	02 c0       	rjmp	.+4      	; 0x2194 <nrk_gpio_clr+0x94>
    2190:	44 0f       	add	r20, r20
    2192:	55 1f       	adc	r21, r21
    2194:	8a 95       	dec	r24
    2196:	e2 f7       	brpl	.-8      	; 0x2190 <nrk_gpio_clr+0x90>
    2198:	40 95       	com	r20
    219a:	49 23       	and	r20, r25
    219c:	48 b9       	out	0x08, r20	; 8
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                default: return -1;
        }
        return 1;
    219e:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    21a0:	08 95       	ret
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    21a2:	9b b1       	in	r25, 0x0b	; 11
    21a4:	86 95       	lsr	r24
    21a6:	86 95       	lsr	r24
    21a8:	86 95       	lsr	r24
    21aa:	41 e0       	ldi	r20, 0x01	; 1
    21ac:	50 e0       	ldi	r21, 0x00	; 0
    21ae:	02 c0       	rjmp	.+4      	; 0x21b4 <nrk_gpio_clr+0xb4>
    21b0:	44 0f       	add	r20, r20
    21b2:	55 1f       	adc	r21, r21
    21b4:	8a 95       	dec	r24
    21b6:	e2 f7       	brpl	.-8      	; 0x21b0 <nrk_gpio_clr+0xb0>
    21b8:	40 95       	com	r20
    21ba:	49 23       	and	r20, r25
    21bc:	4b b9       	out	0x0b, r20	; 11
    21be:	ef cf       	rjmp	.-34     	; 0x219e <nrk_gpio_clr+0x9e>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    21c0:	9e b1       	in	r25, 0x0e	; 14
    21c2:	86 95       	lsr	r24
    21c4:	86 95       	lsr	r24
    21c6:	86 95       	lsr	r24
    21c8:	41 e0       	ldi	r20, 0x01	; 1
    21ca:	50 e0       	ldi	r21, 0x00	; 0
    21cc:	02 c0       	rjmp	.+4      	; 0x21d2 <nrk_gpio_clr+0xd2>
    21ce:	44 0f       	add	r20, r20
    21d0:	55 1f       	adc	r21, r21
    21d2:	8a 95       	dec	r24
    21d4:	e2 f7       	brpl	.-8      	; 0x21ce <nrk_gpio_clr+0xce>
    21d6:	40 95       	com	r20
    21d8:	49 23       	and	r20, r25
    21da:	4e b9       	out	0x0e, r20	; 14
    21dc:	e0 cf       	rjmp	.-64     	; 0x219e <nrk_gpio_clr+0x9e>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    21de:	91 b3       	in	r25, 0x11	; 17
    21e0:	86 95       	lsr	r24
    21e2:	86 95       	lsr	r24
    21e4:	86 95       	lsr	r24
    21e6:	41 e0       	ldi	r20, 0x01	; 1
    21e8:	50 e0       	ldi	r21, 0x00	; 0
    21ea:	02 c0       	rjmp	.+4      	; 0x21f0 <nrk_gpio_clr+0xf0>
    21ec:	44 0f       	add	r20, r20
    21ee:	55 1f       	adc	r21, r21
    21f0:	8a 95       	dec	r24
    21f2:	e2 f7       	brpl	.-8      	; 0x21ec <nrk_gpio_clr+0xec>
    21f4:	40 95       	com	r20
    21f6:	49 23       	and	r20, r25
    21f8:	41 bb       	out	0x11, r20	; 17
    21fa:	d1 cf       	rjmp	.-94     	; 0x219e <nrk_gpio_clr+0x9e>
        return 1;
}

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    21fc:	8f ef       	ldi	r24, 0xFF	; 255
    21fe:	08 95       	ret
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                default: return -1;
    2200:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2202:	08 95       	ret

00002204 <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    2204:	8f 3f       	cpi	r24, 0xFF	; 255
    2206:	b1 f1       	breq	.+108    	; 0x2274 <nrk_gpio_get+0x70>
        switch (pin & 0x07) {
    2208:	28 2f       	mov	r18, r24
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	27 70       	andi	r18, 0x07	; 7
    220e:	30 70       	andi	r19, 0x00	; 0
    2210:	23 30       	cpi	r18, 0x03	; 3
    2212:	31 05       	cpc	r19, r1
    2214:	e9 f0       	breq	.+58     	; 0x2250 <nrk_gpio_get+0x4c>
    2216:	24 30       	cpi	r18, 0x04	; 4
    2218:	31 05       	cpc	r19, r1
    221a:	54 f4       	brge	.+20     	; 0x2230 <nrk_gpio_get+0x2c>
    221c:	21 30       	cpi	r18, 0x01	; 1
    221e:	31 05       	cpc	r19, r1
    2220:	99 f0       	breq	.+38     	; 0x2248 <nrk_gpio_get+0x44>
    2222:	22 30       	cpi	r18, 0x02	; 2
    2224:	31 05       	cpc	r19, r1
    2226:	94 f4       	brge	.+36     	; 0x224c <nrk_gpio_get+0x48>
    2228:	21 15       	cp	r18, r1
    222a:	31 05       	cpc	r19, r1
    222c:	59 f0       	breq	.+22     	; 0x2244 <nrk_gpio_get+0x40>
    222e:	22 c0       	rjmp	.+68     	; 0x2274 <nrk_gpio_get+0x70>
    2230:	25 30       	cpi	r18, 0x05	; 5
    2232:	31 05       	cpc	r19, r1
    2234:	89 f0       	breq	.+34     	; 0x2258 <nrk_gpio_get+0x54>
    2236:	25 30       	cpi	r18, 0x05	; 5
    2238:	31 05       	cpc	r19, r1
    223a:	64 f0       	brlt	.+24     	; 0x2254 <nrk_gpio_get+0x50>
    223c:	26 30       	cpi	r18, 0x06	; 6
    223e:	31 05       	cpc	r19, r1
    2240:	c9 f4       	brne	.+50     	; 0x2274 <nrk_gpio_get+0x70>
    2242:	0c c0       	rjmp	.+24     	; 0x225c <nrk_gpio_get+0x58>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    2244:	20 b1       	in	r18, 0x00	; 0
    2246:	0b c0       	rjmp	.+22     	; 0x225e <nrk_gpio_get+0x5a>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    2248:	23 b1       	in	r18, 0x03	; 3
    224a:	09 c0       	rjmp	.+18     	; 0x225e <nrk_gpio_get+0x5a>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    224c:	26 b1       	in	r18, 0x06	; 6
    224e:	07 c0       	rjmp	.+14     	; 0x225e <nrk_gpio_get+0x5a>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    2250:	29 b1       	in	r18, 0x09	; 9
    2252:	05 c0       	rjmp	.+10     	; 0x225e <nrk_gpio_get+0x5a>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    2254:	2c b1       	in	r18, 0x0c	; 12
    2256:	03 c0       	rjmp	.+6      	; 0x225e <nrk_gpio_get+0x5a>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    2258:	2f b1       	in	r18, 0x0f	; 15
    225a:	01 c0       	rjmp	.+2      	; 0x225e <nrk_gpio_get+0x5a>
                case NRK_PORTG:
                        return !!(PING & BM((pin & 0xF8) >> 3));
    225c:	22 b3       	in	r18, 0x12	; 18
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	86 95       	lsr	r24
    2262:	86 95       	lsr	r24
    2264:	86 95       	lsr	r24
    2266:	02 c0       	rjmp	.+4      	; 0x226c <nrk_gpio_get+0x68>
    2268:	35 95       	asr	r19
    226a:	27 95       	ror	r18
    226c:	8a 95       	dec	r24
    226e:	e2 f7       	brpl	.-8      	; 0x2268 <nrk_gpio_get+0x64>
    2270:	21 70       	andi	r18, 0x01	; 1
    2272:	01 c0       	rjmp	.+2      	; 0x2276 <nrk_gpio_get+0x72>
                default: return -1;
    2274:	2f ef       	ldi	r18, 0xFF	; 255
        }
        return 1;
}
    2276:	82 2f       	mov	r24, r18
    2278:	08 95       	ret

0000227a <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    227a:	8f 3f       	cpi	r24, 0xFF	; 255
    227c:	09 f4       	brne	.+2      	; 0x2280 <nrk_gpio_toggle+0x6>
    227e:	23 c1       	rjmp	.+582    	; 0x24c6 <nrk_gpio_toggle+0x24c>
        switch (pin & 0x07) {
    2280:	28 2f       	mov	r18, r24
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	27 70       	andi	r18, 0x07	; 7
    2286:	30 70       	andi	r19, 0x00	; 0
    2288:	23 30       	cpi	r18, 0x03	; 3
    228a:	31 05       	cpc	r19, r1
    228c:	09 f4       	brne	.+2      	; 0x2290 <nrk_gpio_toggle+0x16>
    228e:	82 c0       	rjmp	.+260    	; 0x2394 <nrk_gpio_toggle+0x11a>
    2290:	24 30       	cpi	r18, 0x04	; 4
    2292:	31 05       	cpc	r19, r1
    2294:	5c f4       	brge	.+22     	; 0x22ac <nrk_gpio_toggle+0x32>
    2296:	21 30       	cpi	r18, 0x01	; 1
    2298:	31 05       	cpc	r19, r1
    229a:	d9 f1       	breq	.+118    	; 0x2312 <nrk_gpio_toggle+0x98>
    229c:	22 30       	cpi	r18, 0x02	; 2
    229e:	31 05       	cpc	r19, r1
    22a0:	0c f0       	brlt	.+2      	; 0x22a4 <nrk_gpio_toggle+0x2a>
    22a2:	52 c0       	rjmp	.+164    	; 0x2348 <nrk_gpio_toggle+0xce>
    22a4:	21 15       	cp	r18, r1
    22a6:	31 05       	cpc	r19, r1
    22a8:	71 f0       	breq	.+28     	; 0x22c6 <nrk_gpio_toggle+0x4c>
    22aa:	0f c1       	rjmp	.+542    	; 0x24ca <nrk_gpio_toggle+0x250>
    22ac:	25 30       	cpi	r18, 0x05	; 5
    22ae:	31 05       	cpc	r19, r1
    22b0:	09 f4       	brne	.+2      	; 0x22b4 <nrk_gpio_toggle+0x3a>
    22b2:	bd c0       	rjmp	.+378    	; 0x242e <nrk_gpio_toggle+0x1b4>
    22b4:	25 30       	cpi	r18, 0x05	; 5
    22b6:	31 05       	cpc	r19, r1
    22b8:	0c f4       	brge	.+2      	; 0x22bc <nrk_gpio_toggle+0x42>
    22ba:	93 c0       	rjmp	.+294    	; 0x23e2 <nrk_gpio_toggle+0x168>
    22bc:	26 30       	cpi	r18, 0x06	; 6
    22be:	31 05       	cpc	r19, r1
    22c0:	09 f0       	breq	.+2      	; 0x22c4 <nrk_gpio_toggle+0x4a>
    22c2:	03 c1       	rjmp	.+518    	; 0x24ca <nrk_gpio_toggle+0x250>
    22c4:	da c0       	rjmp	.+436    	; 0x247a <nrk_gpio_toggle+0x200>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    22c6:	90 b1       	in	r25, 0x00	; 0
    22c8:	86 95       	lsr	r24
    22ca:	86 95       	lsr	r24
    22cc:	86 95       	lsr	r24
    22ce:	28 2f       	mov	r18, r24
    22d0:	89 2f       	mov	r24, r25
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	02 2e       	mov	r0, r18
    22d6:	02 c0       	rjmp	.+4      	; 0x22dc <nrk_gpio_toggle+0x62>
    22d8:	95 95       	asr	r25
    22da:	87 95       	ror	r24
    22dc:	0a 94       	dec	r0
    22de:	e2 f7       	brpl	.-8      	; 0x22d8 <nrk_gpio_toggle+0x5e>
    22e0:	80 fd       	sbrc	r24, 0
    22e2:	0b c0       	rjmp	.+22     	; 0x22fa <nrk_gpio_toggle+0x80>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    22e4:	32 b1       	in	r19, 0x02	; 2
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	02 c0       	rjmp	.+4      	; 0x22f0 <nrk_gpio_toggle+0x76>
    22ec:	88 0f       	add	r24, r24
    22ee:	99 1f       	adc	r25, r25
    22f0:	2a 95       	dec	r18
    22f2:	e2 f7       	brpl	.-8      	; 0x22ec <nrk_gpio_toggle+0x72>
    22f4:	38 2b       	or	r19, r24
    22f6:	32 b9       	out	0x02, r19	; 2
    22f8:	66 c0       	rjmp	.+204    	; 0x23c6 <nrk_gpio_toggle+0x14c>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    22fa:	32 b1       	in	r19, 0x02	; 2
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	02 c0       	rjmp	.+4      	; 0x2306 <nrk_gpio_toggle+0x8c>
    2302:	88 0f       	add	r24, r24
    2304:	99 1f       	adc	r25, r25
    2306:	2a 95       	dec	r18
    2308:	e2 f7       	brpl	.-8      	; 0x2302 <nrk_gpio_toggle+0x88>
    230a:	80 95       	com	r24
    230c:	83 23       	and	r24, r19
    230e:	82 b9       	out	0x02, r24	; 2
    2310:	5a c0       	rjmp	.+180    	; 0x23c6 <nrk_gpio_toggle+0x14c>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    2312:	43 b1       	in	r20, 0x03	; 3
    2314:	86 95       	lsr	r24
    2316:	86 95       	lsr	r24
    2318:	86 95       	lsr	r24
    231a:	50 e0       	ldi	r21, 0x00	; 0
    231c:	08 2e       	mov	r0, r24
    231e:	02 c0       	rjmp	.+4      	; 0x2324 <nrk_gpio_toggle+0xaa>
    2320:	55 95       	asr	r21
    2322:	47 95       	ror	r20
    2324:	0a 94       	dec	r0
    2326:	e2 f7       	brpl	.-8      	; 0x2320 <nrk_gpio_toggle+0xa6>
    2328:	02 c0       	rjmp	.+4      	; 0x232e <nrk_gpio_toggle+0xb4>
    232a:	22 0f       	add	r18, r18
    232c:	33 1f       	adc	r19, r19
    232e:	8a 95       	dec	r24
    2330:	e2 f7       	brpl	.-8      	; 0x232a <nrk_gpio_toggle+0xb0>
    2332:	40 fd       	sbrc	r20, 0
    2334:	04 c0       	rjmp	.+8      	; 0x233e <nrk_gpio_toggle+0xc4>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    2336:	85 b1       	in	r24, 0x05	; 5
    2338:	82 2b       	or	r24, r18
    233a:	85 b9       	out	0x05, r24	; 5
    233c:	44 c0       	rjmp	.+136    	; 0x23c6 <nrk_gpio_toggle+0x14c>
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    233e:	85 b1       	in	r24, 0x05	; 5
    2340:	20 95       	com	r18
    2342:	28 23       	and	r18, r24
    2344:	25 b9       	out	0x05, r18	; 5
    2346:	3f c0       	rjmp	.+126    	; 0x23c6 <nrk_gpio_toggle+0x14c>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    2348:	96 b1       	in	r25, 0x06	; 6
    234a:	86 95       	lsr	r24
    234c:	86 95       	lsr	r24
    234e:	86 95       	lsr	r24
    2350:	28 2f       	mov	r18, r24
    2352:	89 2f       	mov	r24, r25
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	02 2e       	mov	r0, r18
    2358:	02 c0       	rjmp	.+4      	; 0x235e <nrk_gpio_toggle+0xe4>
    235a:	95 95       	asr	r25
    235c:	87 95       	ror	r24
    235e:	0a 94       	dec	r0
    2360:	e2 f7       	brpl	.-8      	; 0x235a <nrk_gpio_toggle+0xe0>
    2362:	80 fd       	sbrc	r24, 0
    2364:	0b c0       	rjmp	.+22     	; 0x237c <nrk_gpio_toggle+0x102>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    2366:	38 b1       	in	r19, 0x08	; 8
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	02 c0       	rjmp	.+4      	; 0x2372 <nrk_gpio_toggle+0xf8>
    236e:	88 0f       	add	r24, r24
    2370:	99 1f       	adc	r25, r25
    2372:	2a 95       	dec	r18
    2374:	e2 f7       	brpl	.-8      	; 0x236e <nrk_gpio_toggle+0xf4>
    2376:	38 2b       	or	r19, r24
    2378:	38 b9       	out	0x08, r19	; 8
    237a:	25 c0       	rjmp	.+74     	; 0x23c6 <nrk_gpio_toggle+0x14c>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    237c:	38 b1       	in	r19, 0x08	; 8
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	02 c0       	rjmp	.+4      	; 0x2388 <nrk_gpio_toggle+0x10e>
    2384:	88 0f       	add	r24, r24
    2386:	99 1f       	adc	r25, r25
    2388:	2a 95       	dec	r18
    238a:	e2 f7       	brpl	.-8      	; 0x2384 <nrk_gpio_toggle+0x10a>
    238c:	80 95       	com	r24
    238e:	83 23       	and	r24, r19
    2390:	88 b9       	out	0x08, r24	; 8
    2392:	19 c0       	rjmp	.+50     	; 0x23c6 <nrk_gpio_toggle+0x14c>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    2394:	99 b1       	in	r25, 0x09	; 9
    2396:	86 95       	lsr	r24
    2398:	86 95       	lsr	r24
    239a:	86 95       	lsr	r24
    239c:	28 2f       	mov	r18, r24
    239e:	89 2f       	mov	r24, r25
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	02 2e       	mov	r0, r18
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <nrk_gpio_toggle+0x130>
    23a6:	95 95       	asr	r25
    23a8:	87 95       	ror	r24
    23aa:	0a 94       	dec	r0
    23ac:	e2 f7       	brpl	.-8      	; 0x23a6 <nrk_gpio_toggle+0x12c>
    23ae:	80 fd       	sbrc	r24, 0
    23b0:	0c c0       	rjmp	.+24     	; 0x23ca <nrk_gpio_toggle+0x150>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    23b2:	3b b1       	in	r19, 0x0b	; 11
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	02 c0       	rjmp	.+4      	; 0x23be <nrk_gpio_toggle+0x144>
    23ba:	88 0f       	add	r24, r24
    23bc:	99 1f       	adc	r25, r25
    23be:	2a 95       	dec	r18
    23c0:	e2 f7       	brpl	.-8      	; 0x23ba <nrk_gpio_toggle+0x140>
    23c2:	38 2b       	or	r19, r24
    23c4:	3b b9       	out	0x0b, r19	; 11
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
        }
        return 1;
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	08 95       	ret
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    23ca:	3b b1       	in	r19, 0x0b	; 11
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	02 c0       	rjmp	.+4      	; 0x23d6 <nrk_gpio_toggle+0x15c>
    23d2:	88 0f       	add	r24, r24
    23d4:	99 1f       	adc	r25, r25
    23d6:	2a 95       	dec	r18
    23d8:	e2 f7       	brpl	.-8      	; 0x23d2 <nrk_gpio_toggle+0x158>
    23da:	80 95       	com	r24
    23dc:	83 23       	and	r24, r19
    23de:	8b b9       	out	0x0b, r24	; 11
    23e0:	f2 cf       	rjmp	.-28     	; 0x23c6 <nrk_gpio_toggle+0x14c>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    23e2:	9c b1       	in	r25, 0x0c	; 12
    23e4:	86 95       	lsr	r24
    23e6:	86 95       	lsr	r24
    23e8:	86 95       	lsr	r24
    23ea:	28 2f       	mov	r18, r24
    23ec:	89 2f       	mov	r24, r25
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	02 2e       	mov	r0, r18
    23f2:	02 c0       	rjmp	.+4      	; 0x23f8 <nrk_gpio_toggle+0x17e>
    23f4:	95 95       	asr	r25
    23f6:	87 95       	ror	r24
    23f8:	0a 94       	dec	r0
    23fa:	e2 f7       	brpl	.-8      	; 0x23f4 <nrk_gpio_toggle+0x17a>
    23fc:	80 fd       	sbrc	r24, 0
    23fe:	0b c0       	rjmp	.+22     	; 0x2416 <nrk_gpio_toggle+0x19c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    2400:	3e b1       	in	r19, 0x0e	; 14
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	02 c0       	rjmp	.+4      	; 0x240c <nrk_gpio_toggle+0x192>
    2408:	88 0f       	add	r24, r24
    240a:	99 1f       	adc	r25, r25
    240c:	2a 95       	dec	r18
    240e:	e2 f7       	brpl	.-8      	; 0x2408 <nrk_gpio_toggle+0x18e>
    2410:	38 2b       	or	r19, r24
    2412:	3e b9       	out	0x0e, r19	; 14
    2414:	d8 cf       	rjmp	.-80     	; 0x23c6 <nrk_gpio_toggle+0x14c>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    2416:	3e b1       	in	r19, 0x0e	; 14
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	02 c0       	rjmp	.+4      	; 0x2422 <nrk_gpio_toggle+0x1a8>
    241e:	88 0f       	add	r24, r24
    2420:	99 1f       	adc	r25, r25
    2422:	2a 95       	dec	r18
    2424:	e2 f7       	brpl	.-8      	; 0x241e <nrk_gpio_toggle+0x1a4>
    2426:	80 95       	com	r24
    2428:	83 23       	and	r24, r19
    242a:	8e b9       	out	0x0e, r24	; 14
    242c:	cc cf       	rjmp	.-104    	; 0x23c6 <nrk_gpio_toggle+0x14c>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    242e:	9f b1       	in	r25, 0x0f	; 15
    2430:	86 95       	lsr	r24
    2432:	86 95       	lsr	r24
    2434:	86 95       	lsr	r24
    2436:	28 2f       	mov	r18, r24
    2438:	89 2f       	mov	r24, r25
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	02 2e       	mov	r0, r18
    243e:	02 c0       	rjmp	.+4      	; 0x2444 <nrk_gpio_toggle+0x1ca>
    2440:	95 95       	asr	r25
    2442:	87 95       	ror	r24
    2444:	0a 94       	dec	r0
    2446:	e2 f7       	brpl	.-8      	; 0x2440 <nrk_gpio_toggle+0x1c6>
    2448:	80 fd       	sbrc	r24, 0
    244a:	0b c0       	rjmp	.+22     	; 0x2462 <nrk_gpio_toggle+0x1e8>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    244c:	31 b3       	in	r19, 0x11	; 17
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	02 c0       	rjmp	.+4      	; 0x2458 <nrk_gpio_toggle+0x1de>
    2454:	88 0f       	add	r24, r24
    2456:	99 1f       	adc	r25, r25
    2458:	2a 95       	dec	r18
    245a:	e2 f7       	brpl	.-8      	; 0x2454 <nrk_gpio_toggle+0x1da>
    245c:	38 2b       	or	r19, r24
    245e:	31 bb       	out	0x11, r19	; 17
    2460:	b2 cf       	rjmp	.-156    	; 0x23c6 <nrk_gpio_toggle+0x14c>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    2462:	31 b3       	in	r19, 0x11	; 17
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	02 c0       	rjmp	.+4      	; 0x246e <nrk_gpio_toggle+0x1f4>
    246a:	88 0f       	add	r24, r24
    246c:	99 1f       	adc	r25, r25
    246e:	2a 95       	dec	r18
    2470:	e2 f7       	brpl	.-8      	; 0x246a <nrk_gpio_toggle+0x1f0>
    2472:	80 95       	com	r24
    2474:	83 23       	and	r24, r19
    2476:	81 bb       	out	0x11, r24	; 17
    2478:	a6 cf       	rjmp	.-180    	; 0x23c6 <nrk_gpio_toggle+0x14c>
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    247a:	92 b3       	in	r25, 0x12	; 18
    247c:	86 95       	lsr	r24
    247e:	86 95       	lsr	r24
    2480:	86 95       	lsr	r24
    2482:	28 2f       	mov	r18, r24
    2484:	89 2f       	mov	r24, r25
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	02 2e       	mov	r0, r18
    248a:	02 c0       	rjmp	.+4      	; 0x2490 <nrk_gpio_toggle+0x216>
    248c:	95 95       	asr	r25
    248e:	87 95       	ror	r24
    2490:	0a 94       	dec	r0
    2492:	e2 f7       	brpl	.-8      	; 0x248c <nrk_gpio_toggle+0x212>
    2494:	80 fd       	sbrc	r24, 0
    2496:	0b c0       	rjmp	.+22     	; 0x24ae <nrk_gpio_toggle+0x234>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    2498:	34 b3       	in	r19, 0x14	; 20
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	02 c0       	rjmp	.+4      	; 0x24a4 <nrk_gpio_toggle+0x22a>
    24a0:	88 0f       	add	r24, r24
    24a2:	99 1f       	adc	r25, r25
    24a4:	2a 95       	dec	r18
    24a6:	e2 f7       	brpl	.-8      	; 0x24a0 <nrk_gpio_toggle+0x226>
    24a8:	38 2b       	or	r19, r24
    24aa:	34 bb       	out	0x14, r19	; 20
    24ac:	8c cf       	rjmp	.-232    	; 0x23c6 <nrk_gpio_toggle+0x14c>
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
    24ae:	34 b3       	in	r19, 0x14	; 20
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	02 c0       	rjmp	.+4      	; 0x24ba <nrk_gpio_toggle+0x240>
    24b6:	88 0f       	add	r24, r24
    24b8:	99 1f       	adc	r25, r25
    24ba:	2a 95       	dec	r18
    24bc:	e2 f7       	brpl	.-8      	; 0x24b6 <nrk_gpio_toggle+0x23c>
    24be:	80 95       	com	r24
    24c0:	83 23       	and	r24, r19
    24c2:	84 bb       	out	0x14, r24	; 20
    24c4:	80 cf       	rjmp	.-256    	; 0x23c6 <nrk_gpio_toggle+0x14c>
        return 1;
}

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    24c6:	8f ef       	ldi	r24, 0xFF	; 255
    24c8:	08 95       	ret
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
    24ca:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    24cc:	08 95       	ret

000024ce <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    24ce:	8f 3f       	cpi	r24, 0xFF	; 255
    24d0:	09 f4       	brne	.+2      	; 0x24d4 <nrk_gpio_direction+0x6>
    24d2:	0d c1       	rjmp	.+538    	; 0x26ee <nrk_gpio_direction+0x220>
    24d4:	28 2f       	mov	r18, r24
    24d6:	30 e0       	ldi	r19, 0x00	; 0
        if (pin_direction == NRK_PIN_INPUT) {
    24d8:	66 23       	and	r22, r22
    24da:	09 f0       	breq	.+2      	; 0x24de <nrk_gpio_direction+0x10>
    24dc:	87 c0       	rjmp	.+270    	; 0x25ec <nrk_gpio_direction+0x11e>
                switch (pin & 0x07) {
    24de:	27 70       	andi	r18, 0x07	; 7
    24e0:	30 70       	andi	r19, 0x00	; 0
    24e2:	23 30       	cpi	r18, 0x03	; 3
    24e4:	31 05       	cpc	r19, r1
    24e6:	09 f4       	brne	.+2      	; 0x24ea <nrk_gpio_direction+0x1c>
    24e8:	45 c0       	rjmp	.+138    	; 0x2574 <nrk_gpio_direction+0xa6>
    24ea:	24 30       	cpi	r18, 0x04	; 4
    24ec:	31 05       	cpc	r19, r1
    24ee:	54 f4       	brge	.+20     	; 0x2504 <nrk_gpio_direction+0x36>
    24f0:	21 30       	cpi	r18, 0x01	; 1
    24f2:	31 05       	cpc	r19, r1
    24f4:	19 f1       	breq	.+70     	; 0x253c <nrk_gpio_direction+0x6e>
    24f6:	22 30       	cpi	r18, 0x02	; 2
    24f8:	31 05       	cpc	r19, r1
    24fa:	6c f5       	brge	.+90     	; 0x2556 <nrk_gpio_direction+0x88>
    24fc:	21 15       	cp	r18, r1
    24fe:	31 05       	cpc	r19, r1
    2500:	71 f0       	breq	.+28     	; 0x251e <nrk_gpio_direction+0x50>
    2502:	f5 c0       	rjmp	.+490    	; 0x26ee <nrk_gpio_direction+0x220>
    2504:	25 30       	cpi	r18, 0x05	; 5
    2506:	31 05       	cpc	r19, r1
    2508:	09 f4       	brne	.+2      	; 0x250c <nrk_gpio_direction+0x3e>
    250a:	52 c0       	rjmp	.+164    	; 0x25b0 <nrk_gpio_direction+0xe2>
    250c:	25 30       	cpi	r18, 0x05	; 5
    250e:	31 05       	cpc	r19, r1
    2510:	0c f4       	brge	.+2      	; 0x2514 <nrk_gpio_direction+0x46>
    2512:	3f c0       	rjmp	.+126    	; 0x2592 <nrk_gpio_direction+0xc4>
    2514:	26 30       	cpi	r18, 0x06	; 6
    2516:	31 05       	cpc	r19, r1
    2518:	09 f0       	breq	.+2      	; 0x251c <nrk_gpio_direction+0x4e>
    251a:	e9 c0       	rjmp	.+466    	; 0x26ee <nrk_gpio_direction+0x220>
    251c:	58 c0       	rjmp	.+176    	; 0x25ce <nrk_gpio_direction+0x100>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    251e:	91 b1       	in	r25, 0x01	; 1
    2520:	86 95       	lsr	r24
    2522:	86 95       	lsr	r24
    2524:	86 95       	lsr	r24
    2526:	41 e0       	ldi	r20, 0x01	; 1
    2528:	50 e0       	ldi	r21, 0x00	; 0
    252a:	02 c0       	rjmp	.+4      	; 0x2530 <nrk_gpio_direction+0x62>
    252c:	44 0f       	add	r20, r20
    252e:	55 1f       	adc	r21, r21
    2530:	8a 95       	dec	r24
    2532:	e2 f7       	brpl	.-8      	; 0x252c <nrk_gpio_direction+0x5e>
    2534:	40 95       	com	r20
    2536:	49 23       	and	r20, r25
    2538:	41 b9       	out	0x01, r20	; 1
    253a:	d7 c0       	rjmp	.+430    	; 0x26ea <nrk_gpio_direction+0x21c>
                                //PORTA |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    253c:	94 b1       	in	r25, 0x04	; 4
    253e:	86 95       	lsr	r24
    2540:	86 95       	lsr	r24
    2542:	86 95       	lsr	r24
    2544:	02 c0       	rjmp	.+4      	; 0x254a <nrk_gpio_direction+0x7c>
    2546:	22 0f       	add	r18, r18
    2548:	33 1f       	adc	r19, r19
    254a:	8a 95       	dec	r24
    254c:	e2 f7       	brpl	.-8      	; 0x2546 <nrk_gpio_direction+0x78>
    254e:	20 95       	com	r18
    2550:	29 23       	and	r18, r25
    2552:	24 b9       	out	0x04, r18	; 4
    2554:	ca c0       	rjmp	.+404    	; 0x26ea <nrk_gpio_direction+0x21c>
                                //PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    2556:	97 b1       	in	r25, 0x07	; 7
    2558:	86 95       	lsr	r24
    255a:	86 95       	lsr	r24
    255c:	86 95       	lsr	r24
    255e:	41 e0       	ldi	r20, 0x01	; 1
    2560:	50 e0       	ldi	r21, 0x00	; 0
    2562:	02 c0       	rjmp	.+4      	; 0x2568 <nrk_gpio_direction+0x9a>
    2564:	44 0f       	add	r20, r20
    2566:	55 1f       	adc	r21, r21
    2568:	8a 95       	dec	r24
    256a:	e2 f7       	brpl	.-8      	; 0x2564 <nrk_gpio_direction+0x96>
    256c:	40 95       	com	r20
    256e:	49 23       	and	r20, r25
    2570:	47 b9       	out	0x07, r20	; 7
    2572:	bb c0       	rjmp	.+374    	; 0x26ea <nrk_gpio_direction+0x21c>
                                //PORTC |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    2574:	9a b1       	in	r25, 0x0a	; 10
    2576:	86 95       	lsr	r24
    2578:	86 95       	lsr	r24
    257a:	86 95       	lsr	r24
    257c:	41 e0       	ldi	r20, 0x01	; 1
    257e:	50 e0       	ldi	r21, 0x00	; 0
    2580:	02 c0       	rjmp	.+4      	; 0x2586 <nrk_gpio_direction+0xb8>
    2582:	44 0f       	add	r20, r20
    2584:	55 1f       	adc	r21, r21
    2586:	8a 95       	dec	r24
    2588:	e2 f7       	brpl	.-8      	; 0x2582 <nrk_gpio_direction+0xb4>
    258a:	40 95       	com	r20
    258c:	49 23       	and	r20, r25
    258e:	4a b9       	out	0x0a, r20	; 10
    2590:	ac c0       	rjmp	.+344    	; 0x26ea <nrk_gpio_direction+0x21c>
                                //PORTD |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    2592:	9d b1       	in	r25, 0x0d	; 13
    2594:	86 95       	lsr	r24
    2596:	86 95       	lsr	r24
    2598:	86 95       	lsr	r24
    259a:	41 e0       	ldi	r20, 0x01	; 1
    259c:	50 e0       	ldi	r21, 0x00	; 0
    259e:	02 c0       	rjmp	.+4      	; 0x25a4 <nrk_gpio_direction+0xd6>
    25a0:	44 0f       	add	r20, r20
    25a2:	55 1f       	adc	r21, r21
    25a4:	8a 95       	dec	r24
    25a6:	e2 f7       	brpl	.-8      	; 0x25a0 <nrk_gpio_direction+0xd2>
    25a8:	40 95       	com	r20
    25aa:	49 23       	and	r20, r25
    25ac:	4d b9       	out	0x0d, r20	; 13
    25ae:	9d c0       	rjmp	.+314    	; 0x26ea <nrk_gpio_direction+0x21c>
                                //PORTE |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    25b0:	90 b3       	in	r25, 0x10	; 16
    25b2:	86 95       	lsr	r24
    25b4:	86 95       	lsr	r24
    25b6:	86 95       	lsr	r24
    25b8:	41 e0       	ldi	r20, 0x01	; 1
    25ba:	50 e0       	ldi	r21, 0x00	; 0
    25bc:	02 c0       	rjmp	.+4      	; 0x25c2 <nrk_gpio_direction+0xf4>
    25be:	44 0f       	add	r20, r20
    25c0:	55 1f       	adc	r21, r21
    25c2:	8a 95       	dec	r24
    25c4:	e2 f7       	brpl	.-8      	; 0x25be <nrk_gpio_direction+0xf0>
    25c6:	40 95       	com	r20
    25c8:	49 23       	and	r20, r25
    25ca:	40 bb       	out	0x10, r20	; 16
    25cc:	8e c0       	rjmp	.+284    	; 0x26ea <nrk_gpio_direction+0x21c>
                                //PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
    25ce:	93 b3       	in	r25, 0x13	; 19
    25d0:	86 95       	lsr	r24
    25d2:	86 95       	lsr	r24
    25d4:	86 95       	lsr	r24
    25d6:	41 e0       	ldi	r20, 0x01	; 1
    25d8:	50 e0       	ldi	r21, 0x00	; 0
    25da:	02 c0       	rjmp	.+4      	; 0x25e0 <nrk_gpio_direction+0x112>
    25dc:	44 0f       	add	r20, r20
    25de:	55 1f       	adc	r21, r21
    25e0:	8a 95       	dec	r24
    25e2:	e2 f7       	brpl	.-8      	; 0x25dc <nrk_gpio_direction+0x10e>
    25e4:	40 95       	com	r20
    25e6:	49 23       	and	r20, r25
    25e8:	43 bb       	out	0x13, r20	; 19
    25ea:	7f c0       	rjmp	.+254    	; 0x26ea <nrk_gpio_direction+0x21c>
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    25ec:	27 70       	andi	r18, 0x07	; 7
    25ee:	30 70       	andi	r19, 0x00	; 0
    25f0:	23 30       	cpi	r18, 0x03	; 3
    25f2:	31 05       	cpc	r19, r1
    25f4:	09 f4       	brne	.+2      	; 0x25f8 <nrk_gpio_direction+0x12a>
    25f6:	42 c0       	rjmp	.+132    	; 0x267c <nrk_gpio_direction+0x1ae>
    25f8:	24 30       	cpi	r18, 0x04	; 4
    25fa:	31 05       	cpc	r19, r1
    25fc:	54 f4       	brge	.+20     	; 0x2612 <nrk_gpio_direction+0x144>
    25fe:	21 30       	cpi	r18, 0x01	; 1
    2600:	31 05       	cpc	r19, r1
    2602:	11 f1       	breq	.+68     	; 0x2648 <nrk_gpio_direction+0x17a>
    2604:	22 30       	cpi	r18, 0x02	; 2
    2606:	31 05       	cpc	r19, r1
    2608:	5c f5       	brge	.+86     	; 0x2660 <nrk_gpio_direction+0x192>
    260a:	21 15       	cp	r18, r1
    260c:	31 05       	cpc	r19, r1
    260e:	71 f0       	breq	.+28     	; 0x262c <nrk_gpio_direction+0x15e>
    2610:	70 c0       	rjmp	.+224    	; 0x26f2 <nrk_gpio_direction+0x224>
    2612:	25 30       	cpi	r18, 0x05	; 5
    2614:	31 05       	cpc	r19, r1
    2616:	09 f4       	brne	.+2      	; 0x261a <nrk_gpio_direction+0x14c>
    2618:	4d c0       	rjmp	.+154    	; 0x26b4 <nrk_gpio_direction+0x1e6>
    261a:	25 30       	cpi	r18, 0x05	; 5
    261c:	31 05       	cpc	r19, r1
    261e:	0c f4       	brge	.+2      	; 0x2622 <nrk_gpio_direction+0x154>
    2620:	3b c0       	rjmp	.+118    	; 0x2698 <nrk_gpio_direction+0x1ca>
    2622:	26 30       	cpi	r18, 0x06	; 6
    2624:	31 05       	cpc	r19, r1
    2626:	09 f0       	breq	.+2      	; 0x262a <nrk_gpio_direction+0x15c>
    2628:	64 c0       	rjmp	.+200    	; 0x26f2 <nrk_gpio_direction+0x224>
    262a:	52 c0       	rjmp	.+164    	; 0x26d0 <nrk_gpio_direction+0x202>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    262c:	91 b1       	in	r25, 0x01	; 1
    262e:	86 95       	lsr	r24
    2630:	86 95       	lsr	r24
    2632:	86 95       	lsr	r24
    2634:	41 e0       	ldi	r20, 0x01	; 1
    2636:	50 e0       	ldi	r21, 0x00	; 0
    2638:	02 c0       	rjmp	.+4      	; 0x263e <nrk_gpio_direction+0x170>
    263a:	44 0f       	add	r20, r20
    263c:	55 1f       	adc	r21, r21
    263e:	8a 95       	dec	r24
    2640:	e2 f7       	brpl	.-8      	; 0x263a <nrk_gpio_direction+0x16c>
    2642:	94 2b       	or	r25, r20
    2644:	91 b9       	out	0x01, r25	; 1
    2646:	51 c0       	rjmp	.+162    	; 0x26ea <nrk_gpio_direction+0x21c>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    2648:	94 b1       	in	r25, 0x04	; 4
    264a:	86 95       	lsr	r24
    264c:	86 95       	lsr	r24
    264e:	86 95       	lsr	r24
    2650:	02 c0       	rjmp	.+4      	; 0x2656 <nrk_gpio_direction+0x188>
    2652:	22 0f       	add	r18, r18
    2654:	33 1f       	adc	r19, r19
    2656:	8a 95       	dec	r24
    2658:	e2 f7       	brpl	.-8      	; 0x2652 <nrk_gpio_direction+0x184>
    265a:	92 2b       	or	r25, r18
    265c:	94 b9       	out	0x04, r25	; 4
    265e:	45 c0       	rjmp	.+138    	; 0x26ea <nrk_gpio_direction+0x21c>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    2660:	97 b1       	in	r25, 0x07	; 7
    2662:	86 95       	lsr	r24
    2664:	86 95       	lsr	r24
    2666:	86 95       	lsr	r24
    2668:	41 e0       	ldi	r20, 0x01	; 1
    266a:	50 e0       	ldi	r21, 0x00	; 0
    266c:	02 c0       	rjmp	.+4      	; 0x2672 <nrk_gpio_direction+0x1a4>
    266e:	44 0f       	add	r20, r20
    2670:	55 1f       	adc	r21, r21
    2672:	8a 95       	dec	r24
    2674:	e2 f7       	brpl	.-8      	; 0x266e <nrk_gpio_direction+0x1a0>
    2676:	94 2b       	or	r25, r20
    2678:	97 b9       	out	0x07, r25	; 7
    267a:	37 c0       	rjmp	.+110    	; 0x26ea <nrk_gpio_direction+0x21c>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    267c:	9a b1       	in	r25, 0x0a	; 10
    267e:	86 95       	lsr	r24
    2680:	86 95       	lsr	r24
    2682:	86 95       	lsr	r24
    2684:	41 e0       	ldi	r20, 0x01	; 1
    2686:	50 e0       	ldi	r21, 0x00	; 0
    2688:	02 c0       	rjmp	.+4      	; 0x268e <nrk_gpio_direction+0x1c0>
    268a:	44 0f       	add	r20, r20
    268c:	55 1f       	adc	r21, r21
    268e:	8a 95       	dec	r24
    2690:	e2 f7       	brpl	.-8      	; 0x268a <nrk_gpio_direction+0x1bc>
    2692:	94 2b       	or	r25, r20
    2694:	9a b9       	out	0x0a, r25	; 10
    2696:	29 c0       	rjmp	.+82     	; 0x26ea <nrk_gpio_direction+0x21c>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    2698:	9d b1       	in	r25, 0x0d	; 13
    269a:	86 95       	lsr	r24
    269c:	86 95       	lsr	r24
    269e:	86 95       	lsr	r24
    26a0:	41 e0       	ldi	r20, 0x01	; 1
    26a2:	50 e0       	ldi	r21, 0x00	; 0
    26a4:	02 c0       	rjmp	.+4      	; 0x26aa <nrk_gpio_direction+0x1dc>
    26a6:	44 0f       	add	r20, r20
    26a8:	55 1f       	adc	r21, r21
    26aa:	8a 95       	dec	r24
    26ac:	e2 f7       	brpl	.-8      	; 0x26a6 <nrk_gpio_direction+0x1d8>
    26ae:	94 2b       	or	r25, r20
    26b0:	9d b9       	out	0x0d, r25	; 13
    26b2:	1b c0       	rjmp	.+54     	; 0x26ea <nrk_gpio_direction+0x21c>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    26b4:	90 b3       	in	r25, 0x10	; 16
    26b6:	86 95       	lsr	r24
    26b8:	86 95       	lsr	r24
    26ba:	86 95       	lsr	r24
    26bc:	41 e0       	ldi	r20, 0x01	; 1
    26be:	50 e0       	ldi	r21, 0x00	; 0
    26c0:	02 c0       	rjmp	.+4      	; 0x26c6 <nrk_gpio_direction+0x1f8>
    26c2:	44 0f       	add	r20, r20
    26c4:	55 1f       	adc	r21, r21
    26c6:	8a 95       	dec	r24
    26c8:	e2 f7       	brpl	.-8      	; 0x26c2 <nrk_gpio_direction+0x1f4>
    26ca:	94 2b       	or	r25, r20
    26cc:	90 bb       	out	0x10, r25	; 16
    26ce:	0d c0       	rjmp	.+26     	; 0x26ea <nrk_gpio_direction+0x21c>
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    26d0:	93 b3       	in	r25, 0x13	; 19
    26d2:	86 95       	lsr	r24
    26d4:	86 95       	lsr	r24
    26d6:	86 95       	lsr	r24
    26d8:	41 e0       	ldi	r20, 0x01	; 1
    26da:	50 e0       	ldi	r21, 0x00	; 0
    26dc:	02 c0       	rjmp	.+4      	; 0x26e2 <nrk_gpio_direction+0x214>
    26de:	44 0f       	add	r20, r20
    26e0:	55 1f       	adc	r21, r21
    26e2:	8a 95       	dec	r24
    26e4:	e2 f7       	brpl	.-8      	; 0x26de <nrk_gpio_direction+0x210>
    26e6:	94 2b       	or	r25, r20
    26e8:	93 bb       	out	0x13, r25	; 19
                        default: return -1;
                }
        }
        return 1;
    26ea:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    26ec:	08 95       	ret
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
    26ee:	8f ef       	ldi	r24, 0xFF	; 255
    26f0:	08 95       	ret
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
                        default: return -1;
    26f2:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    26f4:	08 95       	ret

000026f6 <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    26f6:	88 23       	and	r24, r24
    26f8:	29 f4       	brne	.+10     	; 0x2704 <nrk_get_button+0xe>
	 return( !(PINA & BM(BUTTON))); 
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	01 9b       	sbis	0x00, 1	; 0
    26fe:	03 c0       	rjmp	.+6      	; 0x2706 <nrk_get_button+0x10>
    2700:	80 e0       	ldi	r24, 0x00	; 0
    2702:	08 95       	ret
	} 
return -1;
    2704:	8f ef       	ldi	r24, 0xFF	; 255
}
    2706:	08 95       	ret

00002708 <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    2708:	00 97       	sbiw	r24, 0x00	; 0
    270a:	11 f4       	brne	.+4      	; 0x2710 <nrk_led_toggle+0x8>
    270c:	83 e2       	ldi	r24, 0x23	; 35
    270e:	0e c0       	rjmp	.+28     	; 0x272c <nrk_led_toggle+0x24>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    2710:	81 30       	cpi	r24, 0x01	; 1
    2712:	91 05       	cpc	r25, r1
    2714:	11 f4       	brne	.+4      	; 0x271a <nrk_led_toggle+0x12>
    2716:	8b e2       	ldi	r24, 0x2B	; 43
    2718:	09 c0       	rjmp	.+18     	; 0x272c <nrk_led_toggle+0x24>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    271a:	82 30       	cpi	r24, 0x02	; 2
    271c:	91 05       	cpc	r25, r1
    271e:	11 f4       	brne	.+4      	; 0x2724 <nrk_led_toggle+0x1c>
    2720:	83 e3       	ldi	r24, 0x33	; 51
    2722:	04 c0       	rjmp	.+8      	; 0x272c <nrk_led_toggle+0x24>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    2724:	83 30       	cpi	r24, 0x03	; 3
    2726:	91 05       	cpc	r25, r1
    2728:	29 f4       	brne	.+10     	; 0x2734 <nrk_led_toggle+0x2c>
    272a:	8b e3       	ldi	r24, 0x3B	; 59
    272c:	0e 94 3d 11 	call	0x227a	; 0x227a <nrk_gpio_toggle>
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	08 95       	ret
return -1;
    2734:	8f ef       	ldi	r24, 0xFF	; 255
}
    2736:	08 95       	ret

00002738 <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    2738:	00 97       	sbiw	r24, 0x00	; 0
    273a:	11 f4       	brne	.+4      	; 0x2740 <nrk_led_clr+0x8>
    273c:	83 e2       	ldi	r24, 0x23	; 35
    273e:	0e c0       	rjmp	.+28     	; 0x275c <nrk_led_clr+0x24>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    2740:	81 30       	cpi	r24, 0x01	; 1
    2742:	91 05       	cpc	r25, r1
    2744:	11 f4       	brne	.+4      	; 0x274a <nrk_led_clr+0x12>
    2746:	8b e2       	ldi	r24, 0x2B	; 43
    2748:	09 c0       	rjmp	.+18     	; 0x275c <nrk_led_clr+0x24>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    274a:	82 30       	cpi	r24, 0x02	; 2
    274c:	91 05       	cpc	r25, r1
    274e:	11 f4       	brne	.+4      	; 0x2754 <nrk_led_clr+0x1c>
    2750:	83 e3       	ldi	r24, 0x33	; 51
    2752:	04 c0       	rjmp	.+8      	; 0x275c <nrk_led_clr+0x24>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    2754:	83 30       	cpi	r24, 0x03	; 3
    2756:	91 05       	cpc	r25, r1
    2758:	29 f4       	brne	.+10     	; 0x2764 <nrk_led_clr+0x2c>
    275a:	8b e3       	ldi	r24, 0x3B	; 59
    275c:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <nrk_gpio_set>
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	08 95       	ret
return -1;
    2764:	8f ef       	ldi	r24, 0xFF	; 255
}
    2766:	08 95       	ret

00002768 <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    2768:	00 97       	sbiw	r24, 0x00	; 0
    276a:	11 f4       	brne	.+4      	; 0x2770 <nrk_led_set+0x8>
    276c:	83 e2       	ldi	r24, 0x23	; 35
    276e:	0e c0       	rjmp	.+28     	; 0x278c <nrk_led_set+0x24>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    2770:	81 30       	cpi	r24, 0x01	; 1
    2772:	91 05       	cpc	r25, r1
    2774:	11 f4       	brne	.+4      	; 0x277a <nrk_led_set+0x12>
    2776:	8b e2       	ldi	r24, 0x2B	; 43
    2778:	09 c0       	rjmp	.+18     	; 0x278c <nrk_led_set+0x24>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    277a:	82 30       	cpi	r24, 0x02	; 2
    277c:	91 05       	cpc	r25, r1
    277e:	11 f4       	brne	.+4      	; 0x2784 <nrk_led_set+0x1c>
    2780:	83 e3       	ldi	r24, 0x33	; 51
    2782:	04 c0       	rjmp	.+8      	; 0x278c <nrk_led_set+0x24>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    2784:	83 30       	cpi	r24, 0x03	; 3
    2786:	91 05       	cpc	r25, r1
    2788:	29 f4       	brne	.+10     	; 0x2794 <nrk_led_set+0x2c>
    278a:	8b e3       	ldi	r24, 0x3B	; 59
    278c:	0e 94 80 10 	call	0x2100	; 0x2100 <nrk_gpio_clr>
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	08 95       	ret
return -1;
    2794:	8f ef       	ldi	r24, 0xFF	; 255
}
    2796:	08 95       	ret

00002798 <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    2798:	88 23       	and	r24, r24
    279a:	19 f0       	breq	.+6      	; 0x27a2 <nrk_gpio_pullups+0xa>
    279c:	85 b7       	in	r24, 0x35	; 53
    279e:	8f 7e       	andi	r24, 0xEF	; 239
    27a0:	02 c0       	rjmp	.+4      	; 0x27a6 <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    27a2:	85 b7       	in	r24, 0x35	; 53
    27a4:	80 61       	ori	r24, 0x10	; 16
    27a6:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	08 95       	ret

000027ac <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    27ac:	90 91 c8 00 	lds	r25, 0x00C8
    27b0:	95 ff       	sbrs	r25, 5
    27b2:	fc cf       	rjmp	.-8      	; 0x27ac <putc1>
    27b4:	80 93 ce 00 	sts	0x00CE, r24
}
    27b8:	08 95       	ret

000027ba <setup_uart0>:

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    27ba:	90 93 c5 00 	sts	0x00C5, r25
    27be:	80 93 c4 00 	sts	0x00C4, r24
    27c2:	86 e0       	ldi	r24, 0x06	; 6
    27c4:	80 93 c2 00 	sts	0x00C2, r24
    27c8:	e1 ec       	ldi	r30, 0xC1	; 193
    27ca:	f0 e0       	ldi	r31, 0x00	; 0
    27cc:	80 81       	ld	r24, Z
    27ce:	8b 7f       	andi	r24, 0xFB	; 251
    27d0:	80 83       	st	Z, r24
    27d2:	a0 ec       	ldi	r26, 0xC0	; 192
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	8c 91       	ld	r24, X
    27d8:	82 60       	ori	r24, 0x02	; 2
    27da:	8c 93       	st	X, r24
ENABLE_UART0();
    27dc:	80 81       	ld	r24, Z
    27de:	88 61       	ori	r24, 0x18	; 24
    27e0:	80 83       	st	Z, r24
}
    27e2:	08 95       	ret

000027e4 <setup_uart1>:

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    27e4:	90 93 cd 00 	sts	0x00CD, r25
    27e8:	80 93 cc 00 	sts	0x00CC, r24
    27ec:	86 e0       	ldi	r24, 0x06	; 6
    27ee:	80 93 ca 00 	sts	0x00CA, r24
    27f2:	e9 ec       	ldi	r30, 0xC9	; 201
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	80 81       	ld	r24, Z
    27f8:	8b 7f       	andi	r24, 0xFB	; 251
    27fa:	80 83       	st	Z, r24
    27fc:	a8 ec       	ldi	r26, 0xC8	; 200
    27fe:	b0 e0       	ldi	r27, 0x00	; 0
    2800:	8c 91       	ld	r24, X
    2802:	82 60       	ori	r24, 0x02	; 2
    2804:	8c 93       	st	X, r24
ENABLE_UART1();
    2806:	80 81       	ld	r24, Z
    2808:	88 61       	ori	r24, 0x18	; 24
    280a:	80 83       	st	Z, r24
}
    280c:	08 95       	ret

0000280e <nrk_setup_uart>:
 *
 * More advanced UART usage will require manually
 * setting parameters.
 */
void nrk_setup_uart(uint16_t baudrate)
{
    280e:	0f 93       	push	r16
    2810:	1f 93       	push	r17
    2812:	cf 93       	push	r28
    2814:	df 93       	push	r29

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    2816:	0e 94 dd 13 	call	0x27ba	; 0x27ba <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    281a:	c9 eb       	ldi	r28, 0xB9	; 185
    281c:	df e0       	ldi	r29, 0x0F	; 15
    281e:	0d ea       	ldi	r16, 0xAD	; 173
    2820:	1f e0       	ldi	r17, 0x0F	; 15
    2822:	ce 01       	movw	r24, r28
    2824:	b8 01       	movw	r22, r16
    2826:	0e 94 01 34 	call	0x6802	; 0x6802 <fdevopen>
    282a:	90 93 9d 07 	sts	0x079D, r25
    282e:	80 93 9c 07 	sts	0x079C, r24
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    2832:	ce 01       	movw	r24, r28
    2834:	b8 01       	movw	r22, r16
    2836:	0e 94 01 34 	call	0x6802	; 0x6802 <fdevopen>
    283a:	90 93 9b 07 	sts	0x079B, r25
    283e:	80 93 9a 07 	sts	0x079A, r24
   uart_rx_buf_start=0;
   uart_rx_buf_end=0;
   ENABLE_UART0_RX_INT();
#endif

}
    2842:	df 91       	pop	r29
    2844:	cf 91       	pop	r28
    2846:	1f 91       	pop	r17
    2848:	0f 91       	pop	r16
    284a:	08 95       	ret

0000284c <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    284c:	80 91 c8 00 	lds	r24, 0x00C8
    2850:	87 ff       	sbrs	r24, 7
    2852:	fc cf       	rjmp	.-8      	; 0x284c <getc1>
    2854:	80 91 c8 00 	lds	r24, 0x00C8
    2858:	8f 77       	andi	r24, 0x7F	; 127
    285a:	80 93 c8 00 	sts	0x00C8, r24
    285e:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    2862:	08 95       	ret

00002864 <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    286c:	01 97       	sbiw	r24, 0x01	; 1
    286e:	d1 f7       	brne	.-12     	; 0x2864 <halWait>

} // halWait
    2870:	08 95       	ret

00002872 <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    2872:	0e 94 56 35 	call	0x6aac	; 0x6aac <__eerd_byte_m128rfa1>
return v;
}
    2876:	08 95       	ret

00002878 <nrk_eeprom_write_byte>:

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    2878:	0e 94 5e 35 	call	0x6abc	; 0x6abc <__eewr_byte_m128rfa1>
}
    287c:	08 95       	ret

0000287e <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    287e:	ef 92       	push	r14
    2880:	ff 92       	push	r15
    2882:	0f 93       	push	r16
    2884:	1f 93       	push	r17
    2886:	cf 93       	push	r28
    2888:	df 93       	push	r29
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
    288a:	e8 2e       	mov	r14, r24
    288c:	e7 01       	movw	r28, r14
    288e:	7e 01       	movw	r14, r28
    2890:	f9 2e       	mov	r15, r25
    2892:	e7 01       	movw	r28, r14
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    2894:	80 e0       	ldi	r24, 0x00	; 0
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	0e 94 56 35 	call	0x6aac	; 0x6aac <__eerd_byte_m128rfa1>
    289c:	08 2f       	mov	r16, r24
    289e:	8b 83       	std	Y+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	0e 94 56 35 	call	0x6aac	; 0x6aac <__eerd_byte_m128rfa1>
    28a8:	e8 2e       	mov	r14, r24
    28aa:	8a 83       	std	Y+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    28ac:	82 e0       	ldi	r24, 0x02	; 2
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	0e 94 56 35 	call	0x6aac	; 0x6aac <__eerd_byte_m128rfa1>
    28b4:	f8 2e       	mov	r15, r24
    28b6:	89 83       	std	Y+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    28b8:	83 e0       	ldi	r24, 0x03	; 3
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	0e 94 56 35 	call	0x6aac	; 0x6aac <__eerd_byte_m128rfa1>
    28c0:	18 2f       	mov	r17, r24
    28c2:	88 83       	st	Y, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    28c4:	84 e0       	ldi	r24, 0x04	; 4
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	0e 94 56 35 	call	0x6aac	; 0x6aac <__eerd_byte_m128rfa1>
ct=buf[0];
ct+=buf[1];
    28cc:	fe 0c       	add	r15, r14
ct+=buf[2];
    28ce:	f0 0e       	add	r15, r16
ct+=buf[3];
    28d0:	f1 0e       	add	r15, r17
if(checksum==ct) return NRK_OK;
    28d2:	8f 15       	cp	r24, r15
    28d4:	11 f4       	brne	.+4      	; 0x28da <read_eeprom_mac_address+0x5c>
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	01 c0       	rjmp	.+2      	; 0x28dc <read_eeprom_mac_address+0x5e>

return NRK_ERROR;
    28da:	8f ef       	ldi	r24, 0xFF	; 255
}
    28dc:	df 91       	pop	r29
    28de:	cf 91       	pop	r28
    28e0:	1f 91       	pop	r17
    28e2:	0f 91       	pop	r16
    28e4:	ff 90       	pop	r15
    28e6:	ef 90       	pop	r14
    28e8:	08 95       	ret

000028ea <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    28ea:	cf 93       	push	r28
    28ec:	df 93       	push	r29
    28ee:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    28f0:	85 e0       	ldi	r24, 0x05	; 5
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	0e 94 56 35 	call	0x6aac	; 0x6aac <__eerd_byte_m128rfa1>
    28f8:	88 83       	st	Y, r24
return NRK_OK;
}
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	df 91       	pop	r29
    28fe:	cf 91       	pop	r28
    2900:	08 95       	ret

00002902 <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
    2902:	fc 01       	movw	r30, r24
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    2904:	86 e0       	ldi	r24, 0x06	; 6
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	60 81       	ld	r22, Z
    290a:	0e 94 5e 35 	call	0x6abc	; 0x6abc <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	08 95       	ret

00002912 <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    2912:	cf 93       	push	r28
    2914:	df 93       	push	r29
    2916:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    2918:	86 e0       	ldi	r24, 0x06	; 6
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	0e 94 56 35 	call	0x6aac	; 0x6aac <__eerd_byte_m128rfa1>
    2920:	88 83       	st	Y, r24
  return NRK_OK;
}
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	df 91       	pop	r29
    2926:	cf 91       	pop	r28
    2928:	08 95       	ret

0000292a <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    292a:	0f 93       	push	r16
    292c:	1f 93       	push	r17
    292e:	cf 93       	push	r28
    2930:	df 93       	push	r29
    2932:	08 2f       	mov	r16, r24
    2934:	19 2f       	mov	r17, r25
    2936:	c8 e0       	ldi	r28, 0x08	; 8
    2938:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    293a:	ce 01       	movw	r24, r28
    293c:	0e 94 56 35 	call	0x6aac	; 0x6aac <__eerd_byte_m128rfa1>
    2940:	f8 01       	movw	r30, r16
    2942:	81 93       	st	Z+, r24
    2944:	8f 01       	movw	r16, r30
    2946:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    2948:	c8 31       	cpi	r28, 0x18	; 24
    294a:	d1 05       	cpc	r29, r1
    294c:	b1 f7       	brne	.-20     	; 0x293a <read_eeprom_aes_key+0x10>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	df 91       	pop	r29
    2952:	cf 91       	pop	r28
    2954:	1f 91       	pop	r17
    2956:	0f 91       	pop	r16
    2958:	08 95       	ret

0000295a <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    295a:	0f 93       	push	r16
    295c:	1f 93       	push	r17
    295e:	cf 93       	push	r28
    2960:	df 93       	push	r29
    2962:	08 2f       	mov	r16, r24
    2964:	19 2f       	mov	r17, r25
    2966:	c8 e0       	ldi	r28, 0x08	; 8
    2968:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    296a:	f8 01       	movw	r30, r16
    296c:	61 91       	ld	r22, Z+
    296e:	8f 01       	movw	r16, r30
    2970:	ce 01       	movw	r24, r28
    2972:	0e 94 5e 35 	call	0x6abc	; 0x6abc <__eewr_byte_m128rfa1>
    2976:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    2978:	c8 31       	cpi	r28, 0x18	; 24
    297a:	d1 05       	cpc	r29, r1
    297c:	b1 f7       	brne	.-20     	; 0x296a <write_eeprom_aes_key+0x10>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	df 91       	pop	r29
    2982:	cf 91       	pop	r28
    2984:	1f 91       	pop	r17
    2986:	0f 91       	pop	r16
    2988:	08 95       	ret

0000298a <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    298a:	cf 93       	push	r28
    298c:	df 93       	push	r29
    298e:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    2990:	87 e0       	ldi	r24, 0x07	; 7
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	0e 94 56 35 	call	0x6aac	; 0x6aac <__eerd_byte_m128rfa1>
    2998:	88 83       	st	Y, r24
  return NRK_OK;
}
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	df 91       	pop	r29
    299e:	cf 91       	pop	r28
    29a0:	08 95       	ret

000029a2 <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    29a2:	fc 01       	movw	r30, r24
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    29a4:	87 e0       	ldi	r24, 0x07	; 7
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	60 81       	ld	r22, Z
    29aa:	0e 94 5e 35 	call	0x6abc	; 0x6abc <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	08 95       	ret

000029b2 <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    29b2:	f8 94       	cli
};
    29b4:	08 95       	ret

000029b6 <nrk_int_enable>:

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    29b6:	78 94       	sei
};
    29b8:	08 95       	ret

000029ba <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    29ba:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <nrk_int_disable>
    29be:	ff cf       	rjmp	.-2      	; 0x29be <nrk_halt+0x4>

000029c0 <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    29c0:	0f 93       	push	r16
    29c2:	1f 93       	push	r17
    29c4:	df 93       	push	r29
    29c6:	cf 93       	push	r28
    29c8:	cd b7       	in	r28, 0x3d	; 61
    29ca:	de b7       	in	r29, 0x3e	; 62
    29cc:	a3 97       	sbiw	r28, 0x23	; 35
    29ce:	0f b6       	in	r0, 0x3f	; 63
    29d0:	f8 94       	cli
    29d2:	de bf       	out	0x3e, r29	; 62
    29d4:	0f be       	out	0x3f, r0	; 63
    29d6:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    29d8:	0e 94 82 19 	call	0x3304	; 0x3304 <nrk_signal_create>
    29dc:	80 93 69 07 	sts	0x0769, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    29e0:	8f 3f       	cpi	r24, 0xFF	; 255
    29e2:	21 f4       	brne	.+8      	; 0x29ec <nrk_init+0x2c>
    29e4:	8e e0       	ldi	r24, 0x0E	; 14
    29e6:	60 e0       	ldi	r22, 0x00	; 0
    29e8:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    29ec:	0e 94 df 28 	call	0x51be	; 0x51be <_nrk_startup_error>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    29f0:	80 ff       	sbrs	r24, 0
    29f2:	04 c0       	rjmp	.+8      	; 0x29fc <nrk_init+0x3c>
    29f4:	86 e0       	ldi	r24, 0x06	; 6
    29f6:	60 e0       	ldi	r22, 0x00	; 0
    29f8:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    29fc:	10 92 6c 07 	sts	0x076C, r1
    nrk_cur_task_TCB = NULL;
    2a00:	10 92 7a 07 	sts	0x077A, r1
    2a04:	10 92 79 07 	sts	0x0779, r1
    
    nrk_high_ready_TCB = NULL;
    2a08:	10 92 6b 07 	sts	0x076B, r1
    2a0c:	10 92 6a 07 	sts	0x076A, r1
    nrk_high_ready_prio = 0; 
    2a10:	10 92 7b 07 	sts	0x077B, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    2a14:	10 92 78 07 	sts	0x0778, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    2a18:	8f ef       	ldi	r24, 0xFF	; 255
    2a1a:	80 93 62 07 	sts	0x0762, r24
    nrk_sem_list[i].value=-1;
    2a1e:	80 93 64 07 	sts	0x0764, r24
    nrk_sem_list[i].resource_ceiling=-1;
    2a22:	80 93 63 07 	sts	0x0763, r24

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    2a26:	80 93 65 07 	sts	0x0765, r24
    nrk_sem_list[i].value=-1;
    2a2a:	80 93 67 07 	sts	0x0767, r24
    nrk_sem_list[i].resource_ceiling=-1;
    2a2e:	80 93 66 07 	sts	0x0766, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2a32:	93 e6       	ldi	r25, 0x63	; 99
    2a34:	90 93 14 07 	sts	0x0714, r25
        nrk_task_TCB[i].task_ID = -1; 
    2a38:	80 93 12 07 	sts	0x0712, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2a3c:	90 93 3f 07 	sts	0x073F, r25
        nrk_task_TCB[i].task_ID = -1; 
    2a40:	80 93 3d 07 	sts	0x073D, r24
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    2a44:	81 e8       	ldi	r24, 0x81	; 129
    2a46:	97 e0       	ldi	r25, 0x07	; 7
    2a48:	90 93 80 07 	sts	0x0780, r25
    2a4c:	80 93 7f 07 	sts	0x077F, r24
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    2a50:	fc 01       	movw	r30, r24
    2a52:	35 97       	sbiw	r30, 0x05	; 5
    2a54:	f0 93 83 07 	sts	0x0783, r31
    2a58:	e0 93 82 07 	sts	0x0782, r30
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    2a5c:	9f 01       	movw	r18, r30
    2a5e:	26 5f       	subi	r18, 0xF6	; 246
    2a60:	3f 4f       	sbci	r19, 0xFF	; 255
    2a62:	31 87       	std	Z+9, r19	; 0x09
    2a64:	20 87       	std	Z+8, r18	; 0x08
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    2a66:	94 87       	std	Z+12, r25	; 0x0c
    2a68:	83 87       	std	Z+11, r24	; 0x0b
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    2a6a:	12 82       	std	Z+2, r1	; 0x02
    2a6c:	11 82       	std	Z+1, r1	; 0x01
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    2a6e:	16 86       	std	Z+14, r1	; 0x0e
    2a70:	15 86       	std	Z+13, r1	; 0x0d
	_head_node = NULL;
    2a72:	10 92 6f 07 	sts	0x076F, r1
    2a76:	10 92 6e 07 	sts	0x076E, r1
	_free_node = &_nrk_readyQ[0];
    2a7a:	f0 93 09 07 	sts	0x0709, r31
    2a7e:	e0 93 08 07 	sts	0x0708, r30
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    2a82:	8e 01       	movw	r16, r28
    2a84:	0f 5f       	subi	r16, 0xFF	; 255
    2a86:	1f 4f       	sbci	r17, 0xFF	; 255
    2a88:	c8 01       	movw	r24, r16
    2a8a:	6e ef       	ldi	r22, 0xFE	; 254
    2a8c:	72 e2       	ldi	r23, 0x22	; 34
    2a8e:	0e 94 1a 2b 	call	0x5634	; 0x5634 <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    2a92:	c8 01       	movw	r24, r16
    2a94:	6a ee       	ldi	r22, 0xEA	; 234
    2a96:	75 e0       	ldi	r23, 0x05	; 5
    2a98:	40 e8       	ldi	r20, 0x80	; 128
    2a9a:	50 e0       	ldi	r21, 0x00	; 0
    2a9c:	0e 94 1e 2b 	call	0x563c	; 0x563c <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    2aa0:	85 e5       	ldi	r24, 0x55	; 85
    2aa2:	80 93 ea 05 	sts	0x05EA, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    2aa6:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    2aa8:	1c 86       	std	Y+12, r1	; 0x0c
    2aaa:	1d 86       	std	Y+13, r1	; 0x0d
    2aac:	1e 86       	std	Y+14, r1	; 0x0e
    2aae:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    2ab0:	18 8a       	std	Y+16, r1	; 0x10
    2ab2:	19 8a       	std	Y+17, r1	; 0x11
    2ab4:	1a 8a       	std	Y+18, r1	; 0x12
    2ab6:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    2ab8:	1c 8a       	std	Y+20, r1	; 0x14
    2aba:	1d 8a       	std	Y+21, r1	; 0x15
    2abc:	1e 8a       	std	Y+22, r1	; 0x16
    2abe:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    2ac0:	18 8e       	std	Y+24, r1	; 0x18
    2ac2:	19 8e       	std	Y+25, r1	; 0x19
    2ac4:	1a 8e       	std	Y+26, r1	; 0x1a
    2ac6:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    2ac8:	1c 8e       	std	Y+28, r1	; 0x1c
    2aca:	1d 8e       	std	Y+29, r1	; 0x1d
    2acc:	1e 8e       	std	Y+30, r1	; 0x1e
    2ace:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    2ad0:	18 a2       	std	Y+32, r1	; 0x20
    2ad2:	19 a2       	std	Y+33, r1	; 0x21
    2ad4:	1a a2       	std	Y+34, r1	; 0x22
    2ad6:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    2adc:	92 e0       	ldi	r25, 0x02	; 2
    2ade:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    2ae0:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    2ae2:	c8 01       	movw	r24, r16
    2ae4:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <nrk_activate_task>
	
}
    2ae8:	a3 96       	adiw	r28, 0x23	; 35
    2aea:	0f b6       	in	r0, 0x3f	; 63
    2aec:	f8 94       	cli
    2aee:	de bf       	out	0x3e, r29	; 62
    2af0:	0f be       	out	0x3f, r0	; 63
    2af2:	cd bf       	out	0x3d, r28	; 61
    2af4:	cf 91       	pop	r28
    2af6:	df 91       	pop	r29
    2af8:	1f 91       	pop	r17
    2afa:	0f 91       	pop	r16
    2afc:	08 95       	ret

00002afe <nrk_start>:
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
    2afe:	60 91 12 07 	lds	r22, 0x0712
	// only check activated tasks
	if(task_ID!=-1)
    2b02:	6f 3f       	cpi	r22, 0xFF	; 255
    2b04:	39 f0       	breq	.+14     	; 0x2b14 <nrk_start+0x16>
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    2b06:	80 91 3d 07 	lds	r24, 0x073D
    2b0a:	68 17       	cp	r22, r24
    2b0c:	19 f4       	brne	.+6      	; 0x2b14 <nrk_start+0x16>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    2b0e:	85 e0       	ldi	r24, 0x05	; 5
    2b10:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <nrk_kernel_error_add>
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
    2b14:	60 91 3d 07 	lds	r22, 0x073D
	// only check activated tasks
	if(task_ID!=-1)
    2b18:	6f 3f       	cpi	r22, 0xFF	; 255
    2b1a:	39 f0       	breq	.+14     	; 0x2b2a <nrk_start+0x2c>
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    2b1c:	80 91 12 07 	lds	r24, 0x0712
    2b20:	68 17       	cp	r22, r24
    2b22:	19 f4       	brne	.+6      	; 0x2b2a <nrk_start+0x2c>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    2b24:	85 e0       	ldi	r24, 0x05	; 5
    2b26:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <nrk_kernel_error_add>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    2b2a:	0e 94 c0 1c 	call	0x3980	; 0x3980 <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    2b2e:	99 27       	eor	r25, r25
    2b30:	87 fd       	sbrc	r24, 7
    2b32:	90 95       	com	r25
    2b34:	2b e2       	ldi	r18, 0x2B	; 43
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	82 9f       	mul	r24, r18
    2b3a:	f0 01       	movw	r30, r0
    2b3c:	83 9f       	mul	r24, r19
    2b3e:	f0 0d       	add	r31, r0
    2b40:	92 9f       	mul	r25, r18
    2b42:	f0 0d       	add	r31, r0
    2b44:	11 24       	eor	r1, r1
    2b46:	e6 5f       	subi	r30, 0xF6	; 246
    2b48:	f8 4f       	sbci	r31, 0xF8	; 248
    2b4a:	82 85       	ldd	r24, Z+10	; 0x0a
    2b4c:	80 93 7b 07 	sts	0x077B, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    2b50:	f0 93 7a 07 	sts	0x077A, r31
    2b54:	e0 93 79 07 	sts	0x0779, r30
    2b58:	f0 93 6b 07 	sts	0x076B, r31
    2b5c:	e0 93 6a 07 	sts	0x076A, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    2b60:	80 93 6c 07 	sts	0x076C, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    2b64:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <nrk_target_start>
    nrk_stack_pointer_init(); 
    2b68:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    2b6c:	0e 94 83 2b 	call	0x5706	; 0x5706 <nrk_start_high_ready_task>
    2b70:	ff cf       	rjmp	.-2      	; 0x2b70 <nrk_start+0x72>

00002b72 <nrk_TCB_init>:
    while(1);
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    2b72:	cf 92       	push	r12
    2b74:	df 92       	push	r13
    2b76:	ef 92       	push	r14
    2b78:	ff 92       	push	r15
    2b7a:	0f 93       	push	r16
    2b7c:	1f 93       	push	r17
    2b7e:	cf 93       	push	r28
    2b80:	df 93       	push	r29
    2b82:	ec 01       	movw	r28, r24
    2b84:	8b 01       	movw	r16, r22
    2b86:	6a 01       	movw	r12, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    2b88:	89 85       	ldd	r24, Y+9	; 0x09
    2b8a:	82 30       	cpi	r24, 0x02	; 2
    2b8c:	21 f0       	breq	.+8      	; 0x2b96 <nrk_TCB_init+0x24>
    	Task->task_ID=nrk_task_init_cnt;
    2b8e:	80 91 68 07 	lds	r24, 0x0768
    2b92:	88 83       	st	Y, r24
    2b94:	01 c0       	rjmp	.+2      	; 0x2b98 <nrk_TCB_init+0x26>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    2b96:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    2b98:	80 91 68 07 	lds	r24, 0x0768
    2b9c:	82 30       	cpi	r24, 0x02	; 2
    2b9e:	20 f0       	brcs	.+8      	; 0x2ba8 <nrk_TCB_init+0x36>
    2ba0:	87 e0       	ldi	r24, 0x07	; 7
    2ba2:	60 e0       	ldi	r22, 0x00	; 0
    2ba4:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    2ba8:	89 85       	ldd	r24, Y+9	; 0x09
    2baa:	82 30       	cpi	r24, 0x02	; 2
    2bac:	29 f0       	breq	.+10     	; 0x2bb8 <nrk_TCB_init+0x46>
    2bae:	80 91 68 07 	lds	r24, 0x0768
    2bb2:	8f 5f       	subi	r24, 0xFF	; 255
    2bb4:	80 93 68 07 	sts	0x0768, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    2bb8:	80 91 68 07 	lds	r24, 0x0768
    2bbc:	88 23       	and	r24, r24
    2bbe:	19 f4       	brne	.+6      	; 0x2bc6 <nrk_TCB_init+0x54>
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	80 93 68 07 	sts	0x0768, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    2bc6:	28 81       	ld	r18, Y
    2bc8:	33 27       	eor	r19, r19
    2bca:	27 fd       	sbrc	r18, 7
    2bcc:	30 95       	com	r19
    2bce:	8b e2       	ldi	r24, 0x2B	; 43
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	28 9f       	mul	r18, r24
    2bd4:	f0 01       	movw	r30, r0
    2bd6:	29 9f       	mul	r18, r25
    2bd8:	f0 0d       	add	r31, r0
    2bda:	38 9f       	mul	r19, r24
    2bdc:	f0 0d       	add	r31, r0
    2bde:	11 24       	eor	r1, r1
    2be0:	e6 5f       	subi	r30, 0xF6	; 246
    2be2:	f8 4f       	sbci	r31, 0xF8	; 248
    2be4:	11 83       	std	Z+1, r17	; 0x01
    2be6:	00 83       	st	Z, r16
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    2be8:	28 85       	ldd	r18, Y+8	; 0x08
    2bea:	22 87       	std	Z+10, r18	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    2bec:	28 81       	ld	r18, Y
    2bee:	33 27       	eor	r19, r19
    2bf0:	27 fd       	sbrc	r18, 7
    2bf2:	30 95       	com	r19
    2bf4:	28 9f       	mul	r18, r24
    2bf6:	f0 01       	movw	r30, r0
    2bf8:	29 9f       	mul	r18, r25
    2bfa:	f0 0d       	add	r31, r0
    2bfc:	38 9f       	mul	r19, r24
    2bfe:	f0 0d       	add	r31, r0
    2c00:	11 24       	eor	r1, r1
    2c02:	e6 5f       	subi	r30, 0xF6	; 246
    2c04:	f8 4f       	sbci	r31, 0xF8	; 248
    2c06:	23 e0       	ldi	r18, 0x03	; 3
    2c08:	21 87       	std	Z+9, r18	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    2c0a:	48 81       	ld	r20, Y
    2c0c:	24 2f       	mov	r18, r20
    2c0e:	33 27       	eor	r19, r19
    2c10:	27 fd       	sbrc	r18, 7
    2c12:	30 95       	com	r19
    2c14:	28 9f       	mul	r18, r24
    2c16:	f0 01       	movw	r30, r0
    2c18:	29 9f       	mul	r18, r25
    2c1a:	f0 0d       	add	r31, r0
    2c1c:	38 9f       	mul	r19, r24
    2c1e:	f0 0d       	add	r31, r0
    2c20:	11 24       	eor	r1, r1
    2c22:	e6 5f       	subi	r30, 0xF6	; 246
    2c24:	f8 4f       	sbci	r31, 0xF8	; 248
    2c26:	40 87       	std	Z+8, r20	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    2c28:	28 81       	ld	r18, Y
    2c2a:	33 27       	eor	r19, r19
    2c2c:	27 fd       	sbrc	r18, 7
    2c2e:	30 95       	com	r19
    2c30:	28 9f       	mul	r18, r24
    2c32:	80 01       	movw	r16, r0
    2c34:	29 9f       	mul	r18, r25
    2c36:	10 0d       	add	r17, r0
    2c38:	38 9f       	mul	r19, r24
    2c3a:	10 0d       	add	r17, r0
    2c3c:	11 24       	eor	r1, r1
    2c3e:	06 5f       	subi	r16, 0xF6	; 246
    2c40:	18 4f       	sbci	r17, 0xF8	; 248
    2c42:	f8 01       	movw	r30, r16
    2c44:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
    2c46:	ce 01       	movw	r24, r28
    2c48:	0b 96       	adiw	r24, 0x0b	; 11
    2c4a:	0e 94 77 22 	call	0x44ee	; 0x44ee <_nrk_time_to_ticks_long>
    2c4e:	f8 01       	movw	r30, r16
    2c50:	61 a3       	std	Z+33, r22	; 0x21
    2c52:	72 a3       	std	Z+34, r23	; 0x22
    2c54:	83 a3       	std	Z+35, r24	; 0x23
    2c56:	94 a3       	std	Z+36, r25	; 0x24
    if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    2c58:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c5a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c5c:	ad 85       	ldd	r26, Y+13	; 0x0d
    2c5e:	be 85       	ldd	r27, Y+14	; 0x0e
    2c60:	88 33       	cpi	r24, 0x38	; 56
    2c62:	f9 e8       	ldi	r31, 0x89	; 137
    2c64:	9f 07       	cpc	r25, r31
    2c66:	f1 e4       	ldi	r31, 0x41	; 65
    2c68:	af 07       	cpc	r26, r31
    2c6a:	f0 e0       	ldi	r31, 0x00	; 0
    2c6c:	bf 07       	cpc	r27, r31
    2c6e:	20 f0       	brcs	.+8      	; 0x2c78 <nrk_TCB_init+0x106>
    2c70:	86 e1       	ldi	r24, 0x16	; 22
    2c72:	68 81       	ld	r22, Y
    2c74:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
    2c78:	08 81       	ld	r16, Y
    2c7a:	11 27       	eor	r17, r17
    2c7c:	07 fd       	sbrc	r16, 7
    2c7e:	10 95       	com	r17
    2c80:	ce 01       	movw	r24, r28
    2c82:	4b 96       	adiw	r24, 0x1b	; 27
    2c84:	0e 94 77 22 	call	0x44ee	; 0x44ee <_nrk_time_to_ticks_long>
    2c88:	2b e2       	ldi	r18, 0x2B	; 43
    2c8a:	e2 2e       	mov	r14, r18
    2c8c:	f1 2c       	mov	r15, r1
    2c8e:	0e 9d       	mul	r16, r14
    2c90:	f0 01       	movw	r30, r0
    2c92:	0f 9d       	mul	r16, r15
    2c94:	f0 0d       	add	r31, r0
    2c96:	1e 9d       	mul	r17, r14
    2c98:	f0 0d       	add	r31, r0
    2c9a:	11 24       	eor	r1, r1
    2c9c:	e6 5f       	subi	r30, 0xF6	; 246
    2c9e:	f8 4f       	sbci	r31, 0xF8	; 248
    2ca0:	65 8b       	std	Z+21, r22	; 0x15
    2ca2:	76 8b       	std	Z+22, r23	; 0x16
    2ca4:	87 8b       	std	Z+23, r24	; 0x17
    2ca6:	90 8f       	std	Z+24, r25	; 0x18
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    2ca8:	88 81       	ld	r24, Y
    2caa:	99 27       	eor	r25, r25
    2cac:	87 fd       	sbrc	r24, 7
    2cae:	90 95       	com	r25
    2cb0:	8e 9d       	mul	r24, r14
    2cb2:	80 01       	movw	r16, r0
    2cb4:	8f 9d       	mul	r24, r15
    2cb6:	10 0d       	add	r17, r0
    2cb8:	9e 9d       	mul	r25, r14
    2cba:	10 0d       	add	r17, r0
    2cbc:	11 24       	eor	r1, r1
    2cbe:	06 5f       	subi	r16, 0xF6	; 246
    2cc0:	18 4f       	sbci	r17, 0xF8	; 248
    2cc2:	f8 01       	movw	r30, r16
    2cc4:	85 89       	ldd	r24, Z+21	; 0x15
    2cc6:	96 89       	ldd	r25, Z+22	; 0x16
    2cc8:	a7 89       	ldd	r26, Z+23	; 0x17
    2cca:	b0 8d       	ldd	r27, Z+24	; 0x18
    2ccc:	21 a1       	ldd	r18, Z+33	; 0x21
    2cce:	32 a1       	ldd	r19, Z+34	; 0x22
    2cd0:	43 a1       	ldd	r20, Z+35	; 0x23
    2cd2:	54 a1       	ldd	r21, Z+36	; 0x24
    2cd4:	82 0f       	add	r24, r18
    2cd6:	93 1f       	adc	r25, r19
    2cd8:	a4 1f       	adc	r26, r20
    2cda:	b5 1f       	adc	r27, r21
    2cdc:	81 8f       	std	Z+25, r24	; 0x19
    2cde:	92 8f       	std	Z+26, r25	; 0x1a
    2ce0:	a3 8f       	std	Z+27, r26	; 0x1b
    2ce2:	b4 8f       	std	Z+28, r27	; 0x1c
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
    2ce4:	ce 01       	movw	r24, r28
    2ce6:	43 96       	adiw	r24, 0x13	; 19
    2ce8:	0e 94 77 22 	call	0x44ee	; 0x44ee <_nrk_time_to_ticks_long>
    2cec:	f8 01       	movw	r30, r16
    2cee:	65 a3       	std	Z+37, r22	; 0x25
    2cf0:	76 a3       	std	Z+38, r23	; 0x26
    2cf2:	87 a3       	std	Z+39, r24	; 0x27
    2cf4:	90 a7       	std	Z+40, r25	; 0x28
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    2cf6:	88 81       	ld	r24, Y
    2cf8:	99 27       	eor	r25, r25
    2cfa:	87 fd       	sbrc	r24, 7
    2cfc:	90 95       	com	r25
    2cfe:	8e 9d       	mul	r24, r14
    2d00:	f0 01       	movw	r30, r0
    2d02:	8f 9d       	mul	r24, r15
    2d04:	f0 0d       	add	r31, r0
    2d06:	9e 9d       	mul	r25, r14
    2d08:	f0 0d       	add	r31, r0
    2d0a:	11 24       	eor	r1, r1
    2d0c:	e6 5f       	subi	r30, 0xF6	; 246
    2d0e:	f8 4f       	sbci	r31, 0xF8	; 248
    2d10:	85 a1       	ldd	r24, Z+37	; 0x25
    2d12:	96 a1       	ldd	r25, Z+38	; 0x26
    2d14:	a7 a1       	ldd	r26, Z+39	; 0x27
    2d16:	b0 a5       	ldd	r27, Z+40	; 0x28
    2d18:	85 8f       	std	Z+29, r24	; 0x1d
    2d1a:	96 8f       	std	Z+30, r25	; 0x1e
    2d1c:	a7 8f       	std	Z+31, r26	; 0x1f
    2d1e:	b0 a3       	std	Z+32, r27	; 0x20
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    2d20:	81 e0       	ldi	r24, 0x01	; 1
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	92 a7       	std	Z+42, r25	; 0x2a
    2d26:	81 a7       	std	Z+41, r24	; 0x29
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    2d28:	d3 82       	std	Z+3, r13	; 0x03
    2d2a:	c2 82       	std	Z+2, r12	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    2d30:	df 91       	pop	r29
    2d32:	cf 91       	pop	r28
    2d34:	1f 91       	pop	r17
    2d36:	0f 91       	pop	r16
    2d38:	ff 90       	pop	r15
    2d3a:	ef 90       	pop	r14
    2d3c:	df 90       	pop	r13
    2d3e:	cf 90       	pop	r12
    2d40:	08 95       	ret

00002d42 <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    2d42:	0e 94 24 23 	call	0x4648	; 0x4648 <_nrk_scheduler>

  	return;
}
    2d46:	08 95       	ret

00002d48 <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    2d48:	85 e6       	ldi	r24, 0x65	; 101
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	08 95       	ret

00002d4e <_nrk_errno_set>:
void blink_morse_code_error( uint8_t number );


void _nrk_errno_set (NRK_ERRNO error_code)
{
    nrk_cur_task_TCB->errno = error_code;
    2d4e:	e0 91 79 07 	lds	r30, 0x0779
    2d52:	f0 91 7a 07 	lds	r31, 0x077A
    2d56:	84 87       	std	Z+12, r24	; 0x0c
}
    2d58:	08 95       	ret

00002d5a <nrk_errno_get>:

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    2d5a:	e0 91 79 07 	lds	r30, 0x0779
    2d5e:	f0 91 7a 07 	lds	r31, 0x077A
}
    2d62:	84 85       	ldd	r24, Z+12	; 0x0c
    2d64:	08 95       	ret

00002d66 <nrk_error_get>:
}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    if (error_num == 0)
    2d66:	20 91 e9 05 	lds	r18, 0x05E9
    2d6a:	22 23       	and	r18, r18
    2d6c:	41 f0       	breq	.+16     	; 0x2d7e <nrk_error_get+0x18>
        return 0;
    *code = error_num;
    2d6e:	fb 01       	movw	r30, r22
    2d70:	20 83       	st	Z, r18
    *task_id = error_task;
    2d72:	20 91 3c 05 	lds	r18, 0x053C
    2d76:	fc 01       	movw	r30, r24
    2d78:	20 83       	st	Z, r18
    return 1;
    2d7a:	81 e0       	ldi	r24, 0x01	; 1
    2d7c:	08 95       	ret


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    if (error_num == 0)
        return 0;
    2d7e:	80 e0       	ldi	r24, 0x00	; 0
    *code = error_num;
    *task_id = error_task;
    return 1;
}
    2d80:	08 95       	ret

00002d82 <nrk_error_print>:

int8_t nrk_error_print ()
{
    int8_t t=0,i=0;
    if (error_num == 0)
    2d82:	80 91 e9 05 	lds	r24, 0x05E9
    2d86:	88 23       	and	r24, r24
    2d88:	09 f4       	brne	.+2      	; 0x2d8c <nrk_error_print+0xa>
    2d8a:	90 c0       	rjmp	.+288    	; 0x2eac <nrk_error_print+0x12a>
    nrk_watchdog_disable();
#endif
#endif

#ifndef NRK_REBOOT_ON_ERROR
    nrk_int_disable ();
    2d8c:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <nrk_int_disable>
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    2d90:	86 eb       	ldi	r24, 0xB6	; 182
    2d92:	93 e0       	ldi	r25, 0x03	; 3
    2d94:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <nrk_kprintf>
        printf ("%d", error_task);
    2d98:	00 d0       	rcall	.+0      	; 0x2d9a <nrk_error_print+0x18>
    2d9a:	00 d0       	rcall	.+0      	; 0x2d9c <nrk_error_print+0x1a>
    2d9c:	ed b7       	in	r30, 0x3d	; 61
    2d9e:	fe b7       	in	r31, 0x3e	; 62
    2da0:	31 96       	adiw	r30, 0x01	; 1
    2da2:	8e ed       	ldi	r24, 0xDE	; 222
    2da4:	93 e0       	ldi	r25, 0x03	; 3
    2da6:	ad b7       	in	r26, 0x3d	; 61
    2da8:	be b7       	in	r27, 0x3e	; 62
    2daa:	12 96       	adiw	r26, 0x02	; 2
    2dac:	9c 93       	st	X, r25
    2dae:	8e 93       	st	-X, r24
    2db0:	11 97       	sbiw	r26, 0x01	; 1
    2db2:	80 91 3c 05 	lds	r24, 0x053C
    2db6:	82 83       	std	Z+2, r24	; 0x02
    2db8:	13 82       	std	Z+3, r1	; 0x03
    2dba:	0e 94 78 34 	call	0x68f0	; 0x68f0 <printf>
        nrk_kprintf (PSTR ("): "));
    2dbe:	0f 90       	pop	r0
    2dc0:	0f 90       	pop	r0
    2dc2:	0f 90       	pop	r0
    2dc4:	0f 90       	pop	r0
    2dc6:	82 eb       	ldi	r24, 0xB2	; 178
    2dc8:	93 e0       	ldi	r25, 0x03	; 3
    2dca:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    2dce:	80 91 e9 05 	lds	r24, 0x05E9
    2dd2:	88 31       	cpi	r24, 0x18	; 24
    2dd4:	10 f0       	brcs	.+4      	; 0x2dda <nrk_error_print+0x58>
            error_num = NRK_UNKOWN;
    2dd6:	10 92 e9 05 	sts	0x05E9, r1
        switch (error_num)
    2dda:	80 91 e9 05 	lds	r24, 0x05E9
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	01 97       	sbiw	r24, 0x01	; 1
    2de2:	86 31       	cpi	r24, 0x16	; 22
    2de4:	91 05       	cpc	r25, r1
    2de6:	08 f0       	brcs	.+2      	; 0x2dea <nrk_error_print+0x68>
    2de8:	4b c0       	rjmp	.+150    	; 0x2e80 <nrk_error_print+0xfe>
    2dea:	80 57       	subi	r24, 0x70	; 112
    2dec:	9f 4f       	sbci	r25, 0xFF	; 255
    2dee:	fc 01       	movw	r30, r24
    2df0:	ee 0f       	add	r30, r30
    2df2:	ff 1f       	adc	r31, r31
    2df4:	05 90       	lpm	r0, Z+
    2df6:	f4 91       	lpm	r31, Z+
    2df8:	e0 2d       	mov	r30, r0
    2dfa:	09 94       	ijmp
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    2dfc:	86 e7       	ldi	r24, 0x76	; 118
    2dfe:	93 e0       	ldi	r25, 0x03	; 3
    2e00:	41 c0       	rjmp	.+130    	; 0x2e84 <nrk_error_print+0x102>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    2e02:	8f e4       	ldi	r24, 0x4F	; 79
    2e04:	93 e0       	ldi	r25, 0x03	; 3
    2e06:	3e c0       	rjmp	.+124    	; 0x2e84 <nrk_error_print+0x102>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    2e08:	8b e3       	ldi	r24, 0x3B	; 59
    2e0a:	93 e0       	ldi	r25, 0x03	; 3
    2e0c:	3b c0       	rjmp	.+118    	; 0x2e84 <nrk_error_print+0x102>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    2e0e:	85 e2       	ldi	r24, 0x25	; 37
    2e10:	93 e0       	ldi	r25, 0x03	; 3
    2e12:	38 c0       	rjmp	.+112    	; 0x2e84 <nrk_error_print+0x102>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    2e14:	8a e0       	ldi	r24, 0x0A	; 10
    2e16:	93 e0       	ldi	r25, 0x03	; 3
    2e18:	35 c0       	rjmp	.+106    	; 0x2e84 <nrk_error_print+0x102>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    2e1a:	84 ef       	ldi	r24, 0xF4	; 244
    2e1c:	92 e0       	ldi	r25, 0x02	; 2
    2e1e:	32 c0       	rjmp	.+100    	; 0x2e84 <nrk_error_print+0x102>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    2e20:	8c ed       	ldi	r24, 0xDC	; 220
    2e22:	92 e0       	ldi	r25, 0x02	; 2
    2e24:	2f c0       	rjmp	.+94     	; 0x2e84 <nrk_error_print+0x102>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    2e26:	89 ec       	ldi	r24, 0xC9	; 201
    2e28:	92 e0       	ldi	r25, 0x02	; 2
    2e2a:	2c c0       	rjmp	.+88     	; 0x2e84 <nrk_error_print+0x102>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    2e2c:	86 eb       	ldi	r24, 0xB6	; 182
    2e2e:	92 e0       	ldi	r25, 0x02	; 2
    2e30:	29 c0       	rjmp	.+82     	; 0x2e84 <nrk_error_print+0x102>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    2e32:	88 e9       	ldi	r24, 0x98	; 152
    2e34:	92 e0       	ldi	r25, 0x02	; 2
    2e36:	26 c0       	rjmp	.+76     	; 0x2e84 <nrk_error_print+0x102>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    2e38:	83 e7       	ldi	r24, 0x73	; 115
    2e3a:	92 e0       	ldi	r25, 0x02	; 2
    2e3c:	23 c0       	rjmp	.+70     	; 0x2e84 <nrk_error_print+0x102>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    2e3e:	87 e6       	ldi	r24, 0x67	; 103
    2e40:	92 e0       	ldi	r25, 0x02	; 2
    2e42:	20 c0       	rjmp	.+64     	; 0x2e84 <nrk_error_print+0x102>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    2e44:	8c e4       	ldi	r24, 0x4C	; 76
    2e46:	92 e0       	ldi	r25, 0x02	; 2
    2e48:	1d c0       	rjmp	.+58     	; 0x2e84 <nrk_error_print+0x102>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    2e4a:	8d e3       	ldi	r24, 0x3D	; 61
    2e4c:	92 e0       	ldi	r25, 0x02	; 2
    2e4e:	1a c0       	rjmp	.+52     	; 0x2e84 <nrk_error_print+0x102>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    2e50:	89 e2       	ldi	r24, 0x29	; 41
    2e52:	92 e0       	ldi	r25, 0x02	; 2
    2e54:	17 c0       	rjmp	.+46     	; 0x2e84 <nrk_error_print+0x102>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    2e56:	88 e1       	ldi	r24, 0x18	; 24
    2e58:	92 e0       	ldi	r25, 0x02	; 2
    2e5a:	14 c0       	rjmp	.+40     	; 0x2e84 <nrk_error_print+0x102>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    2e5c:	84 e0       	ldi	r24, 0x04	; 4
    2e5e:	92 e0       	ldi	r25, 0x02	; 2
    2e60:	11 c0       	rjmp	.+34     	; 0x2e84 <nrk_error_print+0x102>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    2e62:	84 ee       	ldi	r24, 0xE4	; 228
    2e64:	91 e0       	ldi	r25, 0x01	; 1
    2e66:	0e c0       	rjmp	.+28     	; 0x2e84 <nrk_error_print+0x102>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    2e68:	8c ec       	ldi	r24, 0xCC	; 204
    2e6a:	91 e0       	ldi	r25, 0x01	; 1
    2e6c:	0b c0       	rjmp	.+22     	; 0x2e84 <nrk_error_print+0x102>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    2e6e:	81 eb       	ldi	r24, 0xB1	; 177
    2e70:	91 e0       	ldi	r25, 0x01	; 1
    2e72:	08 c0       	rjmp	.+16     	; 0x2e84 <nrk_error_print+0x102>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    2e74:	80 ea       	ldi	r24, 0xA0	; 160
    2e76:	91 e0       	ldi	r25, 0x01	; 1
    2e78:	05 c0       	rjmp	.+10     	; 0x2e84 <nrk_error_print+0x102>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    2e7a:	81 e9       	ldi	r24, 0x91	; 145
    2e7c:	91 e0       	ldi	r25, 0x01	; 1
    2e7e:	02 c0       	rjmp	.+4      	; 0x2e84 <nrk_error_print+0x102>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    2e80:	8a e8       	ldi	r24, 0x8A	; 138
    2e82:	91 e0       	ldi	r25, 0x01	; 1
    2e84:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <nrk_kprintf>
        }
        putchar ('\r');
    2e88:	60 91 9c 07 	lds	r22, 0x079C
    2e8c:	70 91 9d 07 	lds	r23, 0x079D
    2e90:	8d e0       	ldi	r24, 0x0D	; 13
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	0e 94 4c 34 	call	0x6898	; 0x6898 <fputc>
        putchar ('\n');
    2e98:	60 91 9c 07 	lds	r22, 0x079C
    2e9c:	70 91 9d 07 	lds	r23, 0x079D
    2ea0:	8a e0       	ldi	r24, 0x0A	; 10
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	0e 94 4c 34 	call	0x6898	; 0x6898 <fputc>
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    2ea8:	10 92 e9 05 	sts	0x05E9, r1
    return t;
}
    2eac:	80 e0       	ldi	r24, 0x00	; 0
    2eae:	08 95       	ret

00002eb0 <nrk_kernel_error_add>:
#endif  /*  */
}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    error_num = n;
    2eb0:	80 93 e9 05 	sts	0x05E9, r24
    error_task = task;
    2eb4:	60 93 3c 05 	sts	0x053C, r22
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    2eb8:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <nrk_error_print>
#endif  /*  */




}
    2ebc:	08 95       	ret

00002ebe <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    2ebe:	80 93 e9 05 	sts	0x05E9, r24
    error_task = nrk_cur_task_TCB->task_ID;
    2ec2:	e0 91 79 07 	lds	r30, 0x0779
    2ec6:	f0 91 7a 07 	lds	r31, 0x077A
    2eca:	80 85       	ldd	r24, Z+8	; 0x08
    2ecc:	80 93 3c 05 	sts	0x053C, r24
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    2ed0:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <nrk_error_print>
#endif  /*  */
}
    2ed4:	08 95       	ret

00002ed6 <pause>:
    }

}

void pause()
{
    2ed6:	df 93       	push	r29
    2ed8:	cf 93       	push	r28
    2eda:	0f 92       	push	r0
    2edc:	cd b7       	in	r28, 0x3d	; 61
    2ede:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    2ee0:	19 82       	std	Y+1, r1	; 0x01
    2ee2:	07 c0       	rjmp	.+14     	; 0x2ef2 <pause+0x1c>
        nrk_spin_wait_us (2000);
    2ee4:	80 ed       	ldi	r24, 0xD0	; 208
    2ee6:	97 e0       	ldi	r25, 0x07	; 7
    2ee8:	0e 94 0d 27 	call	0x4e1a	; 0x4e1a <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    2eec:	89 81       	ldd	r24, Y+1	; 0x01
    2eee:	8f 5f       	subi	r24, 0xFF	; 255
    2ef0:	89 83       	std	Y+1, r24	; 0x01
    2ef2:	89 81       	ldd	r24, Y+1	; 0x01
    2ef4:	84 36       	cpi	r24, 0x64	; 100
    2ef6:	b0 f3       	brcs	.-20     	; 0x2ee4 <pause+0xe>
        nrk_spin_wait_us (2000);
}
    2ef8:	0f 90       	pop	r0
    2efa:	cf 91       	pop	r28
    2efc:	df 91       	pop	r29
    2efe:	08 95       	ret

00002f00 <blink_dot>:
    pause();
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	0e 94 b4 13 	call	0x2768	; 0x2768 <nrk_led_set>
    pause();
    2f08:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <pause>
    nrk_led_clr(GREEN_LED);
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	0e 94 9c 13 	call	0x2738	; 0x2738 <nrk_led_clr>
    pause();
    2f14:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <pause>
}
    2f18:	08 95       	ret

00002f1a <blink_dash>:
    return t;
}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    2f1a:	81 e0       	ldi	r24, 0x01	; 1
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	0e 94 b4 13 	call	0x2768	; 0x2768 <nrk_led_set>
    pause();
    2f22:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <pause>
    pause();
    2f26:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <pause>
    pause();
    2f2a:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <pause>
    nrk_led_clr(GREEN_LED);
    2f2e:	81 e0       	ldi	r24, 0x01	; 1
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	0e 94 9c 13 	call	0x2738	; 0x2738 <nrk_led_clr>
    pause();
    2f36:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <pause>
}
    2f3a:	08 95       	ret

00002f3c <blink_morse_code_error>:
    pause();
}


void blink_morse_code_error( uint8_t number )
{
    2f3c:	ff 92       	push	r15
    2f3e:	0f 93       	push	r16
    2f40:	1f 93       	push	r17
    2f42:	df 93       	push	r29
    2f44:	cf 93       	push	r28
    2f46:	00 d0       	rcall	.+0      	; 0x2f48 <blink_morse_code_error+0xc>
    2f48:	0f 92       	push	r0
    2f4a:	cd b7       	in	r28, 0x3d	; 61
    2f4c:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    2f4e:	00 d0       	rcall	.+0      	; 0x2f50 <blink_morse_code_error+0x14>
    2f50:	00 d0       	rcall	.+0      	; 0x2f52 <blink_morse_code_error+0x16>
    2f52:	00 d0       	rcall	.+0      	; 0x2f54 <blink_morse_code_error+0x18>
    2f54:	ed b7       	in	r30, 0x3d	; 61
    2f56:	fe b7       	in	r31, 0x3e	; 62
    2f58:	31 96       	adiw	r30, 0x01	; 1
    2f5a:	8e 01       	movw	r16, r28
    2f5c:	0f 5f       	subi	r16, 0xFF	; 255
    2f5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f60:	ad b7       	in	r26, 0x3d	; 61
    2f62:	be b7       	in	r27, 0x3e	; 62
    2f64:	12 96       	adiw	r26, 0x02	; 2
    2f66:	1c 93       	st	X, r17
    2f68:	0e 93       	st	-X, r16
    2f6a:	11 97       	sbiw	r26, 0x01	; 1
    2f6c:	2e ed       	ldi	r18, 0xDE	; 222
    2f6e:	33 e0       	ldi	r19, 0x03	; 3
    2f70:	33 83       	std	Z+3, r19	; 0x03
    2f72:	22 83       	std	Z+2, r18	; 0x02
    2f74:	84 83       	std	Z+4, r24	; 0x04
    2f76:	15 82       	std	Z+5, r1	; 0x05
    2f78:	0e 94 c8 34 	call	0x6990	; 0x6990 <sprintf>

    for(i=0; i<strlen(str); i++ )
    2f7c:	ed b7       	in	r30, 0x3d	; 61
    2f7e:	fe b7       	in	r31, 0x3e	; 62
    2f80:	36 96       	adiw	r30, 0x06	; 6
    2f82:	0f b6       	in	r0, 0x3f	; 63
    2f84:	f8 94       	cli
    2f86:	fe bf       	out	0x3e, r31	; 62
    2f88:	0f be       	out	0x3f, r0	; 63
    2f8a:	ed bf       	out	0x3d, r30	; 61
    2f8c:	ff 24       	eor	r15, r15
    2f8e:	72 c0       	rjmp	.+228    	; 0x3074 <blink_morse_code_error+0x138>
    {
        switch( str[i])
    2f90:	80 0f       	add	r24, r16
    2f92:	91 1f       	adc	r25, r17
    2f94:	dc 01       	movw	r26, r24
    2f96:	8c 91       	ld	r24, X
    2f98:	84 33       	cpi	r24, 0x34	; 52
    2f9a:	d1 f1       	breq	.+116    	; 0x3010 <blink_morse_code_error+0xd4>
    2f9c:	85 33       	cpi	r24, 0x35	; 53
    2f9e:	70 f4       	brcc	.+28     	; 0x2fbc <blink_morse_code_error+0x80>
    2fa0:	81 33       	cpi	r24, 0x31	; 49
    2fa2:	f9 f0       	breq	.+62     	; 0x2fe2 <blink_morse_code_error+0xa6>
    2fa4:	82 33       	cpi	r24, 0x32	; 50
    2fa6:	20 f4       	brcc	.+8      	; 0x2fb0 <blink_morse_code_error+0x74>
    2fa8:	80 33       	cpi	r24, 0x30	; 48
    2faa:	09 f0       	breq	.+2      	; 0x2fae <blink_morse_code_error+0x72>
    2fac:	5c c0       	rjmp	.+184    	; 0x3066 <blink_morse_code_error+0x12a>
    2fae:	16 c0       	rjmp	.+44     	; 0x2fdc <blink_morse_code_error+0xa0>
    2fb0:	82 33       	cpi	r24, 0x32	; 50
    2fb2:	11 f1       	breq	.+68     	; 0x2ff8 <blink_morse_code_error+0xbc>
    2fb4:	83 33       	cpi	r24, 0x33	; 51
    2fb6:	09 f0       	breq	.+2      	; 0x2fba <blink_morse_code_error+0x7e>
    2fb8:	56 c0       	rjmp	.+172    	; 0x3066 <blink_morse_code_error+0x12a>
    2fba:	23 c0       	rjmp	.+70     	; 0x3002 <blink_morse_code_error+0xc6>
    2fbc:	87 33       	cpi	r24, 0x37	; 55
    2fbe:	c9 f1       	breq	.+114    	; 0x3032 <blink_morse_code_error+0xf6>
    2fc0:	88 33       	cpi	r24, 0x38	; 56
    2fc2:	30 f4       	brcc	.+12     	; 0x2fd0 <blink_morse_code_error+0x94>
    2fc4:	85 33       	cpi	r24, 0x35	; 53
    2fc6:	69 f1       	breq	.+90     	; 0x3022 <blink_morse_code_error+0xe6>
    2fc8:	86 33       	cpi	r24, 0x36	; 54
    2fca:	09 f0       	breq	.+2      	; 0x2fce <blink_morse_code_error+0x92>
    2fcc:	4c c0       	rjmp	.+152    	; 0x3066 <blink_morse_code_error+0x12a>
    2fce:	2c c0       	rjmp	.+88     	; 0x3028 <blink_morse_code_error+0xec>
    2fd0:	88 33       	cpi	r24, 0x38	; 56
    2fd2:	b1 f1       	breq	.+108    	; 0x3040 <blink_morse_code_error+0x104>
    2fd4:	89 33       	cpi	r24, 0x39	; 57
    2fd6:	09 f0       	breq	.+2      	; 0x2fda <blink_morse_code_error+0x9e>
    2fd8:	46 c0       	rjmp	.+140    	; 0x3066 <blink_morse_code_error+0x12a>
    2fda:	3b c0       	rjmp	.+118    	; 0x3052 <blink_morse_code_error+0x116>
        {
        case '0':
            blink_dash();
    2fdc:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <blink_dash>
    2fe0:	02 c0       	rjmp	.+4      	; 0x2fe6 <blink_morse_code_error+0xaa>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    2fe2:	0e 94 80 17 	call	0x2f00	; 0x2f00 <blink_dot>
            blink_dash();
    2fe6:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <blink_dash>
            blink_dash();
    2fea:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <blink_dash>
            blink_dash();
    2fee:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <blink_dash>
            blink_dash();
    2ff2:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <blink_dash>
            break;
    2ff6:	37 c0       	rjmp	.+110    	; 0x3066 <blink_morse_code_error+0x12a>
        case '2':
            blink_dot();
    2ff8:	0e 94 80 17 	call	0x2f00	; 0x2f00 <blink_dot>
            blink_dot();
    2ffc:	0e 94 80 17 	call	0x2f00	; 0x2f00 <blink_dot>
    3000:	f4 cf       	rjmp	.-24     	; 0x2fea <blink_morse_code_error+0xae>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    3002:	0e 94 80 17 	call	0x2f00	; 0x2f00 <blink_dot>
            blink_dot();
    3006:	0e 94 80 17 	call	0x2f00	; 0x2f00 <blink_dot>
            blink_dot();
    300a:	0e 94 80 17 	call	0x2f00	; 0x2f00 <blink_dot>
    300e:	ef cf       	rjmp	.-34     	; 0x2fee <blink_morse_code_error+0xb2>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    3010:	0e 94 80 17 	call	0x2f00	; 0x2f00 <blink_dot>
            blink_dot();
    3014:	0e 94 80 17 	call	0x2f00	; 0x2f00 <blink_dot>
            blink_dot();
    3018:	0e 94 80 17 	call	0x2f00	; 0x2f00 <blink_dot>
            blink_dot();
    301c:	0e 94 80 17 	call	0x2f00	; 0x2f00 <blink_dot>
    3020:	e8 cf       	rjmp	.-48     	; 0x2ff2 <blink_morse_code_error+0xb6>
            blink_dash();
            break;
        case '5':
            blink_dot();
    3022:	0e 94 80 17 	call	0x2f00	; 0x2f00 <blink_dot>
    3026:	02 c0       	rjmp	.+4      	; 0x302c <blink_morse_code_error+0xf0>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    3028:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <blink_dash>
            blink_dot();
    302c:	0e 94 80 17 	call	0x2f00	; 0x2f00 <blink_dot>
    3030:	04 c0       	rjmp	.+8      	; 0x303a <blink_morse_code_error+0xfe>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    3032:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <blink_dash>
            blink_dash();
    3036:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <blink_dash>
            blink_dot();
    303a:	0e 94 80 17 	call	0x2f00	; 0x2f00 <blink_dot>
    303e:	06 c0       	rjmp	.+12     	; 0x304c <blink_morse_code_error+0x110>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    3040:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <blink_dash>
            blink_dash();
    3044:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <blink_dash>
            blink_dash();
    3048:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <blink_dash>
            blink_dot();
    304c:	0e 94 80 17 	call	0x2f00	; 0x2f00 <blink_dot>
    3050:	08 c0       	rjmp	.+16     	; 0x3062 <blink_morse_code_error+0x126>
            blink_dot();
            break;
        case '9':
            blink_dash();
    3052:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <blink_dash>
            blink_dash();
    3056:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <blink_dash>
            blink_dash();
    305a:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <blink_dash>
            blink_dash();
    305e:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <blink_dash>
            blink_dot();
    3062:	0e 94 80 17 	call	0x2f00	; 0x2f00 <blink_dot>
            break;
        }
        pause();
    3066:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <pause>
        pause();
    306a:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <pause>
        pause();
    306e:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    3072:	f3 94       	inc	r15
    3074:	f8 01       	movw	r30, r16
    3076:	01 90       	ld	r0, Z+
    3078:	00 20       	and	r0, r0
    307a:	e9 f7       	brne	.-6      	; 0x3076 <blink_morse_code_error+0x13a>
    307c:	31 97       	sbiw	r30, 0x01	; 1
    307e:	e0 1b       	sub	r30, r16
    3080:	f1 0b       	sbc	r31, r17
    3082:	8f 2d       	mov	r24, r15
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	8e 17       	cp	r24, r30
    3088:	9f 07       	cpc	r25, r31
    308a:	08 f4       	brcc	.+2      	; 0x308e <blink_morse_code_error+0x152>
    308c:	81 cf       	rjmp	.-254    	; 0x2f90 <blink_morse_code_error+0x54>
        pause();
        pause();
        pause();
    }

}
    308e:	0f 90       	pop	r0
    3090:	0f 90       	pop	r0
    3092:	0f 90       	pop	r0
    3094:	cf 91       	pop	r28
    3096:	df 91       	pop	r29
    3098:	1f 91       	pop	r17
    309a:	0f 91       	pop	r16
    309c:	ff 90       	pop	r15
    309e:	08 95       	ret

000030a0 <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    30a0:	4f 92       	push	r4
    30a2:	5f 92       	push	r5
    30a4:	6f 92       	push	r6
    30a6:	7f 92       	push	r7
    30a8:	8f 92       	push	r8
    30aa:	9f 92       	push	r9
    30ac:	af 92       	push	r10
    30ae:	bf 92       	push	r11
    30b0:	cf 92       	push	r12
    30b2:	df 92       	push	r13
    30b4:	ef 92       	push	r14
    30b6:	ff 92       	push	r15
    30b8:	0f 93       	push	r16
    30ba:	1f 93       	push	r17
    30bc:	cf 93       	push	r28
    30be:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    30c0:	82 ec       	ldi	r24, 0xC2	; 194
    30c2:	93 e0       	ldi	r25, 0x03	; 3
    30c4:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    30c8:	00 d0       	rcall	.+0      	; 0x30ca <dump_stack_info+0x2a>
    30ca:	00 d0       	rcall	.+0      	; 0x30cc <dump_stack_info+0x2c>
    30cc:	81 ee       	ldi	r24, 0xE1	; 225
    30ce:	93 e0       	ldi	r25, 0x03	; 3
    30d0:	ad b7       	in	r26, 0x3d	; 61
    30d2:	be b7       	in	r27, 0x3e	; 62
    30d4:	12 96       	adiw	r26, 0x02	; 2
    30d6:	9c 93       	st	X, r25
    30d8:	8e 93       	st	-X, r24
    30da:	11 97       	sbiw	r26, 0x01	; 1
    30dc:	e0 91 79 07 	lds	r30, 0x0779
    30e0:	f0 91 7a 07 	lds	r31, 0x077A
    30e4:	80 85       	ldd	r24, Z+8	; 0x08
    30e6:	99 27       	eor	r25, r25
    30e8:	87 fd       	sbrc	r24, 7
    30ea:	90 95       	com	r25
    30ec:	14 96       	adiw	r26, 0x04	; 4
    30ee:	9c 93       	st	X, r25
    30f0:	8e 93       	st	-X, r24
    30f2:	13 97       	sbiw	r26, 0x03	; 3
    30f4:	0e 94 78 34 	call	0x68f0	; 0x68f0 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    30f8:	e0 91 79 07 	lds	r30, 0x0779
    30fc:	f0 91 7a 07 	lds	r31, 0x077A
    3100:	c2 81       	ldd	r28, Z+2	; 0x02
    3102:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    3104:	8a ee       	ldi	r24, 0xEA	; 234
    3106:	93 e0       	ldi	r25, 0x03	; 3
    3108:	ed b7       	in	r30, 0x3d	; 61
    310a:	fe b7       	in	r31, 0x3e	; 62
    310c:	92 83       	std	Z+2, r25	; 0x02
    310e:	81 83       	std	Z+1, r24	; 0x01
    3110:	d4 83       	std	Z+4, r29	; 0x04
    3112:	c3 83       	std	Z+3, r28	; 0x03
    3114:	0e 94 78 34 	call	0x68f0	; 0x68f0 <printf>
    printf( "canary = %x ",*stkc );
    3118:	ed b7       	in	r30, 0x3d	; 61
    311a:	fe b7       	in	r31, 0x3e	; 62
    311c:	31 96       	adiw	r30, 0x01	; 1
    311e:	47 ef       	ldi	r20, 0xF7	; 247
    3120:	e4 2e       	mov	r14, r20
    3122:	43 e0       	ldi	r20, 0x03	; 3
    3124:	f4 2e       	mov	r15, r20
    3126:	ad b7       	in	r26, 0x3d	; 61
    3128:	be b7       	in	r27, 0x3e	; 62
    312a:	12 96       	adiw	r26, 0x02	; 2
    312c:	fc 92       	st	X, r15
    312e:	ee 92       	st	-X, r14
    3130:	11 97       	sbiw	r26, 0x01	; 1
    3132:	88 81       	ld	r24, Y
    3134:	82 83       	std	Z+2, r24	; 0x02
    3136:	13 82       	std	Z+3, r1	; 0x03
    3138:	0e 94 78 34 	call	0x68f0	; 0x68f0 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    313c:	34 e0       	ldi	r19, 0x04	; 4
    313e:	c3 2e       	mov	r12, r19
    3140:	34 e0       	ldi	r19, 0x04	; 4
    3142:	d3 2e       	mov	r13, r19
    3144:	ed b7       	in	r30, 0x3d	; 61
    3146:	fe b7       	in	r31, 0x3e	; 62
    3148:	d2 82       	std	Z+2, r13	; 0x02
    314a:	c1 82       	std	Z+1, r12	; 0x01
    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    printf( "canary = %x ",*stkc );
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    314c:	e0 91 79 07 	lds	r30, 0x0779
    3150:	f0 91 7a 07 	lds	r31, 0x077A
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    3154:	80 81       	ld	r24, Z
    3156:	91 81       	ldd	r25, Z+1	; 0x01
    3158:	ad b7       	in	r26, 0x3d	; 61
    315a:	be b7       	in	r27, 0x3e	; 62
    315c:	14 96       	adiw	r26, 0x04	; 4
    315e:	9c 93       	st	X, r25
    3160:	8e 93       	st	-X, r24
    3162:	13 97       	sbiw	r26, 0x03	; 3
    3164:	0e 94 78 34 	call	0x68f0	; 0x68f0 <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    3168:	2e e0       	ldi	r18, 0x0E	; 14
    316a:	a2 2e       	mov	r10, r18
    316c:	24 e0       	ldi	r18, 0x04	; 4
    316e:	b2 2e       	mov	r11, r18
    3170:	ed b7       	in	r30, 0x3d	; 61
    3172:	fe b7       	in	r31, 0x3e	; 62
    3174:	b2 82       	std	Z+2, r11	; 0x02
    3176:	a1 82       	std	Z+1, r10	; 0x01
    3178:	80 91 79 07 	lds	r24, 0x0779
    317c:	90 91 7a 07 	lds	r25, 0x077A
    3180:	94 83       	std	Z+4, r25	; 0x04
    3182:	83 83       	std	Z+3, r24	; 0x03
    3184:	0e 94 78 34 	call	0x68f0	; 0x68f0 <printf>
    3188:	0a e0       	ldi	r16, 0x0A	; 10
    318a:	17 e0       	ldi	r17, 0x07	; 7
    318c:	0f 90       	pop	r0
    318e:	0f 90       	pop	r0
    3190:	0f 90       	pop	r0
    3192:	0f 90       	pop	r0
    3194:	c0 e0       	ldi	r28, 0x00	; 0
    3196:	d0 e0       	ldi	r29, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    3198:	9e e1       	ldi	r25, 0x1E	; 30
    319a:	49 2e       	mov	r4, r25
    319c:	94 e0       	ldi	r25, 0x04	; 4
    319e:	59 2e       	mov	r5, r25
        printf( "canary = %x ",*stkc );
    31a0:	9e 2c       	mov	r9, r14
    31a2:	6f 2c       	mov	r6, r15
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    31a4:	7c 2c       	mov	r7, r12
    31a6:	8d 2c       	mov	r8, r13
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    31a8:	c5 01       	movw	r24, r10
    31aa:	ba 2c       	mov	r11, r10
    31ac:	a9 2e       	mov	r10, r25
    31ae:	8b e2       	ldi	r24, 0x2B	; 43
    31b0:	c8 2e       	mov	r12, r24
    31b2:	d1 2c       	mov	r13, r1
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    31b4:	d8 01       	movw	r26, r16
    31b6:	12 96       	adiw	r26, 0x02	; 2
    31b8:	ed 90       	ld	r14, X+
    31ba:	fc 90       	ld	r15, X
    31bc:	13 97       	sbiw	r26, 0x03	; 3
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    31be:	00 d0       	rcall	.+0      	; 0x31c0 <dump_stack_info+0x120>
    31c0:	00 d0       	rcall	.+0      	; 0x31c2 <dump_stack_info+0x122>
    31c2:	00 d0       	rcall	.+0      	; 0x31c4 <dump_stack_info+0x124>
    31c4:	ed b7       	in	r30, 0x3d	; 61
    31c6:	fe b7       	in	r31, 0x3e	; 62
    31c8:	31 96       	adiw	r30, 0x01	; 1
    31ca:	ad b7       	in	r26, 0x3d	; 61
    31cc:	be b7       	in	r27, 0x3e	; 62
    31ce:	12 96       	adiw	r26, 0x02	; 2
    31d0:	5c 92       	st	X, r5
    31d2:	4e 92       	st	-X, r4
    31d4:	11 97       	sbiw	r26, 0x01	; 1
    31d6:	d3 83       	std	Z+3, r29	; 0x03
    31d8:	c2 83       	std	Z+2, r28	; 0x02
    31da:	f5 82       	std	Z+5, r15	; 0x05
    31dc:	e4 82       	std	Z+4, r14	; 0x04
    31de:	0e 94 78 34 	call	0x68f0	; 0x68f0 <printf>
        printf( "canary = %x ",*stkc );
    31e2:	0f 90       	pop	r0
    31e4:	0f 90       	pop	r0
    31e6:	ed b7       	in	r30, 0x3d	; 61
    31e8:	fe b7       	in	r31, 0x3e	; 62
    31ea:	31 96       	adiw	r30, 0x01	; 1
    31ec:	ad b7       	in	r26, 0x3d	; 61
    31ee:	be b7       	in	r27, 0x3e	; 62
    31f0:	11 96       	adiw	r26, 0x01	; 1
    31f2:	9c 92       	st	X, r9
    31f4:	11 97       	sbiw	r26, 0x01	; 1
    31f6:	12 96       	adiw	r26, 0x02	; 2
    31f8:	6c 92       	st	X, r6
    31fa:	d7 01       	movw	r26, r14
    31fc:	8c 91       	ld	r24, X
    31fe:	82 83       	std	Z+2, r24	; 0x02
    3200:	13 82       	std	Z+3, r1	; 0x03
    3202:	0e 94 78 34 	call	0x68f0	; 0x68f0 <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    3206:	ed b7       	in	r30, 0x3d	; 61
    3208:	fe b7       	in	r31, 0x3e	; 62
    320a:	71 82       	std	Z+1, r7	; 0x01
    320c:	82 82       	std	Z+2, r8	; 0x02
    320e:	d8 01       	movw	r26, r16
    3210:	8d 91       	ld	r24, X+
    3212:	9c 91       	ld	r25, X
    3214:	94 83       	std	Z+4, r25	; 0x04
    3216:	83 83       	std	Z+3, r24	; 0x03
    3218:	0e 94 78 34 	call	0x68f0	; 0x68f0 <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    321c:	ed b7       	in	r30, 0x3d	; 61
    321e:	fe b7       	in	r31, 0x3e	; 62
    3220:	b1 82       	std	Z+1, r11	; 0x01
    3222:	a2 82       	std	Z+2, r10	; 0x02
    3224:	cc 9d       	mul	r28, r12
    3226:	c0 01       	movw	r24, r0
    3228:	cd 9d       	mul	r28, r13
    322a:	90 0d       	add	r25, r0
    322c:	dc 9d       	mul	r29, r12
    322e:	90 0d       	add	r25, r0
    3230:	11 24       	eor	r1, r1
    3232:	86 5f       	subi	r24, 0xF6	; 246
    3234:	98 4f       	sbci	r25, 0xF8	; 248
    3236:	94 83       	std	Z+4, r25	; 0x04
    3238:	83 83       	std	Z+3, r24	; 0x03
    323a:	0e 94 78 34 	call	0x68f0	; 0x68f0 <printf>
    323e:	21 96       	adiw	r28, 0x01	; 1
    3240:	05 5d       	subi	r16, 0xD5	; 213
    3242:	1f 4f       	sbci	r17, 0xFF	; 255
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    3244:	0f 90       	pop	r0
    3246:	0f 90       	pop	r0
    3248:	0f 90       	pop	r0
    324a:	0f 90       	pop	r0
    324c:	c2 30       	cpi	r28, 0x02	; 2
    324e:	d1 05       	cpc	r29, r1
    3250:	09 f0       	breq	.+2      	; 0x3254 <dump_stack_info+0x1b4>
    3252:	b0 cf       	rjmp	.-160    	; 0x31b4 <dump_stack_info+0x114>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    3254:	df 91       	pop	r29
    3256:	cf 91       	pop	r28
    3258:	1f 91       	pop	r17
    325a:	0f 91       	pop	r16
    325c:	ff 90       	pop	r15
    325e:	ef 90       	pop	r14
    3260:	df 90       	pop	r13
    3262:	cf 90       	pop	r12
    3264:	bf 90       	pop	r11
    3266:	af 90       	pop	r10
    3268:	9f 90       	pop	r9
    326a:	8f 90       	pop	r8
    326c:	7f 90       	pop	r7
    326e:	6f 90       	pop	r6
    3270:	5f 90       	pop	r5
    3272:	4f 90       	pop	r4
    3274:	08 95       	ret

00003276 <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    3276:	cf 93       	push	r28
    3278:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    327a:	e0 91 79 07 	lds	r30, 0x0779
    327e:	f0 91 7a 07 	lds	r31, 0x077A
    3282:	c2 81       	ldd	r28, Z+2	; 0x02
    3284:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    3286:	88 81       	ld	r24, Y
    3288:	85 35       	cpi	r24, 0x55	; 85
    328a:	39 f0       	breq	.+14     	; 0x329a <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    328c:	0e 94 50 18 	call	0x30a0	; 0x30a0 <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    3290:	81 e0       	ldi	r24, 0x01	; 1
    3292:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    3296:	85 e5       	ldi	r24, 0x55	; 85
    3298:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    329a:	e0 91 79 07 	lds	r30, 0x0779
    329e:	f0 91 7a 07 	lds	r31, 0x077A
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    32a2:	80 81       	ld	r24, Z
    32a4:	91 81       	ldd	r25, Z+1	; 0x01
    32a6:	22 e4       	ldi	r18, 0x42	; 66
    32a8:	80 30       	cpi	r24, 0x00	; 0
    32aa:	92 07       	cpc	r25, r18
    32ac:	28 f0       	brcs	.+10     	; 0x32b8 <nrk_stack_check+0x42>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    32ae:	0e 94 50 18 	call	0x30a0	; 0x30a0 <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    32b2:	82 e1       	ldi	r24, 0x12	; 18
    32b4:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <nrk_error_add>




#endif
}
    32b8:	df 91       	pop	r29
    32ba:	cf 91       	pop	r28
    32bc:	08 95       	ret

000032be <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    32be:	99 27       	eor	r25, r25
    32c0:	87 fd       	sbrc	r24, 7
    32c2:	90 95       	com	r25
    32c4:	2b e2       	ldi	r18, 0x2B	; 43
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	82 9f       	mul	r24, r18
    32ca:	f0 01       	movw	r30, r0
    32cc:	83 9f       	mul	r24, r19
    32ce:	f0 0d       	add	r31, r0
    32d0:	92 9f       	mul	r25, r18
    32d2:	f0 0d       	add	r31, r0
    32d4:	11 24       	eor	r1, r1
    32d6:	e6 5f       	subi	r30, 0xF6	; 246
    32d8:	f8 4f       	sbci	r31, 0xF8	; 248
    32da:	a2 81       	ldd	r26, Z+2	; 0x02
    32dc:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    32de:	8c 91       	ld	r24, X
    32e0:	85 35       	cpi	r24, 0x55	; 85
    32e2:	19 f0       	breq	.+6      	; 0x32ea <nrk_stack_check_pid+0x2c>
    {
        *stkc=STK_CANARY_VAL;
    32e4:	85 e5       	ldi	r24, 0x55	; 85
    32e6:	8c 93       	st	X, r24
    32e8:	09 c0       	rjmp	.+18     	; 0x32fc <nrk_stack_check_pid+0x3e>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    32ea:	80 81       	ld	r24, Z
    32ec:	91 81       	ldd	r25, Z+1	; 0x01
    32ee:	22 e4       	ldi	r18, 0x42	; 66
    32f0:	80 30       	cpi	r24, 0x00	; 0
    32f2:	92 07       	cpc	r25, r18
    32f4:	28 f0       	brcs	.+10     	; 0x3300 <nrk_stack_check_pid+0x42>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    32f6:	82 e1       	ldi	r24, 0x12	; 18
    32f8:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <nrk_error_add>
        return NRK_ERROR;
    32fc:	8f ef       	ldi	r24, 0xFF	; 255
    32fe:	08 95       	ret
    }
#endif
    return NRK_OK;
    3300:	81 e0       	ldi	r24, 0x01	; 1
}
    3302:	08 95       	ret

00003304 <nrk_signal_create>:
int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    3304:	60 91 61 05 	lds	r22, 0x0561
    3308:	70 91 62 05 	lds	r23, 0x0562
    330c:	80 91 63 05 	lds	r24, 0x0563
    3310:	90 91 64 05 	lds	r25, 0x0564
    3314:	e0 e0       	ldi	r30, 0x00	; 0
    3316:	f0 e0       	ldi	r31, 0x00	; 0
    3318:	9b 01       	movw	r18, r22
    331a:	ac 01       	movw	r20, r24
    331c:	0e 2e       	mov	r0, r30
    331e:	04 c0       	rjmp	.+8      	; 0x3328 <nrk_signal_create+0x24>
    3320:	56 95       	lsr	r21
    3322:	47 95       	ror	r20
    3324:	37 95       	ror	r19
    3326:	27 95       	ror	r18
    3328:	0a 94       	dec	r0
    332a:	d2 f7       	brpl	.-12     	; 0x3320 <nrk_signal_create+0x1c>
    332c:	20 fd       	sbrc	r18, 0
    332e:	1a c0       	rjmp	.+52     	; 0x3364 <nrk_signal_create+0x60>
		{    
			_nrk_signal_list|=SIG(i);
    3330:	21 e0       	ldi	r18, 0x01	; 1
    3332:	30 e0       	ldi	r19, 0x00	; 0
    3334:	40 e0       	ldi	r20, 0x00	; 0
    3336:	50 e0       	ldi	r21, 0x00	; 0
    3338:	0e 2e       	mov	r0, r30
    333a:	04 c0       	rjmp	.+8      	; 0x3344 <nrk_signal_create+0x40>
    333c:	22 0f       	add	r18, r18
    333e:	33 1f       	adc	r19, r19
    3340:	44 1f       	adc	r20, r20
    3342:	55 1f       	adc	r21, r21
    3344:	0a 94       	dec	r0
    3346:	d2 f7       	brpl	.-12     	; 0x333c <nrk_signal_create+0x38>
    3348:	26 2b       	or	r18, r22
    334a:	37 2b       	or	r19, r23
    334c:	48 2b       	or	r20, r24
    334e:	59 2b       	or	r21, r25
    3350:	20 93 61 05 	sts	0x0561, r18
    3354:	30 93 62 05 	sts	0x0562, r19
    3358:	40 93 63 05 	sts	0x0563, r20
    335c:	50 93 64 05 	sts	0x0564, r21
			return i;
    3360:	8e 2f       	mov	r24, r30
    3362:	08 95       	ret
    3364:	31 96       	adiw	r30, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    3366:	e0 32       	cpi	r30, 0x20	; 32
    3368:	f1 05       	cpc	r31, r1
    336a:	b1 f6       	brne	.-84     	; 0x3318 <nrk_signal_create+0x14>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    336c:	8f ef       	ldi	r24, 0xFF	; 255


}
    336e:	08 95       	ret

00003370 <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    3370:	e0 91 79 07 	lds	r30, 0x0779
    3374:	f0 91 7a 07 	lds	r31, 0x077A


}

uint32_t nrk_signal_get_registered_mask()
{
    3378:	65 85       	ldd	r22, Z+13	; 0x0d
    337a:	76 85       	ldd	r23, Z+14	; 0x0e
        return nrk_cur_task_TCB->registered_signal_mask;
}
    337c:	87 85       	ldd	r24, Z+15	; 0x0f
    337e:	90 89       	ldd	r25, Z+16	; 0x10
    3380:	08 95       	ret

00003382 <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    3382:	df 92       	push	r13
    3384:	ef 92       	push	r14
    3386:	ff 92       	push	r15
    3388:	0f 93       	push	r16
    338a:	1f 93       	push	r17
    338c:	d8 2e       	mov	r13, r24
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    338e:	81 e0       	ldi	r24, 0x01	; 1
    3390:	e8 2e       	mov	r14, r24
    3392:	f1 2c       	mov	r15, r1
    3394:	01 2d       	mov	r16, r1
    3396:	11 2d       	mov	r17, r1
    3398:	0d 2c       	mov	r0, r13
    339a:	04 c0       	rjmp	.+8      	; 0x33a4 <nrk_signal_delete+0x22>
    339c:	ee 0c       	add	r14, r14
    339e:	ff 1c       	adc	r15, r15
    33a0:	00 1f       	adc	r16, r16
    33a2:	11 1f       	adc	r17, r17
    33a4:	0a 94       	dec	r0
    33a6:	d2 f7       	brpl	.-12     	; 0x339c <nrk_signal_delete+0x1a>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    33a8:	80 91 61 05 	lds	r24, 0x0561
    33ac:	90 91 62 05 	lds	r25, 0x0562
    33b0:	a0 91 63 05 	lds	r26, 0x0563
    33b4:	b0 91 64 05 	lds	r27, 0x0564
    33b8:	8e 21       	and	r24, r14
    33ba:	9f 21       	and	r25, r15
    33bc:	a0 23       	and	r26, r16
    33be:	b1 23       	and	r27, r17
    33c0:	00 97       	sbiw	r24, 0x00	; 0
    33c2:	a1 05       	cpc	r26, r1
    33c4:	b1 05       	cpc	r27, r1
    33c6:	09 f4       	brne	.+2      	; 0x33ca <nrk_signal_delete+0x48>
    33c8:	5d c0       	rjmp	.+186    	; 0x3484 <nrk_signal_delete+0x102>

	nrk_int_disable();
    33ca:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <nrk_int_disable>
    33ce:	e1 e1       	ldi	r30, 0x11	; 17
    33d0:	f7 e0       	ldi	r31, 0x07	; 7
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    33d2:	a8 01       	movw	r20, r16
    33d4:	97 01       	movw	r18, r14
    33d6:	20 95       	com	r18
    33d8:	30 95       	com	r19
    33da:	40 95       	com	r20
    33dc:	50 95       	com	r21
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    33de:	63 e0       	ldi	r22, 0x03	; 3

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    33e0:	81 81       	ldd	r24, Z+1	; 0x01
    33e2:	8f 3f       	cpi	r24, 0xFF	; 255
    33e4:	39 f1       	breq	.+78     	; 0x3434 <nrk_signal_delete+0xb2>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    33e6:	86 81       	ldd	r24, Z+6	; 0x06
    33e8:	97 81       	ldd	r25, Z+7	; 0x07
    33ea:	a0 85       	ldd	r26, Z+8	; 0x08
    33ec:	b1 85       	ldd	r27, Z+9	; 0x09
    33ee:	8e 15       	cp	r24, r14
    33f0:	9f 05       	cpc	r25, r15
    33f2:	a0 07       	cpc	r26, r16
    33f4:	b1 07       	cpc	r27, r17
    33f6:	31 f4       	brne	.+12     	; 0x3404 <nrk_signal_delete+0x82>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    33f8:	12 86       	std	Z+10, r1	; 0x0a
    33fa:	13 86       	std	Z+11, r1	; 0x0b
    33fc:	14 86       	std	Z+12, r1	; 0x0c
    33fe:	15 86       	std	Z+13, r1	; 0x0d
			nrk_task_TCB[task_ID].event_suspend=0;
    3400:	10 82       	st	Z, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3402:	62 83       	std	Z+2, r22	; 0x02
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    3404:	86 81       	ldd	r24, Z+6	; 0x06
    3406:	97 81       	ldd	r25, Z+7	; 0x07
    3408:	a0 85       	ldd	r26, Z+8	; 0x08
    340a:	b1 85       	ldd	r27, Z+9	; 0x09
    340c:	82 23       	and	r24, r18
    340e:	93 23       	and	r25, r19
    3410:	a4 23       	and	r26, r20
    3412:	b5 23       	and	r27, r21
    3414:	86 83       	std	Z+6, r24	; 0x06
    3416:	97 83       	std	Z+7, r25	; 0x07
    3418:	a0 87       	std	Z+8, r26	; 0x08
    341a:	b1 87       	std	Z+9, r27	; 0x09
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    341c:	82 85       	ldd	r24, Z+10	; 0x0a
    341e:	93 85       	ldd	r25, Z+11	; 0x0b
    3420:	a4 85       	ldd	r26, Z+12	; 0x0c
    3422:	b5 85       	ldd	r27, Z+13	; 0x0d
    3424:	82 23       	and	r24, r18
    3426:	93 23       	and	r25, r19
    3428:	a4 23       	and	r26, r20
    342a:	b5 23       	and	r27, r21
    342c:	82 87       	std	Z+10, r24	; 0x0a
    342e:	93 87       	std	Z+11, r25	; 0x0b
    3430:	a4 87       	std	Z+12, r26	; 0x0c
    3432:	b5 87       	std	Z+13, r27	; 0x0d
    3434:	bb 96       	adiw	r30, 0x2b	; 43
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    3436:	87 e0       	ldi	r24, 0x07	; 7
    3438:	e7 36       	cpi	r30, 0x67	; 103
    343a:	f8 07       	cpc	r31, r24
    343c:	89 f6       	brne	.-94     	; 0x33e0 <nrk_signal_delete+0x5e>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    343e:	2e ef       	ldi	r18, 0xFE	; 254
    3440:	3f ef       	ldi	r19, 0xFF	; 255
    3442:	4f ef       	ldi	r20, 0xFF	; 255
    3444:	5f ef       	ldi	r21, 0xFF	; 255
    3446:	04 c0       	rjmp	.+8      	; 0x3450 <nrk_signal_delete+0xce>
    3448:	22 0f       	add	r18, r18
    344a:	33 1f       	adc	r19, r19
    344c:	44 1f       	adc	r20, r20
    344e:	55 1f       	adc	r21, r21
    3450:	da 94       	dec	r13
    3452:	d2 f7       	brpl	.-12     	; 0x3448 <nrk_signal_delete+0xc6>
    3454:	80 91 61 05 	lds	r24, 0x0561
    3458:	90 91 62 05 	lds	r25, 0x0562
    345c:	a0 91 63 05 	lds	r26, 0x0563
    3460:	b0 91 64 05 	lds	r27, 0x0564
    3464:	82 23       	and	r24, r18
    3466:	93 23       	and	r25, r19
    3468:	a4 23       	and	r26, r20
    346a:	b5 23       	and	r27, r21
    346c:	80 93 61 05 	sts	0x0561, r24
    3470:	90 93 62 05 	sts	0x0562, r25
    3474:	a0 93 63 05 	sts	0x0563, r26
    3478:	b0 93 64 05 	sts	0x0564, r27
	nrk_int_enable();
    347c:	0e 94 db 14 	call	0x29b6	; 0x29b6 <nrk_int_enable>

	return NRK_OK;
    3480:	81 e0       	ldi	r24, 0x01	; 1
    3482:	01 c0       	rjmp	.+2      	; 0x3486 <nrk_signal_delete+0x104>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    3484:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    3486:	1f 91       	pop	r17
    3488:	0f 91       	pop	r16
    348a:	ff 90       	pop	r15
    348c:	ef 90       	pop	r14
    348e:	df 90       	pop	r13
    3490:	08 95       	ret

00003492 <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    3492:	ef 92       	push	r14
    3494:	ff 92       	push	r15
    3496:	0f 93       	push	r16
    3498:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    349a:	21 e0       	ldi	r18, 0x01	; 1
    349c:	30 e0       	ldi	r19, 0x00	; 0
    349e:	40 e0       	ldi	r20, 0x00	; 0
    34a0:	50 e0       	ldi	r21, 0x00	; 0
    34a2:	04 c0       	rjmp	.+8      	; 0x34ac <nrk_signal_unregister+0x1a>
    34a4:	22 0f       	add	r18, r18
    34a6:	33 1f       	adc	r19, r19
    34a8:	44 1f       	adc	r20, r20
    34aa:	55 1f       	adc	r21, r21
    34ac:	8a 95       	dec	r24
    34ae:	d2 f7       	brpl	.-12     	; 0x34a4 <nrk_signal_unregister+0x12>

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    34b0:	e0 91 79 07 	lds	r30, 0x0779
    34b4:	f0 91 7a 07 	lds	r31, 0x077A
    34b8:	85 85       	ldd	r24, Z+13	; 0x0d
    34ba:	96 85       	ldd	r25, Z+14	; 0x0e
    34bc:	a7 85       	ldd	r26, Z+15	; 0x0f
    34be:	b0 89       	ldd	r27, Z+16	; 0x10
    34c0:	79 01       	movw	r14, r18
    34c2:	8a 01       	movw	r16, r20
    34c4:	e8 22       	and	r14, r24
    34c6:	f9 22       	and	r15, r25
    34c8:	0a 23       	and	r16, r26
    34ca:	1b 23       	and	r17, r27
    34cc:	e1 14       	cp	r14, r1
    34ce:	f1 04       	cpc	r15, r1
    34d0:	01 05       	cpc	r16, r1
    34d2:	11 05       	cpc	r17, r1
    34d4:	d1 f0       	breq	.+52     	; 0x350a <nrk_signal_unregister+0x78>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    34d6:	20 95       	com	r18
    34d8:	30 95       	com	r19
    34da:	40 95       	com	r20
    34dc:	50 95       	com	r21
    34de:	82 23       	and	r24, r18
    34e0:	93 23       	and	r25, r19
    34e2:	a4 23       	and	r26, r20
    34e4:	b5 23       	and	r27, r21
    34e6:	85 87       	std	Z+13, r24	; 0x0d
    34e8:	96 87       	std	Z+14, r25	; 0x0e
    34ea:	a7 87       	std	Z+15, r26	; 0x0f
    34ec:	b0 8b       	std	Z+16, r27	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    34ee:	81 89       	ldd	r24, Z+17	; 0x11
    34f0:	92 89       	ldd	r25, Z+18	; 0x12
    34f2:	a3 89       	ldd	r26, Z+19	; 0x13
    34f4:	b4 89       	ldd	r27, Z+20	; 0x14
    34f6:	82 23       	and	r24, r18
    34f8:	93 23       	and	r25, r19
    34fa:	a4 23       	and	r26, r20
    34fc:	b5 23       	and	r27, r21
    34fe:	81 8b       	std	Z+17, r24	; 0x11
    3500:	92 8b       	std	Z+18, r25	; 0x12
    3502:	a3 8b       	std	Z+19, r26	; 0x13
    3504:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    3506:	81 e0       	ldi	r24, 0x01	; 1
    3508:	01 c0       	rjmp	.+2      	; 0x350c <nrk_signal_unregister+0x7a>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    350a:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    350c:	1f 91       	pop	r17
    350e:	0f 91       	pop	r16
    3510:	ff 90       	pop	r15
    3512:	ef 90       	pop	r14
    3514:	08 95       	ret

00003516 <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    3516:	20 91 61 05 	lds	r18, 0x0561
    351a:	30 91 62 05 	lds	r19, 0x0562
    351e:	40 91 63 05 	lds	r20, 0x0563
    3522:	50 91 64 05 	lds	r21, 0x0564
    3526:	08 2e       	mov	r0, r24
    3528:	04 c0       	rjmp	.+8      	; 0x3532 <nrk_signal_register+0x1c>
    352a:	56 95       	lsr	r21
    352c:	47 95       	ror	r20
    352e:	37 95       	ror	r19
    3530:	27 95       	ror	r18
    3532:	0a 94       	dec	r0
    3534:	d2 f7       	brpl	.-12     	; 0x352a <nrk_signal_register+0x14>
    3536:	21 70       	andi	r18, 0x01	; 1
    3538:	30 70       	andi	r19, 0x00	; 0
    353a:	21 15       	cp	r18, r1
    353c:	31 05       	cpc	r19, r1
    353e:	e9 f0       	breq	.+58     	; 0x357a <nrk_signal_register+0x64>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    3540:	e0 91 79 07 	lds	r30, 0x0779
    3544:	f0 91 7a 07 	lds	r31, 0x077A
    3548:	21 e0       	ldi	r18, 0x01	; 1
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	40 e0       	ldi	r20, 0x00	; 0
    354e:	50 e0       	ldi	r21, 0x00	; 0
    3550:	04 c0       	rjmp	.+8      	; 0x355a <nrk_signal_register+0x44>
    3552:	22 0f       	add	r18, r18
    3554:	33 1f       	adc	r19, r19
    3556:	44 1f       	adc	r20, r20
    3558:	55 1f       	adc	r21, r21
    355a:	8a 95       	dec	r24
    355c:	d2 f7       	brpl	.-12     	; 0x3552 <nrk_signal_register+0x3c>
    355e:	85 85       	ldd	r24, Z+13	; 0x0d
    3560:	96 85       	ldd	r25, Z+14	; 0x0e
    3562:	a7 85       	ldd	r26, Z+15	; 0x0f
    3564:	b0 89       	ldd	r27, Z+16	; 0x10
    3566:	82 2b       	or	r24, r18
    3568:	93 2b       	or	r25, r19
    356a:	a4 2b       	or	r26, r20
    356c:	b5 2b       	or	r27, r21
    356e:	85 87       	std	Z+13, r24	; 0x0d
    3570:	96 87       	std	Z+14, r25	; 0x0e
    3572:	a7 87       	std	Z+15, r26	; 0x0f
    3574:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    3576:	81 e0       	ldi	r24, 0x01	; 1
    3578:	08 95       	ret
	}
            
	return NRK_ERROR;
    357a:	8f ef       	ldi	r24, 0xFF	; 255
}
    357c:	08 95       	ret

0000357e <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    357e:	ef 92       	push	r14
    3580:	ff 92       	push	r15
    3582:	0f 93       	push	r16
    3584:	1f 93       	push	r17
    3586:	df 93       	push	r29
    3588:	cf 93       	push	r28
    358a:	0f 92       	push	r0
    358c:	cd b7       	in	r28, 0x3d	; 61
    358e:	de b7       	in	r29, 0x3e	; 62

	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    3590:	91 e0       	ldi	r25, 0x01	; 1
    3592:	e9 2e       	mov	r14, r25
    3594:	f1 2c       	mov	r15, r1
    3596:	01 2d       	mov	r16, r1
    3598:	11 2d       	mov	r17, r1
    359a:	04 c0       	rjmp	.+8      	; 0x35a4 <nrk_event_signal+0x26>
    359c:	ee 0c       	add	r14, r14
    359e:	ff 1c       	adc	r15, r15
    35a0:	00 1f       	adc	r16, r16
    35a2:	11 1f       	adc	r17, r17
    35a4:	8a 95       	dec	r24
    35a6:	d2 f7       	brpl	.-12     	; 0x359c <nrk_event_signal+0x1e>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    35a8:	80 91 61 05 	lds	r24, 0x0561
    35ac:	90 91 62 05 	lds	r25, 0x0562
    35b0:	a0 91 63 05 	lds	r26, 0x0563
    35b4:	b0 91 64 05 	lds	r27, 0x0564
    35b8:	8e 21       	and	r24, r14
    35ba:	9f 21       	and	r25, r15
    35bc:	a0 23       	and	r26, r16
    35be:	b1 23       	and	r27, r17
    35c0:	00 97       	sbiw	r24, 0x00	; 0
    35c2:	a1 05       	cpc	r26, r1
    35c4:	b1 05       	cpc	r27, r1
    35c6:	11 f4       	brne	.+4      	; 0x35cc <nrk_event_signal+0x4e>
    35c8:	81 e0       	ldi	r24, 0x01	; 1
    35ca:	43 c0       	rjmp	.+134    	; 0x3652 <nrk_event_signal+0xd4>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    35cc:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <nrk_int_disable>
    35d0:	e1 e1       	ldi	r30, 0x11	; 17
    35d2:	f7 e0       	ldi	r31, 0x07	; 7

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    35d4:	20 e0       	ldi	r18, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    35d6:	33 e0       	ldi	r19, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    35d8:	80 81       	ld	r24, Z
    35da:	81 30       	cpi	r24, 0x01	; 1
    35dc:	b9 f4       	brne	.+46     	; 0x360c <nrk_event_signal+0x8e>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    35de:	82 85       	ldd	r24, Z+10	; 0x0a
    35e0:	93 85       	ldd	r25, Z+11	; 0x0b
    35e2:	a4 85       	ldd	r26, Z+12	; 0x0c
    35e4:	b5 85       	ldd	r27, Z+13	; 0x0d
    35e6:	8e 21       	and	r24, r14
    35e8:	9f 21       	and	r25, r15
    35ea:	a0 23       	and	r26, r16
    35ec:	b1 23       	and	r27, r17
    35ee:	00 97       	sbiw	r24, 0x00	; 0
    35f0:	a1 05       	cpc	r26, r1
    35f2:	b1 05       	cpc	r27, r1
    35f4:	59 f0       	breq	.+22     	; 0x360c <nrk_event_signal+0x8e>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    35f6:	32 83       	std	Z+2, r19	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    35f8:	16 86       	std	Z+14, r1	; 0x0e
    35fa:	17 86       	std	Z+15, r1	; 0x0f
    35fc:	10 8a       	std	Z+16, r1	; 0x10
    35fe:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    3600:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    3602:	e2 86       	std	Z+10, r14	; 0x0a
    3604:	f3 86       	std	Z+11, r15	; 0x0b
    3606:	04 87       	std	Z+12, r16	; 0x0c
    3608:	15 87       	std	Z+13, r17	; 0x0d
					event_occured=1;
    360a:	21 e0       	ldi	r18, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    360c:	80 81       	ld	r24, Z
    360e:	82 30       	cpi	r24, 0x02	; 2
    3610:	a1 f4       	brne	.+40     	; 0x363a <nrk_event_signal+0xbc>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    3612:	82 85       	ldd	r24, Z+10	; 0x0a
    3614:	93 85       	ldd	r25, Z+11	; 0x0b
    3616:	a4 85       	ldd	r26, Z+12	; 0x0c
    3618:	b5 85       	ldd	r27, Z+13	; 0x0d
    361a:	8e 15       	cp	r24, r14
    361c:	9f 05       	cpc	r25, r15
    361e:	a0 07       	cpc	r26, r16
    3620:	b1 07       	cpc	r27, r17
    3622:	59 f4       	brne	.+22     	; 0x363a <nrk_event_signal+0xbc>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3624:	32 83       	std	Z+2, r19	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    3626:	16 86       	std	Z+14, r1	; 0x0e
    3628:	17 86       	std	Z+15, r1	; 0x0f
    362a:	10 8a       	std	Z+16, r1	; 0x10
    362c:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    362e:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    3630:	12 86       	std	Z+10, r1	; 0x0a
    3632:	13 86       	std	Z+11, r1	; 0x0b
    3634:	14 86       	std	Z+12, r1	; 0x0c
    3636:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    3638:	21 e0       	ldi	r18, 0x01	; 1
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
					nrk_task_TCB[task_ID].next_wakeup=0;
					nrk_task_TCB[task_ID].event_suspend=0;
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    363a:	bb 96       	adiw	r30, 0x2b	; 43
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    363c:	87 e0       	ldi	r24, 0x07	; 7
    363e:	e7 36       	cpi	r30, 0x67	; 103
    3640:	f8 07       	cpc	r31, r24
    3642:	51 f6       	brne	.-108    	; 0x35d8 <nrk_event_signal+0x5a>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    3644:	29 83       	std	Y+1, r18	; 0x01
    3646:	0e 94 db 14 	call	0x29b6	; 0x29b6 <nrk_int_enable>
	if(event_occured)
    364a:	29 81       	ldd	r18, Y+1	; 0x01
    364c:	22 23       	and	r18, r18
    364e:	29 f4       	brne	.+10     	; 0x365a <nrk_event_signal+0xdc>
	{
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    3650:	82 e0       	ldi	r24, 0x02	; 2
    3652:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <_nrk_errno_set>
	return NRK_ERROR;
    3656:	8f ef       	ldi	r24, 0xFF	; 255
    3658:	01 c0       	rjmp	.+2      	; 0x365c <nrk_event_signal+0xde>
	//	}
	}
	nrk_int_enable();
	if(event_occured)
	{
		return NRK_OK;
    365a:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    365c:	0f 90       	pop	r0
    365e:	cf 91       	pop	r28
    3660:	df 91       	pop	r29
    3662:	1f 91       	pop	r17
    3664:	0f 91       	pop	r16
    3666:	ff 90       	pop	r15
    3668:	ef 90       	pop	r14
    366a:	08 95       	ret

0000366c <nrk_event_wait>:

uint32_t nrk_event_wait(uint32_t event_mask)
{

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    366c:	e0 91 79 07 	lds	r30, 0x0779
    3670:	f0 91 7a 07 	lds	r31, 0x077A
    3674:	25 85       	ldd	r18, Z+13	; 0x0d
    3676:	36 85       	ldd	r19, Z+14	; 0x0e
    3678:	47 85       	ldd	r20, Z+15	; 0x0f
    367a:	50 89       	ldd	r21, Z+16	; 0x10
    367c:	26 23       	and	r18, r22
    367e:	37 23       	and	r19, r23
    3680:	48 23       	and	r20, r24
    3682:	59 23       	and	r21, r25
    3684:	21 15       	cp	r18, r1
    3686:	31 05       	cpc	r19, r1
    3688:	41 05       	cpc	r20, r1
    368a:	51 05       	cpc	r21, r1
    368c:	21 f1       	breq	.+72     	; 0x36d6 <nrk_event_wait+0x6a>
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    368e:	61 8b       	std	Z+17, r22	; 0x11
    3690:	72 8b       	std	Z+18, r23	; 0x12
    3692:	83 8b       	std	Z+19, r24	; 0x13
    3694:	94 8b       	std	Z+20, r25	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    3696:	21 e0       	ldi	r18, 0x01	; 1
    3698:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    369a:	00 90 69 07 	lds	r0, 0x0769
    369e:	04 c0       	rjmp	.+8      	; 0x36a8 <nrk_event_wait+0x3c>
    36a0:	96 95       	lsr	r25
    36a2:	87 95       	ror	r24
    36a4:	77 95       	ror	r23
    36a6:	67 95       	ror	r22
    36a8:	0a 94       	dec	r0
    36aa:	d2 f7       	brpl	.-12     	; 0x36a0 <nrk_event_wait+0x34>
    36ac:	61 70       	andi	r22, 0x01	; 1
    36ae:	70 70       	andi	r23, 0x00	; 0
    36b0:	61 15       	cp	r22, r1
    36b2:	71 05       	cpc	r23, r1
    36b4:	19 f0       	breq	.+6      	; 0x36bc <nrk_event_wait+0x50>
		nrk_wait_until_nw();
    36b6:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <nrk_wait_until_nw>
    36ba:	04 c0       	rjmp	.+8      	; 0x36c4 <nrk_event_wait+0x58>
	else
		nrk_wait_until_ticks(0);
    36bc:	80 e0       	ldi	r24, 0x00	; 0
    36be:	90 e0       	ldi	r25, 0x00	; 0
    36c0:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    36c4:	e0 91 79 07 	lds	r30, 0x0779
    36c8:	f0 91 7a 07 	lds	r31, 0x077A
    36cc:	21 89       	ldd	r18, Z+17	; 0x11
    36ce:	32 89       	ldd	r19, Z+18	; 0x12
    36d0:	43 89       	ldd	r20, Z+19	; 0x13
    36d2:	54 89       	ldd	r21, Z+20	; 0x14
    36d4:	03 c0       	rjmp	.+6      	; 0x36dc <nrk_event_wait+0x70>
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
	  }
	else
	  {
	   return 0;
    36d6:	20 e0       	ldi	r18, 0x00	; 0
    36d8:	30 e0       	ldi	r19, 0x00	; 0
    36da:	a9 01       	movw	r20, r18
		nrk_wait_until_nw();
	else
		nrk_wait_until_ticks(0);
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
}
    36dc:	b9 01       	movw	r22, r18
    36de:	ca 01       	movw	r24, r20
    36e0:	08 95       	ret

000036e2 <nrk_sem_create>:
}

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
    36e2:	90 91 78 07 	lds	r25, 0x0778
    36e6:	99 23       	and	r25, r25
    36e8:	e9 f4       	brne	.+58     	; 0x3724 <nrk_sem_create+0x42>
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
		{
		   if(nrk_sem_list[i].count==-1) break;
    36ea:	90 91 62 07 	lds	r25, 0x0762
    36ee:	9f 3f       	cpi	r25, 0xFF	; 255
    36f0:	31 f0       	breq	.+12     	; 0x36fe <nrk_sem_create+0x1c>
    36f2:	90 91 65 07 	lds	r25, 0x0765
    36f6:	9f 3f       	cpi	r25, 0xFF	; 255
    36f8:	21 f4       	brne	.+8      	; 0x3702 <nrk_sem_create+0x20>
nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
    36fa:	21 e0       	ldi	r18, 0x01	; 1
    36fc:	03 c0       	rjmp	.+6      	; 0x3704 <nrk_sem_create+0x22>
		{
		   if(nrk_sem_list[i].count==-1) break;
    36fe:	20 e0       	ldi	r18, 0x00	; 0
    3700:	01 c0       	rjmp	.+2      	; 0x3704 <nrk_sem_create+0x22>
    3702:	22 e0       	ldi	r18, 0x02	; 2
		}
	                                              
	nrk_sem_list[i].value=count;
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	f9 01       	movw	r30, r18
    3708:	ee 0f       	add	r30, r30
    370a:	ff 1f       	adc	r31, r31
    370c:	e2 0f       	add	r30, r18
    370e:	f3 1f       	adc	r31, r19
    3710:	ee 59       	subi	r30, 0x9E	; 158
    3712:	f8 4f       	sbci	r31, 0xF8	; 248
    3714:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[i].count=count;
    3716:	80 83       	st	Z, r24
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
    3718:	61 83       	std	Z+1, r22	; 0x01
	_nrk_resource_cnt++;
    371a:	81 e0       	ldi	r24, 0x01	; 1
    371c:	80 93 78 07 	sts	0x0778, r24
	return	&nrk_sem_list[i];
    3720:	9f 01       	movw	r18, r30
    3722:	02 c0       	rjmp	.+4      	; 0x3728 <nrk_sem_create+0x46>

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
    3724:	20 e0       	ldi	r18, 0x00	; 0
    3726:	30 e0       	ldi	r19, 0x00	; 0
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    3728:	c9 01       	movw	r24, r18
    372a:	08 95       	ret

0000372c <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    372c:	27 e0       	ldi	r18, 0x07	; 7
    372e:	82 36       	cpi	r24, 0x62	; 98
    3730:	92 07       	cpc	r25, r18
    3732:	31 f0       	breq	.+12     	; 0x3740 <nrk_get_resource_index+0x14>
    3734:	27 e0       	ldi	r18, 0x07	; 7
    3736:	85 36       	cpi	r24, 0x65	; 101
    3738:	92 07       	cpc	r25, r18
    373a:	21 f4       	brne	.+8      	; 0x3744 <nrk_get_resource_index+0x18>
}

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
    373c:	81 e0       	ldi	r24, 0x01	; 1
    373e:	08 95       	ret
    3740:	80 e0       	ldi	r24, 0x00	; 0
    3742:	08 95       	ret
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
				return id;
	return NRK_ERROR;
    3744:	8f ef       	ldi	r24, 0xFF	; 255
}
    3746:	08 95       	ret

00003748 <nrk_sem_delete>:
return NRK_OK;
}

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    3748:	0e 94 96 1b 	call	0x372c	; 0x372c <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    374c:	8f 3f       	cpi	r24, 0xFF	; 255
    374e:	11 f4       	brne	.+4      	; 0x3754 <nrk_sem_delete+0xc>
    3750:	81 e0       	ldi	r24, 0x01	; 1
    3752:	02 c0       	rjmp	.+4      	; 0x3758 <nrk_sem_delete+0x10>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3754:	82 30       	cpi	r24, 0x02	; 2
    3756:	21 f4       	brne	.+8      	; 0x3760 <nrk_sem_delete+0x18>
    3758:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <_nrk_errno_set>
    375c:	8f ef       	ldi	r24, 0xFF	; 255
    375e:	08 95       	ret

	nrk_sem_list[id].count=-1;
    3760:	99 27       	eor	r25, r25
    3762:	87 fd       	sbrc	r24, 7
    3764:	90 95       	com	r25
    3766:	fc 01       	movw	r30, r24
    3768:	ee 0f       	add	r30, r30
    376a:	ff 1f       	adc	r31, r31
    376c:	e8 0f       	add	r30, r24
    376e:	f9 1f       	adc	r31, r25
    3770:	ee 59       	subi	r30, 0x9E	; 158
    3772:	f8 4f       	sbci	r31, 0xF8	; 248
    3774:	8f ef       	ldi	r24, 0xFF	; 255
    3776:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    3778:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    377a:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    377c:	80 91 78 07 	lds	r24, 0x0778
    3780:	81 50       	subi	r24, 0x01	; 1
    3782:	80 93 78 07 	sts	0x0778, r24
return NRK_OK;
    3786:	81 e0       	ldi	r24, 0x01	; 1
}
    3788:	08 95       	ret

0000378a <nrk_sem_post>:
}



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    378a:	1f 93       	push	r17
    378c:	cf 93       	push	r28
    378e:	df 93       	push	r29
	int8_t id=nrk_get_resource_index(rsrc);	
    3790:	0e 94 96 1b 	call	0x372c	; 0x372c <nrk_get_resource_index>
    3794:	18 2f       	mov	r17, r24
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3796:	8f 3f       	cpi	r24, 0xFF	; 255
    3798:	11 f4       	brne	.+4      	; 0x379e <nrk_sem_post+0x14>
    379a:	81 e0       	ldi	r24, 0x01	; 1
    379c:	03 c0       	rjmp	.+6      	; 0x37a4 <nrk_sem_post+0x1a>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    379e:	82 30       	cpi	r24, 0x02	; 2
    37a0:	29 f4       	brne	.+10     	; 0x37ac <nrk_sem_post+0x22>
    37a2:	82 e0       	ldi	r24, 0x02	; 2
    37a4:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <_nrk_errno_set>
    37a8:	8f ef       	ldi	r24, 0xFF	; 255
    37aa:	75 c0       	rjmp	.+234    	; 0x3896 <nrk_sem_post+0x10c>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    37ac:	28 2f       	mov	r18, r24
    37ae:	33 27       	eor	r19, r19
    37b0:	27 fd       	sbrc	r18, 7
    37b2:	30 95       	com	r19
    37b4:	e9 01       	movw	r28, r18
    37b6:	cc 0f       	add	r28, r28
    37b8:	dd 1f       	adc	r29, r29
    37ba:	c2 0f       	add	r28, r18
    37bc:	d3 1f       	adc	r29, r19
    37be:	ce 59       	subi	r28, 0x9E	; 158
    37c0:	d8 4f       	sbci	r29, 0xF8	; 248
    37c2:	9a 81       	ldd	r25, Y+2	; 0x02
    37c4:	88 81       	ld	r24, Y
    37c6:	98 17       	cp	r25, r24
    37c8:	0c f0       	brlt	.+2      	; 0x37cc <nrk_sem_post+0x42>
    37ca:	64 c0       	rjmp	.+200    	; 0x3894 <nrk_sem_post+0x10a>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    37cc:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <nrk_int_disable>

		nrk_sem_list[id].value++;
    37d0:	8a 81       	ldd	r24, Y+2	; 0x02
    37d2:	8f 5f       	subi	r24, 0xFF	; 255
    37d4:	8a 83       	std	Y+2, r24	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    37d6:	e0 91 79 07 	lds	r30, 0x0779
    37da:	f0 91 7a 07 	lds	r31, 0x077A
    37de:	14 82       	std	Z+4, r1	; 0x04

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    37e0:	80 91 11 07 	lds	r24, 0x0711
    37e4:	82 30       	cpi	r24, 0x02	; 2
    37e6:	41 f5       	brne	.+80     	; 0x3838 <nrk_sem_post+0xae>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    37e8:	21 2f       	mov	r18, r17
    37ea:	33 27       	eor	r19, r19
    37ec:	27 fd       	sbrc	r18, 7
    37ee:	30 95       	com	r19
    37f0:	43 2f       	mov	r20, r19
    37f2:	53 2f       	mov	r21, r19
    37f4:	60 91 1b 07 	lds	r22, 0x071B
    37f8:	70 91 1c 07 	lds	r23, 0x071C
    37fc:	80 91 1d 07 	lds	r24, 0x071D
    3800:	90 91 1e 07 	lds	r25, 0x071E
    3804:	62 17       	cp	r22, r18
    3806:	73 07       	cpc	r23, r19
    3808:	84 07       	cpc	r24, r20
    380a:	95 07       	cpc	r25, r21
    380c:	a9 f4       	brne	.+42     	; 0x3838 <nrk_sem_post+0xae>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    380e:	83 e0       	ldi	r24, 0x03	; 3
    3810:	80 93 13 07 	sts	0x0713, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    3814:	10 92 1f 07 	sts	0x071F, r1
    3818:	10 92 20 07 	sts	0x0720, r1
    381c:	10 92 21 07 	sts	0x0721, r1
    3820:	10 92 22 07 	sts	0x0722, r1
					nrk_task_TCB[task_ID].event_suspend=0;
    3824:	10 92 11 07 	sts	0x0711, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    3828:	10 92 1b 07 	sts	0x071B, r1
    382c:	10 92 1c 07 	sts	0x071C, r1
    3830:	10 92 1d 07 	sts	0x071D, r1
    3834:	10 92 1e 07 	sts	0x071E, r1

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    3838:	80 91 3c 07 	lds	r24, 0x073C
    383c:	82 30       	cpi	r24, 0x02	; 2
    383e:	41 f5       	brne	.+80     	; 0x3890 <nrk_sem_post+0x106>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    3840:	81 2f       	mov	r24, r17
    3842:	99 27       	eor	r25, r25
    3844:	87 fd       	sbrc	r24, 7
    3846:	90 95       	com	r25
    3848:	a9 2f       	mov	r26, r25
    384a:	b9 2f       	mov	r27, r25
    384c:	20 91 46 07 	lds	r18, 0x0746
    3850:	30 91 47 07 	lds	r19, 0x0747
    3854:	40 91 48 07 	lds	r20, 0x0748
    3858:	50 91 49 07 	lds	r21, 0x0749
    385c:	28 17       	cp	r18, r24
    385e:	39 07       	cpc	r19, r25
    3860:	4a 07       	cpc	r20, r26
    3862:	5b 07       	cpc	r21, r27
    3864:	a9 f4       	brne	.+42     	; 0x3890 <nrk_sem_post+0x106>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3866:	83 e0       	ldi	r24, 0x03	; 3
    3868:	80 93 3e 07 	sts	0x073E, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    386c:	10 92 4a 07 	sts	0x074A, r1
    3870:	10 92 4b 07 	sts	0x074B, r1
    3874:	10 92 4c 07 	sts	0x074C, r1
    3878:	10 92 4d 07 	sts	0x074D, r1
					nrk_task_TCB[task_ID].event_suspend=0;
    387c:	10 92 3c 07 	sts	0x073C, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    3880:	10 92 46 07 	sts	0x0746, r1
    3884:	10 92 47 07 	sts	0x0747, r1
    3888:	10 92 48 07 	sts	0x0748, r1
    388c:	10 92 49 07 	sts	0x0749, r1
				}   

		}
		nrk_int_enable();
    3890:	0e 94 db 14 	call	0x29b6	; 0x29b6 <nrk_int_enable>
	}
		
return NRK_OK;
    3894:	81 e0       	ldi	r24, 0x01	; 1
}
    3896:	df 91       	pop	r29
    3898:	cf 91       	pop	r28
    389a:	1f 91       	pop	r17
    389c:	08 95       	ret

0000389e <nrk_sem_pend>:
}



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    389e:	0f 93       	push	r16
    38a0:	1f 93       	push	r17
    38a2:	df 93       	push	r29
    38a4:	cf 93       	push	r28
    38a6:	0f 92       	push	r0
    38a8:	cd b7       	in	r28, 0x3d	; 61
    38aa:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    38ac:	0e 94 96 1b 	call	0x372c	; 0x372c <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    38b0:	8f 3f       	cpi	r24, 0xFF	; 255
    38b2:	11 f4       	brne	.+4      	; 0x38b8 <nrk_sem_pend+0x1a>
    38b4:	81 e0       	ldi	r24, 0x01	; 1
    38b6:	02 c0       	rjmp	.+4      	; 0x38bc <nrk_sem_pend+0x1e>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    38b8:	82 30       	cpi	r24, 0x02	; 2
    38ba:	21 f4       	brne	.+8      	; 0x38c4 <nrk_sem_pend+0x26>
    38bc:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <_nrk_errno_set>
    38c0:	8f ef       	ldi	r24, 0xFF	; 255
    38c2:	40 c0       	rjmp	.+128    	; 0x3944 <nrk_sem_pend+0xa6>
	
	nrk_int_disable();
    38c4:	89 83       	std	Y+1, r24	; 0x01
    38c6:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    38ca:	89 81       	ldd	r24, Y+1	; 0x01
    38cc:	08 2f       	mov	r16, r24
    38ce:	11 27       	eor	r17, r17
    38d0:	07 fd       	sbrc	r16, 7
    38d2:	10 95       	com	r17
    38d4:	f8 01       	movw	r30, r16
    38d6:	ee 0f       	add	r30, r30
    38d8:	ff 1f       	adc	r31, r31
    38da:	e0 0f       	add	r30, r16
    38dc:	f1 1f       	adc	r31, r17
    38de:	ee 59       	subi	r30, 0x9E	; 158
    38e0:	f8 4f       	sbci	r31, 0xF8	; 248
    38e2:	92 81       	ldd	r25, Z+2	; 0x02
    38e4:	99 23       	and	r25, r25
    38e6:	b1 f4       	brne	.+44     	; 0x3914 <nrk_sem_pend+0x76>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    38e8:	e0 91 79 07 	lds	r30, 0x0779
    38ec:	f0 91 7a 07 	lds	r31, 0x077A
    38f0:	97 81       	ldd	r25, Z+7	; 0x07
    38f2:	92 60       	ori	r25, 0x02	; 2
    38f4:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    38f6:	99 27       	eor	r25, r25
    38f8:	87 fd       	sbrc	r24, 7
    38fa:	90 95       	com	r25
    38fc:	a9 2f       	mov	r26, r25
    38fe:	b9 2f       	mov	r27, r25
    3900:	81 8b       	std	Z+17, r24	; 0x11
    3902:	92 8b       	std	Z+18, r25	; 0x12
    3904:	a3 8b       	std	Z+19, r26	; 0x13
    3906:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    3908:	0e 94 db 14 	call	0x29b6	; 0x29b6 <nrk_int_enable>
		nrk_wait_until_ticks(0);
    390c:	80 e0       	ldi	r24, 0x00	; 0
    390e:	90 e0       	ldi	r25, 0x00	; 0
    3910:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    3914:	f8 01       	movw	r30, r16
    3916:	ee 0f       	add	r30, r30
    3918:	ff 1f       	adc	r31, r31
    391a:	e0 0f       	add	r30, r16
    391c:	f1 1f       	adc	r31, r17
    391e:	ee 59       	subi	r30, 0x9E	; 158
    3920:	f8 4f       	sbci	r31, 0xF8	; 248
    3922:	82 81       	ldd	r24, Z+2	; 0x02
    3924:	81 50       	subi	r24, 0x01	; 1
    3926:	82 83       	std	Z+2, r24	; 0x02
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    3928:	a0 91 79 07 	lds	r26, 0x0779
    392c:	b0 91 7a 07 	lds	r27, 0x077A
    3930:	81 81       	ldd	r24, Z+1	; 0x01
    3932:	1b 96       	adiw	r26, 0x0b	; 11
    3934:	8c 93       	st	X, r24
    3936:	1b 97       	sbiw	r26, 0x0b	; 11
	nrk_cur_task_TCB->elevated_prio_flag=1;
    3938:	81 e0       	ldi	r24, 0x01	; 1
    393a:	14 96       	adiw	r26, 0x04	; 4
    393c:	8c 93       	st	X, r24
	nrk_int_enable();
    393e:	0e 94 db 14 	call	0x29b6	; 0x29b6 <nrk_int_enable>

	return NRK_OK;
    3942:	81 e0       	ldi	r24, 0x01	; 1
}
    3944:	0f 90       	pop	r0
    3946:	cf 91       	pop	r28
    3948:	df 91       	pop	r29
    394a:	1f 91       	pop	r17
    394c:	0f 91       	pop	r16
    394e:	08 95       	ret

00003950 <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    3950:	0e 94 96 1b 	call	0x372c	; 0x372c <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3954:	8f 3f       	cpi	r24, 0xFF	; 255
    3956:	11 f4       	brne	.+4      	; 0x395c <nrk_sem_query+0xc>
    3958:	81 e0       	ldi	r24, 0x01	; 1
    395a:	02 c0       	rjmp	.+4      	; 0x3960 <nrk_sem_query+0x10>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    395c:	82 30       	cpi	r24, 0x02	; 2
    395e:	21 f4       	brne	.+8      	; 0x3968 <nrk_sem_query+0x18>
    3960:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <_nrk_errno_set>
    3964:	8f ef       	ldi	r24, 0xFF	; 255
    3966:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    3968:	99 27       	eor	r25, r25
    396a:	87 fd       	sbrc	r24, 7
    396c:	90 95       	com	r25
    396e:	fc 01       	movw	r30, r24
    3970:	ee 0f       	add	r30, r30
    3972:	ff 1f       	adc	r31, r31
    3974:	e8 0f       	add	r30, r24
    3976:	f9 1f       	adc	r31, r25
    3978:	ee 59       	subi	r30, 0x9E	; 158
    397a:	f8 4f       	sbci	r31, 0xF8	; 248
    397c:	82 81       	ldd	r24, Z+2	; 0x02
}
    397e:	08 95       	ret

00003980 <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    3980:	e0 91 6e 07 	lds	r30, 0x076E
    3984:	f0 91 6f 07 	lds	r31, 0x076F
}
    3988:	80 81       	ld	r24, Z
    398a:	08 95       	ret

0000398c <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    398c:	e0 91 6e 07 	lds	r30, 0x076E
    3990:	f0 91 6f 07 	lds	r31, 0x076F
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    3994:	03 c0       	rjmp	.+6      	; 0x399c <nrk_print_readyQ+0x10>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    3996:	03 80       	ldd	r0, Z+3	; 0x03
    3998:	f4 81       	ldd	r31, Z+4	; 0x04
    399a:	e0 2d       	mov	r30, r0
void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    399c:	30 97       	sbiw	r30, 0x00	; 0
    399e:	d9 f7       	brne	.-10     	; 0x3996 <nrk_print_readyQ+0xa>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    39a0:	08 95       	ret

000039a2 <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    39a2:	bf 92       	push	r11
    39a4:	cf 92       	push	r12
    39a6:	df 92       	push	r13
    39a8:	ef 92       	push	r14
    39aa:	ff 92       	push	r15
    39ac:	0f 93       	push	r16
    39ae:	1f 93       	push	r17
    39b0:	cf 93       	push	r28
    39b2:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    39b4:	e0 91 08 07 	lds	r30, 0x0708
    39b8:	f0 91 09 07 	lds	r31, 0x0709
    39bc:	30 97       	sbiw	r30, 0x00	; 0
    39be:	09 f4       	brne	.+2      	; 0x39c2 <nrk_add_to_readyQ+0x20>
    39c0:	9b c0       	rjmp	.+310    	; 0x3af8 <nrk_add_to_readyQ+0x156>
    {
        return;
    }


    NextNode = _head_node;
    39c2:	40 91 6e 07 	lds	r20, 0x076E
    39c6:	50 91 6f 07 	lds	r21, 0x076F
    CurNode = _free_node;

    if (_head_node != NULL)
    39ca:	41 15       	cp	r20, r1
    39cc:	51 05       	cpc	r21, r1
    39ce:	09 f4       	brne	.+2      	; 0x39d2 <nrk_add_to_readyQ+0x30>
    39d0:	57 c0       	rjmp	.+174    	; 0x3a80 <nrk_add_to_readyQ+0xde>
    39d2:	da 01       	movw	r26, r20
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    39d4:	2b e2       	ldi	r18, 0x2B	; 43
    39d6:	30 e0       	ldi	r19, 0x00	; 0
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    39d8:	c8 2f       	mov	r28, r24
    39da:	dd 27       	eor	r29, r29
    39dc:	c7 fd       	sbrc	r28, 7
    39de:	d0 95       	com	r29
    39e0:	c2 9f       	mul	r28, r18
    39e2:	b0 01       	movw	r22, r0
    39e4:	c3 9f       	mul	r28, r19
    39e6:	70 0d       	add	r23, r0
    39e8:	d2 9f       	mul	r29, r18
    39ea:	70 0d       	add	r23, r0
    39ec:	11 24       	eor	r1, r1
    39ee:	66 5f       	subi	r22, 0xF6	; 246
    39f0:	78 4f       	sbci	r23, 0xF8	; 248
    39f2:	8b 01       	movw	r16, r22
    39f4:	06 5f       	subi	r16, 0xF6	; 246
    39f6:	1f 4f       	sbci	r17, 0xFF	; 255
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    39f8:	94 e0       	ldi	r25, 0x04	; 4
    39fa:	e9 2e       	mov	r14, r25
    39fc:	f1 2c       	mov	r15, r1
    39fe:	e6 0e       	add	r14, r22
    3a00:	f7 1e       	adc	r15, r23
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    3a02:	9b e0       	ldi	r25, 0x0B	; 11
    3a04:	c9 2e       	mov	r12, r25
    3a06:	d1 2c       	mov	r13, r1
    3a08:	c6 0e       	add	r12, r22
    3a0a:	d7 1e       	adc	r13, r23
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    3a0c:	6c 91       	ld	r22, X
    3a0e:	70 e0       	ldi	r23, 0x00	; 0
    3a10:	62 9f       	mul	r22, r18
    3a12:	e0 01       	movw	r28, r0
    3a14:	63 9f       	mul	r22, r19
    3a16:	d0 0d       	add	r29, r0
    3a18:	72 9f       	mul	r23, r18
    3a1a:	d0 0d       	add	r29, r0
    3a1c:	11 24       	eor	r1, r1
    3a1e:	c6 5f       	subi	r28, 0xF6	; 246
    3a20:	d8 4f       	sbci	r29, 0xF8	; 248
    3a22:	9c 81       	ldd	r25, Y+4	; 0x04
    3a24:	99 23       	and	r25, r25
    3a26:	29 f0       	breq	.+10     	; 0x3a32 <nrk_add_to_readyQ+0x90>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    3a28:	bb 84       	ldd	r11, Y+11	; 0x0b
    3a2a:	e8 01       	movw	r28, r16
    3a2c:	98 81       	ld	r25, Y
    3a2e:	b9 16       	cp	r11, r25
    3a30:	48 f1       	brcs	.+82     	; 0x3a84 <nrk_add_to_readyQ+0xe2>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    3a32:	e7 01       	movw	r28, r14
    3a34:	98 81       	ld	r25, Y
    3a36:	99 23       	and	r25, r25
    3a38:	71 f0       	breq	.+28     	; 0x3a56 <nrk_add_to_readyQ+0xb4>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    3a3a:	62 9f       	mul	r22, r18
    3a3c:	e0 01       	movw	r28, r0
    3a3e:	63 9f       	mul	r22, r19
    3a40:	d0 0d       	add	r29, r0
    3a42:	72 9f       	mul	r23, r18
    3a44:	d0 0d       	add	r29, r0
    3a46:	11 24       	eor	r1, r1
    3a48:	c6 5f       	subi	r28, 0xF6	; 246
    3a4a:	d8 4f       	sbci	r29, 0xF8	; 248
    3a4c:	ba 84       	ldd	r11, Y+10	; 0x0a
    3a4e:	e6 01       	movw	r28, r12
    3a50:	98 81       	ld	r25, Y
    3a52:	b9 16       	cp	r11, r25
    3a54:	b8 f0       	brcs	.+46     	; 0x3a84 <nrk_add_to_readyQ+0xe2>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    3a56:	62 9f       	mul	r22, r18
    3a58:	e0 01       	movw	r28, r0
    3a5a:	63 9f       	mul	r22, r19
    3a5c:	d0 0d       	add	r29, r0
    3a5e:	72 9f       	mul	r23, r18
    3a60:	d0 0d       	add	r29, r0
    3a62:	11 24       	eor	r1, r1
    3a64:	c6 5f       	subi	r28, 0xF6	; 246
    3a66:	d8 4f       	sbci	r29, 0xF8	; 248
    3a68:	6a 85       	ldd	r22, Y+10	; 0x0a
    3a6a:	e8 01       	movw	r28, r16
    3a6c:	98 81       	ld	r25, Y
    3a6e:	69 17       	cp	r22, r25
    3a70:	48 f0       	brcs	.+18     	; 0x3a84 <nrk_add_to_readyQ+0xe2>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    3a72:	13 96       	adiw	r26, 0x03	; 3
    3a74:	0d 90       	ld	r0, X+
    3a76:	bc 91       	ld	r27, X
    3a78:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    3a7a:	10 97       	sbiw	r26, 0x00	; 0
    3a7c:	39 f6       	brne	.-114    	; 0x3a0c <nrk_add_to_readyQ+0x6a>
    3a7e:	02 c0       	rjmp	.+4      	; 0x3a84 <nrk_add_to_readyQ+0xe2>


    NextNode = _head_node;
    CurNode = _free_node;

    if (_head_node != NULL)
    3a80:	a0 e0       	ldi	r26, 0x00	; 0
    3a82:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    3a84:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    3a86:	c3 81       	ldd	r28, Z+3	; 0x03
    3a88:	d4 81       	ldd	r29, Z+4	; 0x04
    3a8a:	d0 93 09 07 	sts	0x0709, r29
    3a8e:	c0 93 08 07 	sts	0x0708, r28

    if (NextNode == _head_node)
    3a92:	a4 17       	cp	r26, r20
    3a94:	b5 07       	cpc	r27, r21
    3a96:	b1 f4       	brne	.+44     	; 0x3ac4 <nrk_add_to_readyQ+0x122>
    {
        //at start
        if (_head_node != NULL)
    3a98:	10 97       	sbiw	r26, 0x00	; 0
    3a9a:	49 f0       	breq	.+18     	; 0x3aae <nrk_add_to_readyQ+0x10c>
        {
            CurNode->Next = _head_node;
    3a9c:	b4 83       	std	Z+4, r27	; 0x04
    3a9e:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    3aa0:	12 82       	std	Z+2, r1	; 0x02
    3aa2:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    3aa4:	12 96       	adiw	r26, 0x02	; 2
    3aa6:	fc 93       	st	X, r31
    3aa8:	ee 93       	st	-X, r30
    3aaa:	11 97       	sbiw	r26, 0x01	; 1
    3aac:	06 c0       	rjmp	.+12     	; 0x3aba <nrk_add_to_readyQ+0x118>
        }
        else
        {
            CurNode->Next = NULL;
    3aae:	14 82       	std	Z+4, r1	; 0x04
    3ab0:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    3ab2:	12 82       	std	Z+2, r1	; 0x02
    3ab4:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    3ab6:	fa 83       	std	Y+2, r31	; 0x02
    3ab8:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    3aba:	f0 93 6f 07 	sts	0x076F, r31
    3abe:	e0 93 6e 07 	sts	0x076E, r30
    3ac2:	1a c0       	rjmp	.+52     	; 0x3af8 <nrk_add_to_readyQ+0x156>
    3ac4:	11 96       	adiw	r26, 0x01	; 1
    3ac6:	8d 91       	ld	r24, X+
    3ac8:	9c 91       	ld	r25, X
    3aca:	12 97       	sbiw	r26, 0x02	; 2

    }
    else
    {
        if (NextNode != _free_node)
    3acc:	ac 17       	cp	r26, r28
    3ace:	bd 07       	cpc	r27, r29
    3ad0:	59 f0       	breq	.+22     	; 0x3ae8 <nrk_add_to_readyQ+0x146>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    3ad2:	92 83       	std	Z+2, r25	; 0x02
    3ad4:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    3ad6:	b4 83       	std	Z+4, r27	; 0x04
    3ad8:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    3ada:	11 96       	adiw	r26, 0x01	; 1
    3adc:	cd 91       	ld	r28, X+
    3ade:	dc 91       	ld	r29, X
    3ae0:	12 97       	sbiw	r26, 0x02	; 2
    3ae2:	fc 83       	std	Y+4, r31	; 0x04
    3ae4:	eb 83       	std	Y+3, r30	; 0x03
    3ae6:	04 c0       	rjmp	.+8      	; 0x3af0 <nrk_add_to_readyQ+0x14e>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    3ae8:	14 82       	std	Z+4, r1	; 0x04
    3aea:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    3aec:	92 83       	std	Z+2, r25	; 0x02
    3aee:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    3af0:	12 96       	adiw	r26, 0x02	; 2
    3af2:	fc 93       	st	X, r31
    3af4:	ee 93       	st	-X, r30
    3af6:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    3af8:	df 91       	pop	r29
    3afa:	cf 91       	pop	r28
    3afc:	1f 91       	pop	r17
    3afe:	0f 91       	pop	r16
    3b00:	ff 90       	pop	r15
    3b02:	ef 90       	pop	r14
    3b04:	df 90       	pop	r13
    3b06:	cf 90       	pop	r12
    3b08:	bf 90       	pop	r11
    3b0a:	08 95       	ret

00003b0c <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    3b0c:	cf 93       	push	r28
    3b0e:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    3b10:	e0 91 6e 07 	lds	r30, 0x076E
    3b14:	f0 91 6f 07 	lds	r31, 0x076F
    3b18:	30 97       	sbiw	r30, 0x00	; 0
    3b1a:	09 f4       	brne	.+2      	; 0x3b1e <nrk_rem_from_readyQ+0x12>
    3b1c:	44 c0       	rjmp	.+136    	; 0x3ba6 <nrk_rem_from_readyQ+0x9a>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    3b1e:	99 27       	eor	r25, r25
    3b20:	87 fd       	sbrc	r24, 7
    3b22:	90 95       	com	r25
    3b24:	20 81       	ld	r18, Z
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	28 17       	cp	r18, r24
    3b2a:	39 07       	cpc	r19, r25
    3b2c:	81 f4       	brne	.+32     	; 0x3b4e <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    3b2e:	a3 81       	ldd	r26, Z+3	; 0x03
    3b30:	b4 81       	ldd	r27, Z+4	; 0x04
    3b32:	b0 93 6f 07 	sts	0x076F, r27
    3b36:	a0 93 6e 07 	sts	0x076E, r26
        _head_node->Prev = NULL;
    3b3a:	12 96       	adiw	r26, 0x02	; 2
    3b3c:	1c 92       	st	X, r1
    3b3e:	1e 92       	st	-X, r1
    3b40:	11 97       	sbiw	r26, 0x01	; 1
    3b42:	18 c0       	rjmp	.+48     	; 0x3b74 <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    3b44:	03 80       	ldd	r0, Z+3	; 0x03
    3b46:	f4 81       	ldd	r31, Z+4	; 0x04
    3b48:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    3b4a:	30 97       	sbiw	r30, 0x00	; 0
    3b4c:	61 f1       	breq	.+88     	; 0x3ba6 <nrk_rem_from_readyQ+0x9a>
    3b4e:	20 81       	ld	r18, Z
    3b50:	30 e0       	ldi	r19, 0x00	; 0
    3b52:	28 17       	cp	r18, r24
    3b54:	39 07       	cpc	r19, r25
    3b56:	b1 f7       	brne	.-20     	; 0x3b44 <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    3b58:	c1 81       	ldd	r28, Z+1	; 0x01
    3b5a:	d2 81       	ldd	r29, Z+2	; 0x02
    3b5c:	83 81       	ldd	r24, Z+3	; 0x03
    3b5e:	94 81       	ldd	r25, Z+4	; 0x04
    3b60:	9c 83       	std	Y+4, r25	; 0x04
    3b62:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    3b64:	a3 81       	ldd	r26, Z+3	; 0x03
    3b66:	b4 81       	ldd	r27, Z+4	; 0x04
    3b68:	10 97       	sbiw	r26, 0x00	; 0
    3b6a:	21 f0       	breq	.+8      	; 0x3b74 <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    3b6c:	12 96       	adiw	r26, 0x02	; 2
    3b6e:	dc 93       	st	X, r29
    3b70:	ce 93       	st	-X, r28
    3b72:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    3b74:	a0 91 08 07 	lds	r26, 0x0708
    3b78:	b0 91 09 07 	lds	r27, 0x0709
    3b7c:	10 97       	sbiw	r26, 0x00	; 0
    3b7e:	39 f4       	brne	.+14     	; 0x3b8e <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    3b80:	f0 93 09 07 	sts	0x0709, r31
    3b84:	e0 93 08 07 	sts	0x0708, r30
        _free_node->Next = NULL;
    3b88:	14 82       	std	Z+4, r1	; 0x04
    3b8a:	13 82       	std	Z+3, r1	; 0x03
    3b8c:	0a c0       	rjmp	.+20     	; 0x3ba2 <nrk_rem_from_readyQ+0x96>
    }
    else
    {
        CurNode->Next = _free_node;
    3b8e:	b4 83       	std	Z+4, r27	; 0x04
    3b90:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    3b92:	12 96       	adiw	r26, 0x02	; 2
    3b94:	fc 93       	st	X, r31
    3b96:	ee 93       	st	-X, r30
    3b98:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    3b9a:	f0 93 09 07 	sts	0x0709, r31
    3b9e:	e0 93 08 07 	sts	0x0708, r30
    }
    _free_node->Prev = NULL;
    3ba2:	12 82       	std	Z+2, r1	; 0x02
    3ba4:	11 82       	std	Z+1, r1	; 0x01
}
    3ba6:	df 91       	pop	r29
    3ba8:	cf 91       	pop	r28
    3baa:	08 95       	ret

00003bac <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    3bac:	ef 92       	push	r14
    3bae:	ff 92       	push	r15
    3bb0:	0f 93       	push	r16
    3bb2:	1f 93       	push	r17
    3bb4:	cf 93       	push	r28
    3bb6:	df 93       	push	r29
    3bb8:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    3bba:	69 81       	ldd	r22, Y+1	; 0x01
    3bbc:	7a 81       	ldd	r23, Y+2	; 0x02
    3bbe:	4b 81       	ldd	r20, Y+3	; 0x03
    3bc0:	5c 81       	ldd	r21, Y+4	; 0x04
    3bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    3bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    3bc6:	0e 94 3d 2b 	call	0x567a	; 0x567a <nrk_task_stk_init>
    3bca:	bc 01       	movw	r22, r24
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    3bcc:	8f 81       	ldd	r24, Y+7	; 0x07
    3bce:	88 23       	and	r24, r24
    3bd0:	69 f0       	breq	.+26     	; 0x3bec <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    3bd2:	4b 81       	ldd	r20, Y+3	; 0x03
    3bd4:	5c 81       	ldd	r21, Y+4	; 0x04
    3bd6:	ce 01       	movw	r24, r28
    3bd8:	20 e0       	ldi	r18, 0x00	; 0
    3bda:	30 e0       	ldi	r19, 0x00	; 0
    3bdc:	00 e0       	ldi	r16, 0x00	; 0
    3bde:	10 e0       	ldi	r17, 0x00	; 0
    3be0:	ee 24       	eor	r14, r14
    3be2:	ff 24       	eor	r15, r15
    3be4:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    3be8:	1f 82       	std	Y+7, r1	; 0x07
    3bea:	14 c0       	rjmp	.+40     	; 0x3c14 <nrk_activate_task+0x68>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    3bec:	28 81       	ld	r18, Y
    3bee:	33 27       	eor	r19, r19
    3bf0:	27 fd       	sbrc	r18, 7
    3bf2:	30 95       	com	r19
    3bf4:	8b e2       	ldi	r24, 0x2B	; 43
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	28 9f       	mul	r18, r24
    3bfa:	f0 01       	movw	r30, r0
    3bfc:	29 9f       	mul	r18, r25
    3bfe:	f0 0d       	add	r31, r0
    3c00:	38 9f       	mul	r19, r24
    3c02:	f0 0d       	add	r31, r0
    3c04:	11 24       	eor	r1, r1
    3c06:	e6 5f       	subi	r30, 0xF6	; 246
    3c08:	f8 4f       	sbci	r31, 0xF8	; 248
    3c0a:	81 85       	ldd	r24, Z+9	; 0x09
    3c0c:	83 30       	cpi	r24, 0x03	; 3
    3c0e:	f9 f4       	brne	.+62     	; 0x3c4e <nrk_activate_task+0xa2>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    3c10:	71 83       	std	Z+1, r23	; 0x01
    3c12:	60 83       	st	Z, r22
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    3c14:	28 81       	ld	r18, Y
    3c16:	33 27       	eor	r19, r19
    3c18:	27 fd       	sbrc	r18, 7
    3c1a:	30 95       	com	r19
    3c1c:	8b e2       	ldi	r24, 0x2B	; 43
    3c1e:	90 e0       	ldi	r25, 0x00	; 0
    3c20:	28 9f       	mul	r18, r24
    3c22:	f0 01       	movw	r30, r0
    3c24:	29 9f       	mul	r18, r25
    3c26:	f0 0d       	add	r31, r0
    3c28:	38 9f       	mul	r19, r24
    3c2a:	f0 0d       	add	r31, r0
    3c2c:	11 24       	eor	r1, r1
    3c2e:	e6 5f       	subi	r30, 0xF6	; 246
    3c30:	f8 4f       	sbci	r31, 0xF8	; 248
    3c32:	85 89       	ldd	r24, Z+21	; 0x15
    3c34:	96 89       	ldd	r25, Z+22	; 0x16
    3c36:	a7 89       	ldd	r26, Z+23	; 0x17
    3c38:	b0 8d       	ldd	r27, Z+24	; 0x18
    3c3a:	00 97       	sbiw	r24, 0x00	; 0
    3c3c:	a1 05       	cpc	r26, r1
    3c3e:	b1 05       	cpc	r27, r1
    3c40:	41 f4       	brne	.+16     	; 0x3c52 <nrk_activate_task+0xa6>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    3c42:	82 e0       	ldi	r24, 0x02	; 2
    3c44:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    3c46:	88 81       	ld	r24, Y
    3c48:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <nrk_add_to_readyQ>
    3c4c:	02 c0       	rjmp	.+4      	; 0x3c52 <nrk_activate_task+0xa6>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    3c4e:	8f ef       	ldi	r24, 0xFF	; 255
    3c50:	01 c0       	rjmp	.+2      	; 0x3c54 <nrk_activate_task+0xa8>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    3c52:	81 e0       	ldi	r24, 0x01	; 1
}
    3c54:	df 91       	pop	r29
    3c56:	cf 91       	pop	r28
    3c58:	1f 91       	pop	r17
    3c5a:	0f 91       	pop	r16
    3c5c:	ff 90       	pop	r15
    3c5e:	ef 90       	pop	r14
    3c60:	08 95       	ret

00003c62 <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    3c62:	1f 93       	push	r17
    3c64:	df 93       	push	r29
    3c66:	cf 93       	push	r28
    3c68:	cd b7       	in	r28, 0x3d	; 61
    3c6a:	de b7       	in	r29, 0x3e	; 62
    3c6c:	28 97       	sbiw	r28, 0x08	; 8
    3c6e:	0f b6       	in	r0, 0x3f	; 63
    3c70:	f8 94       	cli
    3c72:	de bf       	out	0x3e, r29	; 62
    3c74:	0f be       	out	0x3f, r0	; 63
    3c76:	cd bf       	out	0x3d, r28	; 61
    3c78:	29 83       	std	Y+1, r18	; 0x01
    3c7a:	3a 83       	std	Y+2, r19	; 0x02
    3c7c:	4b 83       	std	Y+3, r20	; 0x03
    3c7e:	5c 83       	std	Y+4, r21	; 0x04
    3c80:	6d 83       	std	Y+5, r22	; 0x05
    3c82:	7e 83       	std	Y+6, r23	; 0x06
    3c84:	8f 83       	std	Y+7, r24	; 0x07
    3c86:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    3c88:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    3c8c:	0e 94 55 28 	call	0x50aa	; 0x50aa <_nrk_os_timer_get>
    3c90:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks_long(&t);
    3c92:	ce 01       	movw	r24, r28
    3c94:	01 96       	adiw	r24, 0x01	; 1
    3c96:	0e 94 77 22 	call	0x44ee	; 0x44ee <_nrk_time_to_ticks_long>
    if (nw <= TIME_PAD)
    3c9a:	63 30       	cpi	r22, 0x03	; 3
    3c9c:	71 05       	cpc	r23, r1
    3c9e:	80 f0       	brcs	.+32     	; 0x3cc0 <nrk_set_next_wakeup+0x5e>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    3ca0:	e0 91 79 07 	lds	r30, 0x0779
    3ca4:	f0 91 7a 07 	lds	r31, 0x077A
    3ca8:	61 0f       	add	r22, r17
    3caa:	71 1d       	adc	r23, r1
    3cac:	80 e0       	ldi	r24, 0x00	; 0
    3cae:	90 e0       	ldi	r25, 0x00	; 0
    3cb0:	65 8b       	std	Z+21, r22	; 0x15
    3cb2:	76 8b       	std	Z+22, r23	; 0x16
    3cb4:	87 8b       	std	Z+23, r24	; 0x17
    3cb6:	90 8f       	std	Z+24, r25	; 0x18
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    3cb8:	0e 94 db 14 	call	0x29b6	; 0x29b6 <nrk_int_enable>

    return NRK_OK;
    3cbc:	81 e0       	ldi	r24, 0x01	; 1
    3cbe:	01 c0       	rjmp	.+2      	; 0x3cc2 <nrk_set_next_wakeup+0x60>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks_long(&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    3cc0:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    3cc2:	28 96       	adiw	r28, 0x08	; 8
    3cc4:	0f b6       	in	r0, 0x3f	; 63
    3cc6:	f8 94       	cli
    3cc8:	de bf       	out	0x3e, r29	; 62
    3cca:	0f be       	out	0x3f, r0	; 63
    3ccc:	cd bf       	out	0x3d, r28	; 61
    3cce:	cf 91       	pop	r28
    3cd0:	df 91       	pop	r29
    3cd2:	1f 91       	pop	r17
    3cd4:	08 95       	ret

00003cd6 <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    3cd6:	0e 94 0f 2b 	call	0x561e	; 0x561e <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    3cda:	e0 91 79 07 	lds	r30, 0x0779
    3cde:	f0 91 7a 07 	lds	r31, 0x077A
    3ce2:	85 81       	ldd	r24, Z+5	; 0x05
    3ce4:	88 23       	and	r24, r24
    3ce6:	b9 f7       	brne	.-18     	; 0x3cd6 <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    3ce8:	08 95       	ret

00003cea <nrk_wait>:
    return NRK_OK;
}


int8_t nrk_wait (nrk_time_t t)
{
    3cea:	1f 93       	push	r17
    3cec:	df 93       	push	r29
    3cee:	cf 93       	push	r28
    3cf0:	cd b7       	in	r28, 0x3d	; 61
    3cf2:	de b7       	in	r29, 0x3e	; 62
    3cf4:	28 97       	sbiw	r28, 0x08	; 8
    3cf6:	0f b6       	in	r0, 0x3f	; 63
    3cf8:	f8 94       	cli
    3cfa:	de bf       	out	0x3e, r29	; 62
    3cfc:	0f be       	out	0x3f, r0	; 63
    3cfe:	cd bf       	out	0x3d, r28	; 61
    3d00:	29 83       	std	Y+1, r18	; 0x01
    3d02:	3a 83       	std	Y+2, r19	; 0x02
    3d04:	4b 83       	std	Y+3, r20	; 0x03
    3d06:	5c 83       	std	Y+4, r21	; 0x04
    3d08:	6d 83       	std	Y+5, r22	; 0x05
    3d0a:	7e 83       	std	Y+6, r23	; 0x06
    3d0c:	8f 83       	std	Y+7, r24	; 0x07
    3d0e:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint32_t nw;

    nrk_stack_check ();
    3d10:	0e 94 3b 19 	call	0x3276	; 0x3276 <nrk_stack_check>

    nrk_int_disable ();
    3d14:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3d18:	e0 91 79 07 	lds	r30, 0x0779
    3d1c:	f0 91 7a 07 	lds	r31, 0x077A
    3d20:	81 e0       	ldi	r24, 0x01	; 1
    3d22:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    3d24:	81 e0       	ldi	r24, 0x01	; 1
    3d26:	90 e0       	ldi	r25, 0x00	; 0
    3d28:	92 a7       	std	Z+42, r25	; 0x2a
    3d2a:	81 a7       	std	Z+41, r24	; 0x29
    timer = _nrk_os_timer_get ();
    3d2c:	0e 94 55 28 	call	0x50aa	; 0x50aa <_nrk_os_timer_get>
    3d30:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks_long (&t);
    3d32:	ce 01       	movw	r24, r28
    3d34:	01 96       	adiw	r24, 0x01	; 1
    3d36:	0e 94 77 22 	call	0x44ee	; 0x44ee <_nrk_time_to_ticks_long>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    3d3a:	e0 91 79 07 	lds	r30, 0x0779
    3d3e:	f0 91 7a 07 	lds	r31, 0x077A
    3d42:	61 0f       	add	r22, r17
    3d44:	71 1d       	adc	r23, r1
    3d46:	81 1d       	adc	r24, r1
    3d48:	91 1d       	adc	r25, r1
    3d4a:	65 8b       	std	Z+21, r22	; 0x15
    3d4c:	76 8b       	std	Z+22, r23	; 0x16
    3d4e:	87 8b       	std	Z+23, r24	; 0x17
    3d50:	90 8f       	std	Z+24, r25	; 0x18
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    3d52:	18 3f       	cpi	r17, 0xF8	; 248
    3d54:	88 f4       	brcc	.+34     	; 0x3d78 <nrk_wait+0x8e>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3d56:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <_nrk_get_next_wakeup>
    3d5a:	21 2f       	mov	r18, r17
    3d5c:	30 e0       	ldi	r19, 0x00	; 0
    3d5e:	2f 5f       	subi	r18, 0xFF	; 255
    3d60:	3f 4f       	sbci	r19, 0xFF	; 255
    3d62:	48 2f       	mov	r20, r24
    3d64:	50 e0       	ldi	r21, 0x00	; 0
    3d66:	24 17       	cp	r18, r20
    3d68:	35 07       	cpc	r19, r21
    3d6a:	34 f4       	brge	.+12     	; 0x3d78 <nrk_wait+0x8e>
        {
            timer += TIME_PAD;
    3d6c:	81 2f       	mov	r24, r17
    3d6e:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    3d70:	80 93 e8 05 	sts	0x05E8, r24
            _nrk_set_next_wakeup (timer);
    3d74:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    3d78:	0e 94 db 14 	call	0x29b6	; 0x29b6 <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    3d7c:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3d80:	81 e0       	ldi	r24, 0x01	; 1
    3d82:	28 96       	adiw	r28, 0x08	; 8
    3d84:	0f b6       	in	r0, 0x3f	; 63
    3d86:	f8 94       	cli
    3d88:	de bf       	out	0x3e, r29	; 62
    3d8a:	0f be       	out	0x3f, r0	; 63
    3d8c:	cd bf       	out	0x3d, r28	; 61
    3d8e:	cf 91       	pop	r28
    3d90:	df 91       	pop	r29
    3d92:	1f 91       	pop	r17
    3d94:	08 95       	ret

00003d96 <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    3d96:	1f 93       	push	r17
    uint8_t timer;
    nrk_int_disable ();
    3d98:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3d9c:	e0 91 79 07 	lds	r30, 0x0779
    3da0:	f0 91 7a 07 	lds	r31, 0x077A
    3da4:	81 e0       	ldi	r24, 0x01	; 1
    3da6:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    3da8:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    3daa:	0e 94 55 28 	call	0x50aa	; 0x50aa <_nrk_os_timer_get>
    3dae:	18 2f       	mov	r17, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    3db0:	88 3f       	cpi	r24, 0xF8	; 248
    3db2:	88 f4       	brcc	.+34     	; 0x3dd6 <nrk_wait_until_nw+0x40>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3db4:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <_nrk_get_next_wakeup>
    3db8:	21 2f       	mov	r18, r17
    3dba:	30 e0       	ldi	r19, 0x00	; 0
    3dbc:	2f 5f       	subi	r18, 0xFF	; 255
    3dbe:	3f 4f       	sbci	r19, 0xFF	; 255
    3dc0:	48 2f       	mov	r20, r24
    3dc2:	50 e0       	ldi	r21, 0x00	; 0
    3dc4:	24 17       	cp	r18, r20
    3dc6:	35 07       	cpc	r19, r21
    3dc8:	34 f4       	brge	.+12     	; 0x3dd6 <nrk_wait_until_nw+0x40>
        {
            timer += TIME_PAD;
    3dca:	81 2f       	mov	r24, r17
    3dcc:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    3dce:	80 93 e8 05 	sts	0x05E8, r24
            _nrk_set_next_wakeup (timer);
    3dd2:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    3dd6:	0e 94 db 14 	call	0x29b6	; 0x29b6 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    3dda:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3dde:	81 e0       	ldi	r24, 0x01	; 1
    3de0:	1f 91       	pop	r17
    3de2:	08 95       	ret

00003de4 <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    3de4:	1f 93       	push	r17
    3de6:	cf 93       	push	r28
    3de8:	df 93       	push	r29
    3dea:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    3dec:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3df0:	e0 91 79 07 	lds	r30, 0x0779
    3df4:	f0 91 7a 07 	lds	r31, 0x077A
    3df8:	81 e0       	ldi	r24, 0x01	; 1
    3dfa:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    3dfc:	ce 01       	movw	r24, r28
    3dfe:	a0 e0       	ldi	r26, 0x00	; 0
    3e00:	b0 e0       	ldi	r27, 0x00	; 0
    3e02:	85 8b       	std	Z+21, r24	; 0x15
    3e04:	96 8b       	std	Z+22, r25	; 0x16
    3e06:	a7 8b       	std	Z+23, r26	; 0x17
    3e08:	b0 8f       	std	Z+24, r27	; 0x18
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    3e0a:	0e 94 55 28 	call	0x50aa	; 0x50aa <_nrk_os_timer_get>
    3e0e:	18 2f       	mov	r17, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    3e10:	88 3f       	cpi	r24, 0xF8	; 248
    3e12:	88 f4       	brcc	.+34     	; 0x3e36 <nrk_wait_until_ticks+0x52>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3e14:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <_nrk_get_next_wakeup>
    3e18:	21 2f       	mov	r18, r17
    3e1a:	30 e0       	ldi	r19, 0x00	; 0
    3e1c:	2f 5f       	subi	r18, 0xFF	; 255
    3e1e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e20:	48 2f       	mov	r20, r24
    3e22:	50 e0       	ldi	r21, 0x00	; 0
    3e24:	24 17       	cp	r18, r20
    3e26:	35 07       	cpc	r19, r21
    3e28:	34 f4       	brge	.+12     	; 0x3e36 <nrk_wait_until_ticks+0x52>
        {
            timer += TIME_PAD;
    3e2a:	81 2f       	mov	r24, r17
    3e2c:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    3e2e:	80 93 e8 05 	sts	0x05E8, r24
            _nrk_set_next_wakeup (timer);
    3e32:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    3e36:	0e 94 db 14 	call	0x29b6	; 0x29b6 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    3e3a:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3e3e:	81 e0       	ldi	r24, 0x01	; 1
    3e40:	df 91       	pop	r29
    3e42:	cf 91       	pop	r28
    3e44:	1f 91       	pop	r17
    3e46:	08 95       	ret

00003e48 <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    3e48:	ef 92       	push	r14
    3e4a:	ff 92       	push	r15
    3e4c:	0f 93       	push	r16
    3e4e:	1f 93       	push	r17
    3e50:	df 93       	push	r29
    3e52:	cf 93       	push	r28
    3e54:	0f 92       	push	r0
    3e56:	cd b7       	in	r28, 0x3d	; 61
    3e58:	de b7       	in	r29, 0x3e	; 62
    3e5a:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    3e5c:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3e60:	e0 91 79 07 	lds	r30, 0x0779
    3e64:	f0 91 7a 07 	lds	r31, 0x077A
    3e68:	81 e0       	ldi	r24, 0x01	; 1
    3e6a:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    3e6c:	0e 94 55 28 	call	0x50aa	; 0x50aa <_nrk_os_timer_get>
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    3e70:	e0 91 79 07 	lds	r30, 0x0779
    3e74:	f0 91 7a 07 	lds	r31, 0x077A
    3e78:	e8 2e       	mov	r14, r24
    3e7a:	ff 24       	eor	r15, r15
    3e7c:	0e 0d       	add	r16, r14
    3e7e:	1f 1d       	adc	r17, r15
    3e80:	20 e0       	ldi	r18, 0x00	; 0
    3e82:	30 e0       	ldi	r19, 0x00	; 0
    3e84:	05 8b       	std	Z+21, r16	; 0x15
    3e86:	16 8b       	std	Z+22, r17	; 0x16
    3e88:	27 8b       	std	Z+23, r18	; 0x17
    3e8a:	30 8f       	std	Z+24, r19	; 0x18

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    3e8c:	88 3f       	cpi	r24, 0xF8	; 248
    3e8e:	90 f4       	brcc	.+36     	; 0x3eb4 <nrk_wait_ticks+0x6c>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3e90:	89 83       	std	Y+1, r24	; 0x01
    3e92:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <_nrk_get_next_wakeup>
    3e96:	08 94       	sec
    3e98:	e1 1c       	adc	r14, r1
    3e9a:	f1 1c       	adc	r15, r1
    3e9c:	28 2f       	mov	r18, r24
    3e9e:	30 e0       	ldi	r19, 0x00	; 0
    3ea0:	99 81       	ldd	r25, Y+1	; 0x01
    3ea2:	e2 16       	cp	r14, r18
    3ea4:	f3 06       	cpc	r15, r19
    3ea6:	34 f4       	brge	.+12     	; 0x3eb4 <nrk_wait_ticks+0x6c>
        {
            timer += TIME_PAD;
    3ea8:	89 2f       	mov	r24, r25
    3eaa:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    3eac:	80 93 e8 05 	sts	0x05E8, r24
            _nrk_set_next_wakeup (timer);
    3eb0:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    3eb4:	0e 94 db 14 	call	0x29b6	; 0x29b6 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    3eb8:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3ebc:	81 e0       	ldi	r24, 0x01	; 1
    3ebe:	0f 90       	pop	r0
    3ec0:	cf 91       	pop	r28
    3ec2:	df 91       	pop	r29
    3ec4:	1f 91       	pop	r17
    3ec6:	0f 91       	pop	r16
    3ec8:	ff 90       	pop	r15
    3eca:	ef 90       	pop	r14
    3ecc:	08 95       	ret

00003ece <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    3ece:	1f 93       	push	r17
    3ed0:	cf 93       	push	r28
    3ed2:	df 93       	push	r29
    3ed4:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    3ed6:	0e 94 3b 19 	call	0x3276	; 0x3276 <nrk_stack_check>

    if (p == 0)
    3eda:	20 97       	sbiw	r28, 0x00	; 0
    3edc:	11 f4       	brne	.+4      	; 0x3ee2 <nrk_wait_until_next_n_periods+0x14>
        p = 1;
    3ede:	c1 e0       	ldi	r28, 0x01	; 1
    3ee0:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    3ee2:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3ee6:	e0 91 79 07 	lds	r30, 0x0779
    3eea:	f0 91 7a 07 	lds	r31, 0x077A
    3eee:	81 e0       	ldi	r24, 0x01	; 1
    3ef0:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    3ef2:	d2 a7       	std	Z+42, r29	; 0x2a
    3ef4:	c1 a7       	std	Z+41, r28	; 0x29
    timer = _nrk_os_timer_get ();
    3ef6:	0e 94 55 28 	call	0x50aa	; 0x50aa <_nrk_os_timer_get>
    3efa:	18 2f       	mov	r17, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    3efc:	88 3f       	cpi	r24, 0xF8	; 248
    3efe:	88 f4       	brcc	.+34     	; 0x3f22 <nrk_wait_until_next_n_periods+0x54>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3f00:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <_nrk_get_next_wakeup>
    3f04:	21 2f       	mov	r18, r17
    3f06:	30 e0       	ldi	r19, 0x00	; 0
    3f08:	2f 5f       	subi	r18, 0xFF	; 255
    3f0a:	3f 4f       	sbci	r19, 0xFF	; 255
    3f0c:	48 2f       	mov	r20, r24
    3f0e:	50 e0       	ldi	r21, 0x00	; 0
    3f10:	24 17       	cp	r18, r20
    3f12:	35 07       	cpc	r19, r21
    3f14:	34 f4       	brge	.+12     	; 0x3f22 <nrk_wait_until_next_n_periods+0x54>
        {
            timer += TIME_PAD;
    3f16:	81 2f       	mov	r24, r17
    3f18:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    3f1a:	80 93 e8 05 	sts	0x05E8, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    3f1e:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    3f22:	0e 94 db 14 	call	0x29b6	; 0x29b6 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    3f26:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3f2a:	81 e0       	ldi	r24, 0x01	; 1
    3f2c:	df 91       	pop	r29
    3f2e:	cf 91       	pop	r28
    3f30:	1f 91       	pop	r17
    3f32:	08 95       	ret

00003f34 <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    3f34:	1f 93       	push	r17
    uint8_t timer;

    nrk_stack_check ();
    3f36:	0e 94 3b 19 	call	0x3276	; 0x3276 <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    3f3a:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    3f3e:	e0 91 79 07 	lds	r30, 0x0779
    3f42:	f0 91 7a 07 	lds	r31, 0x077A
    3f46:	81 e0       	ldi	r24, 0x01	; 1
    3f48:	90 e0       	ldi	r25, 0x00	; 0
    3f4a:	92 a7       	std	Z+42, r25	; 0x2a
    3f4c:	81 a7       	std	Z+41, r24	; 0x29
    nrk_cur_task_TCB->suspend_flag = 1;
    3f4e:	81 e0       	ldi	r24, 0x01	; 1
    3f50:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    3f52:	0e 94 55 28 	call	0x50aa	; 0x50aa <_nrk_os_timer_get>
    3f56:	18 2f       	mov	r17, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    3f58:	88 3f       	cpi	r24, 0xF8	; 248
    3f5a:	88 f4       	brcc	.+34     	; 0x3f7e <nrk_wait_until_next_period+0x4a>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3f5c:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <_nrk_get_next_wakeup>
    3f60:	21 2f       	mov	r18, r17
    3f62:	30 e0       	ldi	r19, 0x00	; 0
    3f64:	2f 5f       	subi	r18, 0xFF	; 255
    3f66:	3f 4f       	sbci	r19, 0xFF	; 255
    3f68:	48 2f       	mov	r20, r24
    3f6a:	50 e0       	ldi	r21, 0x00	; 0
    3f6c:	24 17       	cp	r18, r20
    3f6e:	35 07       	cpc	r19, r21
    3f70:	34 f4       	brge	.+12     	; 0x3f7e <nrk_wait_until_next_period+0x4a>
        {
            timer += TIME_PAD;
    3f72:	81 2f       	mov	r24, r17
    3f74:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    3f76:	80 93 e8 05 	sts	0x05E8, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    3f7a:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    3f7e:	0e 94 db 14 	call	0x29b6	; 0x29b6 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    3f82:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3f86:	81 e0       	ldi	r24, 0x01	; 1
    3f88:	1f 91       	pop	r17
    3f8a:	08 95       	ret

00003f8c <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    3f8c:	e0 91 79 07 	lds	r30, 0x0779
    3f90:	f0 91 7a 07 	lds	r31, 0x077A
    3f94:	80 85       	ldd	r24, Z+8	; 0x08
    3f96:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    3f9a:	e0 91 79 07 	lds	r30, 0x0779
    3f9e:	f0 91 7a 07 	lds	r31, 0x077A
    3fa2:	84 e0       	ldi	r24, 0x04	; 4
    3fa4:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    3fa6:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <nrk_wait_until_next_period>
    return NRK_OK;
}
    3faa:	81 e0       	ldi	r24, 0x01	; 1
    3fac:	08 95       	ret

00003fae <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    3fae:	8f 92       	push	r8
    3fb0:	9f 92       	push	r9
    3fb2:	af 92       	push	r10
    3fb4:	bf 92       	push	r11
    3fb6:	cf 92       	push	r12
    3fb8:	df 92       	push	r13
    3fba:	ef 92       	push	r14
    3fbc:	ff 92       	push	r15
    3fbe:	0f 93       	push	r16
    3fc0:	1f 93       	push	r17
    3fc2:	df 93       	push	r29
    3fc4:	cf 93       	push	r28
    3fc6:	cd b7       	in	r28, 0x3d	; 61
    3fc8:	de b7       	in	r29, 0x3e	; 62
    3fca:	60 97       	sbiw	r28, 0x10	; 16
    3fcc:	0f b6       	in	r0, 0x3f	; 63
    3fce:	f8 94       	cli
    3fd0:	de bf       	out	0x3e, r29	; 62
    3fd2:	0f be       	out	0x3f, r0	; 63
    3fd4:	cd bf       	out	0x3d, r28	; 61
    3fd6:	29 87       	std	Y+9, r18	; 0x09
    3fd8:	3a 87       	std	Y+10, r19	; 0x0a
    3fda:	4b 87       	std	Y+11, r20	; 0x0b
    3fdc:	5c 87       	std	Y+12, r21	; 0x0c
    3fde:	6d 87       	std	Y+13, r22	; 0x0d
    3fe0:	7e 87       	std	Y+14, r23	; 0x0e
    3fe2:	8f 87       	std	Y+15, r24	; 0x0f
    3fe4:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    3fe6:	ce 01       	movw	r24, r28
    3fe8:	01 96       	adiw	r24, 0x01	; 1
    3fea:	0e 94 33 20 	call	0x4066	; 0x4066 <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    3fee:	ce 01       	movw	r24, r28
    3ff0:	09 96       	adiw	r24, 0x09	; 9
    3ff2:	09 85       	ldd	r16, Y+9	; 0x09
    3ff4:	1a 85       	ldd	r17, Y+10	; 0x0a
    3ff6:	2b 85       	ldd	r18, Y+11	; 0x0b
    3ff8:	3c 85       	ldd	r19, Y+12	; 0x0c
    3ffa:	4d 85       	ldd	r20, Y+13	; 0x0d
    3ffc:	5e 85       	ldd	r21, Y+14	; 0x0e
    3ffe:	6f 85       	ldd	r22, Y+15	; 0x0f
    4000:	78 89       	ldd	r23, Y+16	; 0x10
    4002:	89 80       	ldd	r8, Y+1	; 0x01
    4004:	9a 80       	ldd	r9, Y+2	; 0x02
    4006:	ab 80       	ldd	r10, Y+3	; 0x03
    4008:	bc 80       	ldd	r11, Y+4	; 0x04
    400a:	cd 80       	ldd	r12, Y+5	; 0x05
    400c:	de 80       	ldd	r13, Y+6	; 0x06
    400e:	ef 80       	ldd	r14, Y+7	; 0x07
    4010:	f8 84       	ldd	r15, Y+8	; 0x08
    4012:	0e 94 91 20 	call	0x4122	; 0x4122 <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    4016:	8f 3f       	cpi	r24, 0xFF	; 255
    4018:	61 f0       	breq	.+24     	; 0x4032 <nrk_wait_until+0x84>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    401a:	29 85       	ldd	r18, Y+9	; 0x09
    401c:	3a 85       	ldd	r19, Y+10	; 0x0a
    401e:	4b 85       	ldd	r20, Y+11	; 0x0b
    4020:	5c 85       	ldd	r21, Y+12	; 0x0c
    4022:	6d 85       	ldd	r22, Y+13	; 0x0d
    4024:	7e 85       	ldd	r23, Y+14	; 0x0e
    4026:	8f 85       	ldd	r24, Y+15	; 0x0f
    4028:	98 89       	ldd	r25, Y+16	; 0x10
    402a:	0e 94 75 1e 	call	0x3cea	; 0x3cea <nrk_wait>

    return NRK_OK;
    402e:	81 e0       	ldi	r24, 0x01	; 1
    4030:	01 c0       	rjmp	.+2      	; 0x4034 <nrk_wait_until+0x86>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    4032:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    4034:	60 96       	adiw	r28, 0x10	; 16
    4036:	0f b6       	in	r0, 0x3f	; 63
    4038:	f8 94       	cli
    403a:	de bf       	out	0x3e, r29	; 62
    403c:	0f be       	out	0x3f, r0	; 63
    403e:	cd bf       	out	0x3d, r28	; 61
    4040:	cf 91       	pop	r28
    4042:	df 91       	pop	r29
    4044:	1f 91       	pop	r17
    4046:	0f 91       	pop	r16
    4048:	ff 90       	pop	r15
    404a:	ef 90       	pop	r14
    404c:	df 90       	pop	r13
    404e:	cf 90       	pop	r12
    4050:	bf 90       	pop	r11
    4052:	af 90       	pop	r10
    4054:	9f 90       	pop	r9
    4056:	8f 90       	pop	r8
    4058:	08 95       	ret

0000405a <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    405a:	e0 91 79 07 	lds	r30, 0x0779
    405e:	f0 91 7a 07 	lds	r31, 0x077A
}
    4062:	80 85       	ldd	r24, Z+8	; 0x08
    4064:	08 95       	ret

00004066 <nrk_time_get>:
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

void nrk_time_get(nrk_time_t *t)
{
    4066:	ef 92       	push	r14
    4068:	ff 92       	push	r15
    406a:	0f 93       	push	r16
    406c:	1f 93       	push	r17
    406e:	cf 93       	push	r28
    4070:	df 93       	push	r29
    4072:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    4074:	1c 82       	std	Y+4, r1	; 0x04
    4076:	1d 82       	std	Y+5, r1	; 0x05
    4078:	1e 82       	std	Y+6, r1	; 0x06
    407a:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    407c:	80 91 70 07 	lds	r24, 0x0770
    4080:	90 91 71 07 	lds	r25, 0x0771
    4084:	a0 91 72 07 	lds	r26, 0x0772
    4088:	b0 91 73 07 	lds	r27, 0x0773
    408c:	88 83       	st	Y, r24
    408e:	99 83       	std	Y+1, r25	; 0x01
    4090:	aa 83       	std	Y+2, r26	; 0x02
    4092:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    4094:	e0 90 74 07 	lds	r14, 0x0774
    4098:	f0 90 75 07 	lds	r15, 0x0775
    409c:	00 91 76 07 	lds	r16, 0x0776
    40a0:	10 91 77 07 	lds	r17, 0x0777
    40a4:	ec 82       	std	Y+4, r14	; 0x04
    40a6:	fd 82       	std	Y+5, r15	; 0x05
    40a8:	0e 83       	std	Y+6, r16	; 0x06
    40aa:	1f 83       	std	Y+7, r17	; 0x07
   
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    40ac:	0e 94 55 28 	call	0x50aa	; 0x50aa <_nrk_os_timer_get>
    40b0:	68 2f       	mov	r22, r24
    40b2:	70 e0       	ldi	r23, 0x00	; 0
    40b4:	80 e0       	ldi	r24, 0x00	; 0
    40b6:	90 e0       	ldi	r25, 0x00	; 0
    40b8:	23 eb       	ldi	r18, 0xB3	; 179
    40ba:	36 ee       	ldi	r19, 0xE6	; 230
    40bc:	4e e0       	ldi	r20, 0x0E	; 14
    40be:	50 e0       	ldi	r21, 0x00	; 0
    40c0:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__mulsi3>
    40c4:	6e 0d       	add	r22, r14
    40c6:	7f 1d       	adc	r23, r15
    40c8:	80 1f       	adc	r24, r16
    40ca:	91 1f       	adc	r25, r17
    40cc:	6c 83       	std	Y+4, r22	; 0x04
    40ce:	7d 83       	std	Y+5, r23	; 0x05
    40d0:	8e 83       	std	Y+6, r24	; 0x06
    40d2:	9f 83       	std	Y+7, r25	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    40d4:	13 c0       	rjmp	.+38     	; 0x40fc <nrk_time_get+0x96>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    40d6:	80 50       	subi	r24, 0x00	; 0
    40d8:	9a 4c       	sbci	r25, 0xCA	; 202
    40da:	aa 49       	sbci	r26, 0x9A	; 154
    40dc:	bb 43       	sbci	r27, 0x3B	; 59
    40de:	8c 83       	std	Y+4, r24	; 0x04
    40e0:	9d 83       	std	Y+5, r25	; 0x05
    40e2:	ae 83       	std	Y+6, r26	; 0x06
    40e4:	bf 83       	std	Y+7, r27	; 0x07
    t->secs++;
    40e6:	88 81       	ld	r24, Y
    40e8:	99 81       	ldd	r25, Y+1	; 0x01
    40ea:	aa 81       	ldd	r26, Y+2	; 0x02
    40ec:	bb 81       	ldd	r27, Y+3	; 0x03
    40ee:	01 96       	adiw	r24, 0x01	; 1
    40f0:	a1 1d       	adc	r26, r1
    40f2:	b1 1d       	adc	r27, r1
    40f4:	88 83       	st	Y, r24
    40f6:	99 83       	std	Y+1, r25	; 0x01
    40f8:	aa 83       	std	Y+2, r26	; 0x02
    40fa:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
   
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    40fc:	8c 81       	ldd	r24, Y+4	; 0x04
    40fe:	9d 81       	ldd	r25, Y+5	; 0x05
    4100:	ae 81       	ldd	r26, Y+6	; 0x06
    4102:	bf 81       	ldd	r27, Y+7	; 0x07
    4104:	80 30       	cpi	r24, 0x00	; 0
    4106:	2a ec       	ldi	r18, 0xCA	; 202
    4108:	92 07       	cpc	r25, r18
    410a:	2a e9       	ldi	r18, 0x9A	; 154
    410c:	a2 07       	cpc	r26, r18
    410e:	2b e3       	ldi	r18, 0x3B	; 59
    4110:	b2 07       	cpc	r27, r18
    4112:	08 f7       	brcc	.-62     	; 0x40d6 <nrk_time_get+0x70>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    t->secs++;
    }

}
    4114:	df 91       	pop	r29
    4116:	cf 91       	pop	r28
    4118:	1f 91       	pop	r17
    411a:	0f 91       	pop	r16
    411c:	ff 90       	pop	r15
    411e:	ef 90       	pop	r14
    4120:	08 95       	ret

00004122 <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    4122:	8f 92       	push	r8
    4124:	9f 92       	push	r9
    4126:	af 92       	push	r10
    4128:	bf 92       	push	r11
    412a:	cf 92       	push	r12
    412c:	df 92       	push	r13
    412e:	ef 92       	push	r14
    4130:	ff 92       	push	r15
    4132:	0f 93       	push	r16
    4134:	1f 93       	push	r17
    4136:	df 93       	push	r29
    4138:	cf 93       	push	r28
    413a:	cd b7       	in	r28, 0x3d	; 61
    413c:	de b7       	in	r29, 0x3e	; 62
    413e:	60 97       	sbiw	r28, 0x10	; 16
    4140:	0f b6       	in	r0, 0x3f	; 63
    4142:	f8 94       	cli
    4144:	de bf       	out	0x3e, r29	; 62
    4146:	0f be       	out	0x3f, r0	; 63
    4148:	cd bf       	out	0x3d, r28	; 61
    414a:	fc 01       	movw	r30, r24
    414c:	09 83       	std	Y+1, r16	; 0x01
    414e:	1a 83       	std	Y+2, r17	; 0x02
    4150:	2b 83       	std	Y+3, r18	; 0x03
    4152:	3c 83       	std	Y+4, r19	; 0x04
    4154:	4d 83       	std	Y+5, r20	; 0x05
    4156:	5e 83       	std	Y+6, r21	; 0x06
    4158:	6f 83       	std	Y+7, r22	; 0x07
    415a:	78 87       	std	Y+8, r23	; 0x08
    415c:	89 86       	std	Y+9, r8	; 0x09
    415e:	9a 86       	std	Y+10, r9	; 0x0a
    4160:	ab 86       	std	Y+11, r10	; 0x0b
    4162:	bc 86       	std	Y+12, r11	; 0x0c
    4164:	cd 86       	std	Y+13, r12	; 0x0d
    4166:	de 86       	std	Y+14, r13	; 0x0e
    4168:	ef 86       	std	Y+15, r14	; 0x0f
    416a:	f8 8a       	std	Y+16, r15	; 0x10
	return NRK_OK;
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
    416c:	e9 80       	ldd	r14, Y+1	; 0x01
    416e:	fa 80       	ldd	r15, Y+2	; 0x02
    4170:	0b 81       	ldd	r16, Y+3	; 0x03
    4172:	1c 81       	ldd	r17, Y+4	; 0x04
    4174:	2d 81       	ldd	r18, Y+5	; 0x05
    4176:	3e 81       	ldd	r19, Y+6	; 0x06
    4178:	4f 81       	ldd	r20, Y+7	; 0x07
    417a:	58 85       	ldd	r21, Y+8	; 0x08
    417c:	a9 84       	ldd	r10, Y+9	; 0x09
    417e:	ba 84       	ldd	r11, Y+10	; 0x0a
    4180:	cb 84       	ldd	r12, Y+11	; 0x0b
    4182:	dc 84       	ldd	r13, Y+12	; 0x0c
    4184:	8d 85       	ldd	r24, Y+13	; 0x0d
    4186:	9e 85       	ldd	r25, Y+14	; 0x0e
    4188:	af 85       	ldd	r26, Y+15	; 0x0f
    418a:	b8 89       	ldd	r27, Y+16	; 0x10
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    418c:	ea 14       	cp	r14, r10
    418e:	fb 04       	cpc	r15, r11
    4190:	0c 05       	cpc	r16, r12
    4192:	1d 05       	cpc	r17, r13
    4194:	08 f4       	brcc	.+2      	; 0x4198 <nrk_time_sub+0x76>
    4196:	40 c0       	rjmp	.+128    	; 0x4218 <__stack+0x19>
if(low.secs==high.secs)
    4198:	ae 14       	cp	r10, r14
    419a:	bf 04       	cpc	r11, r15
    419c:	c0 06       	cpc	r12, r16
    419e:	d1 06       	cpc	r13, r17
    41a0:	91 f4       	brne	.+36     	; 0x41c6 <nrk_time_sub+0xa4>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    41a2:	28 17       	cp	r18, r24
    41a4:	39 07       	cpc	r19, r25
    41a6:	4a 07       	cpc	r20, r26
    41a8:	5b 07       	cpc	r21, r27
    41aa:	b0 f1       	brcs	.+108    	; 0x4218 <__stack+0x19>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    41ac:	28 1b       	sub	r18, r24
    41ae:	39 0b       	sbc	r19, r25
    41b0:	4a 0b       	sbc	r20, r26
    41b2:	5b 0b       	sbc	r21, r27
    41b4:	24 83       	std	Z+4, r18	; 0x04
    41b6:	35 83       	std	Z+5, r19	; 0x05
    41b8:	46 83       	std	Z+6, r20	; 0x06
    41ba:	57 83       	std	Z+7, r21	; 0x07
	result->secs=0;
    41bc:	10 82       	st	Z, r1
    41be:	11 82       	std	Z+1, r1	; 0x01
    41c0:	12 82       	std	Z+2, r1	; 0x02
    41c2:	13 82       	std	Z+3, r1	; 0x03
    41c4:	27 c0       	rjmp	.+78     	; 0x4214 <__stack+0x15>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    41c6:	28 17       	cp	r18, r24
    41c8:	39 07       	cpc	r19, r25
    41ca:	4a 07       	cpc	r20, r26
    41cc:	5b 07       	cpc	r21, r27
    41ce:	90 f4       	brcc	.+36     	; 0x41f4 <nrk_time_sub+0xd2>
{
	high.secs--;
    41d0:	08 94       	sec
    41d2:	e1 08       	sbc	r14, r1
    41d4:	f1 08       	sbc	r15, r1
    41d6:	01 09       	sbc	r16, r1
    41d8:	11 09       	sbc	r17, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    41da:	ea 18       	sub	r14, r10
    41dc:	fb 08       	sbc	r15, r11
    41de:	0c 09       	sbc	r16, r12
    41e0:	1d 09       	sbc	r17, r13
    41e2:	e0 82       	st	Z, r14
    41e4:	f1 82       	std	Z+1, r15	; 0x01
    41e6:	02 83       	std	Z+2, r16	; 0x02
    41e8:	13 83       	std	Z+3, r17	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    41ea:	20 50       	subi	r18, 0x00	; 0
    41ec:	36 43       	sbci	r19, 0x36	; 54
    41ee:	45 46       	sbci	r20, 0x65	; 101
    41f0:	54 4c       	sbci	r21, 0xC4	; 196
    41f2:	08 c0       	rjmp	.+16     	; 0x4204 <__stack+0x5>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    41f4:	ea 18       	sub	r14, r10
    41f6:	fb 08       	sbc	r15, r11
    41f8:	0c 09       	sbc	r16, r12
    41fa:	1d 09       	sbc	r17, r13
    41fc:	e0 82       	st	Z, r14
    41fe:	f1 82       	std	Z+1, r15	; 0x01
    4200:	02 83       	std	Z+2, r16	; 0x02
    4202:	13 83       	std	Z+3, r17	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    4204:	28 1b       	sub	r18, r24
    4206:	39 0b       	sbc	r19, r25
    4208:	4a 0b       	sbc	r20, r26
    420a:	5b 0b       	sbc	r21, r27
    420c:	24 83       	std	Z+4, r18	; 0x04
    420e:	35 83       	std	Z+5, r19	; 0x05
    4210:	46 83       	std	Z+6, r20	; 0x06
    4212:	57 83       	std	Z+7, r21	; 0x07
return NRK_OK;
    4214:	81 e0       	ldi	r24, 0x01	; 1
    4216:	01 c0       	rjmp	.+2      	; 0x421a <__stack+0x1b>
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
if(low.secs==high.secs)
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    4218:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    421a:	60 96       	adiw	r28, 0x10	; 16
    421c:	0f b6       	in	r0, 0x3f	; 63
    421e:	f8 94       	cli
    4220:	de bf       	out	0x3e, r29	; 62
    4222:	0f be       	out	0x3f, r0	; 63
    4224:	cd bf       	out	0x3d, r28	; 61
    4226:	cf 91       	pop	r28
    4228:	df 91       	pop	r29
    422a:	1f 91       	pop	r17
    422c:	0f 91       	pop	r16
    422e:	ff 90       	pop	r15
    4230:	ef 90       	pop	r14
    4232:	df 90       	pop	r13
    4234:	cf 90       	pop	r12
    4236:	bf 90       	pop	r11
    4238:	af 90       	pop	r10
    423a:	9f 90       	pop	r9
    423c:	8f 90       	pop	r8
    423e:	08 95       	ret

00004240 <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    4240:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    4242:	14 c0       	rjmp	.+40     	; 0x426c <nrk_time_compact_nanos+0x2c>
    {
    t->nano_secs-=NANOS_PER_SEC;
    4244:	20 50       	subi	r18, 0x00	; 0
    4246:	3a 4c       	sbci	r19, 0xCA	; 202
    4248:	4a 49       	sbci	r20, 0x9A	; 154
    424a:	5b 43       	sbci	r21, 0x3B	; 59
    424c:	24 83       	std	Z+4, r18	; 0x04
    424e:	35 83       	std	Z+5, r19	; 0x05
    4250:	46 83       	std	Z+6, r20	; 0x06
    4252:	57 83       	std	Z+7, r21	; 0x07
    t->secs++;
    4254:	20 81       	ld	r18, Z
    4256:	31 81       	ldd	r19, Z+1	; 0x01
    4258:	42 81       	ldd	r20, Z+2	; 0x02
    425a:	53 81       	ldd	r21, Z+3	; 0x03
    425c:	2f 5f       	subi	r18, 0xFF	; 255
    425e:	3f 4f       	sbci	r19, 0xFF	; 255
    4260:	4f 4f       	sbci	r20, 0xFF	; 255
    4262:	5f 4f       	sbci	r21, 0xFF	; 255
    4264:	20 83       	st	Z, r18
    4266:	31 83       	std	Z+1, r19	; 0x01
    4268:	42 83       	std	Z+2, r20	; 0x02
    426a:	53 83       	std	Z+3, r21	; 0x03
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
  while(t->nano_secs>=NANOS_PER_SEC)
    426c:	24 81       	ldd	r18, Z+4	; 0x04
    426e:	35 81       	ldd	r19, Z+5	; 0x05
    4270:	46 81       	ldd	r20, Z+6	; 0x06
    4272:	57 81       	ldd	r21, Z+7	; 0x07
    4274:	20 30       	cpi	r18, 0x00	; 0
    4276:	8a ec       	ldi	r24, 0xCA	; 202
    4278:	38 07       	cpc	r19, r24
    427a:	8a e9       	ldi	r24, 0x9A	; 154
    427c:	48 07       	cpc	r20, r24
    427e:	8b e3       	ldi	r24, 0x3B	; 59
    4280:	58 07       	cpc	r21, r24
    4282:	00 f7       	brcc	.-64     	; 0x4244 <nrk_time_compact_nanos+0x4>
    {
    t->nano_secs-=NANOS_PER_SEC;
    t->secs++;
    }
}
    4284:	08 95       	ret

00004286 <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    4286:	8f 92       	push	r8
    4288:	9f 92       	push	r9
    428a:	af 92       	push	r10
    428c:	bf 92       	push	r11
    428e:	cf 92       	push	r12
    4290:	df 92       	push	r13
    4292:	ef 92       	push	r14
    4294:	ff 92       	push	r15
    4296:	0f 93       	push	r16
    4298:	1f 93       	push	r17
    429a:	df 93       	push	r29
    429c:	cf 93       	push	r28
    429e:	cd b7       	in	r28, 0x3d	; 61
    42a0:	de b7       	in	r29, 0x3e	; 62
    42a2:	60 97       	sbiw	r28, 0x10	; 16
    42a4:	0f b6       	in	r0, 0x3f	; 63
    42a6:	f8 94       	cli
    42a8:	de bf       	out	0x3e, r29	; 62
    42aa:	0f be       	out	0x3f, r0	; 63
    42ac:	cd bf       	out	0x3d, r28	; 61
    42ae:	09 83       	std	Y+1, r16	; 0x01
    42b0:	1a 83       	std	Y+2, r17	; 0x02
    42b2:	2b 83       	std	Y+3, r18	; 0x03
    42b4:	3c 83       	std	Y+4, r19	; 0x04
    42b6:	4d 83       	std	Y+5, r20	; 0x05
    42b8:	5e 83       	std	Y+6, r21	; 0x06
    42ba:	6f 83       	std	Y+7, r22	; 0x07
    42bc:	78 87       	std	Y+8, r23	; 0x08
    42be:	89 86       	std	Y+9, r8	; 0x09
    42c0:	9a 86       	std	Y+10, r9	; 0x0a
    42c2:	ab 86       	std	Y+11, r10	; 0x0b
    42c4:	bc 86       	std	Y+12, r11	; 0x0c
    42c6:	cd 86       	std	Y+13, r12	; 0x0d
    42c8:	de 86       	std	Y+14, r13	; 0x0e
    42ca:	ef 86       	std	Y+15, r14	; 0x0f
    42cc:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    42ce:	29 85       	ldd	r18, Y+9	; 0x09
    42d0:	3a 85       	ldd	r19, Y+10	; 0x0a
    42d2:	4b 85       	ldd	r20, Y+11	; 0x0b
    42d4:	5c 85       	ldd	r21, Y+12	; 0x0c
    42d6:	e9 80       	ldd	r14, Y+1	; 0x01
    42d8:	fa 80       	ldd	r15, Y+2	; 0x02
    42da:	0b 81       	ldd	r16, Y+3	; 0x03
    42dc:	1c 81       	ldd	r17, Y+4	; 0x04
    42de:	2e 0d       	add	r18, r14
    42e0:	3f 1d       	adc	r19, r15
    42e2:	40 1f       	adc	r20, r16
    42e4:	51 1f       	adc	r21, r17
    42e6:	fc 01       	movw	r30, r24
    42e8:	20 83       	st	Z, r18
    42ea:	31 83       	std	Z+1, r19	; 0x01
    42ec:	42 83       	std	Z+2, r20	; 0x02
    42ee:	53 83       	std	Z+3, r21	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    42f0:	2d 85       	ldd	r18, Y+13	; 0x0d
    42f2:	3e 85       	ldd	r19, Y+14	; 0x0e
    42f4:	4f 85       	ldd	r20, Y+15	; 0x0f
    42f6:	58 89       	ldd	r21, Y+16	; 0x10
    42f8:	ed 80       	ldd	r14, Y+5	; 0x05
    42fa:	fe 80       	ldd	r15, Y+6	; 0x06
    42fc:	0f 81       	ldd	r16, Y+7	; 0x07
    42fe:	18 85       	ldd	r17, Y+8	; 0x08
    4300:	2e 0d       	add	r18, r14
    4302:	3f 1d       	adc	r19, r15
    4304:	40 1f       	adc	r20, r16
    4306:	51 1f       	adc	r21, r17
    4308:	24 83       	std	Z+4, r18	; 0x04
    430a:	35 83       	std	Z+5, r19	; 0x05
    430c:	46 83       	std	Z+6, r20	; 0x06
    430e:	57 83       	std	Z+7, r21	; 0x07
nrk_time_compact_nanos(result);
    4310:	0e 94 20 21 	call	0x4240	; 0x4240 <nrk_time_compact_nanos>
return NRK_OK;
}
    4314:	81 e0       	ldi	r24, 0x01	; 1
    4316:	60 96       	adiw	r28, 0x10	; 16
    4318:	0f b6       	in	r0, 0x3f	; 63
    431a:	f8 94       	cli
    431c:	de bf       	out	0x3e, r29	; 62
    431e:	0f be       	out	0x3f, r0	; 63
    4320:	cd bf       	out	0x3d, r28	; 61
    4322:	cf 91       	pop	r28
    4324:	df 91       	pop	r29
    4326:	1f 91       	pop	r17
    4328:	0f 91       	pop	r16
    432a:	ff 90       	pop	r15
    432c:	ef 90       	pop	r14
    432e:	df 90       	pop	r13
    4330:	cf 90       	pop	r12
    4332:	bf 90       	pop	r11
    4334:	af 90       	pop	r10
    4336:	9f 90       	pop	r9
    4338:	8f 90       	pop	r8
    433a:	08 95       	ret

0000433c <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    433c:	60 93 70 07 	sts	0x0770, r22
    4340:	70 93 71 07 	sts	0x0771, r23
    4344:	80 93 72 07 	sts	0x0772, r24
    4348:	90 93 73 07 	sts	0x0773, r25
  nrk_system_time.nano_secs=nano_secs;
    434c:	20 93 74 07 	sts	0x0774, r18
    4350:	30 93 75 07 	sts	0x0775, r19
    4354:	40 93 76 07 	sts	0x0776, r20
    4358:	50 93 77 07 	sts	0x0777, r21
}
    435c:	08 95       	ret

0000435e <_nrk_time_to_ticks>:

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    435e:	8f 92       	push	r8
    4360:	9f 92       	push	r9
    4362:	af 92       	push	r10
    4364:	bf 92       	push	r11
    4366:	cf 92       	push	r12
    4368:	df 92       	push	r13
    436a:	ef 92       	push	r14
    436c:	ff 92       	push	r15
    436e:	0f 93       	push	r16
    4370:	1f 93       	push	r17
    4372:	fc 01       	movw	r30, r24
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    4374:	20 81       	ld	r18, Z
    4376:	31 81       	ldd	r19, Z+1	; 0x01
    4378:	42 81       	ldd	r20, Z+2	; 0x02
    437a:	53 81       	ldd	r21, Z+3	; 0x03
    437c:	64 81       	ldd	r22, Z+4	; 0x04
    437e:	75 81       	ldd	r23, Z+5	; 0x05
    4380:	86 81       	ldd	r24, Z+6	; 0x06
    4382:	97 81       	ldd	r25, Z+7	; 0x07
    4384:	21 15       	cp	r18, r1
    4386:	31 05       	cpc	r19, r1
    4388:	41 05       	cpc	r20, r1
    438a:	51 05       	cpc	r21, r1
    438c:	09 f4       	brne	.+2      	; 0x4390 <_nrk_time_to_ticks+0x32>
    438e:	61 c0       	rjmp	.+194    	; 0x4452 <_nrk_time_to_ticks+0xf4>
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    4390:	22 34       	cpi	r18, 0x42	; 66
    4392:	31 05       	cpc	r19, r1
    4394:	41 05       	cpc	r20, r1
    4396:	51 05       	cpc	r21, r1
    4398:	08 f0       	brcs	.+2      	; 0x439c <_nrk_time_to_ticks+0x3e>
    439a:	62 c0       	rjmp	.+196    	; 0x4460 <_nrk_time_to_ticks+0x102>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    439c:	5b 01       	movw	r10, r22
    439e:	6c 01       	movw	r12, r24
    43a0:	ee 24       	eor	r14, r14
    43a2:	ff 24       	eor	r15, r15
    43a4:	87 01       	movw	r16, r14
    43a6:	60 e0       	ldi	r22, 0x00	; 0
    43a8:	38 c0       	rjmp	.+112    	; 0x441a <_nrk_time_to_ticks+0xbc>
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    43aa:	8a 2c       	mov	r8, r10
    43ac:	ab 2d       	mov	r26, r11
    43ae:	a6 53       	subi	r26, 0x36	; 54
    43b0:	f1 e0       	ldi	r31, 0x01	; 1
    43b2:	ab 15       	cp	r26, r11
    43b4:	08 f0       	brcs	.+2      	; 0x43b8 <_nrk_time_to_ticks+0x5a>
    43b6:	f0 e0       	ldi	r31, 0x00	; 0
    43b8:	8c 2d       	mov	r24, r12
    43ba:	86 56       	subi	r24, 0x66	; 102
    43bc:	91 e0       	ldi	r25, 0x01	; 1
    43be:	8c 15       	cp	r24, r12
    43c0:	08 f0       	brcs	.+2      	; 0x43c4 <_nrk_time_to_ticks+0x66>
    43c2:	90 e0       	ldi	r25, 0x00	; 0
    43c4:	f8 0f       	add	r31, r24
    43c6:	71 e0       	ldi	r23, 0x01	; 1
    43c8:	f8 17       	cp	r31, r24
    43ca:	08 f0       	brcs	.+2      	; 0x43ce <_nrk_time_to_ticks+0x70>
    43cc:	70 e0       	ldi	r23, 0x00	; 0
    43ce:	97 2b       	or	r25, r23
    43d0:	7d 2d       	mov	r23, r13
    43d2:	75 5c       	subi	r23, 0xC5	; 197
    43d4:	e1 e0       	ldi	r30, 0x01	; 1
    43d6:	7d 15       	cp	r23, r13
    43d8:	08 f0       	brcs	.+2      	; 0x43dc <_nrk_time_to_ticks+0x7e>
    43da:	e0 e0       	ldi	r30, 0x00	; 0
    43dc:	97 0f       	add	r25, r23
    43de:	81 e0       	ldi	r24, 0x01	; 1
    43e0:	97 17       	cp	r25, r23
    43e2:	08 f0       	brcs	.+2      	; 0x43e6 <_nrk_time_to_ticks+0x88>
    43e4:	80 e0       	ldi	r24, 0x00	; 0
    43e6:	8e 2b       	or	r24, r30
    43e8:	8e 0d       	add	r24, r14
    43ea:	e1 e0       	ldi	r30, 0x01	; 1
    43ec:	8e 15       	cp	r24, r14
    43ee:	08 f0       	brcs	.+2      	; 0x43f2 <_nrk_time_to_ticks+0x94>
    43f0:	e0 e0       	ldi	r30, 0x00	; 0
    43f2:	ef 0d       	add	r30, r15
    43f4:	71 e0       	ldi	r23, 0x01	; 1
    43f6:	ef 15       	cp	r30, r15
    43f8:	08 f0       	brcs	.+2      	; 0x43fc <_nrk_time_to_ticks+0x9e>
    43fa:	70 e0       	ldi	r23, 0x00	; 0
    43fc:	70 0f       	add	r23, r16
    43fe:	b1 e0       	ldi	r27, 0x01	; 1
    4400:	70 17       	cp	r23, r16
    4402:	08 f0       	brcs	.+2      	; 0x4406 <_nrk_time_to_ticks+0xa8>
    4404:	b0 e0       	ldi	r27, 0x00	; 0
    4406:	b1 0f       	add	r27, r17
    4408:	a8 2c       	mov	r10, r8
    440a:	ba 2e       	mov	r11, r26
    440c:	cf 2e       	mov	r12, r31
    440e:	d9 2e       	mov	r13, r25
    4410:	e8 2e       	mov	r14, r24
    4412:	fe 2e       	mov	r15, r30
    4414:	07 2f       	mov	r16, r23
    4416:	1b 2f       	mov	r17, r27
    4418:	6f 5f       	subi	r22, 0xFF	; 255
    441a:	86 2f       	mov	r24, r22
    441c:	90 e0       	ldi	r25, 0x00	; 0
    441e:	a0 e0       	ldi	r26, 0x00	; 0
    4420:	b0 e0       	ldi	r27, 0x00	; 0
    4422:	82 17       	cp	r24, r18
    4424:	93 07       	cpc	r25, r19
    4426:	a4 07       	cpc	r26, r20
    4428:	b5 07       	cpc	r27, r21
    442a:	08 f4       	brcc	.+2      	; 0x442e <_nrk_time_to_ticks+0xd0>
    442c:	be cf       	rjmp	.-132    	; 0x43aa <_nrk_time_to_ticks+0x4c>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    442e:	95 01       	movw	r18, r10
    4430:	a6 01       	movw	r20, r12
    4432:	b7 01       	movw	r22, r14
    4434:	c8 01       	movw	r24, r16
    4436:	a3 eb       	ldi	r26, 0xB3	; 179
    4438:	aa 2e       	mov	r10, r26
    443a:	f6 ee       	ldi	r31, 0xE6	; 230
    443c:	bf 2e       	mov	r11, r31
    443e:	ee e0       	ldi	r30, 0x0E	; 14
    4440:	ce 2e       	mov	r12, r30
    4442:	dd 24       	eor	r13, r13
    4444:	ee 24       	eor	r14, r14
    4446:	ff 24       	eor	r15, r15
    4448:	00 e0       	ldi	r16, 0x00	; 0
    444a:	10 e0       	ldi	r17, 0x00	; 0
    444c:	0e 94 ae 2b 	call	0x575c	; 0x575c <__udivdi3>
    4450:	09 c0       	rjmp	.+18     	; 0x4464 <_nrk_time_to_ticks+0x106>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    4452:	23 eb       	ldi	r18, 0xB3	; 179
    4454:	36 ee       	ldi	r19, 0xE6	; 230
    4456:	4e e0       	ldi	r20, 0x0E	; 14
    4458:	50 e0       	ldi	r21, 0x00	; 0
    445a:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__udivmodsi4>
    445e:	02 c0       	rjmp	.+4      	; 0x4464 <_nrk_time_to_ticks+0x106>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    4460:	20 e0       	ldi	r18, 0x00	; 0
    4462:	30 e0       	ldi	r19, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    4464:	c9 01       	movw	r24, r18
    4466:	1f 91       	pop	r17
    4468:	0f 91       	pop	r16
    446a:	ff 90       	pop	r15
    446c:	ef 90       	pop	r14
    446e:	df 90       	pop	r13
    4470:	cf 90       	pop	r12
    4472:	bf 90       	pop	r11
    4474:	af 90       	pop	r10
    4476:	9f 90       	pop	r9
    4478:	8f 90       	pop	r8
    447a:	08 95       	ret

0000447c <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    447c:	ef 92       	push	r14
    447e:	ff 92       	push	r15
    4480:	0f 93       	push	r16
    4482:	1f 93       	push	r17
    4484:	df 93       	push	r29
    4486:	cf 93       	push	r28
    4488:	cd b7       	in	r28, 0x3d	; 61
    448a:	de b7       	in	r29, 0x3e	; 62
    448c:	28 97       	sbiw	r28, 0x08	; 8
    448e:	0f b6       	in	r0, 0x3f	; 63
    4490:	f8 94       	cli
    4492:	de bf       	out	0x3e, r29	; 62
    4494:	0f be       	out	0x3f, r0	; 63
    4496:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    4498:	7b 01       	movw	r14, r22
    449a:	8c 01       	movw	r16, r24
    449c:	ba e0       	ldi	r27, 0x0A	; 10
    449e:	16 95       	lsr	r17
    44a0:	07 95       	ror	r16
    44a2:	f7 94       	ror	r15
    44a4:	e7 94       	ror	r14
    44a6:	ba 95       	dec	r27
    44a8:	d1 f7       	brne	.-12     	; 0x449e <_nrk_ticks_to_time+0x22>
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    44aa:	e9 82       	std	Y+1, r14	; 0x01
    44ac:	fa 82       	std	Y+2, r15	; 0x02
    44ae:	0b 83       	std	Y+3, r16	; 0x03
    44b0:	1c 83       	std	Y+4, r17	; 0x04
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    44b2:	73 70       	andi	r23, 0x03	; 3
    44b4:	80 70       	andi	r24, 0x00	; 0
    44b6:	90 70       	andi	r25, 0x00	; 0
    44b8:	23 eb       	ldi	r18, 0xB3	; 179
    44ba:	36 ee       	ldi	r19, 0xE6	; 230
    44bc:	4e e0       	ldi	r20, 0x0E	; 14
    44be:	50 e0       	ldi	r21, 0x00	; 0
    44c0:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__mulsi3>
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    44c4:	6d 83       	std	Y+5, r22	; 0x05
    44c6:	7e 83       	std	Y+6, r23	; 0x06
    44c8:	8f 83       	std	Y+7, r24	; 0x07
    44ca:	98 87       	std	Y+8, r25	; 0x08
    44cc:	2e 2d       	mov	r18, r14
    44ce:	3a 81       	ldd	r19, Y+2	; 0x02
    44d0:	4b 81       	ldd	r20, Y+3	; 0x03
    44d2:	5c 81       	ldd	r21, Y+4	; 0x04

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
}
    44d4:	28 96       	adiw	r28, 0x08	; 8
    44d6:	0f b6       	in	r0, 0x3f	; 63
    44d8:	f8 94       	cli
    44da:	de bf       	out	0x3e, r29	; 62
    44dc:	0f be       	out	0x3f, r0	; 63
    44de:	cd bf       	out	0x3d, r28	; 61
    44e0:	cf 91       	pop	r28
    44e2:	df 91       	pop	r29
    44e4:	1f 91       	pop	r17
    44e6:	0f 91       	pop	r16
    44e8:	ff 90       	pop	r15
    44ea:	ef 90       	pop	r14
    44ec:	08 95       	ret

000044ee <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    44ee:	8f 92       	push	r8
    44f0:	9f 92       	push	r9
    44f2:	af 92       	push	r10
    44f4:	bf 92       	push	r11
    44f6:	cf 92       	push	r12
    44f8:	df 92       	push	r13
    44fa:	ef 92       	push	r14
    44fc:	ff 92       	push	r15
    44fe:	0f 93       	push	r16
    4500:	1f 93       	push	r17
    4502:	fc 01       	movw	r30, r24
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    4504:	20 81       	ld	r18, Z
    4506:	31 81       	ldd	r19, Z+1	; 0x01
    4508:	42 81       	ldd	r20, Z+2	; 0x02
    450a:	53 81       	ldd	r21, Z+3	; 0x03
    450c:	64 81       	ldd	r22, Z+4	; 0x04
    450e:	75 81       	ldd	r23, Z+5	; 0x05
    4510:	86 81       	ldd	r24, Z+6	; 0x06
    4512:	97 81       	ldd	r25, Z+7	; 0x07
    4514:	21 15       	cp	r18, r1
    4516:	31 05       	cpc	r19, r1
    4518:	41 05       	cpc	r20, r1
    451a:	51 05       	cpc	r21, r1
    451c:	09 f4       	brne	.+2      	; 0x4520 <_nrk_time_to_ticks_long+0x32>
    451e:	5b c0       	rjmp	.+182    	; 0x45d6 <_nrk_time_to_ticks_long+0xe8>
{
   tmp=t->nano_secs;
    4520:	5b 01       	movw	r10, r22
    4522:	6c 01       	movw	r12, r24
    4524:	ee 24       	eor	r14, r14
    4526:	ff 24       	eor	r15, r15
    4528:	87 01       	movw	r16, r14
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    452a:	60 e0       	ldi	r22, 0x00	; 0
    452c:	38 c0       	rjmp	.+112    	; 0x459e <_nrk_time_to_ticks_long+0xb0>
    452e:	8a 2c       	mov	r8, r10
    4530:	ab 2d       	mov	r26, r11
    4532:	a6 53       	subi	r26, 0x36	; 54
    4534:	f1 e0       	ldi	r31, 0x01	; 1
    4536:	ab 15       	cp	r26, r11
    4538:	08 f0       	brcs	.+2      	; 0x453c <_nrk_time_to_ticks_long+0x4e>
    453a:	f0 e0       	ldi	r31, 0x00	; 0
    453c:	8c 2d       	mov	r24, r12
    453e:	86 56       	subi	r24, 0x66	; 102
    4540:	91 e0       	ldi	r25, 0x01	; 1
    4542:	8c 15       	cp	r24, r12
    4544:	08 f0       	brcs	.+2      	; 0x4548 <_nrk_time_to_ticks_long+0x5a>
    4546:	90 e0       	ldi	r25, 0x00	; 0
    4548:	f8 0f       	add	r31, r24
    454a:	71 e0       	ldi	r23, 0x01	; 1
    454c:	f8 17       	cp	r31, r24
    454e:	08 f0       	brcs	.+2      	; 0x4552 <_nrk_time_to_ticks_long+0x64>
    4550:	70 e0       	ldi	r23, 0x00	; 0
    4552:	97 2b       	or	r25, r23
    4554:	7d 2d       	mov	r23, r13
    4556:	75 5c       	subi	r23, 0xC5	; 197
    4558:	e1 e0       	ldi	r30, 0x01	; 1
    455a:	7d 15       	cp	r23, r13
    455c:	08 f0       	brcs	.+2      	; 0x4560 <_nrk_time_to_ticks_long+0x72>
    455e:	e0 e0       	ldi	r30, 0x00	; 0
    4560:	97 0f       	add	r25, r23
    4562:	81 e0       	ldi	r24, 0x01	; 1
    4564:	97 17       	cp	r25, r23
    4566:	08 f0       	brcs	.+2      	; 0x456a <_nrk_time_to_ticks_long+0x7c>
    4568:	80 e0       	ldi	r24, 0x00	; 0
    456a:	8e 2b       	or	r24, r30
    456c:	8e 0d       	add	r24, r14
    456e:	e1 e0       	ldi	r30, 0x01	; 1
    4570:	8e 15       	cp	r24, r14
    4572:	08 f0       	brcs	.+2      	; 0x4576 <_nrk_time_to_ticks_long+0x88>
    4574:	e0 e0       	ldi	r30, 0x00	; 0
    4576:	ef 0d       	add	r30, r15
    4578:	71 e0       	ldi	r23, 0x01	; 1
    457a:	ef 15       	cp	r30, r15
    457c:	08 f0       	brcs	.+2      	; 0x4580 <_nrk_time_to_ticks_long+0x92>
    457e:	70 e0       	ldi	r23, 0x00	; 0
    4580:	70 0f       	add	r23, r16
    4582:	b1 e0       	ldi	r27, 0x01	; 1
    4584:	70 17       	cp	r23, r16
    4586:	08 f0       	brcs	.+2      	; 0x458a <_nrk_time_to_ticks_long+0x9c>
    4588:	b0 e0       	ldi	r27, 0x00	; 0
    458a:	b1 0f       	add	r27, r17
    458c:	a8 2c       	mov	r10, r8
    458e:	ba 2e       	mov	r11, r26
    4590:	cf 2e       	mov	r12, r31
    4592:	d9 2e       	mov	r13, r25
    4594:	e8 2e       	mov	r14, r24
    4596:	fe 2e       	mov	r15, r30
    4598:	07 2f       	mov	r16, r23
    459a:	1b 2f       	mov	r17, r27
    459c:	6f 5f       	subi	r22, 0xFF	; 255
    459e:	86 2f       	mov	r24, r22
    45a0:	90 e0       	ldi	r25, 0x00	; 0
    45a2:	a0 e0       	ldi	r26, 0x00	; 0
    45a4:	b0 e0       	ldi	r27, 0x00	; 0
    45a6:	82 17       	cp	r24, r18
    45a8:	93 07       	cpc	r25, r19
    45aa:	a4 07       	cpc	r26, r20
    45ac:	b5 07       	cpc	r27, r21
    45ae:	08 f4       	brcc	.+2      	; 0x45b2 <_nrk_time_to_ticks_long+0xc4>
    45b0:	be cf       	rjmp	.-132    	; 0x452e <_nrk_time_to_ticks_long+0x40>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    45b2:	95 01       	movw	r18, r10
    45b4:	a6 01       	movw	r20, r12
    45b6:	b7 01       	movw	r22, r14
    45b8:	c8 01       	movw	r24, r16
    45ba:	e3 eb       	ldi	r30, 0xB3	; 179
    45bc:	ae 2e       	mov	r10, r30
    45be:	06 ee       	ldi	r16, 0xE6	; 230
    45c0:	b0 2e       	mov	r11, r16
    45c2:	1e e0       	ldi	r17, 0x0E	; 14
    45c4:	c1 2e       	mov	r12, r17
    45c6:	dd 24       	eor	r13, r13
    45c8:	ee 24       	eor	r14, r14
    45ca:	ff 24       	eor	r15, r15
    45cc:	00 e0       	ldi	r16, 0x00	; 0
    45ce:	10 e0       	ldi	r17, 0x00	; 0
    45d0:	0e 94 ae 2b 	call	0x575c	; 0x575c <__udivdi3>
    45d4:	06 c0       	rjmp	.+12     	; 0x45e2 <_nrk_time_to_ticks_long+0xf4>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    45d6:	23 eb       	ldi	r18, 0xB3	; 179
    45d8:	36 ee       	ldi	r19, 0xE6	; 230
    45da:	4e e0       	ldi	r20, 0x0E	; 14
    45dc:	50 e0       	ldi	r21, 0x00	; 0
    45de:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__udivmodsi4>
    45e2:	b9 01       	movw	r22, r18
    45e4:	ca 01       	movw	r24, r20
}
return ticks;
}
    45e6:	1f 91       	pop	r17
    45e8:	0f 91       	pop	r16
    45ea:	ff 90       	pop	r15
    45ec:	ef 90       	pop	r14
    45ee:	df 90       	pop	r13
    45f0:	cf 90       	pop	r12
    45f2:	bf 90       	pop	r11
    45f4:	af 90       	pop	r10
    45f6:	9f 90       	pop	r9
    45f8:	8f 90       	pop	r8
    45fa:	08 95       	ret

000045fc <nrk_idle_task>:
#include <nrk_platform_time.h>
#include <nrk_scheduler.h>
#include <stdio.h>

void nrk_idle_task()
{
    45fc:	0f 93       	push	r16
    45fe:	1f 93       	push	r17

  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    4600:	01 e0       	ldi	r16, 0x01	; 1
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
    4602:	12 e0       	ldi	r17, 0x02	; 2
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{

  nrk_stack_check(); 
    4604:	0e 94 3b 19 	call	0x3276	; 0x3276 <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    4608:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <_nrk_get_next_wakeup>
    460c:	84 30       	cpi	r24, 0x04	; 4
    460e:	28 f4       	brcc	.+10     	; 0x461a <nrk_idle_task+0x1e>
    {
	    _nrk_cpu_state=CPU_IDLE;
    4610:	00 93 6d 07 	sts	0x076D, r16
	    nrk_idle();
    4614:	0e 94 0f 2b 	call	0x561e	; 0x561e <nrk_idle>
    4618:	08 c0       	rjmp	.+16     	; 0x462a <nrk_idle_task+0x2e>
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
    461a:	8a e0       	ldi	r24, 0x0A	; 10
    461c:	90 e0       	ldi	r25, 0x00	; 0
    461e:	0e 94 0d 27 	call	0x4e1a	; 0x4e1a <nrk_spin_wait_us>
	    _nrk_cpu_state=CPU_SLEEP;
    4622:	10 93 6d 07 	sts	0x076D, r17
	    nrk_sleep();
    4626:	0e 94 03 2b 	call	0x5606	; 0x5606 <nrk_sleep>
	    nrk_idle();
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    462a:	80 91 ea 05 	lds	r24, 0x05EA
    462e:	85 35       	cpi	r24, 0x55	; 85
    4630:	19 f0       	breq	.+6      	; 0x4638 <nrk_idle_task+0x3c>
    4632:	88 e0       	ldi	r24, 0x08	; 8
    4634:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    4638:	80 91 7e 41 	lds	r24, 0x417E
    463c:	85 35       	cpi	r24, 0x55	; 85
    463e:	11 f3       	breq	.-60     	; 0x4604 <nrk_idle_task+0x8>
    4640:	88 e0       	ldi	r24, 0x08	; 8
    4642:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <nrk_error_add>
    4646:	de cf       	rjmp	.-68     	; 0x4604 <nrk_idle_task+0x8>

00004648 <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    4648:	2f 92       	push	r2
    464a:	3f 92       	push	r3
    464c:	4f 92       	push	r4
    464e:	5f 92       	push	r5
    4650:	6f 92       	push	r6
    4652:	7f 92       	push	r7
    4654:	8f 92       	push	r8
    4656:	9f 92       	push	r9
    4658:	af 92       	push	r10
    465a:	bf 92       	push	r11
    465c:	cf 92       	push	r12
    465e:	df 92       	push	r13
    4660:	ef 92       	push	r14
    4662:	ff 92       	push	r15
    4664:	0f 93       	push	r16
    4666:	1f 93       	push	r17
    4668:	df 93       	push	r29
    466a:	cf 93       	push	r28
    466c:	00 d0       	rcall	.+0      	; 0x466e <_nrk_scheduler+0x26>
    466e:	00 d0       	rcall	.+0      	; 0x4670 <_nrk_scheduler+0x28>
    4670:	cd b7       	in	r28, 0x3d	; 61
    4672:	de b7       	in	r29, 0x3e	; 62
    int8_t task_ID;
    uint16_t next_wake;
    uint16_t start_time_stamp;

    _nrk_precision_os_timer_reset();
    4674:	0e 94 08 27 	call	0x4e10	; 0x4e10 <_nrk_precision_os_timer_reset>
    nrk_int_enable();   // this should be removed...  Not needed
    4678:	0e 94 db 14 	call	0x29b6	; 0x29b6 <nrk_int_enable>


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_high_speed_timer_reset();
    467c:	0e 94 39 27 	call	0x4e72	; 0x4e72 <_nrk_high_speed_timer_reset>
    start_time_stamp=_nrk_high_speed_timer_get();
    4680:	0e 94 41 27 	call	0x4e82	; 0x4e82 <_nrk_high_speed_timer_get>
    4684:	9a 83       	std	Y+2, r25	; 0x02
    4686:	89 83       	std	Y+1, r24	; 0x01
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    4688:	8a ef       	ldi	r24, 0xFA	; 250
    468a:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <_nrk_set_next_wakeup>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    468e:	60 91 e8 05 	lds	r22, 0x05E8
    4692:	70 e0       	ldi	r23, 0x00	; 0
    4694:	80 e0       	ldi	r24, 0x00	; 0
    4696:	90 e0       	ldi	r25, 0x00	; 0
    4698:	23 eb       	ldi	r18, 0xB3	; 179
    469a:	36 ee       	ldi	r19, 0xE6	; 230
    469c:	4e e0       	ldi	r20, 0x0E	; 14
    469e:	50 e0       	ldi	r21, 0x00	; 0
    46a0:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__mulsi3>
    46a4:	7b 01       	movw	r14, r22
    46a6:	8c 01       	movw	r16, r24
    46a8:	80 91 74 07 	lds	r24, 0x0774
    46ac:	90 91 75 07 	lds	r25, 0x0775
    46b0:	a0 91 76 07 	lds	r26, 0x0776
    46b4:	b0 91 77 07 	lds	r27, 0x0777
    46b8:	e8 0e       	add	r14, r24
    46ba:	f9 1e       	adc	r15, r25
    46bc:	0a 1f       	adc	r16, r26
    46be:	1b 1f       	adc	r17, r27
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    46c0:	c8 01       	movw	r24, r16
    46c2:	b7 01       	movw	r22, r14
    46c4:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__udivmodsi4>
    46c8:	e6 1a       	sub	r14, r22
    46ca:	f7 0a       	sbc	r15, r23
    46cc:	08 0b       	sbc	r16, r24
    46ce:	19 0b       	sbc	r17, r25
    46d0:	80 91 70 07 	lds	r24, 0x0770
    46d4:	90 91 71 07 	lds	r25, 0x0771
    46d8:	a0 91 72 07 	lds	r26, 0x0772
    46dc:	b0 91 73 07 	lds	r27, 0x0773

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    46e0:	63 eb       	ldi	r22, 0xB3	; 179
    46e2:	a6 2e       	mov	r10, r22
    46e4:	66 ee       	ldi	r22, 0xE6	; 230
    46e6:	b6 2e       	mov	r11, r22
    46e8:	6e e0       	ldi	r22, 0x0E	; 14
    46ea:	c6 2e       	mov	r12, r22
    46ec:	d1 2c       	mov	r13, r1
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    46ee:	14 c0       	rjmp	.+40     	; 0x4718 <_nrk_scheduler+0xd0>
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    46f0:	80 e0       	ldi	r24, 0x00	; 0
    46f2:	96 e3       	ldi	r25, 0x36	; 54
    46f4:	a5 e6       	ldi	r26, 0x65	; 101
    46f6:	b4 ec       	ldi	r27, 0xC4	; 196
    46f8:	e8 0e       	add	r14, r24
    46fa:	f9 1e       	adc	r15, r25
    46fc:	0a 1f       	adc	r16, r26
    46fe:	1b 1f       	adc	r17, r27
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4700:	c8 01       	movw	r24, r16
    4702:	b7 01       	movw	r22, r14
    4704:	a6 01       	movw	r20, r12
    4706:	95 01       	movw	r18, r10
    4708:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__udivmodsi4>
    470c:	e6 1a       	sub	r14, r22
    470e:	f7 0a       	sbc	r15, r23
    4710:	08 0b       	sbc	r16, r24
    4712:	19 0b       	sbc	r17, r25
    4714:	d4 01       	movw	r26, r8
    4716:	c3 01       	movw	r24, r6
    4718:	3c 01       	movw	r6, r24
    471a:	4d 01       	movw	r8, r26
    471c:	08 94       	sec
    471e:	61 1c       	adc	r6, r1
    4720:	71 1c       	adc	r7, r1
    4722:	81 1c       	adc	r8, r1
    4724:	91 1c       	adc	r9, r1
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    4726:	e0 e0       	ldi	r30, 0x00	; 0
    4728:	ee 16       	cp	r14, r30
    472a:	ea ec       	ldi	r30, 0xCA	; 202
    472c:	fe 06       	cpc	r15, r30
    472e:	ea e9       	ldi	r30, 0x9A	; 154
    4730:	0e 07       	cpc	r16, r30
    4732:	eb e3       	ldi	r30, 0x3B	; 59
    4734:	1e 07       	cpc	r17, r30
    4736:	e0 f6       	brcc	.-72     	; 0x46f0 <_nrk_scheduler+0xa8>
    4738:	80 93 70 07 	sts	0x0770, r24
    473c:	90 93 71 07 	sts	0x0771, r25
    4740:	a0 93 72 07 	sts	0x0772, r26
    4744:	b0 93 73 07 	sts	0x0773, r27
    4748:	e0 92 74 07 	sts	0x0774, r14
    474c:	f0 92 75 07 	sts	0x0775, r15
    4750:	00 93 76 07 	sts	0x0776, r16
    4754:	10 93 77 07 	sts	0x0777, r17
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    4758:	e0 91 79 07 	lds	r30, 0x0779
    475c:	f0 91 7a 07 	lds	r31, 0x077A
    4760:	85 81       	ldd	r24, Z+5	; 0x05
    4762:	88 23       	and	r24, r24
    4764:	39 f1       	breq	.+78     	; 0x47b4 <_nrk_scheduler+0x16c>
    4766:	81 85       	ldd	r24, Z+9	; 0x09
    4768:	84 30       	cpi	r24, 0x04	; 4
    476a:	21 f1       	breq	.+72     	; 0x47b4 <_nrk_scheduler+0x16c>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    476c:	87 81       	ldd	r24, Z+7	; 0x07
    476e:	82 30       	cpi	r24, 0x02	; 2
    4770:	29 f0       	breq	.+10     	; 0x477c <_nrk_scheduler+0x134>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    4772:	88 23       	and	r24, r24
    4774:	41 f0       	breq	.+16     	; 0x4786 <_nrk_scheduler+0x13e>
    4776:	86 81       	ldd	r24, Z+6	; 0x06
    4778:	88 23       	and	r24, r24
    477a:	11 f4       	brne	.+4      	; 0x4780 <_nrk_scheduler+0x138>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    477c:	85 e0       	ldi	r24, 0x05	; 5
    477e:	01 c0       	rjmp	.+2      	; 0x4782 <_nrk_scheduler+0x13a>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    4780:	83 e0       	ldi	r24, 0x03	; 3
    4782:	81 87       	std	Z+9, r24	; 0x09
    4784:	14 c0       	rjmp	.+40     	; 0x47ae <_nrk_scheduler+0x166>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    4786:	83 e0       	ldi	r24, 0x03	; 3
    4788:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    478a:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    478c:	16 82       	std	Z+6, r1	; 0x06
	    // agr added to fix initial startup scheduling problem
            if(nrk_cur_task_TCB->next_wakeup==0) {
    478e:	85 89       	ldd	r24, Z+21	; 0x15
    4790:	96 89       	ldd	r25, Z+22	; 0x16
    4792:	a7 89       	ldd	r26, Z+23	; 0x17
    4794:	b0 8d       	ldd	r27, Z+24	; 0x18
    4796:	00 97       	sbiw	r24, 0x00	; 0
    4798:	a1 05       	cpc	r26, r1
    479a:	b1 05       	cpc	r27, r1
    479c:	41 f4       	brne	.+16     	; 0x47ae <_nrk_scheduler+0x166>
		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
    479e:	81 8d       	ldd	r24, Z+25	; 0x19
    47a0:	92 8d       	ldd	r25, Z+26	; 0x1a
    47a2:	a3 8d       	ldd	r26, Z+27	; 0x1b
    47a4:	b4 8d       	ldd	r27, Z+28	; 0x1c
    47a6:	85 8b       	std	Z+21, r24	; 0x15
    47a8:	96 8b       	std	Z+22, r25	; 0x16
    47aa:	a7 8b       	std	Z+23, r26	; 0x17
    47ac:	b0 8f       	std	Z+24, r27	; 0x18
		}
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    47ae:	80 85       	ldd	r24, Z+8	; 0x08
    47b0:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    47b4:	e0 91 79 07 	lds	r30, 0x0779
    47b8:	f0 91 7a 07 	lds	r31, 0x077A
    47bc:	85 a1       	ldd	r24, Z+37	; 0x25
    47be:	96 a1       	ldd	r25, Z+38	; 0x26
    47c0:	a7 a1       	ldd	r26, Z+39	; 0x27
    47c2:	b0 a5       	ldd	r27, Z+40	; 0x28
    47c4:	00 97       	sbiw	r24, 0x00	; 0
    47c6:	a1 05       	cpc	r26, r1
    47c8:	b1 05       	cpc	r27, r1
    47ca:	09 f4       	brne	.+2      	; 0x47ce <_nrk_scheduler+0x186>
    47cc:	44 c0       	rjmp	.+136    	; 0x4856 <_nrk_scheduler+0x20e>
    47ce:	60 85       	ldd	r22, Z+8	; 0x08
    47d0:	66 23       	and	r22, r22
    47d2:	09 f4       	brne	.+2      	; 0x47d6 <_nrk_scheduler+0x18e>
    47d4:	40 c0       	rjmp	.+128    	; 0x4856 <_nrk_scheduler+0x20e>
    47d6:	81 85       	ldd	r24, Z+9	; 0x09
    47d8:	84 30       	cpi	r24, 0x04	; 4
    47da:	e9 f1       	breq	.+122    	; 0x4856 <_nrk_scheduler+0x20e>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    47dc:	25 8d       	ldd	r18, Z+29	; 0x1d
    47de:	36 8d       	ldd	r19, Z+30	; 0x1e
    47e0:	47 8d       	ldd	r20, Z+31	; 0x1f
    47e2:	50 a1       	ldd	r21, Z+32	; 0x20
    47e4:	80 91 e8 05 	lds	r24, 0x05E8
    47e8:	90 e0       	ldi	r25, 0x00	; 0
    47ea:	a0 e0       	ldi	r26, 0x00	; 0
    47ec:	b0 e0       	ldi	r27, 0x00	; 0
    47ee:	28 17       	cp	r18, r24
    47f0:	39 07       	cpc	r19, r25
    47f2:	4a 07       	cpc	r20, r26
    47f4:	5b 07       	cpc	r21, r27
    47f6:	60 f4       	brcc	.+24     	; 0x4810 <_nrk_scheduler+0x1c8>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    47f8:	82 e0       	ldi	r24, 0x02	; 2
    47fa:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    47fe:	e0 91 79 07 	lds	r30, 0x0779
    4802:	f0 91 7a 07 	lds	r31, 0x077A
    4806:	15 8e       	std	Z+29, r1	; 0x1d
    4808:	16 8e       	std	Z+30, r1	; 0x1e
    480a:	17 8e       	std	Z+31, r1	; 0x1f
    480c:	10 a2       	std	Z+32, r1	; 0x20
    480e:	08 c0       	rjmp	.+16     	; 0x4820 <_nrk_scheduler+0x1d8>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    4810:	28 1b       	sub	r18, r24
    4812:	39 0b       	sbc	r19, r25
    4814:	4a 0b       	sbc	r20, r26
    4816:	5b 0b       	sbc	r21, r27
    4818:	25 8f       	std	Z+29, r18	; 0x1d
    481a:	36 8f       	std	Z+30, r19	; 0x1e
    481c:	47 8f       	std	Z+31, r20	; 0x1f
    481e:	50 a3       	std	Z+32, r21	; 0x20

        task_ID= nrk_cur_task_TCB->task_ID;
    4820:	e0 91 79 07 	lds	r30, 0x0779
    4824:	f0 91 7a 07 	lds	r31, 0x077A
    4828:	00 85       	ldd	r16, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    482a:	25 8d       	ldd	r18, Z+29	; 0x1d
    482c:	36 8d       	ldd	r19, Z+30	; 0x1e
    482e:	47 8d       	ldd	r20, Z+31	; 0x1f
    4830:	50 a1       	ldd	r21, Z+32	; 0x20
    4832:	21 15       	cp	r18, r1
    4834:	31 05       	cpc	r19, r1
    4836:	41 05       	cpc	r20, r1
    4838:	51 05       	cpc	r21, r1
    483a:	69 f4       	brne	.+26     	; 0x4856 <_nrk_scheduler+0x20e>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    483c:	83 e0       	ldi	r24, 0x03	; 3
    483e:	60 2f       	mov	r22, r16
    4840:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    4844:	e0 91 79 07 	lds	r30, 0x0779
    4848:	f0 91 7a 07 	lds	r31, 0x077A
    484c:	83 e0       	ldi	r24, 0x03	; 3
    484e:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    4850:	80 2f       	mov	r24, r16
    4852:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <nrk_rem_from_readyQ>
    4856:	5f e1       	ldi	r21, 0x1F	; 31
    4858:	e5 2e       	mov	r14, r21
    485a:	57 e0       	ldi	r21, 0x07	; 7
    485c:	f5 2e       	mov	r15, r21
    485e:	c7 01       	movw	r24, r14
    4860:	40 97       	sbiw	r24, 0x10	; 16

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4862:	00 e6       	ldi	r16, 0x60	; 96
    4864:	1a ee       	ldi	r17, 0xEA	; 234
    4866:	99 24       	eor	r9, r9
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
                    nrk_task_TCB[task_ID].num_periods=1;
    4868:	41 e0       	ldi	r20, 0x01	; 1
    486a:	24 2e       	mov	r2, r20
    486c:	31 2c       	mov	r3, r1
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    486e:	3a ef       	ldi	r19, 0xFA	; 250
    4870:	43 2e       	mov	r4, r19
    4872:	51 2c       	mov	r5, r1
    4874:	61 2c       	mov	r6, r1
    4876:	71 2c       	mov	r7, r1
                nrk_task_TCB[task_ID].nw_flag=0;
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    nrk_task_TCB[task_ID].task_state = READY;
    4878:	22 e0       	ldi	r18, 0x02	; 2
    487a:	82 2e       	mov	r8, r18
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    487c:	68 01       	movw	r12, r16
    487e:	9c 83       	std	Y+4, r25	; 0x04
    4880:	8b 83       	std	Y+3, r24	; 0x03
    4882:	57 01       	movw	r10, r14

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    4884:	ab 81       	ldd	r26, Y+3	; 0x03
    4886:	bc 81       	ldd	r27, Y+4	; 0x04
    4888:	13 96       	adiw	r26, 0x03	; 3
    488a:	8c 91       	ld	r24, X
    488c:	13 97       	sbiw	r26, 0x03	; 3
    488e:	8f 3f       	cpi	r24, 0xFF	; 255
    4890:	09 f4       	brne	.+2      	; 0x4894 <_nrk_scheduler+0x24c>
    4892:	15 c1       	rjmp	.+554    	; 0x4abe <_nrk_scheduler+0x476>
        nrk_task_TCB[task_ID].suspend_flag=0;
    4894:	1c 92       	st	X, r1
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    4896:	88 23       	and	r24, r24
    4898:	09 f4       	brne	.+2      	; 0x489c <_nrk_scheduler+0x254>
    489a:	6d c0       	rjmp	.+218    	; 0x4976 <_nrk_scheduler+0x32e>
    489c:	14 96       	adiw	r26, 0x04	; 4
    489e:	8c 91       	ld	r24, X
    48a0:	14 97       	sbiw	r26, 0x04	; 4
    48a2:	84 30       	cpi	r24, 0x04	; 4
    48a4:	09 f4       	brne	.+2      	; 0x48a8 <_nrk_scheduler+0x260>
    48a6:	67 c0       	rjmp	.+206    	; 0x4976 <_nrk_scheduler+0x32e>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    48a8:	f5 01       	movw	r30, r10
    48aa:	80 81       	ld	r24, Z
    48ac:	91 81       	ldd	r25, Z+1	; 0x01
    48ae:	a2 81       	ldd	r26, Z+2	; 0x02
    48b0:	b3 81       	ldd	r27, Z+3	; 0x03
    48b2:	e0 90 e8 05 	lds	r14, 0x05E8
    48b6:	ff 24       	eor	r15, r15
    48b8:	00 e0       	ldi	r16, 0x00	; 0
    48ba:	10 e0       	ldi	r17, 0x00	; 0
    48bc:	8e 15       	cp	r24, r14
    48be:	9f 05       	cpc	r25, r15
    48c0:	a0 07       	cpc	r26, r16
    48c2:	b1 07       	cpc	r27, r17
    48c4:	48 f0       	brcs	.+18     	; 0x48d8 <_nrk_scheduler+0x290>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    48c6:	8e 19       	sub	r24, r14
    48c8:	9f 09       	sbc	r25, r15
    48ca:	a0 0b       	sbc	r26, r16
    48cc:	b1 0b       	sbc	r27, r17
    48ce:	80 83       	st	Z, r24
    48d0:	91 83       	std	Z+1, r25	; 0x01
    48d2:	a2 83       	std	Z+2, r26	; 0x02
    48d4:	b3 83       	std	Z+3, r27	; 0x03
    48d6:	06 c0       	rjmp	.+12     	; 0x48e4 <_nrk_scheduler+0x29c>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    48d8:	d5 01       	movw	r26, r10
    48da:	1d 92       	st	X+, r1
    48dc:	1d 92       	st	X+, r1
    48de:	1d 92       	st	X+, r1
    48e0:	1c 92       	st	X, r1
    48e2:	13 97       	sbiw	r26, 0x03	; 3
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    48e4:	eb 81       	ldd	r30, Y+3	; 0x03
    48e6:	fc 81       	ldd	r31, Y+4	; 0x04
    48e8:	84 89       	ldd	r24, Z+20	; 0x14
    48ea:	95 89       	ldd	r25, Z+21	; 0x15
    48ec:	a6 89       	ldd	r26, Z+22	; 0x16
    48ee:	b7 89       	ldd	r27, Z+23	; 0x17
    48f0:	8e 15       	cp	r24, r14
    48f2:	9f 05       	cpc	r25, r15
    48f4:	a0 07       	cpc	r26, r16
    48f6:	b1 07       	cpc	r27, r17
    48f8:	48 f0       	brcs	.+18     	; 0x490c <_nrk_scheduler+0x2c4>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    48fa:	8e 19       	sub	r24, r14
    48fc:	9f 09       	sbc	r25, r15
    48fe:	a0 0b       	sbc	r26, r16
    4900:	b1 0b       	sbc	r27, r17
    4902:	84 8b       	std	Z+20, r24	; 0x14
    4904:	95 8b       	std	Z+21, r25	; 0x15
    4906:	a6 8b       	std	Z+22, r26	; 0x16
    4908:	b7 8b       	std	Z+23, r27	; 0x17
    490a:	23 c0       	rjmp	.+70     	; 0x4952 <_nrk_scheduler+0x30a>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    490c:	ab 81       	ldd	r26, Y+3	; 0x03
    490e:	bc 81       	ldd	r27, Y+4	; 0x04
    4910:	5c 96       	adiw	r26, 0x1c	; 28
    4912:	2d 91       	ld	r18, X+
    4914:	3d 91       	ld	r19, X+
    4916:	4d 91       	ld	r20, X+
    4918:	5c 91       	ld	r21, X
    491a:	5f 97       	sbiw	r26, 0x1f	; 31
    491c:	e2 16       	cp	r14, r18
    491e:	f3 06       	cpc	r15, r19
    4920:	04 07       	cpc	r16, r20
    4922:	15 07       	cpc	r17, r21
    4924:	50 f4       	brcc	.+20     	; 0x493a <_nrk_scheduler+0x2f2>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    4926:	2e 19       	sub	r18, r14
    4928:	3f 09       	sbc	r19, r15
    492a:	40 0b       	sbc	r20, r16
    492c:	51 0b       	sbc	r21, r17
    492e:	fd 01       	movw	r30, r26
    4930:	24 8b       	std	Z+20, r18	; 0x14
    4932:	35 8b       	std	Z+21, r19	; 0x15
    4934:	46 8b       	std	Z+22, r20	; 0x16
    4936:	57 8b       	std	Z+23, r21	; 0x17
    4938:	0c c0       	rjmp	.+24     	; 0x4952 <_nrk_scheduler+0x30a>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    493a:	c8 01       	movw	r24, r16
    493c:	b7 01       	movw	r22, r14
    493e:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__udivmodsi4>
    4942:	ab 81       	ldd	r26, Y+3	; 0x03
    4944:	bc 81       	ldd	r27, Y+4	; 0x04
    4946:	54 96       	adiw	r26, 0x14	; 20
    4948:	6d 93       	st	X+, r22
    494a:	7d 93       	st	X+, r23
    494c:	8d 93       	st	X+, r24
    494e:	9c 93       	st	X, r25
    4950:	57 97       	sbiw	r26, 0x17	; 23
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    4952:	eb 81       	ldd	r30, Y+3	; 0x03
    4954:	fc 81       	ldd	r31, Y+4	; 0x04
    4956:	84 89       	ldd	r24, Z+20	; 0x14
    4958:	95 89       	ldd	r25, Z+21	; 0x15
    495a:	a6 89       	ldd	r26, Z+22	; 0x16
    495c:	b7 89       	ldd	r27, Z+23	; 0x17
    495e:	00 97       	sbiw	r24, 0x00	; 0
    4960:	a1 05       	cpc	r26, r1
    4962:	b1 05       	cpc	r27, r1
    4964:	41 f4       	brne	.+16     	; 0x4976 <_nrk_scheduler+0x32e>
    4966:	84 8d       	ldd	r24, Z+28	; 0x1c
    4968:	95 8d       	ldd	r25, Z+29	; 0x1d
    496a:	a6 8d       	ldd	r26, Z+30	; 0x1e
    496c:	b7 8d       	ldd	r27, Z+31	; 0x1f
    496e:	84 8b       	std	Z+20, r24	; 0x14
    4970:	95 8b       	std	Z+21, r25	; 0x15
    4972:	a6 8b       	std	Z+22, r26	; 0x16
    4974:	b7 8b       	std	Z+23, r27	; 0x17

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    4976:	ab 81       	ldd	r26, Y+3	; 0x03
    4978:	bc 81       	ldd	r27, Y+4	; 0x04
    497a:	14 96       	adiw	r26, 0x04	; 4
    497c:	8c 91       	ld	r24, X
    497e:	14 97       	sbiw	r26, 0x04	; 4
    4980:	83 30       	cpi	r24, 0x03	; 3
    4982:	09 f0       	breq	.+2      	; 0x4986 <_nrk_scheduler+0x33e>
    4984:	9c c0       	rjmp	.+312    	; 0x4abe <_nrk_scheduler+0x476>
        {
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    4986:	f5 01       	movw	r30, r10
    4988:	80 81       	ld	r24, Z
    498a:	91 81       	ldd	r25, Z+1	; 0x01
    498c:	a2 81       	ldd	r26, Z+2	; 0x02
    498e:	b3 81       	ldd	r27, Z+3	; 0x03
    4990:	00 97       	sbiw	r24, 0x00	; 0
    4992:	a1 05       	cpc	r26, r1
    4994:	b1 05       	cpc	r27, r1
    4996:	09 f0       	breq	.+2      	; 0x499a <_nrk_scheduler+0x352>
    4998:	7e c0       	rjmp	.+252    	; 0x4a96 <_nrk_scheduler+0x44e>
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    499a:	ab 81       	ldd	r26, Y+3	; 0x03
    499c:	bc 81       	ldd	r27, Y+4	; 0x04
    499e:	12 96       	adiw	r26, 0x02	; 2
    49a0:	8c 91       	ld	r24, X
    49a2:	12 97       	sbiw	r26, 0x02	; 2
    49a4:	88 23       	and	r24, r24
    49a6:	c1 f0       	breq	.+48     	; 0x49d8 <_nrk_scheduler+0x390>
    49a8:	11 96       	adiw	r26, 0x01	; 1
    49aa:	8c 91       	ld	r24, X
    49ac:	11 97       	sbiw	r26, 0x01	; 1
    49ae:	88 23       	and	r24, r24
    49b0:	99 f0       	breq	.+38     	; 0x49d8 <_nrk_scheduler+0x390>
    49b2:	81 e0       	ldi	r24, 0x01	; 1
    49b4:	90 e0       	ldi	r25, 0x00	; 0
    49b6:	a0 e0       	ldi	r26, 0x00	; 0
    49b8:	b0 e0       	ldi	r27, 0x00	; 0
    49ba:	00 90 69 07 	lds	r0, 0x0769
    49be:	04 c0       	rjmp	.+8      	; 0x49c8 <_nrk_scheduler+0x380>
    49c0:	88 0f       	add	r24, r24
    49c2:	99 1f       	adc	r25, r25
    49c4:	aa 1f       	adc	r26, r26
    49c6:	bb 1f       	adc	r27, r27
    49c8:	0a 94       	dec	r0
    49ca:	d2 f7       	brpl	.-12     	; 0x49c0 <_nrk_scheduler+0x378>
    49cc:	eb 81       	ldd	r30, Y+3	; 0x03
    49ce:	fc 81       	ldd	r31, Y+4	; 0x04
    49d0:	84 87       	std	Z+12, r24	; 0x0c
    49d2:	95 87       	std	Z+13, r25	; 0x0d
    49d4:	a6 87       	std	Z+14, r26	; 0x0e
    49d6:	b7 87       	std	Z+15, r27	; 0x0f
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    49d8:	ab 81       	ldd	r26, Y+3	; 0x03
    49da:	bc 81       	ldd	r27, Y+4	; 0x04
    49dc:	12 96       	adiw	r26, 0x02	; 2
    49de:	1c 92       	st	X, r1
    49e0:	12 97       	sbiw	r26, 0x02	; 2
                nrk_task_TCB[task_ID].nw_flag=0;
    49e2:	11 96       	adiw	r26, 0x01	; 1
    49e4:	1c 92       	st	X, r1
    49e6:	11 97       	sbiw	r26, 0x01	; 1
                nrk_task_TCB[task_ID].suspend_flag=0;
    49e8:	1c 92       	st	X, r1
                if(nrk_task_TCB[task_ID].num_periods==1)
    49ea:	f5 01       	movw	r30, r10
    49ec:	64 89       	ldd	r22, Z+20	; 0x14
    49ee:	75 89       	ldd	r23, Z+21	; 0x15
    49f0:	5c 96       	adiw	r26, 0x1c	; 28
    49f2:	ed 90       	ld	r14, X+
    49f4:	fd 90       	ld	r15, X+
    49f6:	0d 91       	ld	r16, X+
    49f8:	1c 91       	ld	r17, X
    49fa:	5f 97       	sbiw	r26, 0x1f	; 31
    49fc:	eb 81       	ldd	r30, Y+3	; 0x03
    49fe:	fc 81       	ldd	r31, Y+4	; 0x04
    4a00:	80 a1       	ldd	r24, Z+32	; 0x20
    4a02:	91 a1       	ldd	r25, Z+33	; 0x21
    4a04:	a2 a1       	ldd	r26, Z+34	; 0x22
    4a06:	b3 a1       	ldd	r27, Z+35	; 0x23
    4a08:	61 30       	cpi	r22, 0x01	; 1
    4a0a:	71 05       	cpc	r23, r1
    4a0c:	e9 f4       	brne	.+58     	; 0x4a48 <_nrk_scheduler+0x400>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    4a0e:	80 8f       	std	Z+24, r24	; 0x18
    4a10:	91 8f       	std	Z+25, r25	; 0x19
    4a12:	a2 8f       	std	Z+26, r26	; 0x1a
    4a14:	b3 8f       	std	Z+27, r27	; 0x1b
                    nrk_task_TCB[task_ID].task_state = READY;
    4a16:	84 82       	std	Z+4, r8	; 0x04
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    4a18:	84 89       	ldd	r24, Z+20	; 0x14
    4a1a:	95 89       	ldd	r25, Z+21	; 0x15
    4a1c:	a6 89       	ldd	r26, Z+22	; 0x16
    4a1e:	b7 89       	ldd	r27, Z+23	; 0x17
    4a20:	f5 01       	movw	r30, r10
    4a22:	80 83       	st	Z, r24
    4a24:	91 83       	std	Z+1, r25	; 0x01
    4a26:	a2 83       	std	Z+2, r26	; 0x02
    4a28:	b3 83       	std	Z+3, r27	; 0x03
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    4a2a:	e1 14       	cp	r14, r1
    4a2c:	f1 04       	cpc	r15, r1
    4a2e:	01 05       	cpc	r16, r1
    4a30:	11 05       	cpc	r17, r1
    4a32:	31 f4       	brne	.+12     	; 0x4a40 <_nrk_scheduler+0x3f8>
    4a34:	d5 01       	movw	r26, r10
    4a36:	4d 92       	st	X+, r4
    4a38:	5d 92       	st	X+, r5
    4a3a:	6d 92       	st	X+, r6
    4a3c:	7c 92       	st	X, r7
    4a3e:	13 97       	sbiw	r26, 0x03	; 3
		    nrk_add_to_readyQ(task_ID);
    4a40:	89 2d       	mov	r24, r9
    4a42:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <nrk_add_to_readyQ>
    4a46:	27 c0       	rjmp	.+78     	; 0x4a96 <_nrk_scheduler+0x44e>
                }
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    4a48:	eb 81       	ldd	r30, Y+3	; 0x03
    4a4a:	fc 81       	ldd	r31, Y+4	; 0x04
    4a4c:	80 8f       	std	Z+24, r24	; 0x18
    4a4e:	91 8f       	std	Z+25, r25	; 0x19
    4a50:	a2 8f       	std	Z+26, r26	; 0x1a
    4a52:	b3 8f       	std	Z+27, r27	; 0x1b
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    4a54:	61 50       	subi	r22, 0x01	; 1
    4a56:	70 40       	sbci	r23, 0x00	; 0
    4a58:	80 e0       	ldi	r24, 0x00	; 0
    4a5a:	90 e0       	ldi	r25, 0x00	; 0
    4a5c:	a8 01       	movw	r20, r16
    4a5e:	97 01       	movw	r18, r14
    4a60:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__mulsi3>
    4a64:	d5 01       	movw	r26, r10
    4a66:	6d 93       	st	X+, r22
    4a68:	7d 93       	st	X+, r23
    4a6a:	8d 93       	st	X+, r24
    4a6c:	9c 93       	st	X, r25
    4a6e:	13 97       	sbiw	r26, 0x03	; 3
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    4a70:	eb 81       	ldd	r30, Y+3	; 0x03
    4a72:	fc 81       	ldd	r31, Y+4	; 0x04
    4a74:	64 8b       	std	Z+20, r22	; 0x14
    4a76:	75 8b       	std	Z+21, r23	; 0x15
    4a78:	86 8b       	std	Z+22, r24	; 0x16
    4a7a:	97 8b       	std	Z+23, r25	; 0x17
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    4a7c:	e1 14       	cp	r14, r1
    4a7e:	f1 04       	cpc	r15, r1
    4a80:	01 05       	cpc	r16, r1
    4a82:	11 05       	cpc	r17, r1
    4a84:	29 f4       	brne	.+10     	; 0x4a90 <_nrk_scheduler+0x448>
    4a86:	4d 92       	st	X+, r4
    4a88:	5d 92       	st	X+, r5
    4a8a:	6d 92       	st	X+, r6
    4a8c:	7c 92       	st	X, r7
    4a8e:	13 97       	sbiw	r26, 0x03	; 3
                    nrk_task_TCB[task_ID].num_periods=1;
    4a90:	f5 01       	movw	r30, r10
    4a92:	35 8a       	std	Z+21, r3	; 0x15
    4a94:	24 8a       	std	Z+20, r2	; 0x14
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    4a96:	d5 01       	movw	r26, r10
    4a98:	2d 91       	ld	r18, X+
    4a9a:	3d 91       	ld	r19, X+
    4a9c:	4d 91       	ld	r20, X+
    4a9e:	5c 91       	ld	r21, X
    4aa0:	13 97       	sbiw	r26, 0x03	; 3
    4aa2:	21 15       	cp	r18, r1
    4aa4:	31 05       	cpc	r19, r1
    4aa6:	41 05       	cpc	r20, r1
    4aa8:	51 05       	cpc	r21, r1
    4aaa:	49 f0       	breq	.+18     	; 0x4abe <_nrk_scheduler+0x476>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
    4aac:	c6 01       	movw	r24, r12
    4aae:	a0 e0       	ldi	r26, 0x00	; 0
    4ab0:	b0 e0       	ldi	r27, 0x00	; 0
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    4ab2:	28 17       	cp	r18, r24
    4ab4:	39 07       	cpc	r19, r25
    4ab6:	4a 07       	cpc	r20, r26
    4ab8:	5b 07       	cpc	r21, r27
    4aba:	08 f4       	brcc	.+2      	; 0x4abe <_nrk_scheduler+0x476>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
            {
                // Find closest next_wake task
                next_wake=nrk_task_TCB[task_ID].next_wakeup;
    4abc:	69 01       	movw	r12, r18

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    4abe:	93 94       	inc	r9
    4ac0:	eb e2       	ldi	r30, 0x2B	; 43
    4ac2:	f0 e0       	ldi	r31, 0x00	; 0
    4ac4:	ae 0e       	add	r10, r30
    4ac6:	bf 1e       	adc	r11, r31
    4ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    4aca:	9c 81       	ldd	r25, Y+4	; 0x04
    4acc:	8b 96       	adiw	r24, 0x2b	; 43
    4ace:	9c 83       	std	Y+4, r25	; 0x04
    4ad0:	8b 83       	std	Y+3, r24	; 0x03
    4ad2:	99 2d       	mov	r25, r9
    4ad4:	92 30       	cpi	r25, 0x02	; 2
    4ad6:	09 f0       	breq	.+2      	; 0x4ada <_nrk_scheduler+0x492>
    4ad8:	d5 ce       	rjmp	.-598    	; 0x4884 <_nrk_scheduler+0x23c>
    4ada:	86 01       	movw	r16, r12


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
#endif
    task_ID = nrk_get_high_ready_task_ID();
    4adc:	0e 94 c0 1c 	call	0x3980	; 0x3980 <nrk_get_high_ready_task_ID>
    4ae0:	e8 2e       	mov	r14, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    4ae2:	28 2f       	mov	r18, r24
    4ae4:	33 27       	eor	r19, r19
    4ae6:	27 fd       	sbrc	r18, 7
    4ae8:	30 95       	com	r19
    4aea:	8b e2       	ldi	r24, 0x2B	; 43
    4aec:	90 e0       	ldi	r25, 0x00	; 0
    4aee:	28 9f       	mul	r18, r24
    4af0:	f0 01       	movw	r30, r0
    4af2:	29 9f       	mul	r18, r25
    4af4:	f0 0d       	add	r31, r0
    4af6:	38 9f       	mul	r19, r24
    4af8:	f0 0d       	add	r31, r0
    4afa:	11 24       	eor	r1, r1
    4afc:	e6 5f       	subi	r30, 0xF6	; 246
    4afe:	f8 4f       	sbci	r31, 0xF8	; 248
    4b00:	a2 84       	ldd	r10, Z+10	; 0x0a
    4b02:	a0 92 7b 07 	sts	0x077B, r10
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    4b06:	f0 93 6b 07 	sts	0x076B, r31
    4b0a:	e0 93 6a 07 	sts	0x076A, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    4b0e:	ee 20       	and	r14, r14
    4b10:	f9 f0       	breq	.+62     	; 0x4b50 <_nrk_scheduler+0x508>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    4b12:	85 a1       	ldd	r24, Z+37	; 0x25
    4b14:	96 a1       	ldd	r25, Z+38	; 0x26
    4b16:	a7 a1       	ldd	r26, Z+39	; 0x27
    4b18:	b0 a5       	ldd	r27, Z+40	; 0x28
    4b1a:	00 97       	sbiw	r24, 0x00	; 0
    4b1c:	a1 05       	cpc	r26, r1
    4b1e:	b1 05       	cpc	r27, r1
    4b20:	99 f0       	breq	.+38     	; 0x4b48 <_nrk_scheduler+0x500>
    4b22:	25 8d       	ldd	r18, Z+29	; 0x1d
    4b24:	36 8d       	ldd	r19, Z+30	; 0x1e
    4b26:	47 8d       	ldd	r20, Z+31	; 0x1f
    4b28:	50 a1       	ldd	r21, Z+32	; 0x20
    4b2a:	2a 3f       	cpi	r18, 0xFA	; 250
    4b2c:	31 05       	cpc	r19, r1
    4b2e:	41 05       	cpc	r20, r1
    4b30:	51 05       	cpc	r21, r1
    4b32:	50 f4       	brcc	.+20     	; 0x4b48 <_nrk_scheduler+0x500>
        {
            if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    4b34:	b6 01       	movw	r22, r12
    4b36:	80 e0       	ldi	r24, 0x00	; 0
    4b38:	90 e0       	ldi	r25, 0x00	; 0
    4b3a:	26 17       	cp	r18, r22
    4b3c:	37 07       	cpc	r19, r23
    4b3e:	48 07       	cpc	r20, r24
    4b40:	59 07       	cpc	r21, r25
    4b42:	e8 f4       	brcc	.+58     	; 0x4b7e <_nrk_scheduler+0x536>
                next_wake=nrk_task_TCB[task_ID].cpu_remaining;
    4b44:	89 01       	movw	r16, r18
    4b46:	1b c0       	rjmp	.+54     	; 0x4b7e <_nrk_scheduler+0x536>
    4b48:	0b 3f       	cpi	r16, 0xFB	; 251
    4b4a:	11 05       	cpc	r17, r1
    4b4c:	c0 f0       	brcs	.+48     	; 0x4b7e <_nrk_scheduler+0x536>
    4b4e:	12 c0       	rjmp	.+36     	; 0x4b74 <_nrk_scheduler+0x52c>
        // Make sure you wake up from the idle task a little earlier
        // if you would go into deep sleep...
        // After waking from deep sleep, the next context swap must be at least
        // NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time.
#ifndef NRK_NO_POWER_DOWN
        if(next_wake>NRK_SLEEP_WAKEUP_TIME)
    4b50:	04 30       	cpi	r16, 0x04	; 4
    4b52:	11 05       	cpc	r17, r1
    4b54:	a0 f0       	brcs	.+40     	; 0x4b7e <_nrk_scheduler+0x536>
        {
            if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
    4b56:	c6 01       	movw	r24, r12
    4b58:	03 97       	sbiw	r24, 0x03	; 3
    4b5a:	8a 3f       	cpi	r24, 0xFA	; 250
    4b5c:	91 05       	cpc	r25, r1
    4b5e:	38 f4       	brcc	.+14     	; 0x4b6e <_nrk_scheduler+0x526>
    4b60:	8c 01       	movw	r16, r24
    4b62:	82 30       	cpi	r24, 0x02	; 2
    4b64:	91 05       	cpc	r25, r1
    4b66:	58 f4       	brcc	.+22     	; 0x4b7e <_nrk_scheduler+0x536>
    4b68:	02 e0       	ldi	r16, 0x02	; 2
    4b6a:	10 e0       	ldi	r17, 0x00	; 0
    4b6c:	08 c0       	rjmp	.+16     	; 0x4b7e <_nrk_scheduler+0x536>
                else
                {
                    next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
                }
            }
            else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME)
    4b6e:	0d 3f       	cpi	r16, 0xFD	; 253
    4b70:	11 05       	cpc	r17, r1
    4b72:	19 f0       	breq	.+6      	; 0x4b7a <_nrk_scheduler+0x532>
            {
                next_wake=MAX_SCHED_WAKEUP_TIME;
    4b74:	0a ef       	ldi	r16, 0xFA	; 250
    4b76:	10 e0       	ldi	r17, 0x00	; 0
    4b78:	02 c0       	rjmp	.+4      	; 0x4b7e <_nrk_scheduler+0x536>
            }
            else
            {
                next_wake=MAX_SCHED_WAKEUP_TIME-NRK_SLEEP_WAKEUP_TIME;
    4b7a:	07 ef       	ldi	r16, 0xF7	; 247
    4b7c:	10 e0       	ldi	r17, 0x00	; 0
//  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    4b7e:	a0 92 6c 07 	sts	0x076C, r10
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    4b82:	f0 93 7a 07 	sts	0x077A, r31
    4b86:	e0 93 79 07 	sts	0x0779, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    4b8a:	00 93 e8 05 	sts	0x05E8, r16

    // Maybe the signals are triggering this problem?
    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    4b8e:	0e 94 55 28 	call	0x50aa	; 0x50aa <_nrk_os_timer_get>
    4b92:	90 e0       	ldi	r25, 0x00	; 0
    4b94:	01 96       	adiw	r24, 0x01	; 1
    4b96:	80 17       	cp	r24, r16
    4b98:	91 07       	cpc	r25, r17
    4b9a:	40 f0       	brcs	.+16     	; 0x4bac <_nrk_scheduler+0x564>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    4b9c:	0e 94 55 28 	call	0x50aa	; 0x50aa <_nrk_os_timer_get>
    4ba0:	08 2f       	mov	r16, r24
    4ba2:	10 e0       	ldi	r17, 0x00	; 0
    4ba4:	0e 5f       	subi	r16, 0xFE	; 254
    4ba6:	1f 4f       	sbci	r17, 0xFF	; 255
        _nrk_prev_timer_val=next_wake;
    4ba8:	00 93 e8 05 	sts	0x05E8, r16
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    4bac:	ee 20       	and	r14, r14
    4bae:	11 f0       	breq	.+4      	; 0x4bb4 <_nrk_scheduler+0x56c>
    4bb0:	10 92 6d 07 	sts	0x076D, r1

    _nrk_set_next_wakeup(next_wake);
    4bb4:	80 2f       	mov	r24, r16
    4bb6:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    4bba:	89 81       	ldd	r24, Y+1	; 0x01
    4bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    4bbe:	6c ed       	ldi	r22, 0xDC	; 220
    4bc0:	75 e0       	ldi	r23, 0x05	; 5
    4bc2:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <nrk_high_speed_timer_wait>
#endif
    nrk_stack_pointer_restore();
    4bc6:	0e 94 77 2b 	call	0x56ee	; 0x56ee <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();
    4bca:	0e 94 83 2b 	call	0x5706	; 0x5706 <nrk_start_high_ready_task>

}
    4bce:	0f 90       	pop	r0
    4bd0:	0f 90       	pop	r0
    4bd2:	0f 90       	pop	r0
    4bd4:	0f 90       	pop	r0
    4bd6:	cf 91       	pop	r28
    4bd8:	df 91       	pop	r29
    4bda:	1f 91       	pop	r17
    4bdc:	0f 91       	pop	r16
    4bde:	ff 90       	pop	r15
    4be0:	ef 90       	pop	r14
    4be2:	df 90       	pop	r13
    4be4:	cf 90       	pop	r12
    4be6:	bf 90       	pop	r11
    4be8:	af 90       	pop	r10
    4bea:	9f 90       	pop	r9
    4bec:	8f 90       	pop	r8
    4bee:	7f 90       	pop	r7
    4bf0:	6f 90       	pop	r6
    4bf2:	5f 90       	pop	r5
    4bf4:	4f 90       	pop	r4
    4bf6:	3f 90       	pop	r3
    4bf8:	2f 90       	pop	r2
    4bfa:	08 95       	ret

00004bfc <nrk_register_driver>:
 *
 */

int8_t nrk_register_driver(void *devicemanager,uint8_t dev_index)
{
    if(_nrk_driver_count<NRK_MAX_DRIVER_CNT)
    4bfc:	40 91 8c 07 	lds	r20, 0x078C
    4c00:	14 16       	cp	r1, r20
    4c02:	b4 f0       	brlt	.+44     	; 0x4c30 <nrk_register_driver+0x34>
    {
        nrk_drivers[_nrk_driver_count].dev_id=dev_index;
    4c04:	24 2f       	mov	r18, r20
    4c06:	33 27       	eor	r19, r19
    4c08:	27 fd       	sbrc	r18, 7
    4c0a:	30 95       	com	r19
    4c0c:	22 0f       	add	r18, r18
    4c0e:	33 1f       	adc	r19, r19
    4c10:	22 0f       	add	r18, r18
    4c12:	33 1f       	adc	r19, r19
    4c14:	f9 01       	movw	r30, r18
    4c16:	e3 57       	subi	r30, 0x73	; 115
    4c18:	f8 4f       	sbci	r31, 0xF8	; 248
    4c1a:	60 83       	st	Z, r22
        nrk_drivers[_nrk_driver_count].devicemanager=(void*)devicemanager;
    4c1c:	21 57       	subi	r18, 0x71	; 113
    4c1e:	38 4f       	sbci	r19, 0xF8	; 248
    4c20:	f9 01       	movw	r30, r18
    4c22:	91 83       	std	Z+1, r25	; 0x01
    4c24:	80 83       	st	Z, r24
        _nrk_driver_count++;
    4c26:	4f 5f       	subi	r20, 0xFF	; 255
    4c28:	40 93 8c 07 	sts	0x078C, r20
        return NRK_OK;
    4c2c:	81 e0       	ldi	r24, 0x01	; 1
    4c2e:	08 95       	ret
    }
    else
        return NRK_ERROR;
    4c30:	8f ef       	ldi	r24, 0xFF	; 255
}
    4c32:	08 95       	ret

00004c34 <nrk_open>:


int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    4c34:	0f 93       	push	r16
    4c36:	1f 93       	push	r17
    4c38:	cf 93       	push	r28
    4c3a:	df 93       	push	r29
    4c3c:	06 2f       	mov	r16, r22
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    4c3e:	20 91 8c 07 	lds	r18, 0x078C
    4c42:	33 27       	eor	r19, r19
    4c44:	27 fd       	sbrc	r18, 7
    4c46:	30 95       	com	r19
    4c48:	10 e0       	ldi	r17, 0x00	; 0
    {
        if(nrk_drivers[cnt].dev_id==dev_index)
    4c4a:	90 e0       	ldi	r25, 0x00	; 0

int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    4c4c:	33 c0       	rjmp	.+102    	; 0x4cb4 <nrk_open+0x80>
    {
        if(nrk_drivers[cnt].dev_id==dev_index)
    4c4e:	ae 01       	movw	r20, r28
    4c50:	44 0f       	add	r20, r20
    4c52:	55 1f       	adc	r21, r21
    4c54:	44 0f       	add	r20, r20
    4c56:	55 1f       	adc	r21, r21
    4c58:	fa 01       	movw	r30, r20
    4c5a:	e3 57       	subi	r30, 0x73	; 115
    4c5c:	f8 4f       	sbci	r31, 0xF8	; 248
    4c5e:	60 81       	ld	r22, Z
    4c60:	77 27       	eor	r23, r23
    4c62:	67 fd       	sbrc	r22, 7
    4c64:	70 95       	com	r23
    4c66:	68 17       	cp	r22, r24
    4c68:	79 07       	cpc	r23, r25
    4c6a:	19 f5       	brne	.+70     	; 0x4cb2 <nrk_open+0x7e>
        {
            if(nrk_driver_init[cnt]==WAS_NOT_OPEN)
    4c6c:	fe 01       	movw	r30, r28
    4c6e:	ef 56       	subi	r30, 0x6F	; 111
    4c70:	f8 4f       	sbci	r31, 0xF8	; 248
    4c72:	80 81       	ld	r24, Z
    4c74:	88 23       	and	r24, r24
    4c76:	69 f4       	brne	.+26     	; 0x4c92 <nrk_open+0x5e>
            {
                // Only call init the first time driver is opened
                nrk_driver_init[cnt]=WAS_OPEN;
    4c78:	81 e0       	ldi	r24, 0x01	; 1
    4c7a:	80 83       	st	Z, r24
                nrk_drivers[cnt].devicemanager(INIT,opt,NULL,0);
    4c7c:	41 57       	subi	r20, 0x71	; 113
    4c7e:	58 4f       	sbci	r21, 0xF8	; 248
    4c80:	da 01       	movw	r26, r20
    4c82:	ed 91       	ld	r30, X+
    4c84:	fc 91       	ld	r31, X
    4c86:	80 e0       	ldi	r24, 0x00	; 0
    4c88:	60 2f       	mov	r22, r16
    4c8a:	40 e0       	ldi	r20, 0x00	; 0
    4c8c:	50 e0       	ldi	r21, 0x00	; 0
    4c8e:	20 e0       	ldi	r18, 0x00	; 0
    4c90:	09 95       	icall
            }
            nrk_drivers[cnt].devicemanager(OPEN,opt,NULL,0);		// pdiener: Why can I open devices more than once???
    4c92:	cc 0f       	add	r28, r28
    4c94:	dd 1f       	adc	r29, r29
    4c96:	cc 0f       	add	r28, r28
    4c98:	dd 1f       	adc	r29, r29
    4c9a:	c1 57       	subi	r28, 0x71	; 113
    4c9c:	d8 4f       	sbci	r29, 0xF8	; 248
    4c9e:	e8 81       	ld	r30, Y
    4ca0:	f9 81       	ldd	r31, Y+1	; 0x01
    4ca2:	81 e0       	ldi	r24, 0x01	; 1
    4ca4:	60 2f       	mov	r22, r16
    4ca6:	40 e0       	ldi	r20, 0x00	; 0
    4ca8:	50 e0       	ldi	r21, 0x00	; 0
    4caa:	20 e0       	ldi	r18, 0x00	; 0
    4cac:	09 95       	icall
            return cnt;
    4cae:	81 2f       	mov	r24, r17
    4cb0:	07 c0       	rjmp	.+14     	; 0x4cc0 <nrk_open+0x8c>

int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    4cb2:	1f 5f       	subi	r17, 0xFF	; 255
    4cb4:	c1 2f       	mov	r28, r17
    4cb6:	d0 e0       	ldi	r29, 0x00	; 0
    4cb8:	c2 17       	cp	r28, r18
    4cba:	d3 07       	cpc	r29, r19
    4cbc:	44 f2       	brlt	.-112    	; 0x4c4e <nrk_open+0x1a>
            nrk_drivers[cnt].devicemanager(OPEN,opt,NULL,0);		// pdiener: Why can I open devices more than once???
            return cnt;
        }
    }

    return NRK_ERROR;
    4cbe:	8f ef       	ldi	r24, 0xFF	; 255
}
    4cc0:	df 91       	pop	r29
    4cc2:	cf 91       	pop	r28
    4cc4:	1f 91       	pop	r17
    4cc6:	0f 91       	pop	r16
    4cc8:	08 95       	ret

00004cca <nrk_close>:

int8_t nrk_close(uint8_t dev_fd)
{
    uint8_t error;

    if(dev_fd>_nrk_driver_count)
    4cca:	90 e0       	ldi	r25, 0x00	; 0
    4ccc:	20 91 8c 07 	lds	r18, 0x078C
    4cd0:	33 27       	eor	r19, r19
    4cd2:	27 fd       	sbrc	r18, 7
    4cd4:	30 95       	com	r19
    4cd6:	28 17       	cp	r18, r24
    4cd8:	39 07       	cpc	r19, r25
    4cda:	2c f4       	brge	.+10     	; 0x4ce6 <nrk_close+0x1c>
    {
        _nrk_errno_set(1);  // invalid device
    4cdc:	81 e0       	ldi	r24, 0x01	; 1
    4cde:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <_nrk_errno_set>
        return NRK_ERROR;
    4ce2:	8f ef       	ldi	r24, 0xFF	; 255
    4ce4:	08 95       	ret
    }

    error=nrk_drivers[dev_fd].devicemanager(CLOSE,0,NULL,0);
    4ce6:	fc 01       	movw	r30, r24
    4ce8:	ee 0f       	add	r30, r30
    4cea:	ff 1f       	adc	r31, r31
    4cec:	ee 0f       	add	r30, r30
    4cee:	ff 1f       	adc	r31, r31
    4cf0:	e1 57       	subi	r30, 0x71	; 113
    4cf2:	f8 4f       	sbci	r31, 0xF8	; 248
    4cf4:	01 90       	ld	r0, Z+
    4cf6:	f0 81       	ld	r31, Z
    4cf8:	e0 2d       	mov	r30, r0
    4cfa:	82 e0       	ldi	r24, 0x02	; 2
    4cfc:	60 e0       	ldi	r22, 0x00	; 0
    4cfe:	40 e0       	ldi	r20, 0x00	; 0
    4d00:	50 e0       	ldi	r21, 0x00	; 0
    4d02:	20 e0       	ldi	r18, 0x00	; 0
    4d04:	09 95       	icall
// Do we need to do init on a second reopen?
//if(!error)
//	driver_record_init[dev_fd]=0;

    return error;
}
    4d06:	08 95       	ret

00004d08 <nrk_write>:


int8_t nrk_write(uint8_t dev_fd,uint8_t *buffer, uint8_t size)
{
    4d08:	db 01       	movw	r26, r22
    4d0a:	24 2f       	mov	r18, r20
    if(dev_fd>_nrk_driver_count)
    4d0c:	90 e0       	ldi	r25, 0x00	; 0
    4d0e:	60 91 8c 07 	lds	r22, 0x078C
    4d12:	77 27       	eor	r23, r23
    4d14:	67 fd       	sbrc	r22, 7
    4d16:	70 95       	com	r23
    4d18:	68 17       	cp	r22, r24
    4d1a:	79 07       	cpc	r23, r25
    4d1c:	2c f4       	brge	.+10     	; 0x4d28 <nrk_write+0x20>
    {
        _nrk_errno_set(1);  // invalid device
    4d1e:	81 e0       	ldi	r24, 0x01	; 1
    4d20:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <_nrk_errno_set>
        return NRK_ERROR;
    4d24:	8f ef       	ldi	r24, 0xFF	; 255
    4d26:	08 95       	ret
    }

    return nrk_drivers[dev_fd].devicemanager(WRITE,0,buffer,size);
    4d28:	fc 01       	movw	r30, r24
    4d2a:	ee 0f       	add	r30, r30
    4d2c:	ff 1f       	adc	r31, r31
    4d2e:	ee 0f       	add	r30, r30
    4d30:	ff 1f       	adc	r31, r31
    4d32:	e1 57       	subi	r30, 0x71	; 113
    4d34:	f8 4f       	sbci	r31, 0xF8	; 248
    4d36:	01 90       	ld	r0, Z+
    4d38:	f0 81       	ld	r31, Z
    4d3a:	e0 2d       	mov	r30, r0
    4d3c:	86 e0       	ldi	r24, 0x06	; 6
    4d3e:	60 e0       	ldi	r22, 0x00	; 0
    4d40:	ad 01       	movw	r20, r26
    4d42:	09 95       	icall

}
    4d44:	08 95       	ret

00004d46 <nrk_read>:

int8_t nrk_read(uint8_t dev_fd,uint8_t *buffer,uint8_t size)
{
    4d46:	db 01       	movw	r26, r22
    4d48:	24 2f       	mov	r18, r20
    if(dev_fd>_nrk_driver_count)
    4d4a:	90 e0       	ldi	r25, 0x00	; 0
    4d4c:	60 91 8c 07 	lds	r22, 0x078C
    4d50:	77 27       	eor	r23, r23
    4d52:	67 fd       	sbrc	r22, 7
    4d54:	70 95       	com	r23
    4d56:	68 17       	cp	r22, r24
    4d58:	79 07       	cpc	r23, r25
    4d5a:	2c f4       	brge	.+10     	; 0x4d66 <nrk_read+0x20>
    {
        _nrk_errno_set(1);  // invalid device
    4d5c:	81 e0       	ldi	r24, 0x01	; 1
    4d5e:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <_nrk_errno_set>
        return NRK_ERROR;
    4d62:	8f ef       	ldi	r24, 0xFF	; 255
    4d64:	08 95       	ret
    }

    return nrk_drivers[dev_fd].devicemanager(READ,0,buffer,size);
    4d66:	fc 01       	movw	r30, r24
    4d68:	ee 0f       	add	r30, r30
    4d6a:	ff 1f       	adc	r31, r31
    4d6c:	ee 0f       	add	r30, r30
    4d6e:	ff 1f       	adc	r31, r31
    4d70:	e1 57       	subi	r30, 0x71	; 113
    4d72:	f8 4f       	sbci	r31, 0xF8	; 248
    4d74:	01 90       	ld	r0, Z+
    4d76:	f0 81       	ld	r31, Z
    4d78:	e0 2d       	mov	r30, r0
    4d7a:	85 e0       	ldi	r24, 0x05	; 5
    4d7c:	60 e0       	ldi	r22, 0x00	; 0
    4d7e:	ad 01       	movw	r20, r26
    4d80:	09 95       	icall

}
    4d82:	08 95       	ret

00004d84 <nrk_set_status>:
/*if key is 0 then assumed to create a frequency setting*/
int8_t nrk_set_status(uint8_t dev_fd,uint8_t key,uint8_t value)
{
    4d84:	24 2f       	mov	r18, r20
    if(dev_fd<0 || dev_fd>_nrk_driver_count)
    4d86:	90 e0       	ldi	r25, 0x00	; 0
    4d88:	e0 91 8c 07 	lds	r30, 0x078C
    4d8c:	ff 27       	eor	r31, r31
    4d8e:	e7 fd       	sbrc	r30, 7
    4d90:	f0 95       	com	r31
    4d92:	e8 17       	cp	r30, r24
    4d94:	f9 07       	cpc	r31, r25
    4d96:	2c f4       	brge	.+10     	; 0x4da2 <nrk_set_status+0x1e>
    {
        _nrk_errno_set(1);  // invalid device
    4d98:	81 e0       	ldi	r24, 0x01	; 1
    4d9a:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <_nrk_errno_set>
        return NRK_ERROR;
    4d9e:	8f ef       	ldi	r24, 0xFF	; 255
    4da0:	08 95       	ret
    }
    return nrk_drivers[dev_fd].devicemanager(SET_STATUS,key,NULL,value);
    4da2:	fc 01       	movw	r30, r24
    4da4:	ee 0f       	add	r30, r30
    4da6:	ff 1f       	adc	r31, r31
    4da8:	ee 0f       	add	r30, r30
    4daa:	ff 1f       	adc	r31, r31
    4dac:	e1 57       	subi	r30, 0x71	; 113
    4dae:	f8 4f       	sbci	r31, 0xF8	; 248
    4db0:	01 90       	ld	r0, Z+
    4db2:	f0 81       	ld	r31, Z
    4db4:	e0 2d       	mov	r30, r0
    4db6:	84 e0       	ldi	r24, 0x04	; 4
    4db8:	40 e0       	ldi	r20, 0x00	; 0
    4dba:	50 e0       	ldi	r21, 0x00	; 0
    4dbc:	09 95       	icall
}
    4dbe:	08 95       	ret

00004dc0 <nrk_get_status>:

int8_t nrk_get_status(uint8_t dev_fd,uint8_t key)
{
    if(dev_fd>_nrk_driver_count)
    4dc0:	90 e0       	ldi	r25, 0x00	; 0
    4dc2:	20 91 8c 07 	lds	r18, 0x078C
    4dc6:	33 27       	eor	r19, r19
    4dc8:	27 fd       	sbrc	r18, 7
    4dca:	30 95       	com	r19
    4dcc:	28 17       	cp	r18, r24
    4dce:	39 07       	cpc	r19, r25
    4dd0:	2c f4       	brge	.+10     	; 0x4ddc <nrk_get_status+0x1c>
    {
        _nrk_errno_set(1);  // invalid device
    4dd2:	81 e0       	ldi	r24, 0x01	; 1
    4dd4:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <_nrk_errno_set>
        return NRK_ERROR;
    4dd8:	8f ef       	ldi	r24, 0xFF	; 255
    4dda:	08 95       	ret
    }

    return nrk_drivers[dev_fd].devicemanager(GET_STATUS,key,NULL,0);
    4ddc:	fc 01       	movw	r30, r24
    4dde:	ee 0f       	add	r30, r30
    4de0:	ff 1f       	adc	r31, r31
    4de2:	ee 0f       	add	r30, r30
    4de4:	ff 1f       	adc	r31, r31
    4de6:	e1 57       	subi	r30, 0x71	; 113
    4de8:	f8 4f       	sbci	r31, 0xF8	; 248
    4dea:	01 90       	ld	r0, Z+
    4dec:	f0 81       	ld	r31, Z
    4dee:	e0 2d       	mov	r30, r0
    4df0:	83 e0       	ldi	r24, 0x03	; 3
    4df2:	40 e0       	ldi	r20, 0x00	; 0
    4df4:	50 e0       	ldi	r21, 0x00	; 0
    4df6:	20 e0       	ldi	r18, 0x00	; 0
    4df8:	09 95       	icall
}
    4dfa:	08 95       	ret

00004dfc <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    4dfc:	89 e0       	ldi	r24, 0x09	; 9
    4dfe:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    4e02:	8d e8       	ldi	r24, 0x8D	; 141
    4e04:	9c e3       	ldi	r25, 0x3C	; 60
    4e06:	90 93 29 01 	sts	0x0129, r25
    4e0a:	80 93 28 01 	sts	0x0128, r24
}
    4e0e:	08 95       	ret

00004e10 <_nrk_precision_os_timer_reset>:

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    4e10:	10 92 25 01 	sts	0x0125, r1
    4e14:	10 92 24 01 	sts	0x0124, r1
}
    4e18:	08 95       	ret

00004e1a <nrk_spin_wait_us>:
	...
        NOP();
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    4e32:	01 97       	sbiw	r24, 0x01	; 1
    4e34:	91 f7       	brne	.-28     	; 0x4e1a <nrk_spin_wait_us>

}
    4e36:	08 95       	ret

00004e38 <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    4e38:	10 92 21 01 	sts	0x0121, r1
}
    4e3c:	08 95       	ret

00004e3e <_nrk_precision_os_timer_get>:
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
}

inline uint16_t _nrk_precision_os_timer_get()
{
    4e3e:	df 93       	push	r29
    4e40:	cf 93       	push	r28
    4e42:	00 d0       	rcall	.+0      	; 0x4e44 <_nrk_precision_os_timer_get+0x6>
    4e44:	cd b7       	in	r28, 0x3d	; 61
    4e46:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    4e48:	80 91 24 01 	lds	r24, 0x0124
    4e4c:	90 91 25 01 	lds	r25, 0x0125
    4e50:	9a 83       	std	Y+2, r25	; 0x02
    4e52:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    4e54:	29 81       	ldd	r18, Y+1	; 0x01
    4e56:	3a 81       	ldd	r19, Y+2	; 0x02
}
    4e58:	c9 01       	movw	r24, r18
    4e5a:	0f 90       	pop	r0
    4e5c:	0f 90       	pop	r0
    4e5e:	cf 91       	pop	r28
    4e60:	df 91       	pop	r29
    4e62:	08 95       	ret

00004e64 <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    4e64:	10 92 81 00 	sts	0x0081, r1
}
    4e68:	08 95       	ret

00004e6a <_nrk_high_speed_timer_start>:

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    4e6a:	81 e0       	ldi	r24, 0x01	; 1
    4e6c:	80 93 81 00 	sts	0x0081, r24
}
    4e70:	08 95       	ret

00004e72 <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    4e72:	83 b5       	in	r24, 0x23	; 35
    4e74:	81 60       	ori	r24, 0x01	; 1
    4e76:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    4e78:	10 92 85 00 	sts	0x0085, r1
    4e7c:	10 92 84 00 	sts	0x0084, r1
//  nrk_int_enable();
}
    4e80:	08 95       	ret

00004e82 <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    4e82:	df 93       	push	r29
    4e84:	cf 93       	push	r28
    4e86:	00 d0       	rcall	.+0      	; 0x4e88 <_nrk_high_speed_timer_get+0x6>
    4e88:	cd b7       	in	r28, 0x3d	; 61
    4e8a:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    4e8c:	80 91 84 00 	lds	r24, 0x0084
    4e90:	90 91 85 00 	lds	r25, 0x0085
    4e94:	9a 83       	std	Y+2, r25	; 0x02
    4e96:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    4e98:	29 81       	ldd	r18, Y+1	; 0x01
    4e9a:	3a 81       	ldd	r19, Y+2	; 0x02
}
    4e9c:	c9 01       	movw	r24, r18
    4e9e:	0f 90       	pop	r0
    4ea0:	0f 90       	pop	r0
    4ea2:	cf 91       	pop	r28
    4ea4:	df 91       	pop	r29
    4ea6:	08 95       	ret

00004ea8 <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    4ea8:	ef 92       	push	r14
    4eaa:	ff 92       	push	r15
    4eac:	0f 93       	push	r16
    4eae:	1f 93       	push	r17
    4eb0:	cf 93       	push	r28
    4eb2:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    4eb4:	ec 01       	movw	r28, r24
    4eb6:	cc 0f       	add	r28, r28
    4eb8:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    4eba:	8f ef       	ldi	r24, 0xFF	; 255
    4ebc:	c9 37       	cpi	r28, 0x79	; 121
    4ebe:	d8 07       	cpc	r29, r24
    4ec0:	10 f0       	brcs	.+4      	; 0x4ec6 <nrk_high_speed_timer_wait+0x1e>
    4ec2:	c0 e0       	ldi	r28, 0x00	; 0
    4ec4:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    4ec6:	7e 01       	movw	r14, r28
    4ec8:	00 e0       	ldi	r16, 0x00	; 0
    4eca:	10 e0       	ldi	r17, 0x00	; 0
    4ecc:	80 e0       	ldi	r24, 0x00	; 0
    4ece:	90 e0       	ldi	r25, 0x00	; 0
    4ed0:	e6 0e       	add	r14, r22
    4ed2:	f7 1e       	adc	r15, r23
    4ed4:	08 1f       	adc	r16, r24
    4ed6:	19 1f       	adc	r17, r25
if(tmp>65536) 
    4ed8:	91 e0       	ldi	r25, 0x01	; 1
    4eda:	e9 16       	cp	r14, r25
    4edc:	90 e0       	ldi	r25, 0x00	; 0
    4ede:	f9 06       	cpc	r15, r25
    4ee0:	91 e0       	ldi	r25, 0x01	; 1
    4ee2:	09 07       	cpc	r16, r25
    4ee4:	90 e0       	ldi	r25, 0x00	; 0
    4ee6:	19 07       	cpc	r17, r25
    4ee8:	68 f0       	brcs	.+26     	; 0x4f04 <nrk_high_speed_timer_wait+0x5c>
	{
	tmp-=65536;
    4eea:	80 e0       	ldi	r24, 0x00	; 0
    4eec:	90 e0       	ldi	r25, 0x00	; 0
    4eee:	af ef       	ldi	r26, 0xFF	; 255
    4ef0:	bf ef       	ldi	r27, 0xFF	; 255
    4ef2:	e8 0e       	add	r14, r24
    4ef4:	f9 1e       	adc	r15, r25
    4ef6:	0a 1f       	adc	r16, r26
    4ef8:	1b 1f       	adc	r17, r27
	do{}while(_nrk_high_speed_timer_get()>start);
    4efa:	0e 94 41 27 	call	0x4e82	; 0x4e82 <_nrk_high_speed_timer_get>
    4efe:	c8 17       	cp	r28, r24
    4f00:	d9 07       	cpc	r29, r25
    4f02:	d8 f3       	brcs	.-10     	; 0x4efa <nrk_high_speed_timer_wait+0x52>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    4f04:	0e 94 41 27 	call	0x4e82	; 0x4e82 <_nrk_high_speed_timer_get>
    4f08:	8e 15       	cp	r24, r14
    4f0a:	9f 05       	cpc	r25, r15
    4f0c:	d8 f3       	brcs	.-10     	; 0x4f04 <nrk_high_speed_timer_wait+0x5c>
}
    4f0e:	df 91       	pop	r29
    4f10:	cf 91       	pop	r28
    4f12:	1f 91       	pop	r17
    4f14:	0f 91       	pop	r16
    4f16:	ff 90       	pop	r15
    4f18:	ef 90       	pop	r14
    4f1a:	08 95       	ret

00004f1c <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    4f1c:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    4f20:	e0 e7       	ldi	r30, 0x70	; 112
    4f22:	f0 e0       	ldi	r31, 0x00	; 0
    4f24:	80 81       	ld	r24, Z
    4f26:	8d 7f       	andi	r24, 0xFD	; 253
    4f28:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    4f2a:	80 81       	ld	r24, Z
    4f2c:	8e 7f       	andi	r24, 0xFE	; 254
    4f2e:	80 83       	st	Z, r24
}
    4f30:	08 95       	ret

00004f32 <_nrk_os_timer_set>:

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    4f32:	80 93 b2 00 	sts	0x00B2, r24
}
    4f36:	08 95       	ret

00004f38 <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    4f38:	e0 e7       	ldi	r30, 0x70	; 112
    4f3a:	f0 e0       	ldi	r31, 0x00	; 0
    4f3c:	80 81       	ld	r24, Z
    4f3e:	83 60       	ori	r24, 0x03	; 3
    4f40:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    4f42:	83 e0       	ldi	r24, 0x03	; 3
    4f44:	80 93 b1 00 	sts	0x00B1, r24
}
    4f48:	08 95       	ret

00004f4a <_nrk_os_timer_reset>:

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    4f4a:	83 b5       	in	r24, 0x23	; 35
    4f4c:	82 60       	ori	r24, 0x02	; 2
    4f4e:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    4f50:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    4f54:	10 92 3d 05 	sts	0x053D, r1
    _nrk_prev_timer_val=0;
    4f58:	10 92 e8 05 	sts	0x05E8, r1
}
    4f5c:	08 95       	ret

00004f5e <_nrk_setup_timer>:

}


void _nrk_setup_timer() {
  _nrk_prev_timer_val=254;
    4f5e:	8e ef       	ldi	r24, 0xFE	; 254
    4f60:	80 93 e8 05 	sts	0x05E8, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    4f64:	90 e2       	ldi	r25, 0x20	; 32
    4f66:	90 93 b6 00 	sts	0x00B6, r25
  OCR2A = _nrk_prev_timer_val;
    4f6a:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    4f6e:	83 e0       	ldi	r24, 0x03	; 3
    4f70:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    4f72:	92 e0       	ldi	r25, 0x02	; 2
    4f74:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    4f78:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    4f7c:	93 b5       	in	r25, 0x23	; 35
    4f7e:	92 60       	ori	r25, 0x02	; 2
    4f80:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    4f82:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    4f84:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    4f86:	83 b5       	in	r24, 0x23	; 35
    4f88:	82 60       	ori	r24, 0x02	; 2
    4f8a:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    4f8c:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    4f90:	81 e0       	ldi	r24, 0x01	; 1
    4f92:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    4f96:	10 92 85 00 	sts	0x0085, r1
    4f9a:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    4f9e:	83 b5       	in	r24, 0x23	; 35
    4fa0:	82 60       	ori	r24, 0x02	; 2
    4fa2:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    4fa4:	83 b5       	in	r24, 0x23	; 35
    4fa6:	81 60       	ori	r24, 0x01	; 1
    4fa8:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    4faa:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    4fae:	10 92 25 01 	sts	0x0125, r1
    4fb2:	10 92 24 01 	sts	0x0124, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    4fb6:	83 b5       	in	r24, 0x23	; 35
    4fb8:	82 60       	ori	r24, 0x02	; 2
    4fba:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    4fbc:	83 b5       	in	r24, 0x23	; 35
    4fbe:	81 60       	ori	r24, 0x01	; 1
    4fc0:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    4fc2:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <_nrk_os_timer_reset>
  _nrk_precision_os_timer_reset();
    4fc6:	0e 94 08 27 	call	0x4e10	; 0x4e10 <_nrk_precision_os_timer_reset>
  _nrk_os_timer_start();
    4fca:	0e 94 9c 27 	call	0x4f38	; 0x4f38 <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    4fce:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    4fd2:	10 92 3d 05 	sts	0x053D, r1
}
    4fd6:	08 95       	ret

00004fd8 <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    4fd8:	80 91 b3 00 	lds	r24, 0x00B3
}
    4fdc:	8f 5f       	subi	r24, 0xFF	; 255
    4fde:	08 95       	ret

00004fe0 <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    4fe0:	81 50       	subi	r24, 0x01	; 1
    4fe2:	80 93 b3 00 	sts	0x00B3, r24
}
    4fe6:	08 95       	ret

00004fe8 <nrk_timer_int_stop>:

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    4fe8:	88 23       	and	r24, r24
    4fea:	11 f4       	brne	.+4      	; 0x4ff0 <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    4fec:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    4ff0:	8f ef       	ldi	r24, 0xFF	; 255
    4ff2:	08 95       	ret

00004ff4 <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    4ff4:	88 23       	and	r24, r24
    4ff6:	31 f4       	brne	.+12     	; 0x5004 <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    4ff8:	10 92 95 00 	sts	0x0095, r1
    4ffc:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    5000:	81 e0       	ldi	r24, 0x01	; 1
    5002:	08 95       	ret
	}
return NRK_ERROR;
    5004:	8f ef       	ldi	r24, 0xFF	; 255
}
    5006:	08 95       	ret

00005008 <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    5008:	88 23       	and	r24, r24
    500a:	29 f4       	brne	.+10     	; 0x5016 <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    500c:	20 91 94 00 	lds	r18, 0x0094
    5010:	30 91 95 00 	lds	r19, 0x0095
    5014:	02 c0       	rjmp	.+4      	; 0x501a <nrk_timer_int_read+0x12>
	}
return 0;
    5016:	20 e0       	ldi	r18, 0x00	; 0
    5018:	30 e0       	ldi	r19, 0x00	; 0

}
    501a:	c9 01       	movw	r24, r18
    501c:	08 95       	ret

0000501e <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    501e:	88 23       	and	r24, r24
    5020:	29 f4       	brne	.+10     	; 0x502c <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    5022:	82 e0       	ldi	r24, 0x02	; 2
    5024:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    5028:	81 e0       	ldi	r24, 0x01	; 1
    502a:	08 95       	ret
	}
return NRK_ERROR;
    502c:	8f ef       	ldi	r24, 0xFF	; 255
}
    502e:	08 95       	ret

00005030 <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    5030:	88 23       	and	r24, r24
    5032:	b9 f5       	brne	.+110    	; 0x50a2 <nrk_timer_int_configure+0x72>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    5034:	cb 01       	movw	r24, r22
    5036:	01 97       	sbiw	r24, 0x01	; 1
    5038:	85 30       	cpi	r24, 0x05	; 5
    503a:	91 05       	cpc	r25, r1
    503c:	10 f4       	brcc	.+4      	; 0x5042 <nrk_timer_int_configure+0x12>
    503e:	60 93 e7 05 	sts	0x05E7, r22
	TCCR3A = 0;  
    5042:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    5046:	88 e0       	ldi	r24, 0x08	; 8
    5048:	80 93 91 00 	sts	0x0091, r24
        OCR3AH = (compare_value >> 8) & 0xFF;	
    504c:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    5050:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    5054:	30 93 3b 05 	sts	0x053B, r19
    5058:	20 93 3a 05 	sts	0x053A, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    505c:	80 91 e7 05 	lds	r24, 0x05E7
    5060:	81 30       	cpi	r24, 0x01	; 1
    5062:	21 f4       	brne	.+8      	; 0x506c <nrk_timer_int_configure+0x3c>
    5064:	80 91 91 00 	lds	r24, 0x0091
    5068:	81 60       	ori	r24, 0x01	; 1
    506a:	0b c0       	rjmp	.+22     	; 0x5082 <nrk_timer_int_configure+0x52>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    506c:	82 30       	cpi	r24, 0x02	; 2
    506e:	21 f4       	brne	.+8      	; 0x5078 <nrk_timer_int_configure+0x48>
    5070:	80 91 91 00 	lds	r24, 0x0091
    5074:	82 60       	ori	r24, 0x02	; 2
    5076:	05 c0       	rjmp	.+10     	; 0x5082 <nrk_timer_int_configure+0x52>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    5078:	83 30       	cpi	r24, 0x03	; 3
    507a:	39 f4       	brne	.+14     	; 0x508a <nrk_timer_int_configure+0x5a>
    507c:	80 91 91 00 	lds	r24, 0x0091
    5080:	83 60       	ori	r24, 0x03	; 3
    5082:	80 93 91 00 	sts	0x0091, r24
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    5086:	81 e0       	ldi	r24, 0x01	; 1
    5088:	08 95       	ret
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    508a:	84 30       	cpi	r24, 0x04	; 4
    508c:	21 f4       	brne	.+8      	; 0x5096 <nrk_timer_int_configure+0x66>
    508e:	80 91 91 00 	lds	r24, 0x0091
    5092:	84 60       	ori	r24, 0x04	; 4
    5094:	f6 cf       	rjmp	.-20     	; 0x5082 <nrk_timer_int_configure+0x52>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    5096:	85 30       	cpi	r24, 0x05	; 5
    5098:	31 f4       	brne	.+12     	; 0x50a6 <nrk_timer_int_configure+0x76>
    509a:	80 91 91 00 	lds	r24, 0x0091
    509e:	85 60       	ori	r24, 0x05	; 5
    50a0:	f0 cf       	rjmp	.-32     	; 0x5082 <nrk_timer_int_configure+0x52>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    50a2:	8f ef       	ldi	r24, 0xFF	; 255
    50a4:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    50a6:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    50a8:	08 95       	ret

000050aa <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    50aa:	80 91 b2 00 	lds	r24, 0x00B2
}
    50ae:	08 95       	ret

000050b0 <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    50b0:	1f 92       	push	r1
    50b2:	0f 92       	push	r0
    50b4:	0f b6       	in	r0, 0x3f	; 63
    50b6:	0f 92       	push	r0
    50b8:	0b b6       	in	r0, 0x3b	; 59
    50ba:	0f 92       	push	r0
    50bc:	11 24       	eor	r1, r1
    50be:	2f 93       	push	r18
    50c0:	3f 93       	push	r19
    50c2:	4f 93       	push	r20
    50c4:	5f 93       	push	r21
    50c6:	6f 93       	push	r22
    50c8:	7f 93       	push	r23
    50ca:	8f 93       	push	r24
    50cc:	9f 93       	push	r25
    50ce:	af 93       	push	r26
    50d0:	bf 93       	push	r27
    50d2:	ef 93       	push	r30
    50d4:	ff 93       	push	r31
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    50d6:	8a e0       	ldi	r24, 0x0A	; 10
    50d8:	60 e0       	ldi	r22, 0x00	; 0
    50da:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <nrk_kernel_error_add>
    50de:	ff cf       	rjmp	.-2      	; 0x50de <__vector_default+0x2e>

000050e0 <__vector_13>:

// This is the SUSPEND for the OS timer Tick
void TIMER2_COMPA_vect( void ) __attribute__ ( ( signal,naked ));
void TIMER2_COMPA_vect(void) {

asm volatile (
    50e0:	0f 92       	push	r0
    50e2:	0f b6       	in	r0, 0x3f	; 63
    50e4:	0f 92       	push	r0
    50e6:	1f 92       	push	r1
    50e8:	2f 92       	push	r2
    50ea:	3f 92       	push	r3
    50ec:	4f 92       	push	r4
    50ee:	5f 92       	push	r5
    50f0:	6f 92       	push	r6
    50f2:	7f 92       	push	r7
    50f4:	8f 92       	push	r8
    50f6:	9f 92       	push	r9
    50f8:	af 92       	push	r10
    50fa:	bf 92       	push	r11
    50fc:	cf 92       	push	r12
    50fe:	df 92       	push	r13
    5100:	ef 92       	push	r14
    5102:	ff 92       	push	r15
    5104:	0f 93       	push	r16
    5106:	1f 93       	push	r17
    5108:	2f 93       	push	r18
    510a:	3f 93       	push	r19
    510c:	4f 93       	push	r20
    510e:	5f 93       	push	r21
    5110:	6f 93       	push	r22
    5112:	7f 93       	push	r23
    5114:	8f 93       	push	r24
    5116:	9f 93       	push	r25
    5118:	af 93       	push	r26
    511a:	bf 93       	push	r27
    511c:	cf 93       	push	r28
    511e:	df 93       	push	r29
    5120:	ef 93       	push	r30
    5122:	ff 93       	push	r31
    5124:	a0 91 79 07 	lds	r26, 0x0779
    5128:	b0 91 7a 07 	lds	r27, 0x077A
    512c:	0d b6       	in	r0, 0x3d	; 61
    512e:	0d 92       	st	X+, r0
    5130:	0e b6       	in	r0, 0x3e	; 62
    5132:	0d 92       	st	X+, r0
    5134:	1f 92       	push	r1
    5136:	a0 91 e5 05 	lds	r26, 0x05E5
    513a:	b0 91 e6 05 	lds	r27, 0x05E6
    513e:	1e 90       	ld	r1, -X
    5140:	be bf       	out	0x3e, r27	; 62
    5142:	ad bf       	out	0x3d, r26	; 61
    5144:	08 95       	ret

00005146 <__vector_32>:
);

}


SIGNAL(TIMER3_COMPA_vect) {
    5146:	1f 92       	push	r1
    5148:	0f 92       	push	r0
    514a:	0f b6       	in	r0, 0x3f	; 63
    514c:	0f 92       	push	r0
    514e:	0b b6       	in	r0, 0x3b	; 59
    5150:	0f 92       	push	r0
    5152:	11 24       	eor	r1, r1
    5154:	2f 93       	push	r18
    5156:	3f 93       	push	r19
    5158:	4f 93       	push	r20
    515a:	5f 93       	push	r21
    515c:	6f 93       	push	r22
    515e:	7f 93       	push	r23
    5160:	8f 93       	push	r24
    5162:	9f 93       	push	r25
    5164:	af 93       	push	r26
    5166:	bf 93       	push	r27
    5168:	ef 93       	push	r30
    516a:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    516c:	e0 91 3a 05 	lds	r30, 0x053A
    5170:	f0 91 3b 05 	lds	r31, 0x053B
    5174:	30 97       	sbiw	r30, 0x00	; 0
    5176:	11 f0       	breq	.+4      	; 0x517c <__vector_32+0x36>
    5178:	09 95       	icall
    517a:	04 c0       	rjmp	.+8      	; 0x5184 <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    517c:	8a e0       	ldi	r24, 0x0A	; 10
    517e:	60 e0       	ldi	r22, 0x00	; 0
    5180:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <nrk_kernel_error_add>
	return;  	
}
    5184:	ff 91       	pop	r31
    5186:	ef 91       	pop	r30
    5188:	bf 91       	pop	r27
    518a:	af 91       	pop	r26
    518c:	9f 91       	pop	r25
    518e:	8f 91       	pop	r24
    5190:	7f 91       	pop	r23
    5192:	6f 91       	pop	r22
    5194:	5f 91       	pop	r21
    5196:	4f 91       	pop	r20
    5198:	3f 91       	pop	r19
    519a:	2f 91       	pop	r18
    519c:	0f 90       	pop	r0
    519e:	0b be       	out	0x3b, r0	; 59
    51a0:	0f 90       	pop	r0
    51a2:	0f be       	out	0x3f, r0	; 63
    51a4:	0f 90       	pop	r0
    51a6:	1f 90       	pop	r1
    51a8:	18 95       	reti

000051aa <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    51aa:	1f 92       	push	r1
    51ac:	0f 92       	push	r0
    51ae:	0f b6       	in	r0, 0x3f	; 63
    51b0:	0f 92       	push	r0
    51b2:	11 24       	eor	r1, r1

	return;  	
} 
    51b4:	0f 90       	pop	r0
    51b6:	0f be       	out	0x3f, r0	; 63
    51b8:	0f 90       	pop	r0
    51ba:	1f 90       	pop	r1
    51bc:	18 95       	reti

000051be <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    51be:	04 b6       	in	r0, 0x34	; 52
    51c0:	03 fc       	sbrc	r0, 3
    51c2:	02 c0       	rjmp	.+4      	; 0x51c8 <_nrk_startup_error+0xa>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    51c4:	80 e0       	ldi	r24, 0x00	; 0
    51c6:	01 c0       	rjmp	.+2      	; 0x51ca <_nrk_startup_error+0xc>

// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
	{
	// don't clear wdt
	error|=0x10;
    51c8:	80 e1       	ldi	r24, 0x10	; 16
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    51ca:	04 b6       	in	r0, 0x34	; 52
    51cc:	02 fe       	sbrs	r0, 2
    51ce:	06 c0       	rjmp	.+12     	; 0x51dc <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    51d0:	94 b7       	in	r25, 0x34	; 52
    51d2:	9b 7f       	andi	r25, 0xFB	; 251
    51d4:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    51d6:	04 b6       	in	r0, 0x34	; 52
    51d8:	00 fe       	sbrs	r0, 0
		error|=0x04;
    51da:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    51dc:	04 b6       	in	r0, 0x34	; 52
    51de:	01 fe       	sbrs	r0, 1
    51e0:	05 c0       	rjmp	.+10     	; 0x51ec <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    51e2:	94 b7       	in	r25, 0x34	; 52
    51e4:	9d 7f       	andi	r25, 0xFD	; 253
    51e6:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    51e8:	82 60       	ori	r24, 0x02	; 2
    51ea:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    51ec:	88 23       	and	r24, r24
    51ee:	61 f4       	brne	.+24     	; 0x5208 <_nrk_startup_error+0x4a>

// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    51f0:	04 b6       	in	r0, 0x34	; 52
    51f2:	00 fe       	sbrs	r0, 0
    51f4:	04 c0       	rjmp	.+8      	; 0x51fe <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    51f6:	94 b7       	in	r25, 0x34	; 52
    51f8:	9e 7f       	andi	r25, 0xFE	; 254
    51fa:	94 bf       	out	0x34, r25	; 52
    51fc:	01 c0       	rjmp	.+2      	; 0x5200 <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    51fe:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    5200:	90 91 b0 00 	lds	r25, 0x00B0
    5204:	91 11       	cpse	r25, r1
    5206:	81 60       	ori	r24, 0x01	; 1

return error;
}
    5208:	08 95       	ret

0000520a <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    520a:	88 23       	and	r24, r24
    520c:	11 f4       	brne	.+4      	; 0x5212 <nrk_ext_int_enable+0x8>
    520e:	e8 9a       	sbi	0x1d, 0	; 29
    5210:	39 c0       	rjmp	.+114    	; 0x5284 <nrk_ext_int_enable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    5212:	81 30       	cpi	r24, 0x01	; 1
    5214:	11 f4       	brne	.+4      	; 0x521a <nrk_ext_int_enable+0x10>
    5216:	e9 9a       	sbi	0x1d, 1	; 29
    5218:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    521a:	82 30       	cpi	r24, 0x02	; 2
    521c:	11 f4       	brne	.+4      	; 0x5222 <nrk_ext_int_enable+0x18>
    521e:	ea 9a       	sbi	0x1d, 2	; 29
    5220:	31 c0       	rjmp	.+98     	; 0x5284 <nrk_ext_int_enable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    5222:	83 30       	cpi	r24, 0x03	; 3
    5224:	21 f4       	brne	.+8      	; 0x522e <nrk_ext_int_enable+0x24>
    5226:	80 91 6b 00 	lds	r24, 0x006B
    522a:	81 60       	ori	r24, 0x01	; 1
    522c:	29 c0       	rjmp	.+82     	; 0x5280 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    522e:	84 30       	cpi	r24, 0x04	; 4
    5230:	21 f4       	brne	.+8      	; 0x523a <nrk_ext_int_enable+0x30>
    5232:	80 91 6b 00 	lds	r24, 0x006B
    5236:	82 60       	ori	r24, 0x02	; 2
    5238:	23 c0       	rjmp	.+70     	; 0x5280 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    523a:	85 30       	cpi	r24, 0x05	; 5
    523c:	21 f4       	brne	.+8      	; 0x5246 <nrk_ext_int_enable+0x3c>
    523e:	80 91 6b 00 	lds	r24, 0x006B
    5242:	84 60       	ori	r24, 0x04	; 4
    5244:	1d c0       	rjmp	.+58     	; 0x5280 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    5246:	86 30       	cpi	r24, 0x06	; 6
    5248:	21 f4       	brne	.+8      	; 0x5252 <nrk_ext_int_enable+0x48>
    524a:	80 91 6b 00 	lds	r24, 0x006B
    524e:	88 60       	ori	r24, 0x08	; 8
    5250:	17 c0       	rjmp	.+46     	; 0x5280 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    5252:	87 30       	cpi	r24, 0x07	; 7
    5254:	21 f4       	brne	.+8      	; 0x525e <nrk_ext_int_enable+0x54>
    5256:	80 91 6b 00 	lds	r24, 0x006B
    525a:	80 61       	ori	r24, 0x10	; 16
    525c:	11 c0       	rjmp	.+34     	; 0x5280 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    525e:	88 30       	cpi	r24, 0x08	; 8
    5260:	21 f4       	brne	.+8      	; 0x526a <nrk_ext_int_enable+0x60>
    5262:	80 91 6b 00 	lds	r24, 0x006B
    5266:	80 62       	ori	r24, 0x20	; 32
    5268:	0b c0       	rjmp	.+22     	; 0x5280 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    526a:	89 30       	cpi	r24, 0x09	; 9
    526c:	21 f4       	brne	.+8      	; 0x5276 <nrk_ext_int_enable+0x6c>
    526e:	80 91 6b 00 	lds	r24, 0x006B
    5272:	80 64       	ori	r24, 0x40	; 64
    5274:	05 c0       	rjmp	.+10     	; 0x5280 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    5276:	8a 30       	cpi	r24, 0x0A	; 10
    5278:	39 f4       	brne	.+14     	; 0x5288 <nrk_ext_int_enable+0x7e>
    527a:	80 91 6b 00 	lds	r24, 0x006B
    527e:	80 68       	ori	r24, 0x80	; 128
    5280:	80 93 6b 00 	sts	0x006B, r24
    5284:	81 e0       	ldi	r24, 0x01	; 1
    5286:	08 95       	ret
return NRK_ERROR;
    5288:	8f ef       	ldi	r24, 0xFF	; 255
}
    528a:	08 95       	ret

0000528c <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    528c:	88 23       	and	r24, r24
    528e:	11 f4       	brne	.+4      	; 0x5294 <nrk_ext_int_disable+0x8>
    5290:	e8 98       	cbi	0x1d, 0	; 29
    5292:	39 c0       	rjmp	.+114    	; 0x5306 <nrk_ext_int_disable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    5294:	81 30       	cpi	r24, 0x01	; 1
    5296:	11 f4       	brne	.+4      	; 0x529c <nrk_ext_int_disable+0x10>
    5298:	e9 98       	cbi	0x1d, 1	; 29
    529a:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    529c:	82 30       	cpi	r24, 0x02	; 2
    529e:	11 f4       	brne	.+4      	; 0x52a4 <nrk_ext_int_disable+0x18>
    52a0:	e9 98       	cbi	0x1d, 1	; 29
    52a2:	31 c0       	rjmp	.+98     	; 0x5306 <nrk_ext_int_disable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    52a4:	83 30       	cpi	r24, 0x03	; 3
    52a6:	21 f4       	brne	.+8      	; 0x52b0 <nrk_ext_int_disable+0x24>
    52a8:	80 91 6b 00 	lds	r24, 0x006B
    52ac:	8e 7f       	andi	r24, 0xFE	; 254
    52ae:	29 c0       	rjmp	.+82     	; 0x5302 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    52b0:	84 30       	cpi	r24, 0x04	; 4
    52b2:	21 f4       	brne	.+8      	; 0x52bc <nrk_ext_int_disable+0x30>
    52b4:	80 91 6b 00 	lds	r24, 0x006B
    52b8:	8d 7f       	andi	r24, 0xFD	; 253
    52ba:	23 c0       	rjmp	.+70     	; 0x5302 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    52bc:	85 30       	cpi	r24, 0x05	; 5
    52be:	21 f4       	brne	.+8      	; 0x52c8 <nrk_ext_int_disable+0x3c>
    52c0:	80 91 6b 00 	lds	r24, 0x006B
    52c4:	8b 7f       	andi	r24, 0xFB	; 251
    52c6:	1d c0       	rjmp	.+58     	; 0x5302 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    52c8:	86 30       	cpi	r24, 0x06	; 6
    52ca:	21 f4       	brne	.+8      	; 0x52d4 <nrk_ext_int_disable+0x48>
    52cc:	80 91 6b 00 	lds	r24, 0x006B
    52d0:	87 7f       	andi	r24, 0xF7	; 247
    52d2:	17 c0       	rjmp	.+46     	; 0x5302 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    52d4:	87 30       	cpi	r24, 0x07	; 7
    52d6:	21 f4       	brne	.+8      	; 0x52e0 <nrk_ext_int_disable+0x54>
    52d8:	80 91 6b 00 	lds	r24, 0x006B
    52dc:	8f 7e       	andi	r24, 0xEF	; 239
    52de:	11 c0       	rjmp	.+34     	; 0x5302 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    52e0:	88 30       	cpi	r24, 0x08	; 8
    52e2:	21 f4       	brne	.+8      	; 0x52ec <nrk_ext_int_disable+0x60>
    52e4:	80 91 6b 00 	lds	r24, 0x006B
    52e8:	8f 7d       	andi	r24, 0xDF	; 223
    52ea:	0b c0       	rjmp	.+22     	; 0x5302 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    52ec:	89 30       	cpi	r24, 0x09	; 9
    52ee:	21 f4       	brne	.+8      	; 0x52f8 <nrk_ext_int_disable+0x6c>
    52f0:	80 91 6b 00 	lds	r24, 0x006B
    52f4:	8f 7b       	andi	r24, 0xBF	; 191
    52f6:	05 c0       	rjmp	.+10     	; 0x5302 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    52f8:	8a 30       	cpi	r24, 0x0A	; 10
    52fa:	39 f4       	brne	.+14     	; 0x530a <nrk_ext_int_disable+0x7e>
    52fc:	80 91 6b 00 	lds	r24, 0x006B
    5300:	8f 77       	andi	r24, 0x7F	; 127
    5302:	80 93 6b 00 	sts	0x006B, r24
    5306:	81 e0       	ldi	r24, 0x01	; 1
    5308:	08 95       	ret
return NRK_ERROR;
    530a:	8f ef       	ldi	r24, 0xFF	; 255
}
    530c:	08 95       	ret

0000530e <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    530e:	88 23       	and	r24, r24
    5310:	39 f5       	brne	.+78     	; 0x5360 <nrk_ext_int_configure+0x52>
	{
	ext_int0_callback=callback_func;
    5312:	50 93 95 07 	sts	0x0795, r21
    5316:	40 93 94 07 	sts	0x0794, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    531a:	66 23       	and	r22, r22
    531c:	21 f4       	brne	.+8      	; 0x5326 <nrk_ext_int_configure+0x18>
    531e:	80 91 69 00 	lds	r24, 0x0069
    5322:	8c 7f       	andi	r24, 0xFC	; 252
    5324:	66 c0       	rjmp	.+204    	; 0x53f2 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_LEVEL_TRIGGER) 
    5326:	61 30       	cpi	r22, 0x01	; 1
    5328:	49 f4       	brne	.+18     	; 0x533c <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    532a:	80 91 69 00 	lds	r24, 0x0069
    532e:	8d 7f       	andi	r24, 0xFD	; 253
    5330:	80 93 69 00 	sts	0x0069, r24
    5334:	80 91 69 00 	lds	r24, 0x0069
    5338:	81 60       	ori	r24, 0x01	; 1
    533a:	5b c0       	rjmp	.+182    	; 0x53f2 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_FALLING_EDGE) 
    533c:	62 30       	cpi	r22, 0x02	; 2
    533e:	49 f4       	brne	.+18     	; 0x5352 <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    5340:	80 91 69 00 	lds	r24, 0x0069
    5344:	82 60       	ori	r24, 0x02	; 2
    5346:	80 93 69 00 	sts	0x0069, r24
    534a:	80 91 69 00 	lds	r24, 0x0069
    534e:	8e 7f       	andi	r24, 0xFE	; 254
    5350:	50 c0       	rjmp	.+160    	; 0x53f2 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    5352:	63 30       	cpi	r22, 0x03	; 3
    5354:	09 f0       	breq	.+2      	; 0x5358 <nrk_ext_int_configure+0x4a>
    5356:	62 c0       	rjmp	.+196    	; 0x541c <nrk_ext_int_configure+0x10e>
    5358:	80 91 69 00 	lds	r24, 0x0069
    535c:	83 60       	ori	r24, 0x03	; 3
    535e:	49 c0       	rjmp	.+146    	; 0x53f2 <nrk_ext_int_configure+0xe4>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    5360:	81 30       	cpi	r24, 0x01	; 1
    5362:	31 f5       	brne	.+76     	; 0x53b0 <nrk_ext_int_configure+0xa2>
	{
	ext_int1_callback=callback_func;
    5364:	50 93 93 07 	sts	0x0793, r21
    5368:	40 93 92 07 	sts	0x0792, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    536c:	66 23       	and	r22, r22
    536e:	21 f4       	brne	.+8      	; 0x5378 <nrk_ext_int_configure+0x6a>
    5370:	80 91 69 00 	lds	r24, 0x0069
    5374:	83 7f       	andi	r24, 0xF3	; 243
    5376:	3d c0       	rjmp	.+122    	; 0x53f2 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_LEVEL_TRIGGER) 
    5378:	61 30       	cpi	r22, 0x01	; 1
    537a:	49 f4       	brne	.+18     	; 0x538e <nrk_ext_int_configure+0x80>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    537c:	80 91 69 00 	lds	r24, 0x0069
    5380:	87 7f       	andi	r24, 0xF7	; 247
    5382:	80 93 69 00 	sts	0x0069, r24
    5386:	80 91 69 00 	lds	r24, 0x0069
    538a:	84 60       	ori	r24, 0x04	; 4
    538c:	32 c0       	rjmp	.+100    	; 0x53f2 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_FALLING_EDGE) 
    538e:	62 30       	cpi	r22, 0x02	; 2
    5390:	49 f4       	brne	.+18     	; 0x53a4 <nrk_ext_int_configure+0x96>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    5392:	80 91 69 00 	lds	r24, 0x0069
    5396:	88 60       	ori	r24, 0x08	; 8
    5398:	80 93 69 00 	sts	0x0069, r24
    539c:	80 91 69 00 	lds	r24, 0x0069
    53a0:	8b 7f       	andi	r24, 0xFB	; 251
    53a2:	27 c0       	rjmp	.+78     	; 0x53f2 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    53a4:	63 30       	cpi	r22, 0x03	; 3
    53a6:	d1 f5       	brne	.+116    	; 0x541c <nrk_ext_int_configure+0x10e>
    53a8:	80 91 69 00 	lds	r24, 0x0069
    53ac:	8c 60       	ori	r24, 0x0C	; 12
    53ae:	21 c0       	rjmp	.+66     	; 0x53f2 <nrk_ext_int_configure+0xe4>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    53b0:	82 30       	cpi	r24, 0x02	; 2
    53b2:	41 f5       	brne	.+80     	; 0x5404 <nrk_ext_int_configure+0xf6>
	{
	ext_int2_callback=callback_func;
    53b4:	50 93 97 07 	sts	0x0797, r21
    53b8:	40 93 96 07 	sts	0x0796, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    53bc:	66 23       	and	r22, r22
    53be:	21 f4       	brne	.+8      	; 0x53c8 <nrk_ext_int_configure+0xba>
    53c0:	80 91 69 00 	lds	r24, 0x0069
    53c4:	8f 7c       	andi	r24, 0xCF	; 207
    53c6:	15 c0       	rjmp	.+42     	; 0x53f2 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_LEVEL_TRIGGER) 
    53c8:	61 30       	cpi	r22, 0x01	; 1
    53ca:	49 f4       	brne	.+18     	; 0x53de <nrk_ext_int_configure+0xd0>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    53cc:	80 91 69 00 	lds	r24, 0x0069
    53d0:	8f 7d       	andi	r24, 0xDF	; 223
    53d2:	80 93 69 00 	sts	0x0069, r24
    53d6:	80 91 69 00 	lds	r24, 0x0069
    53da:	80 61       	ori	r24, 0x10	; 16
    53dc:	0a c0       	rjmp	.+20     	; 0x53f2 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_FALLING_EDGE) 
    53de:	62 30       	cpi	r22, 0x02	; 2
    53e0:	59 f4       	brne	.+22     	; 0x53f8 <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    53e2:	80 91 69 00 	lds	r24, 0x0069
    53e6:	80 62       	ori	r24, 0x20	; 32
    53e8:	80 93 69 00 	sts	0x0069, r24
    53ec:	80 91 69 00 	lds	r24, 0x0069
    53f0:	8f 7e       	andi	r24, 0xEF	; 239
    53f2:	80 93 69 00 	sts	0x0069, r24
    53f6:	12 c0       	rjmp	.+36     	; 0x541c <nrk_ext_int_configure+0x10e>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    53f8:	63 30       	cpi	r22, 0x03	; 3
    53fa:	81 f4       	brne	.+32     	; 0x541c <nrk_ext_int_configure+0x10e>
    53fc:	80 91 69 00 	lds	r24, 0x0069
    5400:	80 63       	ori	r24, 0x30	; 48
    5402:	f7 cf       	rjmp	.-18     	; 0x53f2 <nrk_ext_int_configure+0xe4>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    5404:	83 50       	subi	r24, 0x03	; 3
    5406:	88 30       	cpi	r24, 0x08	; 8
    5408:	58 f4       	brcc	.+22     	; 0x5420 <nrk_ext_int_configure+0x112>
	PCICR |= BM(PCIE0);	
    540a:	80 91 68 00 	lds	r24, 0x0068
    540e:	81 60       	ori	r24, 0x01	; 1
    5410:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    5414:	50 93 99 07 	sts	0x0799, r21
    5418:	40 93 98 07 	sts	0x0798, r20
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
	return NRK_OK;
    541c:	81 e0       	ldi	r24, 0x01	; 1
    541e:	08 95       	ret
if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
	PCICR |= BM(PCIE0);	
	pc_int0_callback=callback_func;
	return NRK_OK;
	}
return NRK_ERROR;
    5420:	8f ef       	ldi	r24, 0xFF	; 255
}
    5422:	08 95       	ret

00005424 <__vector_9>:

#ifndef NRK_DISABLE_EXT_INT
SIGNAL(PCINT0_vect) {
    5424:	1f 92       	push	r1
    5426:	0f 92       	push	r0
    5428:	0f b6       	in	r0, 0x3f	; 63
    542a:	0f 92       	push	r0
    542c:	0b b6       	in	r0, 0x3b	; 59
    542e:	0f 92       	push	r0
    5430:	11 24       	eor	r1, r1
    5432:	2f 93       	push	r18
    5434:	3f 93       	push	r19
    5436:	4f 93       	push	r20
    5438:	5f 93       	push	r21
    543a:	6f 93       	push	r22
    543c:	7f 93       	push	r23
    543e:	8f 93       	push	r24
    5440:	9f 93       	push	r25
    5442:	af 93       	push	r26
    5444:	bf 93       	push	r27
    5446:	ef 93       	push	r30
    5448:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    544a:	e0 91 98 07 	lds	r30, 0x0798
    544e:	f0 91 99 07 	lds	r31, 0x0799
    5452:	30 97       	sbiw	r30, 0x00	; 0
    5454:	11 f0       	breq	.+4      	; 0x545a <__vector_9+0x36>
    5456:	09 95       	icall
    5458:	04 c0       	rjmp	.+8      	; 0x5462 <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    545a:	8a e0       	ldi	r24, 0x0A	; 10
    545c:	60 e0       	ldi	r22, 0x00	; 0
    545e:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <nrk_kernel_error_add>
	return;  	
}
    5462:	ff 91       	pop	r31
    5464:	ef 91       	pop	r30
    5466:	bf 91       	pop	r27
    5468:	af 91       	pop	r26
    546a:	9f 91       	pop	r25
    546c:	8f 91       	pop	r24
    546e:	7f 91       	pop	r23
    5470:	6f 91       	pop	r22
    5472:	5f 91       	pop	r21
    5474:	4f 91       	pop	r20
    5476:	3f 91       	pop	r19
    5478:	2f 91       	pop	r18
    547a:	0f 90       	pop	r0
    547c:	0b be       	out	0x3b, r0	; 59
    547e:	0f 90       	pop	r0
    5480:	0f be       	out	0x3f, r0	; 63
    5482:	0f 90       	pop	r0
    5484:	1f 90       	pop	r1
    5486:	18 95       	reti

00005488 <__vector_1>:


SIGNAL(INT0_vect) {
    5488:	1f 92       	push	r1
    548a:	0f 92       	push	r0
    548c:	0f b6       	in	r0, 0x3f	; 63
    548e:	0f 92       	push	r0
    5490:	0b b6       	in	r0, 0x3b	; 59
    5492:	0f 92       	push	r0
    5494:	11 24       	eor	r1, r1
    5496:	2f 93       	push	r18
    5498:	3f 93       	push	r19
    549a:	4f 93       	push	r20
    549c:	5f 93       	push	r21
    549e:	6f 93       	push	r22
    54a0:	7f 93       	push	r23
    54a2:	8f 93       	push	r24
    54a4:	9f 93       	push	r25
    54a6:	af 93       	push	r26
    54a8:	bf 93       	push	r27
    54aa:	ef 93       	push	r30
    54ac:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    54ae:	e0 91 94 07 	lds	r30, 0x0794
    54b2:	f0 91 95 07 	lds	r31, 0x0795
    54b6:	30 97       	sbiw	r30, 0x00	; 0
    54b8:	11 f0       	breq	.+4      	; 0x54be <__vector_1+0x36>
    54ba:	09 95       	icall
    54bc:	04 c0       	rjmp	.+8      	; 0x54c6 <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    54be:	8a e0       	ldi	r24, 0x0A	; 10
    54c0:	60 e0       	ldi	r22, 0x00	; 0
    54c2:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <nrk_kernel_error_add>
	return;  	
}
    54c6:	ff 91       	pop	r31
    54c8:	ef 91       	pop	r30
    54ca:	bf 91       	pop	r27
    54cc:	af 91       	pop	r26
    54ce:	9f 91       	pop	r25
    54d0:	8f 91       	pop	r24
    54d2:	7f 91       	pop	r23
    54d4:	6f 91       	pop	r22
    54d6:	5f 91       	pop	r21
    54d8:	4f 91       	pop	r20
    54da:	3f 91       	pop	r19
    54dc:	2f 91       	pop	r18
    54de:	0f 90       	pop	r0
    54e0:	0b be       	out	0x3b, r0	; 59
    54e2:	0f 90       	pop	r0
    54e4:	0f be       	out	0x3f, r0	; 63
    54e6:	0f 90       	pop	r0
    54e8:	1f 90       	pop	r1
    54ea:	18 95       	reti

000054ec <__vector_2>:

SIGNAL(INT1_vect) {
    54ec:	1f 92       	push	r1
    54ee:	0f 92       	push	r0
    54f0:	0f b6       	in	r0, 0x3f	; 63
    54f2:	0f 92       	push	r0
    54f4:	0b b6       	in	r0, 0x3b	; 59
    54f6:	0f 92       	push	r0
    54f8:	11 24       	eor	r1, r1
    54fa:	2f 93       	push	r18
    54fc:	3f 93       	push	r19
    54fe:	4f 93       	push	r20
    5500:	5f 93       	push	r21
    5502:	6f 93       	push	r22
    5504:	7f 93       	push	r23
    5506:	8f 93       	push	r24
    5508:	9f 93       	push	r25
    550a:	af 93       	push	r26
    550c:	bf 93       	push	r27
    550e:	ef 93       	push	r30
    5510:	ff 93       	push	r31
	if(ext_int1_callback!=NULL) ext_int1_callback();
    5512:	e0 91 92 07 	lds	r30, 0x0792
    5516:	f0 91 93 07 	lds	r31, 0x0793
    551a:	30 97       	sbiw	r30, 0x00	; 0
    551c:	11 f0       	breq	.+4      	; 0x5522 <__vector_2+0x36>
    551e:	09 95       	icall
    5520:	04 c0       	rjmp	.+8      	; 0x552a <__vector_2+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5522:	8a e0       	ldi	r24, 0x0A	; 10
    5524:	60 e0       	ldi	r22, 0x00	; 0
    5526:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <nrk_kernel_error_add>
	return;  	
}
    552a:	ff 91       	pop	r31
    552c:	ef 91       	pop	r30
    552e:	bf 91       	pop	r27
    5530:	af 91       	pop	r26
    5532:	9f 91       	pop	r25
    5534:	8f 91       	pop	r24
    5536:	7f 91       	pop	r23
    5538:	6f 91       	pop	r22
    553a:	5f 91       	pop	r21
    553c:	4f 91       	pop	r20
    553e:	3f 91       	pop	r19
    5540:	2f 91       	pop	r18
    5542:	0f 90       	pop	r0
    5544:	0b be       	out	0x3b, r0	; 59
    5546:	0f 90       	pop	r0
    5548:	0f be       	out	0x3f, r0	; 63
    554a:	0f 90       	pop	r0
    554c:	1f 90       	pop	r1
    554e:	18 95       	reti

00005550 <__vector_3>:

SIGNAL(INT2_vect) {
    5550:	1f 92       	push	r1
    5552:	0f 92       	push	r0
    5554:	0f b6       	in	r0, 0x3f	; 63
    5556:	0f 92       	push	r0
    5558:	0b b6       	in	r0, 0x3b	; 59
    555a:	0f 92       	push	r0
    555c:	11 24       	eor	r1, r1
    555e:	2f 93       	push	r18
    5560:	3f 93       	push	r19
    5562:	4f 93       	push	r20
    5564:	5f 93       	push	r21
    5566:	6f 93       	push	r22
    5568:	7f 93       	push	r23
    556a:	8f 93       	push	r24
    556c:	9f 93       	push	r25
    556e:	af 93       	push	r26
    5570:	bf 93       	push	r27
    5572:	ef 93       	push	r30
    5574:	ff 93       	push	r31
	if(ext_int2_callback!=NULL) ext_int2_callback();
    5576:	e0 91 96 07 	lds	r30, 0x0796
    557a:	f0 91 97 07 	lds	r31, 0x0797
    557e:	30 97       	sbiw	r30, 0x00	; 0
    5580:	11 f0       	breq	.+4      	; 0x5586 <__vector_3+0x36>
    5582:	09 95       	icall
    5584:	04 c0       	rjmp	.+8      	; 0x558e <__vector_3+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5586:	8a e0       	ldi	r24, 0x0A	; 10
    5588:	60 e0       	ldi	r22, 0x00	; 0
    558a:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <nrk_kernel_error_add>
	return;  	
}
    558e:	ff 91       	pop	r31
    5590:	ef 91       	pop	r30
    5592:	bf 91       	pop	r27
    5594:	af 91       	pop	r26
    5596:	9f 91       	pop	r25
    5598:	8f 91       	pop	r24
    559a:	7f 91       	pop	r23
    559c:	6f 91       	pop	r22
    559e:	5f 91       	pop	r21
    55a0:	4f 91       	pop	r20
    55a2:	3f 91       	pop	r19
    55a4:	2f 91       	pop	r18
    55a6:	0f 90       	pop	r0
    55a8:	0b be       	out	0x3b, r0	; 59
    55aa:	0f 90       	pop	r0
    55ac:	0f be       	out	0x3f, r0	; 63
    55ae:	0f 90       	pop	r0
    55b0:	1f 90       	pop	r1
    55b2:	18 95       	reti

000055b4 <nrk_watchdog_disable>:
#include <nrk.h>
#include <avr/wdt.h>

void nrk_watchdog_disable()
{
nrk_int_disable();
    55b4:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    55b8:	a8 95       	wdr

void nrk_watchdog_disable()
{
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    55ba:	84 b7       	in	r24, 0x34	; 52
    55bc:	87 7f       	andi	r24, 0xF7	; 247
    55be:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    55c0:	e0 e6       	ldi	r30, 0x60	; 96
    55c2:	f0 e0       	ldi	r31, 0x00	; 0
    55c4:	80 81       	ld	r24, Z
    55c6:	88 61       	ori	r24, 0x18	; 24
    55c8:	80 83       	st	Z, r24
WDTCSR = 0;
    55ca:	10 82       	st	Z, r1
nrk_int_enable();
    55cc:	0e 94 db 14 	call	0x29b6	; 0x29b6 <nrk_int_enable>
}
    55d0:	08 95       	ret

000055d2 <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
    55d2:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    55d6:	a8 95       	wdr
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    55d8:	84 b7       	in	r24, 0x34	; 52
    55da:	87 7f       	andi	r24, 0xF7	; 247
    55dc:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    55de:	e0 e6       	ldi	r30, 0x60	; 96
    55e0:	f0 e0       	ldi	r31, 0x00	; 0
    55e2:	80 81       	ld	r24, Z
    55e4:	88 61       	ori	r24, 0x18	; 24
    55e6:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    55e8:	8d e0       	ldi	r24, 0x0D	; 13
    55ea:	80 83       	st	Z, r24
nrk_int_enable();
    55ec:	0e 94 db 14 	call	0x29b6	; 0x29b6 <nrk_int_enable>
}
    55f0:	08 95       	ret

000055f2 <nrk_watchdog_check>:

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    55f2:	04 b6       	in	r0, 0x34	; 52
    55f4:	03 fc       	sbrc	r0, 3
    55f6:	02 c0       	rjmp	.+4      	; 0x55fc <nrk_watchdog_check+0xa>
    55f8:	81 e0       	ldi	r24, 0x01	; 1
    55fa:	08 95       	ret
return NRK_ERROR;
    55fc:	8f ef       	ldi	r24, 0xFF	; 255
}
    55fe:	08 95       	ret

00005600 <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    5600:	a8 95       	wdr

}
    5602:	08 95       	ret

00005604 <nrk_battery_save>:
        nrk_led_clr(2);
        nrk_led_clr(3);
        SET_VREG_INACTIVE();
        nrk_sleep();
#endif
}
    5604:	08 95       	ret

00005606 <nrk_sleep>:

void nrk_sleep()
{
    //PRR0 = 0xff;
    //PRR1 = 0xff;
    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    5606:	83 b7       	in	r24, 0x33	; 51
    5608:	81 7f       	andi	r24, 0xF1	; 241
    560a:	86 60       	ori	r24, 0x06	; 6
    560c:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    560e:	83 b7       	in	r24, 0x33	; 51
    5610:	81 60       	ori	r24, 0x01	; 1
    5612:	83 bf       	out	0x33, r24	; 51
    5614:	88 95       	sleep
    5616:	83 b7       	in	r24, 0x33	; 51
    5618:	8e 7f       	andi	r24, 0xFE	; 254
    561a:	83 bf       	out	0x33, r24	; 51

}
    561c:	08 95       	ret

0000561e <nrk_idle>:

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    561e:	83 b7       	in	r24, 0x33	; 51
    5620:	81 7f       	andi	r24, 0xF1	; 241
    5622:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    5624:	83 b7       	in	r24, 0x33	; 51
    5626:	81 60       	ori	r24, 0x01	; 1
    5628:	83 bf       	out	0x33, r24	; 51
    562a:	88 95       	sleep
    562c:	83 b7       	in	r24, 0x33	; 51
    562e:	8e 7f       	andi	r24, 0xFE	; 254
    5630:	83 bf       	out	0x33, r24	; 51

}
    5632:	08 95       	ret

00005634 <nrk_task_set_entry_function>:

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    5634:	fc 01       	movw	r30, r24
    5636:	76 83       	std	Z+6, r23	; 0x06
    5638:	65 83       	std	Z+5, r22	; 0x05
}
    563a:	08 95       	ret

0000563c <nrk_task_set_stk>:

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    563c:	ef 92       	push	r14
    563e:	ff 92       	push	r15
    5640:	0f 93       	push	r16
    5642:	1f 93       	push	r17
    5644:	cf 93       	push	r28
    5646:	df 93       	push	r29
    5648:	ec 01       	movw	r28, r24
    564a:	8b 01       	movw	r16, r22
    564c:	7a 01       	movw	r14, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    564e:	40 32       	cpi	r20, 0x20	; 32
    5650:	51 05       	cpc	r21, r1
    5652:	18 f4       	brcc	.+6      	; 0x565a <nrk_task_set_stk+0x1e>
    5654:	81 e1       	ldi	r24, 0x11	; 17
    5656:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    565a:	08 94       	sec
    565c:	e1 08       	sbc	r14, r1
    565e:	f1 08       	sbc	r15, r1
    5660:	e0 0e       	add	r14, r16
    5662:	f1 1e       	adc	r15, r17
    5664:	fa 82       	std	Y+2, r15	; 0x02
    5666:	e9 82       	std	Y+1, r14	; 0x01
task->Pbos = (void *) &stk_base[0];
    5668:	1c 83       	std	Y+4, r17	; 0x04
    566a:	0b 83       	std	Y+3, r16	; 0x03

}
    566c:	df 91       	pop	r29
    566e:	cf 91       	pop	r28
    5670:	1f 91       	pop	r17
    5672:	0f 91       	pop	r16
    5674:	ff 90       	pop	r15
    5676:	ef 90       	pop	r14
    5678:	08 95       	ret

0000567a <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    567a:	25 e5       	ldi	r18, 0x55	; 85
    567c:	fa 01       	movw	r30, r20
    567e:	20 83       	st	Z, r18
    stk    = (unsigned int *)ptos;          /* Load stack pointer */
    5680:	fb 01       	movw	r30, r22
    *(--stk) = 0x4748;   // G H                      
    *(--stk) = 0x4546;   // E F                    
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    5682:	32 97       	sbiw	r30, 0x02	; 2
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    5684:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    5686:	81 83       	std	Z+1, r24	; 0x01
	
    *(--stk) = 0;
    5688:	12 92       	st	-Z, r1
    568a:	12 92       	st	-Z, r1
    *(--stk) = 0;       
    568c:	12 92       	st	-Z, r1
    568e:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    5690:	12 92       	st	-Z, r1
    5692:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    5694:	12 92       	st	-Z, r1
    5696:	12 92       	st	-Z, r1
    *(--stk) = 0;                         
    5698:	12 92       	st	-Z, r1
    569a:	12 92       	st	-Z, r1
    *(--stk) = 0;                         
    569c:	12 92       	st	-Z, r1
    569e:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    56a0:	12 92       	st	-Z, r1
    56a2:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    56a4:	12 92       	st	-Z, r1
    56a6:	12 92       	st	-Z, r1

    *(--stk) = 0; 
    56a8:	12 92       	st	-Z, r1
    56aa:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    56ac:	12 92       	st	-Z, r1
    56ae:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    56b0:	12 92       	st	-Z, r1
    56b2:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    56b4:	12 92       	st	-Z, r1
    56b6:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    56b8:	12 92       	st	-Z, r1
    56ba:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    56bc:	12 92       	st	-Z, r1
    56be:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    56c0:	12 92       	st	-Z, r1
    56c2:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    56c4:	12 92       	st	-Z, r1
    56c6:	12 92       	st	-Z, r1
    *(--stk) = 0;
    56c8:	12 92       	st	-Z, r1
    56ca:	12 92       	st	-Z, r1


    return ((void *)stk);
}
    56cc:	cf 01       	movw	r24, r30
    56ce:	08 95       	ret

000056d0 <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    56d0:	85 e5       	ldi	r24, 0x55	; 85
    56d2:	80 93 7e 41 	sts	0x417E, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    56d6:	ee ef       	ldi	r30, 0xFE	; 254
    56d8:	f1 e4       	ldi	r31, 0x41	; 65
    56da:	f0 93 e6 05 	sts	0x05E6, r31
    56de:	e0 93 e5 05 	sts	0x05E5, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    56e2:	81 ea       	ldi	r24, 0xA1	; 161
    56e4:	96 e1       	ldi	r25, 0x16	; 22
    56e6:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    56e8:	80 93 ff 41 	sts	0x41FF, r24

}
    56ec:	08 95       	ret

000056ee <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    56ee:	81 ea       	ldi	r24, 0xA1	; 161
    56f0:	96 e1       	ldi	r25, 0x16	; 22
    56f2:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    56f6:	80 93 ff 41 	sts	0x41FF, r24
}
    56fa:	08 95       	ret

000056fc <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    56fc:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <_nrk_setup_timer>
  nrk_int_enable();  
    5700:	0e 94 db 14 	call	0x29b6	; 0x29b6 <nrk_int_enable>
	
}
    5704:	08 95       	ret

00005706 <nrk_start_high_ready_task>:

.global nrk_start_high_ready_task 

nrk_start_high_ready_task:

	lds r26,nrk_high_ready_TCB		
    5706:	a0 91 6a 07 	lds	r26, 0x076A
	lds r27,nrk_high_ready_TCB+1
    570a:	b0 91 6b 07 	lds	r27, 0x076B

    	;x points to &OSTCB[x]
    
	ld r28,x+
    570e:	cd 91       	ld	r28, X+
	out __SP_L__, r28
    5710:	cd bf       	out	0x3d, r28	; 61
	ld r29,x+
    5712:	dd 91       	ld	r29, X+
	out __SP_H__, r29
    5714:	de bf       	out	0x3e, r29	; 62
  
	pop r31	
    5716:	ff 91       	pop	r31
	pop r30
    5718:	ef 91       	pop	r30
	pop r29
    571a:	df 91       	pop	r29
	pop r28
    571c:	cf 91       	pop	r28
	pop r27
    571e:	bf 91       	pop	r27
	pop r26
    5720:	af 91       	pop	r26
	pop r25
    5722:	9f 91       	pop	r25
	pop r24			
    5724:	8f 91       	pop	r24
	pop r23
    5726:	7f 91       	pop	r23
	pop r22
    5728:	6f 91       	pop	r22
	pop r21
    572a:	5f 91       	pop	r21
	pop r20	
    572c:	4f 91       	pop	r20
	pop r19
    572e:	3f 91       	pop	r19
	pop r18	
    5730:	2f 91       	pop	r18
	pop r17
    5732:	1f 91       	pop	r17
	pop r16
    5734:	0f 91       	pop	r16
	pop r15
    5736:	ff 90       	pop	r15
	pop r14
    5738:	ef 90       	pop	r14
	pop r13
    573a:	df 90       	pop	r13
	pop r12
    573c:	cf 90       	pop	r12
	pop r11
    573e:	bf 90       	pop	r11
	pop r10
    5740:	af 90       	pop	r10
	pop r9
    5742:	9f 90       	pop	r9
	pop r8
    5744:	8f 90       	pop	r8
	pop r7
    5746:	7f 90       	pop	r7
	pop r6
    5748:	6f 90       	pop	r6
	pop r5
    574a:	5f 90       	pop	r5
	pop r4
    574c:	4f 90       	pop	r4
	pop r3
    574e:	3f 90       	pop	r3
	pop r2
    5750:	2f 90       	pop	r2
	pop r1
    5752:	1f 90       	pop	r1
	pop r0
    5754:	0f 90       	pop	r0
	out __SREG__, r0
    5756:	0f be       	out	0x3f, r0	; 63
	pop r0	
    5758:	0f 90       	pop	r0
	   
    	reti 
    575a:	18 95       	reti

0000575c <__udivdi3>:
    575c:	a8 e3       	ldi	r26, 0x38	; 56
    575e:	b0 e0       	ldi	r27, 0x00	; 0
    5760:	e4 eb       	ldi	r30, 0xB4	; 180
    5762:	fb e2       	ldi	r31, 0x2B	; 43
    5764:	0c 94 b6 33 	jmp	0x676c	; 0x676c <__prologue_saves__>
    5768:	29 83       	std	Y+1, r18	; 0x01
    576a:	3a 83       	std	Y+2, r19	; 0x02
    576c:	4b 83       	std	Y+3, r20	; 0x03
    576e:	5c 83       	std	Y+4, r21	; 0x04
    5770:	6d 83       	std	Y+5, r22	; 0x05
    5772:	7e 83       	std	Y+6, r23	; 0x06
    5774:	8f 83       	std	Y+7, r24	; 0x07
    5776:	98 87       	std	Y+8, r25	; 0x08
    5778:	a9 86       	std	Y+9, r10	; 0x09
    577a:	ba 86       	std	Y+10, r11	; 0x0a
    577c:	cb 86       	std	Y+11, r12	; 0x0b
    577e:	dc 86       	std	Y+12, r13	; 0x0c
    5780:	ed 86       	std	Y+13, r14	; 0x0d
    5782:	fe 86       	std	Y+14, r15	; 0x0e
    5784:	0f 87       	std	Y+15, r16	; 0x0f
    5786:	18 8b       	std	Y+16, r17	; 0x10
    5788:	e9 84       	ldd	r14, Y+9	; 0x09
    578a:	fa 84       	ldd	r15, Y+10	; 0x0a
    578c:	0b 85       	ldd	r16, Y+11	; 0x0b
    578e:	1c 85       	ldd	r17, Y+12	; 0x0c
    5790:	2d 85       	ldd	r18, Y+13	; 0x0d
    5792:	3e 85       	ldd	r19, Y+14	; 0x0e
    5794:	4f 85       	ldd	r20, Y+15	; 0x0f
    5796:	58 89       	ldd	r21, Y+16	; 0x10
    5798:	29 80       	ldd	r2, Y+1	; 0x01
    579a:	3a 80       	ldd	r3, Y+2	; 0x02
    579c:	4b 80       	ldd	r4, Y+3	; 0x03
    579e:	5c 80       	ldd	r5, Y+4	; 0x04
    57a0:	2d a2       	std	Y+37, r2	; 0x25
    57a2:	3e a2       	std	Y+38, r3	; 0x26
    57a4:	4f a2       	std	Y+39, r4	; 0x27
    57a6:	58 a6       	std	Y+40, r5	; 0x28
    57a8:	ad 80       	ldd	r10, Y+5	; 0x05
    57aa:	be 80       	ldd	r11, Y+6	; 0x06
    57ac:	cf 80       	ldd	r12, Y+7	; 0x07
    57ae:	d8 84       	ldd	r13, Y+8	; 0x08
    57b0:	21 15       	cp	r18, r1
    57b2:	31 05       	cpc	r19, r1
    57b4:	41 05       	cpc	r20, r1
    57b6:	51 05       	cpc	r21, r1
    57b8:	09 f0       	breq	.+2      	; 0x57bc <__udivdi3+0x60>
    57ba:	be c3       	rjmp	.+1916   	; 0x5f38 <__udivdi3+0x7dc>
    57bc:	ae 14       	cp	r10, r14
    57be:	bf 04       	cpc	r11, r15
    57c0:	c0 06       	cpc	r12, r16
    57c2:	d1 06       	cpc	r13, r17
    57c4:	08 f0       	brcs	.+2      	; 0x57c8 <__udivdi3+0x6c>
    57c6:	4f c1       	rjmp	.+670    	; 0x5a66 <__udivdi3+0x30a>
    57c8:	20 e0       	ldi	r18, 0x00	; 0
    57ca:	e2 16       	cp	r14, r18
    57cc:	20 e0       	ldi	r18, 0x00	; 0
    57ce:	f2 06       	cpc	r15, r18
    57d0:	21 e0       	ldi	r18, 0x01	; 1
    57d2:	02 07       	cpc	r16, r18
    57d4:	20 e0       	ldi	r18, 0x00	; 0
    57d6:	12 07       	cpc	r17, r18
    57d8:	58 f4       	brcc	.+22     	; 0x57f0 <__udivdi3+0x94>
    57da:	3f ef       	ldi	r19, 0xFF	; 255
    57dc:	e3 16       	cp	r14, r19
    57de:	f1 04       	cpc	r15, r1
    57e0:	01 05       	cpc	r16, r1
    57e2:	11 05       	cpc	r17, r1
    57e4:	09 f0       	breq	.+2      	; 0x57e8 <__udivdi3+0x8c>
    57e6:	90 f4       	brcc	.+36     	; 0x580c <__udivdi3+0xb0>
    57e8:	20 e0       	ldi	r18, 0x00	; 0
    57ea:	30 e0       	ldi	r19, 0x00	; 0
    57ec:	a9 01       	movw	r20, r18
    57ee:	17 c0       	rjmp	.+46     	; 0x581e <__udivdi3+0xc2>
    57f0:	40 e0       	ldi	r20, 0x00	; 0
    57f2:	e4 16       	cp	r14, r20
    57f4:	40 e0       	ldi	r20, 0x00	; 0
    57f6:	f4 06       	cpc	r15, r20
    57f8:	40 e0       	ldi	r20, 0x00	; 0
    57fa:	04 07       	cpc	r16, r20
    57fc:	41 e0       	ldi	r20, 0x01	; 1
    57fe:	14 07       	cpc	r17, r20
    5800:	50 f4       	brcc	.+20     	; 0x5816 <__udivdi3+0xba>
    5802:	20 e1       	ldi	r18, 0x10	; 16
    5804:	30 e0       	ldi	r19, 0x00	; 0
    5806:	40 e0       	ldi	r20, 0x00	; 0
    5808:	50 e0       	ldi	r21, 0x00	; 0
    580a:	09 c0       	rjmp	.+18     	; 0x581e <__udivdi3+0xc2>
    580c:	28 e0       	ldi	r18, 0x08	; 8
    580e:	30 e0       	ldi	r19, 0x00	; 0
    5810:	40 e0       	ldi	r20, 0x00	; 0
    5812:	50 e0       	ldi	r21, 0x00	; 0
    5814:	04 c0       	rjmp	.+8      	; 0x581e <__udivdi3+0xc2>
    5816:	28 e1       	ldi	r18, 0x18	; 24
    5818:	30 e0       	ldi	r19, 0x00	; 0
    581a:	40 e0       	ldi	r20, 0x00	; 0
    581c:	50 e0       	ldi	r21, 0x00	; 0
    581e:	d8 01       	movw	r26, r16
    5820:	c7 01       	movw	r24, r14
    5822:	02 2e       	mov	r0, r18
    5824:	04 c0       	rjmp	.+8      	; 0x582e <__udivdi3+0xd2>
    5826:	b6 95       	lsr	r27
    5828:	a7 95       	ror	r26
    582a:	97 95       	ror	r25
    582c:	87 95       	ror	r24
    582e:	0a 94       	dec	r0
    5830:	d2 f7       	brpl	.-12     	; 0x5826 <__udivdi3+0xca>
    5832:	81 5d       	subi	r24, 0xD1	; 209
    5834:	9b 4f       	sbci	r25, 0xFB	; 251
    5836:	dc 01       	movw	r26, r24
    5838:	6c 91       	ld	r22, X
    583a:	80 e2       	ldi	r24, 0x20	; 32
    583c:	90 e0       	ldi	r25, 0x00	; 0
    583e:	a0 e0       	ldi	r26, 0x00	; 0
    5840:	b0 e0       	ldi	r27, 0x00	; 0
    5842:	82 1b       	sub	r24, r18
    5844:	93 0b       	sbc	r25, r19
    5846:	a4 0b       	sbc	r26, r20
    5848:	b5 0b       	sbc	r27, r21
    584a:	86 1b       	sub	r24, r22
    584c:	91 09       	sbc	r25, r1
    584e:	a1 09       	sbc	r26, r1
    5850:	b1 09       	sbc	r27, r1
    5852:	00 97       	sbiw	r24, 0x00	; 0
    5854:	a1 05       	cpc	r26, r1
    5856:	b1 05       	cpc	r27, r1
    5858:	a1 f1       	breq	.+104    	; 0x58c2 <__udivdi3+0x166>
    585a:	08 2e       	mov	r0, r24
    585c:	04 c0       	rjmp	.+8      	; 0x5866 <__udivdi3+0x10a>
    585e:	ee 0c       	add	r14, r14
    5860:	ff 1c       	adc	r15, r15
    5862:	00 1f       	adc	r16, r16
    5864:	11 1f       	adc	r17, r17
    5866:	0a 94       	dec	r0
    5868:	d2 f7       	brpl	.-12     	; 0x585e <__udivdi3+0x102>
    586a:	a6 01       	movw	r20, r12
    586c:	95 01       	movw	r18, r10
    586e:	08 2e       	mov	r0, r24
    5870:	04 c0       	rjmp	.+8      	; 0x587a <__udivdi3+0x11e>
    5872:	22 0f       	add	r18, r18
    5874:	33 1f       	adc	r19, r19
    5876:	44 1f       	adc	r20, r20
    5878:	55 1f       	adc	r21, r21
    587a:	0a 94       	dec	r0
    587c:	d2 f7       	brpl	.-12     	; 0x5872 <__udivdi3+0x116>
    587e:	60 e2       	ldi	r22, 0x20	; 32
    5880:	70 e0       	ldi	r23, 0x00	; 0
    5882:	68 1b       	sub	r22, r24
    5884:	79 0b       	sbc	r23, r25
    5886:	ad a0       	ldd	r10, Y+37	; 0x25
    5888:	be a0       	ldd	r11, Y+38	; 0x26
    588a:	cf a0       	ldd	r12, Y+39	; 0x27
    588c:	d8 a4       	ldd	r13, Y+40	; 0x28
    588e:	04 c0       	rjmp	.+8      	; 0x5898 <__udivdi3+0x13c>
    5890:	d6 94       	lsr	r13
    5892:	c7 94       	ror	r12
    5894:	b7 94       	ror	r11
    5896:	a7 94       	ror	r10
    5898:	6a 95       	dec	r22
    589a:	d2 f7       	brpl	.-12     	; 0x5890 <__udivdi3+0x134>
    589c:	a2 2a       	or	r10, r18
    589e:	b3 2a       	or	r11, r19
    58a0:	c4 2a       	or	r12, r20
    58a2:	d5 2a       	or	r13, r21
    58a4:	2d a0       	ldd	r2, Y+37	; 0x25
    58a6:	3e a0       	ldd	r3, Y+38	; 0x26
    58a8:	4f a0       	ldd	r4, Y+39	; 0x27
    58aa:	58 a4       	ldd	r5, Y+40	; 0x28
    58ac:	04 c0       	rjmp	.+8      	; 0x58b6 <__udivdi3+0x15a>
    58ae:	22 0c       	add	r2, r2
    58b0:	33 1c       	adc	r3, r3
    58b2:	44 1c       	adc	r4, r4
    58b4:	55 1c       	adc	r5, r5
    58b6:	8a 95       	dec	r24
    58b8:	d2 f7       	brpl	.-12     	; 0x58ae <__udivdi3+0x152>
    58ba:	2d a2       	std	Y+37, r2	; 0x25
    58bc:	3e a2       	std	Y+38, r3	; 0x26
    58be:	4f a2       	std	Y+39, r4	; 0x27
    58c0:	58 a6       	std	Y+40, r5	; 0x28
    58c2:	38 01       	movw	r6, r16
    58c4:	88 24       	eor	r8, r8
    58c6:	99 24       	eor	r9, r9
    58c8:	a8 01       	movw	r20, r16
    58ca:	97 01       	movw	r18, r14
    58cc:	40 70       	andi	r20, 0x00	; 0
    58ce:	50 70       	andi	r21, 0x00	; 0
    58d0:	2d 8f       	std	Y+29, r18	; 0x1d
    58d2:	3e 8f       	std	Y+30, r19	; 0x1e
    58d4:	4f 8f       	std	Y+31, r20	; 0x1f
    58d6:	58 a3       	std	Y+32, r21	; 0x20
    58d8:	c6 01       	movw	r24, r12
    58da:	b5 01       	movw	r22, r10
    58dc:	a4 01       	movw	r20, r8
    58de:	93 01       	movw	r18, r6
    58e0:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__udivmodsi4>
    58e4:	22 2e       	mov	r2, r18
    58e6:	53 2e       	mov	r5, r19
    58e8:	44 2e       	mov	r4, r20
    58ea:	35 2e       	mov	r3, r21
    58ec:	69 a3       	std	Y+33, r22	; 0x21
    58ee:	7a a3       	std	Y+34, r23	; 0x22
    58f0:	8b a3       	std	Y+35, r24	; 0x23
    58f2:	9c a3       	std	Y+36, r25	; 0x24
    58f4:	c6 01       	movw	r24, r12
    58f6:	b5 01       	movw	r22, r10
    58f8:	a4 01       	movw	r20, r8
    58fa:	93 01       	movw	r18, r6
    58fc:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__udivmodsi4>
    5900:	82 2d       	mov	r24, r2
    5902:	95 2d       	mov	r25, r5
    5904:	a4 2d       	mov	r26, r4
    5906:	b3 2d       	mov	r27, r3
    5908:	89 8f       	std	Y+25, r24	; 0x19
    590a:	9a 8f       	std	Y+26, r25	; 0x1a
    590c:	ab 8f       	std	Y+27, r26	; 0x1b
    590e:	bc 8f       	std	Y+28, r27	; 0x1c
    5910:	bc 01       	movw	r22, r24
    5912:	cd 01       	movw	r24, r26
    5914:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5916:	3e 8d       	ldd	r19, Y+30	; 0x1e
    5918:	4f 8d       	ldd	r20, Y+31	; 0x1f
    591a:	58 a1       	ldd	r21, Y+32	; 0x20
    591c:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__mulsi3>
    5920:	5b 01       	movw	r10, r22
    5922:	6c 01       	movw	r12, r24
    5924:	49 a1       	ldd	r20, Y+33	; 0x21
    5926:	5a a1       	ldd	r21, Y+34	; 0x22
    5928:	6b a1       	ldd	r22, Y+35	; 0x23
    592a:	7c a1       	ldd	r23, Y+36	; 0x24
    592c:	da 01       	movw	r26, r20
    592e:	99 27       	eor	r25, r25
    5930:	88 27       	eor	r24, r24
    5932:	2d a0       	ldd	r2, Y+37	; 0x25
    5934:	3e a0       	ldd	r3, Y+38	; 0x26
    5936:	4f a0       	ldd	r4, Y+39	; 0x27
    5938:	58 a4       	ldd	r5, Y+40	; 0x28
    593a:	92 01       	movw	r18, r4
    593c:	44 27       	eor	r20, r20
    593e:	55 27       	eor	r21, r21
    5940:	82 2b       	or	r24, r18
    5942:	93 2b       	or	r25, r19
    5944:	a4 2b       	or	r26, r20
    5946:	b5 2b       	or	r27, r21
    5948:	8a 15       	cp	r24, r10
    594a:	9b 05       	cpc	r25, r11
    594c:	ac 05       	cpc	r26, r12
    594e:	bd 05       	cpc	r27, r13
    5950:	30 f5       	brcc	.+76     	; 0x599e <__udivdi3+0x242>
    5952:	29 8d       	ldd	r18, Y+25	; 0x19
    5954:	3a 8d       	ldd	r19, Y+26	; 0x1a
    5956:	4b 8d       	ldd	r20, Y+27	; 0x1b
    5958:	5c 8d       	ldd	r21, Y+28	; 0x1c
    595a:	21 50       	subi	r18, 0x01	; 1
    595c:	30 40       	sbci	r19, 0x00	; 0
    595e:	40 40       	sbci	r20, 0x00	; 0
    5960:	50 40       	sbci	r21, 0x00	; 0
    5962:	29 8f       	std	Y+25, r18	; 0x19
    5964:	3a 8f       	std	Y+26, r19	; 0x1a
    5966:	4b 8f       	std	Y+27, r20	; 0x1b
    5968:	5c 8f       	std	Y+28, r21	; 0x1c
    596a:	8e 0d       	add	r24, r14
    596c:	9f 1d       	adc	r25, r15
    596e:	a0 1f       	adc	r26, r16
    5970:	b1 1f       	adc	r27, r17
    5972:	8e 15       	cp	r24, r14
    5974:	9f 05       	cpc	r25, r15
    5976:	a0 07       	cpc	r26, r16
    5978:	b1 07       	cpc	r27, r17
    597a:	88 f0       	brcs	.+34     	; 0x599e <__udivdi3+0x242>
    597c:	8a 15       	cp	r24, r10
    597e:	9b 05       	cpc	r25, r11
    5980:	ac 05       	cpc	r26, r12
    5982:	bd 05       	cpc	r27, r13
    5984:	60 f4       	brcc	.+24     	; 0x599e <__udivdi3+0x242>
    5986:	21 50       	subi	r18, 0x01	; 1
    5988:	30 40       	sbci	r19, 0x00	; 0
    598a:	40 40       	sbci	r20, 0x00	; 0
    598c:	50 40       	sbci	r21, 0x00	; 0
    598e:	29 8f       	std	Y+25, r18	; 0x19
    5990:	3a 8f       	std	Y+26, r19	; 0x1a
    5992:	4b 8f       	std	Y+27, r20	; 0x1b
    5994:	5c 8f       	std	Y+28, r21	; 0x1c
    5996:	8e 0d       	add	r24, r14
    5998:	9f 1d       	adc	r25, r15
    599a:	a0 1f       	adc	r26, r16
    599c:	b1 1f       	adc	r27, r17
    599e:	ac 01       	movw	r20, r24
    59a0:	bd 01       	movw	r22, r26
    59a2:	4a 19       	sub	r20, r10
    59a4:	5b 09       	sbc	r21, r11
    59a6:	6c 09       	sbc	r22, r12
    59a8:	7d 09       	sbc	r23, r13
    59aa:	5a 01       	movw	r10, r20
    59ac:	6b 01       	movw	r12, r22
    59ae:	cb 01       	movw	r24, r22
    59b0:	ba 01       	movw	r22, r20
    59b2:	a4 01       	movw	r20, r8
    59b4:	93 01       	movw	r18, r6
    59b6:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__udivmodsi4>
    59ba:	22 2e       	mov	r2, r18
    59bc:	53 2e       	mov	r5, r19
    59be:	44 2e       	mov	r4, r20
    59c0:	35 2e       	mov	r3, r21
    59c2:	69 a3       	std	Y+33, r22	; 0x21
    59c4:	7a a3       	std	Y+34, r23	; 0x22
    59c6:	8b a3       	std	Y+35, r24	; 0x23
    59c8:	9c a3       	std	Y+36, r25	; 0x24
    59ca:	c6 01       	movw	r24, r12
    59cc:	b5 01       	movw	r22, r10
    59ce:	a4 01       	movw	r20, r8
    59d0:	93 01       	movw	r18, r6
    59d2:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__udivmodsi4>
    59d6:	a2 2c       	mov	r10, r2
    59d8:	b5 2c       	mov	r11, r5
    59da:	c4 2c       	mov	r12, r4
    59dc:	d3 2c       	mov	r13, r3
    59de:	c6 01       	movw	r24, r12
    59e0:	b5 01       	movw	r22, r10
    59e2:	2d 8d       	ldd	r18, Y+29	; 0x1d
    59e4:	3e 8d       	ldd	r19, Y+30	; 0x1e
    59e6:	4f 8d       	ldd	r20, Y+31	; 0x1f
    59e8:	58 a1       	ldd	r21, Y+32	; 0x20
    59ea:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__mulsi3>
    59ee:	3b 01       	movw	r6, r22
    59f0:	4c 01       	movw	r8, r24
    59f2:	69 a1       	ldd	r22, Y+33	; 0x21
    59f4:	7a a1       	ldd	r23, Y+34	; 0x22
    59f6:	8b a1       	ldd	r24, Y+35	; 0x23
    59f8:	9c a1       	ldd	r25, Y+36	; 0x24
    59fa:	ab 01       	movw	r20, r22
    59fc:	33 27       	eor	r19, r19
    59fe:	22 27       	eor	r18, r18
    5a00:	8d a1       	ldd	r24, Y+37	; 0x25
    5a02:	9e a1       	ldd	r25, Y+38	; 0x26
    5a04:	af a1       	ldd	r26, Y+39	; 0x27
    5a06:	b8 a5       	ldd	r27, Y+40	; 0x28
    5a08:	a0 70       	andi	r26, 0x00	; 0
    5a0a:	b0 70       	andi	r27, 0x00	; 0
    5a0c:	28 2b       	or	r18, r24
    5a0e:	39 2b       	or	r19, r25
    5a10:	4a 2b       	or	r20, r26
    5a12:	5b 2b       	or	r21, r27
    5a14:	26 15       	cp	r18, r6
    5a16:	37 05       	cpc	r19, r7
    5a18:	48 05       	cpc	r20, r8
    5a1a:	59 05       	cpc	r21, r9
    5a1c:	c0 f4       	brcc	.+48     	; 0x5a4e <__udivdi3+0x2f2>
    5a1e:	08 94       	sec
    5a20:	a1 08       	sbc	r10, r1
    5a22:	b1 08       	sbc	r11, r1
    5a24:	c1 08       	sbc	r12, r1
    5a26:	d1 08       	sbc	r13, r1
    5a28:	2e 0d       	add	r18, r14
    5a2a:	3f 1d       	adc	r19, r15
    5a2c:	40 1f       	adc	r20, r16
    5a2e:	51 1f       	adc	r21, r17
    5a30:	2e 15       	cp	r18, r14
    5a32:	3f 05       	cpc	r19, r15
    5a34:	40 07       	cpc	r20, r16
    5a36:	51 07       	cpc	r21, r17
    5a38:	50 f0       	brcs	.+20     	; 0x5a4e <__udivdi3+0x2f2>
    5a3a:	26 15       	cp	r18, r6
    5a3c:	37 05       	cpc	r19, r7
    5a3e:	48 05       	cpc	r20, r8
    5a40:	59 05       	cpc	r21, r9
    5a42:	28 f4       	brcc	.+10     	; 0x5a4e <__udivdi3+0x2f2>
    5a44:	08 94       	sec
    5a46:	a1 08       	sbc	r10, r1
    5a48:	b1 08       	sbc	r11, r1
    5a4a:	c1 08       	sbc	r12, r1
    5a4c:	d1 08       	sbc	r13, r1
    5a4e:	89 8d       	ldd	r24, Y+25	; 0x19
    5a50:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5a52:	ab 8d       	ldd	r26, Y+27	; 0x1b
    5a54:	bc 8d       	ldd	r27, Y+28	; 0x1c
    5a56:	8c 01       	movw	r16, r24
    5a58:	ff 24       	eor	r15, r15
    5a5a:	ee 24       	eor	r14, r14
    5a5c:	ea 28       	or	r14, r10
    5a5e:	fb 28       	or	r15, r11
    5a60:	0c 29       	or	r16, r12
    5a62:	1d 29       	or	r17, r13
    5a64:	b3 c4       	rjmp	.+2406   	; 0x63cc <__udivdi3+0xc70>
    5a66:	e1 14       	cp	r14, r1
    5a68:	f1 04       	cpc	r15, r1
    5a6a:	01 05       	cpc	r16, r1
    5a6c:	11 05       	cpc	r17, r1
    5a6e:	59 f4       	brne	.+22     	; 0x5a86 <__udivdi3+0x32a>
    5a70:	61 e0       	ldi	r22, 0x01	; 1
    5a72:	70 e0       	ldi	r23, 0x00	; 0
    5a74:	80 e0       	ldi	r24, 0x00	; 0
    5a76:	90 e0       	ldi	r25, 0x00	; 0
    5a78:	a8 01       	movw	r20, r16
    5a7a:	97 01       	movw	r18, r14
    5a7c:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__udivmodsi4>
    5a80:	79 01       	movw	r14, r18
    5a82:	8a 01       	movw	r16, r20
    5a84:	10 c0       	rjmp	.+32     	; 0x5aa6 <__udivdi3+0x34a>
    5a86:	90 e0       	ldi	r25, 0x00	; 0
    5a88:	e9 16       	cp	r14, r25
    5a8a:	90 e0       	ldi	r25, 0x00	; 0
    5a8c:	f9 06       	cpc	r15, r25
    5a8e:	91 e0       	ldi	r25, 0x01	; 1
    5a90:	09 07       	cpc	r16, r25
    5a92:	90 e0       	ldi	r25, 0x00	; 0
    5a94:	19 07       	cpc	r17, r25
    5a96:	58 f4       	brcc	.+22     	; 0x5aae <__udivdi3+0x352>
    5a98:	af ef       	ldi	r26, 0xFF	; 255
    5a9a:	ea 16       	cp	r14, r26
    5a9c:	f1 04       	cpc	r15, r1
    5a9e:	01 05       	cpc	r16, r1
    5aa0:	11 05       	cpc	r17, r1
    5aa2:	09 f0       	breq	.+2      	; 0x5aa6 <__udivdi3+0x34a>
    5aa4:	90 f4       	brcc	.+36     	; 0x5aca <__udivdi3+0x36e>
    5aa6:	20 e0       	ldi	r18, 0x00	; 0
    5aa8:	30 e0       	ldi	r19, 0x00	; 0
    5aaa:	a9 01       	movw	r20, r18
    5aac:	17 c0       	rjmp	.+46     	; 0x5adc <__udivdi3+0x380>
    5aae:	b0 e0       	ldi	r27, 0x00	; 0
    5ab0:	eb 16       	cp	r14, r27
    5ab2:	b0 e0       	ldi	r27, 0x00	; 0
    5ab4:	fb 06       	cpc	r15, r27
    5ab6:	b0 e0       	ldi	r27, 0x00	; 0
    5ab8:	0b 07       	cpc	r16, r27
    5aba:	b1 e0       	ldi	r27, 0x01	; 1
    5abc:	1b 07       	cpc	r17, r27
    5abe:	50 f4       	brcc	.+20     	; 0x5ad4 <__udivdi3+0x378>
    5ac0:	20 e1       	ldi	r18, 0x10	; 16
    5ac2:	30 e0       	ldi	r19, 0x00	; 0
    5ac4:	40 e0       	ldi	r20, 0x00	; 0
    5ac6:	50 e0       	ldi	r21, 0x00	; 0
    5ac8:	09 c0       	rjmp	.+18     	; 0x5adc <__udivdi3+0x380>
    5aca:	28 e0       	ldi	r18, 0x08	; 8
    5acc:	30 e0       	ldi	r19, 0x00	; 0
    5ace:	40 e0       	ldi	r20, 0x00	; 0
    5ad0:	50 e0       	ldi	r21, 0x00	; 0
    5ad2:	04 c0       	rjmp	.+8      	; 0x5adc <__udivdi3+0x380>
    5ad4:	28 e1       	ldi	r18, 0x18	; 24
    5ad6:	30 e0       	ldi	r19, 0x00	; 0
    5ad8:	40 e0       	ldi	r20, 0x00	; 0
    5ada:	50 e0       	ldi	r21, 0x00	; 0
    5adc:	d8 01       	movw	r26, r16
    5ade:	c7 01       	movw	r24, r14
    5ae0:	02 2e       	mov	r0, r18
    5ae2:	04 c0       	rjmp	.+8      	; 0x5aec <__udivdi3+0x390>
    5ae4:	b6 95       	lsr	r27
    5ae6:	a7 95       	ror	r26
    5ae8:	97 95       	ror	r25
    5aea:	87 95       	ror	r24
    5aec:	0a 94       	dec	r0
    5aee:	d2 f7       	brpl	.-12     	; 0x5ae4 <__udivdi3+0x388>
    5af0:	81 5d       	subi	r24, 0xD1	; 209
    5af2:	9b 4f       	sbci	r25, 0xFB	; 251
    5af4:	fc 01       	movw	r30, r24
    5af6:	80 81       	ld	r24, Z
    5af8:	28 0f       	add	r18, r24
    5afa:	31 1d       	adc	r19, r1
    5afc:	41 1d       	adc	r20, r1
    5afe:	51 1d       	adc	r21, r1
    5b00:	80 e2       	ldi	r24, 0x20	; 32
    5b02:	90 e0       	ldi	r25, 0x00	; 0
    5b04:	a0 e0       	ldi	r26, 0x00	; 0
    5b06:	b0 e0       	ldi	r27, 0x00	; 0
    5b08:	82 1b       	sub	r24, r18
    5b0a:	93 0b       	sbc	r25, r19
    5b0c:	a4 0b       	sbc	r26, r20
    5b0e:	b5 0b       	sbc	r27, r21
    5b10:	61 f4       	brne	.+24     	; 0x5b2a <__udivdi3+0x3ce>
    5b12:	15 01       	movw	r2, r10
    5b14:	26 01       	movw	r4, r12
    5b16:	2e 18       	sub	r2, r14
    5b18:	3f 08       	sbc	r3, r15
    5b1a:	40 0a       	sbc	r4, r16
    5b1c:	51 0a       	sbc	r5, r17
    5b1e:	81 e0       	ldi	r24, 0x01	; 1
    5b20:	a8 2e       	mov	r10, r24
    5b22:	b1 2c       	mov	r11, r1
    5b24:	c1 2c       	mov	r12, r1
    5b26:	d1 2c       	mov	r13, r1
    5b28:	29 c1       	rjmp	.+594    	; 0x5d7c <__udivdi3+0x620>
    5b2a:	08 2e       	mov	r0, r24
    5b2c:	04 c0       	rjmp	.+8      	; 0x5b36 <__udivdi3+0x3da>
    5b2e:	ee 0c       	add	r14, r14
    5b30:	ff 1c       	adc	r15, r15
    5b32:	00 1f       	adc	r16, r16
    5b34:	11 1f       	adc	r17, r17
    5b36:	0a 94       	dec	r0
    5b38:	d2 f7       	brpl	.-12     	; 0x5b2e <__udivdi3+0x3d2>
    5b3a:	15 01       	movw	r2, r10
    5b3c:	26 01       	movw	r4, r12
    5b3e:	02 2e       	mov	r0, r18
    5b40:	04 c0       	rjmp	.+8      	; 0x5b4a <__udivdi3+0x3ee>
    5b42:	56 94       	lsr	r5
    5b44:	47 94       	ror	r4
    5b46:	37 94       	ror	r3
    5b48:	27 94       	ror	r2
    5b4a:	0a 94       	dec	r0
    5b4c:	d2 f7       	brpl	.-12     	; 0x5b42 <__udivdi3+0x3e6>
    5b4e:	29 8e       	std	Y+25, r2	; 0x19
    5b50:	3a 8e       	std	Y+26, r3	; 0x1a
    5b52:	4b 8e       	std	Y+27, r4	; 0x1b
    5b54:	5c 8e       	std	Y+28, r5	; 0x1c
    5b56:	b6 01       	movw	r22, r12
    5b58:	a5 01       	movw	r20, r10
    5b5a:	08 2e       	mov	r0, r24
    5b5c:	04 c0       	rjmp	.+8      	; 0x5b66 <__udivdi3+0x40a>
    5b5e:	44 0f       	add	r20, r20
    5b60:	55 1f       	adc	r21, r21
    5b62:	66 1f       	adc	r22, r22
    5b64:	77 1f       	adc	r23, r23
    5b66:	0a 94       	dec	r0
    5b68:	d2 f7       	brpl	.-12     	; 0x5b5e <__udivdi3+0x402>
    5b6a:	4d 8f       	std	Y+29, r20	; 0x1d
    5b6c:	5e 8f       	std	Y+30, r21	; 0x1e
    5b6e:	6f 8f       	std	Y+31, r22	; 0x1f
    5b70:	78 a3       	std	Y+32, r23	; 0x20
    5b72:	2d a0       	ldd	r2, Y+37	; 0x25
    5b74:	3e a0       	ldd	r3, Y+38	; 0x26
    5b76:	4f a0       	ldd	r4, Y+39	; 0x27
    5b78:	58 a4       	ldd	r5, Y+40	; 0x28
    5b7a:	04 c0       	rjmp	.+8      	; 0x5b84 <__udivdi3+0x428>
    5b7c:	56 94       	lsr	r5
    5b7e:	47 94       	ror	r4
    5b80:	37 94       	ror	r3
    5b82:	27 94       	ror	r2
    5b84:	2a 95       	dec	r18
    5b86:	d2 f7       	brpl	.-12     	; 0x5b7c <__udivdi3+0x420>
    5b88:	ad 8c       	ldd	r10, Y+29	; 0x1d
    5b8a:	be 8c       	ldd	r11, Y+30	; 0x1e
    5b8c:	cf 8c       	ldd	r12, Y+31	; 0x1f
    5b8e:	d8 a0       	ldd	r13, Y+32	; 0x20
    5b90:	a2 28       	or	r10, r2
    5b92:	b3 28       	or	r11, r3
    5b94:	c4 28       	or	r12, r4
    5b96:	d5 28       	or	r13, r5
    5b98:	ad 8e       	std	Y+29, r10	; 0x1d
    5b9a:	be 8e       	std	Y+30, r11	; 0x1e
    5b9c:	cf 8e       	std	Y+31, r12	; 0x1f
    5b9e:	d8 a2       	std	Y+32, r13	; 0x20
    5ba0:	2d a1       	ldd	r18, Y+37	; 0x25
    5ba2:	3e a1       	ldd	r19, Y+38	; 0x26
    5ba4:	4f a1       	ldd	r20, Y+39	; 0x27
    5ba6:	58 a5       	ldd	r21, Y+40	; 0x28
    5ba8:	04 c0       	rjmp	.+8      	; 0x5bb2 <__udivdi3+0x456>
    5baa:	22 0f       	add	r18, r18
    5bac:	33 1f       	adc	r19, r19
    5bae:	44 1f       	adc	r20, r20
    5bb0:	55 1f       	adc	r21, r21
    5bb2:	8a 95       	dec	r24
    5bb4:	d2 f7       	brpl	.-12     	; 0x5baa <__udivdi3+0x44e>
    5bb6:	2d a3       	std	Y+37, r18	; 0x25
    5bb8:	3e a3       	std	Y+38, r19	; 0x26
    5bba:	4f a3       	std	Y+39, r20	; 0x27
    5bbc:	58 a7       	std	Y+40, r21	; 0x28
    5bbe:	38 01       	movw	r6, r16
    5bc0:	88 24       	eor	r8, r8
    5bc2:	99 24       	eor	r9, r9
    5bc4:	b8 01       	movw	r22, r16
    5bc6:	a7 01       	movw	r20, r14
    5bc8:	60 70       	andi	r22, 0x00	; 0
    5bca:	70 70       	andi	r23, 0x00	; 0
    5bcc:	49 a3       	std	Y+33, r20	; 0x21
    5bce:	5a a3       	std	Y+34, r21	; 0x22
    5bd0:	6b a3       	std	Y+35, r22	; 0x23
    5bd2:	7c a3       	std	Y+36, r23	; 0x24
    5bd4:	69 8d       	ldd	r22, Y+25	; 0x19
    5bd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5bd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5bda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5bdc:	a4 01       	movw	r20, r8
    5bde:	93 01       	movw	r18, r6
    5be0:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__udivmodsi4>
    5be4:	22 2e       	mov	r2, r18
    5be6:	53 2e       	mov	r5, r19
    5be8:	44 2e       	mov	r4, r20
    5bea:	35 2e       	mov	r3, r21
    5bec:	69 a7       	std	Y+41, r22	; 0x29
    5bee:	7a a7       	std	Y+42, r23	; 0x2a
    5bf0:	8b a7       	std	Y+43, r24	; 0x2b
    5bf2:	9c a7       	std	Y+44, r25	; 0x2c
    5bf4:	69 8d       	ldd	r22, Y+25	; 0x19
    5bf6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5bf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5bfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5bfc:	a4 01       	movw	r20, r8
    5bfe:	93 01       	movw	r18, r6
    5c00:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__udivmodsi4>
    5c04:	a2 2c       	mov	r10, r2
    5c06:	b5 2c       	mov	r11, r5
    5c08:	c4 2c       	mov	r12, r4
    5c0a:	d3 2c       	mov	r13, r3
    5c0c:	a9 8e       	std	Y+25, r10	; 0x19
    5c0e:	ba 8e       	std	Y+26, r11	; 0x1a
    5c10:	cb 8e       	std	Y+27, r12	; 0x1b
    5c12:	dc 8e       	std	Y+28, r13	; 0x1c
    5c14:	c6 01       	movw	r24, r12
    5c16:	b5 01       	movw	r22, r10
    5c18:	29 a1       	ldd	r18, Y+33	; 0x21
    5c1a:	3a a1       	ldd	r19, Y+34	; 0x22
    5c1c:	4b a1       	ldd	r20, Y+35	; 0x23
    5c1e:	5c a1       	ldd	r21, Y+36	; 0x24
    5c20:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__mulsi3>
    5c24:	5b 01       	movw	r10, r22
    5c26:	6c 01       	movw	r12, r24
    5c28:	29 a4       	ldd	r2, Y+41	; 0x29
    5c2a:	3a a4       	ldd	r3, Y+42	; 0x2a
    5c2c:	4b a4       	ldd	r4, Y+43	; 0x2b
    5c2e:	5c a4       	ldd	r5, Y+44	; 0x2c
    5c30:	d1 01       	movw	r26, r2
    5c32:	99 27       	eor	r25, r25
    5c34:	88 27       	eor	r24, r24
    5c36:	2d 8c       	ldd	r2, Y+29	; 0x1d
    5c38:	3e 8c       	ldd	r3, Y+30	; 0x1e
    5c3a:	4f 8c       	ldd	r4, Y+31	; 0x1f
    5c3c:	58 a0       	ldd	r5, Y+32	; 0x20
    5c3e:	92 01       	movw	r18, r4
    5c40:	44 27       	eor	r20, r20
    5c42:	55 27       	eor	r21, r21
    5c44:	82 2b       	or	r24, r18
    5c46:	93 2b       	or	r25, r19
    5c48:	a4 2b       	or	r26, r20
    5c4a:	b5 2b       	or	r27, r21
    5c4c:	8a 15       	cp	r24, r10
    5c4e:	9b 05       	cpc	r25, r11
    5c50:	ac 05       	cpc	r26, r12
    5c52:	bd 05       	cpc	r27, r13
    5c54:	30 f5       	brcc	.+76     	; 0x5ca2 <__udivdi3+0x546>
    5c56:	29 8d       	ldd	r18, Y+25	; 0x19
    5c58:	3a 8d       	ldd	r19, Y+26	; 0x1a
    5c5a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    5c5c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    5c5e:	21 50       	subi	r18, 0x01	; 1
    5c60:	30 40       	sbci	r19, 0x00	; 0
    5c62:	40 40       	sbci	r20, 0x00	; 0
    5c64:	50 40       	sbci	r21, 0x00	; 0
    5c66:	29 8f       	std	Y+25, r18	; 0x19
    5c68:	3a 8f       	std	Y+26, r19	; 0x1a
    5c6a:	4b 8f       	std	Y+27, r20	; 0x1b
    5c6c:	5c 8f       	std	Y+28, r21	; 0x1c
    5c6e:	8e 0d       	add	r24, r14
    5c70:	9f 1d       	adc	r25, r15
    5c72:	a0 1f       	adc	r26, r16
    5c74:	b1 1f       	adc	r27, r17
    5c76:	8e 15       	cp	r24, r14
    5c78:	9f 05       	cpc	r25, r15
    5c7a:	a0 07       	cpc	r26, r16
    5c7c:	b1 07       	cpc	r27, r17
    5c7e:	88 f0       	brcs	.+34     	; 0x5ca2 <__udivdi3+0x546>
    5c80:	8a 15       	cp	r24, r10
    5c82:	9b 05       	cpc	r25, r11
    5c84:	ac 05       	cpc	r26, r12
    5c86:	bd 05       	cpc	r27, r13
    5c88:	60 f4       	brcc	.+24     	; 0x5ca2 <__udivdi3+0x546>
    5c8a:	21 50       	subi	r18, 0x01	; 1
    5c8c:	30 40       	sbci	r19, 0x00	; 0
    5c8e:	40 40       	sbci	r20, 0x00	; 0
    5c90:	50 40       	sbci	r21, 0x00	; 0
    5c92:	29 8f       	std	Y+25, r18	; 0x19
    5c94:	3a 8f       	std	Y+26, r19	; 0x1a
    5c96:	4b 8f       	std	Y+27, r20	; 0x1b
    5c98:	5c 8f       	std	Y+28, r21	; 0x1c
    5c9a:	8e 0d       	add	r24, r14
    5c9c:	9f 1d       	adc	r25, r15
    5c9e:	a0 1f       	adc	r26, r16
    5ca0:	b1 1f       	adc	r27, r17
    5ca2:	ac 01       	movw	r20, r24
    5ca4:	bd 01       	movw	r22, r26
    5ca6:	4a 19       	sub	r20, r10
    5ca8:	5b 09       	sbc	r21, r11
    5caa:	6c 09       	sbc	r22, r12
    5cac:	7d 09       	sbc	r23, r13
    5cae:	5a 01       	movw	r10, r20
    5cb0:	6b 01       	movw	r12, r22
    5cb2:	cb 01       	movw	r24, r22
    5cb4:	ba 01       	movw	r22, r20
    5cb6:	a4 01       	movw	r20, r8
    5cb8:	93 01       	movw	r18, r6
    5cba:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__udivmodsi4>
    5cbe:	22 2e       	mov	r2, r18
    5cc0:	53 2e       	mov	r5, r19
    5cc2:	44 2e       	mov	r4, r20
    5cc4:	35 2e       	mov	r3, r21
    5cc6:	69 a7       	std	Y+41, r22	; 0x29
    5cc8:	7a a7       	std	Y+42, r23	; 0x2a
    5cca:	8b a7       	std	Y+43, r24	; 0x2b
    5ccc:	9c a7       	std	Y+44, r25	; 0x2c
    5cce:	c6 01       	movw	r24, r12
    5cd0:	b5 01       	movw	r22, r10
    5cd2:	a4 01       	movw	r20, r8
    5cd4:	93 01       	movw	r18, r6
    5cd6:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__udivmodsi4>
    5cda:	62 2c       	mov	r6, r2
    5cdc:	75 2c       	mov	r7, r5
    5cde:	84 2c       	mov	r8, r4
    5ce0:	93 2c       	mov	r9, r3
    5ce2:	c4 01       	movw	r24, r8
    5ce4:	b3 01       	movw	r22, r6
    5ce6:	29 a1       	ldd	r18, Y+33	; 0x21
    5ce8:	3a a1       	ldd	r19, Y+34	; 0x22
    5cea:	4b a1       	ldd	r20, Y+35	; 0x23
    5cec:	5c a1       	ldd	r21, Y+36	; 0x24
    5cee:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__mulsi3>
    5cf2:	9b 01       	movw	r18, r22
    5cf4:	ac 01       	movw	r20, r24
    5cf6:	69 a5       	ldd	r22, Y+41	; 0x29
    5cf8:	7a a5       	ldd	r23, Y+42	; 0x2a
    5cfa:	8b a5       	ldd	r24, Y+43	; 0x2b
    5cfc:	9c a5       	ldd	r25, Y+44	; 0x2c
    5cfe:	6b 01       	movw	r12, r22
    5d00:	bb 24       	eor	r11, r11
    5d02:	aa 24       	eor	r10, r10
    5d04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5d06:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5d08:	af 8d       	ldd	r26, Y+31	; 0x1f
    5d0a:	b8 a1       	ldd	r27, Y+32	; 0x20
    5d0c:	a0 70       	andi	r26, 0x00	; 0
    5d0e:	b0 70       	andi	r27, 0x00	; 0
    5d10:	a8 2a       	or	r10, r24
    5d12:	b9 2a       	or	r11, r25
    5d14:	ca 2a       	or	r12, r26
    5d16:	db 2a       	or	r13, r27
    5d18:	a2 16       	cp	r10, r18
    5d1a:	b3 06       	cpc	r11, r19
    5d1c:	c4 06       	cpc	r12, r20
    5d1e:	d5 06       	cpc	r13, r21
    5d20:	e0 f4       	brcc	.+56     	; 0x5d5a <__udivdi3+0x5fe>
    5d22:	08 94       	sec
    5d24:	61 08       	sbc	r6, r1
    5d26:	71 08       	sbc	r7, r1
    5d28:	81 08       	sbc	r8, r1
    5d2a:	91 08       	sbc	r9, r1
    5d2c:	ae 0c       	add	r10, r14
    5d2e:	bf 1c       	adc	r11, r15
    5d30:	c0 1e       	adc	r12, r16
    5d32:	d1 1e       	adc	r13, r17
    5d34:	ae 14       	cp	r10, r14
    5d36:	bf 04       	cpc	r11, r15
    5d38:	c0 06       	cpc	r12, r16
    5d3a:	d1 06       	cpc	r13, r17
    5d3c:	70 f0       	brcs	.+28     	; 0x5d5a <__udivdi3+0x5fe>
    5d3e:	a2 16       	cp	r10, r18
    5d40:	b3 06       	cpc	r11, r19
    5d42:	c4 06       	cpc	r12, r20
    5d44:	d5 06       	cpc	r13, r21
    5d46:	48 f4       	brcc	.+18     	; 0x5d5a <__udivdi3+0x5fe>
    5d48:	08 94       	sec
    5d4a:	61 08       	sbc	r6, r1
    5d4c:	71 08       	sbc	r7, r1
    5d4e:	81 08       	sbc	r8, r1
    5d50:	91 08       	sbc	r9, r1
    5d52:	ae 0c       	add	r10, r14
    5d54:	bf 1c       	adc	r11, r15
    5d56:	c0 1e       	adc	r12, r16
    5d58:	d1 1e       	adc	r13, r17
    5d5a:	15 01       	movw	r2, r10
    5d5c:	26 01       	movw	r4, r12
    5d5e:	22 1a       	sub	r2, r18
    5d60:	33 0a       	sbc	r3, r19
    5d62:	44 0a       	sbc	r4, r20
    5d64:	55 0a       	sbc	r5, r21
    5d66:	89 8d       	ldd	r24, Y+25	; 0x19
    5d68:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5d6a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    5d6c:	bc 8d       	ldd	r27, Y+28	; 0x1c
    5d6e:	6c 01       	movw	r12, r24
    5d70:	bb 24       	eor	r11, r11
    5d72:	aa 24       	eor	r10, r10
    5d74:	a6 28       	or	r10, r6
    5d76:	b7 28       	or	r11, r7
    5d78:	c8 28       	or	r12, r8
    5d7a:	d9 28       	or	r13, r9
    5d7c:	98 01       	movw	r18, r16
    5d7e:	44 27       	eor	r20, r20
    5d80:	55 27       	eor	r21, r21
    5d82:	2d 8f       	std	Y+29, r18	; 0x1d
    5d84:	3e 8f       	std	Y+30, r19	; 0x1e
    5d86:	4f 8f       	std	Y+31, r20	; 0x1f
    5d88:	58 a3       	std	Y+32, r21	; 0x20
    5d8a:	b8 01       	movw	r22, r16
    5d8c:	a7 01       	movw	r20, r14
    5d8e:	60 70       	andi	r22, 0x00	; 0
    5d90:	70 70       	andi	r23, 0x00	; 0
    5d92:	49 a3       	std	Y+33, r20	; 0x21
    5d94:	5a a3       	std	Y+34, r21	; 0x22
    5d96:	6b a3       	std	Y+35, r22	; 0x23
    5d98:	7c a3       	std	Y+36, r23	; 0x24
    5d9a:	c2 01       	movw	r24, r4
    5d9c:	b1 01       	movw	r22, r2
    5d9e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5da0:	3e 8d       	ldd	r19, Y+30	; 0x1e
    5da2:	4f 8d       	ldd	r20, Y+31	; 0x1f
    5da4:	58 a1       	ldd	r21, Y+32	; 0x20
    5da6:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__udivmodsi4>
    5daa:	62 2e       	mov	r6, r18
    5dac:	93 2e       	mov	r9, r19
    5dae:	84 2e       	mov	r8, r20
    5db0:	75 2e       	mov	r7, r21
    5db2:	69 a7       	std	Y+41, r22	; 0x29
    5db4:	7a a7       	std	Y+42, r23	; 0x2a
    5db6:	8b a7       	std	Y+43, r24	; 0x2b
    5db8:	9c a7       	std	Y+44, r25	; 0x2c
    5dba:	c2 01       	movw	r24, r4
    5dbc:	b1 01       	movw	r22, r2
    5dbe:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5dc0:	3e 8d       	ldd	r19, Y+30	; 0x1e
    5dc2:	4f 8d       	ldd	r20, Y+31	; 0x1f
    5dc4:	58 a1       	ldd	r21, Y+32	; 0x20
    5dc6:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__udivmodsi4>
    5dca:	86 2d       	mov	r24, r6
    5dcc:	99 2d       	mov	r25, r9
    5dce:	a8 2d       	mov	r26, r8
    5dd0:	b7 2d       	mov	r27, r7
    5dd2:	89 8f       	std	Y+25, r24	; 0x19
    5dd4:	9a 8f       	std	Y+26, r25	; 0x1a
    5dd6:	ab 8f       	std	Y+27, r26	; 0x1b
    5dd8:	bc 8f       	std	Y+28, r27	; 0x1c
    5dda:	bc 01       	movw	r22, r24
    5ddc:	cd 01       	movw	r24, r26
    5dde:	29 a1       	ldd	r18, Y+33	; 0x21
    5de0:	3a a1       	ldd	r19, Y+34	; 0x22
    5de2:	4b a1       	ldd	r20, Y+35	; 0x23
    5de4:	5c a1       	ldd	r21, Y+36	; 0x24
    5de6:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__mulsi3>
    5dea:	3b 01       	movw	r6, r22
    5dec:	4c 01       	movw	r8, r24
    5dee:	29 a4       	ldd	r2, Y+41	; 0x29
    5df0:	3a a4       	ldd	r3, Y+42	; 0x2a
    5df2:	4b a4       	ldd	r4, Y+43	; 0x2b
    5df4:	5c a4       	ldd	r5, Y+44	; 0x2c
    5df6:	d1 01       	movw	r26, r2
    5df8:	99 27       	eor	r25, r25
    5dfa:	88 27       	eor	r24, r24
    5dfc:	2d a0       	ldd	r2, Y+37	; 0x25
    5dfe:	3e a0       	ldd	r3, Y+38	; 0x26
    5e00:	4f a0       	ldd	r4, Y+39	; 0x27
    5e02:	58 a4       	ldd	r5, Y+40	; 0x28
    5e04:	92 01       	movw	r18, r4
    5e06:	44 27       	eor	r20, r20
    5e08:	55 27       	eor	r21, r21
    5e0a:	82 2b       	or	r24, r18
    5e0c:	93 2b       	or	r25, r19
    5e0e:	a4 2b       	or	r26, r20
    5e10:	b5 2b       	or	r27, r21
    5e12:	86 15       	cp	r24, r6
    5e14:	97 05       	cpc	r25, r7
    5e16:	a8 05       	cpc	r26, r8
    5e18:	b9 05       	cpc	r27, r9
    5e1a:	30 f5       	brcc	.+76     	; 0x5e68 <__udivdi3+0x70c>
    5e1c:	29 8d       	ldd	r18, Y+25	; 0x19
    5e1e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    5e20:	4b 8d       	ldd	r20, Y+27	; 0x1b
    5e22:	5c 8d       	ldd	r21, Y+28	; 0x1c
    5e24:	21 50       	subi	r18, 0x01	; 1
    5e26:	30 40       	sbci	r19, 0x00	; 0
    5e28:	40 40       	sbci	r20, 0x00	; 0
    5e2a:	50 40       	sbci	r21, 0x00	; 0
    5e2c:	29 8f       	std	Y+25, r18	; 0x19
    5e2e:	3a 8f       	std	Y+26, r19	; 0x1a
    5e30:	4b 8f       	std	Y+27, r20	; 0x1b
    5e32:	5c 8f       	std	Y+28, r21	; 0x1c
    5e34:	8e 0d       	add	r24, r14
    5e36:	9f 1d       	adc	r25, r15
    5e38:	a0 1f       	adc	r26, r16
    5e3a:	b1 1f       	adc	r27, r17
    5e3c:	8e 15       	cp	r24, r14
    5e3e:	9f 05       	cpc	r25, r15
    5e40:	a0 07       	cpc	r26, r16
    5e42:	b1 07       	cpc	r27, r17
    5e44:	88 f0       	brcs	.+34     	; 0x5e68 <__udivdi3+0x70c>
    5e46:	86 15       	cp	r24, r6
    5e48:	97 05       	cpc	r25, r7
    5e4a:	a8 05       	cpc	r26, r8
    5e4c:	b9 05       	cpc	r27, r9
    5e4e:	60 f4       	brcc	.+24     	; 0x5e68 <__udivdi3+0x70c>
    5e50:	21 50       	subi	r18, 0x01	; 1
    5e52:	30 40       	sbci	r19, 0x00	; 0
    5e54:	40 40       	sbci	r20, 0x00	; 0
    5e56:	50 40       	sbci	r21, 0x00	; 0
    5e58:	29 8f       	std	Y+25, r18	; 0x19
    5e5a:	3a 8f       	std	Y+26, r19	; 0x1a
    5e5c:	4b 8f       	std	Y+27, r20	; 0x1b
    5e5e:	5c 8f       	std	Y+28, r21	; 0x1c
    5e60:	8e 0d       	add	r24, r14
    5e62:	9f 1d       	adc	r25, r15
    5e64:	a0 1f       	adc	r26, r16
    5e66:	b1 1f       	adc	r27, r17
    5e68:	ac 01       	movw	r20, r24
    5e6a:	bd 01       	movw	r22, r26
    5e6c:	46 19       	sub	r20, r6
    5e6e:	57 09       	sbc	r21, r7
    5e70:	68 09       	sbc	r22, r8
    5e72:	79 09       	sbc	r23, r9
    5e74:	3a 01       	movw	r6, r20
    5e76:	4b 01       	movw	r8, r22
    5e78:	cb 01       	movw	r24, r22
    5e7a:	ba 01       	movw	r22, r20
    5e7c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5e7e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    5e80:	4f 8d       	ldd	r20, Y+31	; 0x1f
    5e82:	58 a1       	ldd	r21, Y+32	; 0x20
    5e84:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__udivmodsi4>
    5e88:	52 2e       	mov	r5, r18
    5e8a:	43 2e       	mov	r4, r19
    5e8c:	34 2e       	mov	r3, r20
    5e8e:	25 2e       	mov	r2, r21
    5e90:	69 a7       	std	Y+41, r22	; 0x29
    5e92:	7a a7       	std	Y+42, r23	; 0x2a
    5e94:	8b a7       	std	Y+43, r24	; 0x2b
    5e96:	9c a7       	std	Y+44, r25	; 0x2c
    5e98:	c4 01       	movw	r24, r8
    5e9a:	b3 01       	movw	r22, r6
    5e9c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5e9e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    5ea0:	4f 8d       	ldd	r20, Y+31	; 0x1f
    5ea2:	58 a1       	ldd	r21, Y+32	; 0x20
    5ea4:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__udivmodsi4>
    5ea8:	65 2c       	mov	r6, r5
    5eaa:	74 2c       	mov	r7, r4
    5eac:	83 2c       	mov	r8, r3
    5eae:	92 2c       	mov	r9, r2
    5eb0:	c4 01       	movw	r24, r8
    5eb2:	b3 01       	movw	r22, r6
    5eb4:	29 a1       	ldd	r18, Y+33	; 0x21
    5eb6:	3a a1       	ldd	r19, Y+34	; 0x22
    5eb8:	4b a1       	ldd	r20, Y+35	; 0x23
    5eba:	5c a1       	ldd	r21, Y+36	; 0x24
    5ebc:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__mulsi3>
    5ec0:	1b 01       	movw	r2, r22
    5ec2:	2c 01       	movw	r4, r24
    5ec4:	69 a5       	ldd	r22, Y+41	; 0x29
    5ec6:	7a a5       	ldd	r23, Y+42	; 0x2a
    5ec8:	8b a5       	ldd	r24, Y+43	; 0x2b
    5eca:	9c a5       	ldd	r25, Y+44	; 0x2c
    5ecc:	ab 01       	movw	r20, r22
    5ece:	33 27       	eor	r19, r19
    5ed0:	22 27       	eor	r18, r18
    5ed2:	8d a1       	ldd	r24, Y+37	; 0x25
    5ed4:	9e a1       	ldd	r25, Y+38	; 0x26
    5ed6:	af a1       	ldd	r26, Y+39	; 0x27
    5ed8:	b8 a5       	ldd	r27, Y+40	; 0x28
    5eda:	a0 70       	andi	r26, 0x00	; 0
    5edc:	b0 70       	andi	r27, 0x00	; 0
    5ede:	28 2b       	or	r18, r24
    5ee0:	39 2b       	or	r19, r25
    5ee2:	4a 2b       	or	r20, r26
    5ee4:	5b 2b       	or	r21, r27
    5ee6:	22 15       	cp	r18, r2
    5ee8:	33 05       	cpc	r19, r3
    5eea:	44 05       	cpc	r20, r4
    5eec:	55 05       	cpc	r21, r5
    5eee:	c0 f4       	brcc	.+48     	; 0x5f20 <__udivdi3+0x7c4>
    5ef0:	08 94       	sec
    5ef2:	61 08       	sbc	r6, r1
    5ef4:	71 08       	sbc	r7, r1
    5ef6:	81 08       	sbc	r8, r1
    5ef8:	91 08       	sbc	r9, r1
    5efa:	2e 0d       	add	r18, r14
    5efc:	3f 1d       	adc	r19, r15
    5efe:	40 1f       	adc	r20, r16
    5f00:	51 1f       	adc	r21, r17
    5f02:	2e 15       	cp	r18, r14
    5f04:	3f 05       	cpc	r19, r15
    5f06:	40 07       	cpc	r20, r16
    5f08:	51 07       	cpc	r21, r17
    5f0a:	50 f0       	brcs	.+20     	; 0x5f20 <__udivdi3+0x7c4>
    5f0c:	22 15       	cp	r18, r2
    5f0e:	33 05       	cpc	r19, r3
    5f10:	44 05       	cpc	r20, r4
    5f12:	55 05       	cpc	r21, r5
    5f14:	28 f4       	brcc	.+10     	; 0x5f20 <__udivdi3+0x7c4>
    5f16:	08 94       	sec
    5f18:	61 08       	sbc	r6, r1
    5f1a:	71 08       	sbc	r7, r1
    5f1c:	81 08       	sbc	r8, r1
    5f1e:	91 08       	sbc	r9, r1
    5f20:	89 8d       	ldd	r24, Y+25	; 0x19
    5f22:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5f24:	ab 8d       	ldd	r26, Y+27	; 0x1b
    5f26:	bc 8d       	ldd	r27, Y+28	; 0x1c
    5f28:	8c 01       	movw	r16, r24
    5f2a:	ff 24       	eor	r15, r15
    5f2c:	ee 24       	eor	r14, r14
    5f2e:	e6 28       	or	r14, r6
    5f30:	f7 28       	or	r15, r7
    5f32:	08 29       	or	r16, r8
    5f34:	19 29       	or	r17, r9
    5f36:	4d c2       	rjmp	.+1178   	; 0x63d2 <__udivdi3+0xc76>
    5f38:	a2 16       	cp	r10, r18
    5f3a:	b3 06       	cpc	r11, r19
    5f3c:	c4 06       	cpc	r12, r20
    5f3e:	d5 06       	cpc	r13, r21
    5f40:	08 f4       	brcc	.+2      	; 0x5f44 <__udivdi3+0x7e8>
    5f42:	34 c2       	rjmp	.+1128   	; 0x63ac <__udivdi3+0xc50>
    5f44:	20 30       	cpi	r18, 0x00	; 0
    5f46:	90 e0       	ldi	r25, 0x00	; 0
    5f48:	39 07       	cpc	r19, r25
    5f4a:	91 e0       	ldi	r25, 0x01	; 1
    5f4c:	49 07       	cpc	r20, r25
    5f4e:	90 e0       	ldi	r25, 0x00	; 0
    5f50:	59 07       	cpc	r21, r25
    5f52:	50 f4       	brcc	.+20     	; 0x5f68 <__udivdi3+0x80c>
    5f54:	2f 3f       	cpi	r18, 0xFF	; 255
    5f56:	31 05       	cpc	r19, r1
    5f58:	41 05       	cpc	r20, r1
    5f5a:	51 05       	cpc	r21, r1
    5f5c:	09 f0       	breq	.+2      	; 0x5f60 <__udivdi3+0x804>
    5f5e:	90 f4       	brcc	.+36     	; 0x5f84 <__udivdi3+0x828>
    5f60:	66 24       	eor	r6, r6
    5f62:	77 24       	eor	r7, r7
    5f64:	43 01       	movw	r8, r6
    5f66:	19 c0       	rjmp	.+50     	; 0x5f9a <__udivdi3+0x83e>
    5f68:	20 30       	cpi	r18, 0x00	; 0
    5f6a:	a0 e0       	ldi	r26, 0x00	; 0
    5f6c:	3a 07       	cpc	r19, r26
    5f6e:	a0 e0       	ldi	r26, 0x00	; 0
    5f70:	4a 07       	cpc	r20, r26
    5f72:	a1 e0       	ldi	r26, 0x01	; 1
    5f74:	5a 07       	cpc	r21, r26
    5f76:	60 f4       	brcc	.+24     	; 0x5f90 <__udivdi3+0x834>
    5f78:	90 e1       	ldi	r25, 0x10	; 16
    5f7a:	69 2e       	mov	r6, r25
    5f7c:	71 2c       	mov	r7, r1
    5f7e:	81 2c       	mov	r8, r1
    5f80:	91 2c       	mov	r9, r1
    5f82:	0b c0       	rjmp	.+22     	; 0x5f9a <__udivdi3+0x83e>
    5f84:	88 e0       	ldi	r24, 0x08	; 8
    5f86:	68 2e       	mov	r6, r24
    5f88:	71 2c       	mov	r7, r1
    5f8a:	81 2c       	mov	r8, r1
    5f8c:	91 2c       	mov	r9, r1
    5f8e:	05 c0       	rjmp	.+10     	; 0x5f9a <__udivdi3+0x83e>
    5f90:	b8 e1       	ldi	r27, 0x18	; 24
    5f92:	6b 2e       	mov	r6, r27
    5f94:	71 2c       	mov	r7, r1
    5f96:	81 2c       	mov	r8, r1
    5f98:	91 2c       	mov	r9, r1
    5f9a:	da 01       	movw	r26, r20
    5f9c:	c9 01       	movw	r24, r18
    5f9e:	06 2c       	mov	r0, r6
    5fa0:	04 c0       	rjmp	.+8      	; 0x5faa <__udivdi3+0x84e>
    5fa2:	b6 95       	lsr	r27
    5fa4:	a7 95       	ror	r26
    5fa6:	97 95       	ror	r25
    5fa8:	87 95       	ror	r24
    5faa:	0a 94       	dec	r0
    5fac:	d2 f7       	brpl	.-12     	; 0x5fa2 <__udivdi3+0x846>
    5fae:	81 5d       	subi	r24, 0xD1	; 209
    5fb0:	9b 4f       	sbci	r25, 0xFB	; 251
    5fb2:	fc 01       	movw	r30, r24
    5fb4:	80 81       	ld	r24, Z
    5fb6:	68 0e       	add	r6, r24
    5fb8:	71 1c       	adc	r7, r1
    5fba:	81 1c       	adc	r8, r1
    5fbc:	91 1c       	adc	r9, r1
    5fbe:	80 e2       	ldi	r24, 0x20	; 32
    5fc0:	90 e0       	ldi	r25, 0x00	; 0
    5fc2:	a0 e0       	ldi	r26, 0x00	; 0
    5fc4:	b0 e0       	ldi	r27, 0x00	; 0
    5fc6:	86 19       	sub	r24, r6
    5fc8:	97 09       	sbc	r25, r7
    5fca:	a8 09       	sbc	r26, r8
    5fcc:	b9 09       	sbc	r27, r9
    5fce:	89 f4       	brne	.+34     	; 0x5ff2 <__udivdi3+0x896>
    5fd0:	2a 15       	cp	r18, r10
    5fd2:	3b 05       	cpc	r19, r11
    5fd4:	4c 05       	cpc	r20, r12
    5fd6:	5d 05       	cpc	r21, r13
    5fd8:	08 f4       	brcc	.+2      	; 0x5fdc <__udivdi3+0x880>
    5fda:	ef c1       	rjmp	.+990    	; 0x63ba <__udivdi3+0xc5e>
    5fdc:	2d a0       	ldd	r2, Y+37	; 0x25
    5fde:	3e a0       	ldd	r3, Y+38	; 0x26
    5fe0:	4f a0       	ldd	r4, Y+39	; 0x27
    5fe2:	58 a4       	ldd	r5, Y+40	; 0x28
    5fe4:	2e 14       	cp	r2, r14
    5fe6:	3f 04       	cpc	r3, r15
    5fe8:	40 06       	cpc	r4, r16
    5fea:	51 06       	cpc	r5, r17
    5fec:	08 f0       	brcs	.+2      	; 0x5ff0 <__udivdi3+0x894>
    5fee:	e5 c1       	rjmp	.+970    	; 0x63ba <__udivdi3+0xc5e>
    5ff0:	dd c1       	rjmp	.+954    	; 0x63ac <__udivdi3+0xc50>
    5ff2:	89 a7       	std	Y+41, r24	; 0x29
    5ff4:	19 01       	movw	r2, r18
    5ff6:	2a 01       	movw	r4, r20
    5ff8:	04 c0       	rjmp	.+8      	; 0x6002 <__udivdi3+0x8a6>
    5ffa:	22 0c       	add	r2, r2
    5ffc:	33 1c       	adc	r3, r3
    5ffe:	44 1c       	adc	r4, r4
    6000:	55 1c       	adc	r5, r5
    6002:	8a 95       	dec	r24
    6004:	d2 f7       	brpl	.-12     	; 0x5ffa <__udivdi3+0x89e>
    6006:	d8 01       	movw	r26, r16
    6008:	c7 01       	movw	r24, r14
    600a:	06 2c       	mov	r0, r6
    600c:	04 c0       	rjmp	.+8      	; 0x6016 <__udivdi3+0x8ba>
    600e:	b6 95       	lsr	r27
    6010:	a7 95       	ror	r26
    6012:	97 95       	ror	r25
    6014:	87 95       	ror	r24
    6016:	0a 94       	dec	r0
    6018:	d2 f7       	brpl	.-12     	; 0x600e <__udivdi3+0x8b2>
    601a:	28 2a       	or	r2, r24
    601c:	39 2a       	or	r3, r25
    601e:	4a 2a       	or	r4, r26
    6020:	5b 2a       	or	r5, r27
    6022:	a8 01       	movw	r20, r16
    6024:	97 01       	movw	r18, r14
    6026:	09 a4       	ldd	r0, Y+41	; 0x29
    6028:	04 c0       	rjmp	.+8      	; 0x6032 <__udivdi3+0x8d6>
    602a:	22 0f       	add	r18, r18
    602c:	33 1f       	adc	r19, r19
    602e:	44 1f       	adc	r20, r20
    6030:	55 1f       	adc	r21, r21
    6032:	0a 94       	dec	r0
    6034:	d2 f7       	brpl	.-12     	; 0x602a <__udivdi3+0x8ce>
    6036:	29 ab       	std	Y+49, r18	; 0x31
    6038:	3a ab       	std	Y+50, r19	; 0x32
    603a:	4b ab       	std	Y+51, r20	; 0x33
    603c:	5c ab       	std	Y+52, r21	; 0x34
    603e:	86 01       	movw	r16, r12
    6040:	75 01       	movw	r14, r10
    6042:	06 2c       	mov	r0, r6
    6044:	04 c0       	rjmp	.+8      	; 0x604e <__udivdi3+0x8f2>
    6046:	16 95       	lsr	r17
    6048:	07 95       	ror	r16
    604a:	f7 94       	ror	r15
    604c:	e7 94       	ror	r14
    604e:	0a 94       	dec	r0
    6050:	d2 f7       	brpl	.-12     	; 0x6046 <__udivdi3+0x8ea>
    6052:	b6 01       	movw	r22, r12
    6054:	a5 01       	movw	r20, r10
    6056:	09 a4       	ldd	r0, Y+41	; 0x29
    6058:	04 c0       	rjmp	.+8      	; 0x6062 <__udivdi3+0x906>
    605a:	44 0f       	add	r20, r20
    605c:	55 1f       	adc	r21, r21
    605e:	66 1f       	adc	r22, r22
    6060:	77 1f       	adc	r23, r23
    6062:	0a 94       	dec	r0
    6064:	d2 f7       	brpl	.-12     	; 0x605a <__udivdi3+0x8fe>
    6066:	4d 8f       	std	Y+29, r20	; 0x1d
    6068:	5e 8f       	std	Y+30, r21	; 0x1e
    606a:	6f 8f       	std	Y+31, r22	; 0x1f
    606c:	78 a3       	std	Y+32, r23	; 0x20
    606e:	6d a1       	ldd	r22, Y+37	; 0x25
    6070:	7e a1       	ldd	r23, Y+38	; 0x26
    6072:	8f a1       	ldd	r24, Y+39	; 0x27
    6074:	98 a5       	ldd	r25, Y+40	; 0x28
    6076:	04 c0       	rjmp	.+8      	; 0x6080 <__udivdi3+0x924>
    6078:	96 95       	lsr	r25
    607a:	87 95       	ror	r24
    607c:	77 95       	ror	r23
    607e:	67 95       	ror	r22
    6080:	6a 94       	dec	r6
    6082:	d2 f7       	brpl	.-12     	; 0x6078 <__udivdi3+0x91c>
    6084:	3b 01       	movw	r6, r22
    6086:	4c 01       	movw	r8, r24
    6088:	8d 8d       	ldd	r24, Y+29	; 0x1d
    608a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    608c:	af 8d       	ldd	r26, Y+31	; 0x1f
    608e:	b8 a1       	ldd	r27, Y+32	; 0x20
    6090:	86 29       	or	r24, r6
    6092:	97 29       	or	r25, r7
    6094:	a8 29       	or	r26, r8
    6096:	b9 29       	or	r27, r9
    6098:	8d 8f       	std	Y+29, r24	; 0x1d
    609a:	9e 8f       	std	Y+30, r25	; 0x1e
    609c:	af 8f       	std	Y+31, r26	; 0x1f
    609e:	b8 a3       	std	Y+32, r27	; 0x20
    60a0:	52 01       	movw	r10, r4
    60a2:	cc 24       	eor	r12, r12
    60a4:	dd 24       	eor	r13, r13
    60a6:	a9 a2       	std	Y+33, r10	; 0x21
    60a8:	ba a2       	std	Y+34, r11	; 0x22
    60aa:	cb a2       	std	Y+35, r12	; 0x23
    60ac:	dc a2       	std	Y+36, r13	; 0x24
    60ae:	a2 01       	movw	r20, r4
    60b0:	91 01       	movw	r18, r2
    60b2:	40 70       	andi	r20, 0x00	; 0
    60b4:	50 70       	andi	r21, 0x00	; 0
    60b6:	2d ab       	std	Y+53, r18	; 0x35
    60b8:	3e ab       	std	Y+54, r19	; 0x36
    60ba:	4f ab       	std	Y+55, r20	; 0x37
    60bc:	58 af       	std	Y+56, r21	; 0x38
    60be:	c8 01       	movw	r24, r16
    60c0:	b7 01       	movw	r22, r14
    60c2:	a6 01       	movw	r20, r12
    60c4:	95 01       	movw	r18, r10
    60c6:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__udivmodsi4>
    60ca:	62 2e       	mov	r6, r18
    60cc:	a3 2e       	mov	r10, r19
    60ce:	d4 2e       	mov	r13, r20
    60d0:	c5 2e       	mov	r12, r21
    60d2:	6d a7       	std	Y+45, r22	; 0x2d
    60d4:	7e a7       	std	Y+46, r23	; 0x2e
    60d6:	8f a7       	std	Y+47, r24	; 0x2f
    60d8:	98 ab       	std	Y+48, r25	; 0x30
    60da:	c8 01       	movw	r24, r16
    60dc:	b7 01       	movw	r22, r14
    60de:	29 a1       	ldd	r18, Y+33	; 0x21
    60e0:	3a a1       	ldd	r19, Y+34	; 0x22
    60e2:	4b a1       	ldd	r20, Y+35	; 0x23
    60e4:	5c a1       	ldd	r21, Y+36	; 0x24
    60e6:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__udivmodsi4>
    60ea:	e6 2c       	mov	r14, r6
    60ec:	fa 2c       	mov	r15, r10
    60ee:	0d 2d       	mov	r16, r13
    60f0:	1c 2d       	mov	r17, r12
    60f2:	e9 8e       	std	Y+25, r14	; 0x19
    60f4:	fa 8e       	std	Y+26, r15	; 0x1a
    60f6:	0b 8f       	std	Y+27, r16	; 0x1b
    60f8:	1c 8f       	std	Y+28, r17	; 0x1c
    60fa:	c8 01       	movw	r24, r16
    60fc:	b7 01       	movw	r22, r14
    60fe:	2d a9       	ldd	r18, Y+53	; 0x35
    6100:	3e a9       	ldd	r19, Y+54	; 0x36
    6102:	4f a9       	ldd	r20, Y+55	; 0x37
    6104:	58 ad       	ldd	r21, Y+56	; 0x38
    6106:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__mulsi3>
    610a:	ad a4       	ldd	r10, Y+45	; 0x2d
    610c:	be a4       	ldd	r11, Y+46	; 0x2e
    610e:	cf a4       	ldd	r12, Y+47	; 0x2f
    6110:	d8 a8       	ldd	r13, Y+48	; 0x30
    6112:	85 01       	movw	r16, r10
    6114:	ff 24       	eor	r15, r15
    6116:	ee 24       	eor	r14, r14
    6118:	ad 8c       	ldd	r10, Y+29	; 0x1d
    611a:	be 8c       	ldd	r11, Y+30	; 0x1e
    611c:	cf 8c       	ldd	r12, Y+31	; 0x1f
    611e:	d8 a0       	ldd	r13, Y+32	; 0x20
    6120:	96 01       	movw	r18, r12
    6122:	44 27       	eor	r20, r20
    6124:	55 27       	eor	r21, r21
    6126:	e2 2a       	or	r14, r18
    6128:	f3 2a       	or	r15, r19
    612a:	04 2b       	or	r16, r20
    612c:	15 2b       	or	r17, r21
    612e:	e6 16       	cp	r14, r22
    6130:	f7 06       	cpc	r15, r23
    6132:	08 07       	cpc	r16, r24
    6134:	19 07       	cpc	r17, r25
    6136:	30 f5       	brcc	.+76     	; 0x6184 <__udivdi3+0xa28>
    6138:	29 8d       	ldd	r18, Y+25	; 0x19
    613a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    613c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    613e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    6140:	21 50       	subi	r18, 0x01	; 1
    6142:	30 40       	sbci	r19, 0x00	; 0
    6144:	40 40       	sbci	r20, 0x00	; 0
    6146:	50 40       	sbci	r21, 0x00	; 0
    6148:	29 8f       	std	Y+25, r18	; 0x19
    614a:	3a 8f       	std	Y+26, r19	; 0x1a
    614c:	4b 8f       	std	Y+27, r20	; 0x1b
    614e:	5c 8f       	std	Y+28, r21	; 0x1c
    6150:	e2 0c       	add	r14, r2
    6152:	f3 1c       	adc	r15, r3
    6154:	04 1d       	adc	r16, r4
    6156:	15 1d       	adc	r17, r5
    6158:	e2 14       	cp	r14, r2
    615a:	f3 04       	cpc	r15, r3
    615c:	04 05       	cpc	r16, r4
    615e:	15 05       	cpc	r17, r5
    6160:	88 f0       	brcs	.+34     	; 0x6184 <__udivdi3+0xa28>
    6162:	e6 16       	cp	r14, r22
    6164:	f7 06       	cpc	r15, r23
    6166:	08 07       	cpc	r16, r24
    6168:	19 07       	cpc	r17, r25
    616a:	60 f4       	brcc	.+24     	; 0x6184 <__udivdi3+0xa28>
    616c:	21 50       	subi	r18, 0x01	; 1
    616e:	30 40       	sbci	r19, 0x00	; 0
    6170:	40 40       	sbci	r20, 0x00	; 0
    6172:	50 40       	sbci	r21, 0x00	; 0
    6174:	29 8f       	std	Y+25, r18	; 0x19
    6176:	3a 8f       	std	Y+26, r19	; 0x1a
    6178:	4b 8f       	std	Y+27, r20	; 0x1b
    617a:	5c 8f       	std	Y+28, r21	; 0x1c
    617c:	e2 0c       	add	r14, r2
    617e:	f3 1c       	adc	r15, r3
    6180:	04 1d       	adc	r16, r4
    6182:	15 1d       	adc	r17, r5
    6184:	e6 1a       	sub	r14, r22
    6186:	f7 0a       	sbc	r15, r23
    6188:	08 0b       	sbc	r16, r24
    618a:	19 0b       	sbc	r17, r25
    618c:	c8 01       	movw	r24, r16
    618e:	b7 01       	movw	r22, r14
    6190:	29 a1       	ldd	r18, Y+33	; 0x21
    6192:	3a a1       	ldd	r19, Y+34	; 0x22
    6194:	4b a1       	ldd	r20, Y+35	; 0x23
    6196:	5c a1       	ldd	r21, Y+36	; 0x24
    6198:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__udivmodsi4>
    619c:	a2 2e       	mov	r10, r18
    619e:	d3 2e       	mov	r13, r19
    61a0:	c4 2e       	mov	r12, r20
    61a2:	b5 2e       	mov	r11, r21
    61a4:	6d a7       	std	Y+45, r22	; 0x2d
    61a6:	7e a7       	std	Y+46, r23	; 0x2e
    61a8:	8f a7       	std	Y+47, r24	; 0x2f
    61aa:	98 ab       	std	Y+48, r25	; 0x30
    61ac:	c8 01       	movw	r24, r16
    61ae:	b7 01       	movw	r22, r14
    61b0:	29 a1       	ldd	r18, Y+33	; 0x21
    61b2:	3a a1       	ldd	r19, Y+34	; 0x22
    61b4:	4b a1       	ldd	r20, Y+35	; 0x23
    61b6:	5c a1       	ldd	r21, Y+36	; 0x24
    61b8:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__udivmodsi4>
    61bc:	6a 2c       	mov	r6, r10
    61be:	7d 2c       	mov	r7, r13
    61c0:	8c 2c       	mov	r8, r12
    61c2:	9b 2c       	mov	r9, r11
    61c4:	c4 01       	movw	r24, r8
    61c6:	b3 01       	movw	r22, r6
    61c8:	2d a9       	ldd	r18, Y+53	; 0x35
    61ca:	3e a9       	ldd	r19, Y+54	; 0x36
    61cc:	4f a9       	ldd	r20, Y+55	; 0x37
    61ce:	58 ad       	ldd	r21, Y+56	; 0x38
    61d0:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__mulsi3>
    61d4:	9b 01       	movw	r18, r22
    61d6:	ac 01       	movw	r20, r24
    61d8:	ad a4       	ldd	r10, Y+45	; 0x2d
    61da:	be a4       	ldd	r11, Y+46	; 0x2e
    61dc:	cf a4       	ldd	r12, Y+47	; 0x2f
    61de:	d8 a8       	ldd	r13, Y+48	; 0x30
    61e0:	d5 01       	movw	r26, r10
    61e2:	99 27       	eor	r25, r25
    61e4:	88 27       	eor	r24, r24
    61e6:	ad 8c       	ldd	r10, Y+29	; 0x1d
    61e8:	be 8c       	ldd	r11, Y+30	; 0x1e
    61ea:	cf 8c       	ldd	r12, Y+31	; 0x1f
    61ec:	d8 a0       	ldd	r13, Y+32	; 0x20
    61ee:	6f ef       	ldi	r22, 0xFF	; 255
    61f0:	e6 2e       	mov	r14, r22
    61f2:	6f ef       	ldi	r22, 0xFF	; 255
    61f4:	f6 2e       	mov	r15, r22
    61f6:	01 2d       	mov	r16, r1
    61f8:	11 2d       	mov	r17, r1
    61fa:	ae 20       	and	r10, r14
    61fc:	bf 20       	and	r11, r15
    61fe:	c0 22       	and	r12, r16
    6200:	d1 22       	and	r13, r17
    6202:	8a 29       	or	r24, r10
    6204:	9b 29       	or	r25, r11
    6206:	ac 29       	or	r26, r12
    6208:	bd 29       	or	r27, r13
    620a:	82 17       	cp	r24, r18
    620c:	93 07       	cpc	r25, r19
    620e:	a4 07       	cpc	r26, r20
    6210:	b5 07       	cpc	r27, r21
    6212:	e0 f4       	brcc	.+56     	; 0x624c <__udivdi3+0xaf0>
    6214:	08 94       	sec
    6216:	61 08       	sbc	r6, r1
    6218:	71 08       	sbc	r7, r1
    621a:	81 08       	sbc	r8, r1
    621c:	91 08       	sbc	r9, r1
    621e:	82 0d       	add	r24, r2
    6220:	93 1d       	adc	r25, r3
    6222:	a4 1d       	adc	r26, r4
    6224:	b5 1d       	adc	r27, r5
    6226:	82 15       	cp	r24, r2
    6228:	93 05       	cpc	r25, r3
    622a:	a4 05       	cpc	r26, r4
    622c:	b5 05       	cpc	r27, r5
    622e:	70 f0       	brcs	.+28     	; 0x624c <__udivdi3+0xaf0>
    6230:	82 17       	cp	r24, r18
    6232:	93 07       	cpc	r25, r19
    6234:	a4 07       	cpc	r26, r20
    6236:	b5 07       	cpc	r27, r21
    6238:	48 f4       	brcc	.+18     	; 0x624c <__udivdi3+0xaf0>
    623a:	08 94       	sec
    623c:	61 08       	sbc	r6, r1
    623e:	71 08       	sbc	r7, r1
    6240:	81 08       	sbc	r8, r1
    6242:	91 08       	sbc	r9, r1
    6244:	82 0d       	add	r24, r2
    6246:	93 1d       	adc	r25, r3
    6248:	a4 1d       	adc	r26, r4
    624a:	b5 1d       	adc	r27, r5
    624c:	1c 01       	movw	r2, r24
    624e:	2d 01       	movw	r4, r26
    6250:	22 1a       	sub	r2, r18
    6252:	33 0a       	sbc	r3, r19
    6254:	44 0a       	sbc	r4, r20
    6256:	55 0a       	sbc	r5, r21
    6258:	2d 8e       	std	Y+29, r2	; 0x1d
    625a:	3e 8e       	std	Y+30, r3	; 0x1e
    625c:	4f 8e       	std	Y+31, r4	; 0x1f
    625e:	58 a2       	std	Y+32, r5	; 0x20
    6260:	a9 8c       	ldd	r10, Y+25	; 0x19
    6262:	ba 8c       	ldd	r11, Y+26	; 0x1a
    6264:	cb 8c       	ldd	r12, Y+27	; 0x1b
    6266:	dc 8c       	ldd	r13, Y+28	; 0x1c
    6268:	85 01       	movw	r16, r10
    626a:	ff 24       	eor	r15, r15
    626c:	ee 24       	eor	r14, r14
    626e:	e6 28       	or	r14, r6
    6270:	f7 28       	or	r15, r7
    6272:	08 29       	or	r16, r8
    6274:	19 29       	or	r17, r9
    6276:	af ef       	ldi	r26, 0xFF	; 255
    6278:	aa 2e       	mov	r10, r26
    627a:	af ef       	ldi	r26, 0xFF	; 255
    627c:	ba 2e       	mov	r11, r26
    627e:	c1 2c       	mov	r12, r1
    6280:	d1 2c       	mov	r13, r1
    6282:	ae 20       	and	r10, r14
    6284:	bf 20       	and	r11, r15
    6286:	c0 22       	and	r12, r16
    6288:	d1 22       	and	r13, r17
    628a:	18 01       	movw	r2, r16
    628c:	44 24       	eor	r4, r4
    628e:	55 24       	eor	r5, r5
    6290:	69 a8       	ldd	r6, Y+49	; 0x31
    6292:	7a a8       	ldd	r7, Y+50	; 0x32
    6294:	8b a8       	ldd	r8, Y+51	; 0x33
    6296:	9c a8       	ldd	r9, Y+52	; 0x34
    6298:	2f ef       	ldi	r18, 0xFF	; 255
    629a:	3f ef       	ldi	r19, 0xFF	; 255
    629c:	40 e0       	ldi	r20, 0x00	; 0
    629e:	50 e0       	ldi	r21, 0x00	; 0
    62a0:	62 22       	and	r6, r18
    62a2:	73 22       	and	r7, r19
    62a4:	84 22       	and	r8, r20
    62a6:	95 22       	and	r9, r21
    62a8:	69 a9       	ldd	r22, Y+49	; 0x31
    62aa:	7a a9       	ldd	r23, Y+50	; 0x32
    62ac:	8b a9       	ldd	r24, Y+51	; 0x33
    62ae:	9c a9       	ldd	r25, Y+52	; 0x34
    62b0:	ac 01       	movw	r20, r24
    62b2:	66 27       	eor	r22, r22
    62b4:	77 27       	eor	r23, r23
    62b6:	49 8f       	std	Y+25, r20	; 0x19
    62b8:	5a 8f       	std	Y+26, r21	; 0x1a
    62ba:	6b 8f       	std	Y+27, r22	; 0x1b
    62bc:	7c 8f       	std	Y+28, r23	; 0x1c
    62be:	c6 01       	movw	r24, r12
    62c0:	b5 01       	movw	r22, r10
    62c2:	a4 01       	movw	r20, r8
    62c4:	93 01       	movw	r18, r6
    62c6:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__mulsi3>
    62ca:	69 a3       	std	Y+33, r22	; 0x21
    62cc:	7a a3       	std	Y+34, r23	; 0x22
    62ce:	8b a3       	std	Y+35, r24	; 0x23
    62d0:	9c a3       	std	Y+36, r25	; 0x24
    62d2:	c6 01       	movw	r24, r12
    62d4:	b5 01       	movw	r22, r10
    62d6:	29 8d       	ldd	r18, Y+25	; 0x19
    62d8:	3a 8d       	ldd	r19, Y+26	; 0x1a
    62da:	4b 8d       	ldd	r20, Y+27	; 0x1b
    62dc:	5c 8d       	ldd	r21, Y+28	; 0x1c
    62de:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__mulsi3>
    62e2:	5b 01       	movw	r10, r22
    62e4:	6c 01       	movw	r12, r24
    62e6:	c2 01       	movw	r24, r4
    62e8:	b1 01       	movw	r22, r2
    62ea:	a4 01       	movw	r20, r8
    62ec:	93 01       	movw	r18, r6
    62ee:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__mulsi3>
    62f2:	3b 01       	movw	r6, r22
    62f4:	4c 01       	movw	r8, r24
    62f6:	c2 01       	movw	r24, r4
    62f8:	b1 01       	movw	r22, r2
    62fa:	29 8d       	ldd	r18, Y+25	; 0x19
    62fc:	3a 8d       	ldd	r19, Y+26	; 0x1a
    62fe:	4b 8d       	ldd	r20, Y+27	; 0x1b
    6300:	5c 8d       	ldd	r21, Y+28	; 0x1c
    6302:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <__mulsi3>
    6306:	9b 01       	movw	r18, r22
    6308:	ac 01       	movw	r20, r24
    630a:	a6 0c       	add	r10, r6
    630c:	b7 1c       	adc	r11, r7
    630e:	c8 1c       	adc	r12, r8
    6310:	d9 1c       	adc	r13, r9
    6312:	29 a0       	ldd	r2, Y+33	; 0x21
    6314:	3a a0       	ldd	r3, Y+34	; 0x22
    6316:	4b a0       	ldd	r4, Y+35	; 0x23
    6318:	5c a0       	ldd	r5, Y+36	; 0x24
    631a:	c2 01       	movw	r24, r4
    631c:	aa 27       	eor	r26, r26
    631e:	bb 27       	eor	r27, r27
    6320:	a8 0e       	add	r10, r24
    6322:	b9 1e       	adc	r11, r25
    6324:	ca 1e       	adc	r12, r26
    6326:	db 1e       	adc	r13, r27
    6328:	a6 14       	cp	r10, r6
    632a:	b7 04       	cpc	r11, r7
    632c:	c8 04       	cpc	r12, r8
    632e:	d9 04       	cpc	r13, r9
    6330:	20 f4       	brcc	.+8      	; 0x633a <__udivdi3+0xbde>
    6332:	20 50       	subi	r18, 0x00	; 0
    6334:	30 40       	sbci	r19, 0x00	; 0
    6336:	4f 4f       	sbci	r20, 0xFF	; 255
    6338:	5f 4f       	sbci	r21, 0xFF	; 255
    633a:	c6 01       	movw	r24, r12
    633c:	aa 27       	eor	r26, r26
    633e:	bb 27       	eor	r27, r27
    6340:	82 0f       	add	r24, r18
    6342:	93 1f       	adc	r25, r19
    6344:	a4 1f       	adc	r26, r20
    6346:	b5 1f       	adc	r27, r21
    6348:	2d 8d       	ldd	r18, Y+29	; 0x1d
    634a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    634c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    634e:	58 a1       	ldd	r21, Y+32	; 0x20
    6350:	28 17       	cp	r18, r24
    6352:	39 07       	cpc	r19, r25
    6354:	4a 07       	cpc	r20, r26
    6356:	5b 07       	cpc	r21, r27
    6358:	18 f1       	brcs	.+70     	; 0x63a0 <__udivdi3+0xc44>
    635a:	82 17       	cp	r24, r18
    635c:	93 07       	cpc	r25, r19
    635e:	a4 07       	cpc	r26, r20
    6360:	b5 07       	cpc	r27, r21
    6362:	a1 f5       	brne	.+104    	; 0x63cc <__udivdi3+0xc70>
    6364:	65 01       	movw	r12, r10
    6366:	bb 24       	eor	r11, r11
    6368:	aa 24       	eor	r10, r10
    636a:	89 a1       	ldd	r24, Y+33	; 0x21
    636c:	9a a1       	ldd	r25, Y+34	; 0x22
    636e:	ab a1       	ldd	r26, Y+35	; 0x23
    6370:	bc a1       	ldd	r27, Y+36	; 0x24
    6372:	a0 70       	andi	r26, 0x00	; 0
    6374:	b0 70       	andi	r27, 0x00	; 0
    6376:	a8 0e       	add	r10, r24
    6378:	b9 1e       	adc	r11, r25
    637a:	ca 1e       	adc	r12, r26
    637c:	db 1e       	adc	r13, r27
    637e:	8d a1       	ldd	r24, Y+37	; 0x25
    6380:	9e a1       	ldd	r25, Y+38	; 0x26
    6382:	af a1       	ldd	r26, Y+39	; 0x27
    6384:	b8 a5       	ldd	r27, Y+40	; 0x28
    6386:	09 a4       	ldd	r0, Y+41	; 0x29
    6388:	04 c0       	rjmp	.+8      	; 0x6392 <__udivdi3+0xc36>
    638a:	88 0f       	add	r24, r24
    638c:	99 1f       	adc	r25, r25
    638e:	aa 1f       	adc	r26, r26
    6390:	bb 1f       	adc	r27, r27
    6392:	0a 94       	dec	r0
    6394:	d2 f7       	brpl	.-12     	; 0x638a <__udivdi3+0xc2e>
    6396:	8a 15       	cp	r24, r10
    6398:	9b 05       	cpc	r25, r11
    639a:	ac 05       	cpc	r26, r12
    639c:	bd 05       	cpc	r27, r13
    639e:	b0 f4       	brcc	.+44     	; 0x63cc <__udivdi3+0xc70>
    63a0:	08 94       	sec
    63a2:	e1 08       	sbc	r14, r1
    63a4:	f1 08       	sbc	r15, r1
    63a6:	01 09       	sbc	r16, r1
    63a8:	11 09       	sbc	r17, r1
    63aa:	10 c0       	rjmp	.+32     	; 0x63cc <__udivdi3+0xc70>
    63ac:	aa 24       	eor	r10, r10
    63ae:	bb 24       	eor	r11, r11
    63b0:	65 01       	movw	r12, r10
    63b2:	ee 24       	eor	r14, r14
    63b4:	ff 24       	eor	r15, r15
    63b6:	87 01       	movw	r16, r14
    63b8:	0c c0       	rjmp	.+24     	; 0x63d2 <__udivdi3+0xc76>
    63ba:	aa 24       	eor	r10, r10
    63bc:	bb 24       	eor	r11, r11
    63be:	65 01       	movw	r12, r10
    63c0:	81 e0       	ldi	r24, 0x01	; 1
    63c2:	e8 2e       	mov	r14, r24
    63c4:	f1 2c       	mov	r15, r1
    63c6:	01 2d       	mov	r16, r1
    63c8:	11 2d       	mov	r17, r1
    63ca:	03 c0       	rjmp	.+6      	; 0x63d2 <__udivdi3+0xc76>
    63cc:	aa 24       	eor	r10, r10
    63ce:	bb 24       	eor	r11, r11
    63d0:	65 01       	movw	r12, r10
    63d2:	fe 01       	movw	r30, r28
    63d4:	71 96       	adiw	r30, 0x11	; 17
    63d6:	88 e0       	ldi	r24, 0x08	; 8
    63d8:	df 01       	movw	r26, r30
    63da:	1d 92       	st	X+, r1
    63dc:	8a 95       	dec	r24
    63de:	e9 f7       	brne	.-6      	; 0x63da <__udivdi3+0xc7e>
    63e0:	e9 8a       	std	Y+17, r14	; 0x11
    63e2:	fa 8a       	std	Y+18, r15	; 0x12
    63e4:	0b 8b       	std	Y+19, r16	; 0x13
    63e6:	1c 8b       	std	Y+20, r17	; 0x14
    63e8:	ad 8a       	std	Y+21, r10	; 0x15
    63ea:	be 8a       	std	Y+22, r11	; 0x16
    63ec:	cf 8a       	std	Y+23, r12	; 0x17
    63ee:	d8 8e       	std	Y+24, r13	; 0x18
    63f0:	2e 2d       	mov	r18, r14
    63f2:	3a 89       	ldd	r19, Y+18	; 0x12
    63f4:	4b 89       	ldd	r20, Y+19	; 0x13
    63f6:	5c 89       	ldd	r21, Y+20	; 0x14
    63f8:	6a 2d       	mov	r22, r10
    63fa:	7e 89       	ldd	r23, Y+22	; 0x16
    63fc:	8f 89       	ldd	r24, Y+23	; 0x17
    63fe:	98 8d       	ldd	r25, Y+24	; 0x18
    6400:	e8 96       	adiw	r28, 0x38	; 56
    6402:	e2 e1       	ldi	r30, 0x12	; 18
    6404:	0c 94 d2 33 	jmp	0x67a4	; 0x67a4 <__epilogue_restores__>

00006408 <vfprintf>:
    6408:	6f 92       	push	r6
    640a:	7f 92       	push	r7
    640c:	8f 92       	push	r8
    640e:	9f 92       	push	r9
    6410:	af 92       	push	r10
    6412:	bf 92       	push	r11
    6414:	cf 92       	push	r12
    6416:	df 92       	push	r13
    6418:	ef 92       	push	r14
    641a:	ff 92       	push	r15
    641c:	0f 93       	push	r16
    641e:	1f 93       	push	r17
    6420:	df 93       	push	r29
    6422:	cf 93       	push	r28
    6424:	cd b7       	in	r28, 0x3d	; 61
    6426:	de b7       	in	r29, 0x3e	; 62
    6428:	2c 97       	sbiw	r28, 0x0c	; 12
    642a:	0f b6       	in	r0, 0x3f	; 63
    642c:	f8 94       	cli
    642e:	de bf       	out	0x3e, r29	; 62
    6430:	0f be       	out	0x3f, r0	; 63
    6432:	cd bf       	out	0x3d, r28	; 61
    6434:	6c 01       	movw	r12, r24
    6436:	3b 01       	movw	r6, r22
    6438:	8a 01       	movw	r16, r20
    643a:	fc 01       	movw	r30, r24
    643c:	17 82       	std	Z+7, r1	; 0x07
    643e:	16 82       	std	Z+6, r1	; 0x06
    6440:	83 81       	ldd	r24, Z+3	; 0x03
    6442:	81 fd       	sbrc	r24, 1
    6444:	03 c0       	rjmp	.+6      	; 0x644c <vfprintf+0x44>
    6446:	1e c1       	rjmp	.+572    	; 0x6684 <vfprintf+0x27c>
    6448:	85 01       	movw	r16, r10
    644a:	04 c0       	rjmp	.+8      	; 0x6454 <vfprintf+0x4c>
    644c:	4e 01       	movw	r8, r28
    644e:	08 94       	sec
    6450:	81 1c       	adc	r8, r1
    6452:	91 1c       	adc	r9, r1
    6454:	f6 01       	movw	r30, r12
    6456:	e3 80       	ldd	r14, Z+3	; 0x03
    6458:	f3 01       	movw	r30, r6
    645a:	e3 fc       	sbrc	r14, 3
    645c:	85 91       	lpm	r24, Z+
    645e:	e3 fe       	sbrs	r14, 3
    6460:	81 91       	ld	r24, Z+
    6462:	3f 01       	movw	r6, r30
    6464:	88 23       	and	r24, r24
    6466:	09 f4       	brne	.+2      	; 0x646a <vfprintf+0x62>
    6468:	09 c1       	rjmp	.+530    	; 0x667c <vfprintf+0x274>
    646a:	85 32       	cpi	r24, 0x25	; 37
    646c:	51 f4       	brne	.+20     	; 0x6482 <vfprintf+0x7a>
    646e:	e3 fc       	sbrc	r14, 3
    6470:	25 91       	lpm	r18, Z+
    6472:	e3 fe       	sbrs	r14, 3
    6474:	21 91       	ld	r18, Z+
    6476:	3f 01       	movw	r6, r30
    6478:	25 32       	cpi	r18, 0x25	; 37
    647a:	11 f0       	breq	.+4      	; 0x6480 <vfprintf+0x78>
    647c:	ff 24       	eor	r15, r15
    647e:	23 c0       	rjmp	.+70     	; 0x64c6 <vfprintf+0xbe>
    6480:	85 e2       	ldi	r24, 0x25	; 37
    6482:	90 e0       	ldi	r25, 0x00	; 0
    6484:	b6 01       	movw	r22, r12
    6486:	0e 94 4c 34 	call	0x6898	; 0x6898 <fputc>
    648a:	58 01       	movw	r10, r16
    648c:	dd cf       	rjmp	.-70     	; 0x6448 <vfprintf+0x40>
    648e:	22 23       	and	r18, r18
    6490:	09 f4       	brne	.+2      	; 0x6494 <vfprintf+0x8c>
    6492:	89 c0       	rjmp	.+274    	; 0x65a6 <vfprintf+0x19e>
    6494:	88 ed       	ldi	r24, 0xD8	; 216
    6496:	93 e0       	ldi	r25, 0x03	; 3
    6498:	62 2f       	mov	r22, r18
    649a:	70 e0       	ldi	r23, 0x00	; 0
    649c:	2c 87       	std	Y+12, r18	; 0x0c
    649e:	0e 94 ed 33 	call	0x67da	; 0x67da <strchr_P>
    64a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    64a4:	00 97       	sbiw	r24, 0x00	; 0
    64a6:	49 f4       	brne	.+18     	; 0x64ba <vfprintf+0xb2>
    64a8:	23 32       	cpi	r18, 0x23	; 35
    64aa:	19 f4       	brne	.+6      	; 0x64b2 <vfprintf+0xaa>
    64ac:	f0 e1       	ldi	r31, 0x10	; 16
    64ae:	ff 2a       	or	r15, r31
    64b0:	04 c0       	rjmp	.+8      	; 0x64ba <vfprintf+0xb2>
    64b2:	2c 36       	cpi	r18, 0x6C	; 108
    64b4:	69 f4       	brne	.+26     	; 0x64d0 <vfprintf+0xc8>
    64b6:	20 e8       	ldi	r18, 0x80	; 128
    64b8:	f2 2a       	or	r15, r18
    64ba:	f3 01       	movw	r30, r6
    64bc:	e3 fc       	sbrc	r14, 3
    64be:	25 91       	lpm	r18, Z+
    64c0:	e3 fe       	sbrs	r14, 3
    64c2:	21 91       	ld	r18, Z+
    64c4:	3f 01       	movw	r6, r30
    64c6:	f7 fe       	sbrs	r15, 7
    64c8:	e2 cf       	rjmp	.-60     	; 0x648e <vfprintf+0x86>
    64ca:	22 23       	and	r18, r18
    64cc:	09 f4       	brne	.+2      	; 0x64d0 <vfprintf+0xc8>
    64ce:	3f c0       	rjmp	.+126    	; 0x654e <vfprintf+0x146>
    64d0:	81 ed       	ldi	r24, 0xD1	; 209
    64d2:	93 e0       	ldi	r25, 0x03	; 3
    64d4:	62 2f       	mov	r22, r18
    64d6:	70 e0       	ldi	r23, 0x00	; 0
    64d8:	2c 87       	std	Y+12, r18	; 0x0c
    64da:	0e 94 ed 33 	call	0x67da	; 0x67da <strchr_P>
    64de:	2c 85       	ldd	r18, Y+12	; 0x0c
    64e0:	00 97       	sbiw	r24, 0x00	; 0
    64e2:	41 f0       	breq	.+16     	; 0x64f4 <vfprintf+0xec>
    64e4:	64 e0       	ldi	r22, 0x04	; 4
    64e6:	a6 2e       	mov	r10, r22
    64e8:	b1 2c       	mov	r11, r1
    64ea:	a0 0e       	add	r10, r16
    64ec:	b1 1e       	adc	r11, r17
    64ee:	8f e3       	ldi	r24, 0x3F	; 63
    64f0:	90 e0       	ldi	r25, 0x00	; 0
    64f2:	0f c0       	rjmp	.+30     	; 0x6512 <vfprintf+0x10a>
    64f4:	23 36       	cpi	r18, 0x63	; 99
    64f6:	29 f0       	breq	.+10     	; 0x6502 <vfprintf+0xfa>
    64f8:	23 37       	cpi	r18, 0x73	; 115
    64fa:	89 f0       	breq	.+34     	; 0x651e <vfprintf+0x116>
    64fc:	23 35       	cpi	r18, 0x53	; 83
    64fe:	29 f5       	brne	.+74     	; 0x654a <vfprintf+0x142>
    6500:	0c c0       	rjmp	.+24     	; 0x651a <vfprintf+0x112>
    6502:	52 e0       	ldi	r21, 0x02	; 2
    6504:	a5 2e       	mov	r10, r21
    6506:	b1 2c       	mov	r11, r1
    6508:	a0 0e       	add	r10, r16
    650a:	b1 1e       	adc	r11, r17
    650c:	f8 01       	movw	r30, r16
    650e:	80 81       	ld	r24, Z
    6510:	91 81       	ldd	r25, Z+1	; 0x01
    6512:	b6 01       	movw	r22, r12
    6514:	0e 94 4c 34 	call	0x6898	; 0x6898 <fputc>
    6518:	97 cf       	rjmp	.-210    	; 0x6448 <vfprintf+0x40>
    651a:	f1 e0       	ldi	r31, 0x01	; 1
    651c:	ff 2a       	or	r15, r31
    651e:	42 e0       	ldi	r20, 0x02	; 2
    6520:	a4 2e       	mov	r10, r20
    6522:	b1 2c       	mov	r11, r1
    6524:	a0 0e       	add	r10, r16
    6526:	b1 1e       	adc	r11, r17
    6528:	f8 01       	movw	r30, r16
    652a:	00 81       	ld	r16, Z
    652c:	11 81       	ldd	r17, Z+1	; 0x01
    652e:	04 c0       	rjmp	.+8      	; 0x6538 <vfprintf+0x130>
    6530:	90 e0       	ldi	r25, 0x00	; 0
    6532:	b6 01       	movw	r22, r12
    6534:	0e 94 4c 34 	call	0x6898	; 0x6898 <fputc>
    6538:	f8 01       	movw	r30, r16
    653a:	f0 fc       	sbrc	r15, 0
    653c:	85 91       	lpm	r24, Z+
    653e:	f0 fe       	sbrs	r15, 0
    6540:	81 91       	ld	r24, Z+
    6542:	8f 01       	movw	r16, r30
    6544:	88 23       	and	r24, r24
    6546:	a1 f7       	brne	.-24     	; 0x6530 <vfprintf+0x128>
    6548:	7f cf       	rjmp	.-258    	; 0x6448 <vfprintf+0x40>
    654a:	24 36       	cpi	r18, 0x64	; 100
    654c:	11 f0       	breq	.+4      	; 0x6552 <vfprintf+0x14a>
    654e:	29 36       	cpi	r18, 0x69	; 105
    6550:	51 f5       	brne	.+84     	; 0x65a6 <vfprintf+0x19e>
    6552:	f7 fe       	sbrs	r15, 7
    6554:	0b c0       	rjmp	.+22     	; 0x656c <vfprintf+0x164>
    6556:	34 e0       	ldi	r19, 0x04	; 4
    6558:	a3 2e       	mov	r10, r19
    655a:	b1 2c       	mov	r11, r1
    655c:	a0 0e       	add	r10, r16
    655e:	b1 1e       	adc	r11, r17
    6560:	f8 01       	movw	r30, r16
    6562:	60 81       	ld	r22, Z
    6564:	71 81       	ldd	r23, Z+1	; 0x01
    6566:	82 81       	ldd	r24, Z+2	; 0x02
    6568:	93 81       	ldd	r25, Z+3	; 0x03
    656a:	0c c0       	rjmp	.+24     	; 0x6584 <vfprintf+0x17c>
    656c:	22 e0       	ldi	r18, 0x02	; 2
    656e:	a2 2e       	mov	r10, r18
    6570:	b1 2c       	mov	r11, r1
    6572:	a0 0e       	add	r10, r16
    6574:	b1 1e       	adc	r11, r17
    6576:	f8 01       	movw	r30, r16
    6578:	60 81       	ld	r22, Z
    657a:	71 81       	ldd	r23, Z+1	; 0x01
    657c:	88 27       	eor	r24, r24
    657e:	77 fd       	sbrc	r23, 7
    6580:	80 95       	com	r24
    6582:	98 2f       	mov	r25, r24
    6584:	ff ee       	ldi	r31, 0xEF	; 239
    6586:	ff 22       	and	r15, r31
    6588:	97 ff       	sbrs	r25, 7
    658a:	09 c0       	rjmp	.+18     	; 0x659e <vfprintf+0x196>
    658c:	90 95       	com	r25
    658e:	80 95       	com	r24
    6590:	70 95       	com	r23
    6592:	61 95       	neg	r22
    6594:	7f 4f       	sbci	r23, 0xFF	; 255
    6596:	8f 4f       	sbci	r24, 0xFF	; 255
    6598:	9f 4f       	sbci	r25, 0xFF	; 255
    659a:	20 e4       	ldi	r18, 0x40	; 64
    659c:	f2 2a       	or	r15, r18
    659e:	a4 01       	movw	r20, r8
    65a0:	2a e0       	ldi	r18, 0x0A	; 10
    65a2:	30 e0       	ldi	r19, 0x00	; 0
    65a4:	3b c0       	rjmp	.+118    	; 0x661c <vfprintf+0x214>
    65a6:	20 37       	cpi	r18, 0x70	; 112
    65a8:	99 f0       	breq	.+38     	; 0x65d0 <vfprintf+0x1c8>
    65aa:	21 37       	cpi	r18, 0x71	; 113
    65ac:	30 f4       	brcc	.+12     	; 0x65ba <vfprintf+0x1b2>
    65ae:	28 35       	cpi	r18, 0x58	; 88
    65b0:	b1 f0       	breq	.+44     	; 0x65de <vfprintf+0x1d6>
    65b2:	2f 36       	cpi	r18, 0x6F	; 111
    65b4:	09 f0       	breq	.+2      	; 0x65b8 <vfprintf+0x1b0>
    65b6:	62 c0       	rjmp	.+196    	; 0x667c <vfprintf+0x274>
    65b8:	17 c0       	rjmp	.+46     	; 0x65e8 <vfprintf+0x1e0>
    65ba:	25 37       	cpi	r18, 0x75	; 117
    65bc:	21 f0       	breq	.+8      	; 0x65c6 <vfprintf+0x1be>
    65be:	28 37       	cpi	r18, 0x78	; 120
    65c0:	09 f0       	breq	.+2      	; 0x65c4 <vfprintf+0x1bc>
    65c2:	5c c0       	rjmp	.+184    	; 0x667c <vfprintf+0x274>
    65c4:	07 c0       	rjmp	.+14     	; 0x65d4 <vfprintf+0x1cc>
    65c6:	8f ee       	ldi	r24, 0xEF	; 239
    65c8:	f8 22       	and	r15, r24
    65ca:	2a e0       	ldi	r18, 0x0A	; 10
    65cc:	30 e0       	ldi	r19, 0x00	; 0
    65ce:	0e c0       	rjmp	.+28     	; 0x65ec <vfprintf+0x1e4>
    65d0:	e0 e1       	ldi	r30, 0x10	; 16
    65d2:	fe 2a       	or	r15, r30
    65d4:	f4 e2       	ldi	r31, 0x24	; 36
    65d6:	ff 2a       	or	r15, r31
    65d8:	20 e1       	ldi	r18, 0x10	; 16
    65da:	30 e0       	ldi	r19, 0x00	; 0
    65dc:	07 c0       	rjmp	.+14     	; 0x65ec <vfprintf+0x1e4>
    65de:	24 e0       	ldi	r18, 0x04	; 4
    65e0:	f2 2a       	or	r15, r18
    65e2:	20 e1       	ldi	r18, 0x10	; 16
    65e4:	32 e0       	ldi	r19, 0x02	; 2
    65e6:	02 c0       	rjmp	.+4      	; 0x65ec <vfprintf+0x1e4>
    65e8:	28 e0       	ldi	r18, 0x08	; 8
    65ea:	30 e0       	ldi	r19, 0x00	; 0
    65ec:	f7 fe       	sbrs	r15, 7
    65ee:	0b c0       	rjmp	.+22     	; 0x6606 <vfprintf+0x1fe>
    65f0:	94 e0       	ldi	r25, 0x04	; 4
    65f2:	a9 2e       	mov	r10, r25
    65f4:	b1 2c       	mov	r11, r1
    65f6:	a0 0e       	add	r10, r16
    65f8:	b1 1e       	adc	r11, r17
    65fa:	f8 01       	movw	r30, r16
    65fc:	60 81       	ld	r22, Z
    65fe:	71 81       	ldd	r23, Z+1	; 0x01
    6600:	82 81       	ldd	r24, Z+2	; 0x02
    6602:	93 81       	ldd	r25, Z+3	; 0x03
    6604:	0a c0       	rjmp	.+20     	; 0x661a <vfprintf+0x212>
    6606:	82 e0       	ldi	r24, 0x02	; 2
    6608:	a8 2e       	mov	r10, r24
    660a:	b1 2c       	mov	r11, r1
    660c:	a0 0e       	add	r10, r16
    660e:	b1 1e       	adc	r11, r17
    6610:	f8 01       	movw	r30, r16
    6612:	60 81       	ld	r22, Z
    6614:	71 81       	ldd	r23, Z+1	; 0x01
    6616:	80 e0       	ldi	r24, 0x00	; 0
    6618:	90 e0       	ldi	r25, 0x00	; 0
    661a:	a4 01       	movw	r20, r8
    661c:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <__ultoa_invert>
    6620:	e8 2e       	mov	r14, r24
    6622:	e8 18       	sub	r14, r8
    6624:	0f 2d       	mov	r16, r15
    6626:	10 e0       	ldi	r17, 0x00	; 0
    6628:	f6 fe       	sbrs	r15, 6
    662a:	05 c0       	rjmp	.+10     	; 0x6636 <vfprintf+0x22e>
    662c:	8d e2       	ldi	r24, 0x2D	; 45
    662e:	90 e0       	ldi	r25, 0x00	; 0
    6630:	b6 01       	movw	r22, r12
    6632:	0e 94 4c 34 	call	0x6898	; 0x6898 <fputc>
    6636:	04 ff       	sbrs	r16, 4
    6638:	15 c0       	rjmp	.+42     	; 0x6664 <vfprintf+0x25c>
    663a:	fe 01       	movw	r30, r28
    663c:	ee 0d       	add	r30, r14
    663e:	f1 1d       	adc	r31, r1
    6640:	80 81       	ld	r24, Z
    6642:	80 33       	cpi	r24, 0x30	; 48
    6644:	79 f0       	breq	.+30     	; 0x6664 <vfprintf+0x25c>
    6646:	80 e3       	ldi	r24, 0x30	; 48
    6648:	90 e0       	ldi	r25, 0x00	; 0
    664a:	b6 01       	movw	r22, r12
    664c:	0e 94 4c 34 	call	0x6898	; 0x6898 <fputc>
    6650:	02 ff       	sbrs	r16, 2
    6652:	08 c0       	rjmp	.+16     	; 0x6664 <vfprintf+0x25c>
    6654:	c8 01       	movw	r24, r16
    6656:	80 72       	andi	r24, 0x20	; 32
    6658:	90 70       	andi	r25, 0x00	; 0
    665a:	88 5a       	subi	r24, 0xA8	; 168
    665c:	9f 4f       	sbci	r25, 0xFF	; 255
    665e:	b6 01       	movw	r22, r12
    6660:	0e 94 4c 34 	call	0x6898	; 0x6898 <fputc>
    6664:	ea 94       	dec	r14
    6666:	f4 01       	movw	r30, r8
    6668:	ee 0d       	add	r30, r14
    666a:	f1 1d       	adc	r31, r1
    666c:	80 81       	ld	r24, Z
    666e:	90 e0       	ldi	r25, 0x00	; 0
    6670:	b6 01       	movw	r22, r12
    6672:	0e 94 4c 34 	call	0x6898	; 0x6898 <fputc>
    6676:	ee 20       	and	r14, r14
    6678:	a9 f7       	brne	.-22     	; 0x6664 <vfprintf+0x25c>
    667a:	e6 ce       	rjmp	.-564    	; 0x6448 <vfprintf+0x40>
    667c:	f6 01       	movw	r30, r12
    667e:	26 81       	ldd	r18, Z+6	; 0x06
    6680:	37 81       	ldd	r19, Z+7	; 0x07
    6682:	02 c0       	rjmp	.+4      	; 0x6688 <vfprintf+0x280>
    6684:	2f ef       	ldi	r18, 0xFF	; 255
    6686:	3f ef       	ldi	r19, 0xFF	; 255
    6688:	c9 01       	movw	r24, r18
    668a:	2c 96       	adiw	r28, 0x0c	; 12
    668c:	0f b6       	in	r0, 0x3f	; 63
    668e:	f8 94       	cli
    6690:	de bf       	out	0x3e, r29	; 62
    6692:	0f be       	out	0x3f, r0	; 63
    6694:	cd bf       	out	0x3d, r28	; 61
    6696:	cf 91       	pop	r28
    6698:	df 91       	pop	r29
    669a:	1f 91       	pop	r17
    669c:	0f 91       	pop	r16
    669e:	ff 90       	pop	r15
    66a0:	ef 90       	pop	r14
    66a2:	df 90       	pop	r13
    66a4:	cf 90       	pop	r12
    66a6:	bf 90       	pop	r11
    66a8:	af 90       	pop	r10
    66aa:	9f 90       	pop	r9
    66ac:	8f 90       	pop	r8
    66ae:	7f 90       	pop	r7
    66b0:	6f 90       	pop	r6
    66b2:	08 95       	ret

000066b4 <__mulsi3>:
    66b4:	62 9f       	mul	r22, r18
    66b6:	d0 01       	movw	r26, r0
    66b8:	73 9f       	mul	r23, r19
    66ba:	f0 01       	movw	r30, r0
    66bc:	82 9f       	mul	r24, r18
    66be:	e0 0d       	add	r30, r0
    66c0:	f1 1d       	adc	r31, r1
    66c2:	64 9f       	mul	r22, r20
    66c4:	e0 0d       	add	r30, r0
    66c6:	f1 1d       	adc	r31, r1
    66c8:	92 9f       	mul	r25, r18
    66ca:	f0 0d       	add	r31, r0
    66cc:	83 9f       	mul	r24, r19
    66ce:	f0 0d       	add	r31, r0
    66d0:	74 9f       	mul	r23, r20
    66d2:	f0 0d       	add	r31, r0
    66d4:	65 9f       	mul	r22, r21
    66d6:	f0 0d       	add	r31, r0
    66d8:	99 27       	eor	r25, r25
    66da:	72 9f       	mul	r23, r18
    66dc:	b0 0d       	add	r27, r0
    66de:	e1 1d       	adc	r30, r1
    66e0:	f9 1f       	adc	r31, r25
    66e2:	63 9f       	mul	r22, r19
    66e4:	b0 0d       	add	r27, r0
    66e6:	e1 1d       	adc	r30, r1
    66e8:	f9 1f       	adc	r31, r25
    66ea:	bd 01       	movw	r22, r26
    66ec:	cf 01       	movw	r24, r30
    66ee:	11 24       	eor	r1, r1
    66f0:	08 95       	ret

000066f2 <__udivmodsi4>:
    66f2:	a1 e2       	ldi	r26, 0x21	; 33
    66f4:	1a 2e       	mov	r1, r26
    66f6:	aa 1b       	sub	r26, r26
    66f8:	bb 1b       	sub	r27, r27
    66fa:	fd 01       	movw	r30, r26
    66fc:	0d c0       	rjmp	.+26     	; 0x6718 <__udivmodsi4_ep>

000066fe <__udivmodsi4_loop>:
    66fe:	aa 1f       	adc	r26, r26
    6700:	bb 1f       	adc	r27, r27
    6702:	ee 1f       	adc	r30, r30
    6704:	ff 1f       	adc	r31, r31
    6706:	a2 17       	cp	r26, r18
    6708:	b3 07       	cpc	r27, r19
    670a:	e4 07       	cpc	r30, r20
    670c:	f5 07       	cpc	r31, r21
    670e:	20 f0       	brcs	.+8      	; 0x6718 <__udivmodsi4_ep>
    6710:	a2 1b       	sub	r26, r18
    6712:	b3 0b       	sbc	r27, r19
    6714:	e4 0b       	sbc	r30, r20
    6716:	f5 0b       	sbc	r31, r21

00006718 <__udivmodsi4_ep>:
    6718:	66 1f       	adc	r22, r22
    671a:	77 1f       	adc	r23, r23
    671c:	88 1f       	adc	r24, r24
    671e:	99 1f       	adc	r25, r25
    6720:	1a 94       	dec	r1
    6722:	69 f7       	brne	.-38     	; 0x66fe <__udivmodsi4_loop>
    6724:	60 95       	com	r22
    6726:	70 95       	com	r23
    6728:	80 95       	com	r24
    672a:	90 95       	com	r25
    672c:	9b 01       	movw	r18, r22
    672e:	ac 01       	movw	r20, r24
    6730:	bd 01       	movw	r22, r26
    6732:	cf 01       	movw	r24, r30
    6734:	08 95       	ret

00006736 <__divmodsi4>:
    6736:	97 fb       	bst	r25, 7
    6738:	09 2e       	mov	r0, r25
    673a:	05 26       	eor	r0, r21
    673c:	0e d0       	rcall	.+28     	; 0x675a <__divmodsi4_neg1>
    673e:	57 fd       	sbrc	r21, 7
    6740:	04 d0       	rcall	.+8      	; 0x674a <__divmodsi4_neg2>
    6742:	d7 df       	rcall	.-82     	; 0x66f2 <__udivmodsi4>
    6744:	0a d0       	rcall	.+20     	; 0x675a <__divmodsi4_neg1>
    6746:	00 1c       	adc	r0, r0
    6748:	38 f4       	brcc	.+14     	; 0x6758 <__divmodsi4_exit>

0000674a <__divmodsi4_neg2>:
    674a:	50 95       	com	r21
    674c:	40 95       	com	r20
    674e:	30 95       	com	r19
    6750:	21 95       	neg	r18
    6752:	3f 4f       	sbci	r19, 0xFF	; 255
    6754:	4f 4f       	sbci	r20, 0xFF	; 255
    6756:	5f 4f       	sbci	r21, 0xFF	; 255

00006758 <__divmodsi4_exit>:
    6758:	08 95       	ret

0000675a <__divmodsi4_neg1>:
    675a:	f6 f7       	brtc	.-4      	; 0x6758 <__divmodsi4_exit>
    675c:	90 95       	com	r25
    675e:	80 95       	com	r24
    6760:	70 95       	com	r23
    6762:	61 95       	neg	r22
    6764:	7f 4f       	sbci	r23, 0xFF	; 255
    6766:	8f 4f       	sbci	r24, 0xFF	; 255
    6768:	9f 4f       	sbci	r25, 0xFF	; 255
    676a:	08 95       	ret

0000676c <__prologue_saves__>:
    676c:	2f 92       	push	r2
    676e:	3f 92       	push	r3
    6770:	4f 92       	push	r4
    6772:	5f 92       	push	r5
    6774:	6f 92       	push	r6
    6776:	7f 92       	push	r7
    6778:	8f 92       	push	r8
    677a:	9f 92       	push	r9
    677c:	af 92       	push	r10
    677e:	bf 92       	push	r11
    6780:	cf 92       	push	r12
    6782:	df 92       	push	r13
    6784:	ef 92       	push	r14
    6786:	ff 92       	push	r15
    6788:	0f 93       	push	r16
    678a:	1f 93       	push	r17
    678c:	cf 93       	push	r28
    678e:	df 93       	push	r29
    6790:	cd b7       	in	r28, 0x3d	; 61
    6792:	de b7       	in	r29, 0x3e	; 62
    6794:	ca 1b       	sub	r28, r26
    6796:	db 0b       	sbc	r29, r27
    6798:	0f b6       	in	r0, 0x3f	; 63
    679a:	f8 94       	cli
    679c:	de bf       	out	0x3e, r29	; 62
    679e:	0f be       	out	0x3f, r0	; 63
    67a0:	cd bf       	out	0x3d, r28	; 61
    67a2:	09 94       	ijmp

000067a4 <__epilogue_restores__>:
    67a4:	2a 88       	ldd	r2, Y+18	; 0x12
    67a6:	39 88       	ldd	r3, Y+17	; 0x11
    67a8:	48 88       	ldd	r4, Y+16	; 0x10
    67aa:	5f 84       	ldd	r5, Y+15	; 0x0f
    67ac:	6e 84       	ldd	r6, Y+14	; 0x0e
    67ae:	7d 84       	ldd	r7, Y+13	; 0x0d
    67b0:	8c 84       	ldd	r8, Y+12	; 0x0c
    67b2:	9b 84       	ldd	r9, Y+11	; 0x0b
    67b4:	aa 84       	ldd	r10, Y+10	; 0x0a
    67b6:	b9 84       	ldd	r11, Y+9	; 0x09
    67b8:	c8 84       	ldd	r12, Y+8	; 0x08
    67ba:	df 80       	ldd	r13, Y+7	; 0x07
    67bc:	ee 80       	ldd	r14, Y+6	; 0x06
    67be:	fd 80       	ldd	r15, Y+5	; 0x05
    67c0:	0c 81       	ldd	r16, Y+4	; 0x04
    67c2:	1b 81       	ldd	r17, Y+3	; 0x03
    67c4:	aa 81       	ldd	r26, Y+2	; 0x02
    67c6:	b9 81       	ldd	r27, Y+1	; 0x01
    67c8:	ce 0f       	add	r28, r30
    67ca:	d1 1d       	adc	r29, r1
    67cc:	0f b6       	in	r0, 0x3f	; 63
    67ce:	f8 94       	cli
    67d0:	de bf       	out	0x3e, r29	; 62
    67d2:	0f be       	out	0x3f, r0	; 63
    67d4:	cd bf       	out	0x3d, r28	; 61
    67d6:	ed 01       	movw	r28, r26
    67d8:	08 95       	ret

000067da <strchr_P>:
    67da:	fc 01       	movw	r30, r24
    67dc:	05 90       	lpm	r0, Z+
    67de:	06 16       	cp	r0, r22
    67e0:	21 f0       	breq	.+8      	; 0x67ea <strchr_P+0x10>
    67e2:	00 20       	and	r0, r0
    67e4:	d9 f7       	brne	.-10     	; 0x67dc <strchr_P+0x2>
    67e6:	c0 01       	movw	r24, r0
    67e8:	08 95       	ret
    67ea:	31 97       	sbiw	r30, 0x01	; 1
    67ec:	cf 01       	movw	r24, r30
    67ee:	08 95       	ret

000067f0 <memcpy>:
    67f0:	fb 01       	movw	r30, r22
    67f2:	dc 01       	movw	r26, r24
    67f4:	02 c0       	rjmp	.+4      	; 0x67fa <memcpy+0xa>
    67f6:	01 90       	ld	r0, Z+
    67f8:	0d 92       	st	X+, r0
    67fa:	41 50       	subi	r20, 0x01	; 1
    67fc:	50 40       	sbci	r21, 0x00	; 0
    67fe:	d8 f7       	brcc	.-10     	; 0x67f6 <memcpy+0x6>
    6800:	08 95       	ret

00006802 <fdevopen>:
    6802:	0f 93       	push	r16
    6804:	1f 93       	push	r17
    6806:	cf 93       	push	r28
    6808:	df 93       	push	r29
    680a:	8c 01       	movw	r16, r24
    680c:	eb 01       	movw	r28, r22
    680e:	00 97       	sbiw	r24, 0x00	; 0
    6810:	11 f4       	brne	.+4      	; 0x6816 <fdevopen+0x14>
    6812:	20 97       	sbiw	r28, 0x00	; 0
    6814:	c9 f1       	breq	.+114    	; 0x6888 <fdevopen+0x86>
    6816:	81 e0       	ldi	r24, 0x01	; 1
    6818:	90 e0       	ldi	r25, 0x00	; 0
    681a:	6e e0       	ldi	r22, 0x0E	; 14
    681c:	70 e0       	ldi	r23, 0x00	; 0
    681e:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <calloc>
    6822:	fc 01       	movw	r30, r24
    6824:	9c 01       	movw	r18, r24
    6826:	00 97       	sbiw	r24, 0x00	; 0
    6828:	89 f1       	breq	.+98     	; 0x688c <fdevopen+0x8a>
    682a:	80 e8       	ldi	r24, 0x80	; 128
    682c:	83 83       	std	Z+3, r24	; 0x03
    682e:	20 97       	sbiw	r28, 0x00	; 0
    6830:	71 f0       	breq	.+28     	; 0x684e <fdevopen+0x4c>
    6832:	d3 87       	std	Z+11, r29	; 0x0b
    6834:	c2 87       	std	Z+10, r28	; 0x0a
    6836:	81 e8       	ldi	r24, 0x81	; 129
    6838:	83 83       	std	Z+3, r24	; 0x03
    683a:	80 91 9a 07 	lds	r24, 0x079A
    683e:	90 91 9b 07 	lds	r25, 0x079B
    6842:	00 97       	sbiw	r24, 0x00	; 0
    6844:	21 f4       	brne	.+8      	; 0x684e <fdevopen+0x4c>
    6846:	f0 93 9b 07 	sts	0x079B, r31
    684a:	e0 93 9a 07 	sts	0x079A, r30
    684e:	01 15       	cp	r16, r1
    6850:	11 05       	cpc	r17, r1
    6852:	e1 f0       	breq	.+56     	; 0x688c <fdevopen+0x8a>
    6854:	11 87       	std	Z+9, r17	; 0x09
    6856:	00 87       	std	Z+8, r16	; 0x08
    6858:	83 81       	ldd	r24, Z+3	; 0x03
    685a:	82 60       	ori	r24, 0x02	; 2
    685c:	83 83       	std	Z+3, r24	; 0x03
    685e:	80 91 9c 07 	lds	r24, 0x079C
    6862:	90 91 9d 07 	lds	r25, 0x079D
    6866:	00 97       	sbiw	r24, 0x00	; 0
    6868:	89 f4       	brne	.+34     	; 0x688c <fdevopen+0x8a>
    686a:	f0 93 9d 07 	sts	0x079D, r31
    686e:	e0 93 9c 07 	sts	0x079C, r30
    6872:	80 91 9e 07 	lds	r24, 0x079E
    6876:	90 91 9f 07 	lds	r25, 0x079F
    687a:	00 97       	sbiw	r24, 0x00	; 0
    687c:	39 f4       	brne	.+14     	; 0x688c <fdevopen+0x8a>
    687e:	f0 93 9f 07 	sts	0x079F, r31
    6882:	e0 93 9e 07 	sts	0x079E, r30
    6886:	02 c0       	rjmp	.+4      	; 0x688c <fdevopen+0x8a>
    6888:	20 e0       	ldi	r18, 0x00	; 0
    688a:	30 e0       	ldi	r19, 0x00	; 0
    688c:	c9 01       	movw	r24, r18
    688e:	df 91       	pop	r29
    6890:	cf 91       	pop	r28
    6892:	1f 91       	pop	r17
    6894:	0f 91       	pop	r16
    6896:	08 95       	ret

00006898 <fputc>:
    6898:	0f 93       	push	r16
    689a:	1f 93       	push	r17
    689c:	cf 93       	push	r28
    689e:	df 93       	push	r29
    68a0:	8c 01       	movw	r16, r24
    68a2:	eb 01       	movw	r28, r22
    68a4:	8b 81       	ldd	r24, Y+3	; 0x03
    68a6:	81 ff       	sbrs	r24, 1
    68a8:	1b c0       	rjmp	.+54     	; 0x68e0 <fputc+0x48>
    68aa:	82 ff       	sbrs	r24, 2
    68ac:	0d c0       	rjmp	.+26     	; 0x68c8 <fputc+0x30>
    68ae:	2e 81       	ldd	r18, Y+6	; 0x06
    68b0:	3f 81       	ldd	r19, Y+7	; 0x07
    68b2:	8c 81       	ldd	r24, Y+4	; 0x04
    68b4:	9d 81       	ldd	r25, Y+5	; 0x05
    68b6:	28 17       	cp	r18, r24
    68b8:	39 07       	cpc	r19, r25
    68ba:	64 f4       	brge	.+24     	; 0x68d4 <fputc+0x3c>
    68bc:	e8 81       	ld	r30, Y
    68be:	f9 81       	ldd	r31, Y+1	; 0x01
    68c0:	01 93       	st	Z+, r16
    68c2:	f9 83       	std	Y+1, r31	; 0x01
    68c4:	e8 83       	st	Y, r30
    68c6:	06 c0       	rjmp	.+12     	; 0x68d4 <fputc+0x3c>
    68c8:	e8 85       	ldd	r30, Y+8	; 0x08
    68ca:	f9 85       	ldd	r31, Y+9	; 0x09
    68cc:	80 2f       	mov	r24, r16
    68ce:	09 95       	icall
    68d0:	00 97       	sbiw	r24, 0x00	; 0
    68d2:	31 f4       	brne	.+12     	; 0x68e0 <fputc+0x48>
    68d4:	8e 81       	ldd	r24, Y+6	; 0x06
    68d6:	9f 81       	ldd	r25, Y+7	; 0x07
    68d8:	01 96       	adiw	r24, 0x01	; 1
    68da:	9f 83       	std	Y+7, r25	; 0x07
    68dc:	8e 83       	std	Y+6, r24	; 0x06
    68de:	02 c0       	rjmp	.+4      	; 0x68e4 <fputc+0x4c>
    68e0:	0f ef       	ldi	r16, 0xFF	; 255
    68e2:	1f ef       	ldi	r17, 0xFF	; 255
    68e4:	c8 01       	movw	r24, r16
    68e6:	df 91       	pop	r29
    68e8:	cf 91       	pop	r28
    68ea:	1f 91       	pop	r17
    68ec:	0f 91       	pop	r16
    68ee:	08 95       	ret

000068f0 <printf>:
    68f0:	df 93       	push	r29
    68f2:	cf 93       	push	r28
    68f4:	cd b7       	in	r28, 0x3d	; 61
    68f6:	de b7       	in	r29, 0x3e	; 62
    68f8:	fe 01       	movw	r30, r28
    68fa:	35 96       	adiw	r30, 0x05	; 5
    68fc:	61 91       	ld	r22, Z+
    68fe:	71 91       	ld	r23, Z+
    6900:	80 91 9c 07 	lds	r24, 0x079C
    6904:	90 91 9d 07 	lds	r25, 0x079D
    6908:	af 01       	movw	r20, r30
    690a:	0e 94 04 32 	call	0x6408	; 0x6408 <vfprintf>
    690e:	cf 91       	pop	r28
    6910:	df 91       	pop	r29
    6912:	08 95       	ret

00006914 <putchar>:
    6914:	60 91 9c 07 	lds	r22, 0x079C
    6918:	70 91 9d 07 	lds	r23, 0x079D
    691c:	0e 94 4c 34 	call	0x6898	; 0x6898 <fputc>
    6920:	08 95       	ret

00006922 <puts>:
    6922:	ef 92       	push	r14
    6924:	ff 92       	push	r15
    6926:	0f 93       	push	r16
    6928:	1f 93       	push	r17
    692a:	cf 93       	push	r28
    692c:	df 93       	push	r29
    692e:	8c 01       	movw	r16, r24
    6930:	e0 91 9c 07 	lds	r30, 0x079C
    6934:	f0 91 9d 07 	lds	r31, 0x079D
    6938:	83 81       	ldd	r24, Z+3	; 0x03
    693a:	81 ff       	sbrs	r24, 1
    693c:	1f c0       	rjmp	.+62     	; 0x697c <puts+0x5a>
    693e:	c0 e0       	ldi	r28, 0x00	; 0
    6940:	d0 e0       	ldi	r29, 0x00	; 0
    6942:	0a c0       	rjmp	.+20     	; 0x6958 <puts+0x36>
    6944:	db 01       	movw	r26, r22
    6946:	18 96       	adiw	r26, 0x08	; 8
    6948:	ed 91       	ld	r30, X+
    694a:	fc 91       	ld	r31, X
    694c:	19 97       	sbiw	r26, 0x09	; 9
    694e:	09 95       	icall
    6950:	00 97       	sbiw	r24, 0x00	; 0
    6952:	11 f0       	breq	.+4      	; 0x6958 <puts+0x36>
    6954:	cf ef       	ldi	r28, 0xFF	; 255
    6956:	df ef       	ldi	r29, 0xFF	; 255
    6958:	f8 01       	movw	r30, r16
    695a:	81 91       	ld	r24, Z+
    695c:	8f 01       	movw	r16, r30
    695e:	60 91 9c 07 	lds	r22, 0x079C
    6962:	70 91 9d 07 	lds	r23, 0x079D
    6966:	88 23       	and	r24, r24
    6968:	69 f7       	brne	.-38     	; 0x6944 <puts+0x22>
    696a:	db 01       	movw	r26, r22
    696c:	18 96       	adiw	r26, 0x08	; 8
    696e:	ed 91       	ld	r30, X+
    6970:	fc 91       	ld	r31, X
    6972:	19 97       	sbiw	r26, 0x09	; 9
    6974:	8a e0       	ldi	r24, 0x0A	; 10
    6976:	09 95       	icall
    6978:	00 97       	sbiw	r24, 0x00	; 0
    697a:	11 f0       	breq	.+4      	; 0x6980 <puts+0x5e>
    697c:	cf ef       	ldi	r28, 0xFF	; 255
    697e:	df ef       	ldi	r29, 0xFF	; 255
    6980:	ce 01       	movw	r24, r28
    6982:	df 91       	pop	r29
    6984:	cf 91       	pop	r28
    6986:	1f 91       	pop	r17
    6988:	0f 91       	pop	r16
    698a:	ff 90       	pop	r15
    698c:	ef 90       	pop	r14
    698e:	08 95       	ret

00006990 <sprintf>:
    6990:	0f 93       	push	r16
    6992:	1f 93       	push	r17
    6994:	df 93       	push	r29
    6996:	cf 93       	push	r28
    6998:	cd b7       	in	r28, 0x3d	; 61
    699a:	de b7       	in	r29, 0x3e	; 62
    699c:	2e 97       	sbiw	r28, 0x0e	; 14
    699e:	0f b6       	in	r0, 0x3f	; 63
    69a0:	f8 94       	cli
    69a2:	de bf       	out	0x3e, r29	; 62
    69a4:	0f be       	out	0x3f, r0	; 63
    69a6:	cd bf       	out	0x3d, r28	; 61
    69a8:	0d 89       	ldd	r16, Y+21	; 0x15
    69aa:	1e 89       	ldd	r17, Y+22	; 0x16
    69ac:	86 e0       	ldi	r24, 0x06	; 6
    69ae:	8c 83       	std	Y+4, r24	; 0x04
    69b0:	1a 83       	std	Y+2, r17	; 0x02
    69b2:	09 83       	std	Y+1, r16	; 0x01
    69b4:	8f ef       	ldi	r24, 0xFF	; 255
    69b6:	9f e7       	ldi	r25, 0x7F	; 127
    69b8:	9e 83       	std	Y+6, r25	; 0x06
    69ba:	8d 83       	std	Y+5, r24	; 0x05
    69bc:	9e 01       	movw	r18, r28
    69be:	27 5e       	subi	r18, 0xE7	; 231
    69c0:	3f 4f       	sbci	r19, 0xFF	; 255
    69c2:	ce 01       	movw	r24, r28
    69c4:	01 96       	adiw	r24, 0x01	; 1
    69c6:	6f 89       	ldd	r22, Y+23	; 0x17
    69c8:	78 8d       	ldd	r23, Y+24	; 0x18
    69ca:	a9 01       	movw	r20, r18
    69cc:	0e 94 04 32 	call	0x6408	; 0x6408 <vfprintf>
    69d0:	ef 81       	ldd	r30, Y+7	; 0x07
    69d2:	f8 85       	ldd	r31, Y+8	; 0x08
    69d4:	e0 0f       	add	r30, r16
    69d6:	f1 1f       	adc	r31, r17
    69d8:	10 82       	st	Z, r1
    69da:	2e 96       	adiw	r28, 0x0e	; 14
    69dc:	0f b6       	in	r0, 0x3f	; 63
    69de:	f8 94       	cli
    69e0:	de bf       	out	0x3e, r29	; 62
    69e2:	0f be       	out	0x3f, r0	; 63
    69e4:	cd bf       	out	0x3d, r28	; 61
    69e6:	cf 91       	pop	r28
    69e8:	df 91       	pop	r29
    69ea:	1f 91       	pop	r17
    69ec:	0f 91       	pop	r16
    69ee:	08 95       	ret

000069f0 <__ultoa_invert>:
    69f0:	fa 01       	movw	r30, r20
    69f2:	aa 27       	eor	r26, r26
    69f4:	28 30       	cpi	r18, 0x08	; 8
    69f6:	51 f1       	breq	.+84     	; 0x6a4c <__ultoa_invert+0x5c>
    69f8:	20 31       	cpi	r18, 0x10	; 16
    69fa:	81 f1       	breq	.+96     	; 0x6a5c <__ultoa_invert+0x6c>
    69fc:	e8 94       	clt
    69fe:	6f 93       	push	r22
    6a00:	6e 7f       	andi	r22, 0xFE	; 254
    6a02:	6e 5f       	subi	r22, 0xFE	; 254
    6a04:	7f 4f       	sbci	r23, 0xFF	; 255
    6a06:	8f 4f       	sbci	r24, 0xFF	; 255
    6a08:	9f 4f       	sbci	r25, 0xFF	; 255
    6a0a:	af 4f       	sbci	r26, 0xFF	; 255
    6a0c:	b1 e0       	ldi	r27, 0x01	; 1
    6a0e:	3e d0       	rcall	.+124    	; 0x6a8c <__ultoa_invert+0x9c>
    6a10:	b4 e0       	ldi	r27, 0x04	; 4
    6a12:	3c d0       	rcall	.+120    	; 0x6a8c <__ultoa_invert+0x9c>
    6a14:	67 0f       	add	r22, r23
    6a16:	78 1f       	adc	r23, r24
    6a18:	89 1f       	adc	r24, r25
    6a1a:	9a 1f       	adc	r25, r26
    6a1c:	a1 1d       	adc	r26, r1
    6a1e:	68 0f       	add	r22, r24
    6a20:	79 1f       	adc	r23, r25
    6a22:	8a 1f       	adc	r24, r26
    6a24:	91 1d       	adc	r25, r1
    6a26:	a1 1d       	adc	r26, r1
    6a28:	6a 0f       	add	r22, r26
    6a2a:	71 1d       	adc	r23, r1
    6a2c:	81 1d       	adc	r24, r1
    6a2e:	91 1d       	adc	r25, r1
    6a30:	a1 1d       	adc	r26, r1
    6a32:	20 d0       	rcall	.+64     	; 0x6a74 <__ultoa_invert+0x84>
    6a34:	09 f4       	brne	.+2      	; 0x6a38 <__ultoa_invert+0x48>
    6a36:	68 94       	set
    6a38:	3f 91       	pop	r19
    6a3a:	2a e0       	ldi	r18, 0x0A	; 10
    6a3c:	26 9f       	mul	r18, r22
    6a3e:	11 24       	eor	r1, r1
    6a40:	30 19       	sub	r19, r0
    6a42:	30 5d       	subi	r19, 0xD0	; 208
    6a44:	31 93       	st	Z+, r19
    6a46:	de f6       	brtc	.-74     	; 0x69fe <__ultoa_invert+0xe>
    6a48:	cf 01       	movw	r24, r30
    6a4a:	08 95       	ret
    6a4c:	46 2f       	mov	r20, r22
    6a4e:	47 70       	andi	r20, 0x07	; 7
    6a50:	40 5d       	subi	r20, 0xD0	; 208
    6a52:	41 93       	st	Z+, r20
    6a54:	b3 e0       	ldi	r27, 0x03	; 3
    6a56:	0f d0       	rcall	.+30     	; 0x6a76 <__ultoa_invert+0x86>
    6a58:	c9 f7       	brne	.-14     	; 0x6a4c <__ultoa_invert+0x5c>
    6a5a:	f6 cf       	rjmp	.-20     	; 0x6a48 <__ultoa_invert+0x58>
    6a5c:	46 2f       	mov	r20, r22
    6a5e:	4f 70       	andi	r20, 0x0F	; 15
    6a60:	40 5d       	subi	r20, 0xD0	; 208
    6a62:	4a 33       	cpi	r20, 0x3A	; 58
    6a64:	18 f0       	brcs	.+6      	; 0x6a6c <__ultoa_invert+0x7c>
    6a66:	49 5d       	subi	r20, 0xD9	; 217
    6a68:	31 fd       	sbrc	r19, 1
    6a6a:	40 52       	subi	r20, 0x20	; 32
    6a6c:	41 93       	st	Z+, r20
    6a6e:	02 d0       	rcall	.+4      	; 0x6a74 <__ultoa_invert+0x84>
    6a70:	a9 f7       	brne	.-22     	; 0x6a5c <__ultoa_invert+0x6c>
    6a72:	ea cf       	rjmp	.-44     	; 0x6a48 <__ultoa_invert+0x58>
    6a74:	b4 e0       	ldi	r27, 0x04	; 4
    6a76:	a6 95       	lsr	r26
    6a78:	97 95       	ror	r25
    6a7a:	87 95       	ror	r24
    6a7c:	77 95       	ror	r23
    6a7e:	67 95       	ror	r22
    6a80:	ba 95       	dec	r27
    6a82:	c9 f7       	brne	.-14     	; 0x6a76 <__ultoa_invert+0x86>
    6a84:	00 97       	sbiw	r24, 0x00	; 0
    6a86:	61 05       	cpc	r22, r1
    6a88:	71 05       	cpc	r23, r1
    6a8a:	08 95       	ret
    6a8c:	9b 01       	movw	r18, r22
    6a8e:	ac 01       	movw	r20, r24
    6a90:	0a 2e       	mov	r0, r26
    6a92:	06 94       	lsr	r0
    6a94:	57 95       	ror	r21
    6a96:	47 95       	ror	r20
    6a98:	37 95       	ror	r19
    6a9a:	27 95       	ror	r18
    6a9c:	ba 95       	dec	r27
    6a9e:	c9 f7       	brne	.-14     	; 0x6a92 <__ultoa_invert+0xa2>
    6aa0:	62 0f       	add	r22, r18
    6aa2:	73 1f       	adc	r23, r19
    6aa4:	84 1f       	adc	r24, r20
    6aa6:	95 1f       	adc	r25, r21
    6aa8:	a0 1d       	adc	r26, r0
    6aaa:	08 95       	ret

00006aac <__eerd_byte_m128rfa1>:
    6aac:	f9 99       	sbic	0x1f, 1	; 31
    6aae:	fe cf       	rjmp	.-4      	; 0x6aac <__eerd_byte_m128rfa1>
    6ab0:	92 bd       	out	0x22, r25	; 34
    6ab2:	81 bd       	out	0x21, r24	; 33
    6ab4:	f8 9a       	sbi	0x1f, 0	; 31
    6ab6:	99 27       	eor	r25, r25
    6ab8:	80 b5       	in	r24, 0x20	; 32
    6aba:	08 95       	ret

00006abc <__eewr_byte_m128rfa1>:
    6abc:	26 2f       	mov	r18, r22

00006abe <__eewr_r18_m128rfa1>:
    6abe:	f9 99       	sbic	0x1f, 1	; 31
    6ac0:	fe cf       	rjmp	.-4      	; 0x6abe <__eewr_r18_m128rfa1>
    6ac2:	1f ba       	out	0x1f, r1	; 31
    6ac4:	92 bd       	out	0x22, r25	; 34
    6ac6:	81 bd       	out	0x21, r24	; 33
    6ac8:	20 bd       	out	0x20, r18	; 32
    6aca:	0f b6       	in	r0, 0x3f	; 63
    6acc:	f8 94       	cli
    6ace:	fa 9a       	sbi	0x1f, 2	; 31
    6ad0:	f9 9a       	sbi	0x1f, 1	; 31
    6ad2:	0f be       	out	0x3f, r0	; 63
    6ad4:	01 96       	adiw	r24, 0x01	; 1
    6ad6:	08 95       	ret

00006ad8 <calloc>:
    6ad8:	ef 92       	push	r14
    6ada:	ff 92       	push	r15
    6adc:	0f 93       	push	r16
    6ade:	1f 93       	push	r17
    6ae0:	cf 93       	push	r28
    6ae2:	df 93       	push	r29
    6ae4:	68 9f       	mul	r22, r24
    6ae6:	80 01       	movw	r16, r0
    6ae8:	69 9f       	mul	r22, r25
    6aea:	10 0d       	add	r17, r0
    6aec:	78 9f       	mul	r23, r24
    6aee:	10 0d       	add	r17, r0
    6af0:	11 24       	eor	r1, r1
    6af2:	c8 01       	movw	r24, r16
    6af4:	0e 94 91 35 	call	0x6b22	; 0x6b22 <malloc>
    6af8:	e8 2e       	mov	r14, r24
    6afa:	e7 01       	movw	r28, r14
    6afc:	7e 01       	movw	r14, r28
    6afe:	f9 2e       	mov	r15, r25
    6b00:	e7 01       	movw	r28, r14
    6b02:	20 97       	sbiw	r28, 0x00	; 0
    6b04:	31 f0       	breq	.+12     	; 0x6b12 <calloc+0x3a>
    6b06:	8e 2d       	mov	r24, r14
    6b08:	60 e0       	ldi	r22, 0x00	; 0
    6b0a:	70 e0       	ldi	r23, 0x00	; 0
    6b0c:	a8 01       	movw	r20, r16
    6b0e:	0e 94 c4 36 	call	0x6d88	; 0x6d88 <memset>
    6b12:	ce 01       	movw	r24, r28
    6b14:	df 91       	pop	r29
    6b16:	cf 91       	pop	r28
    6b18:	1f 91       	pop	r17
    6b1a:	0f 91       	pop	r16
    6b1c:	ff 90       	pop	r15
    6b1e:	ef 90       	pop	r14
    6b20:	08 95       	ret

00006b22 <malloc>:
    6b22:	cf 93       	push	r28
    6b24:	df 93       	push	r29
    6b26:	82 30       	cpi	r24, 0x02	; 2
    6b28:	91 05       	cpc	r25, r1
    6b2a:	10 f4       	brcc	.+4      	; 0x6b30 <malloc+0xe>
    6b2c:	82 e0       	ldi	r24, 0x02	; 2
    6b2e:	90 e0       	ldi	r25, 0x00	; 0
    6b30:	e0 91 a2 07 	lds	r30, 0x07A2
    6b34:	f0 91 a3 07 	lds	r31, 0x07A3
    6b38:	40 e0       	ldi	r20, 0x00	; 0
    6b3a:	50 e0       	ldi	r21, 0x00	; 0
    6b3c:	20 e0       	ldi	r18, 0x00	; 0
    6b3e:	30 e0       	ldi	r19, 0x00	; 0
    6b40:	26 c0       	rjmp	.+76     	; 0x6b8e <malloc+0x6c>
    6b42:	60 81       	ld	r22, Z
    6b44:	71 81       	ldd	r23, Z+1	; 0x01
    6b46:	68 17       	cp	r22, r24
    6b48:	79 07       	cpc	r23, r25
    6b4a:	e0 f0       	brcs	.+56     	; 0x6b84 <malloc+0x62>
    6b4c:	68 17       	cp	r22, r24
    6b4e:	79 07       	cpc	r23, r25
    6b50:	81 f4       	brne	.+32     	; 0x6b72 <malloc+0x50>
    6b52:	82 81       	ldd	r24, Z+2	; 0x02
    6b54:	93 81       	ldd	r25, Z+3	; 0x03
    6b56:	21 15       	cp	r18, r1
    6b58:	31 05       	cpc	r19, r1
    6b5a:	31 f0       	breq	.+12     	; 0x6b68 <malloc+0x46>
    6b5c:	d9 01       	movw	r26, r18
    6b5e:	13 96       	adiw	r26, 0x03	; 3
    6b60:	9c 93       	st	X, r25
    6b62:	8e 93       	st	-X, r24
    6b64:	12 97       	sbiw	r26, 0x02	; 2
    6b66:	2b c0       	rjmp	.+86     	; 0x6bbe <malloc+0x9c>
    6b68:	90 93 a3 07 	sts	0x07A3, r25
    6b6c:	80 93 a2 07 	sts	0x07A2, r24
    6b70:	26 c0       	rjmp	.+76     	; 0x6bbe <malloc+0x9c>
    6b72:	41 15       	cp	r20, r1
    6b74:	51 05       	cpc	r21, r1
    6b76:	19 f0       	breq	.+6      	; 0x6b7e <malloc+0x5c>
    6b78:	64 17       	cp	r22, r20
    6b7a:	75 07       	cpc	r23, r21
    6b7c:	18 f4       	brcc	.+6      	; 0x6b84 <malloc+0x62>
    6b7e:	ab 01       	movw	r20, r22
    6b80:	e9 01       	movw	r28, r18
    6b82:	df 01       	movw	r26, r30
    6b84:	9f 01       	movw	r18, r30
    6b86:	72 81       	ldd	r23, Z+2	; 0x02
    6b88:	63 81       	ldd	r22, Z+3	; 0x03
    6b8a:	e7 2f       	mov	r30, r23
    6b8c:	f6 2f       	mov	r31, r22
    6b8e:	30 97       	sbiw	r30, 0x00	; 0
    6b90:	c1 f6       	brne	.-80     	; 0x6b42 <malloc+0x20>
    6b92:	41 15       	cp	r20, r1
    6b94:	51 05       	cpc	r21, r1
    6b96:	01 f1       	breq	.+64     	; 0x6bd8 <malloc+0xb6>
    6b98:	48 1b       	sub	r20, r24
    6b9a:	59 0b       	sbc	r21, r25
    6b9c:	44 30       	cpi	r20, 0x04	; 4
    6b9e:	51 05       	cpc	r21, r1
    6ba0:	80 f4       	brcc	.+32     	; 0x6bc2 <malloc+0xa0>
    6ba2:	12 96       	adiw	r26, 0x02	; 2
    6ba4:	8d 91       	ld	r24, X+
    6ba6:	9c 91       	ld	r25, X
    6ba8:	13 97       	sbiw	r26, 0x03	; 3
    6baa:	20 97       	sbiw	r28, 0x00	; 0
    6bac:	19 f0       	breq	.+6      	; 0x6bb4 <malloc+0x92>
    6bae:	9b 83       	std	Y+3, r25	; 0x03
    6bb0:	8a 83       	std	Y+2, r24	; 0x02
    6bb2:	04 c0       	rjmp	.+8      	; 0x6bbc <malloc+0x9a>
    6bb4:	90 93 a3 07 	sts	0x07A3, r25
    6bb8:	80 93 a2 07 	sts	0x07A2, r24
    6bbc:	fd 01       	movw	r30, r26
    6bbe:	32 96       	adiw	r30, 0x02	; 2
    6bc0:	46 c0       	rjmp	.+140    	; 0x6c4e <malloc+0x12c>
    6bc2:	fd 01       	movw	r30, r26
    6bc4:	e4 0f       	add	r30, r20
    6bc6:	f5 1f       	adc	r31, r21
    6bc8:	81 93       	st	Z+, r24
    6bca:	91 93       	st	Z+, r25
    6bcc:	42 50       	subi	r20, 0x02	; 2
    6bce:	50 40       	sbci	r21, 0x00	; 0
    6bd0:	11 96       	adiw	r26, 0x01	; 1
    6bd2:	5c 93       	st	X, r21
    6bd4:	4e 93       	st	-X, r20
    6bd6:	3b c0       	rjmp	.+118    	; 0x6c4e <malloc+0x12c>
    6bd8:	20 91 a0 07 	lds	r18, 0x07A0
    6bdc:	30 91 a1 07 	lds	r19, 0x07A1
    6be0:	21 15       	cp	r18, r1
    6be2:	31 05       	cpc	r19, r1
    6be4:	41 f4       	brne	.+16     	; 0x6bf6 <malloc+0xd4>
    6be6:	20 91 31 05 	lds	r18, 0x0531
    6bea:	30 91 32 05 	lds	r19, 0x0532
    6bee:	30 93 a1 07 	sts	0x07A1, r19
    6bf2:	20 93 a0 07 	sts	0x07A0, r18
    6bf6:	20 91 33 05 	lds	r18, 0x0533
    6bfa:	30 91 34 05 	lds	r19, 0x0534
    6bfe:	21 15       	cp	r18, r1
    6c00:	31 05       	cpc	r19, r1
    6c02:	41 f4       	brne	.+16     	; 0x6c14 <malloc+0xf2>
    6c04:	2d b7       	in	r18, 0x3d	; 61
    6c06:	3e b7       	in	r19, 0x3e	; 62
    6c08:	40 91 2f 05 	lds	r20, 0x052F
    6c0c:	50 91 30 05 	lds	r21, 0x0530
    6c10:	24 1b       	sub	r18, r20
    6c12:	35 0b       	sbc	r19, r21
    6c14:	e0 91 a0 07 	lds	r30, 0x07A0
    6c18:	f0 91 a1 07 	lds	r31, 0x07A1
    6c1c:	e2 17       	cp	r30, r18
    6c1e:	f3 07       	cpc	r31, r19
    6c20:	a0 f4       	brcc	.+40     	; 0x6c4a <malloc+0x128>
    6c22:	2e 1b       	sub	r18, r30
    6c24:	3f 0b       	sbc	r19, r31
    6c26:	28 17       	cp	r18, r24
    6c28:	39 07       	cpc	r19, r25
    6c2a:	78 f0       	brcs	.+30     	; 0x6c4a <malloc+0x128>
    6c2c:	ac 01       	movw	r20, r24
    6c2e:	4e 5f       	subi	r20, 0xFE	; 254
    6c30:	5f 4f       	sbci	r21, 0xFF	; 255
    6c32:	24 17       	cp	r18, r20
    6c34:	35 07       	cpc	r19, r21
    6c36:	48 f0       	brcs	.+18     	; 0x6c4a <malloc+0x128>
    6c38:	4e 0f       	add	r20, r30
    6c3a:	5f 1f       	adc	r21, r31
    6c3c:	50 93 a1 07 	sts	0x07A1, r21
    6c40:	40 93 a0 07 	sts	0x07A0, r20
    6c44:	81 93       	st	Z+, r24
    6c46:	91 93       	st	Z+, r25
    6c48:	02 c0       	rjmp	.+4      	; 0x6c4e <malloc+0x12c>
    6c4a:	e0 e0       	ldi	r30, 0x00	; 0
    6c4c:	f0 e0       	ldi	r31, 0x00	; 0
    6c4e:	cf 01       	movw	r24, r30
    6c50:	df 91       	pop	r29
    6c52:	cf 91       	pop	r28
    6c54:	08 95       	ret

00006c56 <free>:
    6c56:	cf 93       	push	r28
    6c58:	df 93       	push	r29
    6c5a:	00 97       	sbiw	r24, 0x00	; 0
    6c5c:	09 f4       	brne	.+2      	; 0x6c60 <free+0xa>
    6c5e:	91 c0       	rjmp	.+290    	; 0x6d82 <free+0x12c>
    6c60:	fc 01       	movw	r30, r24
    6c62:	32 97       	sbiw	r30, 0x02	; 2
    6c64:	13 82       	std	Z+3, r1	; 0x03
    6c66:	12 82       	std	Z+2, r1	; 0x02
    6c68:	60 91 a2 07 	lds	r22, 0x07A2
    6c6c:	70 91 a3 07 	lds	r23, 0x07A3
    6c70:	61 15       	cp	r22, r1
    6c72:	71 05       	cpc	r23, r1
    6c74:	81 f4       	brne	.+32     	; 0x6c96 <free+0x40>
    6c76:	20 81       	ld	r18, Z
    6c78:	31 81       	ldd	r19, Z+1	; 0x01
    6c7a:	28 0f       	add	r18, r24
    6c7c:	39 1f       	adc	r19, r25
    6c7e:	80 91 a0 07 	lds	r24, 0x07A0
    6c82:	90 91 a1 07 	lds	r25, 0x07A1
    6c86:	82 17       	cp	r24, r18
    6c88:	93 07       	cpc	r25, r19
    6c8a:	99 f5       	brne	.+102    	; 0x6cf2 <free+0x9c>
    6c8c:	f0 93 a1 07 	sts	0x07A1, r31
    6c90:	e0 93 a0 07 	sts	0x07A0, r30
    6c94:	76 c0       	rjmp	.+236    	; 0x6d82 <free+0x12c>
    6c96:	db 01       	movw	r26, r22
    6c98:	80 e0       	ldi	r24, 0x00	; 0
    6c9a:	90 e0       	ldi	r25, 0x00	; 0
    6c9c:	02 c0       	rjmp	.+4      	; 0x6ca2 <free+0x4c>
    6c9e:	cd 01       	movw	r24, r26
    6ca0:	d9 01       	movw	r26, r18
    6ca2:	ae 17       	cp	r26, r30
    6ca4:	bf 07       	cpc	r27, r31
    6ca6:	48 f4       	brcc	.+18     	; 0x6cba <free+0x64>
    6ca8:	12 96       	adiw	r26, 0x02	; 2
    6caa:	2d 91       	ld	r18, X+
    6cac:	3c 91       	ld	r19, X
    6cae:	13 97       	sbiw	r26, 0x03	; 3
    6cb0:	21 15       	cp	r18, r1
    6cb2:	31 05       	cpc	r19, r1
    6cb4:	a1 f7       	brne	.-24     	; 0x6c9e <free+0x48>
    6cb6:	cd 01       	movw	r24, r26
    6cb8:	21 c0       	rjmp	.+66     	; 0x6cfc <free+0xa6>
    6cba:	b3 83       	std	Z+3, r27	; 0x03
    6cbc:	a2 83       	std	Z+2, r26	; 0x02
    6cbe:	ef 01       	movw	r28, r30
    6cc0:	49 91       	ld	r20, Y+
    6cc2:	59 91       	ld	r21, Y+
    6cc4:	9e 01       	movw	r18, r28
    6cc6:	24 0f       	add	r18, r20
    6cc8:	35 1f       	adc	r19, r21
    6cca:	a2 17       	cp	r26, r18
    6ccc:	b3 07       	cpc	r27, r19
    6cce:	79 f4       	brne	.+30     	; 0x6cee <free+0x98>
    6cd0:	2d 91       	ld	r18, X+
    6cd2:	3c 91       	ld	r19, X
    6cd4:	11 97       	sbiw	r26, 0x01	; 1
    6cd6:	24 0f       	add	r18, r20
    6cd8:	35 1f       	adc	r19, r21
    6cda:	2e 5f       	subi	r18, 0xFE	; 254
    6cdc:	3f 4f       	sbci	r19, 0xFF	; 255
    6cde:	31 83       	std	Z+1, r19	; 0x01
    6ce0:	20 83       	st	Z, r18
    6ce2:	12 96       	adiw	r26, 0x02	; 2
    6ce4:	2d 91       	ld	r18, X+
    6ce6:	3c 91       	ld	r19, X
    6ce8:	13 97       	sbiw	r26, 0x03	; 3
    6cea:	33 83       	std	Z+3, r19	; 0x03
    6cec:	22 83       	std	Z+2, r18	; 0x02
    6cee:	00 97       	sbiw	r24, 0x00	; 0
    6cf0:	29 f4       	brne	.+10     	; 0x6cfc <free+0xa6>
    6cf2:	f0 93 a3 07 	sts	0x07A3, r31
    6cf6:	e0 93 a2 07 	sts	0x07A2, r30
    6cfa:	43 c0       	rjmp	.+134    	; 0x6d82 <free+0x12c>
    6cfc:	dc 01       	movw	r26, r24
    6cfe:	13 96       	adiw	r26, 0x03	; 3
    6d00:	fc 93       	st	X, r31
    6d02:	ee 93       	st	-X, r30
    6d04:	12 97       	sbiw	r26, 0x02	; 2
    6d06:	4d 91       	ld	r20, X+
    6d08:	5d 91       	ld	r21, X+
    6d0a:	a4 0f       	add	r26, r20
    6d0c:	b5 1f       	adc	r27, r21
    6d0e:	ea 17       	cp	r30, r26
    6d10:	fb 07       	cpc	r31, r27
    6d12:	69 f4       	brne	.+26     	; 0x6d2e <free+0xd8>
    6d14:	20 81       	ld	r18, Z
    6d16:	31 81       	ldd	r19, Z+1	; 0x01
    6d18:	24 0f       	add	r18, r20
    6d1a:	35 1f       	adc	r19, r21
    6d1c:	2e 5f       	subi	r18, 0xFE	; 254
    6d1e:	3f 4f       	sbci	r19, 0xFF	; 255
    6d20:	ec 01       	movw	r28, r24
    6d22:	39 83       	std	Y+1, r19	; 0x01
    6d24:	28 83       	st	Y, r18
    6d26:	22 81       	ldd	r18, Z+2	; 0x02
    6d28:	33 81       	ldd	r19, Z+3	; 0x03
    6d2a:	3b 83       	std	Y+3, r19	; 0x03
    6d2c:	2a 83       	std	Y+2, r18	; 0x02
    6d2e:	e0 e0       	ldi	r30, 0x00	; 0
    6d30:	f0 e0       	ldi	r31, 0x00	; 0
    6d32:	02 c0       	rjmp	.+4      	; 0x6d38 <free+0xe2>
    6d34:	fb 01       	movw	r30, r22
    6d36:	bc 01       	movw	r22, r24
    6d38:	db 01       	movw	r26, r22
    6d3a:	12 96       	adiw	r26, 0x02	; 2
    6d3c:	8d 91       	ld	r24, X+
    6d3e:	9c 91       	ld	r25, X
    6d40:	13 97       	sbiw	r26, 0x03	; 3
    6d42:	00 97       	sbiw	r24, 0x00	; 0
    6d44:	b9 f7       	brne	.-18     	; 0x6d34 <free+0xde>
    6d46:	9b 01       	movw	r18, r22
    6d48:	2e 5f       	subi	r18, 0xFE	; 254
    6d4a:	3f 4f       	sbci	r19, 0xFF	; 255
    6d4c:	8d 91       	ld	r24, X+
    6d4e:	9c 91       	ld	r25, X
    6d50:	11 97       	sbiw	r26, 0x01	; 1
    6d52:	82 0f       	add	r24, r18
    6d54:	93 1f       	adc	r25, r19
    6d56:	40 91 a0 07 	lds	r20, 0x07A0
    6d5a:	50 91 a1 07 	lds	r21, 0x07A1
    6d5e:	48 17       	cp	r20, r24
    6d60:	59 07       	cpc	r21, r25
    6d62:	79 f4       	brne	.+30     	; 0x6d82 <free+0x12c>
    6d64:	30 97       	sbiw	r30, 0x00	; 0
    6d66:	29 f4       	brne	.+10     	; 0x6d72 <free+0x11c>
    6d68:	10 92 a3 07 	sts	0x07A3, r1
    6d6c:	10 92 a2 07 	sts	0x07A2, r1
    6d70:	02 c0       	rjmp	.+4      	; 0x6d76 <free+0x120>
    6d72:	13 82       	std	Z+3, r1	; 0x03
    6d74:	12 82       	std	Z+2, r1	; 0x02
    6d76:	22 50       	subi	r18, 0x02	; 2
    6d78:	30 40       	sbci	r19, 0x00	; 0
    6d7a:	30 93 a1 07 	sts	0x07A1, r19
    6d7e:	20 93 a0 07 	sts	0x07A0, r18
    6d82:	df 91       	pop	r29
    6d84:	cf 91       	pop	r28
    6d86:	08 95       	ret

00006d88 <memset>:
    6d88:	dc 01       	movw	r26, r24
    6d8a:	01 c0       	rjmp	.+2      	; 0x6d8e <memset+0x6>
    6d8c:	6d 93       	st	X+, r22
    6d8e:	41 50       	subi	r20, 0x01	; 1
    6d90:	50 40       	sbci	r21, 0x00	; 0
    6d92:	e0 f7       	brcc	.-8      	; 0x6d8c <memset+0x4>
    6d94:	08 95       	ret

00006d96 <_exit>:
    6d96:	f8 94       	cli

00006d98 <__stop_program>:
    6d98:	ff cf       	rjmp	.-2      	; 0x6d98 <__stop_program>
