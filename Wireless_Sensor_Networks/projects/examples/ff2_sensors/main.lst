   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 141               		.data
 142               	.LC0:
 143 0000 4D79 206E 		.string	"My node's address is %d\r\n"
 143      6F64 6527 
 143      7320 6164 
 143      6472 6573 
 143      7320 6973 
 144               	.LC1:
 145 001a 5461 736B 		.string	"Task1 PID=%d\r\n"
 145      3120 5049 
 145      443D 2564 
 145      0D0A 00
 146               	.LC2:
 147 0029 5461 736B 		.string	"Task bat=%d"
 147      2062 6174 
 147      3D25 6400 
 148               	.LC3:
 149 0035 206C 6967 		.string	" light=%d"
 149      6874 3D25 
 149      6400 
 150               	.LC4:
 151 003f 2074 656D 		.string	" temp=%d"
 151      703D 2564 
 151      00
 152               	.LC5:
 153 0048 2061 6363 		.string	" acc_x=%d"
 153      5F78 3D25 
 153      6400 
 154               	.LC6:
 155 0052 2061 6363 		.string	" acc_y=%d"
 155      5F79 3D25 
 155      6400 
 156               	.LC7:
 157 005c 2061 6363 		.string	" acc_z=%d"
 157      5F7A 3D25 
 157      6400 
 158               	.LC8:
 159 0066 2061 7564 		.string	" audio=%d\r\n"
 159      696F 3D25 
 159      640D 0A00 
 160               		.text
 162               	.global	Task1
 164               	Task1:
 165               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        **** *  Nano-RK, a real-time operating system for sensor networks.
   3:main.c        **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:main.c        **** *  All rights reserved.
   5:main.c        **** *
   6:main.c        **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:main.c        **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:main.c        **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:main.c        **** *
  10:main.c        **** *  This program is free software: you can redistribute it and/or modify
  11:main.c        **** *  it under the terms of the GNU General Public License as published by
  12:main.c        **** *  the Free Software Foundation, version 2.0 of the License.
  13:main.c        **** *
  14:main.c        **** *  This program is distributed in the hope that it will be useful,
  15:main.c        **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:main.c        **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:main.c        **** *  GNU General Public License for more details.
  18:main.c        **** *
  19:main.c        **** *  You should have received a copy of the GNU General Public License
  20:main.c        **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:main.c        **** *
  22:main.c        **** *  Contributing Authors (specific to this file):
  23:main.c        **** *  Zane Starr
  24:main.c        **** *******************************************************************************/
  25:main.c        **** 
  26:main.c        **** 
  27:main.c        **** #include <nrk.h>
  28:main.c        **** #include <include.h>
  29:main.c        **** #include <ulib.h>
  30:main.c        **** #include <stdio.h>
  31:main.c        **** #include <avr/sleep.h>
  32:main.c        **** #include <hal.h>
  33:main.c        **** #include <nrk_error.h>
  34:main.c        **** #include <nrk_timer.h>
  35:main.c        **** #include <nrk_driver_list.h>
  36:main.c        **** #include <nrk_driver.h>
  37:main.c        **** #include <ff_basic_sensor.h>
  38:main.c        **** 
  39:main.c        **** NRK_STK Stack1[NRK_APP_STACKSIZE];
  40:main.c        **** nrk_task_type TaskOne;
  41:main.c        **** void Task1(void);
  42:main.c        **** 
  43:main.c        **** 
  44:main.c        **** void nrk_create_taskset();
  45:main.c        **** void nrk_register_drivers();
  46:main.c        **** uint8_t kill_stack(uint8_t val);
  47:main.c        **** 
  48:main.c        **** int
  49:main.c        **** main ()
  50:main.c        **** {
  51:main.c        ****   uint8_t t;
  52:main.c        ****   nrk_setup_ports();
  53:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
  54:main.c        **** 
  55:main.c        **** 
  56:main.c        ****   printf( PSTR("starting...\r\n") );
  57:main.c        **** 
  58:main.c        ****   nrk_init();
  59:main.c        ****   nrk_time_set(0,0);
  60:main.c        **** 
  61:main.c        ****   nrk_register_drivers();
  62:main.c        ****   nrk_create_taskset ();
  63:main.c        ****   nrk_start();
  64:main.c        ****   
  65:main.c        ****   return 0;
  66:main.c        **** }
  67:main.c        **** 
  68:main.c        **** 
  69:main.c        **** void Task1()
  70:main.c        **** {
 167               	.LM0:
 168               	.LFBB1:
 169 0000 2F92      		push r2
 170 0002 3F92      		push r3
 171 0004 4F92      		push r4
 172 0006 5F92      		push r5
 173 0008 6F92      		push r6
 174 000a 7F92      		push r7
 175 000c 9F92      		push r9
 176 000e AF92      		push r10
 177 0010 BF92      		push r11
 178 0012 CF92      		push r12
 179 0014 DF92      		push r13
 180 0016 EF92      		push r14
 181 0018 FF92      		push r15
 182 001a 0F93      		push r16
 183 001c 1F93      		push r17
 184 001e DF93      		push r29
 185 0020 CF93      		push r28
 186 0022 00D0      		rcall .
 187 0024 CDB7      		in r28,__SP_L__
 188 0026 DEB7      		in r29,__SP_H__
 189               	/* prologue: function */
 190               	/* frame size = 2 */
 191               	/* stack size = 19 */
 192               	.L__stack_usage = 19
  71:main.c        **** uint16_t cnt;
  72:main.c        **** int8_t i,fd,val;
  73:main.c        **** uint16_t buf;
  74:main.c        **** 
  75:main.c        ****   printf( "My node's address is %d\r\n",NODE_ADDR );
 194               	.LM1:
 195 0028 00D0      		rcall .
 196 002a 00D0      		rcall .
 197 002c 80E0      		ldi r24,lo8(.LC0)
 198 002e 90E0      		ldi r25,hi8(.LC0)
 199 0030 ADB7      		in r26,__SP_L__
 200 0032 BEB7      		in r27,__SP_H__
 201 0034 1296      		adiw r26,1+1
 202 0036 9C93      		st X,r25
 203 0038 8E93      		st -X,r24
 204 003a 1197      		sbiw r26,1
 205 003c 1496      		adiw r26,3+1
 206 003e 1C92      		st X,__zero_reg__
 207 0040 1E92      		st -X,__zero_reg__
 208 0042 1397      		sbiw r26,3
 209 0044 0E94 0000 		call printf
  76:main.c        **** 
  77:main.c        ****   printf( "Task1 PID=%d\r\n",nrk_get_pid());
 211               	.LM2:
 212 0048 0F90      		pop __tmp_reg__
 213 004a 0F90      		pop __tmp_reg__
 214 004c 0F90      		pop __tmp_reg__
 215 004e 0F90      		pop __tmp_reg__
 216 0050 0E94 0000 		call nrk_get_pid
 217 0054 00D0      		rcall .
 218 0056 00D0      		rcall .
 219 0058 EDB7      		in r30,__SP_L__
 220 005a FEB7      		in r31,__SP_H__
 221 005c 3196      		adiw r30,1
 222 005e 20E0      		ldi r18,lo8(.LC1)
 223 0060 30E0      		ldi r19,hi8(.LC1)
 224 0062 ADB7      		in r26,__SP_L__
 225 0064 BEB7      		in r27,__SP_H__
 226 0066 1296      		adiw r26,1+1
 227 0068 3C93      		st X,r19
 228 006a 2E93      		st -X,r18
 229 006c 1197      		sbiw r26,1
 230 006e 8283      		std Z+2,r24
 231 0070 1382      		std Z+3,__zero_reg__
 232 0072 0E94 0000 		call printf
 233 0076 0F90      		pop __tmp_reg__
 234 0078 0F90      		pop __tmp_reg__
 235 007a 0F90      		pop __tmp_reg__
 236 007c 0F90      		pop __tmp_reg__
  78:main.c        **** 
  79:main.c        ****   
  80:main.c        ****   cnt=0;
  81:main.c        ****   while(1) {
  82:main.c        ****   	// Open ADC device as read 
  83:main.c        ****   	fd=nrk_open(FIREFLY_SENSOR_BASIC,READ);
  84:main.c        ****   	if(fd==NRK_ERROR) nrk_kprintf(PSTR("Failed to open sensor driver\r\n"));
  85:main.c        **** 	nrk_led_toggle(BLUE_LED);
  86:main.c        **** 
  87:main.c        **** 	// Example of setting a sensor 
  88:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,BAT);
  89:main.c        **** 	// Read battery first while other sensors warm up
  90:main.c        **** 	val=nrk_read(fd,&buf,2);
 238               	.LM3:
 239 007e 8E01      		movw r16,r28
 240 0080 0F5F      		subi r16,lo8(-(1))
 241 0082 1F4F      		sbci r17,hi8(-(1))
  91:main.c        **** 	printf( "Task bat=%d",buf);
 243               	.LM4:
 244 0084 50E0      		ldi r21,lo8(.LC2)
 245 0086 E52E      		mov r14,r21
 246 0088 50E0      		ldi r21,hi8(.LC2)
 247 008a F52E      		mov r15,r21
  92:main.c        **** 		val=nrk_set_status(fd,SENSOR_SELECT,LIGHT);
  93:main.c        **** 	val=nrk_read(fd,&buf,2);
  94:main.c        **** 	printf( " light=%d",buf);
 249               	.LM5:
 250 008c 40E0      		ldi r20,lo8(.LC3)
 251 008e C42E      		mov r12,r20
 252 0090 40E0      		ldi r20,hi8(.LC3)
 253 0092 D42E      		mov r13,r20
  95:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,TEMP);
  96:main.c        **** 	val=nrk_read(fd,&buf,2);
  97:main.c        **** 	printf( " temp=%d",buf);
 255               	.LM6:
 256 0094 30E0      		ldi r19,lo8(.LC4)
 257 0096 A32E      		mov r10,r19
 258 0098 30E0      		ldi r19,hi8(.LC4)
 259 009a B32E      		mov r11,r19
  98:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,ACC_X);
  99:main.c        **** 	val=nrk_read(fd,&buf,2);
 100:main.c        **** 	printf( " acc_x=%d",buf);
 261               	.LM7:
 262 009c 20E0      		ldi r18,lo8(.LC5)
 263 009e 622E      		mov r6,r18
 264 00a0 20E0      		ldi r18,hi8(.LC5)
 265 00a2 722E      		mov r7,r18
 101:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,ACC_Y);
 102:main.c        **** 	val=nrk_read(fd,&buf,2);
 103:main.c        **** 	printf( " acc_y=%d",buf);
 267               	.LM8:
 268 00a4 90E0      		ldi r25,lo8(.LC6)
 269 00a6 492E      		mov r4,r25
 270 00a8 90E0      		ldi r25,hi8(.LC6)
 271 00aa 592E      		mov r5,r25
 104:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,ACC_Z);
 105:main.c        **** 	val=nrk_read(fd,&buf,2);
 106:main.c        **** 	printf( " acc_z=%d",buf);
 273               	.LM9:
 274 00ac 80E0      		ldi r24,lo8(.LC7)
 275 00ae 282E      		mov r2,r24
 276 00b0 80E0      		ldi r24,hi8(.LC7)
 277 00b2 382E      		mov r3,r24
 278               	.L3:
  83:main.c        ****   	fd=nrk_open(FIREFLY_SENSOR_BASIC,READ);
 280               	.LM10:
 281 00b4 81E0      		ldi r24,lo8(1)
 282 00b6 65E0      		ldi r22,lo8(5)
 283 00b8 0E94 0000 		call nrk_open
 284 00bc 982E      		mov r9,r24
  84:main.c        ****   	if(fd==NRK_ERROR) nrk_kprintf(PSTR("Failed to open sensor driver\r\n"));
 286               	.LM11:
 287 00be 8F3F      		cpi r24,lo8(-1)
 288 00c0 01F4      		brne .L2
  84:main.c        ****   	if(fd==NRK_ERROR) nrk_kprintf(PSTR("Failed to open sensor driver\r\n"));
 290               	.LM12:
 291 00c2 80E0      		ldi r24,lo8(__c.2177)
 292 00c4 90E0      		ldi r25,hi8(__c.2177)
 293 00c6 0E94 0000 		call nrk_kprintf
 294               	.L2:
  85:main.c        **** 	nrk_led_toggle(BLUE_LED);
 296               	.LM13:
 297 00ca 81E0      		ldi r24,lo8(1)
 298 00cc 90E0      		ldi r25,hi8(1)
 299 00ce 0E94 0000 		call nrk_led_toggle
  88:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,BAT);
 301               	.LM14:
 302 00d2 892D      		mov r24,r9
 303 00d4 61E0      		ldi r22,lo8(1)
 304 00d6 40E0      		ldi r20,lo8(0)
 305 00d8 0E94 0000 		call nrk_set_status
  90:main.c        **** 	val=nrk_read(fd,&buf,2);
 307               	.LM15:
 308 00dc 892D      		mov r24,r9
 309 00de B801      		movw r22,r16
 310 00e0 42E0      		ldi r20,lo8(2)
 311 00e2 0E94 0000 		call nrk_read
  91:main.c        **** 	printf( "Task bat=%d",buf);
 313               	.LM16:
 314 00e6 00D0      		rcall .
 315 00e8 00D0      		rcall .
 316 00ea EDB7      		in r30,__SP_L__
 317 00ec FEB7      		in r31,__SP_H__
 318 00ee F282      		std Z+2,r15
 319 00f0 E182      		std Z+1,r14
 320 00f2 8981      		ldd r24,Y+1
 321 00f4 9A81      		ldd r25,Y+2
 322 00f6 9483      		std Z+4,r25
 323 00f8 8383      		std Z+3,r24
 324 00fa 0E94 0000 		call printf
  92:main.c        **** 		val=nrk_set_status(fd,SENSOR_SELECT,LIGHT);
 326               	.LM17:
 327 00fe 0F90      		pop __tmp_reg__
 328 0100 0F90      		pop __tmp_reg__
 329 0102 0F90      		pop __tmp_reg__
 330 0104 0F90      		pop __tmp_reg__
 331 0106 892D      		mov r24,r9
 332 0108 61E0      		ldi r22,lo8(1)
 333 010a 41E0      		ldi r20,lo8(1)
 334 010c 0E94 0000 		call nrk_set_status
  93:main.c        **** 	val=nrk_read(fd,&buf,2);
 336               	.LM18:
 337 0110 892D      		mov r24,r9
 338 0112 B801      		movw r22,r16
 339 0114 42E0      		ldi r20,lo8(2)
 340 0116 0E94 0000 		call nrk_read
  94:main.c        **** 	printf( " light=%d",buf);
 342               	.LM19:
 343 011a 00D0      		rcall .
 344 011c 00D0      		rcall .
 345 011e ADB7      		in r26,__SP_L__
 346 0120 BEB7      		in r27,__SP_H__
 347 0122 1296      		adiw r26,1+1
 348 0124 DC92      		st X,r13
 349 0126 CE92      		st -X,r12
 350 0128 1197      		sbiw r26,1
 351 012a 8981      		ldd r24,Y+1
 352 012c 9A81      		ldd r25,Y+2
 353 012e 1496      		adiw r26,3+1
 354 0130 9C93      		st X,r25
 355 0132 8E93      		st -X,r24
 356 0134 1397      		sbiw r26,3
 357 0136 0E94 0000 		call printf
  95:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,TEMP);
 359               	.LM20:
 360 013a 0F90      		pop __tmp_reg__
 361 013c 0F90      		pop __tmp_reg__
 362 013e 0F90      		pop __tmp_reg__
 363 0140 0F90      		pop __tmp_reg__
 364 0142 892D      		mov r24,r9
 365 0144 61E0      		ldi r22,lo8(1)
 366 0146 44E0      		ldi r20,lo8(4)
 367 0148 0E94 0000 		call nrk_set_status
  96:main.c        **** 	val=nrk_read(fd,&buf,2);
 369               	.LM21:
 370 014c 892D      		mov r24,r9
 371 014e B801      		movw r22,r16
 372 0150 42E0      		ldi r20,lo8(2)
 373 0152 0E94 0000 		call nrk_read
  97:main.c        **** 	printf( " temp=%d",buf);
 375               	.LM22:
 376 0156 00D0      		rcall .
 377 0158 00D0      		rcall .
 378 015a EDB7      		in r30,__SP_L__
 379 015c FEB7      		in r31,__SP_H__
 380 015e B282      		std Z+2,r11
 381 0160 A182      		std Z+1,r10
 382 0162 8981      		ldd r24,Y+1
 383 0164 9A81      		ldd r25,Y+2
 384 0166 9483      		std Z+4,r25
 385 0168 8383      		std Z+3,r24
 386 016a 0E94 0000 		call printf
  98:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,ACC_X);
 388               	.LM23:
 389 016e 0F90      		pop __tmp_reg__
 390 0170 0F90      		pop __tmp_reg__
 391 0172 0F90      		pop __tmp_reg__
 392 0174 0F90      		pop __tmp_reg__
 393 0176 892D      		mov r24,r9
 394 0178 61E0      		ldi r22,lo8(1)
 395 017a 42E0      		ldi r20,lo8(2)
 396 017c 0E94 0000 		call nrk_set_status
  99:main.c        **** 	val=nrk_read(fd,&buf,2);
 398               	.LM24:
 399 0180 892D      		mov r24,r9
 400 0182 B801      		movw r22,r16
 401 0184 42E0      		ldi r20,lo8(2)
 402 0186 0E94 0000 		call nrk_read
 100:main.c        **** 	printf( " acc_x=%d",buf);
 404               	.LM25:
 405 018a 00D0      		rcall .
 406 018c 00D0      		rcall .
 407 018e ADB7      		in r26,__SP_L__
 408 0190 BEB7      		in r27,__SP_H__
 409 0192 1296      		adiw r26,1+1
 410 0194 7C92      		st X,r7
 411 0196 6E92      		st -X,r6
 412 0198 1197      		sbiw r26,1
 413 019a 8981      		ldd r24,Y+1
 414 019c 9A81      		ldd r25,Y+2
 415 019e 1496      		adiw r26,3+1
 416 01a0 9C93      		st X,r25
 417 01a2 8E93      		st -X,r24
 418 01a4 1397      		sbiw r26,3
 419 01a6 0E94 0000 		call printf
 101:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,ACC_Y);
 421               	.LM26:
 422 01aa 0F90      		pop __tmp_reg__
 423 01ac 0F90      		pop __tmp_reg__
 424 01ae 0F90      		pop __tmp_reg__
 425 01b0 0F90      		pop __tmp_reg__
 426 01b2 892D      		mov r24,r9
 427 01b4 61E0      		ldi r22,lo8(1)
 428 01b6 45E0      		ldi r20,lo8(5)
 429 01b8 0E94 0000 		call nrk_set_status
 102:main.c        **** 	val=nrk_read(fd,&buf,2);
 431               	.LM27:
 432 01bc 892D      		mov r24,r9
 433 01be B801      		movw r22,r16
 434 01c0 42E0      		ldi r20,lo8(2)
 435 01c2 0E94 0000 		call nrk_read
 103:main.c        **** 	printf( " acc_y=%d",buf);
 437               	.LM28:
 438 01c6 00D0      		rcall .
 439 01c8 00D0      		rcall .
 440 01ca EDB7      		in r30,__SP_L__
 441 01cc FEB7      		in r31,__SP_H__
 442 01ce 5282      		std Z+2,r5
 443 01d0 4182      		std Z+1,r4
 444 01d2 8981      		ldd r24,Y+1
 445 01d4 9A81      		ldd r25,Y+2
 446 01d6 9483      		std Z+4,r25
 447 01d8 8383      		std Z+3,r24
 448 01da 0E94 0000 		call printf
 104:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,ACC_Z);
 450               	.LM29:
 451 01de 0F90      		pop __tmp_reg__
 452 01e0 0F90      		pop __tmp_reg__
 453 01e2 0F90      		pop __tmp_reg__
 454 01e4 0F90      		pop __tmp_reg__
 455 01e6 892D      		mov r24,r9
 456 01e8 61E0      		ldi r22,lo8(1)
 457 01ea 46E0      		ldi r20,lo8(6)
 458 01ec 0E94 0000 		call nrk_set_status
 105:main.c        **** 	val=nrk_read(fd,&buf,2);
 460               	.LM30:
 461 01f0 892D      		mov r24,r9
 462 01f2 B801      		movw r22,r16
 463 01f4 42E0      		ldi r20,lo8(2)
 464 01f6 0E94 0000 		call nrk_read
 466               	.LM31:
 467 01fa 00D0      		rcall .
 468 01fc 00D0      		rcall .
 469 01fe ADB7      		in r26,__SP_L__
 470 0200 BEB7      		in r27,__SP_H__
 471 0202 1296      		adiw r26,1+1
 472 0204 3C92      		st X,r3
 473 0206 2E92      		st -X,r2
 474 0208 1197      		sbiw r26,1
 475 020a 8981      		ldd r24,Y+1
 476 020c 9A81      		ldd r25,Y+2
 477 020e 1496      		adiw r26,3+1
 478 0210 9C93      		st X,r25
 479 0212 8E93      		st -X,r24
 480 0214 1397      		sbiw r26,3
 481 0216 0E94 0000 		call printf
 107:main.c        ****   	val=nrk_set_status(fd,SENSOR_SELECT,AUDIO_P2P);
 483               	.LM32:
 484 021a 0F90      		pop __tmp_reg__
 485 021c 0F90      		pop __tmp_reg__
 486 021e 0F90      		pop __tmp_reg__
 487 0220 0F90      		pop __tmp_reg__
 488 0222 892D      		mov r24,r9
 489 0224 61E0      		ldi r22,lo8(1)
 490 0226 47E0      		ldi r20,lo8(7)
 491 0228 0E94 0000 		call nrk_set_status
 108:main.c        **** 	nrk_spin_wait_us(60000);
 493               	.LM33:
 494 022c 80E6      		ldi r24,lo8(-5536)
 495 022e 9AEE      		ldi r25,hi8(-5536)
 496 0230 0E94 0000 		call nrk_spin_wait_us
 109:main.c        **** 	val=nrk_read(fd,&buf,2);
 498               	.LM34:
 499 0234 892D      		mov r24,r9
 500 0236 B801      		movw r22,r16
 501 0238 42E0      		ldi r20,lo8(2)
 502 023a 0E94 0000 		call nrk_read
 110:main.c        **** 	printf( " audio=%d\r\n",buf);
 504               	.LM35:
 505 023e 00D0      		rcall .
 506 0240 00D0      		rcall .
 507 0242 80E0      		ldi r24,lo8(.LC8)
 508 0244 90E0      		ldi r25,hi8(.LC8)
 509 0246 EDB7      		in r30,__SP_L__
 510 0248 FEB7      		in r31,__SP_H__
 511 024a 9283      		std Z+2,r25
 512 024c 8183      		std Z+1,r24
 513 024e 8981      		ldd r24,Y+1
 514 0250 9A81      		ldd r25,Y+2
 515 0252 9483      		std Z+4,r25
 516 0254 8383      		std Z+3,r24
 517 0256 0E94 0000 		call printf
 111:main.c        **** 	nrk_close(fd);
 519               	.LM36:
 520 025a 0F90      		pop __tmp_reg__
 521 025c 0F90      		pop __tmp_reg__
 522 025e 0F90      		pop __tmp_reg__
 523 0260 0F90      		pop __tmp_reg__
 524 0262 892D      		mov r24,r9
 525 0264 0E94 0000 		call nrk_close
 112:main.c        **** 	nrk_wait_until_next_period();
 527               	.LM37:
 528 0268 0E94 0000 		call nrk_wait_until_next_period
 113:main.c        **** 	cnt++;
 114:main.c        **** 	}
 530               	.LM38:
 531 026c 00C0      		rjmp .L3
 537               	.Lscope1:
 539               		.stabd	78,0,0
 541               	.global	nrk_create_taskset
 543               	nrk_create_taskset:
 544               		.stabd	46,0,0
 115:main.c        **** }
 116:main.c        **** 
 117:main.c        **** 
 118:main.c        **** void
 119:main.c        **** nrk_create_taskset()
 120:main.c        **** {
 546               	.LM39:
 547               	.LFBB2:
 548 026e CF93      		push r28
 549 0270 DF93      		push r29
 550               	/* prologue: function */
 551               	/* frame size = 0 */
 552               	/* stack size = 2 */
 553               	.L__stack_usage = 2
 121:main.c        ****   TaskOne.task = Task1;
 555               	.LM40:
 556 0272 80E0      		ldi r24,lo8(gs(Task1))
 557 0274 90E0      		ldi r25,hi8(gs(Task1))
 558 0276 9093 0000 		sts TaskOne+5+1,r25
 559 027a 8093 0000 		sts TaskOne+5,r24
 122:main.c        ****   nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
 561               	.LM41:
 562 027e C0E0      		ldi r28,lo8(TaskOne)
 563 0280 D0E0      		ldi r29,hi8(TaskOne)
 564 0282 CE01      		movw r24,r28
 565 0284 60E0      		ldi r22,lo8(Stack1)
 566 0286 70E0      		ldi r23,hi8(Stack1)
 567 0288 40E8      		ldi r20,lo8(128)
 568 028a 50E0      		ldi r21,hi8(128)
 569 028c 0E94 0000 		call nrk_task_set_stk
 123:main.c        ****   TaskOne.prio = 1;
 571               	.LM42:
 572 0290 81E0      		ldi r24,lo8(1)
 573 0292 8887      		std Y+8,r24
 124:main.c        ****   TaskOne.FirstActivation = TRUE;
 575               	.LM43:
 576 0294 8F83      		std Y+7,r24
 125:main.c        ****   TaskOne.Type = BASIC_TASK;
 578               	.LM44:
 579 0296 8987      		std Y+9,r24
 126:main.c        ****   TaskOne.SchType = PREEMPTIVE;
 581               	.LM45:
 582 0298 8A87      		std Y+10,r24
 127:main.c        ****   TaskOne.period.secs = 1;
 584               	.LM46:
 585 029a 81E0      		ldi r24,lo8(1)
 586 029c 90E0      		ldi r25,hi8(1)
 587 029e A0E0      		ldi r26,hlo8(1)
 588 02a0 B0E0      		ldi r27,hhi8(1)
 589 02a2 8B87      		std Y+11,r24
 590 02a4 9C87      		std Y+12,r25
 591 02a6 AD87      		std Y+13,r26
 592 02a8 BE87      		std Y+14,r27
 128:main.c        ****   TaskOne.period.nano_secs = 100*NANOS_PER_MS; //*NANOS_PER_MS;
 594               	.LM47:
 595 02aa 20E0      		ldi r18,lo8(100000000)
 596 02ac 31EE      		ldi r19,hi8(100000000)
 597 02ae 45EF      		ldi r20,hlo8(100000000)
 598 02b0 55E0      		ldi r21,hhi8(100000000)
 599 02b2 2F87      		std Y+15,r18
 600 02b4 388B      		std Y+16,r19
 601 02b6 498B      		std Y+17,r20
 602 02b8 5A8B      		std Y+18,r21
 129:main.c        ****   TaskOne.cpu_reserve.secs = 1;
 604               	.LM48:
 605 02ba 8B8B      		std Y+19,r24
 606 02bc 9C8B      		std Y+20,r25
 607 02be AD8B      		std Y+21,r26
 608 02c0 BE8B      		std Y+22,r27
 130:main.c        ****   TaskOne.cpu_reserve.nano_secs =  50*NANOS_PER_MS;
 610               	.LM49:
 611 02c2 80E8      		ldi r24,lo8(50000000)
 612 02c4 90EF      		ldi r25,hi8(50000000)
 613 02c6 AAEF      		ldi r26,hlo8(50000000)
 614 02c8 B2E0      		ldi r27,hhi8(50000000)
 615 02ca 8F8B      		std Y+23,r24
 616 02cc 988F      		std Y+24,r25
 617 02ce A98F      		std Y+25,r26
 618 02d0 BA8F      		std Y+26,r27
 131:main.c        ****   TaskOne.offset.secs = 0;
 620               	.LM50:
 621 02d2 1B8E      		std Y+27,__zero_reg__
 622 02d4 1C8E      		std Y+28,__zero_reg__
 623 02d6 1D8E      		std Y+29,__zero_reg__
 624 02d8 1E8E      		std Y+30,__zero_reg__
 132:main.c        ****   TaskOne.offset.nano_secs= 0;
 626               	.LM51:
 627 02da 1F8E      		std Y+31,__zero_reg__
 628 02dc 18A2      		std Y+32,__zero_reg__
 629 02de 19A2      		std Y+33,__zero_reg__
 630 02e0 1AA2      		std Y+34,__zero_reg__
 133:main.c        ****   nrk_activate_task (&TaskOne);
 632               	.LM52:
 633 02e2 CE01      		movw r24,r28
 634 02e4 0E94 0000 		call nrk_activate_task
 635               	/* epilogue start */
 134:main.c        **** 
 135:main.c        **** }
 637               	.LM53:
 638 02e8 DF91      		pop r29
 639 02ea CF91      		pop r28
 640 02ec 0895      		ret
 642               	.Lscope2:
 644               		.stabd	78,0,0
 646               	.global	nrk_register_drivers
 648               	nrk_register_drivers:
 649               		.stabd	46,0,0
 136:main.c        **** 
 137:main.c        **** void nrk_register_drivers()
 138:main.c        **** {
 651               	.LM54:
 652               	.LFBB3:
 653               	/* prologue: function */
 654               	/* frame size = 0 */
 655               	/* stack size = 0 */
 656               	.L__stack_usage = 0
 139:main.c        **** int8_t val;
 140:main.c        **** 
 141:main.c        **** // Register the Basic FireFly Sensor device driver
 142:main.c        **** // Make sure to add: 
 143:main.c        **** //     #define NRK_MAX_DRIVER_CNT  
 144:main.c        **** //     in nrk_cfg.h
 145:main.c        **** // Make sure to add: 
 146:main.c        **** //     SRC += $(ROOT_DIR)/src/drivers/platform/$(PLATFORM_TYPE)/source/ff_basic_sensor.c
 147:main.c        **** //     in makefile
 148:main.c        **** val=nrk_register_driver( &dev_manager_ff_sensors,FIREFLY_SENSOR_BASIC);
 658               	.LM55:
 659 02ee 80E0      		ldi r24,lo8(gs(dev_manager_ff_sensors))
 660 02f0 90E0      		ldi r25,hi8(gs(dev_manager_ff_sensors))
 661 02f2 61E0      		ldi r22,lo8(1)
 662 02f4 0E94 0000 		call nrk_register_driver
 149:main.c        **** if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to load my ADC driver\r\n") );
 664               	.LM56:
 665 02f8 8F3F      		cpi r24,lo8(-1)
 666 02fa 01F4      		brne .L5
 668               	.LM57:
 669 02fc 80E0      		ldi r24,lo8(__c.2185)
 670 02fe 90E0      		ldi r25,hi8(__c.2185)
 671 0300 0E94 0000 		call nrk_kprintf
 672               	.L5:
 673 0304 0895      		ret
 675               	.Lscope3:
 677               		.stabd	78,0,0
 678               		.data
 679               	.LC9:
 680 0072 7374 6172 		.string	"starting...\r"
 680      7469 6E67 
 680      2E2E 2E0D 
 680      00
 681               		.text
 683               	.global	main
 685               	main:
 686               		.stabd	46,0,0
  50:main.c        **** {
 688               	.LM58:
 689               	.LFBB4:
 690               	/* prologue: function */
 691               	/* frame size = 0 */
 692               	/* stack size = 0 */
 693               	.L__stack_usage = 0
  52:main.c        ****   nrk_setup_ports();
 695               	.LM59:
 696 0306 0E94 0000 		call nrk_setup_ports
  53:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
 698               	.LM60:
 699 030a 87E0      		ldi r24,lo8(7)
 700 030c 90E0      		ldi r25,hi8(7)
 701 030e 0E94 0000 		call nrk_setup_uart
  56:main.c        ****   printf( PSTR("starting...\r\n") );
 703               	.LM61:
 704 0312 80E0      		ldi r24,lo8(.LC9)
 705 0314 90E0      		ldi r25,hi8(.LC9)
 706 0316 0E94 0000 		call puts
  58:main.c        ****   nrk_init();
 708               	.LM62:
 709 031a 0E94 0000 		call nrk_init
  59:main.c        ****   nrk_time_set(0,0);
 711               	.LM63:
 712 031e 60E0      		ldi r22,lo8(0)
 713 0320 70E0      		ldi r23,hi8(0)
 714 0322 CB01      		movw r24,r22
 715 0324 20E0      		ldi r18,lo8(0)
 716 0326 30E0      		ldi r19,hi8(0)
 717 0328 A901      		movw r20,r18
 718 032a 0E94 0000 		call nrk_time_set
  61:main.c        ****   nrk_register_drivers();
 720               	.LM64:
 721 032e 0E94 0000 		call nrk_register_drivers
  62:main.c        ****   nrk_create_taskset ();
 723               	.LM65:
 724 0332 0E94 0000 		call nrk_create_taskset
  63:main.c        ****   nrk_start();
 726               	.LM66:
 727 0336 0E94 0000 		call nrk_start
  66:main.c        **** }
 729               	.LM67:
 730 033a 80E0      		ldi r24,lo8(0)
 731 033c 90E0      		ldi r25,hi8(0)
 732               	/* epilogue start */
 733 033e 0895      		ret
 735               	.Lscope4:
 737               		.stabd	78,0,0
 738               		.comm _nrk_signal_list,4,1
 739               		.comm nrk_idle_task_stk,128,1
 740               		.comm nrk_kernel_stk_ptr,2,1
 741               		.comm error_task,1,1
 742               		.comm error_num,1,1
 743               		.comm _nrk_prev_timer_val,1,1
 744               		.comm _nrk_time_trigger,1,1
 745               		.comm app_timer0_callback,2,1
 746               		.comm app_timer0_prescale,1,1
 747               		.comm Stack1,128,1
 748               		.comm TaskOne,35,1
 749               		.section	.progmem.data,"a",@progbits
 752               	__c.2185:
 753 0000 4661 696C 		.string	"Failed to load my ADC driver\r\n"
 753      6564 2074 
 753      6F20 6C6F 
 753      6164 206D 
 753      7920 4144 
 756               	__c.2177:
 757 001f 4661 696C 		.string	"Failed to open sensor driver\r\n"
 757      6564 2074 
 757      6F20 6F70 
 757      656E 2073 
 757      656E 736F 
 769               		.text
 771               	.Letext0:
 772               	.global __do_copy_data
 773               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccBJVfz7.s:2      *ABS*:000000000000003f __SREG__
     /tmp/ccBJVfz7.s:3      *ABS*:000000000000003e __SP_H__
     /tmp/ccBJVfz7.s:4      *ABS*:000000000000003d __SP_L__
     /tmp/ccBJVfz7.s:5      *ABS*:0000000000000034 __CCP__
     /tmp/ccBJVfz7.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccBJVfz7.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccBJVfz7.s:164    .text:0000000000000000 Task1
     /tmp/ccBJVfz7.s:756    .progmem.data:000000000000001f __c.2177
     /tmp/ccBJVfz7.s:543    .text:000000000000026e nrk_create_taskset
                            *COM*:0000000000000023 TaskOne
                            *COM*:0000000000000080 Stack1
     /tmp/ccBJVfz7.s:648    .text:00000000000002ee nrk_register_drivers
     /tmp/ccBJVfz7.s:752    .progmem.data:0000000000000000 __c.2185
     /tmp/ccBJVfz7.s:685    .text:0000000000000306 main
                            *COM*:0000000000000004 _nrk_signal_list
                            *COM*:0000000000000080 nrk_idle_task_stk
                            *COM*:0000000000000002 nrk_kernel_stk_ptr
                            *COM*:0000000000000001 error_task
                            *COM*:0000000000000001 error_num
                            *COM*:0000000000000001 _nrk_prev_timer_val
                            *COM*:0000000000000001 _nrk_time_trigger
                            *COM*:0000000000000002 app_timer0_callback
                            *COM*:0000000000000001 app_timer0_prescale

UNDEFINED SYMBOLS
printf
nrk_get_pid
nrk_open
nrk_kprintf
nrk_led_toggle
nrk_set_status
nrk_read
nrk_spin_wait_us
nrk_close
nrk_wait_until_next_period
nrk_task_set_stk
nrk_activate_task
dev_manager_ff_sensors
nrk_register_driver
nrk_setup_ports
nrk_setup_uart
puts
nrk_init
nrk_time_set
nrk_start
__do_copy_data
__do_clear_bss
