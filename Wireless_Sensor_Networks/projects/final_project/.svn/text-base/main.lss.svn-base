
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000298  00800200  00006e48  00006edc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006e48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000936  00800498  00800498  00007174  2**0
                  ALLOC
  3 .stab         00011d00  00000000  00000000  00007174  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00009ab3  00000000  00000000  00018e74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 85 02 	jmp	0x50a	; 0x50a <__ctors_end>
       4:	0c 94 d4 29 	jmp	0x53a8	; 0x53a8 <__vector_1>
       8:	0c 94 06 2a 	jmp	0x540c	; 0x540c <__vector_2>
       c:	0c 94 38 2a 	jmp	0x5470	; 0x5470 <__vector_3>
      10:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      14:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      18:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      1c:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      20:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      24:	0c 94 a2 29 	jmp	0x5344	; 0x5344 <__vector_9>
      28:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      2c:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      30:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      34:	0c 94 00 28 	jmp	0x5000	; 0x5000 <__vector_13>
      38:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      3c:	0c 94 00 28 	jmp	0x5000	; 0x5000 <__vector_13>
      40:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      44:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      48:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      4c:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      50:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      54:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      58:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      5c:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      60:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      64:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__vector_25>
      68:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      6c:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      70:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      74:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      78:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      7c:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      80:	0c 94 33 28 	jmp	0x5066	; 0x5066 <__vector_32>
      84:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      88:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      8c:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      90:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      94:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      98:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      9c:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      a0:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      a4:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      a8:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      ac:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      b0:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      b4:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      b8:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      bc:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      c0:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      c4:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      c8:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      cc:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      d0:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      d4:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      d8:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      dc:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      e0:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
      e4:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__vector_57>
      e8:	0c 94 a6 0d 	jmp	0x1b4c	; 0x1b4c <__vector_58>
      ec:	0c 94 76 0d 	jmp	0x1aec	; 0x1aec <__vector_59>
      f0:	0c 94 85 0e 	jmp	0x1d0a	; 0x1d0a <__vector_60>
      f4:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <__vector_61>
      f8:	0c 94 58 0d 	jmp	0x1ab0	; 0x1ab0 <__vector_62>
      fc:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__vector_63>
     100:	0c 94 37 0d 	jmp	0x1a6e	; 0x1a6e <__vector_64>
     104:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
     108:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
     10c:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
     110:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
     114:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
     118:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
     11c:	0c 94 a4 02 	jmp	0x548	; 0x548 <__bad_interrupt>
     120:	b8 17       	cp	r27, r24
     122:	be 17       	cp	r27, r30
     124:	c1 17       	cp	r28, r17
     126:	c4 17       	cp	r28, r20
     128:	c7 17       	cp	r28, r23
     12a:	ca 17       	cp	r28, r26
     12c:	d0 17       	cp	r29, r16
     12e:	cd 17       	cp	r28, r29
     130:	d3 17       	cp	r29, r19
     132:	d6 17       	cp	r29, r22
     134:	d9 17       	cp	r29, r25
     136:	e2 17       	cp	r30, r18
     138:	e5 17       	cp	r30, r21
     13a:	e8 17       	cp	r30, r24
     13c:	eb 17       	cp	r30, r27
     13e:	df 17       	cp	r29, r31
     140:	b5 17       	cp	r27, r21
     142:	bb 17       	cp	r27, r27
     144:	ee 17       	cp	r30, r30
     146:	f1 17       	cp	r31, r17
     148:	dc 17       	cp	r29, r28
     14a:	b2 17       	cp	r27, r18

0000014c <__c.3009>:
     14c:	0d 0a 67 6f 74 20 75 61 72 74 20 64 61 74 61 3a     ..got uart data:
     15c:	20 00                                                .

0000015e <__c.3007>:
     15e:	52 58 20 73 69 67 6e 61 6c 20 65 72 72 6f 72 00     RX signal error.

0000016e <__c.3002>:
     16e:	47 65 74 20 53 69 67 6e 61 6c 20 45 52 52 4f 52     Get Signal ERROR
     17e:	21 0d 0a 00                                         !...

00000182 <__c.2982>:
     182:	54 58 20 64 69 73 63 6f 76 65 72 0d 0a 00           TX discover...

00000190 <__c.2974>:
     190:	49 6e 76 61 6c 69 64 20 50 61 63 6b 65 74 0d 0a     Invalid Packet..
	...

000001a1 <__c.2964>:
     1a1:	53 65 6c 66 20 4d 65 73 73 61 67 65 20 49 67 6e     Self Message Ign
     1b1:	6f 72 65 0d 0a 00                                   ore...

000001b7 <__c.3236>:
     1b7:	46 61 69 6c 65 64 20 74 6f 20 72 65 67 69 73 74     Failed to regist
     1c7:	65 72 20 73 69 67 6e 61 6c 0d 0a 00                 er signal...

000001d3 <__c.3210>:
     1d3:	42 4d 41 43 20 54 58 3a 20 57 6f 6b 65 20 75 70     BMAC TX: Woke up
     1e3:	20 6f 6e 20 77 72 6f 6e 67 20 73 69 67 6e 61 6c      on wrong signal
     1f3:	0d 0a 00                                            ...

000001f6 <__c.3208>:
     1f6:	42 4d 41 43 20 54 58 3a 20 45 72 72 6f 72 20 63     BMAC TX: Error c
     206:	61 6c 6c 69 6e 67 20 65 76 65 6e 74 20 77 61 69     alling event wai
     216:	74 0d 0a 00                                         t...

0000021a <__c.3192>:
     21a:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     22a:	74 69 6e 67 20 65 6e 61 62 6c 65 20 73 69 67 6e     ting enable sign
     23a:	61 6c 20 66 61 69 6c 65 64 0d 0a 00                 al failed...

00000246 <__c.3190>:
     246:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     256:	74 69 6e 67 20 74 78 20 73 69 67 6e 61 6c 20 66     ting tx signal f
     266:	61 69 6c 65 64 0d 0a 00                             ailed...

0000026e <__c.3188>:
     26e:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     27e:	74 69 6e 67 20 72 78 20 73 69 67 6e 61 6c 20 66     ting rx signal f
     28e:	61 69 6c 65 64 0d 0a 00                             ailed...

00000296 <__c.2650>:
     296:	75 61 72 74 20 72 78 20 73 69 67 20 66 61 69 6c     uart rx sig fail
     2a6:	65 64 0d 0a 00                                      ed...

000002ab <__c.2906>:
     2ab:	55 4e 4b 4f 57 4e 00                                UNKOWN.

000002b2 <__c.2903>:
     2b2:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

000002c1 <__c.2900>:
     2c1:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

000002d2 <__c.2897>:
     2d2:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     2e2:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

000002ed <__c.2894>:
     2ed:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     2fd:	20 53 69 67 6e 61 6c 00                              Signal.

00000305 <__c.2891>:
     305:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     315:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

00000325 <__c.2888>:
     325:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     335:	72 6f 72 00                                         ror.

00000339 <__c.2885>:
     339:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

0000034a <__c.2882>:
     34a:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     35a:	61 72 74 00                                         art.

0000035e <__c.2879>:
     35e:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

0000036d <__c.2876>:
     36d:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     37d:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

00000388 <__c.2873>:
     388:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

00000394 <__c.2870>:
     394:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     3a4:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     3b4:	20 6f 6b 3f 00                                       ok?.

000003b9 <__c.2867>:
     3b9:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     3c9:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

000003d7 <__c.2864>:
     3d7:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     3e7:	72 74 00                                            rt.

000003ea <__c.2861>:
     3ea:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     3fa:	49 44 00                                            ID.

000003fd <__c.2858>:
     3fd:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     40d:	20 57 61 6b 65 75 70 00                              Wakeup.

00000415 <__c.2855>:
     415:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     425:	6c 61 74 65 64 00                                   lated.

0000042b <__c.2852>:
     42b:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     43b:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

00000446 <__c.2849>:
     446:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     456:	69 6e 74 65 72 00                                   inter.

0000045c <__c.2846>:
     45c:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     46c:	6c 6f 77 00                                         low.

00000470 <__c.2843>:
     470:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     480:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     490:	6e 6f 75 67 68 21 00                                nough!.

00000497 <__c.2839>:
     497:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     4a7:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     4b7:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     4c7:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

000004d3 <__c.2836>:
     4d3:	29 3a 20 00                                         ): .

000004d7 <__c.2834>:
     4d7:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

000004e3 <__c.2771>:
     4e3:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

000004f2 <__c.1851>:
     4f2:	45 46 47 65 66 67 00                                EFGefg.

000004f9 <__c.1845>:
     4f9:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.
	...

0000050a <__ctors_end>:
     50a:	11 24       	eor	r1, r1
     50c:	1f be       	out	0x3f, r1	; 63
     50e:	cf ef       	ldi	r28, 0xFF	; 255
     510:	d1 e4       	ldi	r29, 0x41	; 65
     512:	de bf       	out	0x3e, r29	; 62
     514:	cd bf       	out	0x3d, r28	; 61

00000516 <__do_copy_data>:
     516:	14 e0       	ldi	r17, 0x04	; 4
     518:	a0 e0       	ldi	r26, 0x00	; 0
     51a:	b2 e0       	ldi	r27, 0x02	; 2
     51c:	e8 e4       	ldi	r30, 0x48	; 72
     51e:	fe e6       	ldi	r31, 0x6E	; 110
     520:	00 e0       	ldi	r16, 0x00	; 0
     522:	0b bf       	out	0x3b, r16	; 59
     524:	02 c0       	rjmp	.+4      	; 0x52a <__do_copy_data+0x14>
     526:	07 90       	elpm	r0, Z+
     528:	0d 92       	st	X+, r0
     52a:	a8 39       	cpi	r26, 0x98	; 152
     52c:	b1 07       	cpc	r27, r17
     52e:	d9 f7       	brne	.-10     	; 0x526 <__do_copy_data+0x10>

00000530 <__do_clear_bss>:
     530:	1d e0       	ldi	r17, 0x0D	; 13
     532:	a8 e9       	ldi	r26, 0x98	; 152
     534:	b4 e0       	ldi	r27, 0x04	; 4
     536:	01 c0       	rjmp	.+2      	; 0x53a <.do_clear_bss_start>

00000538 <.do_clear_bss_loop>:
     538:	1d 92       	st	X+, r1

0000053a <.do_clear_bss_start>:
     53a:	ae 3c       	cpi	r26, 0xCE	; 206
     53c:	b1 07       	cpc	r27, r17
     53e:	e1 f7       	brne	.-8      	; 0x538 <.do_clear_bss_loop>
     540:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <main>
     544:	0c 94 22 37 	jmp	0x6e44	; 0x6e44 <_exit>

00000548 <__bad_interrupt>:
     548:	0c 94 e8 27 	jmp	0x4fd0	; 0x4fd0 <__vector_default>

0000054c <uart_task>:
	}
	return sum;	
}

void uart_task()
{
     54c:	af 92       	push	r10
     54e:	bf 92       	push	r11
     550:	cf 92       	push	r12
     552:	df 92       	push	r13
     554:	ef 92       	push	r14
     556:	ff 92       	push	r15
     558:	0f 93       	push	r16
     55a:	1f 93       	push	r17
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29

//  printf( "My node's address is %d\r\n",NODE_ADDR );
//  printf( "rx_task PID=%d\r\n",nrk_get_pid());

  // Get the signal for UART RX  
  uart_rx_signal=nrk_uart_rx_signal_get();
     560:	0e 94 00 10 	call	0x2000	; 0x2000 <nrk_uart_rx_signal_get>
     564:	c8 2e       	mov	r12, r24
  // Register your task to wakeup on RX Data 
  if(uart_rx_signal==NRK_ERROR) nrk_kprintf( PSTR("Get Signal ERROR!\r\n") );
     566:	8f 3f       	cpi	r24, 0xFF	; 255
     568:	21 f4       	brne	.+8      	; 0x572 <uart_task+0x26>
     56a:	8e e6       	ldi	r24, 0x6E	; 110
     56c:	91 e0       	ldi	r25, 0x01	; 1
     56e:	0e 94 0a 10 	call	0x2014	; 0x2014 <nrk_kprintf>
  nrk_signal_register(uart_rx_signal);
     572:	8c 2d       	mov	r24, r12
     574:	0e 94 3f 1b 	call	0x367e	; 0x367e <nrk_signal_register>
  task_flag = 0;
     578:	10 92 67 02 	sts	0x0267, r1
			break;
			node[MAC_ADDR].new_version++;
		}
	}
	printf("Data packet: %s\r\n", node[MAC_ADDR].data);
	sm=nrk_event_wait(SIG(uart_rx_signal));
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	e9 2e       	mov	r14, r25
     580:	f1 2c       	mov	r15, r1
     582:	01 2d       	mov	r16, r1
     584:	11 2d       	mov	r17, r1
     586:	04 c0       	rjmp	.+8      	; 0x590 <uart_task+0x44>
     588:	ee 0c       	add	r14, r14
     58a:	ff 1c       	adc	r15, r15
     58c:	00 1f       	adc	r16, r16
     58e:	11 1f       	adc	r17, r17
     590:	ca 94       	dec	r12
     592:	d2 f7       	brpl	.-12     	; 0x588 <uart_task+0x3c>
}

void uart_task()
{
char c;
uint8_t j=0;
     594:	bb 24       	eor	r11, r11
		{
			break;
			node[MAC_ADDR].new_version++;
		}
	}
	printf("Data packet: %s\r\n", node[MAC_ADDR].data);
     596:	c0 e0       	ldi	r28, 0x00	; 0
     598:	d2 e0       	ldi	r29, 0x02	; 2
     59a:	86 e7       	ldi	r24, 0x76	; 118
     59c:	c8 2e       	mov	r12, r24
     59e:	85 e0       	ldi	r24, 0x05	; 5
     5a0:	d8 2e       	mov	r13, r24
	if(sm != SIG(uart_rx_signal))
	nrk_kprintf( PSTR("RX signal error") );
	nrk_kprintf( PSTR("\r\ngot uart data: ") );
//	nrk_add_to_readyQ(rx_pid);
//	nrk_add_to_readyQ(data_pid);
	task_flag = 1;
     5a2:	aa 24       	eor	r10, r10
     5a4:	a3 94       	inc	r10
     5a6:	13 c0       	rjmp	.+38     	; 0x5ce <uart_task+0x82>
	while(nrk_uart_data_ready(NRK_DEFAULT_UART)!=0)
        {
//		nrk_rem_from_readyQ(rx_pid);
//		nrk_rem_from_readyQ(data_pid);
		// Read Character
		node[MAC_ADDR].data[j] = getchar();
     5a8:	80 91 c4 0d 	lds	r24, 0x0DC4
     5ac:	90 91 c5 0d 	lds	r25, 0x0DC5
     5b0:	0e 94 46 34 	call	0x688c	; 0x688c <fgetc>
     5b4:	eb 2d       	mov	r30, r11
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	ee 58       	subi	r30, 0x8E	; 142
     5ba:	fa 4f       	sbci	r31, 0xFA	; 250
     5bc:	84 83       	std	Z+4, r24	; 0x04
//		c=getchar();
//		printf( "%c",node[MAC_ADDR].data[j]);
//		if(c=='x') nrk_led_set(GREEN_LED);
//		else nrk_led_clr(GREEN_LED);
		j++;
     5be:	b3 94       	inc	r11
		if (node[MAC_ADDR].data[j-1] == 'g')
     5c0:	eb 2d       	mov	r30, r11
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	ee 58       	subi	r30, 0x8E	; 142
     5c6:	fa 4f       	sbci	r31, 0xFA	; 250
     5c8:	83 81       	ldd	r24, Z+3	; 0x03
     5ca:	87 36       	cpi	r24, 0x67	; 103
     5cc:	29 f0       	breq	.+10     	; 0x5d8 <uart_task+0x8c>
  nrk_signal_register(uart_rx_signal);
  task_flag = 0;
  while(1) {

	// Wait for UART signal
	while(nrk_uart_data_ready(NRK_DEFAULT_UART)!=0)
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <nrk_uart_data_ready>
     5d4:	88 23       	and	r24, r24
     5d6:	41 f7       	brne	.-48     	; 0x5a8 <uart_task+0x5c>
		{
			break;
			node[MAC_ADDR].new_version++;
		}
	}
	printf("Data packet: %s\r\n", node[MAC_ADDR].data);
     5d8:	00 d0       	rcall	.+0      	; 0x5da <uart_task+0x8e>
     5da:	00 d0       	rcall	.+0      	; 0x5dc <uart_task+0x90>
     5dc:	ed b7       	in	r30, 0x3d	; 61
     5de:	fe b7       	in	r31, 0x3e	; 62
     5e0:	d2 83       	std	Z+2, r29	; 0x02
     5e2:	c1 83       	std	Z+1, r28	; 0x01
     5e4:	d4 82       	std	Z+4, r13	; 0x04
     5e6:	c3 82       	std	Z+3, r12	; 0x03
     5e8:	0e 94 b4 34 	call	0x6968	; 0x6968 <printf>
	sm=nrk_event_wait(SIG(uart_rx_signal));
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	c8 01       	movw	r24, r16
     5f6:	b7 01       	movw	r22, r14
     5f8:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <nrk_event_wait>
	if(sm != SIG(uart_rx_signal))
     5fc:	6e 15       	cp	r22, r14
     5fe:	7f 05       	cpc	r23, r15
     600:	80 07       	cpc	r24, r16
     602:	91 07       	cpc	r25, r17
     604:	21 f0       	breq	.+8      	; 0x60e <uart_task+0xc2>
	nrk_kprintf( PSTR("RX signal error") );
     606:	8e e5       	ldi	r24, 0x5E	; 94
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	0e 94 0a 10 	call	0x2014	; 0x2014 <nrk_kprintf>
	nrk_kprintf( PSTR("\r\ngot uart data: ") );
     60e:	8c e4       	ldi	r24, 0x4C	; 76
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	0e 94 0a 10 	call	0x2014	; 0x2014 <nrk_kprintf>
//	nrk_add_to_readyQ(rx_pid);
//	nrk_add_to_readyQ(data_pid);
	task_flag = 1;
     616:	a0 92 67 02 	sts	0x0267, r10
     61a:	d9 cf       	rjmp	.-78     	; 0x5ce <uart_task+0x82>

0000061c <discover_task>:
		memset(rx_buf, 0, RF_MAX_PAYLOAD_SIZE);
		bmac_rx_pkt_release();
	}
}

void discover_task() {
     61c:	ff 92       	push	r15
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29

	data_pid = nrk_get_pid();
     626:	0e 94 bd 20 	call	0x417a	; 0x417a <nrk_get_pid>
     62a:	80 93 71 05 	sts	0x0571, r24
	while (!bmac_started ())
     62e:	02 c0       	rjmp	.+4      	; 0x634 <discover_task+0x18>
		nrk_wait_until_next_period ();
     630:	0e 94 2a 20 	call	0x4054	; 0x4054 <nrk_wait_until_next_period>
}

void discover_task() {

	data_pid = nrk_get_pid();
	while (!bmac_started ())
     634:	0e 94 36 08 	call	0x106c	; 0x106c <bmac_started>
     638:	88 23       	and	r24, r24
     63a:	d1 f3       	breq	.-12     	; 0x630 <discover_task+0x14>
     63c:	3f c0       	rjmp	.+126    	; 0x6bc <discover_task+0xa0>
		nrk_wait_until_next_period ();

	while(task_flag) 
	{
			sprintf(tx_buf,"1:%d:-1:%d",MAC_ADDR, node[MAC_ADDR].new_version);
     63e:	8d b7       	in	r24, 0x3d	; 61
     640:	9e b7       	in	r25, 0x3e	; 62
     642:	08 97       	sbiw	r24, 0x08	; 8
     644:	0f b6       	in	r0, 0x3f	; 63
     646:	f8 94       	cli
     648:	9e bf       	out	0x3e, r25	; 62
     64a:	0f be       	out	0x3f, r0	; 63
     64c:	8d bf       	out	0x3d, r24	; 61
     64e:	ed b7       	in	r30, 0x3d	; 61
     650:	fe b7       	in	r31, 0x3e	; 62
     652:	31 96       	adiw	r30, 0x01	; 1
     654:	ad b7       	in	r26, 0x3d	; 61
     656:	be b7       	in	r27, 0x3e	; 62
     658:	12 96       	adiw	r26, 0x02	; 2
     65a:	dc 93       	st	X, r29
     65c:	ce 93       	st	-X, r28
     65e:	11 97       	sbiw	r26, 0x01	; 1
     660:	13 83       	std	Z+3, r17	; 0x03
     662:	02 83       	std	Z+2, r16	; 0x02
     664:	15 82       	std	Z+5, r1	; 0x05
     666:	14 82       	std	Z+4, r1	; 0x04
     668:	80 91 75 05 	lds	r24, 0x0575
     66c:	86 83       	std	Z+6, r24	; 0x06
     66e:	17 82       	std	Z+7, r1	; 0x07
     670:	0e 94 04 35 	call	0x6a08	; 0x6a08 <sprintf>
			bmac_tx_pkt(tx_buf,strlen(tx_buf));
     674:	fe 01       	movw	r30, r28
     676:	01 90       	ld	r0, Z+
     678:	00 20       	and	r0, r0
     67a:	e9 f7       	brne	.-6      	; 0x676 <discover_task+0x5a>
     67c:	bf 01       	movw	r22, r30
     67e:	61 50       	subi	r22, 0x01	; 1
     680:	70 40       	sbci	r23, 0x00	; 0
     682:	61 5f       	subi	r22, 0xF1	; 241
     684:	7a 40       	sbci	r23, 0x0A	; 10
     686:	8d b7       	in	r24, 0x3d	; 61
     688:	9e b7       	in	r25, 0x3e	; 62
     68a:	08 96       	adiw	r24, 0x08	; 8
     68c:	0f b6       	in	r0, 0x3f	; 63
     68e:	f8 94       	cli
     690:	9e bf       	out	0x3e, r25	; 62
     692:	0f be       	out	0x3f, r0	; 63
     694:	8d bf       	out	0x3d, r24	; 61
     696:	ce 01       	movw	r24, r28
     698:	0e 94 6e 07 	call	0xedc	; 0xedc <bmac_tx_pkt>
			memset(tx_buf,0,RF_MAX_PAYLOAD_SIZE);
     69c:	de 01       	movw	r26, r28
     69e:	ef 2d       	mov	r30, r15
     6a0:	1d 92       	st	X+, r1
     6a2:	ea 95       	dec	r30
     6a4:	e9 f7       	brne	.-6      	; 0x6a0 <discover_task+0x84>
			if(discover_log) nrk_kprintf(PSTR("TX discover\r\n"));		
     6a6:	80 91 65 02 	lds	r24, 0x0265
     6aa:	88 23       	and	r24, r24
     6ac:	21 f0       	breq	.+8      	; 0x6b6 <discover_task+0x9a>
     6ae:	82 e8       	ldi	r24, 0x82	; 130
     6b0:	91 e0       	ldi	r25, 0x01	; 1
     6b2:	0e 94 0a 10 	call	0x2014	; 0x2014 <nrk_kprintf>
			nrk_wait_until_next_period();
     6b6:	0e 94 2a 20 	call	0x4054	; 0x4054 <nrk_wait_until_next_period>
     6ba:	06 c0       	rjmp	.+12     	; 0x6c8 <discover_task+0xac>
	while (!bmac_started ())
		nrk_wait_until_next_period ();

	while(task_flag) 
	{
			sprintf(tx_buf,"1:%d:-1:%d",MAC_ADDR, node[MAC_ADDR].new_version);
     6bc:	c1 ef       	ldi	r28, 0xF1	; 241
     6be:	da e0       	ldi	r29, 0x0A	; 10
     6c0:	02 e1       	ldi	r16, 0x12	; 18
     6c2:	12 e0       	ldi	r17, 0x02	; 2
			bmac_tx_pkt(tx_buf,strlen(tx_buf));
			memset(tx_buf,0,RF_MAX_PAYLOAD_SIZE);
     6c4:	24 e7       	ldi	r18, 0x74	; 116
     6c6:	f2 2e       	mov	r15, r18

	data_pid = nrk_get_pid();
	while (!bmac_started ())
		nrk_wait_until_next_period ();

	while(task_flag) 
     6c8:	80 91 67 02 	lds	r24, 0x0267
     6cc:	88 23       	and	r24, r24
     6ce:	09 f0       	breq	.+2      	; 0x6d2 <discover_task+0xb6>
     6d0:	b6 cf       	rjmp	.-148    	; 0x63e <discover_task+0x22>
			memset(tx_buf,0,RF_MAX_PAYLOAD_SIZE);
			if(discover_log) nrk_kprintf(PSTR("TX discover\r\n"));		
			nrk_wait_until_next_period();
	}

}
     6d2:	df 91       	pop	r29
     6d4:	cf 91       	pop	r28
     6d6:	1f 91       	pop	r17
     6d8:	0f 91       	pop	r16
     6da:	ff 90       	pop	r15
     6dc:	08 95       	ret

000006de <get_next_int>:

int16_t get_next_int(char*rx_buf, uint8_t* pos,uint8_t len) {
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	9c 01       	movw	r18, r24
     6e4:	db 01       	movw	r26, r22

	if(rx_buf[*pos] == '-')
     6e6:	8c 91       	ld	r24, X
     6e8:	f9 01       	movw	r30, r18
     6ea:	e8 0f       	add	r30, r24
     6ec:	f1 1d       	adc	r31, r1
     6ee:	90 81       	ld	r25, Z
     6f0:	9d 32       	cpi	r25, 0x2D	; 45
     6f2:	19 f0       	breq	.+6      	; 0x6fa <get_next_int+0x1c>
     6f4:	e0 e0       	ldi	r30, 0x00	; 0
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
     6f8:	16 c0       	rjmp	.+44     	; 0x726 <get_next_int+0x48>
	{
		*pos = *pos + 2;
     6fa:	8e 5f       	subi	r24, 0xFE	; 254
     6fc:	8c 93       	st	X, r24
		return -1;
     6fe:	ef ef       	ldi	r30, 0xFF	; 255
     700:	ff ef       	ldi	r31, 0xFF	; 255
     702:	1e c0       	rjmp	.+60     	; 0x740 <get_next_int+0x62>
	}
		
	int16_t sum = 0;
	while(*pos < len && rx_buf[*pos] != '\0' && rx_buf[*pos] >='0' && rx_buf[*pos]<='9') 
	{
		sum *= 10;
     704:	cf 01       	movw	r24, r30
     706:	88 0f       	add	r24, r24
     708:	99 1f       	adc	r25, r25
     70a:	73 e0       	ldi	r23, 0x03	; 3
     70c:	ee 0f       	add	r30, r30
     70e:	ff 1f       	adc	r31, r31
     710:	7a 95       	dec	r23
     712:	e1 f7       	brne	.-8      	; 0x70c <get_next_int+0x2e>
     714:	8e 0f       	add	r24, r30
     716:	9f 1f       	adc	r25, r31
		sum += (rx_buf[*pos]-'0');
     718:	e5 2f       	mov	r30, r21
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	f0 97       	sbiw	r30, 0x30	; 48
     71e:	e8 0f       	add	r30, r24
     720:	f9 1f       	adc	r31, r25
		*pos = *pos+1;
     722:	6f 5f       	subi	r22, 0xFF	; 255
     724:	6c 93       	st	X, r22
		*pos = *pos + 2;
		return -1;
	}
		
	int16_t sum = 0;
	while(*pos < len && rx_buf[*pos] != '\0' && rx_buf[*pos] >='0' && rx_buf[*pos]<='9') 
     726:	6c 91       	ld	r22, X
     728:	64 17       	cp	r22, r20
     72a:	50 f4       	brcc	.+20     	; 0x740 <get_next_int+0x62>
     72c:	e9 01       	movw	r28, r18
     72e:	c6 0f       	add	r28, r22
     730:	d1 1d       	adc	r29, r1
     732:	58 81       	ld	r21, Y
     734:	55 23       	and	r21, r21
     736:	21 f0       	breq	.+8      	; 0x740 <get_next_int+0x62>
     738:	50 33       	cpi	r21, 0x30	; 48
     73a:	10 f0       	brcs	.+4      	; 0x740 <get_next_int+0x62>
     73c:	5a 33       	cpi	r21, 0x3A	; 58
     73e:	10 f3       	brcs	.-60     	; 0x704 <get_next_int+0x26>
		sum *= 10;
		sum += (rx_buf[*pos]-'0');
		*pos = *pos+1;
	}
	return sum;	
}
     740:	cf 01       	movw	r24, r30
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	08 95       	ret

00000748 <rx_task>:
  return 0;
}


void rx_task()
{
     748:	2f 92       	push	r2
     74a:	3f 92       	push	r3
     74c:	4f 92       	push	r4
     74e:	5f 92       	push	r5
     750:	6f 92       	push	r6
     752:	7f 92       	push	r7
     754:	8f 92       	push	r8
     756:	9f 92       	push	r9
     758:	af 92       	push	r10
     75a:	bf 92       	push	r11
     75c:	cf 92       	push	r12
     75e:	df 92       	push	r13
     760:	ef 92       	push	r14
     762:	ff 92       	push	r15
     764:	0f 93       	push	r16
     766:	1f 93       	push	r17
     768:	df 93       	push	r29
     76a:	cf 93       	push	r28
     76c:	00 d0       	rcall	.+0      	; 0x76e <rx_task+0x26>
     76e:	0f 92       	push	r0
     770:	cd b7       	in	r28, 0x3d	; 61
     772:	de b7       	in	r29, 0x3e	; 62
	int8_t rssi, val;
	uint8_t *local_rx_buf;
	int16_t dest, sender, version, msg_type;
	nrk_time_t check_period;
//	printf("rx_task PID=%d\r\n", nrk_get_pid());
	rx_pid = nrk_get_pid();
     774:	0e 94 bd 20 	call	0x417a	; 0x417a <nrk_get_pid>
     778:	80 93 a6 08 	sts	0x08A6, r24
	bmac_init(15);
     77c:	8f e0       	ldi	r24, 0x0F	; 15
     77e:	0e 94 df 06 	call	0xdbe	; 0xdbe <bmac_init>
	bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);
     782:	88 ed       	ldi	r24, 0xD8	; 216
     784:	99 e0       	ldi	r25, 0x09	; 9
     786:	64 e7       	ldi	r22, 0x74	; 116
     788:	0e 94 d1 06 	call	0xda2	; 0xda2 <bmac_rx_pkt_set_buffer>
		val = bmac_wait_until_rx_pkt();
		nrk_led_set (ORANGE_LED);
		local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
//		printf("%s\r\n", local_rx_buf);
		pos = 0;
		msg_type = get_next_int(local_rx_buf, &pos, len);
     78c:	b2 e0       	ldi	r27, 0x02	; 2
     78e:	ab 2e       	mov	r10, r27
     790:	b1 2c       	mov	r11, r1
     792:	ac 0e       	add	r10, r28
     794:	bd 1e       	adc	r11, r29
//		printf("Type %d\nSender %d\nDest %d\r\n", msg_type, sender, dest);
		if(sender == MAC_ADDR)
		{
			nrk_kprintf(PSTR("Self Message Ignore\r\n"));
			nrk_led_clr(ORANGE_LED);
			memset(rx_buf, 0, RF_MAX_PAYLOAD_SIZE);
     796:	a8 ed       	ldi	r26, 0xD8	; 216
     798:	4a 2e       	mov	r4, r26
     79a:	a9 e0       	ldi	r26, 0x09	; 9
     79c:	5a 2e       	mov	r5, r26
		{
			switch(msg_type)
			{
				case 1:
//					nrk_kprintf(PSTR("In case 1\r\n"));
					node[sender].mac = sender;					
     79e:	f2 e7       	ldi	r31, 0x72	; 114
     7a0:	8f 2e       	mov	r8, r31
     7a2:	91 2c       	mov	r9, r1
					node[sender].new_version = version;
					if (node[sender].existing_version != node[sender].new_version)
					{
						printf("Sending to node %d\r\n", sender);				
						task_flag = 0;
						sprintf(tx_buf, "3:%d:%d:%s",MAC_ADDR, sender, node[MAC_ADDR].data);
     7a4:	e1 ef       	ldi	r30, 0xF1	; 241
     7a6:	ee 2e       	mov	r14, r30
     7a8:	ea e0       	ldi	r30, 0x0A	; 10
     7aa:	fe 2e       	mov	r15, r30
	rx_pid = nrk_get_pid();
	bmac_init(15);
	bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);
	while (1)
	{
		val = bmac_wait_until_rx_pkt();
     7ac:	0e 94 a9 06 	call	0xd52	; 0xd52 <bmac_wait_until_rx_pkt>
		nrk_led_set (ORANGE_LED);
     7b0:	82 e0       	ldi	r24, 0x02	; 2
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 1c 14 	call	0x2838	; 0x2838 <nrk_led_set>
		local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
     7b8:	ce 01       	movw	r24, r28
     7ba:	01 96       	adiw	r24, 0x01	; 1
     7bc:	be 01       	movw	r22, r28
     7be:	6d 5f       	subi	r22, 0xFD	; 253
     7c0:	7f 4f       	sbci	r23, 0xFF	; 255
     7c2:	0e 94 c3 07 	call	0xf86	; 0xf86 <bmac_rx_pkt_get>
     7c6:	6c 01       	movw	r12, r24
//		printf("%s\r\n", local_rx_buf);
		pos = 0;
     7c8:	1a 82       	std	Y+2, r1	; 0x02
		msg_type = get_next_int(local_rx_buf, &pos, len);
     7ca:	b5 01       	movw	r22, r10
     7cc:	49 81       	ldd	r20, Y+1	; 0x01
     7ce:	0e 94 6f 03 	call	0x6de	; 0x6de <get_next_int>
     7d2:	3c 01       	movw	r6, r24
		pos+=1;
     7d4:	8a 81       	ldd	r24, Y+2	; 0x02
     7d6:	8f 5f       	subi	r24, 0xFF	; 255
     7d8:	8a 83       	std	Y+2, r24	; 0x02
		sender = get_next_int(local_rx_buf, &pos, len);
     7da:	c6 01       	movw	r24, r12
     7dc:	b5 01       	movw	r22, r10
     7de:	49 81       	ldd	r20, Y+1	; 0x01
     7e0:	0e 94 6f 03 	call	0x6de	; 0x6de <get_next_int>
     7e4:	8c 01       	movw	r16, r24
		pos+=1;
     7e6:	8a 81       	ldd	r24, Y+2	; 0x02
     7e8:	8f 5f       	subi	r24, 0xFF	; 255
     7ea:	8a 83       	std	Y+2, r24	; 0x02
		dest = get_next_int(local_rx_buf, &pos, len);
     7ec:	c6 01       	movw	r24, r12
     7ee:	b5 01       	movw	r22, r10
     7f0:	49 81       	ldd	r20, Y+1	; 0x01
     7f2:	0e 94 6f 03 	call	0x6de	; 0x6de <get_next_int>
     7f6:	1c 01       	movw	r2, r24
		pos+=1;
     7f8:	8a 81       	ldd	r24, Y+2	; 0x02
     7fa:	8f 5f       	subi	r24, 0xFF	; 255
     7fc:	8a 83       	std	Y+2, r24	; 0x02
		version = get_next_int(local_rx_buf, &pos, len);
     7fe:	c6 01       	movw	r24, r12
     800:	b5 01       	movw	r22, r10
     802:	49 81       	ldd	r20, Y+1	; 0x01
     804:	0e 94 6f 03 	call	0x6de	; 0x6de <get_next_int>
		pos+=1;		
     808:	9a 81       	ldd	r25, Y+2	; 0x02
     80a:	9f 5f       	subi	r25, 0xFF	; 255
     80c:	9a 83       	std	Y+2, r25	; 0x02
//		printf("Type %d\nSender %d\nDest %d\r\n", msg_type, sender, dest);
		if(sender == MAC_ADDR)
     80e:	01 15       	cp	r16, r1
     810:	11 05       	cpc	r17, r1
     812:	19 f4       	brne	.+6      	; 0x81a <rx_task+0xd2>
		{
			nrk_kprintf(PSTR("Self Message Ignore\r\n"));
     814:	81 ea       	ldi	r24, 0xA1	; 161
     816:	91 e0       	ldi	r25, 0x01	; 1
     818:	d1 c0       	rjmp	.+418    	; 0x9bc <rx_task+0x274>
			continue;
		}

		else
		{
			switch(msg_type)
     81a:	f1 e0       	ldi	r31, 0x01	; 1
     81c:	6f 16       	cp	r6, r31
     81e:	71 04       	cpc	r7, r1
     820:	31 f0       	breq	.+12     	; 0x82e <rx_task+0xe6>
     822:	23 e0       	ldi	r18, 0x03	; 3
     824:	62 16       	cp	r6, r18
     826:	71 04       	cpc	r7, r1
     828:	09 f0       	breq	.+2      	; 0x82c <rx_task+0xe4>
     82a:	c6 c0       	rjmp	.+396    	; 0x9b8 <rx_task+0x270>
     82c:	54 c0       	rjmp	.+168    	; 0x8d6 <rx_task+0x18e>
			{
				case 1:
//					nrk_kprintf(PSTR("In case 1\r\n"));
					node[sender].mac = sender;					
     82e:	08 9d       	mul	r16, r8
     830:	f0 01       	movw	r30, r0
     832:	09 9d       	mul	r16, r9
     834:	f0 0d       	add	r31, r0
     836:	18 9d       	mul	r17, r8
     838:	f0 0d       	add	r31, r0
     83a:	11 24       	eor	r1, r1
     83c:	ee 58       	subi	r30, 0x8E	; 142
     83e:	fa 4f       	sbci	r31, 0xFA	; 250
     840:	01 83       	std	Z+1, r16	; 0x01
					node[sender].new_version = version;
     842:	83 83       	std	Z+3, r24	; 0x03
					if (node[sender].existing_version != node[sender].new_version)
     844:	92 81       	ldd	r25, Z+2	; 0x02
     846:	98 17       	cp	r25, r24
     848:	09 f4       	brne	.+2      	; 0x84c <rx_task+0x104>
     84a:	b2 c0       	rjmp	.+356    	; 0x9b0 <rx_task+0x268>
					{
						printf("Sending to node %d\r\n", sender);				
     84c:	00 d0       	rcall	.+0      	; 0x84e <rx_task+0x106>
     84e:	00 d0       	rcall	.+0      	; 0x850 <rx_task+0x108>
     850:	ed e1       	ldi	r30, 0x1D	; 29
     852:	f2 e0       	ldi	r31, 0x02	; 2
     854:	ad b7       	in	r26, 0x3d	; 61
     856:	be b7       	in	r27, 0x3e	; 62
     858:	12 96       	adiw	r26, 0x02	; 2
     85a:	fc 93       	st	X, r31
     85c:	ee 93       	st	-X, r30
     85e:	11 97       	sbiw	r26, 0x01	; 1
     860:	14 96       	adiw	r26, 0x04	; 4
     862:	1c 93       	st	X, r17
     864:	0e 93       	st	-X, r16
     866:	13 97       	sbiw	r26, 0x03	; 3
     868:	0e 94 b4 34 	call	0x6968	; 0x6968 <printf>
						task_flag = 0;
     86c:	10 92 67 02 	sts	0x0267, r1
						sprintf(tx_buf, "3:%d:%d:%s",MAC_ADDR, sender, node[MAC_ADDR].data);
     870:	00 d0       	rcall	.+0      	; 0x872 <rx_task+0x12a>
     872:	00 d0       	rcall	.+0      	; 0x874 <rx_task+0x12c>
     874:	00 d0       	rcall	.+0      	; 0x876 <rx_task+0x12e>
     876:	ed b7       	in	r30, 0x3d	; 61
     878:	fe b7       	in	r31, 0x3e	; 62
     87a:	31 96       	adiw	r30, 0x01	; 1
     87c:	ad b7       	in	r26, 0x3d	; 61
     87e:	be b7       	in	r27, 0x3e	; 62
     880:	12 96       	adiw	r26, 0x02	; 2
     882:	fc 92       	st	X, r15
     884:	ee 92       	st	-X, r14
     886:	11 97       	sbiw	r26, 0x01	; 1
     888:	22 e3       	ldi	r18, 0x32	; 50
     88a:	32 e0       	ldi	r19, 0x02	; 2
     88c:	33 83       	std	Z+3, r19	; 0x03
     88e:	22 83       	std	Z+2, r18	; 0x02
     890:	15 82       	std	Z+5, r1	; 0x05
     892:	14 82       	std	Z+4, r1	; 0x04
     894:	17 83       	std	Z+7, r17	; 0x07
     896:	06 83       	std	Z+6, r16	; 0x06
     898:	86 e7       	ldi	r24, 0x76	; 118
     89a:	95 e0       	ldi	r25, 0x05	; 5
     89c:	91 87       	std	Z+9, r25	; 0x09
     89e:	80 87       	std	Z+8, r24	; 0x08
     8a0:	0e 94 04 35 	call	0x6a08	; 0x6a08 <sprintf>
						bmac_tx_pkt(tx_buf, strlen(tx_buf));
     8a4:	d7 01       	movw	r26, r14
     8a6:	0d 90       	ld	r0, X+
     8a8:	00 20       	and	r0, r0
     8aa:	e9 f7       	brne	.-6      	; 0x8a6 <rx_task+0x15e>
     8ac:	bd 01       	movw	r22, r26
     8ae:	61 50       	subi	r22, 0x01	; 1
     8b0:	70 40       	sbci	r23, 0x00	; 0
     8b2:	61 5f       	subi	r22, 0xF1	; 241
     8b4:	7a 40       	sbci	r23, 0x0A	; 10
     8b6:	ed b7       	in	r30, 0x3d	; 61
     8b8:	fe b7       	in	r31, 0x3e	; 62
     8ba:	3a 96       	adiw	r30, 0x0a	; 10
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	f8 94       	cli
     8c0:	fe bf       	out	0x3e, r31	; 62
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	ed bf       	out	0x3d, r30	; 61
     8c6:	c7 01       	movw	r24, r14
     8c8:	0e 94 6e 07 	call	0xedc	; 0xedc <bmac_tx_pkt>
						nrk_led_clr (ORANGE_LED);
     8cc:	82 e0       	ldi	r24, 0x02	; 2
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	0e 94 04 14 	call	0x2808	; 0x2808 <nrk_led_clr>
     8d4:	6d c0       	rjmp	.+218    	; 0x9b0 <rx_task+0x268>
					task_flag = 1;
//					printf("Node %d\r\n",sender);
					break;
				case 3:

					if (dest == MAC_ADDR & node[sender].flag != 1)
     8d6:	21 14       	cp	r2, r1
     8d8:	31 04       	cpc	r3, r1
     8da:	09 f0       	breq	.+2      	; 0x8de <rx_task+0x196>
     8dc:	69 c0       	rjmp	.+210    	; 0x9b0 <rx_task+0x268>
     8de:	08 9d       	mul	r16, r8
     8e0:	c0 01       	movw	r24, r0
     8e2:	09 9d       	mul	r16, r9
     8e4:	90 0d       	add	r25, r0
     8e6:	18 9d       	mul	r17, r8
     8e8:	90 0d       	add	r25, r0
     8ea:	11 24       	eor	r1, r1
     8ec:	fc 01       	movw	r30, r24
     8ee:	ee 58       	subi	r30, 0x8E	; 142
     8f0:	fa 4f       	sbci	r31, 0xFA	; 250
     8f2:	20 81       	ld	r18, Z
     8f4:	21 30       	cpi	r18, 0x01	; 1
     8f6:	09 f4       	brne	.+2      	; 0x8fa <rx_task+0x1b2>
     8f8:	5b c0       	rjmp	.+182    	; 0x9b0 <rx_task+0x268>
					{
						task_flag = 0;
     8fa:	10 92 67 02 	sts	0x0267, r1
//						nrk_kprintf(PSTR("In case 3\r\n"));
						node[sender].existing_version = node[sender].new_version;					
     8fe:	23 81       	ldd	r18, Z+3	; 0x03
     900:	22 83       	std	Z+2, r18	; 0x02

  return 0;
}


void rx_task()
     902:	f6 01       	movw	r30, r12
     904:	36 96       	adiw	r30, 0x06	; 6
     906:	8a 58       	subi	r24, 0x8A	; 138
     908:	9a 4f       	sbci	r25, 0xFA	; 250
     90a:	dc 01       	movw	r26, r24
					{
						task_flag = 0;
//						nrk_kprintf(PSTR("In case 3\r\n"));
						node[sender].existing_version = node[sender].new_version;					
//						printf("Receiving from node %d\r\n", sender);						
						for (i=6; i<RF_MAX_PAYLOAD_SIZE; i++)
     90c:	26 e0       	ldi	r18, 0x06	; 6
							node[sender].data[i-6] = local_rx_buf[i];
     90e:	31 91       	ld	r19, Z+
     910:	3d 93       	st	X+, r19
					{
						task_flag = 0;
//						nrk_kprintf(PSTR("In case 3\r\n"));
						node[sender].existing_version = node[sender].new_version;					
//						printf("Receiving from node %d\r\n", sender);						
						for (i=6; i<RF_MAX_PAYLOAD_SIZE; i++)
     912:	2f 5f       	subi	r18, 0xFF	; 255
     914:	24 37       	cpi	r18, 0x74	; 116
     916:	d9 f7       	brne	.-10     	; 0x90e <rx_task+0x1c6>
							node[sender].data[i-6] = local_rx_buf[i];
						printf("\nData from node %d is %s\r\n", sender, node[sender].data);
     918:	00 d0       	rcall	.+0      	; 0x91a <rx_task+0x1d2>
     91a:	00 d0       	rcall	.+0      	; 0x91c <rx_task+0x1d4>
     91c:	00 d0       	rcall	.+0      	; 0x91e <rx_task+0x1d6>
     91e:	ed b7       	in	r30, 0x3d	; 61
     920:	fe b7       	in	r31, 0x3e	; 62
     922:	31 96       	adiw	r30, 0x01	; 1
     924:	2d e3       	ldi	r18, 0x3D	; 61
     926:	32 e0       	ldi	r19, 0x02	; 2
     928:	ad b7       	in	r26, 0x3d	; 61
     92a:	be b7       	in	r27, 0x3e	; 62
     92c:	12 96       	adiw	r26, 0x02	; 2
     92e:	3c 93       	st	X, r19
     930:	2e 93       	st	-X, r18
     932:	11 97       	sbiw	r26, 0x01	; 1
     934:	13 83       	std	Z+3, r17	; 0x03
     936:	02 83       	std	Z+2, r16	; 0x02
     938:	95 83       	std	Z+5, r25	; 0x05
     93a:	84 83       	std	Z+4, r24	; 0x04
     93c:	0e 94 b4 34 	call	0x6968	; 0x6968 <printf>
						node[sender].existing_version = node[sender].new_version;
     940:	08 9d       	mul	r16, r8
     942:	f0 01       	movw	r30, r0
     944:	09 9d       	mul	r16, r9
     946:	f0 0d       	add	r31, r0
     948:	18 9d       	mul	r17, r8
     94a:	f0 0d       	add	r31, r0
     94c:	11 24       	eor	r1, r1
     94e:	ee 58       	subi	r30, 0x8E	; 142
     950:	fa 4f       	sbci	r31, 0xFA	; 250
     952:	83 81       	ldd	r24, Z+3	; 0x03
     954:	82 83       	std	Z+2, r24	; 0x02
						sprintf(tx_buf, "3:%d:%d:%s",MAC_ADDR, sender, node[MAC_ADDR].data);
     956:	00 d0       	rcall	.+0      	; 0x958 <rx_task+0x210>
     958:	00 d0       	rcall	.+0      	; 0x95a <rx_task+0x212>
     95a:	ed b7       	in	r30, 0x3d	; 61
     95c:	fe b7       	in	r31, 0x3e	; 62
     95e:	31 96       	adiw	r30, 0x01	; 1
     960:	ad b7       	in	r26, 0x3d	; 61
     962:	be b7       	in	r27, 0x3e	; 62
     964:	12 96       	adiw	r26, 0x02	; 2
     966:	fc 92       	st	X, r15
     968:	ee 92       	st	-X, r14
     96a:	11 97       	sbiw	r26, 0x01	; 1
     96c:	22 e3       	ldi	r18, 0x32	; 50
     96e:	32 e0       	ldi	r19, 0x02	; 2
     970:	33 83       	std	Z+3, r19	; 0x03
     972:	22 83       	std	Z+2, r18	; 0x02
     974:	15 82       	std	Z+5, r1	; 0x05
     976:	14 82       	std	Z+4, r1	; 0x04
     978:	17 83       	std	Z+7, r17	; 0x07
     97a:	06 83       	std	Z+6, r16	; 0x06
     97c:	86 e7       	ldi	r24, 0x76	; 118
     97e:	95 e0       	ldi	r25, 0x05	; 5
     980:	91 87       	std	Z+9, r25	; 0x09
     982:	80 87       	std	Z+8, r24	; 0x08
     984:	0e 94 04 35 	call	0x6a08	; 0x6a08 <sprintf>
						bmac_tx_pkt(tx_buf, strlen(tx_buf));
     988:	d7 01       	movw	r26, r14
     98a:	0d 90       	ld	r0, X+
     98c:	00 20       	and	r0, r0
     98e:	e9 f7       	brne	.-6      	; 0x98a <rx_task+0x242>
     990:	bd 01       	movw	r22, r26
     992:	61 50       	subi	r22, 0x01	; 1
     994:	70 40       	sbci	r23, 0x00	; 0
     996:	61 5f       	subi	r22, 0xF1	; 241
     998:	7a 40       	sbci	r23, 0x0A	; 10
     99a:	ed b7       	in	r30, 0x3d	; 61
     99c:	fe b7       	in	r31, 0x3e	; 62
     99e:	3a 96       	adiw	r30, 0x0a	; 10
     9a0:	0f b6       	in	r0, 0x3f	; 63
     9a2:	f8 94       	cli
     9a4:	fe bf       	out	0x3e, r31	; 62
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	ed bf       	out	0x3d, r30	; 61
     9aa:	c7 01       	movw	r24, r14
     9ac:	0e 94 6e 07 	call	0xedc	; 0xedc <bmac_tx_pkt>
			
//						node[sender].flag = 1;
					}
					task_flag = 1;					
     9b0:	f1 e0       	ldi	r31, 0x01	; 1
     9b2:	f0 93 67 02 	sts	0x0267, r31
					break;
     9b6:	04 c0       	rjmp	.+8      	; 0x9c0 <rx_task+0x278>
				default:
					nrk_kprintf(PSTR("Invalid Packet\r\n"));
     9b8:	80 e9       	ldi	r24, 0x90	; 144
     9ba:	91 e0       	ldi	r25, 0x01	; 1
     9bc:	0e 94 0a 10 	call	0x2014	; 0x2014 <nrk_kprintf>
					break;
			}
		}
		
		nrk_led_clr (ORANGE_LED);
     9c0:	82 e0       	ldi	r24, 0x02	; 2
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	0e 94 04 14 	call	0x2808	; 0x2808 <nrk_led_clr>
		memset(rx_buf, 0, RF_MAX_PAYLOAD_SIZE);
     9c8:	d2 01       	movw	r26, r4
     9ca:	e4 e7       	ldi	r30, 0x74	; 116
     9cc:	1d 92       	st	X+, r1
     9ce:	ea 95       	dec	r30
     9d0:	e9 f7       	brne	.-6      	; 0x9cc <rx_task+0x284>
		bmac_rx_pkt_release();
     9d2:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <bmac_rx_pkt_release>
     9d6:	ea ce       	rjmp	.-556    	; 0x7ac <rx_task+0x64>

000009d8 <nrk_create_taskset>:

	}
}

void nrk_create_taskset ()
{
     9d8:	df 92       	push	r13
     9da:	ef 92       	push	r14
     9dc:	ff 92       	push	r15
     9de:	0f 93       	push	r16
     9e0:	1f 93       	push	r17


  RX_TASK.task = rx_task;
     9e2:	84 ea       	ldi	r24, 0xA4	; 164
     9e4:	93 e0       	ldi	r25, 0x03	; 3
     9e6:	90 93 6b 0b 	sts	0x0B6B, r25
     9ea:	80 93 6a 0b 	sts	0x0B6A, r24
  RX_TASK.Ptos = (void *) &rx_task_stack[NRK_APP_STACKSIZE - 1];
     9ee:	88 e2       	ldi	r24, 0x28	; 40
     9f0:	99 e0       	ldi	r25, 0x09	; 9
     9f2:	90 93 67 0b 	sts	0x0B67, r25
     9f6:	80 93 66 0b 	sts	0x0B66, r24
  RX_TASK.Pbos = (void *) &rx_task_stack[0];
     9fa:	89 ea       	ldi	r24, 0xA9	; 169
     9fc:	98 e0       	ldi	r25, 0x08	; 8
     9fe:	90 93 69 0b 	sts	0x0B69, r25
     a02:	80 93 68 0b 	sts	0x0B68, r24
  RX_TASK.prio = 1;
     a06:	dd 24       	eor	r13, r13
     a08:	d3 94       	inc	r13
     a0a:	d0 92 6d 0b 	sts	0x0B6D, r13
  RX_TASK.FirstActivation = TRUE;
     a0e:	d0 92 6c 0b 	sts	0x0B6C, r13
  RX_TASK.Type = BASIC_TASK;
     a12:	d0 92 6e 0b 	sts	0x0B6E, r13
  RX_TASK.SchType = PREEMPTIVE;
     a16:	d0 92 6f 0b 	sts	0x0B6F, r13
  RX_TASK.period.secs = 1;
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	e8 2e       	mov	r14, r24
     a1e:	f1 2c       	mov	r15, r1
     a20:	01 2d       	mov	r16, r1
     a22:	11 2d       	mov	r17, r1
     a24:	e0 92 70 0b 	sts	0x0B70, r14
     a28:	f0 92 71 0b 	sts	0x0B71, r15
     a2c:	00 93 72 0b 	sts	0x0B72, r16
     a30:	10 93 73 0b 	sts	0x0B73, r17
  RX_TASK.period.nano_secs = 0 * NANOS_PER_MS;
     a34:	10 92 74 0b 	sts	0x0B74, r1
     a38:	10 92 75 0b 	sts	0x0B75, r1
     a3c:	10 92 76 0b 	sts	0x0B76, r1
     a40:	10 92 77 0b 	sts	0x0B77, r1
  RX_TASK.cpu_reserve.secs = 0;
     a44:	10 92 78 0b 	sts	0x0B78, r1
     a48:	10 92 79 0b 	sts	0x0B79, r1
     a4c:	10 92 7a 0b 	sts	0x0B7A, r1
     a50:	10 92 7b 0b 	sts	0x0B7B, r1
  RX_TASK.cpu_reserve.nano_secs = 50 * NANOS_PER_MS;
     a54:	80 e8       	ldi	r24, 0x80	; 128
     a56:	90 ef       	ldi	r25, 0xF0	; 240
     a58:	aa ef       	ldi	r26, 0xFA	; 250
     a5a:	b2 e0       	ldi	r27, 0x02	; 2
     a5c:	80 93 7c 0b 	sts	0x0B7C, r24
     a60:	90 93 7d 0b 	sts	0x0B7D, r25
     a64:	a0 93 7e 0b 	sts	0x0B7E, r26
     a68:	b0 93 7f 0b 	sts	0x0B7F, r27
  RX_TASK.offset.secs = 0;
     a6c:	10 92 80 0b 	sts	0x0B80, r1
     a70:	10 92 81 0b 	sts	0x0B81, r1
     a74:	10 92 82 0b 	sts	0x0B82, r1
     a78:	10 92 83 0b 	sts	0x0B83, r1
  RX_TASK.offset.nano_secs = 0;
     a7c:	10 92 84 0b 	sts	0x0B84, r1
     a80:	10 92 85 0b 	sts	0x0B85, r1
     a84:	10 92 86 0b 	sts	0x0B86, r1
     a88:	10 92 87 0b 	sts	0x0B87, r1
  nrk_activate_task (&RX_TASK);
     a8c:	85 e6       	ldi	r24, 0x65	; 101
     a8e:	9b e0       	ldi	r25, 0x0B	; 11
     a90:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <nrk_activate_task>

  DISCOVER_TASK.task = discover_task;
     a94:	8e e0       	ldi	r24, 0x0E	; 14
     a96:	93 e0       	ldi	r25, 0x03	; 3
     a98:	90 93 bb 09 	sts	0x09BB, r25
     a9c:	80 93 ba 09 	sts	0x09BA, r24
  DISCOVER_TASK.Ptos = (void *) &discover_task_stack[NRK_APP_STACKSIZE - 1];
     aa0:	80 ef       	ldi	r24, 0xF0	; 240
     aa2:	9a e0       	ldi	r25, 0x0A	; 10
     aa4:	90 93 b7 09 	sts	0x09B7, r25
     aa8:	80 93 b6 09 	sts	0x09B6, r24
  DISCOVER_TASK.Pbos = (void *) &discover_task_stack[0];
     aac:	81 e7       	ldi	r24, 0x71	; 113
     aae:	9a e0       	ldi	r25, 0x0A	; 10
     ab0:	90 93 b9 09 	sts	0x09B9, r25
     ab4:	80 93 b8 09 	sts	0x09B8, r24
  DISCOVER_TASK.prio = 2;
     ab8:	82 e0       	ldi	r24, 0x02	; 2
     aba:	80 93 bd 09 	sts	0x09BD, r24
  DISCOVER_TASK.FirstActivation = TRUE;
     abe:	d0 92 bc 09 	sts	0x09BC, r13
  DISCOVER_TASK.Type = BASIC_TASK;
     ac2:	d0 92 be 09 	sts	0x09BE, r13
  DISCOVER_TASK.SchType = PREEMPTIVE;
     ac6:	d0 92 bf 09 	sts	0x09BF, r13
  DISCOVER_TASK.period.secs = 6;
     aca:	86 e0       	ldi	r24, 0x06	; 6
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	a0 e0       	ldi	r26, 0x00	; 0
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	80 93 c0 09 	sts	0x09C0, r24
     ad6:	90 93 c1 09 	sts	0x09C1, r25
     ada:	a0 93 c2 09 	sts	0x09C2, r26
     ade:	b0 93 c3 09 	sts	0x09C3, r27
  DISCOVER_TASK.period.nano_secs = 0 * NANOS_PER_MS;
     ae2:	10 92 c4 09 	sts	0x09C4, r1
     ae6:	10 92 c5 09 	sts	0x09C5, r1
     aea:	10 92 c6 09 	sts	0x09C6, r1
     aee:	10 92 c7 09 	sts	0x09C7, r1
  DISCOVER_TASK.cpu_reserve.secs = 0;
     af2:	10 92 c8 09 	sts	0x09C8, r1
     af6:	10 92 c9 09 	sts	0x09C9, r1
     afa:	10 92 ca 09 	sts	0x09CA, r1
     afe:	10 92 cb 09 	sts	0x09CB, r1
  DISCOVER_TASK.cpu_reserve.nano_secs = 250 * NANOS_PER_MS;
     b02:	80 e8       	ldi	r24, 0x80	; 128
     b04:	92 eb       	ldi	r25, 0xB2	; 178
     b06:	a6 ee       	ldi	r26, 0xE6	; 230
     b08:	be e0       	ldi	r27, 0x0E	; 14
     b0a:	80 93 cc 09 	sts	0x09CC, r24
     b0e:	90 93 cd 09 	sts	0x09CD, r25
     b12:	a0 93 ce 09 	sts	0x09CE, r26
     b16:	b0 93 cf 09 	sts	0x09CF, r27
  DISCOVER_TASK.offset.secs = 0;
     b1a:	10 92 d0 09 	sts	0x09D0, r1
     b1e:	10 92 d1 09 	sts	0x09D1, r1
     b22:	10 92 d2 09 	sts	0x09D2, r1
     b26:	10 92 d3 09 	sts	0x09D3, r1
  DISCOVER_TASK.offset.nano_secs = 0;
     b2a:	10 92 d4 09 	sts	0x09D4, r1
     b2e:	10 92 d5 09 	sts	0x09D5, r1
     b32:	10 92 d6 09 	sts	0x09D6, r1
     b36:	10 92 d7 09 	sts	0x09D7, r1
  nrk_activate_task (&DISCOVER_TASK);
     b3a:	85 eb       	ldi	r24, 0xB5	; 181
     b3c:	99 e0       	ldi	r25, 0x09	; 9
     b3e:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <nrk_activate_task>

  UART_TASK.task = uart_task;
     b42:	86 ea       	ldi	r24, 0xA6	; 166
     b44:	92 e0       	ldi	r25, 0x02	; 2
     b46:	90 93 52 0a 	sts	0x0A52, r25
     b4a:	80 93 51 0a 	sts	0x0A51, r24
  nrk_task_set_stk( &uart_task, uart_task_stack, NRK_APP_STACKSIZE);
     b4e:	65 e3       	ldi	r22, 0x35	; 53
     b50:	79 e0       	ldi	r23, 0x09	; 9
     b52:	40 e8       	ldi	r20, 0x80	; 128
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	0e 94 ae 2a 	call	0x555c	; 0x555c <nrk_task_set_stk>
  UART_TASK.prio = 1;
     b5a:	d0 92 54 0a 	sts	0x0A54, r13
  UART_TASK.FirstActivation = TRUE;
     b5e:	d0 92 53 0a 	sts	0x0A53, r13
  UART_TASK.Type = BASIC_TASK;
     b62:	d0 92 55 0a 	sts	0x0A55, r13
  UART_TASK.SchType = PREEMPTIVE;
     b66:	d0 92 56 0a 	sts	0x0A56, r13
  UART_TASK.period.secs = 3;
     b6a:	83 e0       	ldi	r24, 0x03	; 3
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	a0 e0       	ldi	r26, 0x00	; 0
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	80 93 57 0a 	sts	0x0A57, r24
     b76:	90 93 58 0a 	sts	0x0A58, r25
     b7a:	a0 93 59 0a 	sts	0x0A59, r26
     b7e:	b0 93 5a 0a 	sts	0x0A5A, r27
  UART_TASK.period.nano_secs = 100*NANOS_PER_MS;
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	91 ee       	ldi	r25, 0xE1	; 225
     b86:	a5 ef       	ldi	r26, 0xF5	; 245
     b88:	b5 e0       	ldi	r27, 0x05	; 5
     b8a:	80 93 5b 0a 	sts	0x0A5B, r24
     b8e:	90 93 5c 0a 	sts	0x0A5C, r25
     b92:	a0 93 5d 0a 	sts	0x0A5D, r26
     b96:	b0 93 5e 0a 	sts	0x0A5E, r27
  UART_TASK.cpu_reserve.secs = 1;
     b9a:	e0 92 5f 0a 	sts	0x0A5F, r14
     b9e:	f0 92 60 0a 	sts	0x0A60, r15
     ba2:	00 93 61 0a 	sts	0x0A61, r16
     ba6:	10 93 62 0a 	sts	0x0A62, r17
  UART_TASK.cpu_reserve.nano_secs =  0*NANOS_PER_MS;
     baa:	10 92 63 0a 	sts	0x0A63, r1
     bae:	10 92 64 0a 	sts	0x0A64, r1
     bb2:	10 92 65 0a 	sts	0x0A65, r1
     bb6:	10 92 66 0a 	sts	0x0A66, r1
  UART_TASK.offset.secs = 0;
     bba:	10 92 67 0a 	sts	0x0A67, r1
     bbe:	10 92 68 0a 	sts	0x0A68, r1
     bc2:	10 92 69 0a 	sts	0x0A69, r1
     bc6:	10 92 6a 0a 	sts	0x0A6A, r1
  UART_TASK.offset.nano_secs= 0;
     bca:	10 92 6b 0a 	sts	0x0A6B, r1
     bce:	10 92 6c 0a 	sts	0x0A6C, r1
     bd2:	10 92 6d 0a 	sts	0x0A6D, r1
     bd6:	10 92 6e 0a 	sts	0x0A6E, r1
  nrk_activate_task (&UART_TASK);
     bda:	8c e4       	ldi	r24, 0x4C	; 76
     bdc:	9a e0       	ldi	r25, 0x0A	; 10
     bde:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <nrk_activate_task>

  printf ("Create done\r\n");
     be2:	88 e5       	ldi	r24, 0x58	; 88
     be4:	92 e0       	ldi	r25, 0x02	; 2
     be6:	0e 94 cd 34 	call	0x699a	; 0x699a <puts>
}
     bea:	1f 91       	pop	r17
     bec:	0f 91       	pop	r16
     bee:	ff 90       	pop	r15
     bf0:	ef 90       	pop	r14
     bf2:	df 90       	pop	r13
     bf4:	08 95       	ret

00000bf6 <main>:
	uint8_t flag, mac, existing_version, new_version;
	char data[RF_MAX_PAYLOAD_SIZE - 6];
}node[5];

int main ()
{
     bf6:	e2 e7       	ldi	r30, 0x72	; 114
     bf8:	f5 e0       	ldi	r31, 0x05	; 5
  uint16_t div;
  uint8_t i;
  for (i=0; i<5; i++)
  {
	node[i].mac = -1;
     bfa:	8f ef       	ldi	r24, 0xFF	; 255
     bfc:	81 83       	std	Z+1, r24	; 0x01
	node[i].existing_version = -1;
     bfe:	82 83       	std	Z+2, r24	; 0x02
	node[i].new_version = -1;
     c00:	83 83       	std	Z+3, r24	; 0x03
	node[i].flag = 0;
     c02:	10 82       	st	Z, r1
     c04:	ee 58       	subi	r30, 0x8E	; 142
     c06:	ff 4f       	sbci	r31, 0xFF	; 255

int main ()
{
  uint16_t div;
  uint8_t i;
  for (i=0; i<5; i++)
     c08:	97 e0       	ldi	r25, 0x07	; 7
     c0a:	ec 3a       	cpi	r30, 0xAC	; 172
     c0c:	f9 07       	cpc	r31, r25
     c0e:	b1 f7       	brne	.-20     	; 0xbfc <main+0x6>
	node[i].mac = -1;
	node[i].existing_version = -1;
	node[i].new_version = -1;
	node[i].flag = 0;
  }
  node[MAC_ADDR].mac = MAC_ADDR;
     c10:	10 92 73 05 	sts	0x0573, r1
  node[MAC_ADDR].new_version = 0;
     c14:	10 92 75 05 	sts	0x0575, r1
  node[MAC_ADDR].existing_version = 0;
     c18:	10 92 74 05 	sts	0x0574, r1
  node[MAC_ADDR].flag = 1;
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	80 93 72 05 	sts	0x0572, r24

  msg_len = strlen (message);
     c22:	ec ea       	ldi	r30, 0xAC	; 172
     c24:	f7 e0       	ldi	r31, 0x07	; 7
     c26:	01 90       	ld	r0, Z+
     c28:	00 20       	and	r0, r0
     c2a:	e9 f7       	brne	.-6      	; 0xc26 <main+0x30>
     c2c:	31 97       	sbiw	r30, 0x01	; 1
     c2e:	ec 5a       	subi	r30, 0xAC	; 172
     c30:	f7 40       	sbci	r31, 0x07	; 7
     c32:	e0 93 a7 08 	sts	0x08A7, r30
  nrk_setup_ports ();
     c36:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <nrk_setup_ports>
  nrk_setup_uart (UART_BAUDRATE_115K2);
     c3a:	80 e1       	ldi	r24, 0x10	; 16
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	0e 94 6f 14 	call	0x28de	; 0x28de <nrk_setup_uart>

  nrk_init ();
     c42:	0e 94 56 15 	call	0x2aac	; 0x2aac <nrk_init>

  nrk_led_clr (LED_RED);
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	0e 94 04 14 	call	0x2808	; 0x2808 <nrk_led_clr>
  nrk_led_clr (LED_BLUE);
     c4e:	83 e0       	ldi	r24, 0x03	; 3
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	0e 94 04 14 	call	0x2808	; 0x2808 <nrk_led_clr>
  nrk_led_clr (LED_ORANGE);
     c56:	82 e0       	ldi	r24, 0x02	; 2
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	0e 94 04 14 	call	0x2808	; 0x2808 <nrk_led_clr>
  nrk_led_clr (LED_GREEN);
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	0e 94 04 14 	call	0x2808	; 0x2808 <nrk_led_clr>

  nrk_time_set (0, 0);
     c66:	60 e0       	ldi	r22, 0x00	; 0
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	cb 01       	movw	r24, r22
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	a9 01       	movw	r20, r18
     c72:	0e 94 2e 22 	call	0x445c	; 0x445c <nrk_time_set>

  bmac_task_config ();
     c76:	0e 94 b3 09 	call	0x1366	; 0x1366 <bmac_task_config>

  nrk_create_taskset ();
     c7a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <nrk_create_taskset>
  nrk_start ();
     c7e:	0e 94 18 16 	call	0x2c30	; 0x2c30 <nrk_start>

  return 0;
}
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	08 95       	ret

00000c88 <rf_rx_callback>:
 */
RF_RX_INFO *rf_rx_callback (RF_RX_INFO * pRRI)
{
  // Any code here gets called the instant a packet is received from the interrupt   
  return pRRI;
}
     c88:	08 95       	ret

00000c8a <bmac_encryption_set_ctr_counter>:

int8_t bmac_encryption_set_ctr_counter (uint8_t * counter, uint8_t len)
{
  if (len != 4)
     c8a:	64 30       	cpi	r22, 0x04	; 4
     c8c:	21 f4       	brne	.+8      	; 0xc96 <bmac_encryption_set_ctr_counter+0xc>
    return NRK_ERROR;
  rf_security_set_ctr_counter (counter);
     c8e:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <rf_security_set_ctr_counter>
  return NRK_OK;
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	08 95       	ret
}

int8_t bmac_encryption_set_ctr_counter (uint8_t * counter, uint8_t len)
{
  if (len != 4)
    return NRK_ERROR;
     c96:	8f ef       	ldi	r24, 0xFF	; 255
  rf_security_set_ctr_counter (counter);
  return NRK_OK;
}
     c98:	08 95       	ret

00000c9a <bmac_tx_reserve_set>:
  else
    return NRK_ERROR;
#else
  return NRK_ERROR;
#endif
}
     c9a:	8f ef       	ldi	r24, 0xFF	; 255
     c9c:	08 95       	ret

00000c9e <bmac_tx_reserve_get>:
  else
    return 0;
#else
  return 0;
#endif
}
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	08 95       	ret

00000ca4 <bmac_auto_ack_disable>:


int8_t bmac_auto_ack_disable ()
{
  rf_auto_ack_disable ();
     ca4:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <rf_auto_ack_disable>
  return NRK_OK;
}
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	08 95       	ret

00000cac <bmac_auto_ack_enable>:

int8_t bmac_auto_ack_enable ()
{
  rf_auto_ack_enable ();
     cac:	0e 94 66 0a 	call	0x14cc	; 0x14cc <rf_auto_ack_enable>
  return NRK_OK;
}
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	08 95       	ret

00000cb4 <bmac_addr_decode_disable>:

int8_t bmac_addr_decode_disable ()
{
  rf_addr_decode_disable ();
     cb4:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <rf_addr_decode_disable>
  return NRK_OK;
}
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	08 95       	ret

00000cbc <bmac_addr_decode_enable>:

int8_t bmac_addr_decode_enable ()
{
  rf_addr_decode_enable ();
     cbc:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <rf_addr_decode_enable>
  return NRK_OK;
}
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	08 95       	ret

00000cc4 <bmac_addr_decode_set_my_mac>:

int8_t bmac_addr_decode_set_my_mac (uint16_t my_mac)
{
  rf_addr_decode_set_my_mac (my_mac);
     cc4:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <rf_addr_decode_set_my_mac>
  return NRK_OK;
}
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	08 95       	ret

00000ccc <bmac_addr_decode_dest_mac>:

int8_t bmac_addr_decode_dest_mac (uint16_t dest)
{
  bmac_rfTxInfo.destAddr = dest;
     ccc:	90 93 2a 09 	sts	0x092A, r25
     cd0:	80 93 29 09 	sts	0x0929, r24
  return NRK_OK;
}
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	08 95       	ret

00000cd8 <bmac_rx_pkt_is_encrypted>:

int8_t bmac_rx_pkt_is_encrypted ()
{
  return rf_security_last_pkt_status ();
     cd8:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <rf_security_last_pkt_status>
}
     cdc:	08 95       	ret

00000cde <bmac_encryption_set_key>:

int8_t bmac_encryption_set_key (uint8_t * key, uint8_t len)
{
  if (len != 16)
     cde:	60 31       	cpi	r22, 0x10	; 16
     ce0:	21 f4       	brne	.+8      	; 0xcea <bmac_encryption_set_key+0xc>
    return NRK_ERROR;
  rf_security_set_key (key);
     ce2:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <rf_security_set_key>
  return NRK_OK;
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	08 95       	ret
}

int8_t bmac_encryption_set_key (uint8_t * key, uint8_t len)
{
  if (len != 16)
    return NRK_ERROR;
     cea:	8f ef       	ldi	r24, 0xFF	; 255
  rf_security_set_key (key);
  return NRK_OK;
}
     cec:	08 95       	ret

00000cee <bmac_encryption_enable>:

int8_t bmac_encryption_enable ()
{
  //rf_security_enable();
  return NRK_OK;
}
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	08 95       	ret

00000cf2 <bmac_encryption_disable>:

int8_t bmac_encryption_disable ()
{
  //rf_security_disable();
  return NRK_OK;
}
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	08 95       	ret

00000cf6 <bmac_set_rf_power>:


int8_t bmac_set_rf_power (uint8_t power)
{
  if (power > 31)
     cf6:	80 32       	cpi	r24, 0x20	; 32
     cf8:	20 f4       	brcc	.+8      	; 0xd02 <bmac_set_rf_power+0xc>
    return NRK_ERROR;
  rf_tx_power (power);
     cfa:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <rf_tx_power>
  return NRK_OK;
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	08 95       	ret


int8_t bmac_set_rf_power (uint8_t power)
{
  if (power > 31)
    return NRK_ERROR;
     d02:	8f ef       	ldi	r24, 0xFF	; 255
  rf_tx_power (power);
  return NRK_OK;
}
     d04:	08 95       	ret

00000d06 <bmac_set_cca_active>:

void bmac_set_cca_active (uint8_t active)
{
  cca_active = active;
     d06:	80 93 3b 05 	sts	0x053B, r24
}
     d0a:	08 95       	ret

00000d0c <bmac_set_cca_thresh>:

int8_t bmac_set_cca_thresh (int8_t thresh)
{
  rf_set_cca_thresh (thresh);
     d0c:	99 27       	eor	r25, r25
     d0e:	87 fd       	sbrc	r24, 7
     d10:	90 95       	com	r25
     d12:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <rf_set_cca_thresh>
  return NRK_OK;
}
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	08 95       	ret

00000d1a <bmac_set_channel>:

int8_t bmac_set_channel (uint8_t chan)
{
     d1a:	df 93       	push	r29
     d1c:	cf 93       	push	r28
     d1e:	0f 92       	push	r0
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
  if (chan > 26)
     d24:	8b 31       	cpi	r24, 0x1B	; 27
     d26:	80 f4       	brcc	.+32     	; 0xd48 <bmac_set_channel+0x2e>
    return NRK_ERROR;
  g_chan = chan;
     d28:	80 93 56 05 	sts	0x0556, r24
  rf_power_up ();
     d2c:	89 83       	std	Y+1, r24	; 0x01
     d2e:	0e 94 3a 0a 	call	0x1474	; 0x1474 <rf_power_up>
  rf_init (&bmac_rfRxInfo, chan, 0xFFFF, 0x00000);
     d32:	89 e8       	ldi	r24, 0x89	; 137
     d34:	9b e0       	ldi	r25, 0x0B	; 11
     d36:	69 81       	ldd	r22, Y+1	; 0x01
     d38:	4f ef       	ldi	r20, 0xFF	; 255
     d3a:	5f ef       	ldi	r21, 0xFF	; 255
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	0e 94 92 0a 	call	0x1524	; 0x1524 <rf_init>
  return NRK_OK;
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	01 c0       	rjmp	.+2      	; 0xd4a <bmac_set_channel+0x30>
}

int8_t bmac_set_channel (uint8_t chan)
{
  if (chan > 26)
    return NRK_ERROR;
     d48:	8f ef       	ldi	r24, 0xFF	; 255
  g_chan = chan;
  rf_power_up ();
  rf_init (&bmac_rfRxInfo, chan, 0xFFFF, 0x00000);
  return NRK_OK;
}
     d4a:	0f 90       	pop	r0
     d4c:	cf 91       	pop	r28
     d4e:	df 91       	pop	r29
     d50:	08 95       	ret

00000d52 <bmac_wait_until_rx_pkt>:

int8_t bmac_wait_until_rx_pkt ()
{
  nrk_sig_mask_t event;

  if (bmac_rx_pkt_ready () == 1)
     d52:	80 91 52 05 	lds	r24, 0x0552
     d56:	88 23       	and	r24, r24
     d58:	01 f1       	breq	.+64     	; 0xd9a <bmac_wait_until_rx_pkt+0x48>
    return NRK_OK;

  nrk_signal_register (bmac_rx_pkt_signal);
     d5a:	80 91 34 09 	lds	r24, 0x0934
     d5e:	0e 94 3f 1b 	call	0x367e	; 0x367e <nrk_signal_register>
  event = nrk_event_wait (SIG (bmac_rx_pkt_signal));
     d62:	61 e0       	ldi	r22, 0x01	; 1
     d64:	70 e0       	ldi	r23, 0x00	; 0
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	00 90 34 09 	lds	r0, 0x0934
     d6e:	04 c0       	rjmp	.+8      	; 0xd78 <bmac_wait_until_rx_pkt+0x26>
     d70:	66 0f       	add	r22, r22
     d72:	77 1f       	adc	r23, r23
     d74:	88 1f       	adc	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	0a 94       	dec	r0
     d7a:	d2 f7       	brpl	.-12     	; 0xd70 <bmac_wait_until_rx_pkt+0x1e>
     d7c:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <nrk_event_wait>

// Check if it was a time out instead of packet RX signal
  if ((event & SIG (bmac_rx_pkt_signal)) == 0)
     d80:	00 90 34 09 	lds	r0, 0x0934
     d84:	04 c0       	rjmp	.+8      	; 0xd8e <bmac_wait_until_rx_pkt+0x3c>
     d86:	96 95       	lsr	r25
     d88:	87 95       	ror	r24
     d8a:	77 95       	ror	r23
     d8c:	67 95       	ror	r22
     d8e:	0a 94       	dec	r0
     d90:	d2 f7       	brpl	.-12     	; 0xd86 <bmac_wait_until_rx_pkt+0x34>
     d92:	60 fd       	sbrc	r22, 0
     d94:	04 c0       	rjmp	.+8      	; 0xd9e <bmac_wait_until_rx_pkt+0x4c>
    return NRK_ERROR;
     d96:	8f ef       	ldi	r24, 0xFF	; 255
     d98:	08 95       	ret
int8_t bmac_wait_until_rx_pkt ()
{
  nrk_sig_mask_t event;

  if (bmac_rx_pkt_ready () == 1)
    return NRK_OK;
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	08 95       	ret

// Check if it was a time out instead of packet RX signal
  if ((event & SIG (bmac_rx_pkt_signal)) == 0)
    return NRK_ERROR;
  else
    return NRK_OK;
     d9e:	81 e0       	ldi	r24, 0x01	; 1
}
     da0:	08 95       	ret

00000da2 <bmac_rx_pkt_set_buffer>:

int8_t bmac_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
     da2:	00 97       	sbiw	r24, 0x00	; 0
     da4:	51 f0       	breq	.+20     	; 0xdba <bmac_rx_pkt_set_buffer+0x18>
    return NRK_ERROR;
  bmac_rfRxInfo.pPayload = buf;
     da6:	90 93 8f 0b 	sts	0x0B8F, r25
     daa:	80 93 8e 0b 	sts	0x0B8E, r24
  bmac_rfRxInfo.max_length = size;
     dae:	60 93 8d 0b 	sts	0x0B8D, r22
  rx_buf_empty = 1;
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	80 93 52 05 	sts	0x0552, r24
  return NRK_OK;
     db8:	08 95       	ret
}

int8_t bmac_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
    return NRK_ERROR;
     dba:	8f ef       	ldi	r24, 0xFF	; 255
  bmac_rfRxInfo.pPayload = buf;
  bmac_rfRxInfo.max_length = size;
  rx_buf_empty = 1;
  return NRK_OK;
}
     dbc:	08 95       	ret

00000dbe <bmac_init>:

int8_t bmac_init (uint8_t chan)
{
     dbe:	0f 93       	push	r16
     dc0:	1f 93       	push	r17
     dc2:	08 2f       	mov	r16, r24
  bmac_running = 0;
     dc4:	10 92 53 05 	sts	0x0553, r1
  tx_reserve = -1;
     dc8:	8f ef       	ldi	r24, 0xFF	; 255
     dca:	80 93 55 05 	sts	0x0555, r24
  cca_active = true;
     dce:	11 e0       	ldi	r17, 0x01	; 1
     dd0:	10 93 3b 05 	sts	0x053B, r17
  rx_failure_cnt = 0;
     dd4:	10 92 46 05 	sts	0x0546, r1
     dd8:	10 92 47 05 	sts	0x0547, r1
     ddc:	10 92 48 05 	sts	0x0548, r1
     de0:	10 92 49 05 	sts	0x0549, r1
#endif
#endif



  _bmac_check_period.secs = 0;
     de4:	10 92 3c 05 	sts	0x053C, r1
     de8:	10 92 3d 05 	sts	0x053D, r1
     dec:	10 92 3e 05 	sts	0x053E, r1
     df0:	10 92 3f 05 	sts	0x053F, r1
  _bmac_check_period.nano_secs = BMAC_DEFAULT_CHECK_RATE_MS * NANOS_PER_MS;
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	31 ee       	ldi	r19, 0xE1	; 225
     df8:	45 ef       	ldi	r20, 0xF5	; 245
     dfa:	55 e0       	ldi	r21, 0x05	; 5
     dfc:	20 93 40 05 	sts	0x0540, r18
     e00:	30 93 41 05 	sts	0x0541, r19
     e04:	40 93 42 05 	sts	0x0542, r20
     e08:	50 93 43 05 	sts	0x0543, r21
  bmac_rx_pkt_signal = nrk_signal_create ();
     e0c:	0e 94 36 1a 	call	0x346c	; 0x346c <nrk_signal_create>
     e10:	80 93 34 09 	sts	0x0934, r24
  if (bmac_rx_pkt_signal == NRK_ERROR) {
     e14:	8f 3f       	cpi	r24, 0xFF	; 255
     e16:	19 f4       	brne	.+6      	; 0xe1e <bmac_init+0x60>
    nrk_kprintf (PSTR ("BMAC ERROR: creating rx signal failed\r\n"));
     e18:	8e e6       	ldi	r24, 0x6E	; 110
     e1a:	92 e0       	ldi	r25, 0x02	; 2
     e1c:	08 c0       	rjmp	.+16     	; 0xe2e <bmac_init+0x70>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
    return NRK_ERROR;
  }
  bmac_tx_pkt_done_signal = nrk_signal_create ();
     e1e:	0e 94 36 1a 	call	0x346c	; 0x346c <nrk_signal_create>
     e22:	80 93 16 0c 	sts	0x0C16, r24
  if (bmac_tx_pkt_done_signal == NRK_ERROR) {
     e26:	8f 3f       	cpi	r24, 0xFF	; 255
     e28:	71 f4       	brne	.+28     	; 0xe46 <bmac_init+0x88>
    nrk_kprintf (PSTR ("BMAC ERROR: creating tx signal failed\r\n"));
     e2a:	86 e4       	ldi	r24, 0x46	; 70
     e2c:	92 e0       	ldi	r25, 0x02	; 2
     e2e:	0e 94 0a 10 	call	0x2014	; 0x2014 <nrk_kprintf>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
     e32:	e0 91 95 0d 	lds	r30, 0x0D95
     e36:	f0 91 96 0d 	lds	r31, 0x0D96
     e3a:	8e e0       	ldi	r24, 0x0E	; 14
     e3c:	60 85       	ldd	r22, Z+8	; 0x08
     e3e:	0e 94 0c 18 	call	0x3018	; 0x3018 <nrk_kernel_error_add>
    return NRK_ERROR;
     e42:	8f ef       	ldi	r24, 0xFF	; 255
     e44:	29 c0       	rjmp	.+82     	; 0xe98 <bmac_init+0xda>
  }
  bmac_enable_signal = nrk_signal_create ();
     e46:	0e 94 36 1a 	call	0x346c	; 0x346c <nrk_signal_create>
     e4a:	80 93 a8 08 	sts	0x08A8, r24
  if (bmac_enable_signal == NRK_ERROR) {
     e4e:	8f 3f       	cpi	r24, 0xFF	; 255
     e50:	19 f4       	brne	.+6      	; 0xe58 <bmac_init+0x9a>
    nrk_kprintf (PSTR ("BMAC ERROR: creating enable signal failed\r\n"));
     e52:	8a e1       	ldi	r24, 0x1A	; 26
     e54:	92 e0       	ldi	r25, 0x02	; 2
     e56:	eb cf       	rjmp	.-42     	; 0xe2e <bmac_init+0x70>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
    return NRK_ERROR;
  }


  tx_data_ready = 0;
     e58:	10 92 45 05 	sts	0x0545, r1
  // Set the one main rx buffer
  rx_buf_empty = 0;
     e5c:	10 92 52 05 	sts	0x0552, r1
  bmac_rfRxInfo.pPayload = NULL;
     e60:	10 92 8f 0b 	sts	0x0B8F, r1
     e64:	10 92 8e 0b 	sts	0x0B8E, r1
  bmac_rfRxInfo.max_length = 0;
     e68:	10 92 8d 0b 	sts	0x0B8D, r1

  // Setup the cc2420 chip
  rf_power_up ();
     e6c:	0e 94 3a 0a 	call	0x1474	; 0x1474 <rf_power_up>
  rf_init (&bmac_rfRxInfo, chan, 0xffff, 0);
     e70:	89 e8       	ldi	r24, 0x89	; 137
     e72:	9b e0       	ldi	r25, 0x0B	; 11
     e74:	60 2f       	mov	r22, r16
     e76:	4f ef       	ldi	r20, 0xFF	; 255
     e78:	5f ef       	ldi	r21, 0xFF	; 255
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	0e 94 92 0a 	call	0x1524	; 0x1524 <rf_init>
  g_chan = chan;
     e82:	00 93 56 05 	sts	0x0556, r16
//    FASTSPI_SETREG(CC2420_RSSI, 0xE580); // CCA THR=-25
//    FASTSPI_SETREG(CC2420_TXCTRL, 0x80FF); // TX TURNAROUND = 128 us
//    FASTSPI_SETREG(CC2420_RXCTRL1, 0x0A56); 
  // default cca thresh of -45
  //rf_set_cca_thresh(-45); 
  rf_set_cca_thresh (0x0);
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <rf_set_cca_thresh>
  bmac_running = 1;
     e8e:	10 93 53 05 	sts	0x0553, r17
  is_enabled = 1;
     e92:	10 93 54 05 	sts	0x0554, r17
  return NRK_OK;
     e96:	81 e0       	ldi	r24, 0x01	; 1
}
     e98:	1f 91       	pop	r17
     e9a:	0f 91       	pop	r16
     e9c:	08 95       	ret

00000e9e <bmac_tx_pkt_nonblocking>:

int8_t bmac_tx_pkt_nonblocking (uint8_t * buf, uint8_t len)
{
  if (tx_data_ready == 1)
     e9e:	20 91 45 05 	lds	r18, 0x0545
     ea2:	21 30       	cpi	r18, 0x01	; 1
     ea4:	59 f0       	breq	.+22     	; 0xebc <bmac_tx_pkt_nonblocking+0x1e>
    return NRK_ERROR;
  tx_data_ready = 1;
     ea6:	21 e0       	ldi	r18, 0x01	; 1
     ea8:	20 93 45 05 	sts	0x0545, r18
  bmac_rfTxInfo.pPayload = buf;
     eac:	90 93 2d 09 	sts	0x092D, r25
     eb0:	80 93 2c 09 	sts	0x092C, r24
  bmac_rfTxInfo.length = len;
     eb4:	60 93 2b 09 	sts	0x092B, r22
  return NRK_OK;
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	08 95       	ret
}

int8_t bmac_tx_pkt_nonblocking (uint8_t * buf, uint8_t len)
{
  if (tx_data_ready == 1)
    return NRK_ERROR;
     ebc:	8f ef       	ldi	r24, 0xFF	; 255
  tx_data_ready = 1;
  bmac_rfTxInfo.pPayload = buf;
  bmac_rfTxInfo.length = len;
  return NRK_OK;
}
     ebe:	08 95       	ret

00000ec0 <bmac_get_rx_pkt_signal>:

nrk_sig_t bmac_get_rx_pkt_signal ()
{
  nrk_signal_register (bmac_rx_pkt_signal);
     ec0:	80 91 34 09 	lds	r24, 0x0934
     ec4:	0e 94 3f 1b 	call	0x367e	; 0x367e <nrk_signal_register>
  return (bmac_rx_pkt_signal);
}
     ec8:	80 91 34 09 	lds	r24, 0x0934
     ecc:	08 95       	ret

00000ece <bmac_get_tx_done_signal>:

nrk_sig_t bmac_get_tx_done_signal ()
{
  nrk_signal_register (bmac_tx_pkt_done_signal);
     ece:	80 91 16 0c 	lds	r24, 0x0C16
     ed2:	0e 94 3f 1b 	call	0x367e	; 0x367e <nrk_signal_register>
  return (bmac_tx_pkt_done_signal);
}
     ed6:	80 91 16 0c 	lds	r24, 0x0C16
     eda:	08 95       	ret

00000edc <bmac_tx_pkt>:


int8_t bmac_tx_pkt (uint8_t * buf, uint8_t len)
{
     edc:	ef 92       	push	r14
     ede:	ff 92       	push	r15
     ee0:	0f 93       	push	r16
     ee2:	1f 93       	push	r17
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	0f 92       	push	r0
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
     eee:	7c 01       	movw	r14, r24
  uint32_t mask;
  if (tx_data_ready == 1)
     ef0:	80 91 45 05 	lds	r24, 0x0545
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	f1 f1       	breq	.+124    	; 0xf74 <bmac_tx_pkt+0x98>
    if (nrk_reserve_consume (tx_reserve) == NRK_ERROR) {
      return NRK_ERROR;
    }
  }
#endif
  nrk_signal_register (bmac_tx_pkt_done_signal);
     ef8:	80 91 16 0c 	lds	r24, 0x0C16
     efc:	69 83       	std	Y+1, r22	; 0x01
     efe:	0e 94 3f 1b 	call	0x367e	; 0x367e <nrk_signal_register>
  tx_data_ready = 1;
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	80 93 45 05 	sts	0x0545, r24
  bmac_rfTxInfo.pPayload = buf;
     f08:	f0 92 2d 09 	sts	0x092D, r15
     f0c:	e0 92 2c 09 	sts	0x092C, r14
  bmac_rfTxInfo.length = len;
     f10:	69 81       	ldd	r22, Y+1	; 0x01
     f12:	60 93 2b 09 	sts	0x092B, r22
#ifdef DEBUG
  nrk_kprintf (PSTR ("Waiting for tx done signal\r\n"));
#endif
  mask = nrk_event_wait (SIG (bmac_tx_pkt_done_signal));
     f16:	61 e0       	ldi	r22, 0x01	; 1
     f18:	70 e0       	ldi	r23, 0x00	; 0
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	00 90 16 0c 	lds	r0, 0x0C16
     f22:	04 c0       	rjmp	.+8      	; 0xf2c <bmac_tx_pkt+0x50>
     f24:	66 0f       	add	r22, r22
     f26:	77 1f       	adc	r23, r23
     f28:	88 1f       	adc	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	0a 94       	dec	r0
     f2e:	d2 f7       	brpl	.-12     	; 0xf24 <bmac_tx_pkt+0x48>
     f30:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <nrk_event_wait>
     f34:	7b 01       	movw	r14, r22
     f36:	8c 01       	movw	r16, r24
  if (mask == 0)
     f38:	61 15       	cp	r22, r1
     f3a:	71 05       	cpc	r23, r1
     f3c:	81 05       	cpc	r24, r1
     f3e:	91 05       	cpc	r25, r1
     f40:	21 f4       	brne	.+8      	; 0xf4a <bmac_tx_pkt+0x6e>
    nrk_kprintf (PSTR ("BMAC TX: Error calling event wait\r\n"));
     f42:	86 ef       	ldi	r24, 0xF6	; 246
     f44:	91 e0       	ldi	r25, 0x01	; 1
     f46:	0e 94 0a 10 	call	0x2014	; 0x2014 <nrk_kprintf>
  if ((mask & SIG (bmac_tx_pkt_done_signal)) == 0)
     f4a:	00 90 16 0c 	lds	r0, 0x0C16
     f4e:	04 c0       	rjmp	.+8      	; 0xf58 <bmac_tx_pkt+0x7c>
     f50:	16 95       	lsr	r17
     f52:	07 95       	ror	r16
     f54:	f7 94       	ror	r15
     f56:	e7 94       	ror	r14
     f58:	0a 94       	dec	r0
     f5a:	d2 f7       	brpl	.-12     	; 0xf50 <bmac_tx_pkt+0x74>
     f5c:	e0 fc       	sbrc	r14, 0
     f5e:	04 c0       	rjmp	.+8      	; 0xf68 <bmac_tx_pkt+0x8c>
    nrk_kprintf (PSTR ("BMAC TX: Woke up on wrong signal\r\n"));
     f60:	83 ed       	ldi	r24, 0xD3	; 211
     f62:	91 e0       	ldi	r25, 0x01	; 1
     f64:	0e 94 0a 10 	call	0x2014	; 0x2014 <nrk_kprintf>
  if (pkt_got_ack)
     f68:	80 91 44 05 	lds	r24, 0x0544
     f6c:	88 23       	and	r24, r24
     f6e:	11 f0       	breq	.+4      	; 0xf74 <bmac_tx_pkt+0x98>
    return NRK_OK;
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	01 c0       	rjmp	.+2      	; 0xf76 <bmac_tx_pkt+0x9a>
  return NRK_ERROR;
     f74:	8f ef       	ldi	r24, 0xFF	; 255
}
     f76:	0f 90       	pop	r0
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	1f 91       	pop	r17
     f7e:	0f 91       	pop	r16
     f80:	ff 90       	pop	r15
     f82:	ef 90       	pop	r14
     f84:	08 95       	ret

00000f86 <bmac_rx_pkt_get>:


uint8_t *bmac_rx_pkt_get (uint8_t * len, int8_t * rssi)
{
     f86:	fc 01       	movw	r30, r24
     f88:	db 01       	movw	r26, r22

  if (bmac_rx_pkt_ready () == 0) {
     f8a:	80 91 52 05 	lds	r24, 0x0552
     f8e:	88 23       	and	r24, r24
     f90:	29 f0       	breq	.+10     	; 0xf9c <bmac_rx_pkt_get+0x16>
    *len = 0;
     f92:	10 82       	st	Z, r1
    *rssi = 0;
     f94:	1c 92       	st	X, r1
    return NULL;
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	0a c0       	rjmp	.+20     	; 0xfb0 <bmac_rx_pkt_get+0x2a>
  }
  *len = bmac_rfRxInfo.length;
     f9c:	80 91 8c 0b 	lds	r24, 0x0B8C
     fa0:	80 83       	st	Z, r24
  *rssi = bmac_rfRxInfo.rssi;
     fa2:	80 91 91 0b 	lds	r24, 0x0B91
     fa6:	8c 93       	st	X, r24
  return bmac_rfRxInfo.pPayload;
     fa8:	20 91 8e 0b 	lds	r18, 0x0B8E
     fac:	30 91 8f 0b 	lds	r19, 0x0B8F
}
     fb0:	c9 01       	movw	r24, r18
     fb2:	08 95       	ret

00000fb4 <bmac_rx_pkt_ready>:

int8_t bmac_rx_pkt_ready (void)
{
  return (!rx_buf_empty);
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 91 52 05 	lds	r25, 0x0552
     fba:	91 11       	cpse	r25, r1
     fbc:	80 e0       	ldi	r24, 0x00	; 0
}
     fbe:	08 95       	ret

00000fc0 <bmac_rx_pkt_release>:

int8_t bmac_rx_pkt_release (void)
{
  rx_buf_empty = 1;
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	80 93 52 05 	sts	0x0552, r24
  return NRK_OK;
}
     fc6:	08 95       	ret

00000fc8 <bmac_disable>:

void bmac_disable ()
{
  is_enabled = 0;
     fc8:	10 92 54 05 	sts	0x0554, r1
  rf_power_down ();
     fcc:	0e 94 16 0a 	call	0x142c	; 0x142c <rf_power_down>
}
     fd0:	08 95       	ret

00000fd2 <bmac_enable>:

void bmac_enable ()
{
  is_enabled = 1;
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	80 93 54 05 	sts	0x0554, r24
  rf_power_up ();
     fd8:	0e 94 3a 0a 	call	0x1474	; 0x1474 <rf_power_up>
  nrk_event_signal (bmac_enable_signal);
     fdc:	80 91 a8 08 	lds	r24, 0x08A8
     fe0:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <nrk_event_signal>
}
     fe4:	08 95       	ret

00000fe6 <bmac_set_rx_check_rate>:

}


int8_t bmac_set_rx_check_rate (nrk_time_t period)
{
     fe6:	df 93       	push	r29
     fe8:	cf 93       	push	r28
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	28 97       	sbiw	r28, 0x08	; 8
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	f8 94       	cli
     ff4:	de bf       	out	0x3e, r29	; 62
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	cd bf       	out	0x3d, r28	; 61
     ffa:	29 83       	std	Y+1, r18	; 0x01
     ffc:	3a 83       	std	Y+2, r19	; 0x02
     ffe:	4b 83       	std	Y+3, r20	; 0x03
    1000:	5c 83       	std	Y+4, r21	; 0x04
    1002:	6d 83       	std	Y+5, r22	; 0x05
    1004:	7e 83       	std	Y+6, r23	; 0x06
    1006:	8f 83       	std	Y+7, r24	; 0x07
    1008:	98 87       	std	Y+8, r25	; 0x08
  if (period.secs == 0
      && period.nano_secs < BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS)
    return NRK_ERROR;
  _bmac_check_period.secs = period.secs;
  _bmac_check_period.nano_secs = period.nano_secs;
  return NRK_OK;
    100a:	29 81       	ldd	r18, Y+1	; 0x01
    100c:	3a 81       	ldd	r19, Y+2	; 0x02
    100e:	4b 81       	ldd	r20, Y+3	; 0x03
    1010:	5c 81       	ldd	r21, Y+4	; 0x04
    1012:	8d 81       	ldd	r24, Y+5	; 0x05
    1014:	9e 81       	ldd	r25, Y+6	; 0x06
    1016:	af 81       	ldd	r26, Y+7	; 0x07
    1018:	b8 85       	ldd	r27, Y+8	; 0x08
}


int8_t bmac_set_rx_check_rate (nrk_time_t period)
{
  if (period.secs == 0
    101a:	21 15       	cp	r18, r1
    101c:	31 05       	cpc	r19, r1
    101e:	41 05       	cpc	r20, r1
    1020:	51 05       	cpc	r21, r1
    1022:	41 f4       	brne	.+16     	; 0x1034 <bmac_set_rx_check_rate+0x4e>
      && period.nano_secs < BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS)
    1024:	80 30       	cpi	r24, 0x00	; 0
    1026:	6d e2       	ldi	r22, 0x2D	; 45
    1028:	96 07       	cpc	r25, r22
    102a:	61 e3       	ldi	r22, 0x31	; 49
    102c:	a6 07       	cpc	r26, r22
    102e:	61 e0       	ldi	r22, 0x01	; 1
    1030:	b6 07       	cpc	r27, r22
    1032:	90 f0       	brcs	.+36     	; 0x1058 <bmac_set_rx_check_rate+0x72>
    return NRK_ERROR;
  _bmac_check_period.secs = period.secs;
    1034:	20 93 3c 05 	sts	0x053C, r18
    1038:	30 93 3d 05 	sts	0x053D, r19
    103c:	40 93 3e 05 	sts	0x053E, r20
    1040:	50 93 3f 05 	sts	0x053F, r21
  _bmac_check_period.nano_secs = period.nano_secs;
    1044:	80 93 40 05 	sts	0x0540, r24
    1048:	90 93 41 05 	sts	0x0541, r25
    104c:	a0 93 42 05 	sts	0x0542, r26
    1050:	b0 93 43 05 	sts	0x0543, r27
  return NRK_OK;
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	01 c0       	rjmp	.+2      	; 0x105a <bmac_set_rx_check_rate+0x74>

int8_t bmac_set_rx_check_rate (nrk_time_t period)
{
  if (period.secs == 0
      && period.nano_secs < BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS)
    return NRK_ERROR;
    1058:	8f ef       	ldi	r24, 0xFF	; 255
  _bmac_check_period.secs = period.secs;
  _bmac_check_period.nano_secs = period.nano_secs;
  return NRK_OK;
}
    105a:	28 96       	adiw	r28, 0x08	; 8
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	cd bf       	out	0x3d, r28	; 61
    1066:	cf 91       	pop	r28
    1068:	df 91       	pop	r29
    106a:	08 95       	ret

0000106c <bmac_started>:

int8_t bmac_started ()
{
  return bmac_running;
}
    106c:	80 91 53 05 	lds	r24, 0x0553
    1070:	08 95       	ret

00001072 <_bmac_channel_check>:

int8_t _bmac_channel_check ()
{
    1072:	0f 93       	push	r16
    1074:	1f 93       	push	r17
  int8_t val = 0;

  rf_rx_on ();
    1076:	0e 94 0a 0b 	call	0x1614	; 0x1614 <rf_rx_on>
  val += rf_cca_check ();
    107a:	0e 94 57 0c 	call	0x18ae	; 0x18ae <rf_cca_check>
    107e:	08 2f       	mov	r16, r24
  val += rf_cca_check ();
    1080:	0e 94 57 0c 	call	0x18ae	; 0x18ae <rf_cca_check>
    1084:	18 2f       	mov	r17, r24
  val += rf_cca_check ();
    1086:	0e 94 57 0c 	call	0x18ae	; 0x18ae <rf_cca_check>
{
  int8_t val = 0;

  rf_rx_on ();
  val += rf_cca_check ();
  val += rf_cca_check ();
    108a:	10 0f       	add	r17, r16
  val += rf_cca_check ();
    108c:	18 0f       	add	r17, r24
  if (val > 1)
    val = 1;
  rf_rx_off ();
    108e:	0e 94 12 0b 	call	0x1624	; 0x1624 <rf_rx_off>
    1092:	81 2f       	mov	r24, r17
    1094:	11 16       	cp	r1, r17
    1096:	0c f4       	brge	.+2      	; 0x109a <_bmac_channel_check+0x28>
    1098:	81 e0       	ldi	r24, 0x01	; 1
  return val;
}
    109a:	1f 91       	pop	r17
    109c:	0f 91       	pop	r16
    109e:	08 95       	ret

000010a0 <_bmac_rx>:
int8_t _bmac_rx ()
{
  int8_t n;
  uint8_t cnt;

  rf_rx_on ();
    10a0:	0e 94 0a 0b 	call	0x1614	; 0x1614 <rf_rx_on>
  cnt = 0;
//printf( "calling rx\r\n" );
  dummy_t.secs = 0;
    10a4:	10 92 4a 05 	sts	0x054A, r1
    10a8:	10 92 4b 05 	sts	0x054B, r1
    10ac:	10 92 4c 05 	sts	0x054C, r1
    10b0:	10 92 4d 05 	sts	0x054D, r1
  dummy_t.nano_secs = 5 * NANOS_PER_MS;
    10b4:	80 e4       	ldi	r24, 0x40	; 64
    10b6:	9b e4       	ldi	r25, 0x4B	; 75
    10b8:	ac e4       	ldi	r26, 0x4C	; 76
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	68 2f       	mov	r22, r24
    10be:	80 93 4e 05 	sts	0x054E, r24
    10c2:	90 93 4f 05 	sts	0x054F, r25
    10c6:	a0 93 50 05 	sts	0x0550, r26
    10ca:	b0 93 51 05 	sts	0x0551, r27
  nrk_wait (dummy_t);
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	30 91 4b 05 	lds	r19, 0x054B
    10d4:	40 91 4c 05 	lds	r20, 0x054C
    10d8:	50 91 4d 05 	lds	r21, 0x054D
    10dc:	70 91 4f 05 	lds	r23, 0x054F
    10e0:	80 91 50 05 	lds	r24, 0x0550
    10e4:	90 91 51 05 	lds	r25, 0x0551
    10e8:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <nrk_wait>

  n = rf_rx_packet_nonblock ();
    10ec:	0e 94 8a 0c 	call	0x1914	; 0x1914 <rf_rx_packet_nonblock>

  if (n != NRK_OK) {
    10f0:	81 30       	cpi	r24, 0x01	; 1
    10f2:	f9 f0       	breq	.+62     	; 0x1132 <_bmac_rx+0x92>
    if (rx_failure_cnt < 65535)
    10f4:	80 91 46 05 	lds	r24, 0x0546
    10f8:	90 91 47 05 	lds	r25, 0x0547
    10fc:	a0 91 48 05 	lds	r26, 0x0548
    1100:	b0 91 49 05 	lds	r27, 0x0549
    1104:	8f 3f       	cpi	r24, 0xFF	; 255
    1106:	2f ef       	ldi	r18, 0xFF	; 255
    1108:	92 07       	cpc	r25, r18
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	a2 07       	cpc	r26, r18
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	b2 07       	cpc	r27, r18
    1112:	58 f4       	brcc	.+22     	; 0x112a <_bmac_rx+0x8a>
      rx_failure_cnt++;
    1114:	01 96       	adiw	r24, 0x01	; 1
    1116:	a1 1d       	adc	r26, r1
    1118:	b1 1d       	adc	r27, r1
    111a:	80 93 46 05 	sts	0x0546, r24
    111e:	90 93 47 05 	sts	0x0547, r25
    1122:	a0 93 48 05 	sts	0x0548, r26
    1126:	b0 93 49 05 	sts	0x0549, r27
    rf_rx_off ();
    112a:	0e 94 12 0b 	call	0x1624	; 0x1624 <rf_rx_off>
    return 0;
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	08 95       	ret
			} 
	}
*/


  rx_buf_empty = 0;
    1132:	10 92 52 05 	sts	0x0552, r1
  printf ("BMAC: SNR= %d [", bmac_rfRxInfo.rssi);
  for (uint8_t i = 0; i < bmac_rfRxInfo.length; i++)
    printf ("%c", bmac_rfRxInfo.pPayload[i]);
  printf ("]\r\n");
#endif
  rf_rx_off ();
    1136:	0e 94 12 0b 	call	0x1624	; 0x1624 <rf_rx_off>
  return 1;
    113a:	81 e0       	ldi	r24, 0x01	; 1
}
    113c:	08 95       	ret

0000113e <bmac_rx_failure_count_get>:


uint16_t bmac_rx_failure_count_get ()
{
  return rx_failure_cnt;
}
    113e:	80 91 46 05 	lds	r24, 0x0546
    1142:	90 91 47 05 	lds	r25, 0x0547
    1146:	08 95       	ret

00001148 <bmac_rx_failure_count_reset>:

uint8_t bmac_rx_failure_count_reset ()
{
  rx_failure_cnt = 0;
    1148:	10 92 46 05 	sts	0x0546, r1
    114c:	10 92 47 05 	sts	0x0547, r1
    1150:	10 92 48 05 	sts	0x0548, r1
    1154:	10 92 49 05 	sts	0x0549, r1
  return NRK_OK;
}
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	08 95       	ret

0000115c <_b_pow>:
  nrk_event_signal (bmac_tx_pkt_done_signal);
  return NRK_OK;
}

uint8_t _b_pow (uint8_t in)
{
    115c:	98 2f       	mov	r25, r24
  uint8_t i;
  uint8_t result;
  if (in <= 1)
    115e:	82 30       	cpi	r24, 0x02	; 2
    1160:	50 f0       	brcs	.+20     	; 0x1176 <_b_pow+0x1a>
    return 1;
  if (in > 7)
    1162:	88 30       	cpi	r24, 0x08	; 8
    1164:	08 f0       	brcs	.+2      	; 0x1168 <_b_pow+0xc>
    in = 6;                     // cap it at 128 
    1166:	96 e0       	ldi	r25, 0x06	; 6
  result = 1;
    1168:	81 e0       	ldi	r24, 0x01	; 1
  for (i = 0; i < in; i++)
    116a:	20 e0       	ldi	r18, 0x00	; 0
    result = result * 2;
    116c:	88 0f       	add	r24, r24
  if (in <= 1)
    return 1;
  if (in > 7)
    in = 6;                     // cap it at 128 
  result = 1;
  for (i = 0; i < in; i++)
    116e:	2f 5f       	subi	r18, 0xFF	; 255
    1170:	29 17       	cp	r18, r25
    1172:	e0 f3       	brcs	.-8      	; 0x116c <_b_pow+0x10>
    1174:	08 95       	ret
uint8_t _b_pow (uint8_t in)
{
  uint8_t i;
  uint8_t result;
  if (in <= 1)
    return 1;
    1176:	81 e0       	ldi	r24, 0x01	; 1
    in = 6;                     // cap it at 128 
  result = 1;
  for (i = 0; i < in; i++)
    result = result * 2;
  return result;
}
    1178:	08 95       	ret

0000117a <_bmac_tx>:
  rx_failure_cnt = 0;
  return NRK_OK;
}

int8_t _bmac_tx ()
{
    117a:	ef 92       	push	r14
    117c:	ff 92       	push	r15
    117e:	0f 93       	push	r16
    1180:	1f 93       	push	r17
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
  uint16_t b;

#ifdef DEBUG
  nrk_kprintf (PSTR ("_bmac_tx()\r\n"));
#endif
  if (cca_active) {
    1186:	80 91 3b 05 	lds	r24, 0x053B
    118a:	88 23       	and	r24, r24
    118c:	09 f4       	brne	.+2      	; 0x1190 <_bmac_tx+0x16>
    118e:	47 c0       	rjmp	.+142    	; 0x121e <_bmac_tx+0xa4>

// Add random time here to stop nodes from synchronizing with eachother
    b = _nrk_time_to_ticks (&_bmac_check_period);
    1190:	8c e3       	ldi	r24, 0x3C	; 60
    1192:	95 e0       	ldi	r25, 0x05	; 5
    1194:	0e 94 3f 22 	call	0x447e	; 0x447e <_nrk_time_to_ticks>
    1198:	ec 01       	movw	r28, r24
    b = b / ((rand () % 10) + 1);
    119a:	0e 94 d7 33 	call	0x67ae	; 0x67ae <rand>
    119e:	6a e0       	ldi	r22, 0x0A	; 10
    11a0:	70 e0       	ldi	r23, 0x00	; 0
    11a2:	0e 94 1d 33 	call	0x663a	; 0x663a <__divmodhi4>
    11a6:	bc 01       	movw	r22, r24
    11a8:	6f 5f       	subi	r22, 0xFF	; 255
    11aa:	7f 4f       	sbci	r23, 0xFF	; 255
    11ac:	ce 01       	movw	r24, r28
    11ae:	0e 94 09 33 	call	0x6612	; 0x6612 <__udivmodhi4>
//printf( "waiting %d\r\n",b );
    nrk_wait_until_ticks (b);
    11b2:	cb 01       	movw	r24, r22
    11b4:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <nrk_wait_until_ticks>
//nrk_wait_ticks(b);

    backoff_count = 1;
    11b8:	ff 24       	eor	r15, r15
    11ba:	f3 94       	inc	r15
      nrk_wait_until_next_n_periods (backoff);
      backoff_count++;
      if (backoff_count > 6)
        backoff_count = 6;      // cap it at 64    
      b = _nrk_time_to_ticks (&_bmac_check_period);
      b = b / ((rand () % 10) + 1);
    11bc:	0a e0       	ldi	r16, 0x0A	; 10
    11be:	10 e0       	ldi	r17, 0x00	; 0
        if (v == 1) { 
		break; 
	}
        nrk_event_signal (bmac_rx_pkt_signal);
#else
      v = _bmac_channel_check ();
    11c0:	0e 94 39 08 	call	0x1072	; 0x1072 <_bmac_channel_check>
    11c4:	e8 2e       	mov	r14, r24
      if (v == 1)
    11c6:	81 30       	cpi	r24, 0x01	; 1
    11c8:	51 f1       	breq	.+84     	; 0x121e <_bmac_tx+0xa4>
        break;
#endif
      // Channel is busy
      backoff = rand () % (_b_pow (backoff_count));
    11ca:	0e 94 d7 33 	call	0x67ae	; 0x67ae <rand>
    11ce:	ec 01       	movw	r28, r24
    11d0:	8f 2d       	mov	r24, r15
    11d2:	0e 94 ae 08 	call	0x115c	; 0x115c <_b_pow>
    11d6:	68 2f       	mov	r22, r24
    11d8:	70 e0       	ldi	r23, 0x00	; 0
    11da:	ce 01       	movw	r24, r28
    11dc:	0e 94 1d 33 	call	0x663a	; 0x663a <__divmodhi4>
#ifdef DEBUG
      printf ("backoff %d\r\n", backoff);
#endif
//      printf( "backoff %d\r\n",backoff );
      nrk_wait_until_next_n_periods (backoff);
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <nrk_wait_until_next_n_periods>
      backoff_count++;
      if (backoff_count > 6)
        backoff_count = 6;      // cap it at 64    
      b = _nrk_time_to_ticks (&_bmac_check_period);
    11e6:	8c e3       	ldi	r24, 0x3C	; 60
    11e8:	95 e0       	ldi	r25, 0x05	; 5
    11ea:	0e 94 3f 22 	call	0x447e	; 0x447e <_nrk_time_to_ticks>
    11ee:	ec 01       	movw	r28, r24
      b = b / ((rand () % 10) + 1);
    11f0:	0e 94 d7 33 	call	0x67ae	; 0x67ae <rand>
    11f4:	b8 01       	movw	r22, r16
    11f6:	0e 94 1d 33 	call	0x663a	; 0x663a <__divmodhi4>
    11fa:	bc 01       	movw	r22, r24
    11fc:	6f 5f       	subi	r22, 0xFF	; 255
    11fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1200:	ce 01       	movw	r24, r28
    1202:	0e 94 09 33 	call	0x6612	; 0x6612 <__udivmodhi4>
//      printf( "waiting %d\r\n",b );
      nrk_wait_until_ticks (b);
    1206:	cb 01       	movw	r24, r22
    1208:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <nrk_wait_until_ticks>
//      nrk_wait_ticks(b);

    }
    while (v == 0);
    120c:	ee 20       	and	r14, r14
    120e:	39 f4       	brne	.+14     	; 0x121e <_bmac_tx+0xa4>
#ifdef DEBUG
      printf ("backoff %d\r\n", backoff);
#endif
//      printf( "backoff %d\r\n",backoff );
      nrk_wait_until_next_n_periods (backoff);
      backoff_count++;
    1210:	f3 94       	inc	r15
    1212:	8f 2d       	mov	r24, r15
    1214:	87 30       	cpi	r24, 0x07	; 7
    1216:	a0 f2       	brcs	.-88     	; 0x11c0 <_bmac_tx+0x46>
    1218:	86 e0       	ldi	r24, 0x06	; 6
    121a:	f8 2e       	mov	r15, r24
    121c:	d1 cf       	rjmp	.-94     	; 0x11c0 <_bmac_tx+0x46>
    }
    while (v == 0);
  }

  // send extended preamble
  bmac_rfTxInfo.cca = 0;
    121e:	10 92 2e 09 	sts	0x092E, r1
  bmac_rfTxInfo.ackRequest = 0;
    1222:	10 92 2f 09 	sts	0x092F, r1

  uint16_t ms = _bmac_check_period.secs * 1000;
    1226:	20 91 3c 05 	lds	r18, 0x053C
    122a:	30 91 3d 05 	lds	r19, 0x053D
    122e:	88 ee       	ldi	r24, 0xE8	; 232
    1230:	93 e0       	ldi	r25, 0x03	; 3
    1232:	28 9f       	mul	r18, r24
    1234:	e0 01       	movw	r28, r0
    1236:	29 9f       	mul	r18, r25
    1238:	d0 0d       	add	r29, r0
    123a:	38 9f       	mul	r19, r24
    123c:	d0 0d       	add	r29, r0
    123e:	11 24       	eor	r1, r1
  ms += _bmac_check_period.nano_secs / 1000000;
    1240:	60 91 40 05 	lds	r22, 0x0540
    1244:	70 91 41 05 	lds	r23, 0x0541
    1248:	80 91 42 05 	lds	r24, 0x0542
    124c:	90 91 43 05 	lds	r25, 0x0543
    1250:	20 e4       	ldi	r18, 0x40	; 64
    1252:	32 e4       	ldi	r19, 0x42	; 66
    1254:	4f e0       	ldi	r20, 0x0F	; 15
    1256:	50 e0       	ldi	r21, 0x00	; 0
    1258:	0e 94 30 33 	call	0x6660	; 0x6660 <__udivmodsi4>
    125c:	c2 0f       	add	r28, r18
    125e:	d3 1f       	adc	r29, r19
  //printf( "CR ms: %u\n",ms );
  //target_t.nano_secs+=20*NANOS_PER_MS;
  rf_rx_on ();
    1260:	0e 94 0a 0b 	call	0x1614	; 0x1614 <rf_rx_on>
  pkt_got_ack = rf_tx_packet_repeat (&bmac_rfTxInfo, ms);
    1264:	89 e2       	ldi	r24, 0x29	; 41
    1266:	99 e0       	ldi	r25, 0x09	; 9
    1268:	be 01       	movw	r22, r28
    126a:	0e 94 18 0b 	call	0x1630	; 0x1630 <rf_tx_packet_repeat>
    126e:	80 93 44 05 	sts	0x0544, r24

  // send packet
  // pkt_got_ack=rf_tx_packet (&bmac_rfTxInfo);
  rf_rx_off ();                 // Just in case auto-ack left radio on
    1272:	0e 94 12 0b 	call	0x1624	; 0x1624 <rf_rx_off>
  tx_data_ready = 0;
    1276:	10 92 45 05 	sts	0x0545, r1
  nrk_event_signal (bmac_tx_pkt_done_signal);
    127a:	80 91 16 0c 	lds	r24, 0x0C16
    127e:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <nrk_event_signal>
  return NRK_OK;
}
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	1f 91       	pop	r17
    128a:	0f 91       	pop	r16
    128c:	ff 90       	pop	r15
    128e:	ef 90       	pop	r14
    1290:	08 95       	ret

00001292 <bmac_nw_task>:
  nrk_event_signal (bmac_enable_signal);
}


void bmac_nw_task ()
{
    1292:	ef 92       	push	r14
    1294:	ff 92       	push	r15
    1296:	0f 93       	push	r16
    1298:	1f 93       	push	r17
  int8_t v, i;
  int8_t e;
  uint8_t backoff;
  nrk_sig_mask_t event;

  while (bmac_started () == 0)
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <bmac_nw_task+0xe>
    nrk_wait_until_next_period ();
    129c:	0e 94 2a 20 	call	0x4054	; 0x4054 <nrk_wait_until_next_period>
  int8_t v, i;
  int8_t e;
  uint8_t backoff;
  nrk_sig_mask_t event;

  while (bmac_started () == 0)
    12a0:	80 91 53 05 	lds	r24, 0x0553
    12a4:	88 23       	and	r24, r24
    12a6:	d1 f3       	breq	.-12     	; 0x129c <bmac_nw_task+0xa>
    nrk_wait_until_next_period ();

//register the signal after bmac_init has been called
  v = nrk_signal_register (bmac_enable_signal);
    12a8:	80 91 a8 08 	lds	r24, 0x08A8
    12ac:	0e 94 3f 1b 	call	0x367e	; 0x367e <nrk_signal_register>
  if (v == NRK_ERROR)
    12b0:	8f 3f       	cpi	r24, 0xFF	; 255
    12b2:	21 f4       	brne	.+8      	; 0x12bc <bmac_nw_task+0x2a>
    nrk_kprintf (PSTR ("Failed to register signal\r\n"));
    12b4:	87 eb       	ldi	r24, 0xB7	; 183
    12b6:	91 e0       	ldi	r25, 0x01	; 1
    12b8:	0e 94 0a 10 	call	0x2014	; 0x2014 <nrk_kprintf>
    }
    else {
      event = 0;
      do {
        v = nrk_signal_register (bmac_enable_signal);
        event = nrk_event_wait (SIG (bmac_enable_signal));
    12bc:	91 e0       	ldi	r25, 0x01	; 1
    12be:	e9 2e       	mov	r14, r25
    12c0:	f1 2c       	mov	r15, r1
    12c2:	01 2d       	mov	r16, r1
    12c4:	11 2d       	mov	r17, r1
#ifdef NRK_SW_WDT
#ifdef BMAC_SW_WDT_ID
    nrk_sw_wdt_update (BMAC_SW_WDT_ID);
#endif
#endif
    rf_power_up ();
    12c6:	0e 94 3a 0a 	call	0x1474	; 0x1474 <rf_power_up>
    if (is_enabled) {
    12ca:	80 91 54 05 	lds	r24, 0x0554
    12ce:	88 23       	and	r24, r24
    12d0:	69 f1       	breq	.+90     	; 0x132c <bmac_nw_task+0x9a>
	 if (_bmac_rx () == 1) e = nrk_event_signal (bmac_rx_pkt_signal);
      }
      else
      e = nrk_event_signal (bmac_rx_pkt_signal);
#else
      if (rx_buf_empty == 1)
    12d2:	80 91 52 05 	lds	r24, 0x0552
    12d6:	81 30       	cpi	r24, 0x01	; 1
    12d8:	41 f4       	brne	.+16     	; 0x12ea <bmac_nw_task+0x58>
        v = _bmac_channel_check ();
    12da:	0e 94 39 08 	call	0x1072	; 0x1072 <_bmac_channel_check>
      else
        e = nrk_event_signal (bmac_rx_pkt_signal);
      // bmac_channel check turns on radio, don't turn off if
      // data is coming.

      if (v == 0) {
    12de:	88 23       	and	r24, r24
    12e0:	41 f4       	brne	.+16     	; 0x12f2 <bmac_nw_task+0x60>
        if (_bmac_rx () == 1) {
    12e2:	0e 94 50 08 	call	0x10a0	; 0x10a0 <_bmac_rx>
    12e6:	81 30       	cpi	r24, 0x01	; 1
    12e8:	21 f4       	brne	.+8      	; 0x12f2 <bmac_nw_task+0x60>
          e = nrk_event_signal (bmac_rx_pkt_signal);
    12ea:	80 91 34 09 	lds	r24, 0x0934
    12ee:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <nrk_event_signal>
        //else nrk_kprintf( PSTR("Pkt failed, buf could be corrupt\r\n" ));

      }

#endif
      if (tx_data_ready == 1) {
    12f2:	80 91 45 05 	lds	r24, 0x0545
    12f6:	81 30       	cpi	r24, 0x01	; 1
    12f8:	11 f4       	brne	.+4      	; 0x12fe <bmac_nw_task+0x6c>
        _bmac_tx ();
    12fa:	0e 94 bd 08 	call	0x117a	; 0x117a <_bmac_tx>
      }
      rf_rx_off ();
    12fe:	0e 94 12 0b 	call	0x1624	; 0x1624 <rf_rx_off>
      rf_power_down ();
    1302:	0e 94 16 0a 	call	0x142c	; 0x142c <rf_power_down>

      //do {
      nrk_wait (_bmac_check_period);
    1306:	20 91 3c 05 	lds	r18, 0x053C
    130a:	30 91 3d 05 	lds	r19, 0x053D
    130e:	40 91 3e 05 	lds	r20, 0x053E
    1312:	50 91 3f 05 	lds	r21, 0x053F
    1316:	60 91 40 05 	lds	r22, 0x0540
    131a:	70 91 41 05 	lds	r23, 0x0541
    131e:	80 91 42 05 	lds	r24, 0x0542
    1322:	90 91 43 05 	lds	r25, 0x0543
    1326:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <nrk_wait>
    132a:	cd cf       	rjmp	.-102    	; 0x12c6 <bmac_nw_task+0x34>
      //} while(rx_buf_empty!=1);
    }
    else {
      event = 0;
      do {
        v = nrk_signal_register (bmac_enable_signal);
    132c:	80 91 a8 08 	lds	r24, 0x08A8
    1330:	0e 94 3f 1b 	call	0x367e	; 0x367e <nrk_signal_register>
        event = nrk_event_wait (SIG (bmac_enable_signal));
    1334:	c8 01       	movw	r24, r16
    1336:	b7 01       	movw	r22, r14
    1338:	00 90 a8 08 	lds	r0, 0x08A8
    133c:	04 c0       	rjmp	.+8      	; 0x1346 <bmac_nw_task+0xb4>
    133e:	66 0f       	add	r22, r22
    1340:	77 1f       	adc	r23, r23
    1342:	88 1f       	adc	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	0a 94       	dec	r0
    1348:	d2 f7       	brpl	.-12     	; 0x133e <bmac_nw_task+0xac>
    134a:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <nrk_event_wait>
      }
      while ((event & SIG (bmac_enable_signal)) == 0);
    134e:	00 90 a8 08 	lds	r0, 0x08A8
    1352:	04 c0       	rjmp	.+8      	; 0x135c <bmac_nw_task+0xca>
    1354:	96 95       	lsr	r25
    1356:	87 95       	ror	r24
    1358:	77 95       	ror	r23
    135a:	67 95       	ror	r22
    135c:	0a 94       	dec	r0
    135e:	d2 f7       	brpl	.-12     	; 0x1354 <bmac_nw_task+0xc2>
    1360:	60 ff       	sbrs	r22, 0
    1362:	e4 cf       	rjmp	.-56     	; 0x132c <bmac_nw_task+0x9a>
    1364:	b0 cf       	rjmp	.-160    	; 0x12c6 <bmac_nw_task+0x34>

00001366 <bmac_task_config>:
  return result;
}


void bmac_task_config ()
{
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
  nrk_task_set_entry_function (&bmac_task, bmac_nw_task);
    136a:	c8 e9       	ldi	r28, 0x98	; 152
    136c:	d4 e0       	ldi	r29, 0x04	; 4
    136e:	ce 01       	movw	r24, r28
    1370:	69 e4       	ldi	r22, 0x49	; 73
    1372:	79 e0       	ldi	r23, 0x09	; 9
    1374:	0e 94 aa 2a 	call	0x5554	; 0x5554 <nrk_task_set_entry_function>
  nrk_task_set_stk (&bmac_task, bmac_task_stack, BMAC_STACKSIZE);
    1378:	ce 01       	movw	r24, r28
    137a:	6b eb       	ldi	r22, 0xBB	; 187
    137c:	74 e0       	ldi	r23, 0x04	; 4
    137e:	40 e8       	ldi	r20, 0x80	; 128
    1380:	50 e0       	ldi	r21, 0x00	; 0
    1382:	0e 94 ae 2a 	call	0x555c	; 0x555c <nrk_task_set_stk>
  bmac_task.prio = BMAC_TASK_PRIORITY;
    1386:	84 e1       	ldi	r24, 0x14	; 20
    1388:	80 93 a0 04 	sts	0x04A0, r24
  bmac_task.FirstActivation = TRUE;
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	80 93 9f 04 	sts	0x049F, r24
  bmac_task.Type = BASIC_TASK;
    1392:	80 93 a1 04 	sts	0x04A1, r24
  bmac_task.SchType = PREEMPTIVE;
    1396:	80 93 a2 04 	sts	0x04A2, r24
  bmac_task.period.secs = 0;
    139a:	10 92 a3 04 	sts	0x04A3, r1
    139e:	10 92 a4 04 	sts	0x04A4, r1
    13a2:	10 92 a5 04 	sts	0x04A5, r1
    13a6:	10 92 a6 04 	sts	0x04A6, r1
  bmac_task.period.nano_secs = BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS;
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	9d e2       	ldi	r25, 0x2D	; 45
    13ae:	a1 e3       	ldi	r26, 0x31	; 49
    13b0:	b1 e0       	ldi	r27, 0x01	; 1
    13b2:	80 93 a7 04 	sts	0x04A7, r24
    13b6:	90 93 a8 04 	sts	0x04A8, r25
    13ba:	a0 93 a9 04 	sts	0x04A9, r26
    13be:	b0 93 aa 04 	sts	0x04AA, r27
  bmac_task.cpu_reserve.secs = 0;       // bmac reserve , 0 to disable
    13c2:	10 92 ab 04 	sts	0x04AB, r1
    13c6:	10 92 ac 04 	sts	0x04AC, r1
    13ca:	10 92 ad 04 	sts	0x04AD, r1
    13ce:	10 92 ae 04 	sts	0x04AE, r1
  bmac_task.cpu_reserve.nano_secs = 0;
    13d2:	10 92 af 04 	sts	0x04AF, r1
    13d6:	10 92 b0 04 	sts	0x04B0, r1
    13da:	10 92 b1 04 	sts	0x04B1, r1
    13de:	10 92 b2 04 	sts	0x04B2, r1
  bmac_task.offset.secs = 0;
    13e2:	10 92 b3 04 	sts	0x04B3, r1
    13e6:	10 92 b4 04 	sts	0x04B4, r1
    13ea:	10 92 b5 04 	sts	0x04B5, r1
    13ee:	10 92 b6 04 	sts	0x04B6, r1
  bmac_task.offset.nano_secs = 0;
    13f2:	10 92 b7 04 	sts	0x04B7, r1
    13f6:	10 92 b8 04 	sts	0x04B8, r1
    13fa:	10 92 b9 04 	sts	0x04B9, r1
    13fe:	10 92 ba 04 	sts	0x04BA, r1
#ifdef DEBUG
  printf ("bmac activate\r\n");
#endif
  nrk_activate_task (&bmac_task);
    1402:	ce 01       	movw	r24, r28
    1404:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <nrk_activate_task>
}
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	08 95       	ret

0000140e <rf_cmd>:


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    140e:	90 91 41 01 	lds	r25, 0x0141
    1412:	9f 71       	andi	r25, 0x1F	; 31
    1414:	9f 31       	cpi	r25, 0x1F	; 31
    1416:	d9 f3       	breq	.-10     	; 0x140e <rf_cmd>
		continue;
	TRX_STATE = cmd;
    1418:	80 93 42 01 	sts	0x0142, r24
}
    141c:	08 95       	ret

0000141e <rf_enable_glossy>:



void rf_enable_glossy()
{
	use_glossy = 1;
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	80 93 22 0c 	sts	0x0C22, r24
}
    1424:	08 95       	ret

00001426 <rf_disable_glossy>:

void rf_disable_glossy()
{
	use_glossy = 0;
    1426:	10 92 22 0c 	sts	0x0C22, r1
}
    142a:	08 95       	ret

0000142c <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    142c:	80 91 41 01 	lds	r24, 0x0141
    1430:	8f 71       	andi	r24, 0x1F	; 31
    1432:	8f 31       	cpi	r24, 0x1F	; 31
    1434:	d9 f3       	breq	.-10     	; 0x142c <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    1436:	80 91 41 01 	lds	r24, 0x0141
    143a:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
    143c:	d1 f0       	breq	.+52     	; 0x1472 <rf_power_down+0x46>
    143e:	8f 30       	cpi	r24, 0x0F	; 15
    1440:	c1 f0       	breq	.+48     	; 0x1472 <rf_power_down+0x46>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
    1442:	80 91 41 01 	lds	r24, 0x0141
    1446:	8f 71       	andi	r24, 0x1F	; 31
    1448:	88 30       	cpi	r24, 0x08	; 8
    144a:	41 f0       	breq	.+16     	; 0x145c <rf_power_down+0x30>
		rf_cmd(TRX_OFF);
    144c:	88 e0       	ldi	r24, 0x08	; 8
    144e:	0e 94 07 0a 	call	0x140e	; 0x140e <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
    1452:	80 91 41 01 	lds	r24, 0x0141
    1456:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
    1458:	88 30       	cpi	r24, 0x08	; 8
    145a:	d9 f7       	brne	.-10     	; 0x1452 <rf_power_down+0x26>
	}

	TRXPR |= (1 << SLPTR);
    145c:	80 91 39 01 	lds	r24, 0x0139
    1460:	82 60       	ori	r24, 0x02	; 2
    1462:	80 93 39 01 	sts	0x0139, r24
	do{
		status = (TRX_STATUS & 0x1F);
    1466:	80 91 41 01 	lds	r24, 0x0141
    146a:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
    146c:	11 f0       	breq	.+4      	; 0x1472 <rf_power_down+0x46>
    146e:	8f 30       	cpi	r24, 0x0F	; 15
    1470:	d1 f7       	brne	.-12     	; 0x1466 <rf_power_down+0x3a>
    1472:	08 95       	ret

00001474 <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    1474:	80 91 41 01 	lds	r24, 0x0141
    1478:	8f 71       	andi	r24, 0x1F	; 31
    147a:	8f 31       	cpi	r24, 0x1F	; 31
    147c:	d9 f3       	breq	.-10     	; 0x1474 <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    147e:	80 91 41 01 	lds	r24, 0x0141
    1482:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
    1484:	11 f0       	breq	.+4      	; 0x148a <rf_power_up+0x16>
    1486:	8f 30       	cpi	r24, 0x0F	; 15
    1488:	51 f4       	brne	.+20     	; 0x149e <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
    148a:	80 91 39 01 	lds	r24, 0x0139
    148e:	8d 7f       	andi	r24, 0xFD	; 253
    1490:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
    1494:	80 91 41 01 	lds	r24, 0x0141
    1498:	8f 71       	andi	r24, 0x1F	; 31
    149a:	88 30       	cpi	r24, 0x08	; 8
    149c:	d9 f7       	brne	.-10     	; 0x1494 <rf_power_up+0x20>
    149e:	08 95       	ret

000014a0 <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
    14a0:	e5 e4       	ldi	r30, 0x45	; 69
    14a2:	f1 e0       	ldi	r31, 0x01	; 1
    14a4:	90 81       	ld	r25, Z
    14a6:	90 7f       	andi	r25, 0xF0	; 240
    14a8:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
    14aa:	90 81       	ld	r25, Z
    14ac:	8f 70       	andi	r24, 0x0F	; 15
    14ae:	89 2b       	or	r24, r25
    14b0:	80 83       	st	Z, r24
}
    14b2:	08 95       	ret

000014b4 <rf_addr_decode_enable>:

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
    14b4:	e7 e5       	ldi	r30, 0x57	; 87
    14b6:	f1 e0       	ldi	r31, 0x01	; 1
    14b8:	80 81       	ld	r24, Z
    14ba:	8d 7f       	andi	r24, 0xFD	; 253
    14bc:	80 83       	st	Z, r24
}
    14be:	08 95       	ret

000014c0 <rf_addr_decode_disable>:


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
    14c0:	e7 e5       	ldi	r30, 0x57	; 87
    14c2:	f1 e0       	ldi	r31, 0x01	; 1
    14c4:	80 81       	ld	r24, Z
    14c6:	82 60       	ori	r24, 0x02	; 2
    14c8:	80 83       	st	Z, r24
}
    14ca:	08 95       	ret

000014cc <rf_auto_ack_enable>:


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
    14cc:	ee e6       	ldi	r30, 0x6E	; 110
    14ce:	f1 e0       	ldi	r31, 0x01	; 1
    14d0:	80 81       	ld	r24, Z
    14d2:	8f 7e       	andi	r24, 0xEF	; 239
    14d4:	80 83       	st	Z, r24
}
    14d6:	08 95       	ret

000014d8 <rf_auto_ack_disable>:

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
    14d8:	ee e6       	ldi	r30, 0x6E	; 110
    14da:	f1 e0       	ldi	r31, 0x01	; 1
    14dc:	80 81       	ld	r24, Z
    14de:	80 61       	ori	r24, 0x10	; 16
    14e0:	80 83       	st	Z, r24
}
    14e2:	08 95       	ret

000014e4 <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
    14e4:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
    14e8:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
    14ec:	90 93 2c 0c 	sts	0x0C2C, r25
    14f0:	80 93 2b 0c 	sts	0x0C2B, r24
}
    14f4:	08 95       	ret

000014f6 <rf_set_rx>:


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
    14f6:	90 93 26 0c 	sts	0x0C26, r25
    14fa:	80 93 25 0c 	sts	0x0C25, r24
	PHY_CC_CCA &= ~(0x1F);
    14fe:	e8 e4       	ldi	r30, 0x48	; 72
    1500:	f1 e0       	ldi	r31, 0x01	; 1
    1502:	80 81       	ld	r24, Z
    1504:	80 7e       	andi	r24, 0xE0	; 224
    1506:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
    1508:	80 81       	ld	r24, Z
    150a:	68 2b       	or	r22, r24
    150c:	60 83       	st	Z, r22
}
    150e:	08 95       	ret

00001510 <rx_start_callback>:

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
    1510:	90 93 58 05 	sts	0x0558, r25
    1514:	80 93 57 05 	sts	0x0557, r24
}
    1518:	08 95       	ret

0000151a <rx_end_callback>:

void rx_end_callback(void (*func)(void)){
	rx_end_func = func;
    151a:	90 93 5a 05 	sts	0x055A, r25
    151e:	80 93 59 05 	sts	0x0559, r24
}
    1522:	08 95       	ret

00001524 <rf_init>:


void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
    1524:	1f 93       	push	r17

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
    1526:	70 e2       	ldi	r23, 0x20	; 32
    1528:	70 93 44 01 	sts	0x0144, r23
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
    152c:	70 ec       	ldi	r23, 0xC0	; 192
    152e:	70 93 45 01 	sts	0x0145, r23
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
    1532:	60 62       	ori	r22, 0x20	; 32
    1534:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
    1538:	65 ec       	ldi	r22, 0xC5	; 197
    153a:	60 93 49 01 	sts	0x0149, r22
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
    153e:	67 ea       	ldi	r22, 0xA7	; 167
    1540:	60 93 4b 01 	sts	0x014B, r22
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
    1544:	60 e8       	ldi	r22, 0x80	; 128
    1546:	60 93 4c 01 	sts	0x014C, r22
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
    154a:	20 93 60 01 	sts	0x0160, r18
    154e:	30 93 61 01 	sts	0x0161, r19
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
    1552:	40 93 62 01 	sts	0x0162, r20
    1556:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    155a:	e6 e4       	ldi	r30, 0x46	; 70
    155c:	f1 e0       	ldi	r31, 0x01	; 1
    155e:	10 81       	ld	r17, Z
    1560:	a0 81       	ld	r26, Z
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    1562:	60 81       	ld	r22, Z
    1564:	70 81       	ld	r23, Z
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    1566:	12 95       	swap	r17
    1568:	16 95       	lsr	r17
    156a:	17 70       	andi	r17, 0x07	; 7
    156c:	12 95       	swap	r17
    156e:	11 0f       	add	r17, r17
    1570:	11 0f       	add	r17, r17
    1572:	10 7c       	andi	r17, 0xC0	; 192
    1574:	72 95       	swap	r23
    1576:	76 95       	lsr	r23
    1578:	73 70       	andi	r23, 0x03	; 3
    157a:	17 2b       	or	r17, r23
    157c:	a2 95       	swap	r26
    157e:	a6 95       	lsr	r26
    1580:	a7 70       	andi	r26, 0x07	; 7
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	a3 70       	andi	r26, 0x03	; 3
    1586:	b0 70       	andi	r27, 0x00	; 0
    1588:	74 e0       	ldi	r23, 0x04	; 4
    158a:	aa 0f       	add	r26, r26
    158c:	bb 1f       	adc	r27, r27
    158e:	7a 95       	dec	r23
    1590:	e1 f7       	brne	.-8      	; 0x158a <rf_init+0x66>
    1592:	1a 2b       	or	r17, r26
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    1594:	62 95       	swap	r22
    1596:	66 95       	lsr	r22
    1598:	67 70       	andi	r22, 0x07	; 7
    159a:	70 e0       	ldi	r23, 0x00	; 0
    159c:	63 70       	andi	r22, 0x03	; 3
    159e:	70 70       	andi	r23, 0x00	; 0
    15a0:	66 0f       	add	r22, r22
    15a2:	77 1f       	adc	r23, r23
    15a4:	66 0f       	add	r22, r22
    15a6:	77 1f       	adc	r23, r23
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    15a8:	16 2b       	or	r17, r22
    15aa:	10 93 6d 01 	sts	0x016D, r17
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    15ae:	60 81       	ld	r22, Z
    15b0:	e0 81       	ld	r30, Z
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    15b2:	e2 95       	swap	r30
    15b4:	e6 95       	lsr	r30
    15b6:	e3 70       	andi	r30, 0x03	; 3
    15b8:	e0 64       	ori	r30, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    15ba:	62 95       	swap	r22
    15bc:	66 95       	lsr	r22
    15be:	67 70       	andi	r22, 0x07	; 7
    15c0:	70 e0       	ldi	r23, 0x00	; 0
    15c2:	63 70       	andi	r22, 0x03	; 3
    15c4:	70 70       	andi	r23, 0x00	; 0
    15c6:	66 0f       	add	r22, r22
    15c8:	77 1f       	adc	r23, r23
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    15ca:	e6 2b       	or	r30, r22
    15cc:	e0 93 6e 01 	sts	0x016E, r30
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
    15d0:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
	/* Enable radio interrupts */
	IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
    15d4:	6f ef       	ldi	r22, 0xFF	; 255
    15d6:	60 93 4e 01 	sts	0x014E, r22
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN);

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
    15da:	90 93 26 0c 	sts	0x0C26, r25
    15de:	80 93 25 0c 	sts	0x0C25, r24
	rfSettings.txSeqNumber = 0;
    15e2:	10 92 27 0c 	sts	0x0C27, r1
	rfSettings.ackReceived = 0;
    15e6:	10 92 28 0c 	sts	0x0C28, r1
	rfSettings.panId = panId;
    15ea:	50 93 2a 0c 	sts	0x0C2A, r21
    15ee:	40 93 29 0c 	sts	0x0C29, r20
	rfSettings.myAddr = myAddr;
    15f2:	30 93 2c 0c 	sts	0x0C2C, r19
    15f6:	20 93 2b 0c 	sts	0x0C2B, r18
	rfSettings.receiveOn = 0;
    15fa:	10 92 2d 0c 	sts	0x0C2D, r1

	rf_ready = 1;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	80 93 47 0c 	sts	0x0C47, r24
	rx_ready = 0;
    1604:	10 92 66 0c 	sts	0x0C66, r1
	tx_done = 0;
    1608:	10 92 36 0c 	sts	0x0C36, r1

	use_glossy = 0;
    160c:	10 92 22 0c 	sts	0x0C22, r1

} // rf_init() 
    1610:	1f 91       	pop	r17
    1612:	08 95       	ret

00001614 <rf_rx_on>:
	rf_cc2591_rx_on();
#endif
#ifdef GLOSSY_TESTING
	clear_packet_flags();
#endif
	rf_cmd(RX_AACK_ON);
    1614:	86 e1       	ldi	r24, 0x16	; 22
    1616:	0e 94 07 0a 	call	0x140e	; 0x140e <rf_cmd>
}
    161a:	08 95       	ret

0000161c <rf_polling_rx_on>:

#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	rf_cmd(RX_AACK_ON);
    161c:	86 e1       	ldi	r24, 0x16	; 22
    161e:	0e 94 07 0a 	call	0x140e	; 0x140e <rf_cmd>
}
    1622:	08 95       	ret

00001624 <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
	rf_cmd(TRX_OFF);
    1624:	88 e0       	ldi	r24, 0x08	; 8
    1626:	0e 94 07 0a 	call	0x140e	; 0x140e <rf_cmd>
	rx_ready = 0;
    162a:	10 92 66 0c 	sts	0x0C66, r1
}
    162e:	08 95       	ret

00001630 <rf_tx_packet_repeat>:
uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
}

uint8_t rf_tx_packet_repeat(RF_TX_INFO *pRTI, uint16_t ms)
{
    1630:	2f 92       	push	r2
    1632:	3f 92       	push	r3
    1634:	4f 92       	push	r4
    1636:	5f 92       	push	r5
    1638:	7f 92       	push	r7
    163a:	8f 92       	push	r8
    163c:	9f 92       	push	r9
    163e:	af 92       	push	r10
    1640:	bf 92       	push	r11
    1642:	cf 92       	push	r12
    1644:	df 92       	push	r13
    1646:	ef 92       	push	r14
    1648:	ff 92       	push	r15
    164a:	0f 93       	push	r16
    164c:	1f 93       	push	r17
    164e:	cf 93       	push	r28
    1650:	df 93       	push	r29
    1652:	ec 01       	movw	r28, r24
    1654:	1b 01       	movw	r2, r22
	*/

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready) 
    1656:	80 91 47 0c 	lds	r24, 0x0C47
    165a:	88 23       	and	r24, r24
    165c:	09 f4       	brne	.+2      	; 0x1660 <rf_tx_packet_repeat+0x30>
    165e:	0e c1       	rjmp	.+540    	; 0x187c <rf_tx_packet_repeat+0x24c>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
    1660:	8e 81       	ldd	r24, Y+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
    1662:	90 91 27 0c 	lds	r25, 0x0C27
    1666:	9f 5f       	subi	r25, 0xFF	; 255
    1668:	90 93 27 0c 	sts	0x0C27, r25
	machead->fcf = fcf;
    166c:	e1 e8       	ldi	r30, 0x81	; 129
    166e:	f1 e0       	ldi	r31, 0x01	; 1
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
    1670:	81 70       	andi	r24, 0x01	; 1
    1672:	82 95       	swap	r24
    1674:	88 0f       	add	r24, r24
    1676:	80 72       	andi	r24, 0x20	; 32
    1678:	81 64       	ori	r24, 0x41	; 65
    167a:	80 93 81 01 	sts	0x0181, r24
    167e:	88 e8       	ldi	r24, 0x88	; 136
    1680:	81 83       	std	Z+1, r24	; 0x01
	machead->fcf = fcf;
	if (use_glossy) {
    1682:	80 91 22 0c 	lds	r24, 0x0C22
    1686:	88 23       	and	r24, r24
    1688:	49 f0       	breq	.+18     	; 0x169c <rf_tx_packet_repeat+0x6c>
		machead->seq_num = 0xFF;
    168a:	8f ef       	ldi	r24, 0xFF	; 255
    168c:	82 83       	std	Z+2, r24	; 0x02
		machead->src_addr = 0xAAAA;
    168e:	8a ea       	ldi	r24, 0xAA	; 170
    1690:	9a ea       	ldi	r25, 0xAA	; 170
    1692:	90 87       	std	Z+8, r25	; 0x08
    1694:	87 83       	std	Z+7, r24	; 0x07
		machead->dest_addr = 0xFFFF;
    1696:	8f ef       	ldi	r24, 0xFF	; 255
    1698:	9f ef       	ldi	r25, 0xFF	; 255
    169a:	10 c0       	rjmp	.+32     	; 0x16bc <rf_tx_packet_repeat+0x8c>
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	} else {
		machead->seq_num = rfSettings.txSeqNumber;
    169c:	80 91 27 0c 	lds	r24, 0x0C27
    16a0:	82 83       	std	Z+2, r24	; 0x02
		machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
    16a2:	90 91 61 01 	lds	r25, 0x0161
    16a6:	80 91 60 01 	lds	r24, 0x0160
    16aa:	39 2f       	mov	r19, r25
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	82 2b       	or	r24, r18
    16b2:	93 2b       	or	r25, r19
    16b4:	90 87       	std	Z+8, r25	; 0x08
    16b6:	87 83       	std	Z+7, r24	; 0x07
		machead->dest_addr = pRTI->destAddr;
    16b8:	88 81       	ld	r24, Y
    16ba:	99 81       	ldd	r25, Y+1	; 0x01
    16bc:	96 83       	std	Z+6, r25	; 0x06
    16be:	85 83       	std	Z+5, r24	; 0x05
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
    16c0:	90 91 63 01 	lds	r25, 0x0163
    16c4:	80 91 62 01 	lds	r24, 0x0162
    16c8:	39 2f       	mov	r19, r25
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	82 2b       	or	r24, r18
    16d0:	93 2b       	or	r25, r19
    16d2:	94 83       	std	Z+4, r25	; 0x04
    16d4:	83 83       	std	Z+3, r24	; 0x03
	}
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
    16d6:	4a 81       	ldd	r20, Y+2	; 0x02
    16d8:	24 2f       	mov	r18, r20
    16da:	33 27       	eor	r19, r19
    16dc:	27 fd       	sbrc	r18, 7
    16de:	30 95       	com	r19
    16e0:	6b 81       	ldd	r22, Y+3	; 0x03
    16e2:	7c 81       	ldd	r23, Y+4	; 0x04
    16e4:	8a e8       	ldi	r24, 0x8A	; 138
    16e6:	91 e0       	ldi	r25, 0x01	; 1
    16e8:	53 2f       	mov	r21, r19
    16ea:	0e 94 f2 33 	call	0x67e4	; 0x67e4 <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	85 5f       	subi	r24, 0xF5	; 245
    16f2:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    16f6:	70 90 41 01 	lds	r7, 0x0141
    16fa:	8f e1       	ldi	r24, 0x1F	; 31
    16fc:	78 22       	and	r7, r24
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    16fe:	87 2d       	mov	r24, r7
    1700:	81 50       	subi	r24, 0x01	; 1
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    1702:	82 30       	cpi	r24, 0x02	; 2
    1704:	c0 f3       	brcs	.-16     	; 0x16f6 <rf_tx_packet_repeat+0xc6>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    1706:	87 2d       	mov	r24, r7
    1708:	81 31       	cpi	r24, 0x11	; 17
    170a:	a9 f3       	breq	.-22     	; 0x16f6 <rf_tx_packet_repeat+0xc6>
    170c:	82 31       	cpi	r24, 0x12	; 18
    170e:	99 f3       	breq	.-26     	; 0x16f6 <rf_tx_packet_repeat+0xc6>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    1710:	8f 31       	cpi	r24, 0x1F	; 31
    1712:	89 f3       	breq	.-30     	; 0x16f6 <rf_tx_packet_repeat+0xc6>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    1714:	88 30       	cpi	r24, 0x08	; 8
    1716:	39 f0       	breq	.+14     	; 0x1726 <rf_tx_packet_repeat+0xf6>
    1718:	86 30       	cpi	r24, 0x06	; 6
    171a:	29 f0       	breq	.+10     	; 0x1726 <rf_tx_packet_repeat+0xf6>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
    171c:	86 31       	cpi	r24, 0x16	; 22
    171e:	19 f0       	breq	.+6      	; 0x1726 <rf_tx_packet_repeat+0xf6>
    1720:	89 30       	cpi	r24, 0x09	; 9
    1722:	09 f0       	breq	.+2      	; 0x1726 <rf_tx_packet_repeat+0xf6>
    1724:	ab c0       	rjmp	.+342    	; 0x187c <rf_tx_packet_repeat+0x24c>
		return NRK_ERROR;
	}

	rf_cmd(RX_AACK_ON);
    1726:	86 e1       	ldi	r24, 0x16	; 22
    1728:	0e 94 07 0a 	call	0x140e	; 0x140e <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
    172c:	8d 81       	ldd	r24, Y+5	; 0x05
    172e:	88 23       	and	r24, r24
    1730:	69 f0       	breq	.+26     	; 0x174c <rf_tx_packet_repeat+0x11c>
		PHY_CC_CCA |= (1 << CCA_REQUEST);
    1732:	80 91 48 01 	lds	r24, 0x0148
    1736:	80 68       	ori	r24, 0x80	; 128
    1738:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
    173c:	80 91 41 01 	lds	r24, 0x0141
    1740:	87 ff       	sbrs	r24, 7
    1742:	fc cf       	rjmp	.-8      	; 0x173c <rf_tx_packet_repeat+0x10c>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
    1744:	80 91 41 01 	lds	r24, 0x0141
    1748:	86 ff       	sbrs	r24, 6
    174a:	98 c0       	rjmp	.+304    	; 0x187c <rf_tx_packet_repeat+0x24c>
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
    174c:	89 e0       	ldi	r24, 0x09	; 9
    174e:	0e 94 07 0a 	call	0x140e	; 0x140e <rf_cmd>
	if(pRTI->ackRequest)
    1752:	8e 81       	ldd	r24, Y+6	; 0x06
    1754:	88 23       	and	r24, r24
    1756:	19 f0       	breq	.+6      	; 0x175e <rf_tx_packet_repeat+0x12e>
		rf_cmd(TX_ARET_ON);
    1758:	89 e1       	ldi	r24, 0x19	; 25
    175a:	0e 94 07 0a 	call	0x140e	; 0x140e <rf_cmd>
	
	if(ms != 0){
    175e:	21 14       	cp	r2, r1
    1760:	31 04       	cpc	r3, r1
    1762:	a9 f1       	breq	.+106    	; 0x17ce <rf_tx_packet_repeat+0x19e>
		nrk_time_get(&curr_t);
    1764:	8e e2       	ldi	r24, 0x2E	; 46
    1766:	9c e0       	ldi	r25, 0x0C	; 12
    1768:	0e 94 c3 20 	call	0x4186	; 0x4186 <nrk_time_get>
		target_t.secs = curr_t.secs;
    176c:	80 91 2e 0c 	lds	r24, 0x0C2E
    1770:	90 91 2f 0c 	lds	r25, 0x0C2F
    1774:	a0 91 30 0c 	lds	r26, 0x0C30
    1778:	b0 91 31 0c 	lds	r27, 0x0C31
    177c:	80 93 48 0c 	sts	0x0C48, r24
    1780:	90 93 49 0c 	sts	0x0C49, r25
    1784:	a0 93 4a 0c 	sts	0x0C4A, r26
    1788:	b0 93 4b 0c 	sts	0x0C4B, r27
		target_t.nano_secs = curr_t.nano_secs + (ms * NANOS_PER_MS);
    178c:	b1 01       	movw	r22, r2
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	20 e4       	ldi	r18, 0x40	; 64
    1794:	32 e4       	ldi	r19, 0x42	; 66
    1796:	4f e0       	ldi	r20, 0x0F	; 15
    1798:	50 e0       	ldi	r21, 0x00	; 0
    179a:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <__mulsi3>
    179e:	20 91 32 0c 	lds	r18, 0x0C32
    17a2:	30 91 33 0c 	lds	r19, 0x0C33
    17a6:	40 91 34 0c 	lds	r20, 0x0C34
    17aa:	50 91 35 0c 	lds	r21, 0x0C35
    17ae:	62 0f       	add	r22, r18
    17b0:	73 1f       	adc	r23, r19
    17b2:	84 1f       	adc	r24, r20
    17b4:	95 1f       	adc	r25, r21
    17b6:	60 93 4c 0c 	sts	0x0C4C, r22
    17ba:	70 93 4d 0c 	sts	0x0C4D, r23
    17be:	80 93 4e 0c 	sts	0x0C4E, r24
    17c2:	90 93 4f 0c 	sts	0x0C4F, r25
		nrk_time_compact_nanos(&target_t);
    17c6:	88 e4       	ldi	r24, 0x48	; 72
    17c8:	9c e0       	ldi	r25, 0x0C	; 12
    17ca:	0e 94 b0 21 	call	0x4360	; 0x4360 <nrk_time_compact_nanos>
	do{
#ifdef RADIO_CC2591
		rf_cc2591_tx_on();
#endif

		tx_done = 0;
    17ce:	10 92 36 0c 	sts	0x0C36, r1
		/* Send the packet. 0x2 is equivalent to TX_START */
		rf_cmd(0x2);
    17d2:	82 e0       	ldi	r24, 0x02	; 2
    17d4:	0e 94 07 0a 	call	0x140e	; 0x140e <rf_cmd>

		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
    17d8:	44 24       	eor	r4, r4
    17da:	55 24       	eor	r5, r5
    17dc:	08 c0       	rjmp	.+16     	; 0x17ee <rf_tx_packet_repeat+0x1be>
    17de:	08 94       	sec
    17e0:	41 1c       	adc	r4, r1
    17e2:	51 1c       	adc	r5, r1
    17e4:	88 ee       	ldi	r24, 0xE8	; 232
    17e6:	48 16       	cp	r4, r24
    17e8:	8d ef       	ldi	r24, 0xFD	; 253
    17ea:	58 06       	cpc	r5, r24
    17ec:	21 f0       	breq	.+8      	; 0x17f6 <rf_tx_packet_repeat+0x1c6>
    17ee:	80 91 36 0c 	lds	r24, 0x0C36
    17f2:	88 23       	and	r24, r24
    17f4:	a1 f3       	breq	.-24     	; 0x17de <rf_tx_packet_repeat+0x1ae>
			continue;
		if(ms == 0)
    17f6:	21 14       	cp	r2, r1
    17f8:	31 04       	cpc	r3, r1
    17fa:	59 f1       	breq	.+86     	; 0x1852 <rf_tx_packet_repeat+0x222>
			break;
		nrk_time_get(&curr_t);
    17fc:	8e e2       	ldi	r24, 0x2E	; 46
    17fe:	9c e0       	ldi	r25, 0x0C	; 12
    1800:	0e 94 c3 20 	call	0x4186	; 0x4186 <nrk_time_get>
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);
    1804:	87 e6       	ldi	r24, 0x67	; 103
    1806:	9c e0       	ldi	r25, 0x0C	; 12
    1808:	00 91 48 0c 	lds	r16, 0x0C48
    180c:	10 91 49 0c 	lds	r17, 0x0C49
    1810:	20 91 4a 0c 	lds	r18, 0x0C4A
    1814:	30 91 4b 0c 	lds	r19, 0x0C4B
    1818:	40 91 4c 0c 	lds	r20, 0x0C4C
    181c:	50 91 4d 0c 	lds	r21, 0x0C4D
    1820:	60 91 4e 0c 	lds	r22, 0x0C4E
    1824:	70 91 4f 0c 	lds	r23, 0x0C4F
    1828:	80 90 2e 0c 	lds	r8, 0x0C2E
    182c:	90 90 2f 0c 	lds	r9, 0x0C2F
    1830:	a0 90 30 0c 	lds	r10, 0x0C30
    1834:	b0 90 31 0c 	lds	r11, 0x0C31
    1838:	c0 90 32 0c 	lds	r12, 0x0C32
    183c:	d0 90 33 0c 	lds	r13, 0x0C33
    1840:	e0 90 34 0c 	lds	r14, 0x0C34
    1844:	f0 90 35 0c 	lds	r15, 0x0C35
    1848:	0e 94 21 21 	call	0x4242	; 0x4242 <nrk_time_sub>
    184c:	8f 3f       	cpi	r24, 0xFF	; 255
    184e:	09 f0       	breq	.+2      	; 0x1852 <rf_tx_packet_repeat+0x222>
    1850:	be cf       	rjmp	.-132    	; 0x17ce <rf_tx_packet_repeat+0x19e>

	trx_error = ((pRTI->ackRequest && 
    1852:	8e 81       	ldd	r24, Y+6	; 0x06
    1854:	88 23       	and	r24, r24
    1856:	31 f0       	breq	.+12     	; 0x1864 <rf_tx_packet_repeat+0x234>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
    1858:	80 91 42 01 	lds	r24, 0x0142
    185c:	82 95       	swap	r24
    185e:	86 95       	lsr	r24
    1860:	87 70       	andi	r24, 0x07	; 7
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    1862:	29 f4       	brne	.+10     	; 0x186e <rf_tx_packet_repeat+0x23e>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
    1864:	88 ee       	ldi	r24, 0xE8	; 232
    1866:	48 16       	cp	r4, r24
    1868:	8d ef       	ldi	r24, 0xFD	; 253
    186a:	58 06       	cpc	r5, r24
    186c:	11 f4       	brne	.+4      	; 0x1872 <rf_tx_packet_repeat+0x242>
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    186e:	1f ef       	ldi	r17, 0xFF	; 255
    1870:	01 c0       	rjmp	.+2      	; 0x1874 <rf_tx_packet_repeat+0x244>
    1872:	11 e0       	ldi	r17, 0x01	; 1
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
    1874:	87 2d       	mov	r24, r7
    1876:	0e 94 07 0a 	call	0x140e	; 0x140e <rf_cmd>

#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
    187a:	01 c0       	rjmp	.+2      	; 0x187e <rf_tx_packet_repeat+0x24e>
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
		while(!(TRX_STATUS & (1 << CCA_DONE)))
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
    187c:	1f ef       	ldi	r17, 0xFF	; 255
#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
}
    187e:	81 2f       	mov	r24, r17
    1880:	df 91       	pop	r29
    1882:	cf 91       	pop	r28
    1884:	1f 91       	pop	r17
    1886:	0f 91       	pop	r16
    1888:	ff 90       	pop	r15
    188a:	ef 90       	pop	r14
    188c:	df 90       	pop	r13
    188e:	cf 90       	pop	r12
    1890:	bf 90       	pop	r11
    1892:	af 90       	pop	r10
    1894:	9f 90       	pop	r9
    1896:	8f 90       	pop	r8
    1898:	7f 90       	pop	r7
    189a:	5f 90       	pop	r5
    189c:	4f 90       	pop	r4
    189e:	3f 90       	pop	r3
    18a0:	2f 90       	pop	r2
    18a2:	08 95       	ret

000018a4 <rf_tx_packet>:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------

uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
    18a4:	60 e0       	ldi	r22, 0x00	; 0
    18a6:	70 e0       	ldi	r23, 0x00	; 0
    18a8:	0e 94 18 0b 	call	0x1630	; 0x1630 <rf_tx_packet_repeat>
}
    18ac:	08 95       	ret

000018ae <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
    18ae:	0f 93       	push	r16
    18b0:	1f 93       	push	r17
	uint8_t trx_status, cca_value;

	if(!rf_ready)
    18b2:	80 91 47 0c 	lds	r24, 0x0C47
    18b6:	88 23       	and	r24, r24
    18b8:	49 f1       	breq	.+82     	; 0x190c <rf_cca_check+0x5e>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    18ba:	10 91 41 01 	lds	r17, 0x0141
    18be:	1f 71       	andi	r17, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    18c0:	81 2f       	mov	r24, r17
    18c2:	81 50       	subi	r24, 0x01	; 1
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    18c4:	82 30       	cpi	r24, 0x02	; 2
    18c6:	c8 f3       	brcs	.-14     	; 0x18ba <rf_cca_check+0xc>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    18c8:	11 31       	cpi	r17, 0x11	; 17
    18ca:	b9 f3       	breq	.-18     	; 0x18ba <rf_cca_check+0xc>
    18cc:	12 31       	cpi	r17, 0x12	; 18
    18ce:	a9 f3       	breq	.-22     	; 0x18ba <rf_cca_check+0xc>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    18d0:	1f 31       	cpi	r17, 0x1F	; 31
    18d2:	99 f3       	breq	.-26     	; 0x18ba <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    18d4:	18 30       	cpi	r17, 0x08	; 8
    18d6:	21 f0       	breq	.+8      	; 0x18e0 <rf_cca_check+0x32>
    18d8:	16 30       	cpi	r17, 0x06	; 6
    18da:	11 f0       	breq	.+4      	; 0x18e0 <rf_cca_check+0x32>
			&& (trx_status != RX_AACK_ON))
    18dc:	16 31       	cpi	r17, 0x16	; 22
    18de:	b1 f4       	brne	.+44     	; 0x190c <rf_cca_check+0x5e>
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
    18e0:	86 e1       	ldi	r24, 0x16	; 22
    18e2:	0e 94 07 0a 	call	0x140e	; 0x140e <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
    18e6:	80 91 48 01 	lds	r24, 0x0148
    18ea:	80 68       	ori	r24, 0x80	; 128
    18ec:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
    18f0:	80 91 41 01 	lds	r24, 0x0141
    18f4:	87 ff       	sbrs	r24, 7
    18f6:	fc cf       	rjmp	.-8      	; 0x18f0 <rf_cca_check+0x42>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    18f8:	00 91 41 01 	lds	r16, 0x0141
	rf_cmd(trx_status);
    18fc:	81 2f       	mov	r24, r17
    18fe:	0e 94 07 0a 	call	0x140e	; 0x140e <rf_cmd>

	return cca_value;
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	06 fd       	sbrc	r16, 6
    1906:	03 c0       	rjmp	.+6      	; 0x190e <rf_cca_check+0x60>
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	01 c0       	rjmp	.+2      	; 0x190e <rf_cca_check+0x60>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
    190c:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
    190e:	1f 91       	pop	r17
    1910:	0f 91       	pop	r16
    1912:	08 95       	ret

00001914 <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
    1914:	80 91 47 0c 	lds	r24, 0x0C47
    1918:	88 23       	and	r24, r24
    191a:	09 f4       	brne	.+2      	; 0x191e <rf_rx_packet_nonblock+0xa>
    191c:	a2 c0       	rjmp	.+324    	; 0x1a62 <rf_rx_packet_nonblock+0x14e>
		return NRK_ERROR;

	if(!rx_ready)
    191e:	80 91 66 0c 	lds	r24, 0x0C66
    1922:	88 23       	and	r24, r24
    1924:	09 f4       	brne	.+2      	; 0x1928 <rf_rx_packet_nonblock+0x14>
    1926:	9f c0       	rjmp	.+318    	; 0x1a66 <rf_rx_packet_nonblock+0x152>
		return 0;
	else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
    1928:	80 91 7b 01 	lds	r24, 0x017B
    192c:	e0 91 25 0c 	lds	r30, 0x0C25
    1930:	f0 91 26 0c 	lds	r31, 0x0C26
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	02 97       	sbiw	r24, 0x02	; 2
    1938:	24 81       	ldd	r18, Z+4	; 0x04
    193a:	33 27       	eor	r19, r19
    193c:	27 fd       	sbrc	r18, 7
    193e:	30 95       	com	r19
    1940:	28 17       	cp	r18, r24
    1942:	39 07       	cpc	r19, r25
    1944:	0c f4       	brge	.+2      	; 0x1948 <rf_rx_packet_nonblock+0x34>
    1946:	91 c0       	rjmp	.+290    	; 0x1a6a <rf_rx_packet_nonblock+0x156>
		return NRK_ERROR;

	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
    1948:	e0 91 25 0c 	lds	r30, 0x0C25
    194c:	f0 91 26 0c 	lds	r31, 0x0C26
    1950:	80 91 82 01 	lds	r24, 0x0182
    1954:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
    1956:	e0 91 25 0c 	lds	r30, 0x0C25
    195a:	f0 91 26 0c 	lds	r31, 0x0C26
    195e:	80 91 87 01 	lds	r24, 0x0187
    1962:	90 91 88 01 	lds	r25, 0x0188
    1966:	92 83       	std	Z+2, r25	; 0x02
    1968:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
    196a:	e0 91 25 0c 	lds	r30, 0x0C25
    196e:	f0 91 26 0c 	lds	r31, 0x0C26
    1972:	80 91 7b 01 	lds	r24, 0x017B
    1976:	8b 50       	subi	r24, 0x0B	; 11
    1978:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
    197a:	a0 91 25 0c 	lds	r26, 0x0C25
    197e:	b0 91 26 0c 	lds	r27, 0x0C26
    1982:	e0 91 25 0c 	lds	r30, 0x0C25
    1986:	f0 91 26 0c 	lds	r31, 0x0C26
    198a:	13 96       	adiw	r26, 0x03	; 3
    198c:	9c 91       	ld	r25, X
    198e:	13 97       	sbiw	r26, 0x03	; 3
    1990:	84 81       	ldd	r24, Z+4	; 0x04
    1992:	89 17       	cp	r24, r25
    1994:	3c f0       	brlt	.+14     	; 0x19a4 <rf_rx_packet_nonblock+0x90>
			|| (rfSettings.pRxInfo->length < 0)){
    1996:	e0 91 25 0c 	lds	r30, 0x0C25
    199a:	f0 91 26 0c 	lds	r31, 0x0C26
    199e:	83 81       	ldd	r24, Z+3	; 0x03
    19a0:	87 ff       	sbrs	r24, 7
    19a2:	0d c0       	rjmp	.+26     	; 0x19be <rf_rx_packet_nonblock+0xaa>
		rx_ready = 0;
    19a4:	10 92 66 0c 	sts	0x0C66, r1
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    19a8:	80 91 4c 01 	lds	r24, 0x014C
    19ac:	8f 77       	andi	r24, 0x7F	; 127
    19ae:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    19b2:	80 91 4c 01 	lds	r24, 0x014C
    19b6:	80 68       	ori	r24, 0x80	; 128
    19b8:	80 93 4c 01 	sts	0x014C, r24
    19bc:	52 c0       	rjmp	.+164    	; 0x1a62 <rf_rx_packet_nonblock+0x14e>
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
    19be:	e0 91 25 0c 	lds	r30, 0x0C25
    19c2:	f0 91 26 0c 	lds	r31, 0x0C26
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
    19c6:	a0 91 25 0c 	lds	r26, 0x0C25
    19ca:	b0 91 26 0c 	lds	r27, 0x0C26
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
    19ce:	13 96       	adiw	r26, 0x03	; 3
    19d0:	4c 91       	ld	r20, X
    19d2:	24 2f       	mov	r18, r20
    19d4:	33 27       	eor	r19, r19
    19d6:	27 fd       	sbrc	r18, 7
    19d8:	30 95       	com	r19
    19da:	85 81       	ldd	r24, Z+5	; 0x05
    19dc:	96 81       	ldd	r25, Z+6	; 0x06
    19de:	69 e8       	ldi	r22, 0x89	; 137
    19e0:	71 e0       	ldi	r23, 0x01	; 1
    19e2:	53 2f       	mov	r21, r19
    19e4:	0e 94 f2 33 	call	0x67e4	; 0x67e4 <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
	
	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
    19e8:	e0 91 25 0c 	lds	r30, 0x0C25
    19ec:	f0 91 26 0c 	lds	r31, 0x0C26
    19f0:	80 91 80 01 	lds	r24, 0x0180
    19f4:	82 95       	swap	r24
    19f6:	86 95       	lsr	r24
    19f8:	81 70       	andi	r24, 0x01	; 1
    19fa:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
    19fc:	e0 91 25 0c 	lds	r30, 0x0C25
    1a00:	f0 91 26 0c 	lds	r31, 0x0C26
    1a04:	80 91 47 01 	lds	r24, 0x0147
    1a08:	80 87       	std	Z+8, r24	; 0x08
	rfSettings.pRxInfo->actualRssi = PHY_RSSI >> 3;
    1a0a:	e0 91 25 0c 	lds	r30, 0x0C25
    1a0e:	f0 91 26 0c 	lds	r31, 0x0C26
    1a12:	80 91 46 01 	lds	r24, 0x0146
    1a16:	86 95       	lsr	r24
    1a18:	86 95       	lsr	r24
    1a1a:	86 95       	lsr	r24
    1a1c:	81 87       	std	Z+9, r24	; 0x09
	rfSettings.pRxInfo->energyDetectionLevel = PHY_ED_LEVEL;
    1a1e:	e0 91 25 0c 	lds	r30, 0x0C25
    1a22:	f0 91 26 0c 	lds	r31, 0x0C26
    1a26:	80 91 47 01 	lds	r24, 0x0147
    1a2a:	82 87       	std	Z+10, r24	; 0x0a
	rfSettings.pRxInfo->linkQualityIndication = *(frame_start + TST_RX_LENGTH);
    1a2c:	a0 91 25 0c 	lds	r26, 0x0C25
    1a30:	b0 91 26 0c 	lds	r27, 0x0C26
    1a34:	e0 91 7b 01 	lds	r30, 0x017B
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	e0 58       	subi	r30, 0x80	; 128
    1a3c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a3e:	80 81       	ld	r24, Z
    1a40:	1b 96       	adiw	r26, 0x0b	; 11
    1a42:	8c 93       	st	X, r24
    1a44:	1b 97       	sbiw	r26, 0x0b	; 11

	/* Reset frame buffer protection */
	rx_ready = 0;
    1a46:	10 92 66 0c 	sts	0x0C66, r1
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    1a4a:	80 91 4c 01 	lds	r24, 0x014C
    1a4e:	8f 77       	andi	r24, 0x7F	; 127
    1a50:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    1a54:	80 91 4c 01 	lds	r24, 0x014C
    1a58:	80 68       	ori	r24, 0x80	; 128
    1a5a:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	08 95       	ret
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
		return NRK_ERROR;
    1a62:	8f ef       	ldi	r24, 0xFF	; 255
    1a64:	08 95       	ret

	if(!rx_ready)
		return 0;
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	08 95       	ret
	else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
		return NRK_ERROR;
    1a6a:	8f ef       	ldi	r24, 0xFF	; 255
	rx_ready = 0;
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);

	return NRK_OK;
}
    1a6c:	08 95       	ret

00001a6e <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
    1a6e:	1f 92       	push	r1
    1a70:	0f 92       	push	r0
    1a72:	0f b6       	in	r0, 0x3f	; 63
    1a74:	0f 92       	push	r0
    1a76:	11 24       	eor	r1, r1
    1a78:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
    1a7a:	80 e8       	ldi	r24, 0x80	; 128
    1a7c:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1a80:	8f 91       	pop	r24
    1a82:	0f 90       	pop	r0
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	0f 90       	pop	r0
    1a88:	1f 90       	pop	r1
    1a8a:	18 95       	reti

00001a8c <__vector_63>:

SIGNAL(TRX24_TX_END_vect)
{
    1a8c:	1f 92       	push	r1
    1a8e:	0f 92       	push	r0
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	0f 92       	push	r0
    1a94:	11 24       	eor	r1, r1
    1a96:	8f 93       	push	r24
	vprintf("TX_END IRQ!\r\n");
	tx_done = 1;
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	80 93 36 0c 	sts	0x0C36, r24
	IRQ_STATUS = (1 << TX_END);
    1a9e:	80 e4       	ldi	r24, 0x40	; 64
    1aa0:	80 93 4f 01 	sts	0x014F, r24
#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	return;
}
    1aa4:	8f 91       	pop	r24
    1aa6:	0f 90       	pop	r0
    1aa8:	0f be       	out	0x3f, r0	; 63
    1aaa:	0f 90       	pop	r0
    1aac:	1f 90       	pop	r1
    1aae:	18 95       	reti

00001ab0 <__vector_62>:

SIGNAL(TRX24_XAH_AMI_vect)
{
    1ab0:	1f 92       	push	r1
    1ab2:	0f 92       	push	r0
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	0f 92       	push	r0
    1ab8:	11 24       	eor	r1, r1
    1aba:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
    1abc:	80 e2       	ldi	r24, 0x20	; 32
    1abe:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1ac2:	8f 91       	pop	r24
    1ac4:	0f 90       	pop	r0
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	0f 90       	pop	r0
    1aca:	1f 90       	pop	r1
    1acc:	18 95       	reti

00001ace <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
    1ace:	1f 92       	push	r1
    1ad0:	0f 92       	push	r0
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	0f 92       	push	r0
    1ad6:	11 24       	eor	r1, r1
    1ad8:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
    1ada:	80 e1       	ldi	r24, 0x10	; 16
    1adc:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1ae0:	8f 91       	pop	r24
    1ae2:	0f 90       	pop	r0
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	0f 90       	pop	r0
    1ae8:	1f 90       	pop	r1
    1aea:	18 95       	reti

00001aec <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
    1aec:	1f 92       	push	r1
    1aee:	0f 92       	push	r0
    1af0:	0f b6       	in	r0, 0x3f	; 63
    1af2:	0f 92       	push	r0
    1af4:	0b b6       	in	r0, 0x3b	; 59
    1af6:	0f 92       	push	r0
    1af8:	11 24       	eor	r1, r1
    1afa:	2f 93       	push	r18
    1afc:	3f 93       	push	r19
    1afe:	4f 93       	push	r20
    1b00:	5f 93       	push	r21
    1b02:	6f 93       	push	r22
    1b04:	7f 93       	push	r23
    1b06:	8f 93       	push	r24
    1b08:	9f 93       	push	r25
    1b0a:	af 93       	push	r26
    1b0c:	bf 93       	push	r27
    1b0e:	ef 93       	push	r30
    1b10:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
    1b12:	84 e0       	ldi	r24, 0x04	; 4
    1b14:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
    1b18:	e0 91 57 05 	lds	r30, 0x0557
    1b1c:	f0 91 58 05 	lds	r31, 0x0558
    1b20:	30 97       	sbiw	r30, 0x00	; 0
    1b22:	09 f0       	breq	.+2      	; 0x1b26 <__vector_59+0x3a>
		rx_start_func();
    1b24:	09 95       	icall

	return;
}
    1b26:	ff 91       	pop	r31
    1b28:	ef 91       	pop	r30
    1b2a:	bf 91       	pop	r27
    1b2c:	af 91       	pop	r26
    1b2e:	9f 91       	pop	r25
    1b30:	8f 91       	pop	r24
    1b32:	7f 91       	pop	r23
    1b34:	6f 91       	pop	r22
    1b36:	5f 91       	pop	r21
    1b38:	4f 91       	pop	r20
    1b3a:	3f 91       	pop	r19
    1b3c:	2f 91       	pop	r18
    1b3e:	0f 90       	pop	r0
    1b40:	0b be       	out	0x3b, r0	; 59
    1b42:	0f 90       	pop	r0
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	0f 90       	pop	r0
    1b48:	1f 90       	pop	r1
    1b4a:	18 95       	reti

00001b4c <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
    1b4c:	1f 92       	push	r1
    1b4e:	0f 92       	push	r0
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	0f 92       	push	r0
    1b54:	11 24       	eor	r1, r1
    1b56:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
    1b58:	82 e0       	ldi	r24, 0x02	; 2
    1b5a:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1b5e:	8f 91       	pop	r24
    1b60:	0f 90       	pop	r0
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	0f 90       	pop	r0
    1b66:	1f 90       	pop	r1
    1b68:	18 95       	reti

00001b6a <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
    1b6a:	1f 92       	push	r1
    1b6c:	0f 92       	push	r0
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	0f 92       	push	r0
    1b72:	11 24       	eor	r1, r1
    1b74:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1b7c:	8f 91       	pop	r24
    1b7e:	0f 90       	pop	r0
    1b80:	0f be       	out	0x3f, r0	; 63
    1b82:	0f 90       	pop	r0
    1b84:	1f 90       	pop	r1
    1b86:	18 95       	reti

00001b88 <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
    1b88:	e9 e4       	ldi	r30, 0x49	; 73
    1b8a:	f1 e0       	ldi	r31, 0x01	; 1
    1b8c:	90 81       	ld	r25, Z
    1b8e:	90 7f       	andi	r25, 0xF0	; 240
    1b90:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
    1b92:	90 81       	ld	r25, Z
    1b94:	8f 70       	andi	r24, 0x0F	; 15
    1b96:	89 2b       	or	r24, r25
    1b98:	80 83       	st	Z, r24
	return;
}
    1b9a:	08 95       	ret

00001b9c <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
    1b9c:	8f ef       	ldi	r24, 0xFF	; 255
    1b9e:	08 95       	ret

00001ba0 <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
	return;
}
    1ba0:	08 95       	ret

00001ba2 <rf_security_set_key>:


void rf_security_set_key(uint8_t *key)
{
	return;
}
    1ba2:	08 95       	ret

00001ba4 <rf_security_disable>:


void rf_security_disable()
{
	return;
}
    1ba4:	08 95       	ret

00001ba6 <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
    1ba6:	8f ef       	ldi	r24, 0xFF	; 255
    1ba8:	08 95       	ret

00001baa <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    1baa:	80 91 20 0c 	lds	r24, 0x0C20
    1bae:	90 91 21 0c 	lds	r25, 0x0C21
    1bb2:	08 95       	ret

00001bb4 <rf_rx_packet>:
	/*
	int8_t tmp;
	if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
	*/
	return 0;
}
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	08 95       	ret

00001bb8 <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
}
    1bb8:	08 95       	ret

00001bba <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	08 95       	ret

00001bbe <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	08 95       	ret

00001bc2 <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	08 95       	ret

00001bc6 <rf_carrier_on>:
     
#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
}
    1bc6:	08 95       	ret

00001bc8 <rf_carrier_off>:
     
#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
}
    1bc8:	08 95       	ret

00001bca <rf_test_mode>:

#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
}
    1bca:	08 95       	ret

00001bcc <rf_data_mode>:

#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
}
    1bcc:	08 95       	ret

00001bce <rf_rx_set_serial>:
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
}
    1bce:	08 95       	ret

00001bd0 <rf_tx_set_serial>:
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
}
    1bd0:	08 95       	ret

00001bd2 <rf_set_preamble_length>:
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
}
    1bd2:	08 95       	ret

00001bd4 <rf_set_cca_mode>:


void rf_set_cca_mode(uint8_t mode)
{
}
    1bd4:	08 95       	ret

00001bd6 <rf_cc2591_tx_on>:


void rf_cc2591_tx_on()
{
	DPDS1	|= 0x3; 
    1bd6:	e7 e3       	ldi	r30, 0x37	; 55
    1bd8:	f1 e0       	ldi	r31, 0x01	; 1
    1bda:	80 81       	ld	r24, Z
    1bdc:	83 60       	ori	r24, 0x03	; 3
    1bde:	80 83       	st	Z, r24
	DDRG	|= 0x1;
    1be0:	98 9a       	sbi	0x13, 0	; 19
	PORTG	|= 0x1;
    1be2:	a0 9a       	sbi	0x14, 0	; 20
	DDRE	|= 0xE0;
    1be4:	8d b1       	in	r24, 0x0d	; 13
    1be6:	80 6e       	ori	r24, 0xE0	; 224
    1be8:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
    1bea:	8e b1       	in	r24, 0x0e	; 14
    1bec:	80 6e       	ori	r24, 0xE0	; 224
    1bee:	8e b9       	out	0x0e, r24	; 14

    //nrk_spin_wait_us(12);
}
    1bf0:	08 95       	ret

00001bf2 <rf_cc2591_rx_on>:

void rf_cc2591_rx_on()
{
	DPDS1	|= 0x3; 
    1bf2:	e7 e3       	ldi	r30, 0x37	; 55
    1bf4:	f1 e0       	ldi	r31, 0x01	; 1
    1bf6:	80 81       	ld	r24, Z
    1bf8:	83 60       	ori	r24, 0x03	; 3
    1bfa:	80 83       	st	Z, r24
	DDRG	|= 0x1;
    1bfc:	98 9a       	sbi	0x13, 0	; 19
	PORTG	&= ~(0x1);
    1bfe:	a0 98       	cbi	0x14, 0	; 20
	DDRE	|= 0xE0;
    1c00:	8d b1       	in	r24, 0x0d	; 13
    1c02:	80 6e       	ori	r24, 0xE0	; 224
    1c04:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
    1c06:	8e b1       	in	r24, 0x0e	; 14
    1c08:	80 6e       	ori	r24, 0xE0	; 224
    1c0a:	8e b9       	out	0x0e, r24	; 14

    //nrk_spin_wait_us(12);
}
    1c0c:	08 95       	ret

00001c0e <rf_glossy_interrupt>:
	curr_count = 0;
}
#endif

void rf_glossy_interrupt()
{
    1c0e:	cf 92       	push	r12
    1c10:	df 92       	push	r13
    1c12:	ef 92       	push	r14
    1c14:	ff 92       	push	r15
    1c16:	0f 93       	push	r16
    1c18:	1f 93       	push	r17
    1c1a:	df 93       	push	r29
    1c1c:	cf 93       	push	r28
    1c1e:	cd b7       	in	r28, 0x3d	; 61
    1c20:	de b7       	in	r29, 0x3e	; 62
    1c22:	27 97       	sbiw	r28, 0x07	; 7
    1c24:	0f b6       	in	r0, 0x3f	; 63
    1c26:	f8 94       	cli
    1c28:	de bf       	out	0x3e, r29	; 62
    1c2a:	0f be       	out	0x3f, r0	; 63
    1c2c:	cd bf       	out	0x3d, r28	; 61
	nrk_int_disable();
    1c2e:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <nrk_int_disable>

	RF_RX_INFO rfRxInfo = *(rfSettings.pRxInfo);
    1c32:	e0 91 25 0c 	lds	r30, 0x0C25
    1c36:	f0 91 26 0c 	lds	r31, 0x0C26
    1c3a:	c0 80       	ld	r12, Z
    1c3c:	e3 80       	ldd	r14, Z+3	; 0x03
    1c3e:	05 81       	ldd	r16, Z+5	; 0x05
    1c40:	16 81       	ldd	r17, Z+6	; 0x06
    1c42:	d0 84       	ldd	r13, Z+8	; 0x08
	RF_TX_INFO rfTxInfo;

	/* Grab packet */
	int err = rf_rx_packet_nonblock();
    1c44:	0e 94 8a 0c 	call	0x1914	; 0x1914 <rf_rx_packet_nonblock>
	if (err < 1) {
    1c48:	18 16       	cp	r1, r24
    1c4a:	1c f0       	brlt	.+6      	; 0x1c52 <rf_glossy_interrupt+0x44>
		printf("rf_rx_packet_nonblock failed]\r\n");
    1c4c:	88 e6       	ldi	r24, 0x68	; 104
    1c4e:	92 e0       	ldi	r25, 0x02	; 2
    1c50:	06 c0       	rjmp	.+12     	; 0x1c5e <rf_glossy_interrupt+0x50>
		nrk_int_enable();
		return;
	}

	/* TTL should be the first byte of the payload */
	uint8_t ttl = rfRxInfo.pPayload[0];
    1c52:	d8 01       	movw	r26, r16
    1c54:	fc 90       	ld	r15, X
	if (ttl == 0) {
    1c56:	ff 20       	and	r15, r15
    1c58:	39 f4       	brne	.+14     	; 0x1c68 <rf_glossy_interrupt+0x5a>
#ifndef GLOSSY_TESTING
		printf("Packet is done bouncing around!\r\n\n");
    1c5a:	87 e8       	ldi	r24, 0x87	; 135
    1c5c:	92 e0       	ldi	r25, 0x02	; 2
    1c5e:	0e 94 cd 34 	call	0x699a	; 0x699a <puts>
#endif
		nrk_int_enable();
    1c62:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <nrk_int_enable>
		return;
    1c66:	42 c0       	rjmp	.+132    	; 0x1cec <rf_glossy_interrupt+0xde>
	} else if (ttl == 5) {
    1c68:	bf 2d       	mov	r27, r15
    1c6a:	b5 30       	cpi	r27, 0x05	; 5
    1c6c:	21 f4       	brne	.+8      	; 0x1c76 <rf_glossy_interrupt+0x68>
#ifndef GLOSSY_TESTING
		printf("\n");
    1c6e:	8a e0       	ldi	r24, 0x0A	; 10
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	0e 94 c6 34 	call	0x698c	; 0x698c <putchar>

	/* Print packet information */
#ifndef GLOSSY_TESTING
	int8_t rssi = rfRxInfo.rssi;
	uint8_t snum = rfRxInfo.seqNumber;
	printf("SEQ:%4u\tTTL:%2d\tRSSI:%4d\tPayload: [%s]\r\n", 
    1c76:	ed b7       	in	r30, 0x3d	; 61
    1c78:	fe b7       	in	r31, 0x3e	; 62
    1c7a:	3a 97       	sbiw	r30, 0x0a	; 10
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	fe bf       	out	0x3e, r31	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	ed bf       	out	0x3d, r30	; 61
    1c86:	31 96       	adiw	r30, 0x01	; 1
    1c88:	29 ea       	ldi	r18, 0xA9	; 169
    1c8a:	32 e0       	ldi	r19, 0x02	; 2
    1c8c:	ad b7       	in	r26, 0x3d	; 61
    1c8e:	be b7       	in	r27, 0x3e	; 62
    1c90:	12 96       	adiw	r26, 0x02	; 2
    1c92:	3c 93       	st	X, r19
    1c94:	2e 93       	st	-X, r18
    1c96:	11 97       	sbiw	r26, 0x01	; 1
    1c98:	c2 82       	std	Z+2, r12	; 0x02
    1c9a:	13 82       	std	Z+3, r1	; 0x03
    1c9c:	f4 82       	std	Z+4, r15	; 0x04
    1c9e:	15 82       	std	Z+5, r1	; 0x05
    1ca0:	8d 2d       	mov	r24, r13
    1ca2:	99 27       	eor	r25, r25
    1ca4:	87 fd       	sbrc	r24, 7
    1ca6:	90 95       	com	r25
    1ca8:	97 83       	std	Z+7, r25	; 0x07
    1caa:	86 83       	std	Z+6, r24	; 0x06
    1cac:	c8 01       	movw	r24, r16
    1cae:	01 96       	adiw	r24, 0x01	; 1
    1cb0:	91 87       	std	Z+9, r25	; 0x09
    1cb2:	80 87       	std	Z+8, r24	; 0x08
    1cb4:	0e 94 b4 34 	call	0x6968	; 0x6968 <printf>
					snum, ttl, rssi, rfRxInfo.pPayload + 1);
#endif
	/* Copy pointer to payload and length */
	rfTxInfo.pPayload = rfRxInfo.pPayload;
    1cb8:	1d 83       	std	Y+5, r17	; 0x05
    1cba:	0c 83       	std	Y+4, r16	; 0x04
	rfTxInfo.pPayload[0] = ttl - 1;
    1cbc:	fa 94       	dec	r15
    1cbe:	f8 01       	movw	r30, r16
    1cc0:	f0 82       	st	Z, r15
	rfTxInfo.length = rfRxInfo.length;
    1cc2:	eb 82       	std	Y+3, r14	; 0x03
	rfTxInfo.cca = 0;
    1cc4:	1e 82       	std	Y+6, r1	; 0x06
	rfTxInfo.ackRequest = 0;
    1cc6:	1f 82       	std	Y+7, r1	; 0x07
	rfTxInfo.destAddr = 0xFFFF;
    1cc8:	8f ef       	ldi	r24, 0xFF	; 255
    1cca:	9f ef       	ldi	r25, 0xFF	; 255
    1ccc:	9a 83       	std	Y+2, r25	; 0x02
    1cce:	89 83       	std	Y+1, r24	; 0x01
		rf_tx_packet(&rfTxInfo);
	} else {
		nrk_int_enable();
	}
#else
	nrk_int_enable();
    1cd0:	8d b7       	in	r24, 0x3d	; 61
    1cd2:	9e b7       	in	r25, 0x3e	; 62
    1cd4:	0a 96       	adiw	r24, 0x0a	; 10
    1cd6:	0f b6       	in	r0, 0x3f	; 63
    1cd8:	f8 94       	cli
    1cda:	9e bf       	out	0x3e, r25	; 62
    1cdc:	0f be       	out	0x3f, r0	; 63
    1cde:	8d bf       	out	0x3d, r24	; 61
    1ce0:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <nrk_int_enable>
	rf_tx_packet(&rfTxInfo);
    1ce4:	ce 01       	movw	r24, r28
    1ce6:	01 96       	adiw	r24, 0x01	; 1
    1ce8:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <rf_tx_packet>
#endif
	return;
}
    1cec:	27 96       	adiw	r28, 0x07	; 7
    1cee:	0f b6       	in	r0, 0x3f	; 63
    1cf0:	f8 94       	cli
    1cf2:	de bf       	out	0x3e, r29	; 62
    1cf4:	0f be       	out	0x3f, r0	; 63
    1cf6:	cd bf       	out	0x3d, r28	; 61
    1cf8:	cf 91       	pop	r28
    1cfa:	df 91       	pop	r29
    1cfc:	1f 91       	pop	r17
    1cfe:	0f 91       	pop	r16
    1d00:	ff 90       	pop	r15
    1d02:	ef 90       	pop	r14
    1d04:	df 90       	pop	r13
    1d06:	cf 90       	pop	r12
    1d08:	08 95       	ret

00001d0a <__vector_60>:
	return NRK_OK;
}


SIGNAL(TRX24_RX_END_vect)
{	
    1d0a:	1f 92       	push	r1
    1d0c:	0f 92       	push	r0
    1d0e:	0f b6       	in	r0, 0x3f	; 63
    1d10:	0f 92       	push	r0
    1d12:	0b b6       	in	r0, 0x3b	; 59
    1d14:	0f 92       	push	r0
    1d16:	11 24       	eor	r1, r1
    1d18:	2f 93       	push	r18
    1d1a:	3f 93       	push	r19
    1d1c:	4f 93       	push	r20
    1d1e:	5f 93       	push	r21
    1d20:	6f 93       	push	r22
    1d22:	7f 93       	push	r23
    1d24:	8f 93       	push	r24
    1d26:	9f 93       	push	r25
    1d28:	af 93       	push	r26
    1d2a:	bf 93       	push	r27
    1d2c:	ef 93       	push	r30
    1d2e:	ff 93       	push	r31
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
    1d30:	80 e0       	ldi	r24, 0x00	; 0
    1d32:	01 c0       	rjmp	.+2      	; 0x1d36 <__vector_60+0x2c>
    1d34:	8f 5f       	subi	r24, 0xFF	; 255
    1d36:	90 91 7b 01 	lds	r25, 0x017B
    1d3a:	89 17       	cp	r24, r25
    1d3c:	d8 f3       	brcs	.-10     	; 0x1d34 <__vector_60+0x2a>
		if(((i+1) % 16) == 0)
			vprintf("\r\n");
	}
	vprintf("\r\n");

	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    1d3e:	80 91 46 01 	lds	r24, 0x0146
    1d42:	87 ff       	sbrs	r24, 7
    1d44:	04 c0       	rjmp	.+8      	; 0x1d4e <__vector_60+0x44>
		rx_ready = 1;
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	80 93 66 0c 	sts	0x0C66, r24
    1d4c:	04 c0       	rjmp	.+8      	; 0x1d56 <__vector_60+0x4c>
	} else {
		printf("RX end failed checksum!\r\n");
    1d4e:	82 ed       	ldi	r24, 0xD2	; 210
    1d50:	92 e0       	ldi	r25, 0x02	; 2
    1d52:	0e 94 cd 34 	call	0x699a	; 0x699a <puts>
	}
	IRQ_STATUS = (1 << RX_END);
    1d56:	88 e0       	ldi	r24, 0x08	; 8
    1d58:	80 93 4f 01 	sts	0x014F, r24
	
	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    1d5c:	80 91 46 01 	lds	r24, 0x0146
    1d60:	87 ff       	sbrs	r24, 7
    1d62:	06 c0       	rjmp	.+12     	; 0x1d70 <__vector_60+0x66>
		if (use_glossy) rf_glossy_interrupt();
    1d64:	80 91 22 0c 	lds	r24, 0x0C22
    1d68:	88 23       	and	r24, r24
    1d6a:	11 f0       	breq	.+4      	; 0x1d70 <__vector_60+0x66>
    1d6c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <rf_glossy_interrupt>
	}

	if(rx_end_func)
    1d70:	e0 91 59 05 	lds	r30, 0x0559
    1d74:	f0 91 5a 05 	lds	r31, 0x055A
    1d78:	30 97       	sbiw	r30, 0x00	; 0
    1d7a:	09 f0       	breq	.+2      	; 0x1d7e <__vector_60+0x74>
		rx_end_func();
    1d7c:	09 95       	icall

	return;
}
    1d7e:	ff 91       	pop	r31
    1d80:	ef 91       	pop	r30
    1d82:	bf 91       	pop	r27
    1d84:	af 91       	pop	r26
    1d86:	9f 91       	pop	r25
    1d88:	8f 91       	pop	r24
    1d8a:	7f 91       	pop	r23
    1d8c:	6f 91       	pop	r22
    1d8e:	5f 91       	pop	r21
    1d90:	4f 91       	pop	r20
    1d92:	3f 91       	pop	r19
    1d94:	2f 91       	pop	r18
    1d96:	0f 90       	pop	r0
    1d98:	0b be       	out	0x3b, r0	; 59
    1d9a:	0f 90       	pop	r0
    1d9c:	0f be       	out	0x3f, r0	; 63
    1d9e:	0f 90       	pop	r0
    1da0:	1f 90       	pop	r1
    1da2:	18 95       	reti

00001da4 <aes_setkey>:

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
    1da4:	e7 e3       	ldi	r30, 0x37	; 55
    1da6:	fc e0       	ldi	r31, 0x0C	; 12
    1da8:	a8 2f       	mov	r26, r24
    1daa:	b9 2f       	mov	r27, r25
      ekey[i] = key[i];
    1dac:	8c 91       	ld	r24, X
    1dae:	81 93       	st	Z+, r24
      AES_KEY = key[i];
    1db0:	8d 91       	ld	r24, X+
    1db2:	80 93 3f 01 	sts	0x013F, r24

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
    1db6:	8c e0       	ldi	r24, 0x0C	; 12
    1db8:	e7 34       	cpi	r30, 0x47	; 71
    1dba:	f8 07       	cpc	r31, r24
    1dbc:	b9 f7       	brne	.-18     	; 0x1dac <aes_setkey+0x8>
    1dbe:	80 e1       	ldi	r24, 0x10	; 16
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
      AES_STATE = 0x00;
    1dc0:	10 92 3e 01 	sts	0x013E, r1
    1dc4:	81 50       	subi	r24, 0x01	; 1

   for(i=0; i<16; i++){
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
    1dc6:	e1 f7       	brne	.-8      	; 0x1dc0 <aes_setkey+0x1c>
      AES_STATE = 0x00;
   }
   AES_CTRL = (1 << AES_REQUEST);
    1dc8:	80 e8       	ldi	r24, 0x80	; 128
    1dca:	80 93 3c 01 	sts	0x013C, r24

   while(!(AES_STATUS & (1 << AES_DONE))){
    1dce:	80 91 3d 01 	lds	r24, 0x013D
    1dd2:	80 ff       	sbrs	r24, 0
    1dd4:	fc cf       	rjmp	.-8      	; 0x1dce <aes_setkey+0x2a>
    1dd6:	e0 e5       	ldi	r30, 0x50	; 80
    1dd8:	fc e0       	ldi	r31, 0x0C	; 12
      continue;
   }
   for(i=0; i<16; i++){
      dkey[i] = AES_KEY;
    1dda:	80 91 3f 01 	lds	r24, 0x013F
    1dde:	81 93       	st	Z+, r24
   AES_CTRL = (1 << AES_REQUEST);

   while(!(AES_STATUS & (1 << AES_DONE))){
      continue;
   }
   for(i=0; i<16; i++){
    1de0:	8c e0       	ldi	r24, 0x0C	; 12
    1de2:	e0 36       	cpi	r30, 0x60	; 96
    1de4:	f8 07       	cpc	r31, r24
    1de6:	c9 f7       	brne	.-14     	; 0x1dda <aes_setkey+0x36>
      dkey[i] = AES_KEY;
   }
}
    1de8:	08 95       	ret

00001dea <aes_encrypt>:

uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
    1dea:	66 23       	and	r22, r22
    1dec:	09 f4       	brne	.+2      	; 0x1df0 <aes_encrypt+0x6>
    1dee:	3d c0       	rjmp	.+122    	; 0x1e6a <aes_encrypt+0x80>
    1df0:	26 2f       	mov	r18, r22
    1df2:	2f 70       	andi	r18, 0x0F	; 15
    1df4:	e1 f5       	brne	.+120    	; 0x1e6e <aes_encrypt+0x84>
    1df6:	e7 e3       	ldi	r30, 0x37	; 55
    1df8:	fc e0       	ldi	r31, 0x0C	; 12
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];
    1dfa:	21 91       	ld	r18, Z+
    1dfc:	20 93 3f 01 	sts	0x013F, r18
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    1e00:	2c e0       	ldi	r18, 0x0C	; 12
    1e02:	e7 34       	cpi	r30, 0x47	; 71
    1e04:	f2 07       	cpc	r31, r18
    1e06:	c9 f7       	brne	.-14     	; 0x1dfa <aes_encrypt+0x10>
    1e08:	40 e0       	ldi	r20, 0x00	; 0
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    1e0a:	70 e0       	ldi	r23, 0x00	; 0
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    1e0c:	50 e2       	ldi	r21, 0x20	; 32
    1e0e:	21 c0       	rjmp	.+66     	; 0x1e52 <aes_encrypt+0x68>

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
      if(i==0)
    1e10:	44 23       	and	r20, r20
    1e12:	19 f4       	brne	.+6      	; 0x1e1a <aes_encrypt+0x30>
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
    1e14:	10 92 3c 01 	sts	0x013C, r1
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <aes_encrypt+0x34>
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    1e1a:	50 93 3c 01 	sts	0x013C, r21
      dkey[i] = AES_KEY;
   }
}


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
    1e1e:	fc 01       	movw	r30, r24
    1e20:	e2 0f       	add	r30, r18
    1e22:	f3 1f       	adc	r31, r19
    1e24:	df 01       	movw	r26, r30
    1e26:	20 e1       	ldi	r18, 0x10	; 16
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    1e28:	3d 91       	ld	r19, X+
    1e2a:	30 93 3e 01 	sts	0x013E, r19
    1e2e:	21 50       	subi	r18, 0x01	; 1
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
    1e30:	d9 f7       	brne	.-10     	; 0x1e28 <aes_encrypt+0x3e>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    1e32:	20 91 3c 01 	lds	r18, 0x013C
    1e36:	20 68       	ori	r18, 0x80	; 128
    1e38:	20 93 3c 01 	sts	0x013C, r18
      while(!(AES_STATUS & (1 << AES_DONE)))
    1e3c:	20 91 3d 01 	lds	r18, 0x013D
    1e40:	20 ff       	sbrs	r18, 0
    1e42:	fc cf       	rjmp	.-8      	; 0x1e3c <aes_encrypt+0x52>
    1e44:	20 e1       	ldi	r18, 0x10	; 16
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
    1e46:	30 91 3e 01 	lds	r19, 0x013E
    1e4a:	31 93       	st	Z+, r19
    1e4c:	21 50       	subi	r18, 0x01	; 1
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
    1e4e:	d9 f7       	brne	.-10     	; 0x1e46 <aes_encrypt+0x5c>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    1e50:	4f 5f       	subi	r20, 0xFF	; 255
    1e52:	24 2f       	mov	r18, r20
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	e4 e0       	ldi	r30, 0x04	; 4
    1e58:	22 0f       	add	r18, r18
    1e5a:	33 1f       	adc	r19, r19
    1e5c:	ea 95       	dec	r30
    1e5e:	e1 f7       	brne	.-8      	; 0x1e58 <aes_encrypt+0x6e>
    1e60:	26 17       	cp	r18, r22
    1e62:	37 07       	cpc	r19, r23
    1e64:	ac f2       	brlt	.-86     	; 0x1e10 <aes_encrypt+0x26>
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	08 95       	ret
uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	08 95       	ret
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
}
    1e70:	08 95       	ret

00001e72 <aes_decrypt>:
uint8_t aes_decrypt(uint8_t *data, uint8_t len)
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
    1e72:	61 30       	cpi	r22, 0x01	; 1
    1e74:	09 f4       	brne	.+2      	; 0x1e78 <aes_decrypt+0x6>
    1e76:	48 c0       	rjmp	.+144    	; 0x1f08 <aes_decrypt+0x96>
    1e78:	26 2f       	mov	r18, r22
    1e7a:	2f 70       	andi	r18, 0x0F	; 15
    1e7c:	09 f0       	breq	.+2      	; 0x1e80 <aes_decrypt+0xe>
    1e7e:	46 c0       	rjmp	.+140    	; 0x1f0c <aes_decrypt+0x9a>
    1e80:	e0 e5       	ldi	r30, 0x50	; 80
    1e82:	fc e0       	ldi	r31, 0x0C	; 12
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];
    1e84:	21 91       	ld	r18, Z+
    1e86:	20 93 3f 01 	sts	0x013F, r18
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    1e8a:	2c e0       	ldi	r18, 0x0C	; 12
    1e8c:	e0 36       	cpi	r30, 0x60	; 96
    1e8e:	f2 07       	cpc	r31, r18
    1e90:	c9 f7       	brne	.-14     	; 0x1e84 <aes_decrypt+0x12>
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    1e92:	62 95       	swap	r22
    1e94:	6f 70       	andi	r22, 0x0F	; 15
    1e96:	61 50       	subi	r22, 0x01	; 1
         data[16*i+j] = AES_STATE;
   }
   return 0;
}

uint8_t aes_decrypt(uint8_t *data, uint8_t len)
    1e98:	26 2f       	mov	r18, r22
    1e9a:	33 27       	eor	r19, r19
    1e9c:	27 fd       	sbrc	r18, 7
    1e9e:	30 95       	com	r19
    1ea0:	f4 e0       	ldi	r31, 0x04	; 4
    1ea2:	22 0f       	add	r18, r18
    1ea4:	33 1f       	adc	r19, r19
    1ea6:	fa 95       	dec	r31
    1ea8:	e1 f7       	brne	.-8      	; 0x1ea2 <aes_decrypt+0x30>
    1eaa:	28 0f       	add	r18, r24
    1eac:	39 1f       	adc	r19, r25

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    1eae:	78 e0       	ldi	r23, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    1eb0:	27 c0       	rjmp	.+78     	; 0x1f00 <aes_decrypt+0x8e>
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    1eb2:	70 93 3c 01 	sts	0x013C, r23
    1eb6:	f9 01       	movw	r30, r18
    1eb8:	80 e1       	ldi	r24, 0x10	; 16
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    1eba:	91 91       	ld	r25, Z+
    1ebc:	90 93 3e 01 	sts	0x013E, r25
    1ec0:	81 50       	subi	r24, 0x01	; 1
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
      
      for(j=0; j<16; j++)
    1ec2:	d9 f7       	brne	.-10     	; 0x1eba <aes_decrypt+0x48>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    1ec4:	80 91 3c 01 	lds	r24, 0x013C
    1ec8:	80 68       	ori	r24, 0x80	; 128
    1eca:	80 93 3c 01 	sts	0x013C, r24
      while(!(AES_STATUS & (1 << AES_DONE)))
    1ece:	80 91 3d 01 	lds	r24, 0x013D
    1ed2:	80 ff       	sbrs	r24, 0
    1ed4:	fc cf       	rjmp	.-8      	; 0x1ece <aes_decrypt+0x5c>
    1ed6:	d9 01       	movw	r26, r18
    1ed8:	50 97       	sbiw	r26, 0x10	; 16
    1eda:	c9 01       	movw	r24, r18
    1edc:	40 96       	adiw	r24, 0x10	; 16
    1ede:	f9 01       	movw	r30, r18
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
    1ee0:	50 91 3e 01 	lds	r21, 0x013E
    1ee4:	50 83       	st	Z, r21
         if(i!=0)
    1ee6:	66 23       	and	r22, r22
    1ee8:	19 f0       	breq	.+6      	; 0x1ef0 <aes_decrypt+0x7e>
            data[16*i+j] ^= data[16*(i-1)+j];
    1eea:	4c 91       	ld	r20, X
    1eec:	45 27       	eor	r20, r21
    1eee:	40 83       	st	Z, r20
    1ef0:	31 96       	adiw	r30, 0x01	; 1
    1ef2:	11 96       	adiw	r26, 0x01	; 1
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
    1ef4:	e8 17       	cp	r30, r24
    1ef6:	f9 07       	cpc	r31, r25
    1ef8:	99 f7       	brne	.-26     	; 0x1ee0 <aes_decrypt+0x6e>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    1efa:	61 50       	subi	r22, 0x01	; 1
    1efc:	20 51       	subi	r18, 0x10	; 16
    1efe:	30 40       	sbci	r19, 0x00	; 0
    1f00:	67 ff       	sbrs	r22, 7
    1f02:	d7 cf       	rjmp	.-82     	; 0x1eb2 <aes_decrypt+0x40>
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
    1f04:	80 e0       	ldi	r24, 0x00	; 0
    1f06:	08 95       	ret
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	08 95       	ret
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
}
    1f0e:	08 95       	ret

00001f10 <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
    1f10:	90 91 c0 00 	lds	r25, 0x00C0
    1f14:	95 ff       	sbrs	r25, 5
    1f16:	fc cf       	rjmp	.-8      	; 0x1f10 <putc0>
    1f18:	90 91 c0 00 	lds	r25, 0x00C0
    1f1c:	9f 7d       	andi	r25, 0xDF	; 223
    1f1e:	90 93 c0 00 	sts	0x00C0, r25
    1f22:	80 93 c6 00 	sts	0x00C6, r24
}
    1f26:	08 95       	ret

00001f28 <__vector_25>:
static uint16_t uart_rx_buf_start,uart_rx_buf_end;
static char uart_rx_buf[MAX_RX_UART_BUF];
static nrk_sig_t uart_rx_signal;

SIGNAL(USART0_RX_vect)
{
    1f28:	1f 92       	push	r1
    1f2a:	0f 92       	push	r0
    1f2c:	0f b6       	in	r0, 0x3f	; 63
    1f2e:	0f 92       	push	r0
    1f30:	0b b6       	in	r0, 0x3b	; 59
    1f32:	0f 92       	push	r0
    1f34:	11 24       	eor	r1, r1
    1f36:	2f 93       	push	r18
    1f38:	3f 93       	push	r19
    1f3a:	4f 93       	push	r20
    1f3c:	5f 93       	push	r21
    1f3e:	6f 93       	push	r22
    1f40:	7f 93       	push	r23
    1f42:	8f 93       	push	r24
    1f44:	9f 93       	push	r25
    1f46:	af 93       	push	r26
    1f48:	bf 93       	push	r27
    1f4a:	ef 93       	push	r30
    1f4c:	ff 93       	push	r31
char c;
uint8_t sig;
nrk_int_disable();
    1f4e:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <nrk_int_disable>
// cli();
//DISABLE_UART0_RX_INT(); //this will enable nrk int
   UART0_WAIT_AND_RECEIVE(c);
    1f52:	80 91 c0 00 	lds	r24, 0x00C0
    1f56:	87 ff       	sbrs	r24, 7
    1f58:	fc cf       	rjmp	.-8      	; 0x1f52 <__vector_25+0x2a>
    1f5a:	80 91 c0 00 	lds	r24, 0x00C0
    1f5e:	8f 77       	andi	r24, 0x7F	; 127
    1f60:	80 93 c0 00 	sts	0x00C0, r24
    1f64:	20 91 c6 00 	lds	r18, 0x00C6
   uart_rx_buf[uart_rx_buf_end]=c;
    1f68:	80 91 5e 05 	lds	r24, 0x055E
    1f6c:	90 91 5f 05 	lds	r25, 0x055F
    1f70:	fc 01       	movw	r30, r24
    1f72:	e0 5a       	subi	r30, 0xA0	; 160
    1f74:	fa 4f       	sbci	r31, 0xFA	; 250
    1f76:	20 83       	st	Z, r18
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
    1f78:	01 96       	adiw	r24, 0x01	; 1
    1f7a:	90 93 5f 05 	sts	0x055F, r25
    1f7e:	80 93 5e 05 	sts	0x055E, r24
   if(uart_rx_buf_end==MAX_RX_UART_BUF) {
    1f82:	80 31       	cpi	r24, 0x10	; 16
    1f84:	91 05       	cpc	r25, r1
    1f86:	21 f4       	brne	.+8      	; 0x1f90 <__vector_25+0x68>
	   uart_rx_buf_end=0;
    1f88:	10 92 5f 05 	sts	0x055F, r1
    1f8c:	10 92 5e 05 	sts	0x055E, r1
		   }
   //if(uart_rx_buf_end==uart_rx_buf_start) nrk_kprintf(PSTR("Buf overflow!\r\n" ));
   nrk_event_signal(uart_rx_signal);
    1f90:	80 91 5b 05 	lds	r24, 0x055B
    1f94:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <nrk_event_signal>
CLEAR_UART0_RX_INT();
    1f98:	80 91 c0 00 	lds	r24, 0x00C0
    1f9c:	8f 77       	andi	r24, 0x7F	; 127
    1f9e:	80 93 c0 00 	sts	0x00C0, r24
//ENABLE_UART0_RX_INT();
// sei();
nrk_int_enable();
    1fa2:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <nrk_int_enable>
}
    1fa6:	ff 91       	pop	r31
    1fa8:	ef 91       	pop	r30
    1faa:	bf 91       	pop	r27
    1fac:	af 91       	pop	r26
    1fae:	9f 91       	pop	r25
    1fb0:	8f 91       	pop	r24
    1fb2:	7f 91       	pop	r23
    1fb4:	6f 91       	pop	r22
    1fb6:	5f 91       	pop	r21
    1fb8:	4f 91       	pop	r20
    1fba:	3f 91       	pop	r19
    1fbc:	2f 91       	pop	r18
    1fbe:	0f 90       	pop	r0
    1fc0:	0b be       	out	0x3b, r0	; 59
    1fc2:	0f 90       	pop	r0
    1fc4:	0f be       	out	0x3f, r0	; 63
    1fc6:	0f 90       	pop	r0
    1fc8:	1f 90       	pop	r1
    1fca:	18 95       	reti

00001fcc <nrk_uart_data_ready>:
   return tmp;
}

uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==0)
    1fcc:	88 23       	and	r24, r24
    1fce:	71 f4       	brne	.+28     	; 0x1fec <nrk_uart_data_ready+0x20>
   if(uart_rx_buf_start>=MAX_RX_UART_BUF) { uart_rx_buf_start=0; }

   return tmp;
}

uint8_t nrk_uart_data_ready(uint8_t uart_num)
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	40 91 5c 05 	lds	r20, 0x055C
    1fd6:	50 91 5d 05 	lds	r21, 0x055D
    1fda:	20 91 5e 05 	lds	r18, 0x055E
    1fde:	30 91 5f 05 	lds	r19, 0x055F
    1fe2:	42 17       	cp	r20, r18
    1fe4:	53 07       	cpc	r21, r19
    1fe6:	59 f4       	brne	.+22     	; 0x1ffe <nrk_uart_data_ready+0x32>
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
    1fea:	08 95       	ret
if(uart_num==0)
        {
        //if( UCSR0A & BM(RXC0) ) return 1;
	if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
        }
if(uart_num==1)
    1fec:	81 30       	cpi	r24, 0x01	; 1
    1fee:	31 f4       	brne	.+12     	; 0x1ffc <nrk_uart_data_ready+0x30>
	{
        if( UCSR1A & BM(RXC1) ) return 1;
    1ff0:	80 91 c8 00 	lds	r24, 0x00C8
   if(uart_rx_buf_start>=MAX_RX_UART_BUF) { uart_rx_buf_start=0; }

   return tmp;
}

uint8_t nrk_uart_data_ready(uint8_t uart_num)
    1ff4:	88 1f       	adc	r24, r24
    1ff6:	88 27       	eor	r24, r24
    1ff8:	88 1f       	adc	r24, r24
    1ffa:	08 95       	ret
if(uart_num==1)
	{
        if( UCSR1A & BM(RXC1) ) return 1;
	//if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
	}
return 0;
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
}
    1ffe:	08 95       	ret

00002000 <nrk_uart_rx_signal_get>:

nrk_sig_t nrk_uart_rx_signal_get()
{
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    2000:	80 91 5b 05 	lds	r24, 0x055B
    2004:	8f 3f       	cpi	r24, 0xFF	; 255
    2006:	19 f4       	brne	.+6      	; 0x200e <nrk_uart_rx_signal_get+0xe>
    2008:	8e e0       	ldi	r24, 0x0E	; 14
    200a:	0e 94 13 18 	call	0x3026	; 0x3026 <nrk_error_add>
   return uart_rx_signal;
}
    200e:	80 91 5b 05 	lds	r24, 0x055B
    2012:	08 95       	ret

00002014 <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    2014:	cf 93       	push	r28
    2016:	df 93       	push	r29
    2018:	ec 01       	movw	r28, r24
 char c;
   while((c=pgm_read_byte(addr++)))
    201a:	07 c0       	rjmp	.+14     	; 0x202a <nrk_kprintf+0x16>
        putchar(c);
    201c:	60 91 c6 0d 	lds	r22, 0x0DC6
    2020:	70 91 c7 0d 	lds	r23, 0x0DC7
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	0e 94 88 34 	call	0x6910	; 0x6910 <fputc>
    202a:	fe 01       	movw	r30, r28
#endif

void nrk_kprintf( const char *addr)
{
 char c;
   while((c=pgm_read_byte(addr++)))
    202c:	21 96       	adiw	r28, 0x01	; 1
    202e:	84 91       	lpm	r24, Z+
    2030:	88 23       	and	r24, r24
    2032:	a1 f7       	brne	.-24     	; 0x201c <nrk_kprintf+0x8>
        putchar(c);
}
    2034:	df 91       	pop	r29
    2036:	cf 91       	pop	r28
    2038:	08 95       	ret

0000203a <getc0>:
char getc0()
{
char tmp;
int8_t v;

if(uart_rx_buf_start==uart_rx_buf_end) { nrk_signal_register(uart_rx_signal); v=nrk_event_wait(uart_rx_signal); }
    203a:	20 91 5c 05 	lds	r18, 0x055C
    203e:	30 91 5d 05 	lds	r19, 0x055D
    2042:	80 91 5e 05 	lds	r24, 0x055E
    2046:	90 91 5f 05 	lds	r25, 0x055F
    204a:	28 17       	cp	r18, r24
    204c:	39 07       	cpc	r19, r25
    204e:	69 f4       	brne	.+26     	; 0x206a <getc0+0x30>
    2050:	80 91 5b 05 	lds	r24, 0x055B
    2054:	0e 94 3f 1b 	call	0x367e	; 0x367e <nrk_signal_register>
    2058:	60 91 5b 05 	lds	r22, 0x055B
    205c:	77 27       	eor	r23, r23
    205e:	67 fd       	sbrc	r22, 7
    2060:	70 95       	com	r23
    2062:	87 2f       	mov	r24, r23
    2064:	97 2f       	mov	r25, r23
    2066:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <nrk_event_wait>
if(v==NRK_ERROR ) nrk_kprintf(PSTR("uart rx sig failed\r\n" ));
    206a:	6f 3f       	cpi	r22, 0xFF	; 255
    206c:	21 f4       	brne	.+8      	; 0x2076 <getc0+0x3c>
    206e:	86 e9       	ldi	r24, 0x96	; 150
    2070:	92 e0       	ldi	r25, 0x02	; 2
    2072:	0e 94 0a 10 	call	0x2014	; 0x2014 <nrk_kprintf>
   tmp=uart_rx_buf[uart_rx_buf_start];
    2076:	20 91 5c 05 	lds	r18, 0x055C
    207a:	30 91 5d 05 	lds	r19, 0x055D
    207e:	f9 01       	movw	r30, r18
    2080:	e0 5a       	subi	r30, 0xA0	; 160
    2082:	fa 4f       	sbci	r31, 0xFA	; 250
    2084:	80 81       	ld	r24, Z
   uart_rx_buf_start++;
    2086:	2f 5f       	subi	r18, 0xFF	; 255
    2088:	3f 4f       	sbci	r19, 0xFF	; 255
    208a:	30 93 5d 05 	sts	0x055D, r19
    208e:	20 93 5c 05 	sts	0x055C, r18
   if(uart_rx_buf_start>=MAX_RX_UART_BUF) { uart_rx_buf_start=0; }
    2092:	20 31       	cpi	r18, 0x10	; 16
    2094:	31 05       	cpc	r19, r1
    2096:	20 f0       	brcs	.+8      	; 0x20a0 <getc0+0x66>
    2098:	10 92 5d 05 	sts	0x055D, r1
    209c:	10 92 5c 05 	sts	0x055C, r1

   return tmp;
}
    20a0:	08 95       	ret

000020a2 <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
    20a2:	86 e0       	ldi	r24, 0x06	; 6
    20a4:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
    20a6:	85 b9       	out	0x05, r24	; 5
#endif
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
    20a8:	88 ef       	ldi	r24, 0xF8	; 248
    20aa:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
    20ac:	80 ef       	ldi	r24, 0xF0	; 240
    20ae:	8b b9       	out	0x0b, r24	; 11
        DDRE = BM(UART0_TXD); 
    20b0:	82 e0       	ldi	r24, 0x02	; 2
    20b2:	8d b9       	out	0x0d, r24	; 13
} 
    20b4:	08 95       	ret

000020b6 <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    20b6:	0e 94 51 10 	call	0x20a2	; 0x20a2 <PORT_INIT>
//SPI_INIT();
}
    20ba:	08 95       	ret

000020bc <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    20bc:	8f 3f       	cpi	r24, 0xFF	; 255
    20be:	09 f4       	brne	.+2      	; 0x20c2 <nrk_gpio_set+0x6>
    20c0:	83 c0       	rjmp	.+262    	; 0x21c8 <nrk_gpio_set+0x10c>
        switch (pin & 0x07) {
    20c2:	28 2f       	mov	r18, r24
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	27 70       	andi	r18, 0x07	; 7
    20c8:	30 70       	andi	r19, 0x00	; 0
    20ca:	23 30       	cpi	r18, 0x03	; 3
    20cc:	31 05       	cpc	r19, r1
    20ce:	09 f4       	brne	.+2      	; 0x20d2 <nrk_gpio_set+0x16>
    20d0:	43 c0       	rjmp	.+134    	; 0x2158 <nrk_gpio_set+0x9c>
    20d2:	24 30       	cpi	r18, 0x04	; 4
    20d4:	31 05       	cpc	r19, r1
    20d6:	54 f4       	brge	.+20     	; 0x20ec <nrk_gpio_set+0x30>
    20d8:	21 30       	cpi	r18, 0x01	; 1
    20da:	31 05       	cpc	r19, r1
    20dc:	11 f1       	breq	.+68     	; 0x2122 <nrk_gpio_set+0x66>
    20de:	22 30       	cpi	r18, 0x02	; 2
    20e0:	31 05       	cpc	r19, r1
    20e2:	5c f5       	brge	.+86     	; 0x213a <nrk_gpio_set+0x7e>
    20e4:	21 15       	cp	r18, r1
    20e6:	31 05       	cpc	r19, r1
    20e8:	71 f0       	breq	.+28     	; 0x2106 <nrk_gpio_set+0x4a>
    20ea:	70 c0       	rjmp	.+224    	; 0x21cc <nrk_gpio_set+0x110>
    20ec:	25 30       	cpi	r18, 0x05	; 5
    20ee:	31 05       	cpc	r19, r1
    20f0:	09 f4       	brne	.+2      	; 0x20f4 <nrk_gpio_set+0x38>
    20f2:	4e c0       	rjmp	.+156    	; 0x2190 <nrk_gpio_set+0xd4>
    20f4:	25 30       	cpi	r18, 0x05	; 5
    20f6:	31 05       	cpc	r19, r1
    20f8:	0c f4       	brge	.+2      	; 0x20fc <nrk_gpio_set+0x40>
    20fa:	3c c0       	rjmp	.+120    	; 0x2174 <nrk_gpio_set+0xb8>
    20fc:	26 30       	cpi	r18, 0x06	; 6
    20fe:	31 05       	cpc	r19, r1
    2100:	09 f0       	breq	.+2      	; 0x2104 <nrk_gpio_set+0x48>
    2102:	64 c0       	rjmp	.+200    	; 0x21cc <nrk_gpio_set+0x110>
    2104:	53 c0       	rjmp	.+166    	; 0x21ac <nrk_gpio_set+0xf0>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2106:	92 b1       	in	r25, 0x02	; 2
    2108:	86 95       	lsr	r24
    210a:	86 95       	lsr	r24
    210c:	86 95       	lsr	r24
    210e:	41 e0       	ldi	r20, 0x01	; 1
    2110:	50 e0       	ldi	r21, 0x00	; 0
    2112:	02 c0       	rjmp	.+4      	; 0x2118 <nrk_gpio_set+0x5c>
    2114:	44 0f       	add	r20, r20
    2116:	55 1f       	adc	r21, r21
    2118:	8a 95       	dec	r24
    211a:	e2 f7       	brpl	.-8      	; 0x2114 <nrk_gpio_set+0x58>
    211c:	94 2b       	or	r25, r20
    211e:	92 b9       	out	0x02, r25	; 2
    2120:	19 c0       	rjmp	.+50     	; 0x2154 <nrk_gpio_set+0x98>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2122:	95 b1       	in	r25, 0x05	; 5
    2124:	86 95       	lsr	r24
    2126:	86 95       	lsr	r24
    2128:	86 95       	lsr	r24
    212a:	02 c0       	rjmp	.+4      	; 0x2130 <nrk_gpio_set+0x74>
    212c:	22 0f       	add	r18, r18
    212e:	33 1f       	adc	r19, r19
    2130:	8a 95       	dec	r24
    2132:	e2 f7       	brpl	.-8      	; 0x212c <nrk_gpio_set+0x70>
    2134:	92 2b       	or	r25, r18
    2136:	95 b9       	out	0x05, r25	; 5
    2138:	0d c0       	rjmp	.+26     	; 0x2154 <nrk_gpio_set+0x98>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    213a:	98 b1       	in	r25, 0x08	; 8
    213c:	86 95       	lsr	r24
    213e:	86 95       	lsr	r24
    2140:	86 95       	lsr	r24
    2142:	41 e0       	ldi	r20, 0x01	; 1
    2144:	50 e0       	ldi	r21, 0x00	; 0
    2146:	02 c0       	rjmp	.+4      	; 0x214c <nrk_gpio_set+0x90>
    2148:	44 0f       	add	r20, r20
    214a:	55 1f       	adc	r21, r21
    214c:	8a 95       	dec	r24
    214e:	e2 f7       	brpl	.-8      	; 0x2148 <nrk_gpio_set+0x8c>
    2150:	94 2b       	or	r25, r20
    2152:	98 b9       	out	0x08, r25	; 8
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
                default: return -1;
        }
        return 1;
    2154:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2156:	08 95       	ret
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2158:	9b b1       	in	r25, 0x0b	; 11
    215a:	86 95       	lsr	r24
    215c:	86 95       	lsr	r24
    215e:	86 95       	lsr	r24
    2160:	41 e0       	ldi	r20, 0x01	; 1
    2162:	50 e0       	ldi	r21, 0x00	; 0
    2164:	02 c0       	rjmp	.+4      	; 0x216a <nrk_gpio_set+0xae>
    2166:	44 0f       	add	r20, r20
    2168:	55 1f       	adc	r21, r21
    216a:	8a 95       	dec	r24
    216c:	e2 f7       	brpl	.-8      	; 0x2166 <nrk_gpio_set+0xaa>
    216e:	94 2b       	or	r25, r20
    2170:	9b b9       	out	0x0b, r25	; 11
    2172:	f0 cf       	rjmp	.-32     	; 0x2154 <nrk_gpio_set+0x98>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2174:	9e b1       	in	r25, 0x0e	; 14
    2176:	86 95       	lsr	r24
    2178:	86 95       	lsr	r24
    217a:	86 95       	lsr	r24
    217c:	41 e0       	ldi	r20, 0x01	; 1
    217e:	50 e0       	ldi	r21, 0x00	; 0
    2180:	02 c0       	rjmp	.+4      	; 0x2186 <nrk_gpio_set+0xca>
    2182:	44 0f       	add	r20, r20
    2184:	55 1f       	adc	r21, r21
    2186:	8a 95       	dec	r24
    2188:	e2 f7       	brpl	.-8      	; 0x2182 <nrk_gpio_set+0xc6>
    218a:	94 2b       	or	r25, r20
    218c:	9e b9       	out	0x0e, r25	; 14
    218e:	e2 cf       	rjmp	.-60     	; 0x2154 <nrk_gpio_set+0x98>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2190:	91 b3       	in	r25, 0x11	; 17
    2192:	86 95       	lsr	r24
    2194:	86 95       	lsr	r24
    2196:	86 95       	lsr	r24
    2198:	41 e0       	ldi	r20, 0x01	; 1
    219a:	50 e0       	ldi	r21, 0x00	; 0
    219c:	02 c0       	rjmp	.+4      	; 0x21a2 <nrk_gpio_set+0xe6>
    219e:	44 0f       	add	r20, r20
    21a0:	55 1f       	adc	r21, r21
    21a2:	8a 95       	dec	r24
    21a4:	e2 f7       	brpl	.-8      	; 0x219e <nrk_gpio_set+0xe2>
    21a6:	94 2b       	or	r25, r20
    21a8:	91 bb       	out	0x11, r25	; 17
    21aa:	d4 cf       	rjmp	.-88     	; 0x2154 <nrk_gpio_set+0x98>
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    21ac:	94 b3       	in	r25, 0x14	; 20
    21ae:	86 95       	lsr	r24
    21b0:	86 95       	lsr	r24
    21b2:	86 95       	lsr	r24
    21b4:	41 e0       	ldi	r20, 0x01	; 1
    21b6:	50 e0       	ldi	r21, 0x00	; 0
    21b8:	02 c0       	rjmp	.+4      	; 0x21be <nrk_gpio_set+0x102>
    21ba:	44 0f       	add	r20, r20
    21bc:	55 1f       	adc	r21, r21
    21be:	8a 95       	dec	r24
    21c0:	e2 f7       	brpl	.-8      	; 0x21ba <nrk_gpio_set+0xfe>
    21c2:	94 2b       	or	r25, r20
    21c4:	94 bb       	out	0x14, r25	; 20
    21c6:	c6 cf       	rjmp	.-116    	; 0x2154 <nrk_gpio_set+0x98>
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    21c8:	8f ef       	ldi	r24, 0xFF	; 255
    21ca:	08 95       	ret
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
                default: return -1;
    21cc:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    21ce:	08 95       	ret

000021d0 <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    21d0:	8f 3f       	cpi	r24, 0xFF	; 255
    21d2:	09 f4       	brne	.+2      	; 0x21d6 <nrk_gpio_clr+0x6>
    21d4:	7b c0       	rjmp	.+246    	; 0x22cc <nrk_gpio_clr+0xfc>
        switch (pin & 0x07) {
    21d6:	28 2f       	mov	r18, r24
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	27 70       	andi	r18, 0x07	; 7
    21dc:	30 70       	andi	r19, 0x00	; 0
    21de:	23 30       	cpi	r18, 0x03	; 3
    21e0:	31 05       	cpc	r19, r1
    21e2:	09 f4       	brne	.+2      	; 0x21e6 <nrk_gpio_clr+0x16>
    21e4:	46 c0       	rjmp	.+140    	; 0x2272 <nrk_gpio_clr+0xa2>
    21e6:	24 30       	cpi	r18, 0x04	; 4
    21e8:	31 05       	cpc	r19, r1
    21ea:	54 f4       	brge	.+20     	; 0x2200 <nrk_gpio_clr+0x30>
    21ec:	21 30       	cpi	r18, 0x01	; 1
    21ee:	31 05       	cpc	r19, r1
    21f0:	19 f1       	breq	.+70     	; 0x2238 <nrk_gpio_clr+0x68>
    21f2:	22 30       	cpi	r18, 0x02	; 2
    21f4:	31 05       	cpc	r19, r1
    21f6:	6c f5       	brge	.+90     	; 0x2252 <nrk_gpio_clr+0x82>
    21f8:	21 15       	cp	r18, r1
    21fa:	31 05       	cpc	r19, r1
    21fc:	71 f0       	breq	.+28     	; 0x221a <nrk_gpio_clr+0x4a>
    21fe:	68 c0       	rjmp	.+208    	; 0x22d0 <nrk_gpio_clr+0x100>
    2200:	25 30       	cpi	r18, 0x05	; 5
    2202:	31 05       	cpc	r19, r1
    2204:	09 f4       	brne	.+2      	; 0x2208 <nrk_gpio_clr+0x38>
    2206:	53 c0       	rjmp	.+166    	; 0x22ae <nrk_gpio_clr+0xde>
    2208:	25 30       	cpi	r18, 0x05	; 5
    220a:	31 05       	cpc	r19, r1
    220c:	0c f4       	brge	.+2      	; 0x2210 <nrk_gpio_clr+0x40>
    220e:	40 c0       	rjmp	.+128    	; 0x2290 <nrk_gpio_clr+0xc0>
    2210:	26 30       	cpi	r18, 0x06	; 6
    2212:	31 05       	cpc	r19, r1
    2214:	09 f0       	breq	.+2      	; 0x2218 <nrk_gpio_clr+0x48>
    2216:	5c c0       	rjmp	.+184    	; 0x22d0 <nrk_gpio_clr+0x100>
    2218:	4a c0       	rjmp	.+148    	; 0x22ae <nrk_gpio_clr+0xde>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    221a:	92 b1       	in	r25, 0x02	; 2
    221c:	86 95       	lsr	r24
    221e:	86 95       	lsr	r24
    2220:	86 95       	lsr	r24
    2222:	41 e0       	ldi	r20, 0x01	; 1
    2224:	50 e0       	ldi	r21, 0x00	; 0
    2226:	02 c0       	rjmp	.+4      	; 0x222c <nrk_gpio_clr+0x5c>
    2228:	44 0f       	add	r20, r20
    222a:	55 1f       	adc	r21, r21
    222c:	8a 95       	dec	r24
    222e:	e2 f7       	brpl	.-8      	; 0x2228 <nrk_gpio_clr+0x58>
    2230:	40 95       	com	r20
    2232:	49 23       	and	r20, r25
    2234:	42 b9       	out	0x02, r20	; 2
    2236:	1b c0       	rjmp	.+54     	; 0x226e <nrk_gpio_clr+0x9e>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    2238:	95 b1       	in	r25, 0x05	; 5
    223a:	86 95       	lsr	r24
    223c:	86 95       	lsr	r24
    223e:	86 95       	lsr	r24
    2240:	02 c0       	rjmp	.+4      	; 0x2246 <nrk_gpio_clr+0x76>
    2242:	22 0f       	add	r18, r18
    2244:	33 1f       	adc	r19, r19
    2246:	8a 95       	dec	r24
    2248:	e2 f7       	brpl	.-8      	; 0x2242 <nrk_gpio_clr+0x72>
    224a:	20 95       	com	r18
    224c:	29 23       	and	r18, r25
    224e:	25 b9       	out	0x05, r18	; 5
    2250:	0e c0       	rjmp	.+28     	; 0x226e <nrk_gpio_clr+0x9e>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2252:	98 b1       	in	r25, 0x08	; 8
    2254:	86 95       	lsr	r24
    2256:	86 95       	lsr	r24
    2258:	86 95       	lsr	r24
    225a:	41 e0       	ldi	r20, 0x01	; 1
    225c:	50 e0       	ldi	r21, 0x00	; 0
    225e:	02 c0       	rjmp	.+4      	; 0x2264 <nrk_gpio_clr+0x94>
    2260:	44 0f       	add	r20, r20
    2262:	55 1f       	adc	r21, r21
    2264:	8a 95       	dec	r24
    2266:	e2 f7       	brpl	.-8      	; 0x2260 <nrk_gpio_clr+0x90>
    2268:	40 95       	com	r20
    226a:	49 23       	and	r20, r25
    226c:	48 b9       	out	0x08, r20	; 8
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                default: return -1;
        }
        return 1;
    226e:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2270:	08 95       	ret
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2272:	9b b1       	in	r25, 0x0b	; 11
    2274:	86 95       	lsr	r24
    2276:	86 95       	lsr	r24
    2278:	86 95       	lsr	r24
    227a:	41 e0       	ldi	r20, 0x01	; 1
    227c:	50 e0       	ldi	r21, 0x00	; 0
    227e:	02 c0       	rjmp	.+4      	; 0x2284 <nrk_gpio_clr+0xb4>
    2280:	44 0f       	add	r20, r20
    2282:	55 1f       	adc	r21, r21
    2284:	8a 95       	dec	r24
    2286:	e2 f7       	brpl	.-8      	; 0x2280 <nrk_gpio_clr+0xb0>
    2288:	40 95       	com	r20
    228a:	49 23       	and	r20, r25
    228c:	4b b9       	out	0x0b, r20	; 11
    228e:	ef cf       	rjmp	.-34     	; 0x226e <nrk_gpio_clr+0x9e>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2290:	9e b1       	in	r25, 0x0e	; 14
    2292:	86 95       	lsr	r24
    2294:	86 95       	lsr	r24
    2296:	86 95       	lsr	r24
    2298:	41 e0       	ldi	r20, 0x01	; 1
    229a:	50 e0       	ldi	r21, 0x00	; 0
    229c:	02 c0       	rjmp	.+4      	; 0x22a2 <nrk_gpio_clr+0xd2>
    229e:	44 0f       	add	r20, r20
    22a0:	55 1f       	adc	r21, r21
    22a2:	8a 95       	dec	r24
    22a4:	e2 f7       	brpl	.-8      	; 0x229e <nrk_gpio_clr+0xce>
    22a6:	40 95       	com	r20
    22a8:	49 23       	and	r20, r25
    22aa:	4e b9       	out	0x0e, r20	; 14
    22ac:	e0 cf       	rjmp	.-64     	; 0x226e <nrk_gpio_clr+0x9e>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    22ae:	91 b3       	in	r25, 0x11	; 17
    22b0:	86 95       	lsr	r24
    22b2:	86 95       	lsr	r24
    22b4:	86 95       	lsr	r24
    22b6:	41 e0       	ldi	r20, 0x01	; 1
    22b8:	50 e0       	ldi	r21, 0x00	; 0
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <nrk_gpio_clr+0xf0>
    22bc:	44 0f       	add	r20, r20
    22be:	55 1f       	adc	r21, r21
    22c0:	8a 95       	dec	r24
    22c2:	e2 f7       	brpl	.-8      	; 0x22bc <nrk_gpio_clr+0xec>
    22c4:	40 95       	com	r20
    22c6:	49 23       	and	r20, r25
    22c8:	41 bb       	out	0x11, r20	; 17
    22ca:	d1 cf       	rjmp	.-94     	; 0x226e <nrk_gpio_clr+0x9e>
        return 1;
}

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    22cc:	8f ef       	ldi	r24, 0xFF	; 255
    22ce:	08 95       	ret
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                default: return -1;
    22d0:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    22d2:	08 95       	ret

000022d4 <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    22d4:	8f 3f       	cpi	r24, 0xFF	; 255
    22d6:	b1 f1       	breq	.+108    	; 0x2344 <nrk_gpio_get+0x70>
        switch (pin & 0x07) {
    22d8:	28 2f       	mov	r18, r24
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	27 70       	andi	r18, 0x07	; 7
    22de:	30 70       	andi	r19, 0x00	; 0
    22e0:	23 30       	cpi	r18, 0x03	; 3
    22e2:	31 05       	cpc	r19, r1
    22e4:	e9 f0       	breq	.+58     	; 0x2320 <nrk_gpio_get+0x4c>
    22e6:	24 30       	cpi	r18, 0x04	; 4
    22e8:	31 05       	cpc	r19, r1
    22ea:	54 f4       	brge	.+20     	; 0x2300 <nrk_gpio_get+0x2c>
    22ec:	21 30       	cpi	r18, 0x01	; 1
    22ee:	31 05       	cpc	r19, r1
    22f0:	99 f0       	breq	.+38     	; 0x2318 <nrk_gpio_get+0x44>
    22f2:	22 30       	cpi	r18, 0x02	; 2
    22f4:	31 05       	cpc	r19, r1
    22f6:	94 f4       	brge	.+36     	; 0x231c <nrk_gpio_get+0x48>
    22f8:	21 15       	cp	r18, r1
    22fa:	31 05       	cpc	r19, r1
    22fc:	59 f0       	breq	.+22     	; 0x2314 <nrk_gpio_get+0x40>
    22fe:	22 c0       	rjmp	.+68     	; 0x2344 <nrk_gpio_get+0x70>
    2300:	25 30       	cpi	r18, 0x05	; 5
    2302:	31 05       	cpc	r19, r1
    2304:	89 f0       	breq	.+34     	; 0x2328 <nrk_gpio_get+0x54>
    2306:	25 30       	cpi	r18, 0x05	; 5
    2308:	31 05       	cpc	r19, r1
    230a:	64 f0       	brlt	.+24     	; 0x2324 <nrk_gpio_get+0x50>
    230c:	26 30       	cpi	r18, 0x06	; 6
    230e:	31 05       	cpc	r19, r1
    2310:	c9 f4       	brne	.+50     	; 0x2344 <nrk_gpio_get+0x70>
    2312:	0c c0       	rjmp	.+24     	; 0x232c <nrk_gpio_get+0x58>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    2314:	20 b1       	in	r18, 0x00	; 0
    2316:	0b c0       	rjmp	.+22     	; 0x232e <nrk_gpio_get+0x5a>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    2318:	23 b1       	in	r18, 0x03	; 3
    231a:	09 c0       	rjmp	.+18     	; 0x232e <nrk_gpio_get+0x5a>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    231c:	26 b1       	in	r18, 0x06	; 6
    231e:	07 c0       	rjmp	.+14     	; 0x232e <nrk_gpio_get+0x5a>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    2320:	29 b1       	in	r18, 0x09	; 9
    2322:	05 c0       	rjmp	.+10     	; 0x232e <nrk_gpio_get+0x5a>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    2324:	2c b1       	in	r18, 0x0c	; 12
    2326:	03 c0       	rjmp	.+6      	; 0x232e <nrk_gpio_get+0x5a>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    2328:	2f b1       	in	r18, 0x0f	; 15
    232a:	01 c0       	rjmp	.+2      	; 0x232e <nrk_gpio_get+0x5a>
                case NRK_PORTG:
                        return !!(PING & BM((pin & 0xF8) >> 3));
    232c:	22 b3       	in	r18, 0x12	; 18
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	86 95       	lsr	r24
    2332:	86 95       	lsr	r24
    2334:	86 95       	lsr	r24
    2336:	02 c0       	rjmp	.+4      	; 0x233c <nrk_gpio_get+0x68>
    2338:	35 95       	asr	r19
    233a:	27 95       	ror	r18
    233c:	8a 95       	dec	r24
    233e:	e2 f7       	brpl	.-8      	; 0x2338 <nrk_gpio_get+0x64>
    2340:	21 70       	andi	r18, 0x01	; 1
    2342:	01 c0       	rjmp	.+2      	; 0x2346 <nrk_gpio_get+0x72>
                default: return -1;
    2344:	2f ef       	ldi	r18, 0xFF	; 255
        }
        return 1;
}
    2346:	82 2f       	mov	r24, r18
    2348:	08 95       	ret

0000234a <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    234a:	8f 3f       	cpi	r24, 0xFF	; 255
    234c:	09 f4       	brne	.+2      	; 0x2350 <nrk_gpio_toggle+0x6>
    234e:	23 c1       	rjmp	.+582    	; 0x2596 <nrk_gpio_toggle+0x24c>
        switch (pin & 0x07) {
    2350:	28 2f       	mov	r18, r24
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	27 70       	andi	r18, 0x07	; 7
    2356:	30 70       	andi	r19, 0x00	; 0
    2358:	23 30       	cpi	r18, 0x03	; 3
    235a:	31 05       	cpc	r19, r1
    235c:	09 f4       	brne	.+2      	; 0x2360 <nrk_gpio_toggle+0x16>
    235e:	82 c0       	rjmp	.+260    	; 0x2464 <nrk_gpio_toggle+0x11a>
    2360:	24 30       	cpi	r18, 0x04	; 4
    2362:	31 05       	cpc	r19, r1
    2364:	5c f4       	brge	.+22     	; 0x237c <nrk_gpio_toggle+0x32>
    2366:	21 30       	cpi	r18, 0x01	; 1
    2368:	31 05       	cpc	r19, r1
    236a:	d9 f1       	breq	.+118    	; 0x23e2 <nrk_gpio_toggle+0x98>
    236c:	22 30       	cpi	r18, 0x02	; 2
    236e:	31 05       	cpc	r19, r1
    2370:	0c f0       	brlt	.+2      	; 0x2374 <nrk_gpio_toggle+0x2a>
    2372:	52 c0       	rjmp	.+164    	; 0x2418 <nrk_gpio_toggle+0xce>
    2374:	21 15       	cp	r18, r1
    2376:	31 05       	cpc	r19, r1
    2378:	71 f0       	breq	.+28     	; 0x2396 <nrk_gpio_toggle+0x4c>
    237a:	0f c1       	rjmp	.+542    	; 0x259a <nrk_gpio_toggle+0x250>
    237c:	25 30       	cpi	r18, 0x05	; 5
    237e:	31 05       	cpc	r19, r1
    2380:	09 f4       	brne	.+2      	; 0x2384 <nrk_gpio_toggle+0x3a>
    2382:	bd c0       	rjmp	.+378    	; 0x24fe <nrk_gpio_toggle+0x1b4>
    2384:	25 30       	cpi	r18, 0x05	; 5
    2386:	31 05       	cpc	r19, r1
    2388:	0c f4       	brge	.+2      	; 0x238c <nrk_gpio_toggle+0x42>
    238a:	93 c0       	rjmp	.+294    	; 0x24b2 <nrk_gpio_toggle+0x168>
    238c:	26 30       	cpi	r18, 0x06	; 6
    238e:	31 05       	cpc	r19, r1
    2390:	09 f0       	breq	.+2      	; 0x2394 <nrk_gpio_toggle+0x4a>
    2392:	03 c1       	rjmp	.+518    	; 0x259a <nrk_gpio_toggle+0x250>
    2394:	da c0       	rjmp	.+436    	; 0x254a <nrk_gpio_toggle+0x200>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    2396:	90 b1       	in	r25, 0x00	; 0
    2398:	86 95       	lsr	r24
    239a:	86 95       	lsr	r24
    239c:	86 95       	lsr	r24
    239e:	28 2f       	mov	r18, r24
    23a0:	89 2f       	mov	r24, r25
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	02 2e       	mov	r0, r18
    23a6:	02 c0       	rjmp	.+4      	; 0x23ac <nrk_gpio_toggle+0x62>
    23a8:	95 95       	asr	r25
    23aa:	87 95       	ror	r24
    23ac:	0a 94       	dec	r0
    23ae:	e2 f7       	brpl	.-8      	; 0x23a8 <nrk_gpio_toggle+0x5e>
    23b0:	80 fd       	sbrc	r24, 0
    23b2:	0b c0       	rjmp	.+22     	; 0x23ca <nrk_gpio_toggle+0x80>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    23b4:	32 b1       	in	r19, 0x02	; 2
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	02 c0       	rjmp	.+4      	; 0x23c0 <nrk_gpio_toggle+0x76>
    23bc:	88 0f       	add	r24, r24
    23be:	99 1f       	adc	r25, r25
    23c0:	2a 95       	dec	r18
    23c2:	e2 f7       	brpl	.-8      	; 0x23bc <nrk_gpio_toggle+0x72>
    23c4:	38 2b       	or	r19, r24
    23c6:	32 b9       	out	0x02, r19	; 2
    23c8:	66 c0       	rjmp	.+204    	; 0x2496 <nrk_gpio_toggle+0x14c>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    23ca:	32 b1       	in	r19, 0x02	; 2
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	02 c0       	rjmp	.+4      	; 0x23d6 <nrk_gpio_toggle+0x8c>
    23d2:	88 0f       	add	r24, r24
    23d4:	99 1f       	adc	r25, r25
    23d6:	2a 95       	dec	r18
    23d8:	e2 f7       	brpl	.-8      	; 0x23d2 <nrk_gpio_toggle+0x88>
    23da:	80 95       	com	r24
    23dc:	83 23       	and	r24, r19
    23de:	82 b9       	out	0x02, r24	; 2
    23e0:	5a c0       	rjmp	.+180    	; 0x2496 <nrk_gpio_toggle+0x14c>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    23e2:	43 b1       	in	r20, 0x03	; 3
    23e4:	86 95       	lsr	r24
    23e6:	86 95       	lsr	r24
    23e8:	86 95       	lsr	r24
    23ea:	50 e0       	ldi	r21, 0x00	; 0
    23ec:	08 2e       	mov	r0, r24
    23ee:	02 c0       	rjmp	.+4      	; 0x23f4 <nrk_gpio_toggle+0xaa>
    23f0:	55 95       	asr	r21
    23f2:	47 95       	ror	r20
    23f4:	0a 94       	dec	r0
    23f6:	e2 f7       	brpl	.-8      	; 0x23f0 <nrk_gpio_toggle+0xa6>
    23f8:	02 c0       	rjmp	.+4      	; 0x23fe <nrk_gpio_toggle+0xb4>
    23fa:	22 0f       	add	r18, r18
    23fc:	33 1f       	adc	r19, r19
    23fe:	8a 95       	dec	r24
    2400:	e2 f7       	brpl	.-8      	; 0x23fa <nrk_gpio_toggle+0xb0>
    2402:	40 fd       	sbrc	r20, 0
    2404:	04 c0       	rjmp	.+8      	; 0x240e <nrk_gpio_toggle+0xc4>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    2406:	85 b1       	in	r24, 0x05	; 5
    2408:	82 2b       	or	r24, r18
    240a:	85 b9       	out	0x05, r24	; 5
    240c:	44 c0       	rjmp	.+136    	; 0x2496 <nrk_gpio_toggle+0x14c>
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    240e:	85 b1       	in	r24, 0x05	; 5
    2410:	20 95       	com	r18
    2412:	28 23       	and	r18, r24
    2414:	25 b9       	out	0x05, r18	; 5
    2416:	3f c0       	rjmp	.+126    	; 0x2496 <nrk_gpio_toggle+0x14c>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    2418:	96 b1       	in	r25, 0x06	; 6
    241a:	86 95       	lsr	r24
    241c:	86 95       	lsr	r24
    241e:	86 95       	lsr	r24
    2420:	28 2f       	mov	r18, r24
    2422:	89 2f       	mov	r24, r25
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	02 2e       	mov	r0, r18
    2428:	02 c0       	rjmp	.+4      	; 0x242e <nrk_gpio_toggle+0xe4>
    242a:	95 95       	asr	r25
    242c:	87 95       	ror	r24
    242e:	0a 94       	dec	r0
    2430:	e2 f7       	brpl	.-8      	; 0x242a <nrk_gpio_toggle+0xe0>
    2432:	80 fd       	sbrc	r24, 0
    2434:	0b c0       	rjmp	.+22     	; 0x244c <nrk_gpio_toggle+0x102>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    2436:	38 b1       	in	r19, 0x08	; 8
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	02 c0       	rjmp	.+4      	; 0x2442 <nrk_gpio_toggle+0xf8>
    243e:	88 0f       	add	r24, r24
    2440:	99 1f       	adc	r25, r25
    2442:	2a 95       	dec	r18
    2444:	e2 f7       	brpl	.-8      	; 0x243e <nrk_gpio_toggle+0xf4>
    2446:	38 2b       	or	r19, r24
    2448:	38 b9       	out	0x08, r19	; 8
    244a:	25 c0       	rjmp	.+74     	; 0x2496 <nrk_gpio_toggle+0x14c>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    244c:	38 b1       	in	r19, 0x08	; 8
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	02 c0       	rjmp	.+4      	; 0x2458 <nrk_gpio_toggle+0x10e>
    2454:	88 0f       	add	r24, r24
    2456:	99 1f       	adc	r25, r25
    2458:	2a 95       	dec	r18
    245a:	e2 f7       	brpl	.-8      	; 0x2454 <nrk_gpio_toggle+0x10a>
    245c:	80 95       	com	r24
    245e:	83 23       	and	r24, r19
    2460:	88 b9       	out	0x08, r24	; 8
    2462:	19 c0       	rjmp	.+50     	; 0x2496 <nrk_gpio_toggle+0x14c>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    2464:	99 b1       	in	r25, 0x09	; 9
    2466:	86 95       	lsr	r24
    2468:	86 95       	lsr	r24
    246a:	86 95       	lsr	r24
    246c:	28 2f       	mov	r18, r24
    246e:	89 2f       	mov	r24, r25
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	02 2e       	mov	r0, r18
    2474:	02 c0       	rjmp	.+4      	; 0x247a <nrk_gpio_toggle+0x130>
    2476:	95 95       	asr	r25
    2478:	87 95       	ror	r24
    247a:	0a 94       	dec	r0
    247c:	e2 f7       	brpl	.-8      	; 0x2476 <nrk_gpio_toggle+0x12c>
    247e:	80 fd       	sbrc	r24, 0
    2480:	0c c0       	rjmp	.+24     	; 0x249a <nrk_gpio_toggle+0x150>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    2482:	3b b1       	in	r19, 0x0b	; 11
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	02 c0       	rjmp	.+4      	; 0x248e <nrk_gpio_toggle+0x144>
    248a:	88 0f       	add	r24, r24
    248c:	99 1f       	adc	r25, r25
    248e:	2a 95       	dec	r18
    2490:	e2 f7       	brpl	.-8      	; 0x248a <nrk_gpio_toggle+0x140>
    2492:	38 2b       	or	r19, r24
    2494:	3b b9       	out	0x0b, r19	; 11
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
        }
        return 1;
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	08 95       	ret
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    249a:	3b b1       	in	r19, 0x0b	; 11
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	02 c0       	rjmp	.+4      	; 0x24a6 <nrk_gpio_toggle+0x15c>
    24a2:	88 0f       	add	r24, r24
    24a4:	99 1f       	adc	r25, r25
    24a6:	2a 95       	dec	r18
    24a8:	e2 f7       	brpl	.-8      	; 0x24a2 <nrk_gpio_toggle+0x158>
    24aa:	80 95       	com	r24
    24ac:	83 23       	and	r24, r19
    24ae:	8b b9       	out	0x0b, r24	; 11
    24b0:	f2 cf       	rjmp	.-28     	; 0x2496 <nrk_gpio_toggle+0x14c>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    24b2:	9c b1       	in	r25, 0x0c	; 12
    24b4:	86 95       	lsr	r24
    24b6:	86 95       	lsr	r24
    24b8:	86 95       	lsr	r24
    24ba:	28 2f       	mov	r18, r24
    24bc:	89 2f       	mov	r24, r25
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	02 2e       	mov	r0, r18
    24c2:	02 c0       	rjmp	.+4      	; 0x24c8 <nrk_gpio_toggle+0x17e>
    24c4:	95 95       	asr	r25
    24c6:	87 95       	ror	r24
    24c8:	0a 94       	dec	r0
    24ca:	e2 f7       	brpl	.-8      	; 0x24c4 <nrk_gpio_toggle+0x17a>
    24cc:	80 fd       	sbrc	r24, 0
    24ce:	0b c0       	rjmp	.+22     	; 0x24e6 <nrk_gpio_toggle+0x19c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    24d0:	3e b1       	in	r19, 0x0e	; 14
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	02 c0       	rjmp	.+4      	; 0x24dc <nrk_gpio_toggle+0x192>
    24d8:	88 0f       	add	r24, r24
    24da:	99 1f       	adc	r25, r25
    24dc:	2a 95       	dec	r18
    24de:	e2 f7       	brpl	.-8      	; 0x24d8 <nrk_gpio_toggle+0x18e>
    24e0:	38 2b       	or	r19, r24
    24e2:	3e b9       	out	0x0e, r19	; 14
    24e4:	d8 cf       	rjmp	.-80     	; 0x2496 <nrk_gpio_toggle+0x14c>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    24e6:	3e b1       	in	r19, 0x0e	; 14
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	02 c0       	rjmp	.+4      	; 0x24f2 <nrk_gpio_toggle+0x1a8>
    24ee:	88 0f       	add	r24, r24
    24f0:	99 1f       	adc	r25, r25
    24f2:	2a 95       	dec	r18
    24f4:	e2 f7       	brpl	.-8      	; 0x24ee <nrk_gpio_toggle+0x1a4>
    24f6:	80 95       	com	r24
    24f8:	83 23       	and	r24, r19
    24fa:	8e b9       	out	0x0e, r24	; 14
    24fc:	cc cf       	rjmp	.-104    	; 0x2496 <nrk_gpio_toggle+0x14c>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    24fe:	9f b1       	in	r25, 0x0f	; 15
    2500:	86 95       	lsr	r24
    2502:	86 95       	lsr	r24
    2504:	86 95       	lsr	r24
    2506:	28 2f       	mov	r18, r24
    2508:	89 2f       	mov	r24, r25
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	02 2e       	mov	r0, r18
    250e:	02 c0       	rjmp	.+4      	; 0x2514 <nrk_gpio_toggle+0x1ca>
    2510:	95 95       	asr	r25
    2512:	87 95       	ror	r24
    2514:	0a 94       	dec	r0
    2516:	e2 f7       	brpl	.-8      	; 0x2510 <nrk_gpio_toggle+0x1c6>
    2518:	80 fd       	sbrc	r24, 0
    251a:	0b c0       	rjmp	.+22     	; 0x2532 <nrk_gpio_toggle+0x1e8>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    251c:	31 b3       	in	r19, 0x11	; 17
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	02 c0       	rjmp	.+4      	; 0x2528 <nrk_gpio_toggle+0x1de>
    2524:	88 0f       	add	r24, r24
    2526:	99 1f       	adc	r25, r25
    2528:	2a 95       	dec	r18
    252a:	e2 f7       	brpl	.-8      	; 0x2524 <nrk_gpio_toggle+0x1da>
    252c:	38 2b       	or	r19, r24
    252e:	31 bb       	out	0x11, r19	; 17
    2530:	b2 cf       	rjmp	.-156    	; 0x2496 <nrk_gpio_toggle+0x14c>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    2532:	31 b3       	in	r19, 0x11	; 17
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	02 c0       	rjmp	.+4      	; 0x253e <nrk_gpio_toggle+0x1f4>
    253a:	88 0f       	add	r24, r24
    253c:	99 1f       	adc	r25, r25
    253e:	2a 95       	dec	r18
    2540:	e2 f7       	brpl	.-8      	; 0x253a <nrk_gpio_toggle+0x1f0>
    2542:	80 95       	com	r24
    2544:	83 23       	and	r24, r19
    2546:	81 bb       	out	0x11, r24	; 17
    2548:	a6 cf       	rjmp	.-180    	; 0x2496 <nrk_gpio_toggle+0x14c>
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    254a:	92 b3       	in	r25, 0x12	; 18
    254c:	86 95       	lsr	r24
    254e:	86 95       	lsr	r24
    2550:	86 95       	lsr	r24
    2552:	28 2f       	mov	r18, r24
    2554:	89 2f       	mov	r24, r25
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	02 2e       	mov	r0, r18
    255a:	02 c0       	rjmp	.+4      	; 0x2560 <nrk_gpio_toggle+0x216>
    255c:	95 95       	asr	r25
    255e:	87 95       	ror	r24
    2560:	0a 94       	dec	r0
    2562:	e2 f7       	brpl	.-8      	; 0x255c <nrk_gpio_toggle+0x212>
    2564:	80 fd       	sbrc	r24, 0
    2566:	0b c0       	rjmp	.+22     	; 0x257e <nrk_gpio_toggle+0x234>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    2568:	34 b3       	in	r19, 0x14	; 20
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	02 c0       	rjmp	.+4      	; 0x2574 <nrk_gpio_toggle+0x22a>
    2570:	88 0f       	add	r24, r24
    2572:	99 1f       	adc	r25, r25
    2574:	2a 95       	dec	r18
    2576:	e2 f7       	brpl	.-8      	; 0x2570 <nrk_gpio_toggle+0x226>
    2578:	38 2b       	or	r19, r24
    257a:	34 bb       	out	0x14, r19	; 20
    257c:	8c cf       	rjmp	.-232    	; 0x2496 <nrk_gpio_toggle+0x14c>
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
    257e:	34 b3       	in	r19, 0x14	; 20
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	02 c0       	rjmp	.+4      	; 0x258a <nrk_gpio_toggle+0x240>
    2586:	88 0f       	add	r24, r24
    2588:	99 1f       	adc	r25, r25
    258a:	2a 95       	dec	r18
    258c:	e2 f7       	brpl	.-8      	; 0x2586 <nrk_gpio_toggle+0x23c>
    258e:	80 95       	com	r24
    2590:	83 23       	and	r24, r19
    2592:	84 bb       	out	0x14, r24	; 20
    2594:	80 cf       	rjmp	.-256    	; 0x2496 <nrk_gpio_toggle+0x14c>
        return 1;
}

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    2596:	8f ef       	ldi	r24, 0xFF	; 255
    2598:	08 95       	ret
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
    259a:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    259c:	08 95       	ret

0000259e <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    259e:	8f 3f       	cpi	r24, 0xFF	; 255
    25a0:	09 f4       	brne	.+2      	; 0x25a4 <nrk_gpio_direction+0x6>
    25a2:	0d c1       	rjmp	.+538    	; 0x27be <nrk_gpio_direction+0x220>
    25a4:	28 2f       	mov	r18, r24
    25a6:	30 e0       	ldi	r19, 0x00	; 0
        if (pin_direction == NRK_PIN_INPUT) {
    25a8:	66 23       	and	r22, r22
    25aa:	09 f0       	breq	.+2      	; 0x25ae <nrk_gpio_direction+0x10>
    25ac:	87 c0       	rjmp	.+270    	; 0x26bc <nrk_gpio_direction+0x11e>
                switch (pin & 0x07) {
    25ae:	27 70       	andi	r18, 0x07	; 7
    25b0:	30 70       	andi	r19, 0x00	; 0
    25b2:	23 30       	cpi	r18, 0x03	; 3
    25b4:	31 05       	cpc	r19, r1
    25b6:	09 f4       	brne	.+2      	; 0x25ba <nrk_gpio_direction+0x1c>
    25b8:	45 c0       	rjmp	.+138    	; 0x2644 <nrk_gpio_direction+0xa6>
    25ba:	24 30       	cpi	r18, 0x04	; 4
    25bc:	31 05       	cpc	r19, r1
    25be:	54 f4       	brge	.+20     	; 0x25d4 <nrk_gpio_direction+0x36>
    25c0:	21 30       	cpi	r18, 0x01	; 1
    25c2:	31 05       	cpc	r19, r1
    25c4:	19 f1       	breq	.+70     	; 0x260c <nrk_gpio_direction+0x6e>
    25c6:	22 30       	cpi	r18, 0x02	; 2
    25c8:	31 05       	cpc	r19, r1
    25ca:	6c f5       	brge	.+90     	; 0x2626 <nrk_gpio_direction+0x88>
    25cc:	21 15       	cp	r18, r1
    25ce:	31 05       	cpc	r19, r1
    25d0:	71 f0       	breq	.+28     	; 0x25ee <nrk_gpio_direction+0x50>
    25d2:	f5 c0       	rjmp	.+490    	; 0x27be <nrk_gpio_direction+0x220>
    25d4:	25 30       	cpi	r18, 0x05	; 5
    25d6:	31 05       	cpc	r19, r1
    25d8:	09 f4       	brne	.+2      	; 0x25dc <nrk_gpio_direction+0x3e>
    25da:	52 c0       	rjmp	.+164    	; 0x2680 <nrk_gpio_direction+0xe2>
    25dc:	25 30       	cpi	r18, 0x05	; 5
    25de:	31 05       	cpc	r19, r1
    25e0:	0c f4       	brge	.+2      	; 0x25e4 <nrk_gpio_direction+0x46>
    25e2:	3f c0       	rjmp	.+126    	; 0x2662 <nrk_gpio_direction+0xc4>
    25e4:	26 30       	cpi	r18, 0x06	; 6
    25e6:	31 05       	cpc	r19, r1
    25e8:	09 f0       	breq	.+2      	; 0x25ec <nrk_gpio_direction+0x4e>
    25ea:	e9 c0       	rjmp	.+466    	; 0x27be <nrk_gpio_direction+0x220>
    25ec:	58 c0       	rjmp	.+176    	; 0x269e <nrk_gpio_direction+0x100>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    25ee:	91 b1       	in	r25, 0x01	; 1
    25f0:	86 95       	lsr	r24
    25f2:	86 95       	lsr	r24
    25f4:	86 95       	lsr	r24
    25f6:	41 e0       	ldi	r20, 0x01	; 1
    25f8:	50 e0       	ldi	r21, 0x00	; 0
    25fa:	02 c0       	rjmp	.+4      	; 0x2600 <nrk_gpio_direction+0x62>
    25fc:	44 0f       	add	r20, r20
    25fe:	55 1f       	adc	r21, r21
    2600:	8a 95       	dec	r24
    2602:	e2 f7       	brpl	.-8      	; 0x25fc <nrk_gpio_direction+0x5e>
    2604:	40 95       	com	r20
    2606:	49 23       	and	r20, r25
    2608:	41 b9       	out	0x01, r20	; 1
    260a:	d7 c0       	rjmp	.+430    	; 0x27ba <nrk_gpio_direction+0x21c>
                                //PORTA |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    260c:	94 b1       	in	r25, 0x04	; 4
    260e:	86 95       	lsr	r24
    2610:	86 95       	lsr	r24
    2612:	86 95       	lsr	r24
    2614:	02 c0       	rjmp	.+4      	; 0x261a <nrk_gpio_direction+0x7c>
    2616:	22 0f       	add	r18, r18
    2618:	33 1f       	adc	r19, r19
    261a:	8a 95       	dec	r24
    261c:	e2 f7       	brpl	.-8      	; 0x2616 <nrk_gpio_direction+0x78>
    261e:	20 95       	com	r18
    2620:	29 23       	and	r18, r25
    2622:	24 b9       	out	0x04, r18	; 4
    2624:	ca c0       	rjmp	.+404    	; 0x27ba <nrk_gpio_direction+0x21c>
                                //PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    2626:	97 b1       	in	r25, 0x07	; 7
    2628:	86 95       	lsr	r24
    262a:	86 95       	lsr	r24
    262c:	86 95       	lsr	r24
    262e:	41 e0       	ldi	r20, 0x01	; 1
    2630:	50 e0       	ldi	r21, 0x00	; 0
    2632:	02 c0       	rjmp	.+4      	; 0x2638 <nrk_gpio_direction+0x9a>
    2634:	44 0f       	add	r20, r20
    2636:	55 1f       	adc	r21, r21
    2638:	8a 95       	dec	r24
    263a:	e2 f7       	brpl	.-8      	; 0x2634 <nrk_gpio_direction+0x96>
    263c:	40 95       	com	r20
    263e:	49 23       	and	r20, r25
    2640:	47 b9       	out	0x07, r20	; 7
    2642:	bb c0       	rjmp	.+374    	; 0x27ba <nrk_gpio_direction+0x21c>
                                //PORTC |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    2644:	9a b1       	in	r25, 0x0a	; 10
    2646:	86 95       	lsr	r24
    2648:	86 95       	lsr	r24
    264a:	86 95       	lsr	r24
    264c:	41 e0       	ldi	r20, 0x01	; 1
    264e:	50 e0       	ldi	r21, 0x00	; 0
    2650:	02 c0       	rjmp	.+4      	; 0x2656 <nrk_gpio_direction+0xb8>
    2652:	44 0f       	add	r20, r20
    2654:	55 1f       	adc	r21, r21
    2656:	8a 95       	dec	r24
    2658:	e2 f7       	brpl	.-8      	; 0x2652 <nrk_gpio_direction+0xb4>
    265a:	40 95       	com	r20
    265c:	49 23       	and	r20, r25
    265e:	4a b9       	out	0x0a, r20	; 10
    2660:	ac c0       	rjmp	.+344    	; 0x27ba <nrk_gpio_direction+0x21c>
                                //PORTD |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    2662:	9d b1       	in	r25, 0x0d	; 13
    2664:	86 95       	lsr	r24
    2666:	86 95       	lsr	r24
    2668:	86 95       	lsr	r24
    266a:	41 e0       	ldi	r20, 0x01	; 1
    266c:	50 e0       	ldi	r21, 0x00	; 0
    266e:	02 c0       	rjmp	.+4      	; 0x2674 <nrk_gpio_direction+0xd6>
    2670:	44 0f       	add	r20, r20
    2672:	55 1f       	adc	r21, r21
    2674:	8a 95       	dec	r24
    2676:	e2 f7       	brpl	.-8      	; 0x2670 <nrk_gpio_direction+0xd2>
    2678:	40 95       	com	r20
    267a:	49 23       	and	r20, r25
    267c:	4d b9       	out	0x0d, r20	; 13
    267e:	9d c0       	rjmp	.+314    	; 0x27ba <nrk_gpio_direction+0x21c>
                                //PORTE |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    2680:	90 b3       	in	r25, 0x10	; 16
    2682:	86 95       	lsr	r24
    2684:	86 95       	lsr	r24
    2686:	86 95       	lsr	r24
    2688:	41 e0       	ldi	r20, 0x01	; 1
    268a:	50 e0       	ldi	r21, 0x00	; 0
    268c:	02 c0       	rjmp	.+4      	; 0x2692 <nrk_gpio_direction+0xf4>
    268e:	44 0f       	add	r20, r20
    2690:	55 1f       	adc	r21, r21
    2692:	8a 95       	dec	r24
    2694:	e2 f7       	brpl	.-8      	; 0x268e <nrk_gpio_direction+0xf0>
    2696:	40 95       	com	r20
    2698:	49 23       	and	r20, r25
    269a:	40 bb       	out	0x10, r20	; 16
    269c:	8e c0       	rjmp	.+284    	; 0x27ba <nrk_gpio_direction+0x21c>
                                //PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
    269e:	93 b3       	in	r25, 0x13	; 19
    26a0:	86 95       	lsr	r24
    26a2:	86 95       	lsr	r24
    26a4:	86 95       	lsr	r24
    26a6:	41 e0       	ldi	r20, 0x01	; 1
    26a8:	50 e0       	ldi	r21, 0x00	; 0
    26aa:	02 c0       	rjmp	.+4      	; 0x26b0 <nrk_gpio_direction+0x112>
    26ac:	44 0f       	add	r20, r20
    26ae:	55 1f       	adc	r21, r21
    26b0:	8a 95       	dec	r24
    26b2:	e2 f7       	brpl	.-8      	; 0x26ac <nrk_gpio_direction+0x10e>
    26b4:	40 95       	com	r20
    26b6:	49 23       	and	r20, r25
    26b8:	43 bb       	out	0x13, r20	; 19
    26ba:	7f c0       	rjmp	.+254    	; 0x27ba <nrk_gpio_direction+0x21c>
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    26bc:	27 70       	andi	r18, 0x07	; 7
    26be:	30 70       	andi	r19, 0x00	; 0
    26c0:	23 30       	cpi	r18, 0x03	; 3
    26c2:	31 05       	cpc	r19, r1
    26c4:	09 f4       	brne	.+2      	; 0x26c8 <nrk_gpio_direction+0x12a>
    26c6:	42 c0       	rjmp	.+132    	; 0x274c <nrk_gpio_direction+0x1ae>
    26c8:	24 30       	cpi	r18, 0x04	; 4
    26ca:	31 05       	cpc	r19, r1
    26cc:	54 f4       	brge	.+20     	; 0x26e2 <nrk_gpio_direction+0x144>
    26ce:	21 30       	cpi	r18, 0x01	; 1
    26d0:	31 05       	cpc	r19, r1
    26d2:	11 f1       	breq	.+68     	; 0x2718 <nrk_gpio_direction+0x17a>
    26d4:	22 30       	cpi	r18, 0x02	; 2
    26d6:	31 05       	cpc	r19, r1
    26d8:	5c f5       	brge	.+86     	; 0x2730 <nrk_gpio_direction+0x192>
    26da:	21 15       	cp	r18, r1
    26dc:	31 05       	cpc	r19, r1
    26de:	71 f0       	breq	.+28     	; 0x26fc <nrk_gpio_direction+0x15e>
    26e0:	70 c0       	rjmp	.+224    	; 0x27c2 <nrk_gpio_direction+0x224>
    26e2:	25 30       	cpi	r18, 0x05	; 5
    26e4:	31 05       	cpc	r19, r1
    26e6:	09 f4       	brne	.+2      	; 0x26ea <nrk_gpio_direction+0x14c>
    26e8:	4d c0       	rjmp	.+154    	; 0x2784 <nrk_gpio_direction+0x1e6>
    26ea:	25 30       	cpi	r18, 0x05	; 5
    26ec:	31 05       	cpc	r19, r1
    26ee:	0c f4       	brge	.+2      	; 0x26f2 <nrk_gpio_direction+0x154>
    26f0:	3b c0       	rjmp	.+118    	; 0x2768 <nrk_gpio_direction+0x1ca>
    26f2:	26 30       	cpi	r18, 0x06	; 6
    26f4:	31 05       	cpc	r19, r1
    26f6:	09 f0       	breq	.+2      	; 0x26fa <nrk_gpio_direction+0x15c>
    26f8:	64 c0       	rjmp	.+200    	; 0x27c2 <nrk_gpio_direction+0x224>
    26fa:	52 c0       	rjmp	.+164    	; 0x27a0 <nrk_gpio_direction+0x202>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    26fc:	91 b1       	in	r25, 0x01	; 1
    26fe:	86 95       	lsr	r24
    2700:	86 95       	lsr	r24
    2702:	86 95       	lsr	r24
    2704:	41 e0       	ldi	r20, 0x01	; 1
    2706:	50 e0       	ldi	r21, 0x00	; 0
    2708:	02 c0       	rjmp	.+4      	; 0x270e <nrk_gpio_direction+0x170>
    270a:	44 0f       	add	r20, r20
    270c:	55 1f       	adc	r21, r21
    270e:	8a 95       	dec	r24
    2710:	e2 f7       	brpl	.-8      	; 0x270a <nrk_gpio_direction+0x16c>
    2712:	94 2b       	or	r25, r20
    2714:	91 b9       	out	0x01, r25	; 1
    2716:	51 c0       	rjmp	.+162    	; 0x27ba <nrk_gpio_direction+0x21c>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    2718:	94 b1       	in	r25, 0x04	; 4
    271a:	86 95       	lsr	r24
    271c:	86 95       	lsr	r24
    271e:	86 95       	lsr	r24
    2720:	02 c0       	rjmp	.+4      	; 0x2726 <nrk_gpio_direction+0x188>
    2722:	22 0f       	add	r18, r18
    2724:	33 1f       	adc	r19, r19
    2726:	8a 95       	dec	r24
    2728:	e2 f7       	brpl	.-8      	; 0x2722 <nrk_gpio_direction+0x184>
    272a:	92 2b       	or	r25, r18
    272c:	94 b9       	out	0x04, r25	; 4
    272e:	45 c0       	rjmp	.+138    	; 0x27ba <nrk_gpio_direction+0x21c>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    2730:	97 b1       	in	r25, 0x07	; 7
    2732:	86 95       	lsr	r24
    2734:	86 95       	lsr	r24
    2736:	86 95       	lsr	r24
    2738:	41 e0       	ldi	r20, 0x01	; 1
    273a:	50 e0       	ldi	r21, 0x00	; 0
    273c:	02 c0       	rjmp	.+4      	; 0x2742 <nrk_gpio_direction+0x1a4>
    273e:	44 0f       	add	r20, r20
    2740:	55 1f       	adc	r21, r21
    2742:	8a 95       	dec	r24
    2744:	e2 f7       	brpl	.-8      	; 0x273e <nrk_gpio_direction+0x1a0>
    2746:	94 2b       	or	r25, r20
    2748:	97 b9       	out	0x07, r25	; 7
    274a:	37 c0       	rjmp	.+110    	; 0x27ba <nrk_gpio_direction+0x21c>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    274c:	9a b1       	in	r25, 0x0a	; 10
    274e:	86 95       	lsr	r24
    2750:	86 95       	lsr	r24
    2752:	86 95       	lsr	r24
    2754:	41 e0       	ldi	r20, 0x01	; 1
    2756:	50 e0       	ldi	r21, 0x00	; 0
    2758:	02 c0       	rjmp	.+4      	; 0x275e <nrk_gpio_direction+0x1c0>
    275a:	44 0f       	add	r20, r20
    275c:	55 1f       	adc	r21, r21
    275e:	8a 95       	dec	r24
    2760:	e2 f7       	brpl	.-8      	; 0x275a <nrk_gpio_direction+0x1bc>
    2762:	94 2b       	or	r25, r20
    2764:	9a b9       	out	0x0a, r25	; 10
    2766:	29 c0       	rjmp	.+82     	; 0x27ba <nrk_gpio_direction+0x21c>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    2768:	9d b1       	in	r25, 0x0d	; 13
    276a:	86 95       	lsr	r24
    276c:	86 95       	lsr	r24
    276e:	86 95       	lsr	r24
    2770:	41 e0       	ldi	r20, 0x01	; 1
    2772:	50 e0       	ldi	r21, 0x00	; 0
    2774:	02 c0       	rjmp	.+4      	; 0x277a <nrk_gpio_direction+0x1dc>
    2776:	44 0f       	add	r20, r20
    2778:	55 1f       	adc	r21, r21
    277a:	8a 95       	dec	r24
    277c:	e2 f7       	brpl	.-8      	; 0x2776 <nrk_gpio_direction+0x1d8>
    277e:	94 2b       	or	r25, r20
    2780:	9d b9       	out	0x0d, r25	; 13
    2782:	1b c0       	rjmp	.+54     	; 0x27ba <nrk_gpio_direction+0x21c>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    2784:	90 b3       	in	r25, 0x10	; 16
    2786:	86 95       	lsr	r24
    2788:	86 95       	lsr	r24
    278a:	86 95       	lsr	r24
    278c:	41 e0       	ldi	r20, 0x01	; 1
    278e:	50 e0       	ldi	r21, 0x00	; 0
    2790:	02 c0       	rjmp	.+4      	; 0x2796 <nrk_gpio_direction+0x1f8>
    2792:	44 0f       	add	r20, r20
    2794:	55 1f       	adc	r21, r21
    2796:	8a 95       	dec	r24
    2798:	e2 f7       	brpl	.-8      	; 0x2792 <nrk_gpio_direction+0x1f4>
    279a:	94 2b       	or	r25, r20
    279c:	90 bb       	out	0x10, r25	; 16
    279e:	0d c0       	rjmp	.+26     	; 0x27ba <nrk_gpio_direction+0x21c>
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    27a0:	93 b3       	in	r25, 0x13	; 19
    27a2:	86 95       	lsr	r24
    27a4:	86 95       	lsr	r24
    27a6:	86 95       	lsr	r24
    27a8:	41 e0       	ldi	r20, 0x01	; 1
    27aa:	50 e0       	ldi	r21, 0x00	; 0
    27ac:	02 c0       	rjmp	.+4      	; 0x27b2 <nrk_gpio_direction+0x214>
    27ae:	44 0f       	add	r20, r20
    27b0:	55 1f       	adc	r21, r21
    27b2:	8a 95       	dec	r24
    27b4:	e2 f7       	brpl	.-8      	; 0x27ae <nrk_gpio_direction+0x210>
    27b6:	94 2b       	or	r25, r20
    27b8:	93 bb       	out	0x13, r25	; 19
                        default: return -1;
                }
        }
        return 1;
    27ba:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    27bc:	08 95       	ret
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
    27be:	8f ef       	ldi	r24, 0xFF	; 255
    27c0:	08 95       	ret
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
                        default: return -1;
    27c2:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    27c4:	08 95       	ret

000027c6 <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    27c6:	88 23       	and	r24, r24
    27c8:	29 f4       	brne	.+10     	; 0x27d4 <nrk_get_button+0xe>
	 return( !(PINA & BM(BUTTON))); 
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	01 9b       	sbis	0x00, 1	; 0
    27ce:	03 c0       	rjmp	.+6      	; 0x27d6 <nrk_get_button+0x10>
    27d0:	80 e0       	ldi	r24, 0x00	; 0
    27d2:	08 95       	ret
	} 
return -1;
    27d4:	8f ef       	ldi	r24, 0xFF	; 255
}
    27d6:	08 95       	ret

000027d8 <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    27d8:	00 97       	sbiw	r24, 0x00	; 0
    27da:	11 f4       	brne	.+4      	; 0x27e0 <nrk_led_toggle+0x8>
    27dc:	83 e2       	ldi	r24, 0x23	; 35
    27de:	0e c0       	rjmp	.+28     	; 0x27fc <nrk_led_toggle+0x24>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    27e0:	81 30       	cpi	r24, 0x01	; 1
    27e2:	91 05       	cpc	r25, r1
    27e4:	11 f4       	brne	.+4      	; 0x27ea <nrk_led_toggle+0x12>
    27e6:	8b e2       	ldi	r24, 0x2B	; 43
    27e8:	09 c0       	rjmp	.+18     	; 0x27fc <nrk_led_toggle+0x24>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    27ea:	82 30       	cpi	r24, 0x02	; 2
    27ec:	91 05       	cpc	r25, r1
    27ee:	11 f4       	brne	.+4      	; 0x27f4 <nrk_led_toggle+0x1c>
    27f0:	83 e3       	ldi	r24, 0x33	; 51
    27f2:	04 c0       	rjmp	.+8      	; 0x27fc <nrk_led_toggle+0x24>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    27f4:	83 30       	cpi	r24, 0x03	; 3
    27f6:	91 05       	cpc	r25, r1
    27f8:	29 f4       	brne	.+10     	; 0x2804 <nrk_led_toggle+0x2c>
    27fa:	8b e3       	ldi	r24, 0x3B	; 59
    27fc:	0e 94 a5 11 	call	0x234a	; 0x234a <nrk_gpio_toggle>
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	08 95       	ret
return -1;
    2804:	8f ef       	ldi	r24, 0xFF	; 255
}
    2806:	08 95       	ret

00002808 <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    2808:	00 97       	sbiw	r24, 0x00	; 0
    280a:	11 f4       	brne	.+4      	; 0x2810 <nrk_led_clr+0x8>
    280c:	83 e2       	ldi	r24, 0x23	; 35
    280e:	0e c0       	rjmp	.+28     	; 0x282c <nrk_led_clr+0x24>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    2810:	81 30       	cpi	r24, 0x01	; 1
    2812:	91 05       	cpc	r25, r1
    2814:	11 f4       	brne	.+4      	; 0x281a <nrk_led_clr+0x12>
    2816:	8b e2       	ldi	r24, 0x2B	; 43
    2818:	09 c0       	rjmp	.+18     	; 0x282c <nrk_led_clr+0x24>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    281a:	82 30       	cpi	r24, 0x02	; 2
    281c:	91 05       	cpc	r25, r1
    281e:	11 f4       	brne	.+4      	; 0x2824 <nrk_led_clr+0x1c>
    2820:	83 e3       	ldi	r24, 0x33	; 51
    2822:	04 c0       	rjmp	.+8      	; 0x282c <nrk_led_clr+0x24>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    2824:	83 30       	cpi	r24, 0x03	; 3
    2826:	91 05       	cpc	r25, r1
    2828:	29 f4       	brne	.+10     	; 0x2834 <nrk_led_clr+0x2c>
    282a:	8b e3       	ldi	r24, 0x3B	; 59
    282c:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nrk_gpio_set>
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	08 95       	ret
return -1;
    2834:	8f ef       	ldi	r24, 0xFF	; 255
}
    2836:	08 95       	ret

00002838 <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    2838:	00 97       	sbiw	r24, 0x00	; 0
    283a:	11 f4       	brne	.+4      	; 0x2840 <nrk_led_set+0x8>
    283c:	83 e2       	ldi	r24, 0x23	; 35
    283e:	0e c0       	rjmp	.+28     	; 0x285c <nrk_led_set+0x24>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    2840:	81 30       	cpi	r24, 0x01	; 1
    2842:	91 05       	cpc	r25, r1
    2844:	11 f4       	brne	.+4      	; 0x284a <nrk_led_set+0x12>
    2846:	8b e2       	ldi	r24, 0x2B	; 43
    2848:	09 c0       	rjmp	.+18     	; 0x285c <nrk_led_set+0x24>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    284a:	82 30       	cpi	r24, 0x02	; 2
    284c:	91 05       	cpc	r25, r1
    284e:	11 f4       	brne	.+4      	; 0x2854 <nrk_led_set+0x1c>
    2850:	83 e3       	ldi	r24, 0x33	; 51
    2852:	04 c0       	rjmp	.+8      	; 0x285c <nrk_led_set+0x24>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    2854:	83 30       	cpi	r24, 0x03	; 3
    2856:	91 05       	cpc	r25, r1
    2858:	29 f4       	brne	.+10     	; 0x2864 <nrk_led_set+0x2c>
    285a:	8b e3       	ldi	r24, 0x3B	; 59
    285c:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <nrk_gpio_clr>
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	08 95       	ret
return -1;
    2864:	8f ef       	ldi	r24, 0xFF	; 255
}
    2866:	08 95       	ret

00002868 <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    2868:	88 23       	and	r24, r24
    286a:	19 f0       	breq	.+6      	; 0x2872 <nrk_gpio_pullups+0xa>
    286c:	85 b7       	in	r24, 0x35	; 53
    286e:	8f 7e       	andi	r24, 0xEF	; 239
    2870:	02 c0       	rjmp	.+4      	; 0x2876 <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    2872:	85 b7       	in	r24, 0x35	; 53
    2874:	80 61       	ori	r24, 0x10	; 16
    2876:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	08 95       	ret

0000287c <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    287c:	90 91 c8 00 	lds	r25, 0x00C8
    2880:	95 ff       	sbrs	r25, 5
    2882:	fc cf       	rjmp	.-8      	; 0x287c <putc1>
    2884:	80 93 ce 00 	sts	0x00CE, r24
}
    2888:	08 95       	ret

0000288a <setup_uart0>:

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    288a:	90 93 c5 00 	sts	0x00C5, r25
    288e:	80 93 c4 00 	sts	0x00C4, r24
    2892:	86 e0       	ldi	r24, 0x06	; 6
    2894:	80 93 c2 00 	sts	0x00C2, r24
    2898:	e1 ec       	ldi	r30, 0xC1	; 193
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	80 81       	ld	r24, Z
    289e:	8b 7f       	andi	r24, 0xFB	; 251
    28a0:	80 83       	st	Z, r24
    28a2:	a0 ec       	ldi	r26, 0xC0	; 192
    28a4:	b0 e0       	ldi	r27, 0x00	; 0
    28a6:	8c 91       	ld	r24, X
    28a8:	82 60       	ori	r24, 0x02	; 2
    28aa:	8c 93       	st	X, r24
ENABLE_UART0();
    28ac:	80 81       	ld	r24, Z
    28ae:	88 61       	ori	r24, 0x18	; 24
    28b0:	80 83       	st	Z, r24
}
    28b2:	08 95       	ret

000028b4 <setup_uart1>:

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    28b4:	90 93 cd 00 	sts	0x00CD, r25
    28b8:	80 93 cc 00 	sts	0x00CC, r24
    28bc:	86 e0       	ldi	r24, 0x06	; 6
    28be:	80 93 ca 00 	sts	0x00CA, r24
    28c2:	e9 ec       	ldi	r30, 0xC9	; 201
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	80 81       	ld	r24, Z
    28c8:	8b 7f       	andi	r24, 0xFB	; 251
    28ca:	80 83       	st	Z, r24
    28cc:	a8 ec       	ldi	r26, 0xC8	; 200
    28ce:	b0 e0       	ldi	r27, 0x00	; 0
    28d0:	8c 91       	ld	r24, X
    28d2:	82 60       	ori	r24, 0x02	; 2
    28d4:	8c 93       	st	X, r24
ENABLE_UART1();
    28d6:	80 81       	ld	r24, Z
    28d8:	88 61       	ori	r24, 0x18	; 24
    28da:	80 83       	st	Z, r24
}
    28dc:	08 95       	ret

000028de <nrk_setup_uart>:

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    28de:	0e 94 45 14 	call	0x288a	; 0x288a <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    28e2:	88 e8       	ldi	r24, 0x88	; 136
    28e4:	9f e0       	ldi	r25, 0x0F	; 15
    28e6:	6d e1       	ldi	r22, 0x1D	; 29
    28e8:	70 e1       	ldi	r23, 0x10	; 16
    28ea:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <fdevopen>
    28ee:	90 93 c7 0d 	sts	0x0DC7, r25
    28f2:	80 93 c6 0d 	sts	0x0DC6, r24
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    28f6:	88 e8       	ldi	r24, 0x88	; 136
    28f8:	9f e0       	ldi	r25, 0x0F	; 15
    28fa:	6d e1       	ldi	r22, 0x1D	; 29
    28fc:	70 e1       	ldi	r23, 0x10	; 16
    28fe:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <fdevopen>
    2902:	90 93 c5 0d 	sts	0x0DC5, r25
    2906:	80 93 c4 0d 	sts	0x0DC4, r24

#ifdef NRK_UART_BUF
   uart_rx_signal=nrk_signal_create();
    290a:	0e 94 36 1a 	call	0x346c	; 0x346c <nrk_signal_create>
    290e:	80 93 5b 05 	sts	0x055B, r24
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    2912:	8f 3f       	cpi	r24, 0xFF	; 255
    2914:	19 f4       	brne	.+6      	; 0x291c <nrk_setup_uart+0x3e>
    2916:	8e e0       	ldi	r24, 0x0E	; 14
    2918:	0e 94 13 18 	call	0x3026	; 0x3026 <nrk_error_add>
   uart_rx_buf_start=0;
    291c:	10 92 5d 05 	sts	0x055D, r1
    2920:	10 92 5c 05 	sts	0x055C, r1
   uart_rx_buf_end=0;
    2924:	10 92 5f 05 	sts	0x055F, r1
    2928:	10 92 5e 05 	sts	0x055E, r1
   ENABLE_UART0_RX_INT();
    292c:	80 91 c1 00 	lds	r24, 0x00C1
    2930:	80 68       	ori	r24, 0x80	; 128
    2932:	80 93 c1 00 	sts	0x00C1, r24
#endif

}
    2936:	08 95       	ret

00002938 <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    2938:	80 91 c8 00 	lds	r24, 0x00C8
    293c:	87 ff       	sbrs	r24, 7
    293e:	fc cf       	rjmp	.-8      	; 0x2938 <getc1>
    2940:	80 91 c8 00 	lds	r24, 0x00C8
    2944:	8f 77       	andi	r24, 0x7F	; 127
    2946:	80 93 c8 00 	sts	0x00C8, r24
    294a:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    294e:	08 95       	ret

00002950 <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    2958:	01 97       	sbiw	r24, 0x01	; 1
    295a:	d1 f7       	brne	.-12     	; 0x2950 <halWait>

} // halWait
    295c:	08 95       	ret

0000295e <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    295e:	0e 94 92 35 	call	0x6b24	; 0x6b24 <__eerd_byte_m128rfa1>
return v;
}
    2962:	08 95       	ret

00002964 <nrk_eeprom_write_byte>:

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    2964:	0e 94 9a 35 	call	0x6b34	; 0x6b34 <__eewr_byte_m128rfa1>
}
    2968:	08 95       	ret

0000296a <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    296a:	ef 92       	push	r14
    296c:	ff 92       	push	r15
    296e:	0f 93       	push	r16
    2970:	1f 93       	push	r17
    2972:	cf 93       	push	r28
    2974:	df 93       	push	r29
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
    2976:	e8 2e       	mov	r14, r24
    2978:	e7 01       	movw	r28, r14
    297a:	7e 01       	movw	r14, r28
    297c:	f9 2e       	mov	r15, r25
    297e:	e7 01       	movw	r28, r14
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	0e 94 92 35 	call	0x6b24	; 0x6b24 <__eerd_byte_m128rfa1>
    2988:	08 2f       	mov	r16, r24
    298a:	8b 83       	std	Y+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	0e 94 92 35 	call	0x6b24	; 0x6b24 <__eerd_byte_m128rfa1>
    2994:	e8 2e       	mov	r14, r24
    2996:	8a 83       	std	Y+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    2998:	82 e0       	ldi	r24, 0x02	; 2
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	0e 94 92 35 	call	0x6b24	; 0x6b24 <__eerd_byte_m128rfa1>
    29a0:	f8 2e       	mov	r15, r24
    29a2:	89 83       	std	Y+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    29a4:	83 e0       	ldi	r24, 0x03	; 3
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	0e 94 92 35 	call	0x6b24	; 0x6b24 <__eerd_byte_m128rfa1>
    29ac:	18 2f       	mov	r17, r24
    29ae:	88 83       	st	Y, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    29b0:	84 e0       	ldi	r24, 0x04	; 4
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	0e 94 92 35 	call	0x6b24	; 0x6b24 <__eerd_byte_m128rfa1>
ct=buf[0];
ct+=buf[1];
    29b8:	fe 0c       	add	r15, r14
ct+=buf[2];
    29ba:	f0 0e       	add	r15, r16
ct+=buf[3];
    29bc:	f1 0e       	add	r15, r17
if(checksum==ct) return NRK_OK;
    29be:	8f 15       	cp	r24, r15
    29c0:	11 f4       	brne	.+4      	; 0x29c6 <read_eeprom_mac_address+0x5c>
    29c2:	81 e0       	ldi	r24, 0x01	; 1
    29c4:	01 c0       	rjmp	.+2      	; 0x29c8 <read_eeprom_mac_address+0x5e>

return NRK_ERROR;
    29c6:	8f ef       	ldi	r24, 0xFF	; 255
}
    29c8:	df 91       	pop	r29
    29ca:	cf 91       	pop	r28
    29cc:	1f 91       	pop	r17
    29ce:	0f 91       	pop	r16
    29d0:	ff 90       	pop	r15
    29d2:	ef 90       	pop	r14
    29d4:	08 95       	ret

000029d6 <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    29d6:	cf 93       	push	r28
    29d8:	df 93       	push	r29
    29da:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    29dc:	85 e0       	ldi	r24, 0x05	; 5
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	0e 94 92 35 	call	0x6b24	; 0x6b24 <__eerd_byte_m128rfa1>
    29e4:	88 83       	st	Y, r24
return NRK_OK;
}
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	df 91       	pop	r29
    29ea:	cf 91       	pop	r28
    29ec:	08 95       	ret

000029ee <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
    29ee:	fc 01       	movw	r30, r24
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    29f0:	86 e0       	ldi	r24, 0x06	; 6
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	60 81       	ld	r22, Z
    29f6:	0e 94 9a 35 	call	0x6b34	; 0x6b34 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	08 95       	ret

000029fe <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    29fe:	cf 93       	push	r28
    2a00:	df 93       	push	r29
    2a02:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    2a04:	86 e0       	ldi	r24, 0x06	; 6
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	0e 94 92 35 	call	0x6b24	; 0x6b24 <__eerd_byte_m128rfa1>
    2a0c:	88 83       	st	Y, r24
  return NRK_OK;
}
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	df 91       	pop	r29
    2a12:	cf 91       	pop	r28
    2a14:	08 95       	ret

00002a16 <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    2a16:	0f 93       	push	r16
    2a18:	1f 93       	push	r17
    2a1a:	cf 93       	push	r28
    2a1c:	df 93       	push	r29
    2a1e:	08 2f       	mov	r16, r24
    2a20:	19 2f       	mov	r17, r25
    2a22:	c8 e0       	ldi	r28, 0x08	; 8
    2a24:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    2a26:	ce 01       	movw	r24, r28
    2a28:	0e 94 92 35 	call	0x6b24	; 0x6b24 <__eerd_byte_m128rfa1>
    2a2c:	f8 01       	movw	r30, r16
    2a2e:	81 93       	st	Z+, r24
    2a30:	8f 01       	movw	r16, r30
    2a32:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    2a34:	c8 31       	cpi	r28, 0x18	; 24
    2a36:	d1 05       	cpc	r29, r1
    2a38:	b1 f7       	brne	.-20     	; 0x2a26 <read_eeprom_aes_key+0x10>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	df 91       	pop	r29
    2a3e:	cf 91       	pop	r28
    2a40:	1f 91       	pop	r17
    2a42:	0f 91       	pop	r16
    2a44:	08 95       	ret

00002a46 <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    2a46:	0f 93       	push	r16
    2a48:	1f 93       	push	r17
    2a4a:	cf 93       	push	r28
    2a4c:	df 93       	push	r29
    2a4e:	08 2f       	mov	r16, r24
    2a50:	19 2f       	mov	r17, r25
    2a52:	c8 e0       	ldi	r28, 0x08	; 8
    2a54:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    2a56:	f8 01       	movw	r30, r16
    2a58:	61 91       	ld	r22, Z+
    2a5a:	8f 01       	movw	r16, r30
    2a5c:	ce 01       	movw	r24, r28
    2a5e:	0e 94 9a 35 	call	0x6b34	; 0x6b34 <__eewr_byte_m128rfa1>
    2a62:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    2a64:	c8 31       	cpi	r28, 0x18	; 24
    2a66:	d1 05       	cpc	r29, r1
    2a68:	b1 f7       	brne	.-20     	; 0x2a56 <write_eeprom_aes_key+0x10>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	df 91       	pop	r29
    2a6e:	cf 91       	pop	r28
    2a70:	1f 91       	pop	r17
    2a72:	0f 91       	pop	r16
    2a74:	08 95       	ret

00002a76 <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    2a76:	cf 93       	push	r28
    2a78:	df 93       	push	r29
    2a7a:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    2a7c:	87 e0       	ldi	r24, 0x07	; 7
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	0e 94 92 35 	call	0x6b24	; 0x6b24 <__eerd_byte_m128rfa1>
    2a84:	88 83       	st	Y, r24
  return NRK_OK;
}
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	df 91       	pop	r29
    2a8a:	cf 91       	pop	r28
    2a8c:	08 95       	ret

00002a8e <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    2a8e:	fc 01       	movw	r30, r24
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    2a90:	87 e0       	ldi	r24, 0x07	; 7
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	60 81       	ld	r22, Z
    2a96:	0e 94 9a 35 	call	0x6b34	; 0x6b34 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	08 95       	ret

00002a9e <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    2a9e:	f8 94       	cli
};
    2aa0:	08 95       	ret

00002aa2 <nrk_int_enable>:

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    2aa2:	78 94       	sei
};
    2aa4:	08 95       	ret

00002aa6 <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    2aa6:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <nrk_int_disable>
    2aaa:	ff cf       	rjmp	.-2      	; 0x2aaa <nrk_halt+0x4>

00002aac <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    2aac:	0f 93       	push	r16
    2aae:	1f 93       	push	r17
    2ab0:	df 93       	push	r29
    2ab2:	cf 93       	push	r28
    2ab4:	cd b7       	in	r28, 0x3d	; 61
    2ab6:	de b7       	in	r29, 0x3e	; 62
    2ab8:	a3 97       	sbiw	r28, 0x23	; 35
    2aba:	0f b6       	in	r0, 0x3f	; 63
    2abc:	f8 94       	cli
    2abe:	de bf       	out	0x3e, r29	; 62
    2ac0:	0f be       	out	0x3f, r0	; 63
    2ac2:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    2ac4:	0e 94 36 1a 	call	0x346c	; 0x346c <nrk_signal_create>
    2ac8:	80 93 85 0d 	sts	0x0D85, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    2acc:	8f 3f       	cpi	r24, 0xFF	; 255
    2ace:	21 f4       	brne	.+8      	; 0x2ad8 <nrk_init+0x2c>
    2ad0:	8e e0       	ldi	r24, 0x0E	; 14
    2ad2:	60 e0       	ldi	r22, 0x00	; 0
    2ad4:	0e 94 0c 18 	call	0x3018	; 0x3018 <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    2ad8:	0e 94 6f 28 	call	0x50de	; 0x50de <_nrk_startup_error>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    2adc:	08 2f       	mov	r16, r24
    2ade:	80 ff       	sbrs	r24, 0
    2ae0:	04 c0       	rjmp	.+8      	; 0x2aea <nrk_init+0x3e>
    2ae2:	86 e0       	ldi	r24, 0x06	; 6
    2ae4:	60 e0       	ldi	r22, 0x00	; 0
    2ae6:	0e 94 0c 18 	call	0x3018	; 0x3018 <nrk_kernel_error_add>
#ifndef IGNORE_EXT_RST_ERROR
   if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
    2aea:	01 ff       	sbrs	r16, 1
    2aec:	04 c0       	rjmp	.+8      	; 0x2af6 <nrk_init+0x4a>
    2aee:	84 e1       	ldi	r24, 0x14	; 20
    2af0:	60 e0       	ldi	r22, 0x00	; 0
    2af2:	0e 94 0c 18 	call	0x3018	; 0x3018 <nrk_kernel_error_add>
#endif
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
    2af6:	02 ff       	sbrs	r16, 2
    2af8:	04 c0       	rjmp	.+8      	; 0x2b02 <nrk_init+0x56>
    2afa:	83 e1       	ldi	r24, 0x13	; 19
    2afc:	60 e0       	ldi	r22, 0x00	; 0
    2afe:	0e 94 0c 18 	call	0x3018	; 0x3018 <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    2b02:	10 92 88 0d 	sts	0x0D88, r1
    nrk_cur_task_TCB = NULL;
    2b06:	10 92 96 0d 	sts	0x0D96, r1
    2b0a:	10 92 95 0d 	sts	0x0D95, r1
    
    nrk_high_ready_TCB = NULL;
    2b0e:	10 92 87 0d 	sts	0x0D87, r1
    2b12:	10 92 86 0d 	sts	0x0D86, r1
    nrk_high_ready_prio = 0; 
    2b16:	10 92 97 0d 	sts	0x0D97, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    2b1a:	10 92 94 0d 	sts	0x0D94, r1
    2b1e:	e5 e7       	ldi	r30, 0x75	; 117
    2b20:	fd e0       	ldi	r31, 0x0D	; 13

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    2b22:	8f ef       	ldi	r24, 0xFF	; 255
    2b24:	80 83       	st	Z, r24
    nrk_sem_list[i].value=-1;
    2b26:	82 83       	std	Z+2, r24	; 0x02
    nrk_sem_list[i].resource_ceiling=-1;
    2b28:	81 83       	std	Z+1, r24	; 0x01
    2b2a:	33 96       	adiw	r30, 0x03	; 3
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
    2b2c:	2d e0       	ldi	r18, 0x0D	; 13
    2b2e:	e4 38       	cpi	r30, 0x84	; 132
    2b30:	f2 07       	cpc	r31, r18
    2b32:	c1 f7       	brne	.-16     	; 0x2b24 <nrk_init+0x78>
    2b34:	e9 e7       	ldi	r30, 0x79	; 121
    2b36:	fc e0       	ldi	r31, 0x0C	; 12
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2b38:	93 e6       	ldi	r25, 0x63	; 99
        nrk_task_TCB[i].task_ID = -1; 
    2b3a:	8f ef       	ldi	r24, 0xFF	; 255
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2b3c:	92 83       	std	Z+2, r25	; 0x02
        nrk_task_TCB[i].task_ID = -1; 
    2b3e:	80 83       	st	Z, r24
    2b40:	bb 96       	adiw	r30, 0x2b	; 43
    //nrk_resource_count[i]=-1;
    //nrk_resource_value[i]=-1;
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
    2b42:	2d e0       	ldi	r18, 0x0D	; 13
    2b44:	eb 37       	cpi	r30, 0x7B	; 123
    2b46:	f2 07       	cpc	r31, r18
    2b48:	c9 f7       	brne	.-14     	; 0x2b3c <nrk_init+0x90>
    2b4a:	eb e9       	ldi	r30, 0x9B	; 155
    2b4c:	fd e0       	ldi	r31, 0x0D	; 13
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	01 c0       	rjmp	.+2      	; 0x2b56 <nrk_init+0xaa>
        nrk_task_TCB[i].task_ID = -1; 
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    2b54:	9a 01       	movw	r18, r20
    //nrk_resource_count[i]=-1;
    //nrk_resource_value[i]=-1;
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
    2b56:	a9 01       	movw	r20, r18
    2b58:	4f 5f       	subi	r20, 0xFF	; 255
    2b5a:	5f 4f       	sbci	r21, 0xFF	; 255
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    2b5c:	ca 01       	movw	r24, r20
    2b5e:	88 0f       	add	r24, r24
    2b60:	99 1f       	adc	r25, r25
    2b62:	88 0f       	add	r24, r24
    2b64:	99 1f       	adc	r25, r25
    2b66:	84 0f       	add	r24, r20
    2b68:	95 1f       	adc	r25, r21
    2b6a:	88 56       	subi	r24, 0x68	; 104
    2b6c:	92 4f       	sbci	r25, 0xF2	; 242
    2b6e:	91 83       	std	Z+1, r25	; 0x01
    2b70:	80 83       	st	Z, r24
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    2b72:	c9 01       	movw	r24, r18
    2b74:	88 0f       	add	r24, r24
    2b76:	99 1f       	adc	r25, r25
    2b78:	88 0f       	add	r24, r24
    2b7a:	99 1f       	adc	r25, r25
    2b7c:	82 0f       	add	r24, r18
    2b7e:	93 1f       	adc	r25, r19
    2b80:	88 56       	subi	r24, 0x68	; 104
    2b82:	92 4f       	sbci	r25, 0xF2	; 242
    2b84:	94 83       	std	Z+4, r25	; 0x04
    2b86:	83 83       	std	Z+3, r24	; 0x03
    2b88:	35 96       	adiw	r30, 0x05	; 5
        nrk_task_TCB[i].task_ID = -1; 
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    2b8a:	46 30       	cpi	r20, 0x06	; 6
    2b8c:	51 05       	cpc	r21, r1
    2b8e:	11 f7       	brne	.-60     	; 0x2b54 <nrk_init+0xa8>
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    2b90:	10 92 9a 0d 	sts	0x0D9A, r1
    2b94:	10 92 99 0d 	sts	0x0D99, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    2b98:	10 92 ba 0d 	sts	0x0DBA, r1
    2b9c:	10 92 b9 0d 	sts	0x0DB9, r1
	_head_node = NULL;
    2ba0:	10 92 8b 0d 	sts	0x0D8B, r1
    2ba4:	10 92 8a 0d 	sts	0x0D8A, r1
	_free_node = &_nrk_readyQ[0];
    2ba8:	88 e9       	ldi	r24, 0x98	; 152
    2baa:	9d e0       	ldi	r25, 0x0D	; 13
    2bac:	90 93 70 0c 	sts	0x0C70, r25
    2bb0:	80 93 6f 0c 	sts	0x0C6F, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    2bb4:	8e 01       	movw	r16, r28
    2bb6:	0f 5f       	subi	r16, 0xFF	; 255
    2bb8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bba:	c8 01       	movw	r24, r16
    2bbc:	6e e8       	ldi	r22, 0x8E	; 142
    2bbe:	73 e2       	ldi	r23, 0x23	; 35
    2bc0:	0e 94 aa 2a 	call	0x5554	; 0x5554 <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    2bc4:	c8 01       	movw	r24, r16
    2bc6:	66 e9       	ldi	r22, 0x96	; 150
    2bc8:	7b e0       	ldi	r23, 0x0B	; 11
    2bca:	40 e8       	ldi	r20, 0x80	; 128
    2bcc:	50 e0       	ldi	r21, 0x00	; 0
    2bce:	0e 94 ae 2a 	call	0x555c	; 0x555c <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    2bd2:	85 e5       	ldi	r24, 0x55	; 85
    2bd4:	80 93 96 0b 	sts	0x0B96, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    2bd8:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    2bda:	1c 86       	std	Y+12, r1	; 0x0c
    2bdc:	1d 86       	std	Y+13, r1	; 0x0d
    2bde:	1e 86       	std	Y+14, r1	; 0x0e
    2be0:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    2be2:	18 8a       	std	Y+16, r1	; 0x10
    2be4:	19 8a       	std	Y+17, r1	; 0x11
    2be6:	1a 8a       	std	Y+18, r1	; 0x12
    2be8:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    2bea:	1c 8a       	std	Y+20, r1	; 0x14
    2bec:	1d 8a       	std	Y+21, r1	; 0x15
    2bee:	1e 8a       	std	Y+22, r1	; 0x16
    2bf0:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    2bf2:	18 8e       	std	Y+24, r1	; 0x18
    2bf4:	19 8e       	std	Y+25, r1	; 0x19
    2bf6:	1a 8e       	std	Y+26, r1	; 0x1a
    2bf8:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    2bfa:	1c 8e       	std	Y+28, r1	; 0x1c
    2bfc:	1d 8e       	std	Y+29, r1	; 0x1d
    2bfe:	1e 8e       	std	Y+30, r1	; 0x1e
    2c00:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    2c02:	18 a2       	std	Y+32, r1	; 0x20
    2c04:	19 a2       	std	Y+33, r1	; 0x21
    2c06:	1a a2       	std	Y+34, r1	; 0x22
    2c08:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    2c0e:	92 e0       	ldi	r25, 0x02	; 2
    2c10:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    2c12:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    2c14:	c8 01       	movw	r24, r16
    2c16:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <nrk_activate_task>
	
}
    2c1a:	a3 96       	adiw	r28, 0x23	; 35
    2c1c:	0f b6       	in	r0, 0x3f	; 63
    2c1e:	f8 94       	cli
    2c20:	de bf       	out	0x3e, r29	; 62
    2c22:	0f be       	out	0x3f, r0	; 63
    2c24:	cd bf       	out	0x3d, r28	; 61
    2c26:	cf 91       	pop	r28
    2c28:	df 91       	pop	r29
    2c2a:	1f 91       	pop	r17
    2c2c:	0f 91       	pop	r16
    2c2e:	08 95       	ret

00002c30 <nrk_start>:




void nrk_start (void)
{
    2c30:	cf 92       	push	r12
    2c32:	df 92       	push	r13
    2c34:	ff 92       	push	r15
    2c36:	0f 93       	push	r16
    2c38:	1f 93       	push	r17
    2c3a:	df 93       	push	r29
    2c3c:	cf 93       	push	r28
    2c3e:	00 d0       	rcall	.+0      	; 0x2c40 <nrk_start+0x10>
    2c40:	cd b7       	in	r28, 0x3d	; 61
    2c42:	de b7       	in	r29, 0x3e	; 62
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
    2c44:	e9 e7       	ldi	r30, 0x79	; 121
    2c46:	ce 2e       	mov	r12, r30
    2c48:	ec e0       	ldi	r30, 0x0C	; 12
    2c4a:	de 2e       	mov	r13, r30
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    {
	task_ID = nrk_task_TCB[i].task_ID;
    2c4e:	f6 01       	movw	r30, r12
    2c50:	f0 80       	ld	r15, Z
	// only check activated tasks
	if(task_ID!=-1)
    2c52:	ff 2d       	mov	r31, r15
    2c54:	ff 3f       	cpi	r31, 0xFF	; 255
    2c56:	b1 f0       	breq	.+44     	; 0x2c84 <nrk_start+0x54>
    2c58:	09 e7       	ldi	r16, 0x79	; 121
    2c5a:	1c e0       	ldi	r17, 0x0C	; 12
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    2c5e:	92 17       	cp	r25, r18
    2c60:	61 f0       	breq	.+24     	; 0x2c7a <nrk_start+0x4a>
    2c62:	f8 01       	movw	r30, r16
    2c64:	80 81       	ld	r24, Z
    2c66:	f8 16       	cp	r15, r24
    2c68:	41 f4       	brne	.+16     	; 0x2c7a <nrk_start+0x4a>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    2c6a:	85 e0       	ldi	r24, 0x05	; 5
    2c6c:	6f 2d       	mov	r22, r15
    2c6e:	29 83       	std	Y+1, r18	; 0x01
    2c70:	9a 83       	std	Y+2, r25	; 0x02
    2c72:	0e 94 0c 18 	call	0x3018	; 0x3018 <nrk_kernel_error_add>
    2c76:	9a 81       	ldd	r25, Y+2	; 0x02
    2c78:	29 81       	ldd	r18, Y+1	; 0x01
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    2c7a:	2f 5f       	subi	r18, 0xFF	; 255
    2c7c:	05 5d       	subi	r16, 0xD5	; 213
    2c7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c80:	26 30       	cpi	r18, 0x06	; 6
    2c82:	69 f7       	brne	.-38     	; 0x2c5e <nrk_start+0x2e>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    2c84:	9f 5f       	subi	r25, 0xFF	; 255
    2c86:	2b e2       	ldi	r18, 0x2B	; 43
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	c2 0e       	add	r12, r18
    2c8c:	d3 1e       	adc	r13, r19
    2c8e:	96 30       	cpi	r25, 0x06	; 6
    2c90:	f1 f6       	brne	.-68     	; 0x2c4e <nrk_start+0x1e>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    2c92:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    2c96:	99 27       	eor	r25, r25
    2c98:	87 fd       	sbrc	r24, 7
    2c9a:	90 95       	com	r25
    2c9c:	2b e2       	ldi	r18, 0x2B	; 43
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	82 9f       	mul	r24, r18
    2ca2:	f0 01       	movw	r30, r0
    2ca4:	83 9f       	mul	r24, r19
    2ca6:	f0 0d       	add	r31, r0
    2ca8:	92 9f       	mul	r25, r18
    2caa:	f0 0d       	add	r31, r0
    2cac:	11 24       	eor	r1, r1
    2cae:	ef 58       	subi	r30, 0x8F	; 143
    2cb0:	f3 4f       	sbci	r31, 0xF3	; 243
    2cb2:	82 85       	ldd	r24, Z+10	; 0x0a
    2cb4:	80 93 97 0d 	sts	0x0D97, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    2cb8:	f0 93 96 0d 	sts	0x0D96, r31
    2cbc:	e0 93 95 0d 	sts	0x0D95, r30
    2cc0:	f0 93 87 0d 	sts	0x0D87, r31
    2cc4:	e0 93 86 0d 	sts	0x0D86, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    2cc8:	80 93 88 0d 	sts	0x0D88, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    2ccc:	0e 94 0e 2b 	call	0x561c	; 0x561c <nrk_target_start>
    nrk_stack_pointer_init(); 
    2cd0:	0e 94 f8 2a 	call	0x55f0	; 0x55f0 <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    2cd4:	0e 94 13 2b 	call	0x5626	; 0x5626 <nrk_start_high_ready_task>
    2cd8:	ff cf       	rjmp	.-2      	; 0x2cd8 <nrk_start+0xa8>

00002cda <nrk_TCB_init>:
    while(1);
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    2cda:	cf 92       	push	r12
    2cdc:	df 92       	push	r13
    2cde:	ef 92       	push	r14
    2ce0:	ff 92       	push	r15
    2ce2:	0f 93       	push	r16
    2ce4:	1f 93       	push	r17
    2ce6:	cf 93       	push	r28
    2ce8:	df 93       	push	r29
    2cea:	ec 01       	movw	r28, r24
    2cec:	8b 01       	movw	r16, r22
    2cee:	6a 01       	movw	r12, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    2cf0:	89 85       	ldd	r24, Y+9	; 0x09
    2cf2:	82 30       	cpi	r24, 0x02	; 2
    2cf4:	21 f0       	breq	.+8      	; 0x2cfe <nrk_TCB_init+0x24>
    	Task->task_ID=nrk_task_init_cnt;
    2cf6:	80 91 84 0d 	lds	r24, 0x0D84
    2cfa:	88 83       	st	Y, r24
    2cfc:	01 c0       	rjmp	.+2      	; 0x2d00 <nrk_TCB_init+0x26>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    2cfe:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    2d00:	80 91 84 0d 	lds	r24, 0x0D84
    2d04:	86 30       	cpi	r24, 0x06	; 6
    2d06:	20 f0       	brcs	.+8      	; 0x2d10 <nrk_TCB_init+0x36>
    2d08:	87 e0       	ldi	r24, 0x07	; 7
    2d0a:	60 e0       	ldi	r22, 0x00	; 0
    2d0c:	0e 94 0c 18 	call	0x3018	; 0x3018 <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    2d10:	89 85       	ldd	r24, Y+9	; 0x09
    2d12:	82 30       	cpi	r24, 0x02	; 2
    2d14:	29 f0       	breq	.+10     	; 0x2d20 <nrk_TCB_init+0x46>
    2d16:	80 91 84 0d 	lds	r24, 0x0D84
    2d1a:	8f 5f       	subi	r24, 0xFF	; 255
    2d1c:	80 93 84 0d 	sts	0x0D84, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    2d20:	80 91 84 0d 	lds	r24, 0x0D84
    2d24:	88 23       	and	r24, r24
    2d26:	19 f4       	brne	.+6      	; 0x2d2e <nrk_TCB_init+0x54>
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	80 93 84 0d 	sts	0x0D84, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    2d2e:	28 81       	ld	r18, Y
    2d30:	33 27       	eor	r19, r19
    2d32:	27 fd       	sbrc	r18, 7
    2d34:	30 95       	com	r19
    2d36:	8b e2       	ldi	r24, 0x2B	; 43
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	28 9f       	mul	r18, r24
    2d3c:	f0 01       	movw	r30, r0
    2d3e:	29 9f       	mul	r18, r25
    2d40:	f0 0d       	add	r31, r0
    2d42:	38 9f       	mul	r19, r24
    2d44:	f0 0d       	add	r31, r0
    2d46:	11 24       	eor	r1, r1
    2d48:	ef 58       	subi	r30, 0x8F	; 143
    2d4a:	f3 4f       	sbci	r31, 0xF3	; 243
    2d4c:	11 83       	std	Z+1, r17	; 0x01
    2d4e:	00 83       	st	Z, r16
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    2d50:	28 85       	ldd	r18, Y+8	; 0x08
    2d52:	22 87       	std	Z+10, r18	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    2d54:	28 81       	ld	r18, Y
    2d56:	33 27       	eor	r19, r19
    2d58:	27 fd       	sbrc	r18, 7
    2d5a:	30 95       	com	r19
    2d5c:	28 9f       	mul	r18, r24
    2d5e:	f0 01       	movw	r30, r0
    2d60:	29 9f       	mul	r18, r25
    2d62:	f0 0d       	add	r31, r0
    2d64:	38 9f       	mul	r19, r24
    2d66:	f0 0d       	add	r31, r0
    2d68:	11 24       	eor	r1, r1
    2d6a:	ef 58       	subi	r30, 0x8F	; 143
    2d6c:	f3 4f       	sbci	r31, 0xF3	; 243
    2d6e:	23 e0       	ldi	r18, 0x03	; 3
    2d70:	21 87       	std	Z+9, r18	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    2d72:	48 81       	ld	r20, Y
    2d74:	24 2f       	mov	r18, r20
    2d76:	33 27       	eor	r19, r19
    2d78:	27 fd       	sbrc	r18, 7
    2d7a:	30 95       	com	r19
    2d7c:	28 9f       	mul	r18, r24
    2d7e:	f0 01       	movw	r30, r0
    2d80:	29 9f       	mul	r18, r25
    2d82:	f0 0d       	add	r31, r0
    2d84:	38 9f       	mul	r19, r24
    2d86:	f0 0d       	add	r31, r0
    2d88:	11 24       	eor	r1, r1
    2d8a:	ef 58       	subi	r30, 0x8F	; 143
    2d8c:	f3 4f       	sbci	r31, 0xF3	; 243
    2d8e:	40 87       	std	Z+8, r20	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    2d90:	28 81       	ld	r18, Y
    2d92:	33 27       	eor	r19, r19
    2d94:	27 fd       	sbrc	r18, 7
    2d96:	30 95       	com	r19
    2d98:	28 9f       	mul	r18, r24
    2d9a:	80 01       	movw	r16, r0
    2d9c:	29 9f       	mul	r18, r25
    2d9e:	10 0d       	add	r17, r0
    2da0:	38 9f       	mul	r19, r24
    2da2:	10 0d       	add	r17, r0
    2da4:	11 24       	eor	r1, r1
    2da6:	0f 58       	subi	r16, 0x8F	; 143
    2da8:	13 4f       	sbci	r17, 0xF3	; 243
    2daa:	f8 01       	movw	r30, r16
    2dac:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
    2dae:	ce 01       	movw	r24, r28
    2db0:	0b 96       	adiw	r24, 0x0b	; 11
    2db2:	0e 94 07 23 	call	0x460e	; 0x460e <_nrk_time_to_ticks_long>
    2db6:	f8 01       	movw	r30, r16
    2db8:	61 a3       	std	Z+33, r22	; 0x21
    2dba:	72 a3       	std	Z+34, r23	; 0x22
    2dbc:	83 a3       	std	Z+35, r24	; 0x23
    2dbe:	94 a3       	std	Z+36, r25	; 0x24
    if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    2dc0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2dc2:	9c 85       	ldd	r25, Y+12	; 0x0c
    2dc4:	ad 85       	ldd	r26, Y+13	; 0x0d
    2dc6:	be 85       	ldd	r27, Y+14	; 0x0e
    2dc8:	88 33       	cpi	r24, 0x38	; 56
    2dca:	f9 e8       	ldi	r31, 0x89	; 137
    2dcc:	9f 07       	cpc	r25, r31
    2dce:	f1 e4       	ldi	r31, 0x41	; 65
    2dd0:	af 07       	cpc	r26, r31
    2dd2:	f0 e0       	ldi	r31, 0x00	; 0
    2dd4:	bf 07       	cpc	r27, r31
    2dd6:	20 f0       	brcs	.+8      	; 0x2de0 <nrk_TCB_init+0x106>
    2dd8:	86 e1       	ldi	r24, 0x16	; 22
    2dda:	68 81       	ld	r22, Y
    2ddc:	0e 94 0c 18 	call	0x3018	; 0x3018 <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
    2de0:	08 81       	ld	r16, Y
    2de2:	11 27       	eor	r17, r17
    2de4:	07 fd       	sbrc	r16, 7
    2de6:	10 95       	com	r17
    2de8:	ce 01       	movw	r24, r28
    2dea:	4b 96       	adiw	r24, 0x1b	; 27
    2dec:	0e 94 07 23 	call	0x460e	; 0x460e <_nrk_time_to_ticks_long>
    2df0:	fb e2       	ldi	r31, 0x2B	; 43
    2df2:	ef 2e       	mov	r14, r31
    2df4:	f1 2c       	mov	r15, r1
    2df6:	0e 9d       	mul	r16, r14
    2df8:	f0 01       	movw	r30, r0
    2dfa:	0f 9d       	mul	r16, r15
    2dfc:	f0 0d       	add	r31, r0
    2dfe:	1e 9d       	mul	r17, r14
    2e00:	f0 0d       	add	r31, r0
    2e02:	11 24       	eor	r1, r1
    2e04:	ef 58       	subi	r30, 0x8F	; 143
    2e06:	f3 4f       	sbci	r31, 0xF3	; 243
    2e08:	65 8b       	std	Z+21, r22	; 0x15
    2e0a:	76 8b       	std	Z+22, r23	; 0x16
    2e0c:	87 8b       	std	Z+23, r24	; 0x17
    2e0e:	90 8f       	std	Z+24, r25	; 0x18
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    2e10:	88 81       	ld	r24, Y
    2e12:	99 27       	eor	r25, r25
    2e14:	87 fd       	sbrc	r24, 7
    2e16:	90 95       	com	r25
    2e18:	8e 9d       	mul	r24, r14
    2e1a:	80 01       	movw	r16, r0
    2e1c:	8f 9d       	mul	r24, r15
    2e1e:	10 0d       	add	r17, r0
    2e20:	9e 9d       	mul	r25, r14
    2e22:	10 0d       	add	r17, r0
    2e24:	11 24       	eor	r1, r1
    2e26:	0f 58       	subi	r16, 0x8F	; 143
    2e28:	13 4f       	sbci	r17, 0xF3	; 243
    2e2a:	f8 01       	movw	r30, r16
    2e2c:	85 89       	ldd	r24, Z+21	; 0x15
    2e2e:	96 89       	ldd	r25, Z+22	; 0x16
    2e30:	a7 89       	ldd	r26, Z+23	; 0x17
    2e32:	b0 8d       	ldd	r27, Z+24	; 0x18
    2e34:	21 a1       	ldd	r18, Z+33	; 0x21
    2e36:	32 a1       	ldd	r19, Z+34	; 0x22
    2e38:	43 a1       	ldd	r20, Z+35	; 0x23
    2e3a:	54 a1       	ldd	r21, Z+36	; 0x24
    2e3c:	82 0f       	add	r24, r18
    2e3e:	93 1f       	adc	r25, r19
    2e40:	a4 1f       	adc	r26, r20
    2e42:	b5 1f       	adc	r27, r21
    2e44:	81 8f       	std	Z+25, r24	; 0x19
    2e46:	92 8f       	std	Z+26, r25	; 0x1a
    2e48:	a3 8f       	std	Z+27, r26	; 0x1b
    2e4a:	b4 8f       	std	Z+28, r27	; 0x1c
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
    2e4c:	ce 01       	movw	r24, r28
    2e4e:	43 96       	adiw	r24, 0x13	; 19
    2e50:	0e 94 07 23 	call	0x460e	; 0x460e <_nrk_time_to_ticks_long>
    2e54:	f8 01       	movw	r30, r16
    2e56:	65 a3       	std	Z+37, r22	; 0x25
    2e58:	76 a3       	std	Z+38, r23	; 0x26
    2e5a:	87 a3       	std	Z+39, r24	; 0x27
    2e5c:	90 a7       	std	Z+40, r25	; 0x28
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    2e5e:	88 81       	ld	r24, Y
    2e60:	99 27       	eor	r25, r25
    2e62:	87 fd       	sbrc	r24, 7
    2e64:	90 95       	com	r25
    2e66:	8e 9d       	mul	r24, r14
    2e68:	f0 01       	movw	r30, r0
    2e6a:	8f 9d       	mul	r24, r15
    2e6c:	f0 0d       	add	r31, r0
    2e6e:	9e 9d       	mul	r25, r14
    2e70:	f0 0d       	add	r31, r0
    2e72:	11 24       	eor	r1, r1
    2e74:	ef 58       	subi	r30, 0x8F	; 143
    2e76:	f3 4f       	sbci	r31, 0xF3	; 243
    2e78:	85 a1       	ldd	r24, Z+37	; 0x25
    2e7a:	96 a1       	ldd	r25, Z+38	; 0x26
    2e7c:	a7 a1       	ldd	r26, Z+39	; 0x27
    2e7e:	b0 a5       	ldd	r27, Z+40	; 0x28
    2e80:	85 8f       	std	Z+29, r24	; 0x1d
    2e82:	96 8f       	std	Z+30, r25	; 0x1e
    2e84:	a7 8f       	std	Z+31, r26	; 0x1f
    2e86:	b0 a3       	std	Z+32, r27	; 0x20
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    2e88:	81 e0       	ldi	r24, 0x01	; 1
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	92 a7       	std	Z+42, r25	; 0x2a
    2e8e:	81 a7       	std	Z+41, r24	; 0x29
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    2e90:	d3 82       	std	Z+3, r13	; 0x03
    2e92:	c2 82       	std	Z+2, r12	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    2e98:	df 91       	pop	r29
    2e9a:	cf 91       	pop	r28
    2e9c:	1f 91       	pop	r17
    2e9e:	0f 91       	pop	r16
    2ea0:	ff 90       	pop	r15
    2ea2:	ef 90       	pop	r14
    2ea4:	df 90       	pop	r13
    2ea6:	cf 90       	pop	r12
    2ea8:	08 95       	ret

00002eaa <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    2eaa:	0e 94 b4 23 	call	0x4768	; 0x4768 <_nrk_scheduler>

  	return;
}
    2eae:	08 95       	ret

00002eb0 <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    2eb0:	85 e6       	ldi	r24, 0x65	; 101
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	08 95       	ret

00002eb6 <_nrk_errno_set>:
void blink_morse_code_error( uint8_t number );


void _nrk_errno_set (NRK_ERRNO error_code)
{
    nrk_cur_task_TCB->errno = error_code;
    2eb6:	e0 91 95 0d 	lds	r30, 0x0D95
    2eba:	f0 91 96 0d 	lds	r31, 0x0D96
    2ebe:	84 87       	std	Z+12, r24	; 0x0c
}
    2ec0:	08 95       	ret

00002ec2 <nrk_errno_get>:

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    2ec2:	e0 91 95 0d 	lds	r30, 0x0D95
    2ec6:	f0 91 96 0d 	lds	r31, 0x0D96
}
    2eca:	84 85       	ldd	r24, Z+12	; 0x0c
    2ecc:	08 95       	ret

00002ece <nrk_error_get>:
}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    if (error_num == 0)
    2ece:	20 91 95 0b 	lds	r18, 0x0B95
    2ed2:	22 23       	and	r18, r18
    2ed4:	41 f0       	breq	.+16     	; 0x2ee6 <nrk_error_get+0x18>
        return 0;
    *code = error_num;
    2ed6:	fb 01       	movw	r30, r22
    2ed8:	20 83       	st	Z, r18
    *task_id = error_task;
    2eda:	20 91 70 05 	lds	r18, 0x0570
    2ede:	fc 01       	movw	r30, r24
    2ee0:	20 83       	st	Z, r18
    return 1;
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	08 95       	ret


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    if (error_num == 0)
        return 0;
    2ee6:	80 e0       	ldi	r24, 0x00	; 0
    *code = error_num;
    *task_id = error_task;
    return 1;
}
    2ee8:	08 95       	ret

00002eea <nrk_error_print>:

int8_t nrk_error_print ()
{
    int8_t t=0,i=0;
    if (error_num == 0)
    2eea:	80 91 95 0b 	lds	r24, 0x0B95
    2eee:	88 23       	and	r24, r24
    2ef0:	09 f4       	brne	.+2      	; 0x2ef4 <nrk_error_print+0xa>
    2ef2:	90 c0       	rjmp	.+288    	; 0x3014 <nrk_error_print+0x12a>
    nrk_watchdog_disable();
#endif
#endif

#ifndef NRK_REBOOT_ON_ERROR
    nrk_int_disable ();
    2ef4:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <nrk_int_disable>
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    2ef8:	87 ed       	ldi	r24, 0xD7	; 215
    2efa:	94 e0       	ldi	r25, 0x04	; 4
    2efc:	0e 94 0a 10 	call	0x2014	; 0x2014 <nrk_kprintf>
        printf ("%d", error_task);
    2f00:	00 d0       	rcall	.+0      	; 0x2f02 <nrk_error_print+0x18>
    2f02:	00 d0       	rcall	.+0      	; 0x2f04 <nrk_error_print+0x1a>
    2f04:	ed b7       	in	r30, 0x3d	; 61
    2f06:	fe b7       	in	r31, 0x3e	; 62
    2f08:	31 96       	adiw	r30, 0x01	; 1
    2f0a:	8c e3       	ldi	r24, 0x3C	; 60
    2f0c:	93 e0       	ldi	r25, 0x03	; 3
    2f0e:	ad b7       	in	r26, 0x3d	; 61
    2f10:	be b7       	in	r27, 0x3e	; 62
    2f12:	12 96       	adiw	r26, 0x02	; 2
    2f14:	9c 93       	st	X, r25
    2f16:	8e 93       	st	-X, r24
    2f18:	11 97       	sbiw	r26, 0x01	; 1
    2f1a:	80 91 70 05 	lds	r24, 0x0570
    2f1e:	82 83       	std	Z+2, r24	; 0x02
    2f20:	13 82       	std	Z+3, r1	; 0x03
    2f22:	0e 94 b4 34 	call	0x6968	; 0x6968 <printf>
        nrk_kprintf (PSTR ("): "));
    2f26:	0f 90       	pop	r0
    2f28:	0f 90       	pop	r0
    2f2a:	0f 90       	pop	r0
    2f2c:	0f 90       	pop	r0
    2f2e:	83 ed       	ldi	r24, 0xD3	; 211
    2f30:	94 e0       	ldi	r25, 0x04	; 4
    2f32:	0e 94 0a 10 	call	0x2014	; 0x2014 <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    2f36:	80 91 95 0b 	lds	r24, 0x0B95
    2f3a:	88 31       	cpi	r24, 0x18	; 24
    2f3c:	10 f0       	brcs	.+4      	; 0x2f42 <nrk_error_print+0x58>
            error_num = NRK_UNKOWN;
    2f3e:	10 92 95 0b 	sts	0x0B95, r1
        switch (error_num)
    2f42:	80 91 95 0b 	lds	r24, 0x0B95
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	01 97       	sbiw	r24, 0x01	; 1
    2f4a:	86 31       	cpi	r24, 0x16	; 22
    2f4c:	91 05       	cpc	r25, r1
    2f4e:	08 f0       	brcs	.+2      	; 0x2f52 <nrk_error_print+0x68>
    2f50:	4b c0       	rjmp	.+150    	; 0x2fe8 <nrk_error_print+0xfe>
    2f52:	80 57       	subi	r24, 0x70	; 112
    2f54:	9f 4f       	sbci	r25, 0xFF	; 255
    2f56:	fc 01       	movw	r30, r24
    2f58:	ee 0f       	add	r30, r30
    2f5a:	ff 1f       	adc	r31, r31
    2f5c:	05 90       	lpm	r0, Z+
    2f5e:	f4 91       	lpm	r31, Z+
    2f60:	e0 2d       	mov	r30, r0
    2f62:	09 94       	ijmp
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    2f64:	87 e9       	ldi	r24, 0x97	; 151
    2f66:	94 e0       	ldi	r25, 0x04	; 4
    2f68:	41 c0       	rjmp	.+130    	; 0x2fec <nrk_error_print+0x102>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    2f6a:	80 e7       	ldi	r24, 0x70	; 112
    2f6c:	94 e0       	ldi	r25, 0x04	; 4
    2f6e:	3e c0       	rjmp	.+124    	; 0x2fec <nrk_error_print+0x102>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    2f70:	8c e5       	ldi	r24, 0x5C	; 92
    2f72:	94 e0       	ldi	r25, 0x04	; 4
    2f74:	3b c0       	rjmp	.+118    	; 0x2fec <nrk_error_print+0x102>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    2f76:	86 e4       	ldi	r24, 0x46	; 70
    2f78:	94 e0       	ldi	r25, 0x04	; 4
    2f7a:	38 c0       	rjmp	.+112    	; 0x2fec <nrk_error_print+0x102>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    2f7c:	8b e2       	ldi	r24, 0x2B	; 43
    2f7e:	94 e0       	ldi	r25, 0x04	; 4
    2f80:	35 c0       	rjmp	.+106    	; 0x2fec <nrk_error_print+0x102>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    2f82:	85 e1       	ldi	r24, 0x15	; 21
    2f84:	94 e0       	ldi	r25, 0x04	; 4
    2f86:	32 c0       	rjmp	.+100    	; 0x2fec <nrk_error_print+0x102>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    2f88:	8d ef       	ldi	r24, 0xFD	; 253
    2f8a:	93 e0       	ldi	r25, 0x03	; 3
    2f8c:	2f c0       	rjmp	.+94     	; 0x2fec <nrk_error_print+0x102>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    2f8e:	8a ee       	ldi	r24, 0xEA	; 234
    2f90:	93 e0       	ldi	r25, 0x03	; 3
    2f92:	2c c0       	rjmp	.+88     	; 0x2fec <nrk_error_print+0x102>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    2f94:	87 ed       	ldi	r24, 0xD7	; 215
    2f96:	93 e0       	ldi	r25, 0x03	; 3
    2f98:	29 c0       	rjmp	.+82     	; 0x2fec <nrk_error_print+0x102>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    2f9a:	89 eb       	ldi	r24, 0xB9	; 185
    2f9c:	93 e0       	ldi	r25, 0x03	; 3
    2f9e:	26 c0       	rjmp	.+76     	; 0x2fec <nrk_error_print+0x102>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    2fa0:	84 e9       	ldi	r24, 0x94	; 148
    2fa2:	93 e0       	ldi	r25, 0x03	; 3
    2fa4:	23 c0       	rjmp	.+70     	; 0x2fec <nrk_error_print+0x102>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    2fa6:	88 e8       	ldi	r24, 0x88	; 136
    2fa8:	93 e0       	ldi	r25, 0x03	; 3
    2faa:	20 c0       	rjmp	.+64     	; 0x2fec <nrk_error_print+0x102>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    2fac:	8d e6       	ldi	r24, 0x6D	; 109
    2fae:	93 e0       	ldi	r25, 0x03	; 3
    2fb0:	1d c0       	rjmp	.+58     	; 0x2fec <nrk_error_print+0x102>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    2fb2:	8e e5       	ldi	r24, 0x5E	; 94
    2fb4:	93 e0       	ldi	r25, 0x03	; 3
    2fb6:	1a c0       	rjmp	.+52     	; 0x2fec <nrk_error_print+0x102>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    2fb8:	8a e4       	ldi	r24, 0x4A	; 74
    2fba:	93 e0       	ldi	r25, 0x03	; 3
    2fbc:	17 c0       	rjmp	.+46     	; 0x2fec <nrk_error_print+0x102>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    2fbe:	89 e3       	ldi	r24, 0x39	; 57
    2fc0:	93 e0       	ldi	r25, 0x03	; 3
    2fc2:	14 c0       	rjmp	.+40     	; 0x2fec <nrk_error_print+0x102>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    2fc4:	85 e2       	ldi	r24, 0x25	; 37
    2fc6:	93 e0       	ldi	r25, 0x03	; 3
    2fc8:	11 c0       	rjmp	.+34     	; 0x2fec <nrk_error_print+0x102>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    2fca:	85 e0       	ldi	r24, 0x05	; 5
    2fcc:	93 e0       	ldi	r25, 0x03	; 3
    2fce:	0e c0       	rjmp	.+28     	; 0x2fec <nrk_error_print+0x102>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    2fd0:	8d ee       	ldi	r24, 0xED	; 237
    2fd2:	92 e0       	ldi	r25, 0x02	; 2
    2fd4:	0b c0       	rjmp	.+22     	; 0x2fec <nrk_error_print+0x102>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    2fd6:	82 ed       	ldi	r24, 0xD2	; 210
    2fd8:	92 e0       	ldi	r25, 0x02	; 2
    2fda:	08 c0       	rjmp	.+16     	; 0x2fec <nrk_error_print+0x102>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    2fdc:	81 ec       	ldi	r24, 0xC1	; 193
    2fde:	92 e0       	ldi	r25, 0x02	; 2
    2fe0:	05 c0       	rjmp	.+10     	; 0x2fec <nrk_error_print+0x102>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    2fe2:	82 eb       	ldi	r24, 0xB2	; 178
    2fe4:	92 e0       	ldi	r25, 0x02	; 2
    2fe6:	02 c0       	rjmp	.+4      	; 0x2fec <nrk_error_print+0x102>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    2fe8:	8b ea       	ldi	r24, 0xAB	; 171
    2fea:	92 e0       	ldi	r25, 0x02	; 2
    2fec:	0e 94 0a 10 	call	0x2014	; 0x2014 <nrk_kprintf>
        }
        putchar ('\r');
    2ff0:	60 91 c6 0d 	lds	r22, 0x0DC6
    2ff4:	70 91 c7 0d 	lds	r23, 0x0DC7
    2ff8:	8d e0       	ldi	r24, 0x0D	; 13
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	0e 94 88 34 	call	0x6910	; 0x6910 <fputc>
        putchar ('\n');
    3000:	60 91 c6 0d 	lds	r22, 0x0DC6
    3004:	70 91 c7 0d 	lds	r23, 0x0DC7
    3008:	8a e0       	ldi	r24, 0x0A	; 10
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	0e 94 88 34 	call	0x6910	; 0x6910 <fputc>
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    3010:	10 92 95 0b 	sts	0x0B95, r1
    return t;
}
    3014:	80 e0       	ldi	r24, 0x00	; 0
    3016:	08 95       	ret

00003018 <nrk_kernel_error_add>:
#endif  /*  */
}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    error_num = n;
    3018:	80 93 95 0b 	sts	0x0B95, r24
    error_task = task;
    301c:	60 93 70 05 	sts	0x0570, r22
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    3020:	0e 94 75 17 	call	0x2eea	; 0x2eea <nrk_error_print>
#endif  /*  */




}
    3024:	08 95       	ret

00003026 <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    3026:	80 93 95 0b 	sts	0x0B95, r24
    error_task = nrk_cur_task_TCB->task_ID;
    302a:	e0 91 95 0d 	lds	r30, 0x0D95
    302e:	f0 91 96 0d 	lds	r31, 0x0D96
    3032:	80 85       	ldd	r24, Z+8	; 0x08
    3034:	80 93 70 05 	sts	0x0570, r24
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    3038:	0e 94 75 17 	call	0x2eea	; 0x2eea <nrk_error_print>
#endif  /*  */
}
    303c:	08 95       	ret

0000303e <pause>:
    }

}

void pause()
{
    303e:	df 93       	push	r29
    3040:	cf 93       	push	r28
    3042:	0f 92       	push	r0
    3044:	cd b7       	in	r28, 0x3d	; 61
    3046:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    3048:	19 82       	std	Y+1, r1	; 0x01
    304a:	07 c0       	rjmp	.+14     	; 0x305a <pause+0x1c>
        nrk_spin_wait_us (2000);
    304c:	80 ed       	ldi	r24, 0xD0	; 208
    304e:	97 e0       	ldi	r25, 0x07	; 7
    3050:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    3054:	89 81       	ldd	r24, Y+1	; 0x01
    3056:	8f 5f       	subi	r24, 0xFF	; 255
    3058:	89 83       	std	Y+1, r24	; 0x01
    305a:	89 81       	ldd	r24, Y+1	; 0x01
    305c:	84 36       	cpi	r24, 0x64	; 100
    305e:	b0 f3       	brcs	.-20     	; 0x304c <pause+0xe>
        nrk_spin_wait_us (2000);
}
    3060:	0f 90       	pop	r0
    3062:	cf 91       	pop	r28
    3064:	df 91       	pop	r29
    3066:	08 95       	ret

00003068 <blink_dot>:
    pause();
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	0e 94 1c 14 	call	0x2838	; 0x2838 <nrk_led_set>
    pause();
    3070:	0e 94 1f 18 	call	0x303e	; 0x303e <pause>
    nrk_led_clr(GREEN_LED);
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	0e 94 04 14 	call	0x2808	; 0x2808 <nrk_led_clr>
    pause();
    307c:	0e 94 1f 18 	call	0x303e	; 0x303e <pause>
}
    3080:	08 95       	ret

00003082 <blink_dash>:
    return t;
}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    3082:	81 e0       	ldi	r24, 0x01	; 1
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	0e 94 1c 14 	call	0x2838	; 0x2838 <nrk_led_set>
    pause();
    308a:	0e 94 1f 18 	call	0x303e	; 0x303e <pause>
    pause();
    308e:	0e 94 1f 18 	call	0x303e	; 0x303e <pause>
    pause();
    3092:	0e 94 1f 18 	call	0x303e	; 0x303e <pause>
    nrk_led_clr(GREEN_LED);
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	0e 94 04 14 	call	0x2808	; 0x2808 <nrk_led_clr>
    pause();
    309e:	0e 94 1f 18 	call	0x303e	; 0x303e <pause>
}
    30a2:	08 95       	ret

000030a4 <blink_morse_code_error>:
    pause();
}


void blink_morse_code_error( uint8_t number )
{
    30a4:	ff 92       	push	r15
    30a6:	0f 93       	push	r16
    30a8:	1f 93       	push	r17
    30aa:	df 93       	push	r29
    30ac:	cf 93       	push	r28
    30ae:	00 d0       	rcall	.+0      	; 0x30b0 <blink_morse_code_error+0xc>
    30b0:	0f 92       	push	r0
    30b2:	cd b7       	in	r28, 0x3d	; 61
    30b4:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    30b6:	00 d0       	rcall	.+0      	; 0x30b8 <blink_morse_code_error+0x14>
    30b8:	00 d0       	rcall	.+0      	; 0x30ba <blink_morse_code_error+0x16>
    30ba:	00 d0       	rcall	.+0      	; 0x30bc <blink_morse_code_error+0x18>
    30bc:	ed b7       	in	r30, 0x3d	; 61
    30be:	fe b7       	in	r31, 0x3e	; 62
    30c0:	31 96       	adiw	r30, 0x01	; 1
    30c2:	8e 01       	movw	r16, r28
    30c4:	0f 5f       	subi	r16, 0xFF	; 255
    30c6:	1f 4f       	sbci	r17, 0xFF	; 255
    30c8:	ad b7       	in	r26, 0x3d	; 61
    30ca:	be b7       	in	r27, 0x3e	; 62
    30cc:	12 96       	adiw	r26, 0x02	; 2
    30ce:	1c 93       	st	X, r17
    30d0:	0e 93       	st	-X, r16
    30d2:	11 97       	sbiw	r26, 0x01	; 1
    30d4:	2c e3       	ldi	r18, 0x3C	; 60
    30d6:	33 e0       	ldi	r19, 0x03	; 3
    30d8:	33 83       	std	Z+3, r19	; 0x03
    30da:	22 83       	std	Z+2, r18	; 0x02
    30dc:	84 83       	std	Z+4, r24	; 0x04
    30de:	15 82       	std	Z+5, r1	; 0x05
    30e0:	0e 94 04 35 	call	0x6a08	; 0x6a08 <sprintf>

    for(i=0; i<strlen(str); i++ )
    30e4:	ed b7       	in	r30, 0x3d	; 61
    30e6:	fe b7       	in	r31, 0x3e	; 62
    30e8:	36 96       	adiw	r30, 0x06	; 6
    30ea:	0f b6       	in	r0, 0x3f	; 63
    30ec:	f8 94       	cli
    30ee:	fe bf       	out	0x3e, r31	; 62
    30f0:	0f be       	out	0x3f, r0	; 63
    30f2:	ed bf       	out	0x3d, r30	; 61
    30f4:	ff 24       	eor	r15, r15
    30f6:	72 c0       	rjmp	.+228    	; 0x31dc <blink_morse_code_error+0x138>
    {
        switch( str[i])
    30f8:	80 0f       	add	r24, r16
    30fa:	91 1f       	adc	r25, r17
    30fc:	dc 01       	movw	r26, r24
    30fe:	8c 91       	ld	r24, X
    3100:	84 33       	cpi	r24, 0x34	; 52
    3102:	d1 f1       	breq	.+116    	; 0x3178 <blink_morse_code_error+0xd4>
    3104:	85 33       	cpi	r24, 0x35	; 53
    3106:	70 f4       	brcc	.+28     	; 0x3124 <blink_morse_code_error+0x80>
    3108:	81 33       	cpi	r24, 0x31	; 49
    310a:	f9 f0       	breq	.+62     	; 0x314a <blink_morse_code_error+0xa6>
    310c:	82 33       	cpi	r24, 0x32	; 50
    310e:	20 f4       	brcc	.+8      	; 0x3118 <blink_morse_code_error+0x74>
    3110:	80 33       	cpi	r24, 0x30	; 48
    3112:	09 f0       	breq	.+2      	; 0x3116 <blink_morse_code_error+0x72>
    3114:	5c c0       	rjmp	.+184    	; 0x31ce <blink_morse_code_error+0x12a>
    3116:	16 c0       	rjmp	.+44     	; 0x3144 <blink_morse_code_error+0xa0>
    3118:	82 33       	cpi	r24, 0x32	; 50
    311a:	11 f1       	breq	.+68     	; 0x3160 <blink_morse_code_error+0xbc>
    311c:	83 33       	cpi	r24, 0x33	; 51
    311e:	09 f0       	breq	.+2      	; 0x3122 <blink_morse_code_error+0x7e>
    3120:	56 c0       	rjmp	.+172    	; 0x31ce <blink_morse_code_error+0x12a>
    3122:	23 c0       	rjmp	.+70     	; 0x316a <blink_morse_code_error+0xc6>
    3124:	87 33       	cpi	r24, 0x37	; 55
    3126:	c9 f1       	breq	.+114    	; 0x319a <blink_morse_code_error+0xf6>
    3128:	88 33       	cpi	r24, 0x38	; 56
    312a:	30 f4       	brcc	.+12     	; 0x3138 <blink_morse_code_error+0x94>
    312c:	85 33       	cpi	r24, 0x35	; 53
    312e:	69 f1       	breq	.+90     	; 0x318a <blink_morse_code_error+0xe6>
    3130:	86 33       	cpi	r24, 0x36	; 54
    3132:	09 f0       	breq	.+2      	; 0x3136 <blink_morse_code_error+0x92>
    3134:	4c c0       	rjmp	.+152    	; 0x31ce <blink_morse_code_error+0x12a>
    3136:	2c c0       	rjmp	.+88     	; 0x3190 <blink_morse_code_error+0xec>
    3138:	88 33       	cpi	r24, 0x38	; 56
    313a:	b1 f1       	breq	.+108    	; 0x31a8 <blink_morse_code_error+0x104>
    313c:	89 33       	cpi	r24, 0x39	; 57
    313e:	09 f0       	breq	.+2      	; 0x3142 <blink_morse_code_error+0x9e>
    3140:	46 c0       	rjmp	.+140    	; 0x31ce <blink_morse_code_error+0x12a>
    3142:	3b c0       	rjmp	.+118    	; 0x31ba <blink_morse_code_error+0x116>
        {
        case '0':
            blink_dash();
    3144:	0e 94 41 18 	call	0x3082	; 0x3082 <blink_dash>
    3148:	02 c0       	rjmp	.+4      	; 0x314e <blink_morse_code_error+0xaa>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    314a:	0e 94 34 18 	call	0x3068	; 0x3068 <blink_dot>
            blink_dash();
    314e:	0e 94 41 18 	call	0x3082	; 0x3082 <blink_dash>
            blink_dash();
    3152:	0e 94 41 18 	call	0x3082	; 0x3082 <blink_dash>
            blink_dash();
    3156:	0e 94 41 18 	call	0x3082	; 0x3082 <blink_dash>
            blink_dash();
    315a:	0e 94 41 18 	call	0x3082	; 0x3082 <blink_dash>
            break;
    315e:	37 c0       	rjmp	.+110    	; 0x31ce <blink_morse_code_error+0x12a>
        case '2':
            blink_dot();
    3160:	0e 94 34 18 	call	0x3068	; 0x3068 <blink_dot>
            blink_dot();
    3164:	0e 94 34 18 	call	0x3068	; 0x3068 <blink_dot>
    3168:	f4 cf       	rjmp	.-24     	; 0x3152 <blink_morse_code_error+0xae>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    316a:	0e 94 34 18 	call	0x3068	; 0x3068 <blink_dot>
            blink_dot();
    316e:	0e 94 34 18 	call	0x3068	; 0x3068 <blink_dot>
            blink_dot();
    3172:	0e 94 34 18 	call	0x3068	; 0x3068 <blink_dot>
    3176:	ef cf       	rjmp	.-34     	; 0x3156 <blink_morse_code_error+0xb2>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    3178:	0e 94 34 18 	call	0x3068	; 0x3068 <blink_dot>
            blink_dot();
    317c:	0e 94 34 18 	call	0x3068	; 0x3068 <blink_dot>
            blink_dot();
    3180:	0e 94 34 18 	call	0x3068	; 0x3068 <blink_dot>
            blink_dot();
    3184:	0e 94 34 18 	call	0x3068	; 0x3068 <blink_dot>
    3188:	e8 cf       	rjmp	.-48     	; 0x315a <blink_morse_code_error+0xb6>
            blink_dash();
            break;
        case '5':
            blink_dot();
    318a:	0e 94 34 18 	call	0x3068	; 0x3068 <blink_dot>
    318e:	02 c0       	rjmp	.+4      	; 0x3194 <blink_morse_code_error+0xf0>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    3190:	0e 94 41 18 	call	0x3082	; 0x3082 <blink_dash>
            blink_dot();
    3194:	0e 94 34 18 	call	0x3068	; 0x3068 <blink_dot>
    3198:	04 c0       	rjmp	.+8      	; 0x31a2 <blink_morse_code_error+0xfe>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    319a:	0e 94 41 18 	call	0x3082	; 0x3082 <blink_dash>
            blink_dash();
    319e:	0e 94 41 18 	call	0x3082	; 0x3082 <blink_dash>
            blink_dot();
    31a2:	0e 94 34 18 	call	0x3068	; 0x3068 <blink_dot>
    31a6:	06 c0       	rjmp	.+12     	; 0x31b4 <blink_morse_code_error+0x110>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    31a8:	0e 94 41 18 	call	0x3082	; 0x3082 <blink_dash>
            blink_dash();
    31ac:	0e 94 41 18 	call	0x3082	; 0x3082 <blink_dash>
            blink_dash();
    31b0:	0e 94 41 18 	call	0x3082	; 0x3082 <blink_dash>
            blink_dot();
    31b4:	0e 94 34 18 	call	0x3068	; 0x3068 <blink_dot>
    31b8:	08 c0       	rjmp	.+16     	; 0x31ca <blink_morse_code_error+0x126>
            blink_dot();
            break;
        case '9':
            blink_dash();
    31ba:	0e 94 41 18 	call	0x3082	; 0x3082 <blink_dash>
            blink_dash();
    31be:	0e 94 41 18 	call	0x3082	; 0x3082 <blink_dash>
            blink_dash();
    31c2:	0e 94 41 18 	call	0x3082	; 0x3082 <blink_dash>
            blink_dash();
    31c6:	0e 94 41 18 	call	0x3082	; 0x3082 <blink_dash>
            blink_dot();
    31ca:	0e 94 34 18 	call	0x3068	; 0x3068 <blink_dot>
            break;
        }
        pause();
    31ce:	0e 94 1f 18 	call	0x303e	; 0x303e <pause>
        pause();
    31d2:	0e 94 1f 18 	call	0x303e	; 0x303e <pause>
        pause();
    31d6:	0e 94 1f 18 	call	0x303e	; 0x303e <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    31da:	f3 94       	inc	r15
    31dc:	f8 01       	movw	r30, r16
    31de:	01 90       	ld	r0, Z+
    31e0:	00 20       	and	r0, r0
    31e2:	e9 f7       	brne	.-6      	; 0x31de <blink_morse_code_error+0x13a>
    31e4:	31 97       	sbiw	r30, 0x01	; 1
    31e6:	e0 1b       	sub	r30, r16
    31e8:	f1 0b       	sbc	r31, r17
    31ea:	8f 2d       	mov	r24, r15
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	8e 17       	cp	r24, r30
    31f0:	9f 07       	cpc	r25, r31
    31f2:	08 f4       	brcc	.+2      	; 0x31f6 <blink_morse_code_error+0x152>
    31f4:	81 cf       	rjmp	.-254    	; 0x30f8 <blink_morse_code_error+0x54>
        pause();
        pause();
        pause();
    }

}
    31f6:	0f 90       	pop	r0
    31f8:	0f 90       	pop	r0
    31fa:	0f 90       	pop	r0
    31fc:	cf 91       	pop	r28
    31fe:	df 91       	pop	r29
    3200:	1f 91       	pop	r17
    3202:	0f 91       	pop	r16
    3204:	ff 90       	pop	r15
    3206:	08 95       	ret

00003208 <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    3208:	4f 92       	push	r4
    320a:	5f 92       	push	r5
    320c:	6f 92       	push	r6
    320e:	7f 92       	push	r7
    3210:	8f 92       	push	r8
    3212:	9f 92       	push	r9
    3214:	af 92       	push	r10
    3216:	bf 92       	push	r11
    3218:	cf 92       	push	r12
    321a:	df 92       	push	r13
    321c:	ef 92       	push	r14
    321e:	ff 92       	push	r15
    3220:	0f 93       	push	r16
    3222:	1f 93       	push	r17
    3224:	cf 93       	push	r28
    3226:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    3228:	83 ee       	ldi	r24, 0xE3	; 227
    322a:	94 e0       	ldi	r25, 0x04	; 4
    322c:	0e 94 0a 10 	call	0x2014	; 0x2014 <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    3230:	00 d0       	rcall	.+0      	; 0x3232 <dump_stack_info+0x2a>
    3232:	00 d0       	rcall	.+0      	; 0x3234 <dump_stack_info+0x2c>
    3234:	8f e3       	ldi	r24, 0x3F	; 63
    3236:	93 e0       	ldi	r25, 0x03	; 3
    3238:	ad b7       	in	r26, 0x3d	; 61
    323a:	be b7       	in	r27, 0x3e	; 62
    323c:	12 96       	adiw	r26, 0x02	; 2
    323e:	9c 93       	st	X, r25
    3240:	8e 93       	st	-X, r24
    3242:	11 97       	sbiw	r26, 0x01	; 1
    3244:	e0 91 95 0d 	lds	r30, 0x0D95
    3248:	f0 91 96 0d 	lds	r31, 0x0D96
    324c:	80 85       	ldd	r24, Z+8	; 0x08
    324e:	99 27       	eor	r25, r25
    3250:	87 fd       	sbrc	r24, 7
    3252:	90 95       	com	r25
    3254:	14 96       	adiw	r26, 0x04	; 4
    3256:	9c 93       	st	X, r25
    3258:	8e 93       	st	-X, r24
    325a:	13 97       	sbiw	r26, 0x03	; 3
    325c:	0e 94 b4 34 	call	0x6968	; 0x6968 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    3260:	e0 91 95 0d 	lds	r30, 0x0D95
    3264:	f0 91 96 0d 	lds	r31, 0x0D96
    3268:	c2 81       	ldd	r28, Z+2	; 0x02
    326a:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    326c:	88 e4       	ldi	r24, 0x48	; 72
    326e:	93 e0       	ldi	r25, 0x03	; 3
    3270:	ed b7       	in	r30, 0x3d	; 61
    3272:	fe b7       	in	r31, 0x3e	; 62
    3274:	92 83       	std	Z+2, r25	; 0x02
    3276:	81 83       	std	Z+1, r24	; 0x01
    3278:	d4 83       	std	Z+4, r29	; 0x04
    327a:	c3 83       	std	Z+3, r28	; 0x03
    327c:	0e 94 b4 34 	call	0x6968	; 0x6968 <printf>
    printf( "canary = %x ",*stkc );
    3280:	ed b7       	in	r30, 0x3d	; 61
    3282:	fe b7       	in	r31, 0x3e	; 62
    3284:	31 96       	adiw	r30, 0x01	; 1
    3286:	45 e5       	ldi	r20, 0x55	; 85
    3288:	e4 2e       	mov	r14, r20
    328a:	43 e0       	ldi	r20, 0x03	; 3
    328c:	f4 2e       	mov	r15, r20
    328e:	ad b7       	in	r26, 0x3d	; 61
    3290:	be b7       	in	r27, 0x3e	; 62
    3292:	12 96       	adiw	r26, 0x02	; 2
    3294:	fc 92       	st	X, r15
    3296:	ee 92       	st	-X, r14
    3298:	11 97       	sbiw	r26, 0x01	; 1
    329a:	88 81       	ld	r24, Y
    329c:	82 83       	std	Z+2, r24	; 0x02
    329e:	13 82       	std	Z+3, r1	; 0x03
    32a0:	0e 94 b4 34 	call	0x6968	; 0x6968 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    32a4:	32 e6       	ldi	r19, 0x62	; 98
    32a6:	c3 2e       	mov	r12, r19
    32a8:	33 e0       	ldi	r19, 0x03	; 3
    32aa:	d3 2e       	mov	r13, r19
    32ac:	ed b7       	in	r30, 0x3d	; 61
    32ae:	fe b7       	in	r31, 0x3e	; 62
    32b0:	d2 82       	std	Z+2, r13	; 0x02
    32b2:	c1 82       	std	Z+1, r12	; 0x01
    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    printf( "canary = %x ",*stkc );
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    32b4:	e0 91 95 0d 	lds	r30, 0x0D95
    32b8:	f0 91 96 0d 	lds	r31, 0x0D96
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    32bc:	80 81       	ld	r24, Z
    32be:	91 81       	ldd	r25, Z+1	; 0x01
    32c0:	ad b7       	in	r26, 0x3d	; 61
    32c2:	be b7       	in	r27, 0x3e	; 62
    32c4:	14 96       	adiw	r26, 0x04	; 4
    32c6:	9c 93       	st	X, r25
    32c8:	8e 93       	st	-X, r24
    32ca:	13 97       	sbiw	r26, 0x03	; 3
    32cc:	0e 94 b4 34 	call	0x6968	; 0x6968 <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    32d0:	2c e6       	ldi	r18, 0x6C	; 108
    32d2:	a2 2e       	mov	r10, r18
    32d4:	23 e0       	ldi	r18, 0x03	; 3
    32d6:	b2 2e       	mov	r11, r18
    32d8:	ed b7       	in	r30, 0x3d	; 61
    32da:	fe b7       	in	r31, 0x3e	; 62
    32dc:	b2 82       	std	Z+2, r11	; 0x02
    32de:	a1 82       	std	Z+1, r10	; 0x01
    32e0:	80 91 95 0d 	lds	r24, 0x0D95
    32e4:	90 91 96 0d 	lds	r25, 0x0D96
    32e8:	94 83       	std	Z+4, r25	; 0x04
    32ea:	83 83       	std	Z+3, r24	; 0x03
    32ec:	0e 94 b4 34 	call	0x6968	; 0x6968 <printf>
    32f0:	01 e7       	ldi	r16, 0x71	; 113
    32f2:	1c e0       	ldi	r17, 0x0C	; 12
    32f4:	0f 90       	pop	r0
    32f6:	0f 90       	pop	r0
    32f8:	0f 90       	pop	r0
    32fa:	0f 90       	pop	r0
    32fc:	c0 e0       	ldi	r28, 0x00	; 0
    32fe:	d0 e0       	ldi	r29, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    3300:	9c e7       	ldi	r25, 0x7C	; 124
    3302:	49 2e       	mov	r4, r25
    3304:	93 e0       	ldi	r25, 0x03	; 3
    3306:	59 2e       	mov	r5, r25
        printf( "canary = %x ",*stkc );
    3308:	9e 2c       	mov	r9, r14
    330a:	6f 2c       	mov	r6, r15
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    330c:	7c 2c       	mov	r7, r12
    330e:	8d 2c       	mov	r8, r13
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    3310:	c5 01       	movw	r24, r10
    3312:	ba 2c       	mov	r11, r10
    3314:	a9 2e       	mov	r10, r25
    3316:	8b e2       	ldi	r24, 0x2B	; 43
    3318:	c8 2e       	mov	r12, r24
    331a:	d1 2c       	mov	r13, r1
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    331c:	d8 01       	movw	r26, r16
    331e:	12 96       	adiw	r26, 0x02	; 2
    3320:	ed 90       	ld	r14, X+
    3322:	fc 90       	ld	r15, X
    3324:	13 97       	sbiw	r26, 0x03	; 3
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    3326:	00 d0       	rcall	.+0      	; 0x3328 <dump_stack_info+0x120>
    3328:	00 d0       	rcall	.+0      	; 0x332a <dump_stack_info+0x122>
    332a:	00 d0       	rcall	.+0      	; 0x332c <dump_stack_info+0x124>
    332c:	ed b7       	in	r30, 0x3d	; 61
    332e:	fe b7       	in	r31, 0x3e	; 62
    3330:	31 96       	adiw	r30, 0x01	; 1
    3332:	ad b7       	in	r26, 0x3d	; 61
    3334:	be b7       	in	r27, 0x3e	; 62
    3336:	12 96       	adiw	r26, 0x02	; 2
    3338:	5c 92       	st	X, r5
    333a:	4e 92       	st	-X, r4
    333c:	11 97       	sbiw	r26, 0x01	; 1
    333e:	d3 83       	std	Z+3, r29	; 0x03
    3340:	c2 83       	std	Z+2, r28	; 0x02
    3342:	f5 82       	std	Z+5, r15	; 0x05
    3344:	e4 82       	std	Z+4, r14	; 0x04
    3346:	0e 94 b4 34 	call	0x6968	; 0x6968 <printf>
        printf( "canary = %x ",*stkc );
    334a:	0f 90       	pop	r0
    334c:	0f 90       	pop	r0
    334e:	ed b7       	in	r30, 0x3d	; 61
    3350:	fe b7       	in	r31, 0x3e	; 62
    3352:	31 96       	adiw	r30, 0x01	; 1
    3354:	ad b7       	in	r26, 0x3d	; 61
    3356:	be b7       	in	r27, 0x3e	; 62
    3358:	11 96       	adiw	r26, 0x01	; 1
    335a:	9c 92       	st	X, r9
    335c:	11 97       	sbiw	r26, 0x01	; 1
    335e:	12 96       	adiw	r26, 0x02	; 2
    3360:	6c 92       	st	X, r6
    3362:	d7 01       	movw	r26, r14
    3364:	8c 91       	ld	r24, X
    3366:	82 83       	std	Z+2, r24	; 0x02
    3368:	13 82       	std	Z+3, r1	; 0x03
    336a:	0e 94 b4 34 	call	0x6968	; 0x6968 <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    336e:	ed b7       	in	r30, 0x3d	; 61
    3370:	fe b7       	in	r31, 0x3e	; 62
    3372:	71 82       	std	Z+1, r7	; 0x01
    3374:	82 82       	std	Z+2, r8	; 0x02
    3376:	d8 01       	movw	r26, r16
    3378:	8d 91       	ld	r24, X+
    337a:	9c 91       	ld	r25, X
    337c:	94 83       	std	Z+4, r25	; 0x04
    337e:	83 83       	std	Z+3, r24	; 0x03
    3380:	0e 94 b4 34 	call	0x6968	; 0x6968 <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    3384:	ed b7       	in	r30, 0x3d	; 61
    3386:	fe b7       	in	r31, 0x3e	; 62
    3388:	b1 82       	std	Z+1, r11	; 0x01
    338a:	a2 82       	std	Z+2, r10	; 0x02
    338c:	cc 9d       	mul	r28, r12
    338e:	c0 01       	movw	r24, r0
    3390:	cd 9d       	mul	r28, r13
    3392:	90 0d       	add	r25, r0
    3394:	dc 9d       	mul	r29, r12
    3396:	90 0d       	add	r25, r0
    3398:	11 24       	eor	r1, r1
    339a:	8f 58       	subi	r24, 0x8F	; 143
    339c:	93 4f       	sbci	r25, 0xF3	; 243
    339e:	94 83       	std	Z+4, r25	; 0x04
    33a0:	83 83       	std	Z+3, r24	; 0x03
    33a2:	0e 94 b4 34 	call	0x6968	; 0x6968 <printf>
    33a6:	21 96       	adiw	r28, 0x01	; 1
    33a8:	05 5d       	subi	r16, 0xD5	; 213
    33aa:	1f 4f       	sbci	r17, 0xFF	; 255
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    33ac:	0f 90       	pop	r0
    33ae:	0f 90       	pop	r0
    33b0:	0f 90       	pop	r0
    33b2:	0f 90       	pop	r0
    33b4:	c6 30       	cpi	r28, 0x06	; 6
    33b6:	d1 05       	cpc	r29, r1
    33b8:	09 f0       	breq	.+2      	; 0x33bc <dump_stack_info+0x1b4>
    33ba:	b0 cf       	rjmp	.-160    	; 0x331c <dump_stack_info+0x114>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    33bc:	df 91       	pop	r29
    33be:	cf 91       	pop	r28
    33c0:	1f 91       	pop	r17
    33c2:	0f 91       	pop	r16
    33c4:	ff 90       	pop	r15
    33c6:	ef 90       	pop	r14
    33c8:	df 90       	pop	r13
    33ca:	cf 90       	pop	r12
    33cc:	bf 90       	pop	r11
    33ce:	af 90       	pop	r10
    33d0:	9f 90       	pop	r9
    33d2:	8f 90       	pop	r8
    33d4:	7f 90       	pop	r7
    33d6:	6f 90       	pop	r6
    33d8:	5f 90       	pop	r5
    33da:	4f 90       	pop	r4
    33dc:	08 95       	ret

000033de <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    33de:	cf 93       	push	r28
    33e0:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    33e2:	e0 91 95 0d 	lds	r30, 0x0D95
    33e6:	f0 91 96 0d 	lds	r31, 0x0D96
    33ea:	c2 81       	ldd	r28, Z+2	; 0x02
    33ec:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    33ee:	88 81       	ld	r24, Y
    33f0:	85 35       	cpi	r24, 0x55	; 85
    33f2:	39 f0       	breq	.+14     	; 0x3402 <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    33f4:	0e 94 04 19 	call	0x3208	; 0x3208 <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    33f8:	81 e0       	ldi	r24, 0x01	; 1
    33fa:	0e 94 13 18 	call	0x3026	; 0x3026 <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    33fe:	85 e5       	ldi	r24, 0x55	; 85
    3400:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    3402:	e0 91 95 0d 	lds	r30, 0x0D95
    3406:	f0 91 96 0d 	lds	r31, 0x0D96
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    340a:	80 81       	ld	r24, Z
    340c:	91 81       	ldd	r25, Z+1	; 0x01
    340e:	22 e4       	ldi	r18, 0x42	; 66
    3410:	80 30       	cpi	r24, 0x00	; 0
    3412:	92 07       	cpc	r25, r18
    3414:	28 f0       	brcs	.+10     	; 0x3420 <nrk_stack_check+0x42>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    3416:	0e 94 04 19 	call	0x3208	; 0x3208 <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    341a:	82 e1       	ldi	r24, 0x12	; 18
    341c:	0e 94 13 18 	call	0x3026	; 0x3026 <nrk_error_add>




#endif
}
    3420:	df 91       	pop	r29
    3422:	cf 91       	pop	r28
    3424:	08 95       	ret

00003426 <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    3426:	99 27       	eor	r25, r25
    3428:	87 fd       	sbrc	r24, 7
    342a:	90 95       	com	r25
    342c:	2b e2       	ldi	r18, 0x2B	; 43
    342e:	30 e0       	ldi	r19, 0x00	; 0
    3430:	82 9f       	mul	r24, r18
    3432:	f0 01       	movw	r30, r0
    3434:	83 9f       	mul	r24, r19
    3436:	f0 0d       	add	r31, r0
    3438:	92 9f       	mul	r25, r18
    343a:	f0 0d       	add	r31, r0
    343c:	11 24       	eor	r1, r1
    343e:	ef 58       	subi	r30, 0x8F	; 143
    3440:	f3 4f       	sbci	r31, 0xF3	; 243
    3442:	a2 81       	ldd	r26, Z+2	; 0x02
    3444:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    3446:	8c 91       	ld	r24, X
    3448:	85 35       	cpi	r24, 0x55	; 85
    344a:	19 f0       	breq	.+6      	; 0x3452 <nrk_stack_check_pid+0x2c>
    {
        *stkc=STK_CANARY_VAL;
    344c:	85 e5       	ldi	r24, 0x55	; 85
    344e:	8c 93       	st	X, r24
    3450:	09 c0       	rjmp	.+18     	; 0x3464 <nrk_stack_check_pid+0x3e>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    3452:	80 81       	ld	r24, Z
    3454:	91 81       	ldd	r25, Z+1	; 0x01
    3456:	22 e4       	ldi	r18, 0x42	; 66
    3458:	80 30       	cpi	r24, 0x00	; 0
    345a:	92 07       	cpc	r25, r18
    345c:	28 f0       	brcs	.+10     	; 0x3468 <nrk_stack_check_pid+0x42>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    345e:	82 e1       	ldi	r24, 0x12	; 18
    3460:	0e 94 13 18 	call	0x3026	; 0x3026 <nrk_error_add>
        return NRK_ERROR;
    3464:	8f ef       	ldi	r24, 0xFF	; 255
    3466:	08 95       	ret
    }
#endif
    return NRK_OK;
    3468:	81 e0       	ldi	r24, 0x01	; 1
}
    346a:	08 95       	ret

0000346c <nrk_signal_create>:
int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    346c:	60 91 30 09 	lds	r22, 0x0930
    3470:	70 91 31 09 	lds	r23, 0x0931
    3474:	80 91 32 09 	lds	r24, 0x0932
    3478:	90 91 33 09 	lds	r25, 0x0933
    347c:	e0 e0       	ldi	r30, 0x00	; 0
    347e:	f0 e0       	ldi	r31, 0x00	; 0
    3480:	9b 01       	movw	r18, r22
    3482:	ac 01       	movw	r20, r24
    3484:	0e 2e       	mov	r0, r30
    3486:	04 c0       	rjmp	.+8      	; 0x3490 <nrk_signal_create+0x24>
    3488:	56 95       	lsr	r21
    348a:	47 95       	ror	r20
    348c:	37 95       	ror	r19
    348e:	27 95       	ror	r18
    3490:	0a 94       	dec	r0
    3492:	d2 f7       	brpl	.-12     	; 0x3488 <nrk_signal_create+0x1c>
    3494:	20 fd       	sbrc	r18, 0
    3496:	1a c0       	rjmp	.+52     	; 0x34cc <nrk_signal_create+0x60>
		{    
			_nrk_signal_list|=SIG(i);
    3498:	21 e0       	ldi	r18, 0x01	; 1
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	40 e0       	ldi	r20, 0x00	; 0
    349e:	50 e0       	ldi	r21, 0x00	; 0
    34a0:	0e 2e       	mov	r0, r30
    34a2:	04 c0       	rjmp	.+8      	; 0x34ac <nrk_signal_create+0x40>
    34a4:	22 0f       	add	r18, r18
    34a6:	33 1f       	adc	r19, r19
    34a8:	44 1f       	adc	r20, r20
    34aa:	55 1f       	adc	r21, r21
    34ac:	0a 94       	dec	r0
    34ae:	d2 f7       	brpl	.-12     	; 0x34a4 <nrk_signal_create+0x38>
    34b0:	26 2b       	or	r18, r22
    34b2:	37 2b       	or	r19, r23
    34b4:	48 2b       	or	r20, r24
    34b6:	59 2b       	or	r21, r25
    34b8:	20 93 30 09 	sts	0x0930, r18
    34bc:	30 93 31 09 	sts	0x0931, r19
    34c0:	40 93 32 09 	sts	0x0932, r20
    34c4:	50 93 33 09 	sts	0x0933, r21
			return i;
    34c8:	8e 2f       	mov	r24, r30
    34ca:	08 95       	ret
    34cc:	31 96       	adiw	r30, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    34ce:	e0 32       	cpi	r30, 0x20	; 32
    34d0:	f1 05       	cpc	r31, r1
    34d2:	b1 f6       	brne	.-84     	; 0x3480 <nrk_signal_create+0x14>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    34d4:	8f ef       	ldi	r24, 0xFF	; 255


}
    34d6:	08 95       	ret

000034d8 <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    34d8:	e0 91 95 0d 	lds	r30, 0x0D95
    34dc:	f0 91 96 0d 	lds	r31, 0x0D96


}

uint32_t nrk_signal_get_registered_mask()
{
    34e0:	65 85       	ldd	r22, Z+13	; 0x0d
    34e2:	76 85       	ldd	r23, Z+14	; 0x0e
        return nrk_cur_task_TCB->registered_signal_mask;
}
    34e4:	87 85       	ldd	r24, Z+15	; 0x0f
    34e6:	90 89       	ldd	r25, Z+16	; 0x10
    34e8:	08 95       	ret

000034ea <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    34ea:	df 92       	push	r13
    34ec:	ef 92       	push	r14
    34ee:	ff 92       	push	r15
    34f0:	0f 93       	push	r16
    34f2:	1f 93       	push	r17
    34f4:	d8 2e       	mov	r13, r24
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    34f6:	81 e0       	ldi	r24, 0x01	; 1
    34f8:	e8 2e       	mov	r14, r24
    34fa:	f1 2c       	mov	r15, r1
    34fc:	01 2d       	mov	r16, r1
    34fe:	11 2d       	mov	r17, r1
    3500:	0d 2c       	mov	r0, r13
    3502:	04 c0       	rjmp	.+8      	; 0x350c <nrk_signal_delete+0x22>
    3504:	ee 0c       	add	r14, r14
    3506:	ff 1c       	adc	r15, r15
    3508:	00 1f       	adc	r16, r16
    350a:	11 1f       	adc	r17, r17
    350c:	0a 94       	dec	r0
    350e:	d2 f7       	brpl	.-12     	; 0x3504 <nrk_signal_delete+0x1a>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    3510:	80 91 30 09 	lds	r24, 0x0930
    3514:	90 91 31 09 	lds	r25, 0x0931
    3518:	a0 91 32 09 	lds	r26, 0x0932
    351c:	b0 91 33 09 	lds	r27, 0x0933
    3520:	8e 21       	and	r24, r14
    3522:	9f 21       	and	r25, r15
    3524:	a0 23       	and	r26, r16
    3526:	b1 23       	and	r27, r17
    3528:	00 97       	sbiw	r24, 0x00	; 0
    352a:	a1 05       	cpc	r26, r1
    352c:	b1 05       	cpc	r27, r1
    352e:	09 f4       	brne	.+2      	; 0x3532 <nrk_signal_delete+0x48>
    3530:	5d c0       	rjmp	.+186    	; 0x35ec <nrk_signal_delete+0x102>

	nrk_int_disable();
    3532:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <nrk_int_disable>
    3536:	e8 e7       	ldi	r30, 0x78	; 120
    3538:	fc e0       	ldi	r31, 0x0C	; 12
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    353a:	a8 01       	movw	r20, r16
    353c:	97 01       	movw	r18, r14
    353e:	20 95       	com	r18
    3540:	30 95       	com	r19
    3542:	40 95       	com	r20
    3544:	50 95       	com	r21
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3546:	63 e0       	ldi	r22, 0x03	; 3

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    3548:	81 81       	ldd	r24, Z+1	; 0x01
    354a:	8f 3f       	cpi	r24, 0xFF	; 255
    354c:	39 f1       	breq	.+78     	; 0x359c <nrk_signal_delete+0xb2>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    354e:	86 81       	ldd	r24, Z+6	; 0x06
    3550:	97 81       	ldd	r25, Z+7	; 0x07
    3552:	a0 85       	ldd	r26, Z+8	; 0x08
    3554:	b1 85       	ldd	r27, Z+9	; 0x09
    3556:	8e 15       	cp	r24, r14
    3558:	9f 05       	cpc	r25, r15
    355a:	a0 07       	cpc	r26, r16
    355c:	b1 07       	cpc	r27, r17
    355e:	31 f4       	brne	.+12     	; 0x356c <nrk_signal_delete+0x82>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    3560:	12 86       	std	Z+10, r1	; 0x0a
    3562:	13 86       	std	Z+11, r1	; 0x0b
    3564:	14 86       	std	Z+12, r1	; 0x0c
    3566:	15 86       	std	Z+13, r1	; 0x0d
			nrk_task_TCB[task_ID].event_suspend=0;
    3568:	10 82       	st	Z, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    356a:	62 83       	std	Z+2, r22	; 0x02
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    356c:	86 81       	ldd	r24, Z+6	; 0x06
    356e:	97 81       	ldd	r25, Z+7	; 0x07
    3570:	a0 85       	ldd	r26, Z+8	; 0x08
    3572:	b1 85       	ldd	r27, Z+9	; 0x09
    3574:	82 23       	and	r24, r18
    3576:	93 23       	and	r25, r19
    3578:	a4 23       	and	r26, r20
    357a:	b5 23       	and	r27, r21
    357c:	86 83       	std	Z+6, r24	; 0x06
    357e:	97 83       	std	Z+7, r25	; 0x07
    3580:	a0 87       	std	Z+8, r26	; 0x08
    3582:	b1 87       	std	Z+9, r27	; 0x09
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    3584:	82 85       	ldd	r24, Z+10	; 0x0a
    3586:	93 85       	ldd	r25, Z+11	; 0x0b
    3588:	a4 85       	ldd	r26, Z+12	; 0x0c
    358a:	b5 85       	ldd	r27, Z+13	; 0x0d
    358c:	82 23       	and	r24, r18
    358e:	93 23       	and	r25, r19
    3590:	a4 23       	and	r26, r20
    3592:	b5 23       	and	r27, r21
    3594:	82 87       	std	Z+10, r24	; 0x0a
    3596:	93 87       	std	Z+11, r25	; 0x0b
    3598:	a4 87       	std	Z+12, r26	; 0x0c
    359a:	b5 87       	std	Z+13, r27	; 0x0d
    359c:	bb 96       	adiw	r30, 0x2b	; 43
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    359e:	8d e0       	ldi	r24, 0x0D	; 13
    35a0:	ea 37       	cpi	r30, 0x7A	; 122
    35a2:	f8 07       	cpc	r31, r24
    35a4:	89 f6       	brne	.-94     	; 0x3548 <nrk_signal_delete+0x5e>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    35a6:	2e ef       	ldi	r18, 0xFE	; 254
    35a8:	3f ef       	ldi	r19, 0xFF	; 255
    35aa:	4f ef       	ldi	r20, 0xFF	; 255
    35ac:	5f ef       	ldi	r21, 0xFF	; 255
    35ae:	04 c0       	rjmp	.+8      	; 0x35b8 <nrk_signal_delete+0xce>
    35b0:	22 0f       	add	r18, r18
    35b2:	33 1f       	adc	r19, r19
    35b4:	44 1f       	adc	r20, r20
    35b6:	55 1f       	adc	r21, r21
    35b8:	da 94       	dec	r13
    35ba:	d2 f7       	brpl	.-12     	; 0x35b0 <nrk_signal_delete+0xc6>
    35bc:	80 91 30 09 	lds	r24, 0x0930
    35c0:	90 91 31 09 	lds	r25, 0x0931
    35c4:	a0 91 32 09 	lds	r26, 0x0932
    35c8:	b0 91 33 09 	lds	r27, 0x0933
    35cc:	82 23       	and	r24, r18
    35ce:	93 23       	and	r25, r19
    35d0:	a4 23       	and	r26, r20
    35d2:	b5 23       	and	r27, r21
    35d4:	80 93 30 09 	sts	0x0930, r24
    35d8:	90 93 31 09 	sts	0x0931, r25
    35dc:	a0 93 32 09 	sts	0x0932, r26
    35e0:	b0 93 33 09 	sts	0x0933, r27
	nrk_int_enable();
    35e4:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <nrk_int_enable>

	return NRK_OK;
    35e8:	81 e0       	ldi	r24, 0x01	; 1
    35ea:	01 c0       	rjmp	.+2      	; 0x35ee <nrk_signal_delete+0x104>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    35ec:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    35ee:	1f 91       	pop	r17
    35f0:	0f 91       	pop	r16
    35f2:	ff 90       	pop	r15
    35f4:	ef 90       	pop	r14
    35f6:	df 90       	pop	r13
    35f8:	08 95       	ret

000035fa <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    35fa:	ef 92       	push	r14
    35fc:	ff 92       	push	r15
    35fe:	0f 93       	push	r16
    3600:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    3602:	21 e0       	ldi	r18, 0x01	; 1
    3604:	30 e0       	ldi	r19, 0x00	; 0
    3606:	40 e0       	ldi	r20, 0x00	; 0
    3608:	50 e0       	ldi	r21, 0x00	; 0
    360a:	04 c0       	rjmp	.+8      	; 0x3614 <nrk_signal_unregister+0x1a>
    360c:	22 0f       	add	r18, r18
    360e:	33 1f       	adc	r19, r19
    3610:	44 1f       	adc	r20, r20
    3612:	55 1f       	adc	r21, r21
    3614:	8a 95       	dec	r24
    3616:	d2 f7       	brpl	.-12     	; 0x360c <nrk_signal_unregister+0x12>

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    3618:	e0 91 95 0d 	lds	r30, 0x0D95
    361c:	f0 91 96 0d 	lds	r31, 0x0D96
    3620:	85 85       	ldd	r24, Z+13	; 0x0d
    3622:	96 85       	ldd	r25, Z+14	; 0x0e
    3624:	a7 85       	ldd	r26, Z+15	; 0x0f
    3626:	b0 89       	ldd	r27, Z+16	; 0x10
    3628:	79 01       	movw	r14, r18
    362a:	8a 01       	movw	r16, r20
    362c:	e8 22       	and	r14, r24
    362e:	f9 22       	and	r15, r25
    3630:	0a 23       	and	r16, r26
    3632:	1b 23       	and	r17, r27
    3634:	e1 14       	cp	r14, r1
    3636:	f1 04       	cpc	r15, r1
    3638:	01 05       	cpc	r16, r1
    363a:	11 05       	cpc	r17, r1
    363c:	d1 f0       	breq	.+52     	; 0x3672 <nrk_signal_unregister+0x78>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    363e:	20 95       	com	r18
    3640:	30 95       	com	r19
    3642:	40 95       	com	r20
    3644:	50 95       	com	r21
    3646:	82 23       	and	r24, r18
    3648:	93 23       	and	r25, r19
    364a:	a4 23       	and	r26, r20
    364c:	b5 23       	and	r27, r21
    364e:	85 87       	std	Z+13, r24	; 0x0d
    3650:	96 87       	std	Z+14, r25	; 0x0e
    3652:	a7 87       	std	Z+15, r26	; 0x0f
    3654:	b0 8b       	std	Z+16, r27	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    3656:	81 89       	ldd	r24, Z+17	; 0x11
    3658:	92 89       	ldd	r25, Z+18	; 0x12
    365a:	a3 89       	ldd	r26, Z+19	; 0x13
    365c:	b4 89       	ldd	r27, Z+20	; 0x14
    365e:	82 23       	and	r24, r18
    3660:	93 23       	and	r25, r19
    3662:	a4 23       	and	r26, r20
    3664:	b5 23       	and	r27, r21
    3666:	81 8b       	std	Z+17, r24	; 0x11
    3668:	92 8b       	std	Z+18, r25	; 0x12
    366a:	a3 8b       	std	Z+19, r26	; 0x13
    366c:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    366e:	81 e0       	ldi	r24, 0x01	; 1
    3670:	01 c0       	rjmp	.+2      	; 0x3674 <nrk_signal_unregister+0x7a>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    3672:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    3674:	1f 91       	pop	r17
    3676:	0f 91       	pop	r16
    3678:	ff 90       	pop	r15
    367a:	ef 90       	pop	r14
    367c:	08 95       	ret

0000367e <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    367e:	20 91 30 09 	lds	r18, 0x0930
    3682:	30 91 31 09 	lds	r19, 0x0931
    3686:	40 91 32 09 	lds	r20, 0x0932
    368a:	50 91 33 09 	lds	r21, 0x0933
    368e:	08 2e       	mov	r0, r24
    3690:	04 c0       	rjmp	.+8      	; 0x369a <nrk_signal_register+0x1c>
    3692:	56 95       	lsr	r21
    3694:	47 95       	ror	r20
    3696:	37 95       	ror	r19
    3698:	27 95       	ror	r18
    369a:	0a 94       	dec	r0
    369c:	d2 f7       	brpl	.-12     	; 0x3692 <nrk_signal_register+0x14>
    369e:	21 70       	andi	r18, 0x01	; 1
    36a0:	30 70       	andi	r19, 0x00	; 0
    36a2:	21 15       	cp	r18, r1
    36a4:	31 05       	cpc	r19, r1
    36a6:	e9 f0       	breq	.+58     	; 0x36e2 <nrk_signal_register+0x64>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    36a8:	e0 91 95 0d 	lds	r30, 0x0D95
    36ac:	f0 91 96 0d 	lds	r31, 0x0D96
    36b0:	21 e0       	ldi	r18, 0x01	; 1
    36b2:	30 e0       	ldi	r19, 0x00	; 0
    36b4:	40 e0       	ldi	r20, 0x00	; 0
    36b6:	50 e0       	ldi	r21, 0x00	; 0
    36b8:	04 c0       	rjmp	.+8      	; 0x36c2 <nrk_signal_register+0x44>
    36ba:	22 0f       	add	r18, r18
    36bc:	33 1f       	adc	r19, r19
    36be:	44 1f       	adc	r20, r20
    36c0:	55 1f       	adc	r21, r21
    36c2:	8a 95       	dec	r24
    36c4:	d2 f7       	brpl	.-12     	; 0x36ba <nrk_signal_register+0x3c>
    36c6:	85 85       	ldd	r24, Z+13	; 0x0d
    36c8:	96 85       	ldd	r25, Z+14	; 0x0e
    36ca:	a7 85       	ldd	r26, Z+15	; 0x0f
    36cc:	b0 89       	ldd	r27, Z+16	; 0x10
    36ce:	82 2b       	or	r24, r18
    36d0:	93 2b       	or	r25, r19
    36d2:	a4 2b       	or	r26, r20
    36d4:	b5 2b       	or	r27, r21
    36d6:	85 87       	std	Z+13, r24	; 0x0d
    36d8:	96 87       	std	Z+14, r25	; 0x0e
    36da:	a7 87       	std	Z+15, r26	; 0x0f
    36dc:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    36de:	81 e0       	ldi	r24, 0x01	; 1
    36e0:	08 95       	ret
	}
            
	return NRK_ERROR;
    36e2:	8f ef       	ldi	r24, 0xFF	; 255
}
    36e4:	08 95       	ret

000036e6 <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    36e6:	ef 92       	push	r14
    36e8:	ff 92       	push	r15
    36ea:	0f 93       	push	r16
    36ec:	1f 93       	push	r17
    36ee:	df 93       	push	r29
    36f0:	cf 93       	push	r28
    36f2:	0f 92       	push	r0
    36f4:	cd b7       	in	r28, 0x3d	; 61
    36f6:	de b7       	in	r29, 0x3e	; 62

	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    36f8:	91 e0       	ldi	r25, 0x01	; 1
    36fa:	e9 2e       	mov	r14, r25
    36fc:	f1 2c       	mov	r15, r1
    36fe:	01 2d       	mov	r16, r1
    3700:	11 2d       	mov	r17, r1
    3702:	04 c0       	rjmp	.+8      	; 0x370c <nrk_event_signal+0x26>
    3704:	ee 0c       	add	r14, r14
    3706:	ff 1c       	adc	r15, r15
    3708:	00 1f       	adc	r16, r16
    370a:	11 1f       	adc	r17, r17
    370c:	8a 95       	dec	r24
    370e:	d2 f7       	brpl	.-12     	; 0x3704 <nrk_event_signal+0x1e>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    3710:	80 91 30 09 	lds	r24, 0x0930
    3714:	90 91 31 09 	lds	r25, 0x0931
    3718:	a0 91 32 09 	lds	r26, 0x0932
    371c:	b0 91 33 09 	lds	r27, 0x0933
    3720:	8e 21       	and	r24, r14
    3722:	9f 21       	and	r25, r15
    3724:	a0 23       	and	r26, r16
    3726:	b1 23       	and	r27, r17
    3728:	00 97       	sbiw	r24, 0x00	; 0
    372a:	a1 05       	cpc	r26, r1
    372c:	b1 05       	cpc	r27, r1
    372e:	11 f4       	brne	.+4      	; 0x3734 <nrk_event_signal+0x4e>
    3730:	81 e0       	ldi	r24, 0x01	; 1
    3732:	43 c0       	rjmp	.+134    	; 0x37ba <nrk_event_signal+0xd4>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    3734:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <nrk_int_disable>
    3738:	e8 e7       	ldi	r30, 0x78	; 120
    373a:	fc e0       	ldi	r31, 0x0C	; 12

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    373c:	20 e0       	ldi	r18, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    373e:	33 e0       	ldi	r19, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    3740:	80 81       	ld	r24, Z
    3742:	81 30       	cpi	r24, 0x01	; 1
    3744:	b9 f4       	brne	.+46     	; 0x3774 <nrk_event_signal+0x8e>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    3746:	82 85       	ldd	r24, Z+10	; 0x0a
    3748:	93 85       	ldd	r25, Z+11	; 0x0b
    374a:	a4 85       	ldd	r26, Z+12	; 0x0c
    374c:	b5 85       	ldd	r27, Z+13	; 0x0d
    374e:	8e 21       	and	r24, r14
    3750:	9f 21       	and	r25, r15
    3752:	a0 23       	and	r26, r16
    3754:	b1 23       	and	r27, r17
    3756:	00 97       	sbiw	r24, 0x00	; 0
    3758:	a1 05       	cpc	r26, r1
    375a:	b1 05       	cpc	r27, r1
    375c:	59 f0       	breq	.+22     	; 0x3774 <nrk_event_signal+0x8e>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    375e:	32 83       	std	Z+2, r19	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    3760:	16 86       	std	Z+14, r1	; 0x0e
    3762:	17 86       	std	Z+15, r1	; 0x0f
    3764:	10 8a       	std	Z+16, r1	; 0x10
    3766:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    3768:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    376a:	e2 86       	std	Z+10, r14	; 0x0a
    376c:	f3 86       	std	Z+11, r15	; 0x0b
    376e:	04 87       	std	Z+12, r16	; 0x0c
    3770:	15 87       	std	Z+13, r17	; 0x0d
					event_occured=1;
    3772:	21 e0       	ldi	r18, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    3774:	80 81       	ld	r24, Z
    3776:	82 30       	cpi	r24, 0x02	; 2
    3778:	a1 f4       	brne	.+40     	; 0x37a2 <nrk_event_signal+0xbc>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    377a:	82 85       	ldd	r24, Z+10	; 0x0a
    377c:	93 85       	ldd	r25, Z+11	; 0x0b
    377e:	a4 85       	ldd	r26, Z+12	; 0x0c
    3780:	b5 85       	ldd	r27, Z+13	; 0x0d
    3782:	8e 15       	cp	r24, r14
    3784:	9f 05       	cpc	r25, r15
    3786:	a0 07       	cpc	r26, r16
    3788:	b1 07       	cpc	r27, r17
    378a:	59 f4       	brne	.+22     	; 0x37a2 <nrk_event_signal+0xbc>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    378c:	32 83       	std	Z+2, r19	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    378e:	16 86       	std	Z+14, r1	; 0x0e
    3790:	17 86       	std	Z+15, r1	; 0x0f
    3792:	10 8a       	std	Z+16, r1	; 0x10
    3794:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    3796:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    3798:	12 86       	std	Z+10, r1	; 0x0a
    379a:	13 86       	std	Z+11, r1	; 0x0b
    379c:	14 86       	std	Z+12, r1	; 0x0c
    379e:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    37a0:	21 e0       	ldi	r18, 0x01	; 1
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
					nrk_task_TCB[task_ID].next_wakeup=0;
					nrk_task_TCB[task_ID].event_suspend=0;
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    37a2:	bb 96       	adiw	r30, 0x2b	; 43
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    37a4:	8d e0       	ldi	r24, 0x0D	; 13
    37a6:	ea 37       	cpi	r30, 0x7A	; 122
    37a8:	f8 07       	cpc	r31, r24
    37aa:	51 f6       	brne	.-108    	; 0x3740 <nrk_event_signal+0x5a>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    37ac:	29 83       	std	Y+1, r18	; 0x01
    37ae:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <nrk_int_enable>
	if(event_occured)
    37b2:	29 81       	ldd	r18, Y+1	; 0x01
    37b4:	22 23       	and	r18, r18
    37b6:	29 f4       	brne	.+10     	; 0x37c2 <nrk_event_signal+0xdc>
	{
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    37b8:	82 e0       	ldi	r24, 0x02	; 2
    37ba:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <_nrk_errno_set>
	return NRK_ERROR;
    37be:	8f ef       	ldi	r24, 0xFF	; 255
    37c0:	01 c0       	rjmp	.+2      	; 0x37c4 <nrk_event_signal+0xde>
	//	}
	}
	nrk_int_enable();
	if(event_occured)
	{
		return NRK_OK;
    37c2:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    37c4:	0f 90       	pop	r0
    37c6:	cf 91       	pop	r28
    37c8:	df 91       	pop	r29
    37ca:	1f 91       	pop	r17
    37cc:	0f 91       	pop	r16
    37ce:	ff 90       	pop	r15
    37d0:	ef 90       	pop	r14
    37d2:	08 95       	ret

000037d4 <nrk_event_wait>:

uint32_t nrk_event_wait(uint32_t event_mask)
{

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    37d4:	e0 91 95 0d 	lds	r30, 0x0D95
    37d8:	f0 91 96 0d 	lds	r31, 0x0D96
    37dc:	25 85       	ldd	r18, Z+13	; 0x0d
    37de:	36 85       	ldd	r19, Z+14	; 0x0e
    37e0:	47 85       	ldd	r20, Z+15	; 0x0f
    37e2:	50 89       	ldd	r21, Z+16	; 0x10
    37e4:	26 23       	and	r18, r22
    37e6:	37 23       	and	r19, r23
    37e8:	48 23       	and	r20, r24
    37ea:	59 23       	and	r21, r25
    37ec:	21 15       	cp	r18, r1
    37ee:	31 05       	cpc	r19, r1
    37f0:	41 05       	cpc	r20, r1
    37f2:	51 05       	cpc	r21, r1
    37f4:	21 f1       	breq	.+72     	; 0x383e <nrk_event_wait+0x6a>
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    37f6:	61 8b       	std	Z+17, r22	; 0x11
    37f8:	72 8b       	std	Z+18, r23	; 0x12
    37fa:	83 8b       	std	Z+19, r24	; 0x13
    37fc:	94 8b       	std	Z+20, r25	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    37fe:	21 e0       	ldi	r18, 0x01	; 1
    3800:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    3802:	00 90 85 0d 	lds	r0, 0x0D85
    3806:	04 c0       	rjmp	.+8      	; 0x3810 <nrk_event_wait+0x3c>
    3808:	96 95       	lsr	r25
    380a:	87 95       	ror	r24
    380c:	77 95       	ror	r23
    380e:	67 95       	ror	r22
    3810:	0a 94       	dec	r0
    3812:	d2 f7       	brpl	.-12     	; 0x3808 <nrk_event_wait+0x34>
    3814:	61 70       	andi	r22, 0x01	; 1
    3816:	70 70       	andi	r23, 0x00	; 0
    3818:	61 15       	cp	r22, r1
    381a:	71 05       	cpc	r23, r1
    381c:	19 f0       	breq	.+6      	; 0x3824 <nrk_event_wait+0x50>
		nrk_wait_until_nw();
    381e:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <nrk_wait_until_nw>
    3822:	04 c0       	rjmp	.+8      	; 0x382c <nrk_event_wait+0x58>
	else
		nrk_wait_until_ticks(0);
    3824:	80 e0       	ldi	r24, 0x00	; 0
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    382c:	e0 91 95 0d 	lds	r30, 0x0D95
    3830:	f0 91 96 0d 	lds	r31, 0x0D96
    3834:	21 89       	ldd	r18, Z+17	; 0x11
    3836:	32 89       	ldd	r19, Z+18	; 0x12
    3838:	43 89       	ldd	r20, Z+19	; 0x13
    383a:	54 89       	ldd	r21, Z+20	; 0x14
    383c:	03 c0       	rjmp	.+6      	; 0x3844 <nrk_event_wait+0x70>
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
	  }
	else
	  {
	   return 0;
    383e:	20 e0       	ldi	r18, 0x00	; 0
    3840:	30 e0       	ldi	r19, 0x00	; 0
    3842:	a9 01       	movw	r20, r18
		nrk_wait_until_nw();
	else
		nrk_wait_until_ticks(0);
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
}
    3844:	b9 01       	movw	r22, r18
    3846:	ca 01       	movw	r24, r20
    3848:	08 95       	ret

0000384a <nrk_sem_create>:
}

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
    384a:	90 91 94 0d 	lds	r25, 0x0D94
    384e:	94 30       	cpi	r25, 0x04	; 4
    3850:	d0 f4       	brcc	.+52     	; 0x3886 <nrk_sem_create+0x3c>
    3852:	e5 e7       	ldi	r30, 0x75	; 117
    3854:	fd e0       	ldi	r31, 0x0D	; 13
    3856:	20 e0       	ldi	r18, 0x00	; 0
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
		{
		   if(nrk_sem_list[i].count==-1) break;
    3858:	30 81       	ld	r19, Z
    385a:	3f 3f       	cpi	r19, 0xFF	; 255
    385c:	21 f0       	breq	.+8      	; 0x3866 <nrk_sem_create+0x1c>
nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
    385e:	2f 5f       	subi	r18, 0xFF	; 255
    3860:	33 96       	adiw	r30, 0x03	; 3
    3862:	25 30       	cpi	r18, 0x05	; 5
    3864:	c9 f7       	brne	.-14     	; 0x3858 <nrk_sem_create+0xe>
		{
		   if(nrk_sem_list[i].count==-1) break;
		}
	                                              
	nrk_sem_list[i].value=count;
    3866:	30 e0       	ldi	r19, 0x00	; 0
    3868:	f9 01       	movw	r30, r18
    386a:	ee 0f       	add	r30, r30
    386c:	ff 1f       	adc	r31, r31
    386e:	e2 0f       	add	r30, r18
    3870:	f3 1f       	adc	r31, r19
    3872:	eb 58       	subi	r30, 0x8B	; 139
    3874:	f2 4f       	sbci	r31, 0xF2	; 242
    3876:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[i].count=count;
    3878:	80 83       	st	Z, r24
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
    387a:	61 83       	std	Z+1, r22	; 0x01
	_nrk_resource_cnt++;
    387c:	9f 5f       	subi	r25, 0xFF	; 255
    387e:	90 93 94 0d 	sts	0x0D94, r25
	return	&nrk_sem_list[i];
    3882:	9f 01       	movw	r18, r30
    3884:	02 c0       	rjmp	.+4      	; 0x388a <nrk_sem_create+0x40>

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
    3886:	20 e0       	ldi	r18, 0x00	; 0
    3888:	30 e0       	ldi	r19, 0x00	; 0
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    388a:	c9 01       	movw	r24, r18
    388c:	08 95       	ret

0000388e <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
    388e:	bc 01       	movw	r22, r24
    3890:	20 e0       	ldi	r18, 0x00	; 0
    3892:	30 e0       	ldi	r19, 0x00	; 0
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
				return id;
	return NRK_ERROR;
    3894:	82 2f       	mov	r24, r18

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    3896:	a9 01       	movw	r20, r18
    3898:	44 0f       	add	r20, r20
    389a:	55 1f       	adc	r21, r21
    389c:	42 0f       	add	r20, r18
    389e:	53 1f       	adc	r21, r19
    38a0:	4b 58       	subi	r20, 0x8B	; 139
    38a2:	52 4f       	sbci	r21, 0xF2	; 242
    38a4:	64 17       	cp	r22, r20
    38a6:	75 07       	cpc	r23, r21
    38a8:	31 f0       	breq	.+12     	; 0x38b6 <nrk_get_resource_index+0x28>
    38aa:	2f 5f       	subi	r18, 0xFF	; 255
    38ac:	3f 4f       	sbci	r19, 0xFF	; 255
}

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
    38ae:	25 30       	cpi	r18, 0x05	; 5
    38b0:	31 05       	cpc	r19, r1
    38b2:	81 f7       	brne	.-32     	; 0x3894 <nrk_get_resource_index+0x6>
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
				return id;
	return NRK_ERROR;
    38b4:	8f ef       	ldi	r24, 0xFF	; 255
}
    38b6:	08 95       	ret

000038b8 <nrk_sem_delete>:
return NRK_OK;
}

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    38b8:	0e 94 47 1c 	call	0x388e	; 0x388e <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    38bc:	8f 3f       	cpi	r24, 0xFF	; 255
    38be:	11 f4       	brne	.+4      	; 0x38c4 <nrk_sem_delete+0xc>
    38c0:	81 e0       	ldi	r24, 0x01	; 1
    38c2:	03 c0       	rjmp	.+6      	; 0x38ca <nrk_sem_delete+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    38c4:	85 30       	cpi	r24, 0x05	; 5
    38c6:	29 f4       	brne	.+10     	; 0x38d2 <nrk_sem_delete+0x1a>
    38c8:	82 e0       	ldi	r24, 0x02	; 2
    38ca:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <_nrk_errno_set>
    38ce:	8f ef       	ldi	r24, 0xFF	; 255
    38d0:	08 95       	ret

	nrk_sem_list[id].count=-1;
    38d2:	99 27       	eor	r25, r25
    38d4:	87 fd       	sbrc	r24, 7
    38d6:	90 95       	com	r25
    38d8:	fc 01       	movw	r30, r24
    38da:	ee 0f       	add	r30, r30
    38dc:	ff 1f       	adc	r31, r31
    38de:	e8 0f       	add	r30, r24
    38e0:	f9 1f       	adc	r31, r25
    38e2:	eb 58       	subi	r30, 0x8B	; 139
    38e4:	f2 4f       	sbci	r31, 0xF2	; 242
    38e6:	8f ef       	ldi	r24, 0xFF	; 255
    38e8:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    38ea:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    38ec:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    38ee:	80 91 94 0d 	lds	r24, 0x0D94
    38f2:	81 50       	subi	r24, 0x01	; 1
    38f4:	80 93 94 0d 	sts	0x0D94, r24
return NRK_OK;
    38f8:	81 e0       	ldi	r24, 0x01	; 1
}
    38fa:	08 95       	ret

000038fc <nrk_sem_post>:
}



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    38fc:	0f 93       	push	r16
    38fe:	1f 93       	push	r17
    3900:	df 93       	push	r29
    3902:	cf 93       	push	r28
    3904:	0f 92       	push	r0
    3906:	cd b7       	in	r28, 0x3d	; 61
    3908:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    390a:	0e 94 47 1c 	call	0x388e	; 0x388e <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    390e:	8f 3f       	cpi	r24, 0xFF	; 255
    3910:	11 f4       	brne	.+4      	; 0x3916 <nrk_sem_post+0x1a>
    3912:	81 e0       	ldi	r24, 0x01	; 1
    3914:	03 c0       	rjmp	.+6      	; 0x391c <nrk_sem_post+0x20>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3916:	85 30       	cpi	r24, 0x05	; 5
    3918:	29 f4       	brne	.+10     	; 0x3924 <nrk_sem_post+0x28>
    391a:	82 e0       	ldi	r24, 0x02	; 2
    391c:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <_nrk_errno_set>
    3920:	8f ef       	ldi	r24, 0xFF	; 255
    3922:	45 c0       	rjmp	.+138    	; 0x39ae <nrk_sem_post+0xb2>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    3924:	28 2f       	mov	r18, r24
    3926:	33 27       	eor	r19, r19
    3928:	27 fd       	sbrc	r18, 7
    392a:	30 95       	com	r19
    392c:	89 01       	movw	r16, r18
    392e:	00 0f       	add	r16, r16
    3930:	11 1f       	adc	r17, r17
    3932:	02 0f       	add	r16, r18
    3934:	13 1f       	adc	r17, r19
    3936:	0b 58       	subi	r16, 0x8B	; 139
    3938:	12 4f       	sbci	r17, 0xF2	; 242
    393a:	d8 01       	movw	r26, r16
    393c:	12 96       	adiw	r26, 0x02	; 2
    393e:	2c 91       	ld	r18, X
    3940:	12 97       	sbiw	r26, 0x02	; 2
    3942:	9c 91       	ld	r25, X
    3944:	29 17       	cp	r18, r25
    3946:	94 f5       	brge	.+100    	; 0x39ac <nrk_sem_post+0xb0>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    3948:	89 83       	std	Y+1, r24	; 0x01
    394a:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <nrk_int_disable>

		nrk_sem_list[id].value++;
    394e:	f8 01       	movw	r30, r16
    3950:	92 81       	ldd	r25, Z+2	; 0x02
    3952:	9f 5f       	subi	r25, 0xFF	; 255
    3954:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    3956:	e0 91 95 0d 	lds	r30, 0x0D95
    395a:	f0 91 96 0d 	lds	r31, 0x0D96
    395e:	14 82       	std	Z+4, r1	; 0x04
    3960:	e8 e7       	ldi	r30, 0x78	; 120
    3962:	fc e0       	ldi	r31, 0x0C	; 12

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    3964:	89 81       	ldd	r24, Y+1	; 0x01
    3966:	99 27       	eor	r25, r25
    3968:	87 fd       	sbrc	r24, 7
    396a:	90 95       	com	r25
    396c:	a9 2f       	mov	r26, r25
    396e:	b9 2f       	mov	r27, r25
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3970:	63 e0       	ldi	r22, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    3972:	20 81       	ld	r18, Z
    3974:	22 30       	cpi	r18, 0x02	; 2
    3976:	99 f4       	brne	.+38     	; 0x399e <nrk_sem_post+0xa2>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    3978:	22 85       	ldd	r18, Z+10	; 0x0a
    397a:	33 85       	ldd	r19, Z+11	; 0x0b
    397c:	44 85       	ldd	r20, Z+12	; 0x0c
    397e:	55 85       	ldd	r21, Z+13	; 0x0d
    3980:	28 17       	cp	r18, r24
    3982:	39 07       	cpc	r19, r25
    3984:	4a 07       	cpc	r20, r26
    3986:	5b 07       	cpc	r21, r27
    3988:	51 f4       	brne	.+20     	; 0x399e <nrk_sem_post+0xa2>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    398a:	62 83       	std	Z+2, r22	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    398c:	16 86       	std	Z+14, r1	; 0x0e
    398e:	17 86       	std	Z+15, r1	; 0x0f
    3990:	10 8a       	std	Z+16, r1	; 0x10
    3992:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    3994:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    3996:	12 86       	std	Z+10, r1	; 0x0a
    3998:	13 86       	std	Z+11, r1	; 0x0b
    399a:	14 86       	std	Z+12, r1	; 0x0c
    399c:	15 86       	std	Z+13, r1	; 0x0d
    399e:	bb 96       	adiw	r30, 0x2b	; 43
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    39a0:	2d e0       	ldi	r18, 0x0D	; 13
    39a2:	ea 37       	cpi	r30, 0x7A	; 122
    39a4:	f2 07       	cpc	r31, r18
    39a6:	29 f7       	brne	.-54     	; 0x3972 <nrk_sem_post+0x76>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    39a8:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <nrk_int_enable>
	}
		
return NRK_OK;
    39ac:	81 e0       	ldi	r24, 0x01	; 1
}
    39ae:	0f 90       	pop	r0
    39b0:	cf 91       	pop	r28
    39b2:	df 91       	pop	r29
    39b4:	1f 91       	pop	r17
    39b6:	0f 91       	pop	r16
    39b8:	08 95       	ret

000039ba <nrk_sem_pend>:
}



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    39ba:	0f 93       	push	r16
    39bc:	1f 93       	push	r17
    39be:	df 93       	push	r29
    39c0:	cf 93       	push	r28
    39c2:	0f 92       	push	r0
    39c4:	cd b7       	in	r28, 0x3d	; 61
    39c6:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    39c8:	0e 94 47 1c 	call	0x388e	; 0x388e <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    39cc:	8f 3f       	cpi	r24, 0xFF	; 255
    39ce:	11 f4       	brne	.+4      	; 0x39d4 <nrk_sem_pend+0x1a>
    39d0:	81 e0       	ldi	r24, 0x01	; 1
    39d2:	03 c0       	rjmp	.+6      	; 0x39da <nrk_sem_pend+0x20>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    39d4:	85 30       	cpi	r24, 0x05	; 5
    39d6:	29 f4       	brne	.+10     	; 0x39e2 <nrk_sem_pend+0x28>
    39d8:	82 e0       	ldi	r24, 0x02	; 2
    39da:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <_nrk_errno_set>
    39de:	8f ef       	ldi	r24, 0xFF	; 255
    39e0:	40 c0       	rjmp	.+128    	; 0x3a62 <nrk_sem_pend+0xa8>
	
	nrk_int_disable();
    39e2:	89 83       	std	Y+1, r24	; 0x01
    39e4:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    39e8:	89 81       	ldd	r24, Y+1	; 0x01
    39ea:	08 2f       	mov	r16, r24
    39ec:	11 27       	eor	r17, r17
    39ee:	07 fd       	sbrc	r16, 7
    39f0:	10 95       	com	r17
    39f2:	f8 01       	movw	r30, r16
    39f4:	ee 0f       	add	r30, r30
    39f6:	ff 1f       	adc	r31, r31
    39f8:	e0 0f       	add	r30, r16
    39fa:	f1 1f       	adc	r31, r17
    39fc:	eb 58       	subi	r30, 0x8B	; 139
    39fe:	f2 4f       	sbci	r31, 0xF2	; 242
    3a00:	92 81       	ldd	r25, Z+2	; 0x02
    3a02:	99 23       	and	r25, r25
    3a04:	b1 f4       	brne	.+44     	; 0x3a32 <nrk_sem_pend+0x78>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    3a06:	e0 91 95 0d 	lds	r30, 0x0D95
    3a0a:	f0 91 96 0d 	lds	r31, 0x0D96
    3a0e:	97 81       	ldd	r25, Z+7	; 0x07
    3a10:	92 60       	ori	r25, 0x02	; 2
    3a12:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    3a14:	99 27       	eor	r25, r25
    3a16:	87 fd       	sbrc	r24, 7
    3a18:	90 95       	com	r25
    3a1a:	a9 2f       	mov	r26, r25
    3a1c:	b9 2f       	mov	r27, r25
    3a1e:	81 8b       	std	Z+17, r24	; 0x11
    3a20:	92 8b       	std	Z+18, r25	; 0x12
    3a22:	a3 8b       	std	Z+19, r26	; 0x13
    3a24:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    3a26:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <nrk_int_enable>
		nrk_wait_until_ticks(0);
    3a2a:	80 e0       	ldi	r24, 0x00	; 0
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    3a32:	f8 01       	movw	r30, r16
    3a34:	ee 0f       	add	r30, r30
    3a36:	ff 1f       	adc	r31, r31
    3a38:	e0 0f       	add	r30, r16
    3a3a:	f1 1f       	adc	r31, r17
    3a3c:	eb 58       	subi	r30, 0x8B	; 139
    3a3e:	f2 4f       	sbci	r31, 0xF2	; 242
    3a40:	82 81       	ldd	r24, Z+2	; 0x02
    3a42:	81 50       	subi	r24, 0x01	; 1
    3a44:	82 83       	std	Z+2, r24	; 0x02
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    3a46:	a0 91 95 0d 	lds	r26, 0x0D95
    3a4a:	b0 91 96 0d 	lds	r27, 0x0D96
    3a4e:	81 81       	ldd	r24, Z+1	; 0x01
    3a50:	1b 96       	adiw	r26, 0x0b	; 11
    3a52:	8c 93       	st	X, r24
    3a54:	1b 97       	sbiw	r26, 0x0b	; 11
	nrk_cur_task_TCB->elevated_prio_flag=1;
    3a56:	81 e0       	ldi	r24, 0x01	; 1
    3a58:	14 96       	adiw	r26, 0x04	; 4
    3a5a:	8c 93       	st	X, r24
	nrk_int_enable();
    3a5c:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <nrk_int_enable>

	return NRK_OK;
    3a60:	81 e0       	ldi	r24, 0x01	; 1
}
    3a62:	0f 90       	pop	r0
    3a64:	cf 91       	pop	r28
    3a66:	df 91       	pop	r29
    3a68:	1f 91       	pop	r17
    3a6a:	0f 91       	pop	r16
    3a6c:	08 95       	ret

00003a6e <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    3a6e:	0e 94 47 1c 	call	0x388e	; 0x388e <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3a72:	8f 3f       	cpi	r24, 0xFF	; 255
    3a74:	11 f4       	brne	.+4      	; 0x3a7a <nrk_sem_query+0xc>
    3a76:	81 e0       	ldi	r24, 0x01	; 1
    3a78:	03 c0       	rjmp	.+6      	; 0x3a80 <nrk_sem_query+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3a7a:	85 30       	cpi	r24, 0x05	; 5
    3a7c:	29 f4       	brne	.+10     	; 0x3a88 <nrk_sem_query+0x1a>
    3a7e:	82 e0       	ldi	r24, 0x02	; 2
    3a80:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <_nrk_errno_set>
    3a84:	8f ef       	ldi	r24, 0xFF	; 255
    3a86:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    3a88:	99 27       	eor	r25, r25
    3a8a:	87 fd       	sbrc	r24, 7
    3a8c:	90 95       	com	r25
    3a8e:	fc 01       	movw	r30, r24
    3a90:	ee 0f       	add	r30, r30
    3a92:	ff 1f       	adc	r31, r31
    3a94:	e8 0f       	add	r30, r24
    3a96:	f9 1f       	adc	r31, r25
    3a98:	eb 58       	subi	r30, 0x8B	; 139
    3a9a:	f2 4f       	sbci	r31, 0xF2	; 242
    3a9c:	82 81       	ldd	r24, Z+2	; 0x02
}
    3a9e:	08 95       	ret

00003aa0 <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    3aa0:	e0 91 8a 0d 	lds	r30, 0x0D8A
    3aa4:	f0 91 8b 0d 	lds	r31, 0x0D8B
}
    3aa8:	80 81       	ld	r24, Z
    3aaa:	08 95       	ret

00003aac <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    3aac:	e0 91 8a 0d 	lds	r30, 0x0D8A
    3ab0:	f0 91 8b 0d 	lds	r31, 0x0D8B
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    3ab4:	03 c0       	rjmp	.+6      	; 0x3abc <nrk_print_readyQ+0x10>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    3ab6:	03 80       	ldd	r0, Z+3	; 0x03
    3ab8:	f4 81       	ldd	r31, Z+4	; 0x04
    3aba:	e0 2d       	mov	r30, r0
void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    3abc:	30 97       	sbiw	r30, 0x00	; 0
    3abe:	d9 f7       	brne	.-10     	; 0x3ab6 <nrk_print_readyQ+0xa>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    3ac0:	08 95       	ret

00003ac2 <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    3ac2:	bf 92       	push	r11
    3ac4:	cf 92       	push	r12
    3ac6:	df 92       	push	r13
    3ac8:	ef 92       	push	r14
    3aca:	ff 92       	push	r15
    3acc:	0f 93       	push	r16
    3ace:	1f 93       	push	r17
    3ad0:	cf 93       	push	r28
    3ad2:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    3ad4:	e0 91 6f 0c 	lds	r30, 0x0C6F
    3ad8:	f0 91 70 0c 	lds	r31, 0x0C70
    3adc:	30 97       	sbiw	r30, 0x00	; 0
    3ade:	09 f4       	brne	.+2      	; 0x3ae2 <nrk_add_to_readyQ+0x20>
    3ae0:	9b c0       	rjmp	.+310    	; 0x3c18 <nrk_add_to_readyQ+0x156>
    {
        return;
    }


    NextNode = _head_node;
    3ae2:	40 91 8a 0d 	lds	r20, 0x0D8A
    3ae6:	50 91 8b 0d 	lds	r21, 0x0D8B
    CurNode = _free_node;

    if (_head_node != NULL)
    3aea:	41 15       	cp	r20, r1
    3aec:	51 05       	cpc	r21, r1
    3aee:	09 f4       	brne	.+2      	; 0x3af2 <nrk_add_to_readyQ+0x30>
    3af0:	57 c0       	rjmp	.+174    	; 0x3ba0 <nrk_add_to_readyQ+0xde>
    3af2:	da 01       	movw	r26, r20
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    3af4:	2b e2       	ldi	r18, 0x2B	; 43
    3af6:	30 e0       	ldi	r19, 0x00	; 0
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    3af8:	c8 2f       	mov	r28, r24
    3afa:	dd 27       	eor	r29, r29
    3afc:	c7 fd       	sbrc	r28, 7
    3afe:	d0 95       	com	r29
    3b00:	c2 9f       	mul	r28, r18
    3b02:	b0 01       	movw	r22, r0
    3b04:	c3 9f       	mul	r28, r19
    3b06:	70 0d       	add	r23, r0
    3b08:	d2 9f       	mul	r29, r18
    3b0a:	70 0d       	add	r23, r0
    3b0c:	11 24       	eor	r1, r1
    3b0e:	6f 58       	subi	r22, 0x8F	; 143
    3b10:	73 4f       	sbci	r23, 0xF3	; 243
    3b12:	8b 01       	movw	r16, r22
    3b14:	06 5f       	subi	r16, 0xF6	; 246
    3b16:	1f 4f       	sbci	r17, 0xFF	; 255
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    3b18:	94 e0       	ldi	r25, 0x04	; 4
    3b1a:	e9 2e       	mov	r14, r25
    3b1c:	f1 2c       	mov	r15, r1
    3b1e:	e6 0e       	add	r14, r22
    3b20:	f7 1e       	adc	r15, r23
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    3b22:	9b e0       	ldi	r25, 0x0B	; 11
    3b24:	c9 2e       	mov	r12, r25
    3b26:	d1 2c       	mov	r13, r1
    3b28:	c6 0e       	add	r12, r22
    3b2a:	d7 1e       	adc	r13, r23
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    3b2c:	6c 91       	ld	r22, X
    3b2e:	70 e0       	ldi	r23, 0x00	; 0
    3b30:	62 9f       	mul	r22, r18
    3b32:	e0 01       	movw	r28, r0
    3b34:	63 9f       	mul	r22, r19
    3b36:	d0 0d       	add	r29, r0
    3b38:	72 9f       	mul	r23, r18
    3b3a:	d0 0d       	add	r29, r0
    3b3c:	11 24       	eor	r1, r1
    3b3e:	cf 58       	subi	r28, 0x8F	; 143
    3b40:	d3 4f       	sbci	r29, 0xF3	; 243
    3b42:	9c 81       	ldd	r25, Y+4	; 0x04
    3b44:	99 23       	and	r25, r25
    3b46:	29 f0       	breq	.+10     	; 0x3b52 <nrk_add_to_readyQ+0x90>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    3b48:	bb 84       	ldd	r11, Y+11	; 0x0b
    3b4a:	e8 01       	movw	r28, r16
    3b4c:	98 81       	ld	r25, Y
    3b4e:	b9 16       	cp	r11, r25
    3b50:	48 f1       	brcs	.+82     	; 0x3ba4 <nrk_add_to_readyQ+0xe2>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    3b52:	e7 01       	movw	r28, r14
    3b54:	98 81       	ld	r25, Y
    3b56:	99 23       	and	r25, r25
    3b58:	71 f0       	breq	.+28     	; 0x3b76 <nrk_add_to_readyQ+0xb4>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    3b5a:	62 9f       	mul	r22, r18
    3b5c:	e0 01       	movw	r28, r0
    3b5e:	63 9f       	mul	r22, r19
    3b60:	d0 0d       	add	r29, r0
    3b62:	72 9f       	mul	r23, r18
    3b64:	d0 0d       	add	r29, r0
    3b66:	11 24       	eor	r1, r1
    3b68:	cf 58       	subi	r28, 0x8F	; 143
    3b6a:	d3 4f       	sbci	r29, 0xF3	; 243
    3b6c:	ba 84       	ldd	r11, Y+10	; 0x0a
    3b6e:	e6 01       	movw	r28, r12
    3b70:	98 81       	ld	r25, Y
    3b72:	b9 16       	cp	r11, r25
    3b74:	b8 f0       	brcs	.+46     	; 0x3ba4 <nrk_add_to_readyQ+0xe2>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    3b76:	62 9f       	mul	r22, r18
    3b78:	e0 01       	movw	r28, r0
    3b7a:	63 9f       	mul	r22, r19
    3b7c:	d0 0d       	add	r29, r0
    3b7e:	72 9f       	mul	r23, r18
    3b80:	d0 0d       	add	r29, r0
    3b82:	11 24       	eor	r1, r1
    3b84:	cf 58       	subi	r28, 0x8F	; 143
    3b86:	d3 4f       	sbci	r29, 0xF3	; 243
    3b88:	6a 85       	ldd	r22, Y+10	; 0x0a
    3b8a:	e8 01       	movw	r28, r16
    3b8c:	98 81       	ld	r25, Y
    3b8e:	69 17       	cp	r22, r25
    3b90:	48 f0       	brcs	.+18     	; 0x3ba4 <nrk_add_to_readyQ+0xe2>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    3b92:	13 96       	adiw	r26, 0x03	; 3
    3b94:	0d 90       	ld	r0, X+
    3b96:	bc 91       	ld	r27, X
    3b98:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    3b9a:	10 97       	sbiw	r26, 0x00	; 0
    3b9c:	39 f6       	brne	.-114    	; 0x3b2c <nrk_add_to_readyQ+0x6a>
    3b9e:	02 c0       	rjmp	.+4      	; 0x3ba4 <nrk_add_to_readyQ+0xe2>


    NextNode = _head_node;
    CurNode = _free_node;

    if (_head_node != NULL)
    3ba0:	a0 e0       	ldi	r26, 0x00	; 0
    3ba2:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    3ba4:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    3ba6:	c3 81       	ldd	r28, Z+3	; 0x03
    3ba8:	d4 81       	ldd	r29, Z+4	; 0x04
    3baa:	d0 93 70 0c 	sts	0x0C70, r29
    3bae:	c0 93 6f 0c 	sts	0x0C6F, r28

    if (NextNode == _head_node)
    3bb2:	a4 17       	cp	r26, r20
    3bb4:	b5 07       	cpc	r27, r21
    3bb6:	b1 f4       	brne	.+44     	; 0x3be4 <nrk_add_to_readyQ+0x122>
    {
        //at start
        if (_head_node != NULL)
    3bb8:	10 97       	sbiw	r26, 0x00	; 0
    3bba:	49 f0       	breq	.+18     	; 0x3bce <nrk_add_to_readyQ+0x10c>
        {
            CurNode->Next = _head_node;
    3bbc:	b4 83       	std	Z+4, r27	; 0x04
    3bbe:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    3bc0:	12 82       	std	Z+2, r1	; 0x02
    3bc2:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    3bc4:	12 96       	adiw	r26, 0x02	; 2
    3bc6:	fc 93       	st	X, r31
    3bc8:	ee 93       	st	-X, r30
    3bca:	11 97       	sbiw	r26, 0x01	; 1
    3bcc:	06 c0       	rjmp	.+12     	; 0x3bda <nrk_add_to_readyQ+0x118>
        }
        else
        {
            CurNode->Next = NULL;
    3bce:	14 82       	std	Z+4, r1	; 0x04
    3bd0:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    3bd2:	12 82       	std	Z+2, r1	; 0x02
    3bd4:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    3bd6:	fa 83       	std	Y+2, r31	; 0x02
    3bd8:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    3bda:	f0 93 8b 0d 	sts	0x0D8B, r31
    3bde:	e0 93 8a 0d 	sts	0x0D8A, r30
    3be2:	1a c0       	rjmp	.+52     	; 0x3c18 <nrk_add_to_readyQ+0x156>
    3be4:	11 96       	adiw	r26, 0x01	; 1
    3be6:	8d 91       	ld	r24, X+
    3be8:	9c 91       	ld	r25, X
    3bea:	12 97       	sbiw	r26, 0x02	; 2

    }
    else
    {
        if (NextNode != _free_node)
    3bec:	ac 17       	cp	r26, r28
    3bee:	bd 07       	cpc	r27, r29
    3bf0:	59 f0       	breq	.+22     	; 0x3c08 <nrk_add_to_readyQ+0x146>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    3bf2:	92 83       	std	Z+2, r25	; 0x02
    3bf4:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    3bf6:	b4 83       	std	Z+4, r27	; 0x04
    3bf8:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    3bfa:	11 96       	adiw	r26, 0x01	; 1
    3bfc:	cd 91       	ld	r28, X+
    3bfe:	dc 91       	ld	r29, X
    3c00:	12 97       	sbiw	r26, 0x02	; 2
    3c02:	fc 83       	std	Y+4, r31	; 0x04
    3c04:	eb 83       	std	Y+3, r30	; 0x03
    3c06:	04 c0       	rjmp	.+8      	; 0x3c10 <nrk_add_to_readyQ+0x14e>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    3c08:	14 82       	std	Z+4, r1	; 0x04
    3c0a:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    3c0c:	92 83       	std	Z+2, r25	; 0x02
    3c0e:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    3c10:	12 96       	adiw	r26, 0x02	; 2
    3c12:	fc 93       	st	X, r31
    3c14:	ee 93       	st	-X, r30
    3c16:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    3c18:	df 91       	pop	r29
    3c1a:	cf 91       	pop	r28
    3c1c:	1f 91       	pop	r17
    3c1e:	0f 91       	pop	r16
    3c20:	ff 90       	pop	r15
    3c22:	ef 90       	pop	r14
    3c24:	df 90       	pop	r13
    3c26:	cf 90       	pop	r12
    3c28:	bf 90       	pop	r11
    3c2a:	08 95       	ret

00003c2c <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    3c2c:	cf 93       	push	r28
    3c2e:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    3c30:	e0 91 8a 0d 	lds	r30, 0x0D8A
    3c34:	f0 91 8b 0d 	lds	r31, 0x0D8B
    3c38:	30 97       	sbiw	r30, 0x00	; 0
    3c3a:	09 f4       	brne	.+2      	; 0x3c3e <nrk_rem_from_readyQ+0x12>
    3c3c:	44 c0       	rjmp	.+136    	; 0x3cc6 <nrk_rem_from_readyQ+0x9a>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    3c3e:	99 27       	eor	r25, r25
    3c40:	87 fd       	sbrc	r24, 7
    3c42:	90 95       	com	r25
    3c44:	20 81       	ld	r18, Z
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	28 17       	cp	r18, r24
    3c4a:	39 07       	cpc	r19, r25
    3c4c:	81 f4       	brne	.+32     	; 0x3c6e <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    3c4e:	a3 81       	ldd	r26, Z+3	; 0x03
    3c50:	b4 81       	ldd	r27, Z+4	; 0x04
    3c52:	b0 93 8b 0d 	sts	0x0D8B, r27
    3c56:	a0 93 8a 0d 	sts	0x0D8A, r26
        _head_node->Prev = NULL;
    3c5a:	12 96       	adiw	r26, 0x02	; 2
    3c5c:	1c 92       	st	X, r1
    3c5e:	1e 92       	st	-X, r1
    3c60:	11 97       	sbiw	r26, 0x01	; 1
    3c62:	18 c0       	rjmp	.+48     	; 0x3c94 <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    3c64:	03 80       	ldd	r0, Z+3	; 0x03
    3c66:	f4 81       	ldd	r31, Z+4	; 0x04
    3c68:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    3c6a:	30 97       	sbiw	r30, 0x00	; 0
    3c6c:	61 f1       	breq	.+88     	; 0x3cc6 <nrk_rem_from_readyQ+0x9a>
    3c6e:	20 81       	ld	r18, Z
    3c70:	30 e0       	ldi	r19, 0x00	; 0
    3c72:	28 17       	cp	r18, r24
    3c74:	39 07       	cpc	r19, r25
    3c76:	b1 f7       	brne	.-20     	; 0x3c64 <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    3c78:	c1 81       	ldd	r28, Z+1	; 0x01
    3c7a:	d2 81       	ldd	r29, Z+2	; 0x02
    3c7c:	83 81       	ldd	r24, Z+3	; 0x03
    3c7e:	94 81       	ldd	r25, Z+4	; 0x04
    3c80:	9c 83       	std	Y+4, r25	; 0x04
    3c82:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    3c84:	a3 81       	ldd	r26, Z+3	; 0x03
    3c86:	b4 81       	ldd	r27, Z+4	; 0x04
    3c88:	10 97       	sbiw	r26, 0x00	; 0
    3c8a:	21 f0       	breq	.+8      	; 0x3c94 <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    3c8c:	12 96       	adiw	r26, 0x02	; 2
    3c8e:	dc 93       	st	X, r29
    3c90:	ce 93       	st	-X, r28
    3c92:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    3c94:	a0 91 6f 0c 	lds	r26, 0x0C6F
    3c98:	b0 91 70 0c 	lds	r27, 0x0C70
    3c9c:	10 97       	sbiw	r26, 0x00	; 0
    3c9e:	39 f4       	brne	.+14     	; 0x3cae <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    3ca0:	f0 93 70 0c 	sts	0x0C70, r31
    3ca4:	e0 93 6f 0c 	sts	0x0C6F, r30
        _free_node->Next = NULL;
    3ca8:	14 82       	std	Z+4, r1	; 0x04
    3caa:	13 82       	std	Z+3, r1	; 0x03
    3cac:	0a c0       	rjmp	.+20     	; 0x3cc2 <nrk_rem_from_readyQ+0x96>
    }
    else
    {
        CurNode->Next = _free_node;
    3cae:	b4 83       	std	Z+4, r27	; 0x04
    3cb0:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    3cb2:	12 96       	adiw	r26, 0x02	; 2
    3cb4:	fc 93       	st	X, r31
    3cb6:	ee 93       	st	-X, r30
    3cb8:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    3cba:	f0 93 70 0c 	sts	0x0C70, r31
    3cbe:	e0 93 6f 0c 	sts	0x0C6F, r30
    }
    _free_node->Prev = NULL;
    3cc2:	12 82       	std	Z+2, r1	; 0x02
    3cc4:	11 82       	std	Z+1, r1	; 0x01
}
    3cc6:	df 91       	pop	r29
    3cc8:	cf 91       	pop	r28
    3cca:	08 95       	ret

00003ccc <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    3ccc:	ef 92       	push	r14
    3cce:	ff 92       	push	r15
    3cd0:	0f 93       	push	r16
    3cd2:	1f 93       	push	r17
    3cd4:	cf 93       	push	r28
    3cd6:	df 93       	push	r29
    3cd8:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    3cda:	69 81       	ldd	r22, Y+1	; 0x01
    3cdc:	7a 81       	ldd	r23, Y+2	; 0x02
    3cde:	4b 81       	ldd	r20, Y+3	; 0x03
    3ce0:	5c 81       	ldd	r21, Y+4	; 0x04
    3ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ce6:	0e 94 cd 2a 	call	0x559a	; 0x559a <nrk_task_stk_init>
    3cea:	bc 01       	movw	r22, r24
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    3cec:	8f 81       	ldd	r24, Y+7	; 0x07
    3cee:	88 23       	and	r24, r24
    3cf0:	69 f0       	breq	.+26     	; 0x3d0c <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    3cf2:	4b 81       	ldd	r20, Y+3	; 0x03
    3cf4:	5c 81       	ldd	r21, Y+4	; 0x04
    3cf6:	ce 01       	movw	r24, r28
    3cf8:	20 e0       	ldi	r18, 0x00	; 0
    3cfa:	30 e0       	ldi	r19, 0x00	; 0
    3cfc:	00 e0       	ldi	r16, 0x00	; 0
    3cfe:	10 e0       	ldi	r17, 0x00	; 0
    3d00:	ee 24       	eor	r14, r14
    3d02:	ff 24       	eor	r15, r15
    3d04:	0e 94 6d 16 	call	0x2cda	; 0x2cda <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    3d08:	1f 82       	std	Y+7, r1	; 0x07
    3d0a:	14 c0       	rjmp	.+40     	; 0x3d34 <nrk_activate_task+0x68>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    3d0c:	28 81       	ld	r18, Y
    3d0e:	33 27       	eor	r19, r19
    3d10:	27 fd       	sbrc	r18, 7
    3d12:	30 95       	com	r19
    3d14:	8b e2       	ldi	r24, 0x2B	; 43
    3d16:	90 e0       	ldi	r25, 0x00	; 0
    3d18:	28 9f       	mul	r18, r24
    3d1a:	f0 01       	movw	r30, r0
    3d1c:	29 9f       	mul	r18, r25
    3d1e:	f0 0d       	add	r31, r0
    3d20:	38 9f       	mul	r19, r24
    3d22:	f0 0d       	add	r31, r0
    3d24:	11 24       	eor	r1, r1
    3d26:	ef 58       	subi	r30, 0x8F	; 143
    3d28:	f3 4f       	sbci	r31, 0xF3	; 243
    3d2a:	81 85       	ldd	r24, Z+9	; 0x09
    3d2c:	83 30       	cpi	r24, 0x03	; 3
    3d2e:	f9 f4       	brne	.+62     	; 0x3d6e <nrk_activate_task+0xa2>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    3d30:	71 83       	std	Z+1, r23	; 0x01
    3d32:	60 83       	st	Z, r22
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    3d34:	28 81       	ld	r18, Y
    3d36:	33 27       	eor	r19, r19
    3d38:	27 fd       	sbrc	r18, 7
    3d3a:	30 95       	com	r19
    3d3c:	8b e2       	ldi	r24, 0x2B	; 43
    3d3e:	90 e0       	ldi	r25, 0x00	; 0
    3d40:	28 9f       	mul	r18, r24
    3d42:	f0 01       	movw	r30, r0
    3d44:	29 9f       	mul	r18, r25
    3d46:	f0 0d       	add	r31, r0
    3d48:	38 9f       	mul	r19, r24
    3d4a:	f0 0d       	add	r31, r0
    3d4c:	11 24       	eor	r1, r1
    3d4e:	ef 58       	subi	r30, 0x8F	; 143
    3d50:	f3 4f       	sbci	r31, 0xF3	; 243
    3d52:	85 89       	ldd	r24, Z+21	; 0x15
    3d54:	96 89       	ldd	r25, Z+22	; 0x16
    3d56:	a7 89       	ldd	r26, Z+23	; 0x17
    3d58:	b0 8d       	ldd	r27, Z+24	; 0x18
    3d5a:	00 97       	sbiw	r24, 0x00	; 0
    3d5c:	a1 05       	cpc	r26, r1
    3d5e:	b1 05       	cpc	r27, r1
    3d60:	41 f4       	brne	.+16     	; 0x3d72 <nrk_activate_task+0xa6>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    3d62:	82 e0       	ldi	r24, 0x02	; 2
    3d64:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    3d66:	88 81       	ld	r24, Y
    3d68:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <nrk_add_to_readyQ>
    3d6c:	02 c0       	rjmp	.+4      	; 0x3d72 <nrk_activate_task+0xa6>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    3d6e:	8f ef       	ldi	r24, 0xFF	; 255
    3d70:	01 c0       	rjmp	.+2      	; 0x3d74 <nrk_activate_task+0xa8>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    3d72:	81 e0       	ldi	r24, 0x01	; 1
}
    3d74:	df 91       	pop	r29
    3d76:	cf 91       	pop	r28
    3d78:	1f 91       	pop	r17
    3d7a:	0f 91       	pop	r16
    3d7c:	ff 90       	pop	r15
    3d7e:	ef 90       	pop	r14
    3d80:	08 95       	ret

00003d82 <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    3d82:	1f 93       	push	r17
    3d84:	df 93       	push	r29
    3d86:	cf 93       	push	r28
    3d88:	cd b7       	in	r28, 0x3d	; 61
    3d8a:	de b7       	in	r29, 0x3e	; 62
    3d8c:	28 97       	sbiw	r28, 0x08	; 8
    3d8e:	0f b6       	in	r0, 0x3f	; 63
    3d90:	f8 94       	cli
    3d92:	de bf       	out	0x3e, r29	; 62
    3d94:	0f be       	out	0x3f, r0	; 63
    3d96:	cd bf       	out	0x3d, r28	; 61
    3d98:	29 83       	std	Y+1, r18	; 0x01
    3d9a:	3a 83       	std	Y+2, r19	; 0x02
    3d9c:	4b 83       	std	Y+3, r20	; 0x03
    3d9e:	5c 83       	std	Y+4, r21	; 0x04
    3da0:	6d 83       	std	Y+5, r22	; 0x05
    3da2:	7e 83       	std	Y+6, r23	; 0x06
    3da4:	8f 83       	std	Y+7, r24	; 0x07
    3da6:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    3da8:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    3dac:	0e 94 e5 27 	call	0x4fca	; 0x4fca <_nrk_os_timer_get>
    3db0:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks_long(&t);
    3db2:	ce 01       	movw	r24, r28
    3db4:	01 96       	adiw	r24, 0x01	; 1
    3db6:	0e 94 07 23 	call	0x460e	; 0x460e <_nrk_time_to_ticks_long>
    if (nw <= TIME_PAD)
    3dba:	63 30       	cpi	r22, 0x03	; 3
    3dbc:	71 05       	cpc	r23, r1
    3dbe:	80 f0       	brcs	.+32     	; 0x3de0 <nrk_set_next_wakeup+0x5e>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    3dc0:	e0 91 95 0d 	lds	r30, 0x0D95
    3dc4:	f0 91 96 0d 	lds	r31, 0x0D96
    3dc8:	61 0f       	add	r22, r17
    3dca:	71 1d       	adc	r23, r1
    3dcc:	80 e0       	ldi	r24, 0x00	; 0
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	65 8b       	std	Z+21, r22	; 0x15
    3dd2:	76 8b       	std	Z+22, r23	; 0x16
    3dd4:	87 8b       	std	Z+23, r24	; 0x17
    3dd6:	90 8f       	std	Z+24, r25	; 0x18
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    3dd8:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <nrk_int_enable>

    return NRK_OK;
    3ddc:	81 e0       	ldi	r24, 0x01	; 1
    3dde:	01 c0       	rjmp	.+2      	; 0x3de2 <nrk_set_next_wakeup+0x60>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks_long(&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    3de0:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    3de2:	28 96       	adiw	r28, 0x08	; 8
    3de4:	0f b6       	in	r0, 0x3f	; 63
    3de6:	f8 94       	cli
    3de8:	de bf       	out	0x3e, r29	; 62
    3dea:	0f be       	out	0x3f, r0	; 63
    3dec:	cd bf       	out	0x3d, r28	; 61
    3dee:	cf 91       	pop	r28
    3df0:	df 91       	pop	r29
    3df2:	1f 91       	pop	r17
    3df4:	08 95       	ret

00003df6 <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    3df6:	0e 94 9f 2a 	call	0x553e	; 0x553e <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    3dfa:	e0 91 95 0d 	lds	r30, 0x0D95
    3dfe:	f0 91 96 0d 	lds	r31, 0x0D96
    3e02:	85 81       	ldd	r24, Z+5	; 0x05
    3e04:	88 23       	and	r24, r24
    3e06:	b9 f7       	brne	.-18     	; 0x3df6 <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    3e08:	08 95       	ret

00003e0a <nrk_wait>:
    return NRK_OK;
}


int8_t nrk_wait (nrk_time_t t)
{
    3e0a:	1f 93       	push	r17
    3e0c:	df 93       	push	r29
    3e0e:	cf 93       	push	r28
    3e10:	cd b7       	in	r28, 0x3d	; 61
    3e12:	de b7       	in	r29, 0x3e	; 62
    3e14:	28 97       	sbiw	r28, 0x08	; 8
    3e16:	0f b6       	in	r0, 0x3f	; 63
    3e18:	f8 94       	cli
    3e1a:	de bf       	out	0x3e, r29	; 62
    3e1c:	0f be       	out	0x3f, r0	; 63
    3e1e:	cd bf       	out	0x3d, r28	; 61
    3e20:	29 83       	std	Y+1, r18	; 0x01
    3e22:	3a 83       	std	Y+2, r19	; 0x02
    3e24:	4b 83       	std	Y+3, r20	; 0x03
    3e26:	5c 83       	std	Y+4, r21	; 0x04
    3e28:	6d 83       	std	Y+5, r22	; 0x05
    3e2a:	7e 83       	std	Y+6, r23	; 0x06
    3e2c:	8f 83       	std	Y+7, r24	; 0x07
    3e2e:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint32_t nw;

    nrk_stack_check ();
    3e30:	0e 94 ef 19 	call	0x33de	; 0x33de <nrk_stack_check>

    nrk_int_disable ();
    3e34:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3e38:	e0 91 95 0d 	lds	r30, 0x0D95
    3e3c:	f0 91 96 0d 	lds	r31, 0x0D96
    3e40:	81 e0       	ldi	r24, 0x01	; 1
    3e42:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    3e44:	81 e0       	ldi	r24, 0x01	; 1
    3e46:	90 e0       	ldi	r25, 0x00	; 0
    3e48:	92 a7       	std	Z+42, r25	; 0x2a
    3e4a:	81 a7       	std	Z+41, r24	; 0x29
    timer = _nrk_os_timer_get ();
    3e4c:	0e 94 e5 27 	call	0x4fca	; 0x4fca <_nrk_os_timer_get>
    3e50:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks_long (&t);
    3e52:	ce 01       	movw	r24, r28
    3e54:	01 96       	adiw	r24, 0x01	; 1
    3e56:	0e 94 07 23 	call	0x460e	; 0x460e <_nrk_time_to_ticks_long>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    3e5a:	e0 91 95 0d 	lds	r30, 0x0D95
    3e5e:	f0 91 96 0d 	lds	r31, 0x0D96
    3e62:	61 0f       	add	r22, r17
    3e64:	71 1d       	adc	r23, r1
    3e66:	81 1d       	adc	r24, r1
    3e68:	91 1d       	adc	r25, r1
    3e6a:	65 8b       	std	Z+21, r22	; 0x15
    3e6c:	76 8b       	std	Z+22, r23	; 0x16
    3e6e:	87 8b       	std	Z+23, r24	; 0x17
    3e70:	90 8f       	std	Z+24, r25	; 0x18
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    3e72:	18 3f       	cpi	r17, 0xF8	; 248
    3e74:	88 f4       	brcc	.+34     	; 0x3e98 <nrk_wait+0x8e>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3e76:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <_nrk_get_next_wakeup>
    3e7a:	21 2f       	mov	r18, r17
    3e7c:	30 e0       	ldi	r19, 0x00	; 0
    3e7e:	2f 5f       	subi	r18, 0xFF	; 255
    3e80:	3f 4f       	sbci	r19, 0xFF	; 255
    3e82:	48 2f       	mov	r20, r24
    3e84:	50 e0       	ldi	r21, 0x00	; 0
    3e86:	24 17       	cp	r18, r20
    3e88:	35 07       	cpc	r19, r21
    3e8a:	34 f4       	brge	.+12     	; 0x3e98 <nrk_wait+0x8e>
        {
            timer += TIME_PAD;
    3e8c:	81 2f       	mov	r24, r17
    3e8e:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    3e90:	80 93 1b 0c 	sts	0x0C1B, r24
            _nrk_set_next_wakeup (timer);
    3e94:	0e 94 80 27 	call	0x4f00	; 0x4f00 <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    3e98:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    3e9c:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3ea0:	81 e0       	ldi	r24, 0x01	; 1
    3ea2:	28 96       	adiw	r28, 0x08	; 8
    3ea4:	0f b6       	in	r0, 0x3f	; 63
    3ea6:	f8 94       	cli
    3ea8:	de bf       	out	0x3e, r29	; 62
    3eaa:	0f be       	out	0x3f, r0	; 63
    3eac:	cd bf       	out	0x3d, r28	; 61
    3eae:	cf 91       	pop	r28
    3eb0:	df 91       	pop	r29
    3eb2:	1f 91       	pop	r17
    3eb4:	08 95       	ret

00003eb6 <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    3eb6:	1f 93       	push	r17
    uint8_t timer;
    nrk_int_disable ();
    3eb8:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3ebc:	e0 91 95 0d 	lds	r30, 0x0D95
    3ec0:	f0 91 96 0d 	lds	r31, 0x0D96
    3ec4:	81 e0       	ldi	r24, 0x01	; 1
    3ec6:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    3ec8:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    3eca:	0e 94 e5 27 	call	0x4fca	; 0x4fca <_nrk_os_timer_get>
    3ece:	18 2f       	mov	r17, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    3ed0:	88 3f       	cpi	r24, 0xF8	; 248
    3ed2:	88 f4       	brcc	.+34     	; 0x3ef6 <nrk_wait_until_nw+0x40>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3ed4:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <_nrk_get_next_wakeup>
    3ed8:	21 2f       	mov	r18, r17
    3eda:	30 e0       	ldi	r19, 0x00	; 0
    3edc:	2f 5f       	subi	r18, 0xFF	; 255
    3ede:	3f 4f       	sbci	r19, 0xFF	; 255
    3ee0:	48 2f       	mov	r20, r24
    3ee2:	50 e0       	ldi	r21, 0x00	; 0
    3ee4:	24 17       	cp	r18, r20
    3ee6:	35 07       	cpc	r19, r21
    3ee8:	34 f4       	brge	.+12     	; 0x3ef6 <nrk_wait_until_nw+0x40>
        {
            timer += TIME_PAD;
    3eea:	81 2f       	mov	r24, r17
    3eec:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    3eee:	80 93 1b 0c 	sts	0x0C1B, r24
            _nrk_set_next_wakeup (timer);
    3ef2:	0e 94 80 27 	call	0x4f00	; 0x4f00 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    3ef6:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    3efa:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3efe:	81 e0       	ldi	r24, 0x01	; 1
    3f00:	1f 91       	pop	r17
    3f02:	08 95       	ret

00003f04 <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    3f04:	1f 93       	push	r17
    3f06:	cf 93       	push	r28
    3f08:	df 93       	push	r29
    3f0a:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    3f0c:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3f10:	e0 91 95 0d 	lds	r30, 0x0D95
    3f14:	f0 91 96 0d 	lds	r31, 0x0D96
    3f18:	81 e0       	ldi	r24, 0x01	; 1
    3f1a:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    3f1c:	ce 01       	movw	r24, r28
    3f1e:	a0 e0       	ldi	r26, 0x00	; 0
    3f20:	b0 e0       	ldi	r27, 0x00	; 0
    3f22:	85 8b       	std	Z+21, r24	; 0x15
    3f24:	96 8b       	std	Z+22, r25	; 0x16
    3f26:	a7 8b       	std	Z+23, r26	; 0x17
    3f28:	b0 8f       	std	Z+24, r27	; 0x18
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    3f2a:	0e 94 e5 27 	call	0x4fca	; 0x4fca <_nrk_os_timer_get>
    3f2e:	18 2f       	mov	r17, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    3f30:	88 3f       	cpi	r24, 0xF8	; 248
    3f32:	88 f4       	brcc	.+34     	; 0x3f56 <nrk_wait_until_ticks+0x52>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3f34:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <_nrk_get_next_wakeup>
    3f38:	21 2f       	mov	r18, r17
    3f3a:	30 e0       	ldi	r19, 0x00	; 0
    3f3c:	2f 5f       	subi	r18, 0xFF	; 255
    3f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3f40:	48 2f       	mov	r20, r24
    3f42:	50 e0       	ldi	r21, 0x00	; 0
    3f44:	24 17       	cp	r18, r20
    3f46:	35 07       	cpc	r19, r21
    3f48:	34 f4       	brge	.+12     	; 0x3f56 <nrk_wait_until_ticks+0x52>
        {
            timer += TIME_PAD;
    3f4a:	81 2f       	mov	r24, r17
    3f4c:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    3f4e:	80 93 1b 0c 	sts	0x0C1B, r24
            _nrk_set_next_wakeup (timer);
    3f52:	0e 94 80 27 	call	0x4f00	; 0x4f00 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    3f56:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    3f5a:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3f5e:	81 e0       	ldi	r24, 0x01	; 1
    3f60:	df 91       	pop	r29
    3f62:	cf 91       	pop	r28
    3f64:	1f 91       	pop	r17
    3f66:	08 95       	ret

00003f68 <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    3f68:	ef 92       	push	r14
    3f6a:	ff 92       	push	r15
    3f6c:	0f 93       	push	r16
    3f6e:	1f 93       	push	r17
    3f70:	df 93       	push	r29
    3f72:	cf 93       	push	r28
    3f74:	0f 92       	push	r0
    3f76:	cd b7       	in	r28, 0x3d	; 61
    3f78:	de b7       	in	r29, 0x3e	; 62
    3f7a:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    3f7c:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3f80:	e0 91 95 0d 	lds	r30, 0x0D95
    3f84:	f0 91 96 0d 	lds	r31, 0x0D96
    3f88:	81 e0       	ldi	r24, 0x01	; 1
    3f8a:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    3f8c:	0e 94 e5 27 	call	0x4fca	; 0x4fca <_nrk_os_timer_get>
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    3f90:	e0 91 95 0d 	lds	r30, 0x0D95
    3f94:	f0 91 96 0d 	lds	r31, 0x0D96
    3f98:	e8 2e       	mov	r14, r24
    3f9a:	ff 24       	eor	r15, r15
    3f9c:	0e 0d       	add	r16, r14
    3f9e:	1f 1d       	adc	r17, r15
    3fa0:	20 e0       	ldi	r18, 0x00	; 0
    3fa2:	30 e0       	ldi	r19, 0x00	; 0
    3fa4:	05 8b       	std	Z+21, r16	; 0x15
    3fa6:	16 8b       	std	Z+22, r17	; 0x16
    3fa8:	27 8b       	std	Z+23, r18	; 0x17
    3faa:	30 8f       	std	Z+24, r19	; 0x18

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    3fac:	88 3f       	cpi	r24, 0xF8	; 248
    3fae:	90 f4       	brcc	.+36     	; 0x3fd4 <nrk_wait_ticks+0x6c>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3fb0:	89 83       	std	Y+1, r24	; 0x01
    3fb2:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <_nrk_get_next_wakeup>
    3fb6:	08 94       	sec
    3fb8:	e1 1c       	adc	r14, r1
    3fba:	f1 1c       	adc	r15, r1
    3fbc:	28 2f       	mov	r18, r24
    3fbe:	30 e0       	ldi	r19, 0x00	; 0
    3fc0:	99 81       	ldd	r25, Y+1	; 0x01
    3fc2:	e2 16       	cp	r14, r18
    3fc4:	f3 06       	cpc	r15, r19
    3fc6:	34 f4       	brge	.+12     	; 0x3fd4 <nrk_wait_ticks+0x6c>
        {
            timer += TIME_PAD;
    3fc8:	89 2f       	mov	r24, r25
    3fca:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    3fcc:	80 93 1b 0c 	sts	0x0C1B, r24
            _nrk_set_next_wakeup (timer);
    3fd0:	0e 94 80 27 	call	0x4f00	; 0x4f00 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    3fd4:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    3fd8:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3fdc:	81 e0       	ldi	r24, 0x01	; 1
    3fde:	0f 90       	pop	r0
    3fe0:	cf 91       	pop	r28
    3fe2:	df 91       	pop	r29
    3fe4:	1f 91       	pop	r17
    3fe6:	0f 91       	pop	r16
    3fe8:	ff 90       	pop	r15
    3fea:	ef 90       	pop	r14
    3fec:	08 95       	ret

00003fee <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    3fee:	1f 93       	push	r17
    3ff0:	cf 93       	push	r28
    3ff2:	df 93       	push	r29
    3ff4:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    3ff6:	0e 94 ef 19 	call	0x33de	; 0x33de <nrk_stack_check>

    if (p == 0)
    3ffa:	20 97       	sbiw	r28, 0x00	; 0
    3ffc:	11 f4       	brne	.+4      	; 0x4002 <nrk_wait_until_next_n_periods+0x14>
        p = 1;
    3ffe:	c1 e0       	ldi	r28, 0x01	; 1
    4000:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    4002:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    4006:	e0 91 95 0d 	lds	r30, 0x0D95
    400a:	f0 91 96 0d 	lds	r31, 0x0D96
    400e:	81 e0       	ldi	r24, 0x01	; 1
    4010:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    4012:	d2 a7       	std	Z+42, r29	; 0x2a
    4014:	c1 a7       	std	Z+41, r28	; 0x29
    timer = _nrk_os_timer_get ();
    4016:	0e 94 e5 27 	call	0x4fca	; 0x4fca <_nrk_os_timer_get>
    401a:	18 2f       	mov	r17, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    401c:	88 3f       	cpi	r24, 0xF8	; 248
    401e:	88 f4       	brcc	.+34     	; 0x4042 <nrk_wait_until_next_n_periods+0x54>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    4020:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <_nrk_get_next_wakeup>
    4024:	21 2f       	mov	r18, r17
    4026:	30 e0       	ldi	r19, 0x00	; 0
    4028:	2f 5f       	subi	r18, 0xFF	; 255
    402a:	3f 4f       	sbci	r19, 0xFF	; 255
    402c:	48 2f       	mov	r20, r24
    402e:	50 e0       	ldi	r21, 0x00	; 0
    4030:	24 17       	cp	r18, r20
    4032:	35 07       	cpc	r19, r21
    4034:	34 f4       	brge	.+12     	; 0x4042 <nrk_wait_until_next_n_periods+0x54>
        {
            timer += TIME_PAD;
    4036:	81 2f       	mov	r24, r17
    4038:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    403a:	80 93 1b 0c 	sts	0x0C1B, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    403e:	0e 94 80 27 	call	0x4f00	; 0x4f00 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    4042:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    4046:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    404a:	81 e0       	ldi	r24, 0x01	; 1
    404c:	df 91       	pop	r29
    404e:	cf 91       	pop	r28
    4050:	1f 91       	pop	r17
    4052:	08 95       	ret

00004054 <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    4054:	1f 93       	push	r17
    uint8_t timer;

    nrk_stack_check ();
    4056:	0e 94 ef 19 	call	0x33de	; 0x33de <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    405a:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    405e:	e0 91 95 0d 	lds	r30, 0x0D95
    4062:	f0 91 96 0d 	lds	r31, 0x0D96
    4066:	81 e0       	ldi	r24, 0x01	; 1
    4068:	90 e0       	ldi	r25, 0x00	; 0
    406a:	92 a7       	std	Z+42, r25	; 0x2a
    406c:	81 a7       	std	Z+41, r24	; 0x29
    nrk_cur_task_TCB->suspend_flag = 1;
    406e:	81 e0       	ldi	r24, 0x01	; 1
    4070:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    4072:	0e 94 e5 27 	call	0x4fca	; 0x4fca <_nrk_os_timer_get>
    4076:	18 2f       	mov	r17, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    4078:	88 3f       	cpi	r24, 0xF8	; 248
    407a:	88 f4       	brcc	.+34     	; 0x409e <nrk_wait_until_next_period+0x4a>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    407c:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <_nrk_get_next_wakeup>
    4080:	21 2f       	mov	r18, r17
    4082:	30 e0       	ldi	r19, 0x00	; 0
    4084:	2f 5f       	subi	r18, 0xFF	; 255
    4086:	3f 4f       	sbci	r19, 0xFF	; 255
    4088:	48 2f       	mov	r20, r24
    408a:	50 e0       	ldi	r21, 0x00	; 0
    408c:	24 17       	cp	r18, r20
    408e:	35 07       	cpc	r19, r21
    4090:	34 f4       	brge	.+12     	; 0x409e <nrk_wait_until_next_period+0x4a>
        {
            timer += TIME_PAD;
    4092:	81 2f       	mov	r24, r17
    4094:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    4096:	80 93 1b 0c 	sts	0x0C1B, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    409a:	0e 94 80 27 	call	0x4f00	; 0x4f00 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    409e:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    40a2:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    40a6:	81 e0       	ldi	r24, 0x01	; 1
    40a8:	1f 91       	pop	r17
    40aa:	08 95       	ret

000040ac <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    40ac:	e0 91 95 0d 	lds	r30, 0x0D95
    40b0:	f0 91 96 0d 	lds	r31, 0x0D96
    40b4:	80 85       	ldd	r24, Z+8	; 0x08
    40b6:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    40ba:	e0 91 95 0d 	lds	r30, 0x0D95
    40be:	f0 91 96 0d 	lds	r31, 0x0D96
    40c2:	84 e0       	ldi	r24, 0x04	; 4
    40c4:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    40c6:	0e 94 2a 20 	call	0x4054	; 0x4054 <nrk_wait_until_next_period>
    return NRK_OK;
}
    40ca:	81 e0       	ldi	r24, 0x01	; 1
    40cc:	08 95       	ret

000040ce <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    40ce:	8f 92       	push	r8
    40d0:	9f 92       	push	r9
    40d2:	af 92       	push	r10
    40d4:	bf 92       	push	r11
    40d6:	cf 92       	push	r12
    40d8:	df 92       	push	r13
    40da:	ef 92       	push	r14
    40dc:	ff 92       	push	r15
    40de:	0f 93       	push	r16
    40e0:	1f 93       	push	r17
    40e2:	df 93       	push	r29
    40e4:	cf 93       	push	r28
    40e6:	cd b7       	in	r28, 0x3d	; 61
    40e8:	de b7       	in	r29, 0x3e	; 62
    40ea:	60 97       	sbiw	r28, 0x10	; 16
    40ec:	0f b6       	in	r0, 0x3f	; 63
    40ee:	f8 94       	cli
    40f0:	de bf       	out	0x3e, r29	; 62
    40f2:	0f be       	out	0x3f, r0	; 63
    40f4:	cd bf       	out	0x3d, r28	; 61
    40f6:	29 87       	std	Y+9, r18	; 0x09
    40f8:	3a 87       	std	Y+10, r19	; 0x0a
    40fa:	4b 87       	std	Y+11, r20	; 0x0b
    40fc:	5c 87       	std	Y+12, r21	; 0x0c
    40fe:	6d 87       	std	Y+13, r22	; 0x0d
    4100:	7e 87       	std	Y+14, r23	; 0x0e
    4102:	8f 87       	std	Y+15, r24	; 0x0f
    4104:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    4106:	ce 01       	movw	r24, r28
    4108:	01 96       	adiw	r24, 0x01	; 1
    410a:	0e 94 c3 20 	call	0x4186	; 0x4186 <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    410e:	ce 01       	movw	r24, r28
    4110:	09 96       	adiw	r24, 0x09	; 9
    4112:	09 85       	ldd	r16, Y+9	; 0x09
    4114:	1a 85       	ldd	r17, Y+10	; 0x0a
    4116:	2b 85       	ldd	r18, Y+11	; 0x0b
    4118:	3c 85       	ldd	r19, Y+12	; 0x0c
    411a:	4d 85       	ldd	r20, Y+13	; 0x0d
    411c:	5e 85       	ldd	r21, Y+14	; 0x0e
    411e:	6f 85       	ldd	r22, Y+15	; 0x0f
    4120:	78 89       	ldd	r23, Y+16	; 0x10
    4122:	89 80       	ldd	r8, Y+1	; 0x01
    4124:	9a 80       	ldd	r9, Y+2	; 0x02
    4126:	ab 80       	ldd	r10, Y+3	; 0x03
    4128:	bc 80       	ldd	r11, Y+4	; 0x04
    412a:	cd 80       	ldd	r12, Y+5	; 0x05
    412c:	de 80       	ldd	r13, Y+6	; 0x06
    412e:	ef 80       	ldd	r14, Y+7	; 0x07
    4130:	f8 84       	ldd	r15, Y+8	; 0x08
    4132:	0e 94 21 21 	call	0x4242	; 0x4242 <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    4136:	8f 3f       	cpi	r24, 0xFF	; 255
    4138:	61 f0       	breq	.+24     	; 0x4152 <nrk_wait_until+0x84>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    413a:	29 85       	ldd	r18, Y+9	; 0x09
    413c:	3a 85       	ldd	r19, Y+10	; 0x0a
    413e:	4b 85       	ldd	r20, Y+11	; 0x0b
    4140:	5c 85       	ldd	r21, Y+12	; 0x0c
    4142:	6d 85       	ldd	r22, Y+13	; 0x0d
    4144:	7e 85       	ldd	r23, Y+14	; 0x0e
    4146:	8f 85       	ldd	r24, Y+15	; 0x0f
    4148:	98 89       	ldd	r25, Y+16	; 0x10
    414a:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <nrk_wait>

    return NRK_OK;
    414e:	81 e0       	ldi	r24, 0x01	; 1
    4150:	01 c0       	rjmp	.+2      	; 0x4154 <nrk_wait_until+0x86>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    4152:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    4154:	60 96       	adiw	r28, 0x10	; 16
    4156:	0f b6       	in	r0, 0x3f	; 63
    4158:	f8 94       	cli
    415a:	de bf       	out	0x3e, r29	; 62
    415c:	0f be       	out	0x3f, r0	; 63
    415e:	cd bf       	out	0x3d, r28	; 61
    4160:	cf 91       	pop	r28
    4162:	df 91       	pop	r29
    4164:	1f 91       	pop	r17
    4166:	0f 91       	pop	r16
    4168:	ff 90       	pop	r15
    416a:	ef 90       	pop	r14
    416c:	df 90       	pop	r13
    416e:	cf 90       	pop	r12
    4170:	bf 90       	pop	r11
    4172:	af 90       	pop	r10
    4174:	9f 90       	pop	r9
    4176:	8f 90       	pop	r8
    4178:	08 95       	ret

0000417a <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    417a:	e0 91 95 0d 	lds	r30, 0x0D95
    417e:	f0 91 96 0d 	lds	r31, 0x0D96
}
    4182:	80 85       	ldd	r24, Z+8	; 0x08
    4184:	08 95       	ret

00004186 <nrk_time_get>:
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

void nrk_time_get(nrk_time_t *t)
{
    4186:	ef 92       	push	r14
    4188:	ff 92       	push	r15
    418a:	0f 93       	push	r16
    418c:	1f 93       	push	r17
    418e:	cf 93       	push	r28
    4190:	df 93       	push	r29
    4192:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    4194:	1c 82       	std	Y+4, r1	; 0x04
    4196:	1d 82       	std	Y+5, r1	; 0x05
    4198:	1e 82       	std	Y+6, r1	; 0x06
    419a:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    419c:	80 91 8c 0d 	lds	r24, 0x0D8C
    41a0:	90 91 8d 0d 	lds	r25, 0x0D8D
    41a4:	a0 91 8e 0d 	lds	r26, 0x0D8E
    41a8:	b0 91 8f 0d 	lds	r27, 0x0D8F
    41ac:	88 83       	st	Y, r24
    41ae:	99 83       	std	Y+1, r25	; 0x01
    41b0:	aa 83       	std	Y+2, r26	; 0x02
    41b2:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    41b4:	e0 90 90 0d 	lds	r14, 0x0D90
    41b8:	f0 90 91 0d 	lds	r15, 0x0D91
    41bc:	00 91 92 0d 	lds	r16, 0x0D92
    41c0:	10 91 93 0d 	lds	r17, 0x0D93
    41c4:	ec 82       	std	Y+4, r14	; 0x04
    41c6:	fd 82       	std	Y+5, r15	; 0x05
    41c8:	0e 83       	std	Y+6, r16	; 0x06
    41ca:	1f 83       	std	Y+7, r17	; 0x07
   
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    41cc:	0e 94 e5 27 	call	0x4fca	; 0x4fca <_nrk_os_timer_get>
    41d0:	68 2f       	mov	r22, r24
    41d2:	70 e0       	ldi	r23, 0x00	; 0
    41d4:	80 e0       	ldi	r24, 0x00	; 0
    41d6:	90 e0       	ldi	r25, 0x00	; 0
    41d8:	23 eb       	ldi	r18, 0xB3	; 179
    41da:	36 ee       	ldi	r19, 0xE6	; 230
    41dc:	4e e0       	ldi	r20, 0x0E	; 14
    41de:	50 e0       	ldi	r21, 0x00	; 0
    41e0:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <__mulsi3>
    41e4:	6e 0d       	add	r22, r14
    41e6:	7f 1d       	adc	r23, r15
    41e8:	80 1f       	adc	r24, r16
    41ea:	91 1f       	adc	r25, r17
    41ec:	6c 83       	std	Y+4, r22	; 0x04
    41ee:	7d 83       	std	Y+5, r23	; 0x05
    41f0:	8e 83       	std	Y+6, r24	; 0x06
    41f2:	9f 83       	std	Y+7, r25	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    41f4:	13 c0       	rjmp	.+38     	; 0x421c <__stack+0x1d>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    41f6:	80 50       	subi	r24, 0x00	; 0
    41f8:	9a 4c       	sbci	r25, 0xCA	; 202
    41fa:	aa 49       	sbci	r26, 0x9A	; 154
    41fc:	bb 43       	sbci	r27, 0x3B	; 59
    41fe:	8c 83       	std	Y+4, r24	; 0x04
    4200:	9d 83       	std	Y+5, r25	; 0x05
    4202:	ae 83       	std	Y+6, r26	; 0x06
    4204:	bf 83       	std	Y+7, r27	; 0x07
    t->secs++;
    4206:	88 81       	ld	r24, Y
    4208:	99 81       	ldd	r25, Y+1	; 0x01
    420a:	aa 81       	ldd	r26, Y+2	; 0x02
    420c:	bb 81       	ldd	r27, Y+3	; 0x03
    420e:	01 96       	adiw	r24, 0x01	; 1
    4210:	a1 1d       	adc	r26, r1
    4212:	b1 1d       	adc	r27, r1
    4214:	88 83       	st	Y, r24
    4216:	99 83       	std	Y+1, r25	; 0x01
    4218:	aa 83       	std	Y+2, r26	; 0x02
    421a:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
   
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    421c:	8c 81       	ldd	r24, Y+4	; 0x04
    421e:	9d 81       	ldd	r25, Y+5	; 0x05
    4220:	ae 81       	ldd	r26, Y+6	; 0x06
    4222:	bf 81       	ldd	r27, Y+7	; 0x07
    4224:	80 30       	cpi	r24, 0x00	; 0
    4226:	2a ec       	ldi	r18, 0xCA	; 202
    4228:	92 07       	cpc	r25, r18
    422a:	2a e9       	ldi	r18, 0x9A	; 154
    422c:	a2 07       	cpc	r26, r18
    422e:	2b e3       	ldi	r18, 0x3B	; 59
    4230:	b2 07       	cpc	r27, r18
    4232:	08 f7       	brcc	.-62     	; 0x41f6 <nrk_time_get+0x70>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    t->secs++;
    }

}
    4234:	df 91       	pop	r29
    4236:	cf 91       	pop	r28
    4238:	1f 91       	pop	r17
    423a:	0f 91       	pop	r16
    423c:	ff 90       	pop	r15
    423e:	ef 90       	pop	r14
    4240:	08 95       	ret

00004242 <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    4242:	8f 92       	push	r8
    4244:	9f 92       	push	r9
    4246:	af 92       	push	r10
    4248:	bf 92       	push	r11
    424a:	cf 92       	push	r12
    424c:	df 92       	push	r13
    424e:	ef 92       	push	r14
    4250:	ff 92       	push	r15
    4252:	0f 93       	push	r16
    4254:	1f 93       	push	r17
    4256:	df 93       	push	r29
    4258:	cf 93       	push	r28
    425a:	cd b7       	in	r28, 0x3d	; 61
    425c:	de b7       	in	r29, 0x3e	; 62
    425e:	60 97       	sbiw	r28, 0x10	; 16
    4260:	0f b6       	in	r0, 0x3f	; 63
    4262:	f8 94       	cli
    4264:	de bf       	out	0x3e, r29	; 62
    4266:	0f be       	out	0x3f, r0	; 63
    4268:	cd bf       	out	0x3d, r28	; 61
    426a:	fc 01       	movw	r30, r24
    426c:	09 83       	std	Y+1, r16	; 0x01
    426e:	1a 83       	std	Y+2, r17	; 0x02
    4270:	2b 83       	std	Y+3, r18	; 0x03
    4272:	3c 83       	std	Y+4, r19	; 0x04
    4274:	4d 83       	std	Y+5, r20	; 0x05
    4276:	5e 83       	std	Y+6, r21	; 0x06
    4278:	6f 83       	std	Y+7, r22	; 0x07
    427a:	78 87       	std	Y+8, r23	; 0x08
    427c:	89 86       	std	Y+9, r8	; 0x09
    427e:	9a 86       	std	Y+10, r9	; 0x0a
    4280:	ab 86       	std	Y+11, r10	; 0x0b
    4282:	bc 86       	std	Y+12, r11	; 0x0c
    4284:	cd 86       	std	Y+13, r12	; 0x0d
    4286:	de 86       	std	Y+14, r13	; 0x0e
    4288:	ef 86       	std	Y+15, r14	; 0x0f
    428a:	f8 8a       	std	Y+16, r15	; 0x10
	return NRK_OK;
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
    428c:	e9 80       	ldd	r14, Y+1	; 0x01
    428e:	fa 80       	ldd	r15, Y+2	; 0x02
    4290:	0b 81       	ldd	r16, Y+3	; 0x03
    4292:	1c 81       	ldd	r17, Y+4	; 0x04
    4294:	2d 81       	ldd	r18, Y+5	; 0x05
    4296:	3e 81       	ldd	r19, Y+6	; 0x06
    4298:	4f 81       	ldd	r20, Y+7	; 0x07
    429a:	58 85       	ldd	r21, Y+8	; 0x08
    429c:	a9 84       	ldd	r10, Y+9	; 0x09
    429e:	ba 84       	ldd	r11, Y+10	; 0x0a
    42a0:	cb 84       	ldd	r12, Y+11	; 0x0b
    42a2:	dc 84       	ldd	r13, Y+12	; 0x0c
    42a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    42a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    42a8:	af 85       	ldd	r26, Y+15	; 0x0f
    42aa:	b8 89       	ldd	r27, Y+16	; 0x10
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    42ac:	ea 14       	cp	r14, r10
    42ae:	fb 04       	cpc	r15, r11
    42b0:	0c 05       	cpc	r16, r12
    42b2:	1d 05       	cpc	r17, r13
    42b4:	08 f4       	brcc	.+2      	; 0x42b8 <nrk_time_sub+0x76>
    42b6:	40 c0       	rjmp	.+128    	; 0x4338 <nrk_time_sub+0xf6>
if(low.secs==high.secs)
    42b8:	ae 14       	cp	r10, r14
    42ba:	bf 04       	cpc	r11, r15
    42bc:	c0 06       	cpc	r12, r16
    42be:	d1 06       	cpc	r13, r17
    42c0:	91 f4       	brne	.+36     	; 0x42e6 <nrk_time_sub+0xa4>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    42c2:	28 17       	cp	r18, r24
    42c4:	39 07       	cpc	r19, r25
    42c6:	4a 07       	cpc	r20, r26
    42c8:	5b 07       	cpc	r21, r27
    42ca:	b0 f1       	brcs	.+108    	; 0x4338 <nrk_time_sub+0xf6>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    42cc:	28 1b       	sub	r18, r24
    42ce:	39 0b       	sbc	r19, r25
    42d0:	4a 0b       	sbc	r20, r26
    42d2:	5b 0b       	sbc	r21, r27
    42d4:	24 83       	std	Z+4, r18	; 0x04
    42d6:	35 83       	std	Z+5, r19	; 0x05
    42d8:	46 83       	std	Z+6, r20	; 0x06
    42da:	57 83       	std	Z+7, r21	; 0x07
	result->secs=0;
    42dc:	10 82       	st	Z, r1
    42de:	11 82       	std	Z+1, r1	; 0x01
    42e0:	12 82       	std	Z+2, r1	; 0x02
    42e2:	13 82       	std	Z+3, r1	; 0x03
    42e4:	27 c0       	rjmp	.+78     	; 0x4334 <nrk_time_sub+0xf2>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    42e6:	28 17       	cp	r18, r24
    42e8:	39 07       	cpc	r19, r25
    42ea:	4a 07       	cpc	r20, r26
    42ec:	5b 07       	cpc	r21, r27
    42ee:	90 f4       	brcc	.+36     	; 0x4314 <nrk_time_sub+0xd2>
{
	high.secs--;
    42f0:	08 94       	sec
    42f2:	e1 08       	sbc	r14, r1
    42f4:	f1 08       	sbc	r15, r1
    42f6:	01 09       	sbc	r16, r1
    42f8:	11 09       	sbc	r17, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    42fa:	ea 18       	sub	r14, r10
    42fc:	fb 08       	sbc	r15, r11
    42fe:	0c 09       	sbc	r16, r12
    4300:	1d 09       	sbc	r17, r13
    4302:	e0 82       	st	Z, r14
    4304:	f1 82       	std	Z+1, r15	; 0x01
    4306:	02 83       	std	Z+2, r16	; 0x02
    4308:	13 83       	std	Z+3, r17	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    430a:	20 50       	subi	r18, 0x00	; 0
    430c:	36 43       	sbci	r19, 0x36	; 54
    430e:	45 46       	sbci	r20, 0x65	; 101
    4310:	54 4c       	sbci	r21, 0xC4	; 196
    4312:	08 c0       	rjmp	.+16     	; 0x4324 <nrk_time_sub+0xe2>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    4314:	ea 18       	sub	r14, r10
    4316:	fb 08       	sbc	r15, r11
    4318:	0c 09       	sbc	r16, r12
    431a:	1d 09       	sbc	r17, r13
    431c:	e0 82       	st	Z, r14
    431e:	f1 82       	std	Z+1, r15	; 0x01
    4320:	02 83       	std	Z+2, r16	; 0x02
    4322:	13 83       	std	Z+3, r17	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    4324:	28 1b       	sub	r18, r24
    4326:	39 0b       	sbc	r19, r25
    4328:	4a 0b       	sbc	r20, r26
    432a:	5b 0b       	sbc	r21, r27
    432c:	24 83       	std	Z+4, r18	; 0x04
    432e:	35 83       	std	Z+5, r19	; 0x05
    4330:	46 83       	std	Z+6, r20	; 0x06
    4332:	57 83       	std	Z+7, r21	; 0x07
return NRK_OK;
    4334:	81 e0       	ldi	r24, 0x01	; 1
    4336:	01 c0       	rjmp	.+2      	; 0x433a <nrk_time_sub+0xf8>
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
if(low.secs==high.secs)
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    4338:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    433a:	60 96       	adiw	r28, 0x10	; 16
    433c:	0f b6       	in	r0, 0x3f	; 63
    433e:	f8 94       	cli
    4340:	de bf       	out	0x3e, r29	; 62
    4342:	0f be       	out	0x3f, r0	; 63
    4344:	cd bf       	out	0x3d, r28	; 61
    4346:	cf 91       	pop	r28
    4348:	df 91       	pop	r29
    434a:	1f 91       	pop	r17
    434c:	0f 91       	pop	r16
    434e:	ff 90       	pop	r15
    4350:	ef 90       	pop	r14
    4352:	df 90       	pop	r13
    4354:	cf 90       	pop	r12
    4356:	bf 90       	pop	r11
    4358:	af 90       	pop	r10
    435a:	9f 90       	pop	r9
    435c:	8f 90       	pop	r8
    435e:	08 95       	ret

00004360 <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    4360:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    4362:	14 c0       	rjmp	.+40     	; 0x438c <nrk_time_compact_nanos+0x2c>
    {
    t->nano_secs-=NANOS_PER_SEC;
    4364:	20 50       	subi	r18, 0x00	; 0
    4366:	3a 4c       	sbci	r19, 0xCA	; 202
    4368:	4a 49       	sbci	r20, 0x9A	; 154
    436a:	5b 43       	sbci	r21, 0x3B	; 59
    436c:	24 83       	std	Z+4, r18	; 0x04
    436e:	35 83       	std	Z+5, r19	; 0x05
    4370:	46 83       	std	Z+6, r20	; 0x06
    4372:	57 83       	std	Z+7, r21	; 0x07
    t->secs++;
    4374:	20 81       	ld	r18, Z
    4376:	31 81       	ldd	r19, Z+1	; 0x01
    4378:	42 81       	ldd	r20, Z+2	; 0x02
    437a:	53 81       	ldd	r21, Z+3	; 0x03
    437c:	2f 5f       	subi	r18, 0xFF	; 255
    437e:	3f 4f       	sbci	r19, 0xFF	; 255
    4380:	4f 4f       	sbci	r20, 0xFF	; 255
    4382:	5f 4f       	sbci	r21, 0xFF	; 255
    4384:	20 83       	st	Z, r18
    4386:	31 83       	std	Z+1, r19	; 0x01
    4388:	42 83       	std	Z+2, r20	; 0x02
    438a:	53 83       	std	Z+3, r21	; 0x03
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
  while(t->nano_secs>=NANOS_PER_SEC)
    438c:	24 81       	ldd	r18, Z+4	; 0x04
    438e:	35 81       	ldd	r19, Z+5	; 0x05
    4390:	46 81       	ldd	r20, Z+6	; 0x06
    4392:	57 81       	ldd	r21, Z+7	; 0x07
    4394:	20 30       	cpi	r18, 0x00	; 0
    4396:	8a ec       	ldi	r24, 0xCA	; 202
    4398:	38 07       	cpc	r19, r24
    439a:	8a e9       	ldi	r24, 0x9A	; 154
    439c:	48 07       	cpc	r20, r24
    439e:	8b e3       	ldi	r24, 0x3B	; 59
    43a0:	58 07       	cpc	r21, r24
    43a2:	00 f7       	brcc	.-64     	; 0x4364 <nrk_time_compact_nanos+0x4>
    {
    t->nano_secs-=NANOS_PER_SEC;
    t->secs++;
    }
}
    43a4:	08 95       	ret

000043a6 <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    43a6:	8f 92       	push	r8
    43a8:	9f 92       	push	r9
    43aa:	af 92       	push	r10
    43ac:	bf 92       	push	r11
    43ae:	cf 92       	push	r12
    43b0:	df 92       	push	r13
    43b2:	ef 92       	push	r14
    43b4:	ff 92       	push	r15
    43b6:	0f 93       	push	r16
    43b8:	1f 93       	push	r17
    43ba:	df 93       	push	r29
    43bc:	cf 93       	push	r28
    43be:	cd b7       	in	r28, 0x3d	; 61
    43c0:	de b7       	in	r29, 0x3e	; 62
    43c2:	60 97       	sbiw	r28, 0x10	; 16
    43c4:	0f b6       	in	r0, 0x3f	; 63
    43c6:	f8 94       	cli
    43c8:	de bf       	out	0x3e, r29	; 62
    43ca:	0f be       	out	0x3f, r0	; 63
    43cc:	cd bf       	out	0x3d, r28	; 61
    43ce:	09 83       	std	Y+1, r16	; 0x01
    43d0:	1a 83       	std	Y+2, r17	; 0x02
    43d2:	2b 83       	std	Y+3, r18	; 0x03
    43d4:	3c 83       	std	Y+4, r19	; 0x04
    43d6:	4d 83       	std	Y+5, r20	; 0x05
    43d8:	5e 83       	std	Y+6, r21	; 0x06
    43da:	6f 83       	std	Y+7, r22	; 0x07
    43dc:	78 87       	std	Y+8, r23	; 0x08
    43de:	89 86       	std	Y+9, r8	; 0x09
    43e0:	9a 86       	std	Y+10, r9	; 0x0a
    43e2:	ab 86       	std	Y+11, r10	; 0x0b
    43e4:	bc 86       	std	Y+12, r11	; 0x0c
    43e6:	cd 86       	std	Y+13, r12	; 0x0d
    43e8:	de 86       	std	Y+14, r13	; 0x0e
    43ea:	ef 86       	std	Y+15, r14	; 0x0f
    43ec:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    43ee:	29 85       	ldd	r18, Y+9	; 0x09
    43f0:	3a 85       	ldd	r19, Y+10	; 0x0a
    43f2:	4b 85       	ldd	r20, Y+11	; 0x0b
    43f4:	5c 85       	ldd	r21, Y+12	; 0x0c
    43f6:	e9 80       	ldd	r14, Y+1	; 0x01
    43f8:	fa 80       	ldd	r15, Y+2	; 0x02
    43fa:	0b 81       	ldd	r16, Y+3	; 0x03
    43fc:	1c 81       	ldd	r17, Y+4	; 0x04
    43fe:	2e 0d       	add	r18, r14
    4400:	3f 1d       	adc	r19, r15
    4402:	40 1f       	adc	r20, r16
    4404:	51 1f       	adc	r21, r17
    4406:	fc 01       	movw	r30, r24
    4408:	20 83       	st	Z, r18
    440a:	31 83       	std	Z+1, r19	; 0x01
    440c:	42 83       	std	Z+2, r20	; 0x02
    440e:	53 83       	std	Z+3, r21	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    4410:	2d 85       	ldd	r18, Y+13	; 0x0d
    4412:	3e 85       	ldd	r19, Y+14	; 0x0e
    4414:	4f 85       	ldd	r20, Y+15	; 0x0f
    4416:	58 89       	ldd	r21, Y+16	; 0x10
    4418:	ed 80       	ldd	r14, Y+5	; 0x05
    441a:	fe 80       	ldd	r15, Y+6	; 0x06
    441c:	0f 81       	ldd	r16, Y+7	; 0x07
    441e:	18 85       	ldd	r17, Y+8	; 0x08
    4420:	2e 0d       	add	r18, r14
    4422:	3f 1d       	adc	r19, r15
    4424:	40 1f       	adc	r20, r16
    4426:	51 1f       	adc	r21, r17
    4428:	24 83       	std	Z+4, r18	; 0x04
    442a:	35 83       	std	Z+5, r19	; 0x05
    442c:	46 83       	std	Z+6, r20	; 0x06
    442e:	57 83       	std	Z+7, r21	; 0x07
nrk_time_compact_nanos(result);
    4430:	0e 94 b0 21 	call	0x4360	; 0x4360 <nrk_time_compact_nanos>
return NRK_OK;
}
    4434:	81 e0       	ldi	r24, 0x01	; 1
    4436:	60 96       	adiw	r28, 0x10	; 16
    4438:	0f b6       	in	r0, 0x3f	; 63
    443a:	f8 94       	cli
    443c:	de bf       	out	0x3e, r29	; 62
    443e:	0f be       	out	0x3f, r0	; 63
    4440:	cd bf       	out	0x3d, r28	; 61
    4442:	cf 91       	pop	r28
    4444:	df 91       	pop	r29
    4446:	1f 91       	pop	r17
    4448:	0f 91       	pop	r16
    444a:	ff 90       	pop	r15
    444c:	ef 90       	pop	r14
    444e:	df 90       	pop	r13
    4450:	cf 90       	pop	r12
    4452:	bf 90       	pop	r11
    4454:	af 90       	pop	r10
    4456:	9f 90       	pop	r9
    4458:	8f 90       	pop	r8
    445a:	08 95       	ret

0000445c <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    445c:	60 93 8c 0d 	sts	0x0D8C, r22
    4460:	70 93 8d 0d 	sts	0x0D8D, r23
    4464:	80 93 8e 0d 	sts	0x0D8E, r24
    4468:	90 93 8f 0d 	sts	0x0D8F, r25
  nrk_system_time.nano_secs=nano_secs;
    446c:	20 93 90 0d 	sts	0x0D90, r18
    4470:	30 93 91 0d 	sts	0x0D91, r19
    4474:	40 93 92 0d 	sts	0x0D92, r20
    4478:	50 93 93 0d 	sts	0x0D93, r21
}
    447c:	08 95       	ret

0000447e <_nrk_time_to_ticks>:

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    447e:	8f 92       	push	r8
    4480:	9f 92       	push	r9
    4482:	af 92       	push	r10
    4484:	bf 92       	push	r11
    4486:	cf 92       	push	r12
    4488:	df 92       	push	r13
    448a:	ef 92       	push	r14
    448c:	ff 92       	push	r15
    448e:	0f 93       	push	r16
    4490:	1f 93       	push	r17
    4492:	fc 01       	movw	r30, r24
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    4494:	20 81       	ld	r18, Z
    4496:	31 81       	ldd	r19, Z+1	; 0x01
    4498:	42 81       	ldd	r20, Z+2	; 0x02
    449a:	53 81       	ldd	r21, Z+3	; 0x03
    449c:	64 81       	ldd	r22, Z+4	; 0x04
    449e:	75 81       	ldd	r23, Z+5	; 0x05
    44a0:	86 81       	ldd	r24, Z+6	; 0x06
    44a2:	97 81       	ldd	r25, Z+7	; 0x07
    44a4:	21 15       	cp	r18, r1
    44a6:	31 05       	cpc	r19, r1
    44a8:	41 05       	cpc	r20, r1
    44aa:	51 05       	cpc	r21, r1
    44ac:	09 f4       	brne	.+2      	; 0x44b0 <_nrk_time_to_ticks+0x32>
    44ae:	61 c0       	rjmp	.+194    	; 0x4572 <_nrk_time_to_ticks+0xf4>
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    44b0:	22 34       	cpi	r18, 0x42	; 66
    44b2:	31 05       	cpc	r19, r1
    44b4:	41 05       	cpc	r20, r1
    44b6:	51 05       	cpc	r21, r1
    44b8:	08 f0       	brcs	.+2      	; 0x44bc <_nrk_time_to_ticks+0x3e>
    44ba:	62 c0       	rjmp	.+196    	; 0x4580 <_nrk_time_to_ticks+0x102>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    44bc:	5b 01       	movw	r10, r22
    44be:	6c 01       	movw	r12, r24
    44c0:	ee 24       	eor	r14, r14
    44c2:	ff 24       	eor	r15, r15
    44c4:	87 01       	movw	r16, r14
    44c6:	60 e0       	ldi	r22, 0x00	; 0
    44c8:	38 c0       	rjmp	.+112    	; 0x453a <_nrk_time_to_ticks+0xbc>
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    44ca:	8a 2c       	mov	r8, r10
    44cc:	ab 2d       	mov	r26, r11
    44ce:	a6 53       	subi	r26, 0x36	; 54
    44d0:	f1 e0       	ldi	r31, 0x01	; 1
    44d2:	ab 15       	cp	r26, r11
    44d4:	08 f0       	brcs	.+2      	; 0x44d8 <_nrk_time_to_ticks+0x5a>
    44d6:	f0 e0       	ldi	r31, 0x00	; 0
    44d8:	8c 2d       	mov	r24, r12
    44da:	86 56       	subi	r24, 0x66	; 102
    44dc:	91 e0       	ldi	r25, 0x01	; 1
    44de:	8c 15       	cp	r24, r12
    44e0:	08 f0       	brcs	.+2      	; 0x44e4 <_nrk_time_to_ticks+0x66>
    44e2:	90 e0       	ldi	r25, 0x00	; 0
    44e4:	f8 0f       	add	r31, r24
    44e6:	71 e0       	ldi	r23, 0x01	; 1
    44e8:	f8 17       	cp	r31, r24
    44ea:	08 f0       	brcs	.+2      	; 0x44ee <_nrk_time_to_ticks+0x70>
    44ec:	70 e0       	ldi	r23, 0x00	; 0
    44ee:	97 2b       	or	r25, r23
    44f0:	7d 2d       	mov	r23, r13
    44f2:	75 5c       	subi	r23, 0xC5	; 197
    44f4:	e1 e0       	ldi	r30, 0x01	; 1
    44f6:	7d 15       	cp	r23, r13
    44f8:	08 f0       	brcs	.+2      	; 0x44fc <_nrk_time_to_ticks+0x7e>
    44fa:	e0 e0       	ldi	r30, 0x00	; 0
    44fc:	97 0f       	add	r25, r23
    44fe:	81 e0       	ldi	r24, 0x01	; 1
    4500:	97 17       	cp	r25, r23
    4502:	08 f0       	brcs	.+2      	; 0x4506 <_nrk_time_to_ticks+0x88>
    4504:	80 e0       	ldi	r24, 0x00	; 0
    4506:	8e 2b       	or	r24, r30
    4508:	8e 0d       	add	r24, r14
    450a:	e1 e0       	ldi	r30, 0x01	; 1
    450c:	8e 15       	cp	r24, r14
    450e:	08 f0       	brcs	.+2      	; 0x4512 <_nrk_time_to_ticks+0x94>
    4510:	e0 e0       	ldi	r30, 0x00	; 0
    4512:	ef 0d       	add	r30, r15
    4514:	71 e0       	ldi	r23, 0x01	; 1
    4516:	ef 15       	cp	r30, r15
    4518:	08 f0       	brcs	.+2      	; 0x451c <_nrk_time_to_ticks+0x9e>
    451a:	70 e0       	ldi	r23, 0x00	; 0
    451c:	70 0f       	add	r23, r16
    451e:	b1 e0       	ldi	r27, 0x01	; 1
    4520:	70 17       	cp	r23, r16
    4522:	08 f0       	brcs	.+2      	; 0x4526 <_nrk_time_to_ticks+0xa8>
    4524:	b0 e0       	ldi	r27, 0x00	; 0
    4526:	b1 0f       	add	r27, r17
    4528:	a8 2c       	mov	r10, r8
    452a:	ba 2e       	mov	r11, r26
    452c:	cf 2e       	mov	r12, r31
    452e:	d9 2e       	mov	r13, r25
    4530:	e8 2e       	mov	r14, r24
    4532:	fe 2e       	mov	r15, r30
    4534:	07 2f       	mov	r16, r23
    4536:	1b 2f       	mov	r17, r27
    4538:	6f 5f       	subi	r22, 0xFF	; 255
    453a:	86 2f       	mov	r24, r22
    453c:	90 e0       	ldi	r25, 0x00	; 0
    453e:	a0 e0       	ldi	r26, 0x00	; 0
    4540:	b0 e0       	ldi	r27, 0x00	; 0
    4542:	82 17       	cp	r24, r18
    4544:	93 07       	cpc	r25, r19
    4546:	a4 07       	cpc	r26, r20
    4548:	b5 07       	cpc	r27, r21
    454a:	08 f4       	brcc	.+2      	; 0x454e <_nrk_time_to_ticks+0xd0>
    454c:	be cf       	rjmp	.-132    	; 0x44ca <_nrk_time_to_ticks+0x4c>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    454e:	95 01       	movw	r18, r10
    4550:	a6 01       	movw	r20, r12
    4552:	b7 01       	movw	r22, r14
    4554:	c8 01       	movw	r24, r16
    4556:	a3 eb       	ldi	r26, 0xB3	; 179
    4558:	aa 2e       	mov	r10, r26
    455a:	f6 ee       	ldi	r31, 0xE6	; 230
    455c:	bf 2e       	mov	r11, r31
    455e:	ee e0       	ldi	r30, 0x0E	; 14
    4560:	ce 2e       	mov	r12, r30
    4562:	dd 24       	eor	r13, r13
    4564:	ee 24       	eor	r14, r14
    4566:	ff 24       	eor	r15, r15
    4568:	00 e0       	ldi	r16, 0x00	; 0
    456a:	10 e0       	ldi	r17, 0x00	; 0
    456c:	0e 94 3e 2b 	call	0x567c	; 0x567c <__udivdi3>
    4570:	09 c0       	rjmp	.+18     	; 0x4584 <_nrk_time_to_ticks+0x106>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    4572:	23 eb       	ldi	r18, 0xB3	; 179
    4574:	36 ee       	ldi	r19, 0xE6	; 230
    4576:	4e e0       	ldi	r20, 0x0E	; 14
    4578:	50 e0       	ldi	r21, 0x00	; 0
    457a:	0e 94 30 33 	call	0x6660	; 0x6660 <__udivmodsi4>
    457e:	02 c0       	rjmp	.+4      	; 0x4584 <_nrk_time_to_ticks+0x106>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    4580:	20 e0       	ldi	r18, 0x00	; 0
    4582:	30 e0       	ldi	r19, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    4584:	c9 01       	movw	r24, r18
    4586:	1f 91       	pop	r17
    4588:	0f 91       	pop	r16
    458a:	ff 90       	pop	r15
    458c:	ef 90       	pop	r14
    458e:	df 90       	pop	r13
    4590:	cf 90       	pop	r12
    4592:	bf 90       	pop	r11
    4594:	af 90       	pop	r10
    4596:	9f 90       	pop	r9
    4598:	8f 90       	pop	r8
    459a:	08 95       	ret

0000459c <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    459c:	ef 92       	push	r14
    459e:	ff 92       	push	r15
    45a0:	0f 93       	push	r16
    45a2:	1f 93       	push	r17
    45a4:	df 93       	push	r29
    45a6:	cf 93       	push	r28
    45a8:	cd b7       	in	r28, 0x3d	; 61
    45aa:	de b7       	in	r29, 0x3e	; 62
    45ac:	28 97       	sbiw	r28, 0x08	; 8
    45ae:	0f b6       	in	r0, 0x3f	; 63
    45b0:	f8 94       	cli
    45b2:	de bf       	out	0x3e, r29	; 62
    45b4:	0f be       	out	0x3f, r0	; 63
    45b6:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    45b8:	7b 01       	movw	r14, r22
    45ba:	8c 01       	movw	r16, r24
    45bc:	ba e0       	ldi	r27, 0x0A	; 10
    45be:	16 95       	lsr	r17
    45c0:	07 95       	ror	r16
    45c2:	f7 94       	ror	r15
    45c4:	e7 94       	ror	r14
    45c6:	ba 95       	dec	r27
    45c8:	d1 f7       	brne	.-12     	; 0x45be <_nrk_ticks_to_time+0x22>
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    45ca:	e9 82       	std	Y+1, r14	; 0x01
    45cc:	fa 82       	std	Y+2, r15	; 0x02
    45ce:	0b 83       	std	Y+3, r16	; 0x03
    45d0:	1c 83       	std	Y+4, r17	; 0x04
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    45d2:	73 70       	andi	r23, 0x03	; 3
    45d4:	80 70       	andi	r24, 0x00	; 0
    45d6:	90 70       	andi	r25, 0x00	; 0
    45d8:	23 eb       	ldi	r18, 0xB3	; 179
    45da:	36 ee       	ldi	r19, 0xE6	; 230
    45dc:	4e e0       	ldi	r20, 0x0E	; 14
    45de:	50 e0       	ldi	r21, 0x00	; 0
    45e0:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <__mulsi3>
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    45e4:	6d 83       	std	Y+5, r22	; 0x05
    45e6:	7e 83       	std	Y+6, r23	; 0x06
    45e8:	8f 83       	std	Y+7, r24	; 0x07
    45ea:	98 87       	std	Y+8, r25	; 0x08
    45ec:	2e 2d       	mov	r18, r14
    45ee:	3a 81       	ldd	r19, Y+2	; 0x02
    45f0:	4b 81       	ldd	r20, Y+3	; 0x03
    45f2:	5c 81       	ldd	r21, Y+4	; 0x04

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
}
    45f4:	28 96       	adiw	r28, 0x08	; 8
    45f6:	0f b6       	in	r0, 0x3f	; 63
    45f8:	f8 94       	cli
    45fa:	de bf       	out	0x3e, r29	; 62
    45fc:	0f be       	out	0x3f, r0	; 63
    45fe:	cd bf       	out	0x3d, r28	; 61
    4600:	cf 91       	pop	r28
    4602:	df 91       	pop	r29
    4604:	1f 91       	pop	r17
    4606:	0f 91       	pop	r16
    4608:	ff 90       	pop	r15
    460a:	ef 90       	pop	r14
    460c:	08 95       	ret

0000460e <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    460e:	8f 92       	push	r8
    4610:	9f 92       	push	r9
    4612:	af 92       	push	r10
    4614:	bf 92       	push	r11
    4616:	cf 92       	push	r12
    4618:	df 92       	push	r13
    461a:	ef 92       	push	r14
    461c:	ff 92       	push	r15
    461e:	0f 93       	push	r16
    4620:	1f 93       	push	r17
    4622:	fc 01       	movw	r30, r24
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    4624:	20 81       	ld	r18, Z
    4626:	31 81       	ldd	r19, Z+1	; 0x01
    4628:	42 81       	ldd	r20, Z+2	; 0x02
    462a:	53 81       	ldd	r21, Z+3	; 0x03
    462c:	64 81       	ldd	r22, Z+4	; 0x04
    462e:	75 81       	ldd	r23, Z+5	; 0x05
    4630:	86 81       	ldd	r24, Z+6	; 0x06
    4632:	97 81       	ldd	r25, Z+7	; 0x07
    4634:	21 15       	cp	r18, r1
    4636:	31 05       	cpc	r19, r1
    4638:	41 05       	cpc	r20, r1
    463a:	51 05       	cpc	r21, r1
    463c:	09 f4       	brne	.+2      	; 0x4640 <_nrk_time_to_ticks_long+0x32>
    463e:	5b c0       	rjmp	.+182    	; 0x46f6 <_nrk_time_to_ticks_long+0xe8>
{
   tmp=t->nano_secs;
    4640:	5b 01       	movw	r10, r22
    4642:	6c 01       	movw	r12, r24
    4644:	ee 24       	eor	r14, r14
    4646:	ff 24       	eor	r15, r15
    4648:	87 01       	movw	r16, r14
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    464a:	60 e0       	ldi	r22, 0x00	; 0
    464c:	38 c0       	rjmp	.+112    	; 0x46be <_nrk_time_to_ticks_long+0xb0>
    464e:	8a 2c       	mov	r8, r10
    4650:	ab 2d       	mov	r26, r11
    4652:	a6 53       	subi	r26, 0x36	; 54
    4654:	f1 e0       	ldi	r31, 0x01	; 1
    4656:	ab 15       	cp	r26, r11
    4658:	08 f0       	brcs	.+2      	; 0x465c <_nrk_time_to_ticks_long+0x4e>
    465a:	f0 e0       	ldi	r31, 0x00	; 0
    465c:	8c 2d       	mov	r24, r12
    465e:	86 56       	subi	r24, 0x66	; 102
    4660:	91 e0       	ldi	r25, 0x01	; 1
    4662:	8c 15       	cp	r24, r12
    4664:	08 f0       	brcs	.+2      	; 0x4668 <_nrk_time_to_ticks_long+0x5a>
    4666:	90 e0       	ldi	r25, 0x00	; 0
    4668:	f8 0f       	add	r31, r24
    466a:	71 e0       	ldi	r23, 0x01	; 1
    466c:	f8 17       	cp	r31, r24
    466e:	08 f0       	brcs	.+2      	; 0x4672 <_nrk_time_to_ticks_long+0x64>
    4670:	70 e0       	ldi	r23, 0x00	; 0
    4672:	97 2b       	or	r25, r23
    4674:	7d 2d       	mov	r23, r13
    4676:	75 5c       	subi	r23, 0xC5	; 197
    4678:	e1 e0       	ldi	r30, 0x01	; 1
    467a:	7d 15       	cp	r23, r13
    467c:	08 f0       	brcs	.+2      	; 0x4680 <_nrk_time_to_ticks_long+0x72>
    467e:	e0 e0       	ldi	r30, 0x00	; 0
    4680:	97 0f       	add	r25, r23
    4682:	81 e0       	ldi	r24, 0x01	; 1
    4684:	97 17       	cp	r25, r23
    4686:	08 f0       	brcs	.+2      	; 0x468a <_nrk_time_to_ticks_long+0x7c>
    4688:	80 e0       	ldi	r24, 0x00	; 0
    468a:	8e 2b       	or	r24, r30
    468c:	8e 0d       	add	r24, r14
    468e:	e1 e0       	ldi	r30, 0x01	; 1
    4690:	8e 15       	cp	r24, r14
    4692:	08 f0       	brcs	.+2      	; 0x4696 <_nrk_time_to_ticks_long+0x88>
    4694:	e0 e0       	ldi	r30, 0x00	; 0
    4696:	ef 0d       	add	r30, r15
    4698:	71 e0       	ldi	r23, 0x01	; 1
    469a:	ef 15       	cp	r30, r15
    469c:	08 f0       	brcs	.+2      	; 0x46a0 <_nrk_time_to_ticks_long+0x92>
    469e:	70 e0       	ldi	r23, 0x00	; 0
    46a0:	70 0f       	add	r23, r16
    46a2:	b1 e0       	ldi	r27, 0x01	; 1
    46a4:	70 17       	cp	r23, r16
    46a6:	08 f0       	brcs	.+2      	; 0x46aa <_nrk_time_to_ticks_long+0x9c>
    46a8:	b0 e0       	ldi	r27, 0x00	; 0
    46aa:	b1 0f       	add	r27, r17
    46ac:	a8 2c       	mov	r10, r8
    46ae:	ba 2e       	mov	r11, r26
    46b0:	cf 2e       	mov	r12, r31
    46b2:	d9 2e       	mov	r13, r25
    46b4:	e8 2e       	mov	r14, r24
    46b6:	fe 2e       	mov	r15, r30
    46b8:	07 2f       	mov	r16, r23
    46ba:	1b 2f       	mov	r17, r27
    46bc:	6f 5f       	subi	r22, 0xFF	; 255
    46be:	86 2f       	mov	r24, r22
    46c0:	90 e0       	ldi	r25, 0x00	; 0
    46c2:	a0 e0       	ldi	r26, 0x00	; 0
    46c4:	b0 e0       	ldi	r27, 0x00	; 0
    46c6:	82 17       	cp	r24, r18
    46c8:	93 07       	cpc	r25, r19
    46ca:	a4 07       	cpc	r26, r20
    46cc:	b5 07       	cpc	r27, r21
    46ce:	08 f4       	brcc	.+2      	; 0x46d2 <_nrk_time_to_ticks_long+0xc4>
    46d0:	be cf       	rjmp	.-132    	; 0x464e <_nrk_time_to_ticks_long+0x40>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    46d2:	95 01       	movw	r18, r10
    46d4:	a6 01       	movw	r20, r12
    46d6:	b7 01       	movw	r22, r14
    46d8:	c8 01       	movw	r24, r16
    46da:	e3 eb       	ldi	r30, 0xB3	; 179
    46dc:	ae 2e       	mov	r10, r30
    46de:	06 ee       	ldi	r16, 0xE6	; 230
    46e0:	b0 2e       	mov	r11, r16
    46e2:	1e e0       	ldi	r17, 0x0E	; 14
    46e4:	c1 2e       	mov	r12, r17
    46e6:	dd 24       	eor	r13, r13
    46e8:	ee 24       	eor	r14, r14
    46ea:	ff 24       	eor	r15, r15
    46ec:	00 e0       	ldi	r16, 0x00	; 0
    46ee:	10 e0       	ldi	r17, 0x00	; 0
    46f0:	0e 94 3e 2b 	call	0x567c	; 0x567c <__udivdi3>
    46f4:	06 c0       	rjmp	.+12     	; 0x4702 <_nrk_time_to_ticks_long+0xf4>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    46f6:	23 eb       	ldi	r18, 0xB3	; 179
    46f8:	36 ee       	ldi	r19, 0xE6	; 230
    46fa:	4e e0       	ldi	r20, 0x0E	; 14
    46fc:	50 e0       	ldi	r21, 0x00	; 0
    46fe:	0e 94 30 33 	call	0x6660	; 0x6660 <__udivmodsi4>
    4702:	b9 01       	movw	r22, r18
    4704:	ca 01       	movw	r24, r20
}
return ticks;
}
    4706:	1f 91       	pop	r17
    4708:	0f 91       	pop	r16
    470a:	ff 90       	pop	r15
    470c:	ef 90       	pop	r14
    470e:	df 90       	pop	r13
    4710:	cf 90       	pop	r12
    4712:	bf 90       	pop	r11
    4714:	af 90       	pop	r10
    4716:	9f 90       	pop	r9
    4718:	8f 90       	pop	r8
    471a:	08 95       	ret

0000471c <nrk_idle_task>:
#include <nrk_platform_time.h>
#include <nrk_scheduler.h>
#include <stdio.h>

void nrk_idle_task()
{
    471c:	0f 93       	push	r16
    471e:	1f 93       	push	r17

  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    4720:	01 e0       	ldi	r16, 0x01	; 1
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
    4722:	12 e0       	ldi	r17, 0x02	; 2
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{

  nrk_stack_check(); 
    4724:	0e 94 ef 19 	call	0x33de	; 0x33de <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    4728:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <_nrk_get_next_wakeup>
    472c:	84 30       	cpi	r24, 0x04	; 4
    472e:	28 f4       	brcc	.+10     	; 0x473a <nrk_idle_task+0x1e>
    {
	    _nrk_cpu_state=CPU_IDLE;
    4730:	00 93 89 0d 	sts	0x0D89, r16
	    nrk_idle();
    4734:	0e 94 9f 2a 	call	0x553e	; 0x553e <nrk_idle>
    4738:	08 c0       	rjmp	.+16     	; 0x474a <nrk_idle_task+0x2e>
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
    473a:	8a e0       	ldi	r24, 0x0A	; 10
    473c:	90 e0       	ldi	r25, 0x00	; 0
    473e:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <nrk_spin_wait_us>
	    _nrk_cpu_state=CPU_SLEEP;
    4742:	10 93 89 0d 	sts	0x0D89, r17
	    nrk_sleep();
    4746:	0e 94 93 2a 	call	0x5526	; 0x5526 <nrk_sleep>
	    nrk_idle();
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    474a:	80 91 96 0b 	lds	r24, 0x0B96
    474e:	85 35       	cpi	r24, 0x55	; 85
    4750:	19 f0       	breq	.+6      	; 0x4758 <nrk_idle_task+0x3c>
    4752:	88 e0       	ldi	r24, 0x08	; 8
    4754:	0e 94 13 18 	call	0x3026	; 0x3026 <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    4758:	80 91 7e 41 	lds	r24, 0x417E
    475c:	85 35       	cpi	r24, 0x55	; 85
    475e:	11 f3       	breq	.-60     	; 0x4724 <nrk_idle_task+0x8>
    4760:	88 e0       	ldi	r24, 0x08	; 8
    4762:	0e 94 13 18 	call	0x3026	; 0x3026 <nrk_error_add>
    4766:	de cf       	rjmp	.-68     	; 0x4724 <nrk_idle_task+0x8>

00004768 <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    4768:	2f 92       	push	r2
    476a:	3f 92       	push	r3
    476c:	4f 92       	push	r4
    476e:	5f 92       	push	r5
    4770:	6f 92       	push	r6
    4772:	7f 92       	push	r7
    4774:	8f 92       	push	r8
    4776:	9f 92       	push	r9
    4778:	af 92       	push	r10
    477a:	bf 92       	push	r11
    477c:	cf 92       	push	r12
    477e:	df 92       	push	r13
    4780:	ef 92       	push	r14
    4782:	ff 92       	push	r15
    4784:	0f 93       	push	r16
    4786:	1f 93       	push	r17
    4788:	df 93       	push	r29
    478a:	cf 93       	push	r28
    478c:	00 d0       	rcall	.+0      	; 0x478e <_nrk_scheduler+0x26>
    478e:	00 d0       	rcall	.+0      	; 0x4790 <_nrk_scheduler+0x28>
    4790:	cd b7       	in	r28, 0x3d	; 61
    4792:	de b7       	in	r29, 0x3e	; 62
    int8_t task_ID;
    uint16_t next_wake;
    uint16_t start_time_stamp;

    _nrk_precision_os_timer_reset();
    4794:	0e 94 98 26 	call	0x4d30	; 0x4d30 <_nrk_precision_os_timer_reset>
    nrk_int_enable();   // this should be removed...  Not needed
    4798:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <nrk_int_enable>


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_high_speed_timer_reset();
    479c:	0e 94 c9 26 	call	0x4d92	; 0x4d92 <_nrk_high_speed_timer_reset>
    start_time_stamp=_nrk_high_speed_timer_get();
    47a0:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <_nrk_high_speed_timer_get>
    47a4:	9a 83       	std	Y+2, r25	; 0x02
    47a6:	89 83       	std	Y+1, r24	; 0x01
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    47a8:	8a ef       	ldi	r24, 0xFA	; 250
    47aa:	0e 94 80 27 	call	0x4f00	; 0x4f00 <_nrk_set_next_wakeup>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    47ae:	60 91 1b 0c 	lds	r22, 0x0C1B
    47b2:	70 e0       	ldi	r23, 0x00	; 0
    47b4:	80 e0       	ldi	r24, 0x00	; 0
    47b6:	90 e0       	ldi	r25, 0x00	; 0
    47b8:	23 eb       	ldi	r18, 0xB3	; 179
    47ba:	36 ee       	ldi	r19, 0xE6	; 230
    47bc:	4e e0       	ldi	r20, 0x0E	; 14
    47be:	50 e0       	ldi	r21, 0x00	; 0
    47c0:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <__mulsi3>
    47c4:	7b 01       	movw	r14, r22
    47c6:	8c 01       	movw	r16, r24
    47c8:	80 91 90 0d 	lds	r24, 0x0D90
    47cc:	90 91 91 0d 	lds	r25, 0x0D91
    47d0:	a0 91 92 0d 	lds	r26, 0x0D92
    47d4:	b0 91 93 0d 	lds	r27, 0x0D93
    47d8:	e8 0e       	add	r14, r24
    47da:	f9 1e       	adc	r15, r25
    47dc:	0a 1f       	adc	r16, r26
    47de:	1b 1f       	adc	r17, r27
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    47e0:	c8 01       	movw	r24, r16
    47e2:	b7 01       	movw	r22, r14
    47e4:	0e 94 30 33 	call	0x6660	; 0x6660 <__udivmodsi4>
    47e8:	e6 1a       	sub	r14, r22
    47ea:	f7 0a       	sbc	r15, r23
    47ec:	08 0b       	sbc	r16, r24
    47ee:	19 0b       	sbc	r17, r25
    47f0:	80 91 8c 0d 	lds	r24, 0x0D8C
    47f4:	90 91 8d 0d 	lds	r25, 0x0D8D
    47f8:	a0 91 8e 0d 	lds	r26, 0x0D8E
    47fc:	b0 91 8f 0d 	lds	r27, 0x0D8F

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4800:	63 eb       	ldi	r22, 0xB3	; 179
    4802:	a6 2e       	mov	r10, r22
    4804:	66 ee       	ldi	r22, 0xE6	; 230
    4806:	b6 2e       	mov	r11, r22
    4808:	6e e0       	ldi	r22, 0x0E	; 14
    480a:	c6 2e       	mov	r12, r22
    480c:	d1 2c       	mov	r13, r1
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    480e:	14 c0       	rjmp	.+40     	; 0x4838 <_nrk_scheduler+0xd0>
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    4810:	80 e0       	ldi	r24, 0x00	; 0
    4812:	96 e3       	ldi	r25, 0x36	; 54
    4814:	a5 e6       	ldi	r26, 0x65	; 101
    4816:	b4 ec       	ldi	r27, 0xC4	; 196
    4818:	e8 0e       	add	r14, r24
    481a:	f9 1e       	adc	r15, r25
    481c:	0a 1f       	adc	r16, r26
    481e:	1b 1f       	adc	r17, r27
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4820:	c8 01       	movw	r24, r16
    4822:	b7 01       	movw	r22, r14
    4824:	a6 01       	movw	r20, r12
    4826:	95 01       	movw	r18, r10
    4828:	0e 94 30 33 	call	0x6660	; 0x6660 <__udivmodsi4>
    482c:	e6 1a       	sub	r14, r22
    482e:	f7 0a       	sbc	r15, r23
    4830:	08 0b       	sbc	r16, r24
    4832:	19 0b       	sbc	r17, r25
    4834:	d4 01       	movw	r26, r8
    4836:	c3 01       	movw	r24, r6
    4838:	3c 01       	movw	r6, r24
    483a:	4d 01       	movw	r8, r26
    483c:	08 94       	sec
    483e:	61 1c       	adc	r6, r1
    4840:	71 1c       	adc	r7, r1
    4842:	81 1c       	adc	r8, r1
    4844:	91 1c       	adc	r9, r1
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    4846:	e0 e0       	ldi	r30, 0x00	; 0
    4848:	ee 16       	cp	r14, r30
    484a:	ea ec       	ldi	r30, 0xCA	; 202
    484c:	fe 06       	cpc	r15, r30
    484e:	ea e9       	ldi	r30, 0x9A	; 154
    4850:	0e 07       	cpc	r16, r30
    4852:	eb e3       	ldi	r30, 0x3B	; 59
    4854:	1e 07       	cpc	r17, r30
    4856:	e0 f6       	brcc	.-72     	; 0x4810 <_nrk_scheduler+0xa8>
    4858:	80 93 8c 0d 	sts	0x0D8C, r24
    485c:	90 93 8d 0d 	sts	0x0D8D, r25
    4860:	a0 93 8e 0d 	sts	0x0D8E, r26
    4864:	b0 93 8f 0d 	sts	0x0D8F, r27
    4868:	e0 92 90 0d 	sts	0x0D90, r14
    486c:	f0 92 91 0d 	sts	0x0D91, r15
    4870:	00 93 92 0d 	sts	0x0D92, r16
    4874:	10 93 93 0d 	sts	0x0D93, r17
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    4878:	e0 91 95 0d 	lds	r30, 0x0D95
    487c:	f0 91 96 0d 	lds	r31, 0x0D96
    4880:	85 81       	ldd	r24, Z+5	; 0x05
    4882:	88 23       	and	r24, r24
    4884:	39 f1       	breq	.+78     	; 0x48d4 <_nrk_scheduler+0x16c>
    4886:	81 85       	ldd	r24, Z+9	; 0x09
    4888:	84 30       	cpi	r24, 0x04	; 4
    488a:	21 f1       	breq	.+72     	; 0x48d4 <_nrk_scheduler+0x16c>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    488c:	87 81       	ldd	r24, Z+7	; 0x07
    488e:	82 30       	cpi	r24, 0x02	; 2
    4890:	29 f0       	breq	.+10     	; 0x489c <_nrk_scheduler+0x134>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    4892:	88 23       	and	r24, r24
    4894:	41 f0       	breq	.+16     	; 0x48a6 <_nrk_scheduler+0x13e>
    4896:	86 81       	ldd	r24, Z+6	; 0x06
    4898:	88 23       	and	r24, r24
    489a:	11 f4       	brne	.+4      	; 0x48a0 <_nrk_scheduler+0x138>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    489c:	85 e0       	ldi	r24, 0x05	; 5
    489e:	01 c0       	rjmp	.+2      	; 0x48a2 <_nrk_scheduler+0x13a>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    48a0:	83 e0       	ldi	r24, 0x03	; 3
    48a2:	81 87       	std	Z+9, r24	; 0x09
    48a4:	14 c0       	rjmp	.+40     	; 0x48ce <_nrk_scheduler+0x166>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    48a6:	83 e0       	ldi	r24, 0x03	; 3
    48a8:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    48aa:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    48ac:	16 82       	std	Z+6, r1	; 0x06
	    // agr added to fix initial startup scheduling problem
            if(nrk_cur_task_TCB->next_wakeup==0) {
    48ae:	85 89       	ldd	r24, Z+21	; 0x15
    48b0:	96 89       	ldd	r25, Z+22	; 0x16
    48b2:	a7 89       	ldd	r26, Z+23	; 0x17
    48b4:	b0 8d       	ldd	r27, Z+24	; 0x18
    48b6:	00 97       	sbiw	r24, 0x00	; 0
    48b8:	a1 05       	cpc	r26, r1
    48ba:	b1 05       	cpc	r27, r1
    48bc:	41 f4       	brne	.+16     	; 0x48ce <_nrk_scheduler+0x166>
		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
    48be:	81 8d       	ldd	r24, Z+25	; 0x19
    48c0:	92 8d       	ldd	r25, Z+26	; 0x1a
    48c2:	a3 8d       	ldd	r26, Z+27	; 0x1b
    48c4:	b4 8d       	ldd	r27, Z+28	; 0x1c
    48c6:	85 8b       	std	Z+21, r24	; 0x15
    48c8:	96 8b       	std	Z+22, r25	; 0x16
    48ca:	a7 8b       	std	Z+23, r26	; 0x17
    48cc:	b0 8f       	std	Z+24, r27	; 0x18
		}
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    48ce:	80 85       	ldd	r24, Z+8	; 0x08
    48d0:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    48d4:	e0 91 95 0d 	lds	r30, 0x0D95
    48d8:	f0 91 96 0d 	lds	r31, 0x0D96
    48dc:	85 a1       	ldd	r24, Z+37	; 0x25
    48de:	96 a1       	ldd	r25, Z+38	; 0x26
    48e0:	a7 a1       	ldd	r26, Z+39	; 0x27
    48e2:	b0 a5       	ldd	r27, Z+40	; 0x28
    48e4:	00 97       	sbiw	r24, 0x00	; 0
    48e6:	a1 05       	cpc	r26, r1
    48e8:	b1 05       	cpc	r27, r1
    48ea:	09 f4       	brne	.+2      	; 0x48ee <_nrk_scheduler+0x186>
    48ec:	44 c0       	rjmp	.+136    	; 0x4976 <_nrk_scheduler+0x20e>
    48ee:	60 85       	ldd	r22, Z+8	; 0x08
    48f0:	66 23       	and	r22, r22
    48f2:	09 f4       	brne	.+2      	; 0x48f6 <_nrk_scheduler+0x18e>
    48f4:	40 c0       	rjmp	.+128    	; 0x4976 <_nrk_scheduler+0x20e>
    48f6:	81 85       	ldd	r24, Z+9	; 0x09
    48f8:	84 30       	cpi	r24, 0x04	; 4
    48fa:	e9 f1       	breq	.+122    	; 0x4976 <_nrk_scheduler+0x20e>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    48fc:	25 8d       	ldd	r18, Z+29	; 0x1d
    48fe:	36 8d       	ldd	r19, Z+30	; 0x1e
    4900:	47 8d       	ldd	r20, Z+31	; 0x1f
    4902:	50 a1       	ldd	r21, Z+32	; 0x20
    4904:	80 91 1b 0c 	lds	r24, 0x0C1B
    4908:	90 e0       	ldi	r25, 0x00	; 0
    490a:	a0 e0       	ldi	r26, 0x00	; 0
    490c:	b0 e0       	ldi	r27, 0x00	; 0
    490e:	28 17       	cp	r18, r24
    4910:	39 07       	cpc	r19, r25
    4912:	4a 07       	cpc	r20, r26
    4914:	5b 07       	cpc	r21, r27
    4916:	60 f4       	brcc	.+24     	; 0x4930 <_nrk_scheduler+0x1c8>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    4918:	82 e0       	ldi	r24, 0x02	; 2
    491a:	0e 94 0c 18 	call	0x3018	; 0x3018 <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    491e:	e0 91 95 0d 	lds	r30, 0x0D95
    4922:	f0 91 96 0d 	lds	r31, 0x0D96
    4926:	15 8e       	std	Z+29, r1	; 0x1d
    4928:	16 8e       	std	Z+30, r1	; 0x1e
    492a:	17 8e       	std	Z+31, r1	; 0x1f
    492c:	10 a2       	std	Z+32, r1	; 0x20
    492e:	08 c0       	rjmp	.+16     	; 0x4940 <_nrk_scheduler+0x1d8>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    4930:	28 1b       	sub	r18, r24
    4932:	39 0b       	sbc	r19, r25
    4934:	4a 0b       	sbc	r20, r26
    4936:	5b 0b       	sbc	r21, r27
    4938:	25 8f       	std	Z+29, r18	; 0x1d
    493a:	36 8f       	std	Z+30, r19	; 0x1e
    493c:	47 8f       	std	Z+31, r20	; 0x1f
    493e:	50 a3       	std	Z+32, r21	; 0x20

        task_ID= nrk_cur_task_TCB->task_ID;
    4940:	e0 91 95 0d 	lds	r30, 0x0D95
    4944:	f0 91 96 0d 	lds	r31, 0x0D96
    4948:	00 85       	ldd	r16, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    494a:	25 8d       	ldd	r18, Z+29	; 0x1d
    494c:	36 8d       	ldd	r19, Z+30	; 0x1e
    494e:	47 8d       	ldd	r20, Z+31	; 0x1f
    4950:	50 a1       	ldd	r21, Z+32	; 0x20
    4952:	21 15       	cp	r18, r1
    4954:	31 05       	cpc	r19, r1
    4956:	41 05       	cpc	r20, r1
    4958:	51 05       	cpc	r21, r1
    495a:	69 f4       	brne	.+26     	; 0x4976 <_nrk_scheduler+0x20e>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    495c:	83 e0       	ldi	r24, 0x03	; 3
    495e:	60 2f       	mov	r22, r16
    4960:	0e 94 0c 18 	call	0x3018	; 0x3018 <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    4964:	e0 91 95 0d 	lds	r30, 0x0D95
    4968:	f0 91 96 0d 	lds	r31, 0x0D96
    496c:	83 e0       	ldi	r24, 0x03	; 3
    496e:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    4970:	80 2f       	mov	r24, r16
    4972:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <nrk_rem_from_readyQ>
    4976:	56 e8       	ldi	r21, 0x86	; 134
    4978:	e5 2e       	mov	r14, r21
    497a:	5c e0       	ldi	r21, 0x0C	; 12
    497c:	f5 2e       	mov	r15, r21
    497e:	c7 01       	movw	r24, r14
    4980:	40 97       	sbiw	r24, 0x10	; 16

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4982:	00 e6       	ldi	r16, 0x60	; 96
    4984:	1a ee       	ldi	r17, 0xEA	; 234
    4986:	99 24       	eor	r9, r9
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
                    nrk_task_TCB[task_ID].num_periods=1;
    4988:	41 e0       	ldi	r20, 0x01	; 1
    498a:	24 2e       	mov	r2, r20
    498c:	31 2c       	mov	r3, r1
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    498e:	3a ef       	ldi	r19, 0xFA	; 250
    4990:	43 2e       	mov	r4, r19
    4992:	51 2c       	mov	r5, r1
    4994:	61 2c       	mov	r6, r1
    4996:	71 2c       	mov	r7, r1
                nrk_task_TCB[task_ID].nw_flag=0;
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    nrk_task_TCB[task_ID].task_state = READY;
    4998:	22 e0       	ldi	r18, 0x02	; 2
    499a:	82 2e       	mov	r8, r18
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    499c:	68 01       	movw	r12, r16
    499e:	9c 83       	std	Y+4, r25	; 0x04
    49a0:	8b 83       	std	Y+3, r24	; 0x03
    49a2:	57 01       	movw	r10, r14

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    49a4:	ab 81       	ldd	r26, Y+3	; 0x03
    49a6:	bc 81       	ldd	r27, Y+4	; 0x04
    49a8:	13 96       	adiw	r26, 0x03	; 3
    49aa:	8c 91       	ld	r24, X
    49ac:	13 97       	sbiw	r26, 0x03	; 3
    49ae:	8f 3f       	cpi	r24, 0xFF	; 255
    49b0:	09 f4       	brne	.+2      	; 0x49b4 <_nrk_scheduler+0x24c>
    49b2:	15 c1       	rjmp	.+554    	; 0x4bde <_nrk_scheduler+0x476>
        nrk_task_TCB[task_ID].suspend_flag=0;
    49b4:	1c 92       	st	X, r1
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    49b6:	88 23       	and	r24, r24
    49b8:	09 f4       	brne	.+2      	; 0x49bc <_nrk_scheduler+0x254>
    49ba:	6d c0       	rjmp	.+218    	; 0x4a96 <_nrk_scheduler+0x32e>
    49bc:	14 96       	adiw	r26, 0x04	; 4
    49be:	8c 91       	ld	r24, X
    49c0:	14 97       	sbiw	r26, 0x04	; 4
    49c2:	84 30       	cpi	r24, 0x04	; 4
    49c4:	09 f4       	brne	.+2      	; 0x49c8 <_nrk_scheduler+0x260>
    49c6:	67 c0       	rjmp	.+206    	; 0x4a96 <_nrk_scheduler+0x32e>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    49c8:	f5 01       	movw	r30, r10
    49ca:	80 81       	ld	r24, Z
    49cc:	91 81       	ldd	r25, Z+1	; 0x01
    49ce:	a2 81       	ldd	r26, Z+2	; 0x02
    49d0:	b3 81       	ldd	r27, Z+3	; 0x03
    49d2:	e0 90 1b 0c 	lds	r14, 0x0C1B
    49d6:	ff 24       	eor	r15, r15
    49d8:	00 e0       	ldi	r16, 0x00	; 0
    49da:	10 e0       	ldi	r17, 0x00	; 0
    49dc:	8e 15       	cp	r24, r14
    49de:	9f 05       	cpc	r25, r15
    49e0:	a0 07       	cpc	r26, r16
    49e2:	b1 07       	cpc	r27, r17
    49e4:	48 f0       	brcs	.+18     	; 0x49f8 <_nrk_scheduler+0x290>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    49e6:	8e 19       	sub	r24, r14
    49e8:	9f 09       	sbc	r25, r15
    49ea:	a0 0b       	sbc	r26, r16
    49ec:	b1 0b       	sbc	r27, r17
    49ee:	80 83       	st	Z, r24
    49f0:	91 83       	std	Z+1, r25	; 0x01
    49f2:	a2 83       	std	Z+2, r26	; 0x02
    49f4:	b3 83       	std	Z+3, r27	; 0x03
    49f6:	06 c0       	rjmp	.+12     	; 0x4a04 <_nrk_scheduler+0x29c>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    49f8:	d5 01       	movw	r26, r10
    49fa:	1d 92       	st	X+, r1
    49fc:	1d 92       	st	X+, r1
    49fe:	1d 92       	st	X+, r1
    4a00:	1c 92       	st	X, r1
    4a02:	13 97       	sbiw	r26, 0x03	; 3
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    4a04:	eb 81       	ldd	r30, Y+3	; 0x03
    4a06:	fc 81       	ldd	r31, Y+4	; 0x04
    4a08:	84 89       	ldd	r24, Z+20	; 0x14
    4a0a:	95 89       	ldd	r25, Z+21	; 0x15
    4a0c:	a6 89       	ldd	r26, Z+22	; 0x16
    4a0e:	b7 89       	ldd	r27, Z+23	; 0x17
    4a10:	8e 15       	cp	r24, r14
    4a12:	9f 05       	cpc	r25, r15
    4a14:	a0 07       	cpc	r26, r16
    4a16:	b1 07       	cpc	r27, r17
    4a18:	48 f0       	brcs	.+18     	; 0x4a2c <_nrk_scheduler+0x2c4>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    4a1a:	8e 19       	sub	r24, r14
    4a1c:	9f 09       	sbc	r25, r15
    4a1e:	a0 0b       	sbc	r26, r16
    4a20:	b1 0b       	sbc	r27, r17
    4a22:	84 8b       	std	Z+20, r24	; 0x14
    4a24:	95 8b       	std	Z+21, r25	; 0x15
    4a26:	a6 8b       	std	Z+22, r26	; 0x16
    4a28:	b7 8b       	std	Z+23, r27	; 0x17
    4a2a:	23 c0       	rjmp	.+70     	; 0x4a72 <_nrk_scheduler+0x30a>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    4a2c:	ab 81       	ldd	r26, Y+3	; 0x03
    4a2e:	bc 81       	ldd	r27, Y+4	; 0x04
    4a30:	5c 96       	adiw	r26, 0x1c	; 28
    4a32:	2d 91       	ld	r18, X+
    4a34:	3d 91       	ld	r19, X+
    4a36:	4d 91       	ld	r20, X+
    4a38:	5c 91       	ld	r21, X
    4a3a:	5f 97       	sbiw	r26, 0x1f	; 31
    4a3c:	e2 16       	cp	r14, r18
    4a3e:	f3 06       	cpc	r15, r19
    4a40:	04 07       	cpc	r16, r20
    4a42:	15 07       	cpc	r17, r21
    4a44:	50 f4       	brcc	.+20     	; 0x4a5a <_nrk_scheduler+0x2f2>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    4a46:	2e 19       	sub	r18, r14
    4a48:	3f 09       	sbc	r19, r15
    4a4a:	40 0b       	sbc	r20, r16
    4a4c:	51 0b       	sbc	r21, r17
    4a4e:	fd 01       	movw	r30, r26
    4a50:	24 8b       	std	Z+20, r18	; 0x14
    4a52:	35 8b       	std	Z+21, r19	; 0x15
    4a54:	46 8b       	std	Z+22, r20	; 0x16
    4a56:	57 8b       	std	Z+23, r21	; 0x17
    4a58:	0c c0       	rjmp	.+24     	; 0x4a72 <_nrk_scheduler+0x30a>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    4a5a:	c8 01       	movw	r24, r16
    4a5c:	b7 01       	movw	r22, r14
    4a5e:	0e 94 30 33 	call	0x6660	; 0x6660 <__udivmodsi4>
    4a62:	ab 81       	ldd	r26, Y+3	; 0x03
    4a64:	bc 81       	ldd	r27, Y+4	; 0x04
    4a66:	54 96       	adiw	r26, 0x14	; 20
    4a68:	6d 93       	st	X+, r22
    4a6a:	7d 93       	st	X+, r23
    4a6c:	8d 93       	st	X+, r24
    4a6e:	9c 93       	st	X, r25
    4a70:	57 97       	sbiw	r26, 0x17	; 23
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    4a72:	eb 81       	ldd	r30, Y+3	; 0x03
    4a74:	fc 81       	ldd	r31, Y+4	; 0x04
    4a76:	84 89       	ldd	r24, Z+20	; 0x14
    4a78:	95 89       	ldd	r25, Z+21	; 0x15
    4a7a:	a6 89       	ldd	r26, Z+22	; 0x16
    4a7c:	b7 89       	ldd	r27, Z+23	; 0x17
    4a7e:	00 97       	sbiw	r24, 0x00	; 0
    4a80:	a1 05       	cpc	r26, r1
    4a82:	b1 05       	cpc	r27, r1
    4a84:	41 f4       	brne	.+16     	; 0x4a96 <_nrk_scheduler+0x32e>
    4a86:	84 8d       	ldd	r24, Z+28	; 0x1c
    4a88:	95 8d       	ldd	r25, Z+29	; 0x1d
    4a8a:	a6 8d       	ldd	r26, Z+30	; 0x1e
    4a8c:	b7 8d       	ldd	r27, Z+31	; 0x1f
    4a8e:	84 8b       	std	Z+20, r24	; 0x14
    4a90:	95 8b       	std	Z+21, r25	; 0x15
    4a92:	a6 8b       	std	Z+22, r26	; 0x16
    4a94:	b7 8b       	std	Z+23, r27	; 0x17

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    4a96:	ab 81       	ldd	r26, Y+3	; 0x03
    4a98:	bc 81       	ldd	r27, Y+4	; 0x04
    4a9a:	14 96       	adiw	r26, 0x04	; 4
    4a9c:	8c 91       	ld	r24, X
    4a9e:	14 97       	sbiw	r26, 0x04	; 4
    4aa0:	83 30       	cpi	r24, 0x03	; 3
    4aa2:	09 f0       	breq	.+2      	; 0x4aa6 <_nrk_scheduler+0x33e>
    4aa4:	9c c0       	rjmp	.+312    	; 0x4bde <_nrk_scheduler+0x476>
        {
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    4aa6:	f5 01       	movw	r30, r10
    4aa8:	80 81       	ld	r24, Z
    4aaa:	91 81       	ldd	r25, Z+1	; 0x01
    4aac:	a2 81       	ldd	r26, Z+2	; 0x02
    4aae:	b3 81       	ldd	r27, Z+3	; 0x03
    4ab0:	00 97       	sbiw	r24, 0x00	; 0
    4ab2:	a1 05       	cpc	r26, r1
    4ab4:	b1 05       	cpc	r27, r1
    4ab6:	09 f0       	breq	.+2      	; 0x4aba <_nrk_scheduler+0x352>
    4ab8:	7e c0       	rjmp	.+252    	; 0x4bb6 <_nrk_scheduler+0x44e>
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    4aba:	ab 81       	ldd	r26, Y+3	; 0x03
    4abc:	bc 81       	ldd	r27, Y+4	; 0x04
    4abe:	12 96       	adiw	r26, 0x02	; 2
    4ac0:	8c 91       	ld	r24, X
    4ac2:	12 97       	sbiw	r26, 0x02	; 2
    4ac4:	88 23       	and	r24, r24
    4ac6:	c1 f0       	breq	.+48     	; 0x4af8 <_nrk_scheduler+0x390>
    4ac8:	11 96       	adiw	r26, 0x01	; 1
    4aca:	8c 91       	ld	r24, X
    4acc:	11 97       	sbiw	r26, 0x01	; 1
    4ace:	88 23       	and	r24, r24
    4ad0:	99 f0       	breq	.+38     	; 0x4af8 <_nrk_scheduler+0x390>
    4ad2:	81 e0       	ldi	r24, 0x01	; 1
    4ad4:	90 e0       	ldi	r25, 0x00	; 0
    4ad6:	a0 e0       	ldi	r26, 0x00	; 0
    4ad8:	b0 e0       	ldi	r27, 0x00	; 0
    4ada:	00 90 85 0d 	lds	r0, 0x0D85
    4ade:	04 c0       	rjmp	.+8      	; 0x4ae8 <_nrk_scheduler+0x380>
    4ae0:	88 0f       	add	r24, r24
    4ae2:	99 1f       	adc	r25, r25
    4ae4:	aa 1f       	adc	r26, r26
    4ae6:	bb 1f       	adc	r27, r27
    4ae8:	0a 94       	dec	r0
    4aea:	d2 f7       	brpl	.-12     	; 0x4ae0 <_nrk_scheduler+0x378>
    4aec:	eb 81       	ldd	r30, Y+3	; 0x03
    4aee:	fc 81       	ldd	r31, Y+4	; 0x04
    4af0:	84 87       	std	Z+12, r24	; 0x0c
    4af2:	95 87       	std	Z+13, r25	; 0x0d
    4af4:	a6 87       	std	Z+14, r26	; 0x0e
    4af6:	b7 87       	std	Z+15, r27	; 0x0f
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    4af8:	ab 81       	ldd	r26, Y+3	; 0x03
    4afa:	bc 81       	ldd	r27, Y+4	; 0x04
    4afc:	12 96       	adiw	r26, 0x02	; 2
    4afe:	1c 92       	st	X, r1
    4b00:	12 97       	sbiw	r26, 0x02	; 2
                nrk_task_TCB[task_ID].nw_flag=0;
    4b02:	11 96       	adiw	r26, 0x01	; 1
    4b04:	1c 92       	st	X, r1
    4b06:	11 97       	sbiw	r26, 0x01	; 1
                nrk_task_TCB[task_ID].suspend_flag=0;
    4b08:	1c 92       	st	X, r1
                if(nrk_task_TCB[task_ID].num_periods==1)
    4b0a:	f5 01       	movw	r30, r10
    4b0c:	64 89       	ldd	r22, Z+20	; 0x14
    4b0e:	75 89       	ldd	r23, Z+21	; 0x15
    4b10:	5c 96       	adiw	r26, 0x1c	; 28
    4b12:	ed 90       	ld	r14, X+
    4b14:	fd 90       	ld	r15, X+
    4b16:	0d 91       	ld	r16, X+
    4b18:	1c 91       	ld	r17, X
    4b1a:	5f 97       	sbiw	r26, 0x1f	; 31
    4b1c:	eb 81       	ldd	r30, Y+3	; 0x03
    4b1e:	fc 81       	ldd	r31, Y+4	; 0x04
    4b20:	80 a1       	ldd	r24, Z+32	; 0x20
    4b22:	91 a1       	ldd	r25, Z+33	; 0x21
    4b24:	a2 a1       	ldd	r26, Z+34	; 0x22
    4b26:	b3 a1       	ldd	r27, Z+35	; 0x23
    4b28:	61 30       	cpi	r22, 0x01	; 1
    4b2a:	71 05       	cpc	r23, r1
    4b2c:	e9 f4       	brne	.+58     	; 0x4b68 <_nrk_scheduler+0x400>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    4b2e:	80 8f       	std	Z+24, r24	; 0x18
    4b30:	91 8f       	std	Z+25, r25	; 0x19
    4b32:	a2 8f       	std	Z+26, r26	; 0x1a
    4b34:	b3 8f       	std	Z+27, r27	; 0x1b
                    nrk_task_TCB[task_ID].task_state = READY;
    4b36:	84 82       	std	Z+4, r8	; 0x04
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    4b38:	84 89       	ldd	r24, Z+20	; 0x14
    4b3a:	95 89       	ldd	r25, Z+21	; 0x15
    4b3c:	a6 89       	ldd	r26, Z+22	; 0x16
    4b3e:	b7 89       	ldd	r27, Z+23	; 0x17
    4b40:	f5 01       	movw	r30, r10
    4b42:	80 83       	st	Z, r24
    4b44:	91 83       	std	Z+1, r25	; 0x01
    4b46:	a2 83       	std	Z+2, r26	; 0x02
    4b48:	b3 83       	std	Z+3, r27	; 0x03
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    4b4a:	e1 14       	cp	r14, r1
    4b4c:	f1 04       	cpc	r15, r1
    4b4e:	01 05       	cpc	r16, r1
    4b50:	11 05       	cpc	r17, r1
    4b52:	31 f4       	brne	.+12     	; 0x4b60 <_nrk_scheduler+0x3f8>
    4b54:	d5 01       	movw	r26, r10
    4b56:	4d 92       	st	X+, r4
    4b58:	5d 92       	st	X+, r5
    4b5a:	6d 92       	st	X+, r6
    4b5c:	7c 92       	st	X, r7
    4b5e:	13 97       	sbiw	r26, 0x03	; 3
		    nrk_add_to_readyQ(task_ID);
    4b60:	89 2d       	mov	r24, r9
    4b62:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <nrk_add_to_readyQ>
    4b66:	27 c0       	rjmp	.+78     	; 0x4bb6 <_nrk_scheduler+0x44e>
                }
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    4b68:	eb 81       	ldd	r30, Y+3	; 0x03
    4b6a:	fc 81       	ldd	r31, Y+4	; 0x04
    4b6c:	80 8f       	std	Z+24, r24	; 0x18
    4b6e:	91 8f       	std	Z+25, r25	; 0x19
    4b70:	a2 8f       	std	Z+26, r26	; 0x1a
    4b72:	b3 8f       	std	Z+27, r27	; 0x1b
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    4b74:	61 50       	subi	r22, 0x01	; 1
    4b76:	70 40       	sbci	r23, 0x00	; 0
    4b78:	80 e0       	ldi	r24, 0x00	; 0
    4b7a:	90 e0       	ldi	r25, 0x00	; 0
    4b7c:	a8 01       	movw	r20, r16
    4b7e:	97 01       	movw	r18, r14
    4b80:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <__mulsi3>
    4b84:	d5 01       	movw	r26, r10
    4b86:	6d 93       	st	X+, r22
    4b88:	7d 93       	st	X+, r23
    4b8a:	8d 93       	st	X+, r24
    4b8c:	9c 93       	st	X, r25
    4b8e:	13 97       	sbiw	r26, 0x03	; 3
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    4b90:	eb 81       	ldd	r30, Y+3	; 0x03
    4b92:	fc 81       	ldd	r31, Y+4	; 0x04
    4b94:	64 8b       	std	Z+20, r22	; 0x14
    4b96:	75 8b       	std	Z+21, r23	; 0x15
    4b98:	86 8b       	std	Z+22, r24	; 0x16
    4b9a:	97 8b       	std	Z+23, r25	; 0x17
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    4b9c:	e1 14       	cp	r14, r1
    4b9e:	f1 04       	cpc	r15, r1
    4ba0:	01 05       	cpc	r16, r1
    4ba2:	11 05       	cpc	r17, r1
    4ba4:	29 f4       	brne	.+10     	; 0x4bb0 <_nrk_scheduler+0x448>
    4ba6:	4d 92       	st	X+, r4
    4ba8:	5d 92       	st	X+, r5
    4baa:	6d 92       	st	X+, r6
    4bac:	7c 92       	st	X, r7
    4bae:	13 97       	sbiw	r26, 0x03	; 3
                    nrk_task_TCB[task_ID].num_periods=1;
    4bb0:	f5 01       	movw	r30, r10
    4bb2:	35 8a       	std	Z+21, r3	; 0x15
    4bb4:	24 8a       	std	Z+20, r2	; 0x14
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    4bb6:	d5 01       	movw	r26, r10
    4bb8:	2d 91       	ld	r18, X+
    4bba:	3d 91       	ld	r19, X+
    4bbc:	4d 91       	ld	r20, X+
    4bbe:	5c 91       	ld	r21, X
    4bc0:	13 97       	sbiw	r26, 0x03	; 3
    4bc2:	21 15       	cp	r18, r1
    4bc4:	31 05       	cpc	r19, r1
    4bc6:	41 05       	cpc	r20, r1
    4bc8:	51 05       	cpc	r21, r1
    4bca:	49 f0       	breq	.+18     	; 0x4bde <_nrk_scheduler+0x476>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
    4bcc:	c6 01       	movw	r24, r12
    4bce:	a0 e0       	ldi	r26, 0x00	; 0
    4bd0:	b0 e0       	ldi	r27, 0x00	; 0
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    4bd2:	28 17       	cp	r18, r24
    4bd4:	39 07       	cpc	r19, r25
    4bd6:	4a 07       	cpc	r20, r26
    4bd8:	5b 07       	cpc	r21, r27
    4bda:	08 f4       	brcc	.+2      	; 0x4bde <_nrk_scheduler+0x476>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
            {
                // Find closest next_wake task
                next_wake=nrk_task_TCB[task_ID].next_wakeup;
    4bdc:	69 01       	movw	r12, r18

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    4bde:	93 94       	inc	r9
    4be0:	eb e2       	ldi	r30, 0x2B	; 43
    4be2:	f0 e0       	ldi	r31, 0x00	; 0
    4be4:	ae 0e       	add	r10, r30
    4be6:	bf 1e       	adc	r11, r31
    4be8:	8b 81       	ldd	r24, Y+3	; 0x03
    4bea:	9c 81       	ldd	r25, Y+4	; 0x04
    4bec:	8b 96       	adiw	r24, 0x2b	; 43
    4bee:	9c 83       	std	Y+4, r25	; 0x04
    4bf0:	8b 83       	std	Y+3, r24	; 0x03
    4bf2:	99 2d       	mov	r25, r9
    4bf4:	96 30       	cpi	r25, 0x06	; 6
    4bf6:	09 f0       	breq	.+2      	; 0x4bfa <_nrk_scheduler+0x492>
    4bf8:	d5 ce       	rjmp	.-598    	; 0x49a4 <_nrk_scheduler+0x23c>
    4bfa:	86 01       	movw	r16, r12


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
#endif
    task_ID = nrk_get_high_ready_task_ID();
    4bfc:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <nrk_get_high_ready_task_ID>
    4c00:	e8 2e       	mov	r14, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    4c02:	28 2f       	mov	r18, r24
    4c04:	33 27       	eor	r19, r19
    4c06:	27 fd       	sbrc	r18, 7
    4c08:	30 95       	com	r19
    4c0a:	8b e2       	ldi	r24, 0x2B	; 43
    4c0c:	90 e0       	ldi	r25, 0x00	; 0
    4c0e:	28 9f       	mul	r18, r24
    4c10:	f0 01       	movw	r30, r0
    4c12:	29 9f       	mul	r18, r25
    4c14:	f0 0d       	add	r31, r0
    4c16:	38 9f       	mul	r19, r24
    4c18:	f0 0d       	add	r31, r0
    4c1a:	11 24       	eor	r1, r1
    4c1c:	ef 58       	subi	r30, 0x8F	; 143
    4c1e:	f3 4f       	sbci	r31, 0xF3	; 243
    4c20:	a2 84       	ldd	r10, Z+10	; 0x0a
    4c22:	a0 92 97 0d 	sts	0x0D97, r10
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    4c26:	f0 93 87 0d 	sts	0x0D87, r31
    4c2a:	e0 93 86 0d 	sts	0x0D86, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    4c2e:	ee 20       	and	r14, r14
    4c30:	f9 f0       	breq	.+62     	; 0x4c70 <_nrk_scheduler+0x508>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    4c32:	85 a1       	ldd	r24, Z+37	; 0x25
    4c34:	96 a1       	ldd	r25, Z+38	; 0x26
    4c36:	a7 a1       	ldd	r26, Z+39	; 0x27
    4c38:	b0 a5       	ldd	r27, Z+40	; 0x28
    4c3a:	00 97       	sbiw	r24, 0x00	; 0
    4c3c:	a1 05       	cpc	r26, r1
    4c3e:	b1 05       	cpc	r27, r1
    4c40:	99 f0       	breq	.+38     	; 0x4c68 <_nrk_scheduler+0x500>
    4c42:	25 8d       	ldd	r18, Z+29	; 0x1d
    4c44:	36 8d       	ldd	r19, Z+30	; 0x1e
    4c46:	47 8d       	ldd	r20, Z+31	; 0x1f
    4c48:	50 a1       	ldd	r21, Z+32	; 0x20
    4c4a:	2a 3f       	cpi	r18, 0xFA	; 250
    4c4c:	31 05       	cpc	r19, r1
    4c4e:	41 05       	cpc	r20, r1
    4c50:	51 05       	cpc	r21, r1
    4c52:	50 f4       	brcc	.+20     	; 0x4c68 <_nrk_scheduler+0x500>
        {
            if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    4c54:	b6 01       	movw	r22, r12
    4c56:	80 e0       	ldi	r24, 0x00	; 0
    4c58:	90 e0       	ldi	r25, 0x00	; 0
    4c5a:	26 17       	cp	r18, r22
    4c5c:	37 07       	cpc	r19, r23
    4c5e:	48 07       	cpc	r20, r24
    4c60:	59 07       	cpc	r21, r25
    4c62:	e8 f4       	brcc	.+58     	; 0x4c9e <_nrk_scheduler+0x536>
                next_wake=nrk_task_TCB[task_ID].cpu_remaining;
    4c64:	89 01       	movw	r16, r18
    4c66:	1b c0       	rjmp	.+54     	; 0x4c9e <_nrk_scheduler+0x536>
    4c68:	0b 3f       	cpi	r16, 0xFB	; 251
    4c6a:	11 05       	cpc	r17, r1
    4c6c:	c0 f0       	brcs	.+48     	; 0x4c9e <_nrk_scheduler+0x536>
    4c6e:	12 c0       	rjmp	.+36     	; 0x4c94 <_nrk_scheduler+0x52c>
        // Make sure you wake up from the idle task a little earlier
        // if you would go into deep sleep...
        // After waking from deep sleep, the next context swap must be at least
        // NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time.
#ifndef NRK_NO_POWER_DOWN
        if(next_wake>NRK_SLEEP_WAKEUP_TIME)
    4c70:	04 30       	cpi	r16, 0x04	; 4
    4c72:	11 05       	cpc	r17, r1
    4c74:	a0 f0       	brcs	.+40     	; 0x4c9e <_nrk_scheduler+0x536>
        {
            if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
    4c76:	c6 01       	movw	r24, r12
    4c78:	03 97       	sbiw	r24, 0x03	; 3
    4c7a:	8a 3f       	cpi	r24, 0xFA	; 250
    4c7c:	91 05       	cpc	r25, r1
    4c7e:	38 f4       	brcc	.+14     	; 0x4c8e <_nrk_scheduler+0x526>
    4c80:	8c 01       	movw	r16, r24
    4c82:	82 30       	cpi	r24, 0x02	; 2
    4c84:	91 05       	cpc	r25, r1
    4c86:	58 f4       	brcc	.+22     	; 0x4c9e <_nrk_scheduler+0x536>
    4c88:	02 e0       	ldi	r16, 0x02	; 2
    4c8a:	10 e0       	ldi	r17, 0x00	; 0
    4c8c:	08 c0       	rjmp	.+16     	; 0x4c9e <_nrk_scheduler+0x536>
                else
                {
                    next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
                }
            }
            else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME)
    4c8e:	0d 3f       	cpi	r16, 0xFD	; 253
    4c90:	11 05       	cpc	r17, r1
    4c92:	19 f0       	breq	.+6      	; 0x4c9a <_nrk_scheduler+0x532>
            {
                next_wake=MAX_SCHED_WAKEUP_TIME;
    4c94:	0a ef       	ldi	r16, 0xFA	; 250
    4c96:	10 e0       	ldi	r17, 0x00	; 0
    4c98:	02 c0       	rjmp	.+4      	; 0x4c9e <_nrk_scheduler+0x536>
            }
            else
            {
                next_wake=MAX_SCHED_WAKEUP_TIME-NRK_SLEEP_WAKEUP_TIME;
    4c9a:	07 ef       	ldi	r16, 0xF7	; 247
    4c9c:	10 e0       	ldi	r17, 0x00	; 0
//  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    4c9e:	a0 92 88 0d 	sts	0x0D88, r10
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    4ca2:	f0 93 96 0d 	sts	0x0D96, r31
    4ca6:	e0 93 95 0d 	sts	0x0D95, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    4caa:	00 93 1b 0c 	sts	0x0C1B, r16

    // Maybe the signals are triggering this problem?
    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    4cae:	0e 94 e5 27 	call	0x4fca	; 0x4fca <_nrk_os_timer_get>
    4cb2:	90 e0       	ldi	r25, 0x00	; 0
    4cb4:	01 96       	adiw	r24, 0x01	; 1
    4cb6:	80 17       	cp	r24, r16
    4cb8:	91 07       	cpc	r25, r17
    4cba:	40 f0       	brcs	.+16     	; 0x4ccc <_nrk_scheduler+0x564>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    4cbc:	0e 94 e5 27 	call	0x4fca	; 0x4fca <_nrk_os_timer_get>
    4cc0:	08 2f       	mov	r16, r24
    4cc2:	10 e0       	ldi	r17, 0x00	; 0
    4cc4:	0e 5f       	subi	r16, 0xFE	; 254
    4cc6:	1f 4f       	sbci	r17, 0xFF	; 255
        _nrk_prev_timer_val=next_wake;
    4cc8:	00 93 1b 0c 	sts	0x0C1B, r16
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    4ccc:	ee 20       	and	r14, r14
    4cce:	11 f0       	breq	.+4      	; 0x4cd4 <_nrk_scheduler+0x56c>
    4cd0:	10 92 89 0d 	sts	0x0D89, r1

    _nrk_set_next_wakeup(next_wake);
    4cd4:	80 2f       	mov	r24, r16
    4cd6:	0e 94 80 27 	call	0x4f00	; 0x4f00 <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    4cda:	89 81       	ldd	r24, Y+1	; 0x01
    4cdc:	9a 81       	ldd	r25, Y+2	; 0x02
    4cde:	6c ed       	ldi	r22, 0xDC	; 220
    4ce0:	75 e0       	ldi	r23, 0x05	; 5
    4ce2:	0e 94 e4 26 	call	0x4dc8	; 0x4dc8 <nrk_high_speed_timer_wait>
#endif
    nrk_stack_pointer_restore();
    4ce6:	0e 94 07 2b 	call	0x560e	; 0x560e <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();
    4cea:	0e 94 13 2b 	call	0x5626	; 0x5626 <nrk_start_high_ready_task>

}
    4cee:	0f 90       	pop	r0
    4cf0:	0f 90       	pop	r0
    4cf2:	0f 90       	pop	r0
    4cf4:	0f 90       	pop	r0
    4cf6:	cf 91       	pop	r28
    4cf8:	df 91       	pop	r29
    4cfa:	1f 91       	pop	r17
    4cfc:	0f 91       	pop	r16
    4cfe:	ff 90       	pop	r15
    4d00:	ef 90       	pop	r14
    4d02:	df 90       	pop	r13
    4d04:	cf 90       	pop	r12
    4d06:	bf 90       	pop	r11
    4d08:	af 90       	pop	r10
    4d0a:	9f 90       	pop	r9
    4d0c:	8f 90       	pop	r8
    4d0e:	7f 90       	pop	r7
    4d10:	6f 90       	pop	r6
    4d12:	5f 90       	pop	r5
    4d14:	4f 90       	pop	r4
    4d16:	3f 90       	pop	r3
    4d18:	2f 90       	pop	r2
    4d1a:	08 95       	ret

00004d1c <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    4d1c:	89 e0       	ldi	r24, 0x09	; 9
    4d1e:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    4d22:	8d e8       	ldi	r24, 0x8D	; 141
    4d24:	9c e3       	ldi	r25, 0x3C	; 60
    4d26:	90 93 29 01 	sts	0x0129, r25
    4d2a:	80 93 28 01 	sts	0x0128, r24
}
    4d2e:	08 95       	ret

00004d30 <_nrk_precision_os_timer_reset>:

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    4d30:	10 92 25 01 	sts	0x0125, r1
    4d34:	10 92 24 01 	sts	0x0124, r1
}
    4d38:	08 95       	ret

00004d3a <nrk_spin_wait_us>:
	...
        NOP();
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    4d52:	01 97       	sbiw	r24, 0x01	; 1
    4d54:	91 f7       	brne	.-28     	; 0x4d3a <nrk_spin_wait_us>

}
    4d56:	08 95       	ret

00004d58 <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    4d58:	10 92 21 01 	sts	0x0121, r1
}
    4d5c:	08 95       	ret

00004d5e <_nrk_precision_os_timer_get>:
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
}

inline uint16_t _nrk_precision_os_timer_get()
{
    4d5e:	df 93       	push	r29
    4d60:	cf 93       	push	r28
    4d62:	00 d0       	rcall	.+0      	; 0x4d64 <_nrk_precision_os_timer_get+0x6>
    4d64:	cd b7       	in	r28, 0x3d	; 61
    4d66:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    4d68:	80 91 24 01 	lds	r24, 0x0124
    4d6c:	90 91 25 01 	lds	r25, 0x0125
    4d70:	9a 83       	std	Y+2, r25	; 0x02
    4d72:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    4d74:	29 81       	ldd	r18, Y+1	; 0x01
    4d76:	3a 81       	ldd	r19, Y+2	; 0x02
}
    4d78:	c9 01       	movw	r24, r18
    4d7a:	0f 90       	pop	r0
    4d7c:	0f 90       	pop	r0
    4d7e:	cf 91       	pop	r28
    4d80:	df 91       	pop	r29
    4d82:	08 95       	ret

00004d84 <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    4d84:	10 92 81 00 	sts	0x0081, r1
}
    4d88:	08 95       	ret

00004d8a <_nrk_high_speed_timer_start>:

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    4d8a:	81 e0       	ldi	r24, 0x01	; 1
    4d8c:	80 93 81 00 	sts	0x0081, r24
}
    4d90:	08 95       	ret

00004d92 <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    4d92:	83 b5       	in	r24, 0x23	; 35
    4d94:	81 60       	ori	r24, 0x01	; 1
    4d96:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    4d98:	10 92 85 00 	sts	0x0085, r1
    4d9c:	10 92 84 00 	sts	0x0084, r1
//  nrk_int_enable();
}
    4da0:	08 95       	ret

00004da2 <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    4da2:	df 93       	push	r29
    4da4:	cf 93       	push	r28
    4da6:	00 d0       	rcall	.+0      	; 0x4da8 <_nrk_high_speed_timer_get+0x6>
    4da8:	cd b7       	in	r28, 0x3d	; 61
    4daa:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    4dac:	80 91 84 00 	lds	r24, 0x0084
    4db0:	90 91 85 00 	lds	r25, 0x0085
    4db4:	9a 83       	std	Y+2, r25	; 0x02
    4db6:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    4db8:	29 81       	ldd	r18, Y+1	; 0x01
    4dba:	3a 81       	ldd	r19, Y+2	; 0x02
}
    4dbc:	c9 01       	movw	r24, r18
    4dbe:	0f 90       	pop	r0
    4dc0:	0f 90       	pop	r0
    4dc2:	cf 91       	pop	r28
    4dc4:	df 91       	pop	r29
    4dc6:	08 95       	ret

00004dc8 <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    4dc8:	ef 92       	push	r14
    4dca:	ff 92       	push	r15
    4dcc:	0f 93       	push	r16
    4dce:	1f 93       	push	r17
    4dd0:	cf 93       	push	r28
    4dd2:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    4dd4:	ec 01       	movw	r28, r24
    4dd6:	cc 0f       	add	r28, r28
    4dd8:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    4dda:	8f ef       	ldi	r24, 0xFF	; 255
    4ddc:	c9 37       	cpi	r28, 0x79	; 121
    4dde:	d8 07       	cpc	r29, r24
    4de0:	10 f0       	brcs	.+4      	; 0x4de6 <nrk_high_speed_timer_wait+0x1e>
    4de2:	c0 e0       	ldi	r28, 0x00	; 0
    4de4:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    4de6:	7e 01       	movw	r14, r28
    4de8:	00 e0       	ldi	r16, 0x00	; 0
    4dea:	10 e0       	ldi	r17, 0x00	; 0
    4dec:	80 e0       	ldi	r24, 0x00	; 0
    4dee:	90 e0       	ldi	r25, 0x00	; 0
    4df0:	e6 0e       	add	r14, r22
    4df2:	f7 1e       	adc	r15, r23
    4df4:	08 1f       	adc	r16, r24
    4df6:	19 1f       	adc	r17, r25
if(tmp>65536) 
    4df8:	91 e0       	ldi	r25, 0x01	; 1
    4dfa:	e9 16       	cp	r14, r25
    4dfc:	90 e0       	ldi	r25, 0x00	; 0
    4dfe:	f9 06       	cpc	r15, r25
    4e00:	91 e0       	ldi	r25, 0x01	; 1
    4e02:	09 07       	cpc	r16, r25
    4e04:	90 e0       	ldi	r25, 0x00	; 0
    4e06:	19 07       	cpc	r17, r25
    4e08:	68 f0       	brcs	.+26     	; 0x4e24 <nrk_high_speed_timer_wait+0x5c>
	{
	tmp-=65536;
    4e0a:	80 e0       	ldi	r24, 0x00	; 0
    4e0c:	90 e0       	ldi	r25, 0x00	; 0
    4e0e:	af ef       	ldi	r26, 0xFF	; 255
    4e10:	bf ef       	ldi	r27, 0xFF	; 255
    4e12:	e8 0e       	add	r14, r24
    4e14:	f9 1e       	adc	r15, r25
    4e16:	0a 1f       	adc	r16, r26
    4e18:	1b 1f       	adc	r17, r27
	do{}while(_nrk_high_speed_timer_get()>start);
    4e1a:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <_nrk_high_speed_timer_get>
    4e1e:	c8 17       	cp	r28, r24
    4e20:	d9 07       	cpc	r29, r25
    4e22:	d8 f3       	brcs	.-10     	; 0x4e1a <nrk_high_speed_timer_wait+0x52>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    4e24:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <_nrk_high_speed_timer_get>
    4e28:	8e 15       	cp	r24, r14
    4e2a:	9f 05       	cpc	r25, r15
    4e2c:	d8 f3       	brcs	.-10     	; 0x4e24 <nrk_high_speed_timer_wait+0x5c>
}
    4e2e:	df 91       	pop	r29
    4e30:	cf 91       	pop	r28
    4e32:	1f 91       	pop	r17
    4e34:	0f 91       	pop	r16
    4e36:	ff 90       	pop	r15
    4e38:	ef 90       	pop	r14
    4e3a:	08 95       	ret

00004e3c <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    4e3c:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    4e40:	e0 e7       	ldi	r30, 0x70	; 112
    4e42:	f0 e0       	ldi	r31, 0x00	; 0
    4e44:	80 81       	ld	r24, Z
    4e46:	8d 7f       	andi	r24, 0xFD	; 253
    4e48:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    4e4a:	80 81       	ld	r24, Z
    4e4c:	8e 7f       	andi	r24, 0xFE	; 254
    4e4e:	80 83       	st	Z, r24
}
    4e50:	08 95       	ret

00004e52 <_nrk_os_timer_set>:

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    4e52:	80 93 b2 00 	sts	0x00B2, r24
}
    4e56:	08 95       	ret

00004e58 <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    4e58:	e0 e7       	ldi	r30, 0x70	; 112
    4e5a:	f0 e0       	ldi	r31, 0x00	; 0
    4e5c:	80 81       	ld	r24, Z
    4e5e:	83 60       	ori	r24, 0x03	; 3
    4e60:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    4e62:	83 e0       	ldi	r24, 0x03	; 3
    4e64:	80 93 b1 00 	sts	0x00B1, r24
}
    4e68:	08 95       	ret

00004e6a <_nrk_os_timer_reset>:

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    4e6a:	83 b5       	in	r24, 0x23	; 35
    4e6c:	82 60       	ori	r24, 0x02	; 2
    4e6e:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    4e70:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    4e74:	10 92 19 0c 	sts	0x0C19, r1
    _nrk_prev_timer_val=0;
    4e78:	10 92 1b 0c 	sts	0x0C1B, r1
}
    4e7c:	08 95       	ret

00004e7e <_nrk_setup_timer>:

}


void _nrk_setup_timer() {
  _nrk_prev_timer_val=254;
    4e7e:	8e ef       	ldi	r24, 0xFE	; 254
    4e80:	80 93 1b 0c 	sts	0x0C1B, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    4e84:	90 e2       	ldi	r25, 0x20	; 32
    4e86:	90 93 b6 00 	sts	0x00B6, r25
  OCR2A = _nrk_prev_timer_val;
    4e8a:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    4e8e:	83 e0       	ldi	r24, 0x03	; 3
    4e90:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    4e92:	92 e0       	ldi	r25, 0x02	; 2
    4e94:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    4e98:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    4e9c:	93 b5       	in	r25, 0x23	; 35
    4e9e:	92 60       	ori	r25, 0x02	; 2
    4ea0:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    4ea2:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    4ea4:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    4ea6:	83 b5       	in	r24, 0x23	; 35
    4ea8:	82 60       	ori	r24, 0x02	; 2
    4eaa:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    4eac:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    4eb0:	81 e0       	ldi	r24, 0x01	; 1
    4eb2:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    4eb6:	10 92 85 00 	sts	0x0085, r1
    4eba:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    4ebe:	83 b5       	in	r24, 0x23	; 35
    4ec0:	82 60       	ori	r24, 0x02	; 2
    4ec2:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    4ec4:	83 b5       	in	r24, 0x23	; 35
    4ec6:	81 60       	ori	r24, 0x01	; 1
    4ec8:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    4eca:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    4ece:	10 92 25 01 	sts	0x0125, r1
    4ed2:	10 92 24 01 	sts	0x0124, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    4ed6:	83 b5       	in	r24, 0x23	; 35
    4ed8:	82 60       	ori	r24, 0x02	; 2
    4eda:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    4edc:	83 b5       	in	r24, 0x23	; 35
    4ede:	81 60       	ori	r24, 0x01	; 1
    4ee0:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    4ee2:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <_nrk_os_timer_reset>
  _nrk_precision_os_timer_reset();
    4ee6:	0e 94 98 26 	call	0x4d30	; 0x4d30 <_nrk_precision_os_timer_reset>
  _nrk_os_timer_start();
    4eea:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    4eee:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    4ef2:	10 92 19 0c 	sts	0x0C19, r1
}
    4ef6:	08 95       	ret

00004ef8 <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    4ef8:	80 91 b3 00 	lds	r24, 0x00B3
}
    4efc:	8f 5f       	subi	r24, 0xFF	; 255
    4efe:	08 95       	ret

00004f00 <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    4f00:	81 50       	subi	r24, 0x01	; 1
    4f02:	80 93 b3 00 	sts	0x00B3, r24
}
    4f06:	08 95       	ret

00004f08 <nrk_timer_int_stop>:

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    4f08:	88 23       	and	r24, r24
    4f0a:	11 f4       	brne	.+4      	; 0x4f10 <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    4f0c:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    4f10:	8f ef       	ldi	r24, 0xFF	; 255
    4f12:	08 95       	ret

00004f14 <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    4f14:	88 23       	and	r24, r24
    4f16:	31 f4       	brne	.+12     	; 0x4f24 <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    4f18:	10 92 95 00 	sts	0x0095, r1
    4f1c:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    4f20:	81 e0       	ldi	r24, 0x01	; 1
    4f22:	08 95       	ret
	}
return NRK_ERROR;
    4f24:	8f ef       	ldi	r24, 0xFF	; 255
}
    4f26:	08 95       	ret

00004f28 <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    4f28:	88 23       	and	r24, r24
    4f2a:	29 f4       	brne	.+10     	; 0x4f36 <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    4f2c:	20 91 94 00 	lds	r18, 0x0094
    4f30:	30 91 95 00 	lds	r19, 0x0095
    4f34:	02 c0       	rjmp	.+4      	; 0x4f3a <nrk_timer_int_read+0x12>
	}
return 0;
    4f36:	20 e0       	ldi	r18, 0x00	; 0
    4f38:	30 e0       	ldi	r19, 0x00	; 0

}
    4f3a:	c9 01       	movw	r24, r18
    4f3c:	08 95       	ret

00004f3e <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    4f3e:	88 23       	and	r24, r24
    4f40:	29 f4       	brne	.+10     	; 0x4f4c <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    4f42:	82 e0       	ldi	r24, 0x02	; 2
    4f44:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    4f48:	81 e0       	ldi	r24, 0x01	; 1
    4f4a:	08 95       	ret
	}
return NRK_ERROR;
    4f4c:	8f ef       	ldi	r24, 0xFF	; 255
}
    4f4e:	08 95       	ret

00004f50 <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    4f50:	88 23       	and	r24, r24
    4f52:	b9 f5       	brne	.+110    	; 0x4fc2 <nrk_timer_int_configure+0x72>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    4f54:	cb 01       	movw	r24, r22
    4f56:	01 97       	sbiw	r24, 0x01	; 1
    4f58:	85 30       	cpi	r24, 0x05	; 5
    4f5a:	91 05       	cpc	r25, r1
    4f5c:	10 f4       	brcc	.+4      	; 0x4f62 <nrk_timer_int_configure+0x12>
    4f5e:	60 93 1a 0c 	sts	0x0C1A, r22
	TCCR3A = 0;  
    4f62:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    4f66:	88 e0       	ldi	r24, 0x08	; 8
    4f68:	80 93 91 00 	sts	0x0091, r24
        OCR3AH = (compare_value >> 8) & 0xFF;	
    4f6c:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    4f70:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    4f74:	30 93 18 0c 	sts	0x0C18, r19
    4f78:	20 93 17 0c 	sts	0x0C17, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    4f7c:	80 91 1a 0c 	lds	r24, 0x0C1A
    4f80:	81 30       	cpi	r24, 0x01	; 1
    4f82:	21 f4       	brne	.+8      	; 0x4f8c <nrk_timer_int_configure+0x3c>
    4f84:	80 91 91 00 	lds	r24, 0x0091
    4f88:	81 60       	ori	r24, 0x01	; 1
    4f8a:	0b c0       	rjmp	.+22     	; 0x4fa2 <nrk_timer_int_configure+0x52>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    4f8c:	82 30       	cpi	r24, 0x02	; 2
    4f8e:	21 f4       	brne	.+8      	; 0x4f98 <nrk_timer_int_configure+0x48>
    4f90:	80 91 91 00 	lds	r24, 0x0091
    4f94:	82 60       	ori	r24, 0x02	; 2
    4f96:	05 c0       	rjmp	.+10     	; 0x4fa2 <nrk_timer_int_configure+0x52>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    4f98:	83 30       	cpi	r24, 0x03	; 3
    4f9a:	39 f4       	brne	.+14     	; 0x4faa <nrk_timer_int_configure+0x5a>
    4f9c:	80 91 91 00 	lds	r24, 0x0091
    4fa0:	83 60       	ori	r24, 0x03	; 3
    4fa2:	80 93 91 00 	sts	0x0091, r24
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    4fa6:	81 e0       	ldi	r24, 0x01	; 1
    4fa8:	08 95       	ret
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    4faa:	84 30       	cpi	r24, 0x04	; 4
    4fac:	21 f4       	brne	.+8      	; 0x4fb6 <nrk_timer_int_configure+0x66>
    4fae:	80 91 91 00 	lds	r24, 0x0091
    4fb2:	84 60       	ori	r24, 0x04	; 4
    4fb4:	f6 cf       	rjmp	.-20     	; 0x4fa2 <nrk_timer_int_configure+0x52>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    4fb6:	85 30       	cpi	r24, 0x05	; 5
    4fb8:	31 f4       	brne	.+12     	; 0x4fc6 <nrk_timer_int_configure+0x76>
    4fba:	80 91 91 00 	lds	r24, 0x0091
    4fbe:	85 60       	ori	r24, 0x05	; 5
    4fc0:	f0 cf       	rjmp	.-32     	; 0x4fa2 <nrk_timer_int_configure+0x52>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    4fc2:	8f ef       	ldi	r24, 0xFF	; 255
    4fc4:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    4fc6:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    4fc8:	08 95       	ret

00004fca <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    4fca:	80 91 b2 00 	lds	r24, 0x00B2
}
    4fce:	08 95       	ret

00004fd0 <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    4fd0:	1f 92       	push	r1
    4fd2:	0f 92       	push	r0
    4fd4:	0f b6       	in	r0, 0x3f	; 63
    4fd6:	0f 92       	push	r0
    4fd8:	0b b6       	in	r0, 0x3b	; 59
    4fda:	0f 92       	push	r0
    4fdc:	11 24       	eor	r1, r1
    4fde:	2f 93       	push	r18
    4fe0:	3f 93       	push	r19
    4fe2:	4f 93       	push	r20
    4fe4:	5f 93       	push	r21
    4fe6:	6f 93       	push	r22
    4fe8:	7f 93       	push	r23
    4fea:	8f 93       	push	r24
    4fec:	9f 93       	push	r25
    4fee:	af 93       	push	r26
    4ff0:	bf 93       	push	r27
    4ff2:	ef 93       	push	r30
    4ff4:	ff 93       	push	r31
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4ff6:	8a e0       	ldi	r24, 0x0A	; 10
    4ff8:	60 e0       	ldi	r22, 0x00	; 0
    4ffa:	0e 94 0c 18 	call	0x3018	; 0x3018 <nrk_kernel_error_add>
    4ffe:	ff cf       	rjmp	.-2      	; 0x4ffe <__vector_default+0x2e>

00005000 <__vector_13>:

// This is the SUSPEND for the OS timer Tick
void TIMER2_COMPA_vect( void ) __attribute__ ( ( signal,naked ));
void TIMER2_COMPA_vect(void) {

asm volatile (
    5000:	0f 92       	push	r0
    5002:	0f b6       	in	r0, 0x3f	; 63
    5004:	0f 92       	push	r0
    5006:	1f 92       	push	r1
    5008:	2f 92       	push	r2
    500a:	3f 92       	push	r3
    500c:	4f 92       	push	r4
    500e:	5f 92       	push	r5
    5010:	6f 92       	push	r6
    5012:	7f 92       	push	r7
    5014:	8f 92       	push	r8
    5016:	9f 92       	push	r9
    5018:	af 92       	push	r10
    501a:	bf 92       	push	r11
    501c:	cf 92       	push	r12
    501e:	df 92       	push	r13
    5020:	ef 92       	push	r14
    5022:	ff 92       	push	r15
    5024:	0f 93       	push	r16
    5026:	1f 93       	push	r17
    5028:	2f 93       	push	r18
    502a:	3f 93       	push	r19
    502c:	4f 93       	push	r20
    502e:	5f 93       	push	r21
    5030:	6f 93       	push	r22
    5032:	7f 93       	push	r23
    5034:	8f 93       	push	r24
    5036:	9f 93       	push	r25
    5038:	af 93       	push	r26
    503a:	bf 93       	push	r27
    503c:	cf 93       	push	r28
    503e:	df 93       	push	r29
    5040:	ef 93       	push	r30
    5042:	ff 93       	push	r31
    5044:	a0 91 95 0d 	lds	r26, 0x0D95
    5048:	b0 91 96 0d 	lds	r27, 0x0D96
    504c:	0d b6       	in	r0, 0x3d	; 61
    504e:	0d 92       	st	X+, r0
    5050:	0e b6       	in	r0, 0x3e	; 62
    5052:	0d 92       	st	X+, r0
    5054:	1f 92       	push	r1
    5056:	a0 91 6f 0a 	lds	r26, 0x0A6F
    505a:	b0 91 70 0a 	lds	r27, 0x0A70
    505e:	1e 90       	ld	r1, -X
    5060:	be bf       	out	0x3e, r27	; 62
    5062:	ad bf       	out	0x3d, r26	; 61
    5064:	08 95       	ret

00005066 <__vector_32>:
);

}


SIGNAL(TIMER3_COMPA_vect) {
    5066:	1f 92       	push	r1
    5068:	0f 92       	push	r0
    506a:	0f b6       	in	r0, 0x3f	; 63
    506c:	0f 92       	push	r0
    506e:	0b b6       	in	r0, 0x3b	; 59
    5070:	0f 92       	push	r0
    5072:	11 24       	eor	r1, r1
    5074:	2f 93       	push	r18
    5076:	3f 93       	push	r19
    5078:	4f 93       	push	r20
    507a:	5f 93       	push	r21
    507c:	6f 93       	push	r22
    507e:	7f 93       	push	r23
    5080:	8f 93       	push	r24
    5082:	9f 93       	push	r25
    5084:	af 93       	push	r26
    5086:	bf 93       	push	r27
    5088:	ef 93       	push	r30
    508a:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    508c:	e0 91 17 0c 	lds	r30, 0x0C17
    5090:	f0 91 18 0c 	lds	r31, 0x0C18
    5094:	30 97       	sbiw	r30, 0x00	; 0
    5096:	11 f0       	breq	.+4      	; 0x509c <__vector_32+0x36>
    5098:	09 95       	icall
    509a:	04 c0       	rjmp	.+8      	; 0x50a4 <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    509c:	8a e0       	ldi	r24, 0x0A	; 10
    509e:	60 e0       	ldi	r22, 0x00	; 0
    50a0:	0e 94 0c 18 	call	0x3018	; 0x3018 <nrk_kernel_error_add>
	return;  	
}
    50a4:	ff 91       	pop	r31
    50a6:	ef 91       	pop	r30
    50a8:	bf 91       	pop	r27
    50aa:	af 91       	pop	r26
    50ac:	9f 91       	pop	r25
    50ae:	8f 91       	pop	r24
    50b0:	7f 91       	pop	r23
    50b2:	6f 91       	pop	r22
    50b4:	5f 91       	pop	r21
    50b6:	4f 91       	pop	r20
    50b8:	3f 91       	pop	r19
    50ba:	2f 91       	pop	r18
    50bc:	0f 90       	pop	r0
    50be:	0b be       	out	0x3b, r0	; 59
    50c0:	0f 90       	pop	r0
    50c2:	0f be       	out	0x3f, r0	; 63
    50c4:	0f 90       	pop	r0
    50c6:	1f 90       	pop	r1
    50c8:	18 95       	reti

000050ca <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    50ca:	1f 92       	push	r1
    50cc:	0f 92       	push	r0
    50ce:	0f b6       	in	r0, 0x3f	; 63
    50d0:	0f 92       	push	r0
    50d2:	11 24       	eor	r1, r1

	return;  	
} 
    50d4:	0f 90       	pop	r0
    50d6:	0f be       	out	0x3f, r0	; 63
    50d8:	0f 90       	pop	r0
    50da:	1f 90       	pop	r1
    50dc:	18 95       	reti

000050de <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    50de:	04 b6       	in	r0, 0x34	; 52
    50e0:	03 fc       	sbrc	r0, 3
    50e2:	02 c0       	rjmp	.+4      	; 0x50e8 <_nrk_startup_error+0xa>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    50e4:	80 e0       	ldi	r24, 0x00	; 0
    50e6:	01 c0       	rjmp	.+2      	; 0x50ea <_nrk_startup_error+0xc>

// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
	{
	// don't clear wdt
	error|=0x10;
    50e8:	80 e1       	ldi	r24, 0x10	; 16
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    50ea:	04 b6       	in	r0, 0x34	; 52
    50ec:	02 fe       	sbrs	r0, 2
    50ee:	06 c0       	rjmp	.+12     	; 0x50fc <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    50f0:	94 b7       	in	r25, 0x34	; 52
    50f2:	9b 7f       	andi	r25, 0xFB	; 251
    50f4:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    50f6:	04 b6       	in	r0, 0x34	; 52
    50f8:	00 fe       	sbrs	r0, 0
		error|=0x04;
    50fa:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    50fc:	04 b6       	in	r0, 0x34	; 52
    50fe:	01 fe       	sbrs	r0, 1
    5100:	05 c0       	rjmp	.+10     	; 0x510c <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    5102:	94 b7       	in	r25, 0x34	; 52
    5104:	9d 7f       	andi	r25, 0xFD	; 253
    5106:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    5108:	82 60       	ori	r24, 0x02	; 2
    510a:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    510c:	88 23       	and	r24, r24
    510e:	61 f4       	brne	.+24     	; 0x5128 <_nrk_startup_error+0x4a>

// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    5110:	04 b6       	in	r0, 0x34	; 52
    5112:	00 fe       	sbrs	r0, 0
    5114:	04 c0       	rjmp	.+8      	; 0x511e <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    5116:	94 b7       	in	r25, 0x34	; 52
    5118:	9e 7f       	andi	r25, 0xFE	; 254
    511a:	94 bf       	out	0x34, r25	; 52
    511c:	01 c0       	rjmp	.+2      	; 0x5120 <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    511e:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    5120:	90 91 b0 00 	lds	r25, 0x00B0
    5124:	91 11       	cpse	r25, r1
    5126:	81 60       	ori	r24, 0x01	; 1

return error;
}
    5128:	08 95       	ret

0000512a <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    512a:	88 23       	and	r24, r24
    512c:	11 f4       	brne	.+4      	; 0x5132 <nrk_ext_int_enable+0x8>
    512e:	e8 9a       	sbi	0x1d, 0	; 29
    5130:	39 c0       	rjmp	.+114    	; 0x51a4 <nrk_ext_int_enable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    5132:	81 30       	cpi	r24, 0x01	; 1
    5134:	11 f4       	brne	.+4      	; 0x513a <nrk_ext_int_enable+0x10>
    5136:	e9 9a       	sbi	0x1d, 1	; 29
    5138:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    513a:	82 30       	cpi	r24, 0x02	; 2
    513c:	11 f4       	brne	.+4      	; 0x5142 <nrk_ext_int_enable+0x18>
    513e:	ea 9a       	sbi	0x1d, 2	; 29
    5140:	31 c0       	rjmp	.+98     	; 0x51a4 <nrk_ext_int_enable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    5142:	83 30       	cpi	r24, 0x03	; 3
    5144:	21 f4       	brne	.+8      	; 0x514e <nrk_ext_int_enable+0x24>
    5146:	80 91 6b 00 	lds	r24, 0x006B
    514a:	81 60       	ori	r24, 0x01	; 1
    514c:	29 c0       	rjmp	.+82     	; 0x51a0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    514e:	84 30       	cpi	r24, 0x04	; 4
    5150:	21 f4       	brne	.+8      	; 0x515a <nrk_ext_int_enable+0x30>
    5152:	80 91 6b 00 	lds	r24, 0x006B
    5156:	82 60       	ori	r24, 0x02	; 2
    5158:	23 c0       	rjmp	.+70     	; 0x51a0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    515a:	85 30       	cpi	r24, 0x05	; 5
    515c:	21 f4       	brne	.+8      	; 0x5166 <nrk_ext_int_enable+0x3c>
    515e:	80 91 6b 00 	lds	r24, 0x006B
    5162:	84 60       	ori	r24, 0x04	; 4
    5164:	1d c0       	rjmp	.+58     	; 0x51a0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    5166:	86 30       	cpi	r24, 0x06	; 6
    5168:	21 f4       	brne	.+8      	; 0x5172 <nrk_ext_int_enable+0x48>
    516a:	80 91 6b 00 	lds	r24, 0x006B
    516e:	88 60       	ori	r24, 0x08	; 8
    5170:	17 c0       	rjmp	.+46     	; 0x51a0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    5172:	87 30       	cpi	r24, 0x07	; 7
    5174:	21 f4       	brne	.+8      	; 0x517e <nrk_ext_int_enable+0x54>
    5176:	80 91 6b 00 	lds	r24, 0x006B
    517a:	80 61       	ori	r24, 0x10	; 16
    517c:	11 c0       	rjmp	.+34     	; 0x51a0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    517e:	88 30       	cpi	r24, 0x08	; 8
    5180:	21 f4       	brne	.+8      	; 0x518a <nrk_ext_int_enable+0x60>
    5182:	80 91 6b 00 	lds	r24, 0x006B
    5186:	80 62       	ori	r24, 0x20	; 32
    5188:	0b c0       	rjmp	.+22     	; 0x51a0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    518a:	89 30       	cpi	r24, 0x09	; 9
    518c:	21 f4       	brne	.+8      	; 0x5196 <nrk_ext_int_enable+0x6c>
    518e:	80 91 6b 00 	lds	r24, 0x006B
    5192:	80 64       	ori	r24, 0x40	; 64
    5194:	05 c0       	rjmp	.+10     	; 0x51a0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    5196:	8a 30       	cpi	r24, 0x0A	; 10
    5198:	39 f4       	brne	.+14     	; 0x51a8 <nrk_ext_int_enable+0x7e>
    519a:	80 91 6b 00 	lds	r24, 0x006B
    519e:	80 68       	ori	r24, 0x80	; 128
    51a0:	80 93 6b 00 	sts	0x006B, r24
    51a4:	81 e0       	ldi	r24, 0x01	; 1
    51a6:	08 95       	ret
return NRK_ERROR;
    51a8:	8f ef       	ldi	r24, 0xFF	; 255
}
    51aa:	08 95       	ret

000051ac <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    51ac:	88 23       	and	r24, r24
    51ae:	11 f4       	brne	.+4      	; 0x51b4 <nrk_ext_int_disable+0x8>
    51b0:	e8 98       	cbi	0x1d, 0	; 29
    51b2:	39 c0       	rjmp	.+114    	; 0x5226 <nrk_ext_int_disable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    51b4:	81 30       	cpi	r24, 0x01	; 1
    51b6:	11 f4       	brne	.+4      	; 0x51bc <nrk_ext_int_disable+0x10>
    51b8:	e9 98       	cbi	0x1d, 1	; 29
    51ba:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    51bc:	82 30       	cpi	r24, 0x02	; 2
    51be:	11 f4       	brne	.+4      	; 0x51c4 <nrk_ext_int_disable+0x18>
    51c0:	e9 98       	cbi	0x1d, 1	; 29
    51c2:	31 c0       	rjmp	.+98     	; 0x5226 <nrk_ext_int_disable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    51c4:	83 30       	cpi	r24, 0x03	; 3
    51c6:	21 f4       	brne	.+8      	; 0x51d0 <nrk_ext_int_disable+0x24>
    51c8:	80 91 6b 00 	lds	r24, 0x006B
    51cc:	8e 7f       	andi	r24, 0xFE	; 254
    51ce:	29 c0       	rjmp	.+82     	; 0x5222 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    51d0:	84 30       	cpi	r24, 0x04	; 4
    51d2:	21 f4       	brne	.+8      	; 0x51dc <nrk_ext_int_disable+0x30>
    51d4:	80 91 6b 00 	lds	r24, 0x006B
    51d8:	8d 7f       	andi	r24, 0xFD	; 253
    51da:	23 c0       	rjmp	.+70     	; 0x5222 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    51dc:	85 30       	cpi	r24, 0x05	; 5
    51de:	21 f4       	brne	.+8      	; 0x51e8 <nrk_ext_int_disable+0x3c>
    51e0:	80 91 6b 00 	lds	r24, 0x006B
    51e4:	8b 7f       	andi	r24, 0xFB	; 251
    51e6:	1d c0       	rjmp	.+58     	; 0x5222 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    51e8:	86 30       	cpi	r24, 0x06	; 6
    51ea:	21 f4       	brne	.+8      	; 0x51f4 <nrk_ext_int_disable+0x48>
    51ec:	80 91 6b 00 	lds	r24, 0x006B
    51f0:	87 7f       	andi	r24, 0xF7	; 247
    51f2:	17 c0       	rjmp	.+46     	; 0x5222 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    51f4:	87 30       	cpi	r24, 0x07	; 7
    51f6:	21 f4       	brne	.+8      	; 0x5200 <nrk_ext_int_disable+0x54>
    51f8:	80 91 6b 00 	lds	r24, 0x006B
    51fc:	8f 7e       	andi	r24, 0xEF	; 239
    51fe:	11 c0       	rjmp	.+34     	; 0x5222 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    5200:	88 30       	cpi	r24, 0x08	; 8
    5202:	21 f4       	brne	.+8      	; 0x520c <nrk_ext_int_disable+0x60>
    5204:	80 91 6b 00 	lds	r24, 0x006B
    5208:	8f 7d       	andi	r24, 0xDF	; 223
    520a:	0b c0       	rjmp	.+22     	; 0x5222 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    520c:	89 30       	cpi	r24, 0x09	; 9
    520e:	21 f4       	brne	.+8      	; 0x5218 <nrk_ext_int_disable+0x6c>
    5210:	80 91 6b 00 	lds	r24, 0x006B
    5214:	8f 7b       	andi	r24, 0xBF	; 191
    5216:	05 c0       	rjmp	.+10     	; 0x5222 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    5218:	8a 30       	cpi	r24, 0x0A	; 10
    521a:	39 f4       	brne	.+14     	; 0x522a <nrk_ext_int_disable+0x7e>
    521c:	80 91 6b 00 	lds	r24, 0x006B
    5220:	8f 77       	andi	r24, 0x7F	; 127
    5222:	80 93 6b 00 	sts	0x006B, r24
    5226:	81 e0       	ldi	r24, 0x01	; 1
    5228:	08 95       	ret
return NRK_ERROR;
    522a:	8f ef       	ldi	r24, 0xFF	; 255
}
    522c:	08 95       	ret

0000522e <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    522e:	88 23       	and	r24, r24
    5230:	39 f5       	brne	.+78     	; 0x5280 <nrk_ext_int_configure+0x52>
	{
	ext_int0_callback=callback_func;
    5232:	50 93 bf 0d 	sts	0x0DBF, r21
    5236:	40 93 be 0d 	sts	0x0DBE, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    523a:	66 23       	and	r22, r22
    523c:	21 f4       	brne	.+8      	; 0x5246 <nrk_ext_int_configure+0x18>
    523e:	80 91 69 00 	lds	r24, 0x0069
    5242:	8c 7f       	andi	r24, 0xFC	; 252
    5244:	66 c0       	rjmp	.+204    	; 0x5312 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_LEVEL_TRIGGER) 
    5246:	61 30       	cpi	r22, 0x01	; 1
    5248:	49 f4       	brne	.+18     	; 0x525c <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    524a:	80 91 69 00 	lds	r24, 0x0069
    524e:	8d 7f       	andi	r24, 0xFD	; 253
    5250:	80 93 69 00 	sts	0x0069, r24
    5254:	80 91 69 00 	lds	r24, 0x0069
    5258:	81 60       	ori	r24, 0x01	; 1
    525a:	5b c0       	rjmp	.+182    	; 0x5312 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_FALLING_EDGE) 
    525c:	62 30       	cpi	r22, 0x02	; 2
    525e:	49 f4       	brne	.+18     	; 0x5272 <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    5260:	80 91 69 00 	lds	r24, 0x0069
    5264:	82 60       	ori	r24, 0x02	; 2
    5266:	80 93 69 00 	sts	0x0069, r24
    526a:	80 91 69 00 	lds	r24, 0x0069
    526e:	8e 7f       	andi	r24, 0xFE	; 254
    5270:	50 c0       	rjmp	.+160    	; 0x5312 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    5272:	63 30       	cpi	r22, 0x03	; 3
    5274:	09 f0       	breq	.+2      	; 0x5278 <nrk_ext_int_configure+0x4a>
    5276:	62 c0       	rjmp	.+196    	; 0x533c <nrk_ext_int_configure+0x10e>
    5278:	80 91 69 00 	lds	r24, 0x0069
    527c:	83 60       	ori	r24, 0x03	; 3
    527e:	49 c0       	rjmp	.+146    	; 0x5312 <nrk_ext_int_configure+0xe4>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    5280:	81 30       	cpi	r24, 0x01	; 1
    5282:	31 f5       	brne	.+76     	; 0x52d0 <nrk_ext_int_configure+0xa2>
	{
	ext_int1_callback=callback_func;
    5284:	50 93 bd 0d 	sts	0x0DBD, r21
    5288:	40 93 bc 0d 	sts	0x0DBC, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    528c:	66 23       	and	r22, r22
    528e:	21 f4       	brne	.+8      	; 0x5298 <nrk_ext_int_configure+0x6a>
    5290:	80 91 69 00 	lds	r24, 0x0069
    5294:	83 7f       	andi	r24, 0xF3	; 243
    5296:	3d c0       	rjmp	.+122    	; 0x5312 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_LEVEL_TRIGGER) 
    5298:	61 30       	cpi	r22, 0x01	; 1
    529a:	49 f4       	brne	.+18     	; 0x52ae <nrk_ext_int_configure+0x80>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    529c:	80 91 69 00 	lds	r24, 0x0069
    52a0:	87 7f       	andi	r24, 0xF7	; 247
    52a2:	80 93 69 00 	sts	0x0069, r24
    52a6:	80 91 69 00 	lds	r24, 0x0069
    52aa:	84 60       	ori	r24, 0x04	; 4
    52ac:	32 c0       	rjmp	.+100    	; 0x5312 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_FALLING_EDGE) 
    52ae:	62 30       	cpi	r22, 0x02	; 2
    52b0:	49 f4       	brne	.+18     	; 0x52c4 <nrk_ext_int_configure+0x96>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    52b2:	80 91 69 00 	lds	r24, 0x0069
    52b6:	88 60       	ori	r24, 0x08	; 8
    52b8:	80 93 69 00 	sts	0x0069, r24
    52bc:	80 91 69 00 	lds	r24, 0x0069
    52c0:	8b 7f       	andi	r24, 0xFB	; 251
    52c2:	27 c0       	rjmp	.+78     	; 0x5312 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    52c4:	63 30       	cpi	r22, 0x03	; 3
    52c6:	d1 f5       	brne	.+116    	; 0x533c <nrk_ext_int_configure+0x10e>
    52c8:	80 91 69 00 	lds	r24, 0x0069
    52cc:	8c 60       	ori	r24, 0x0C	; 12
    52ce:	21 c0       	rjmp	.+66     	; 0x5312 <nrk_ext_int_configure+0xe4>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    52d0:	82 30       	cpi	r24, 0x02	; 2
    52d2:	41 f5       	brne	.+80     	; 0x5324 <nrk_ext_int_configure+0xf6>
	{
	ext_int2_callback=callback_func;
    52d4:	50 93 c1 0d 	sts	0x0DC1, r21
    52d8:	40 93 c0 0d 	sts	0x0DC0, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    52dc:	66 23       	and	r22, r22
    52de:	21 f4       	brne	.+8      	; 0x52e8 <nrk_ext_int_configure+0xba>
    52e0:	80 91 69 00 	lds	r24, 0x0069
    52e4:	8f 7c       	andi	r24, 0xCF	; 207
    52e6:	15 c0       	rjmp	.+42     	; 0x5312 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_LEVEL_TRIGGER) 
    52e8:	61 30       	cpi	r22, 0x01	; 1
    52ea:	49 f4       	brne	.+18     	; 0x52fe <nrk_ext_int_configure+0xd0>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    52ec:	80 91 69 00 	lds	r24, 0x0069
    52f0:	8f 7d       	andi	r24, 0xDF	; 223
    52f2:	80 93 69 00 	sts	0x0069, r24
    52f6:	80 91 69 00 	lds	r24, 0x0069
    52fa:	80 61       	ori	r24, 0x10	; 16
    52fc:	0a c0       	rjmp	.+20     	; 0x5312 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_FALLING_EDGE) 
    52fe:	62 30       	cpi	r22, 0x02	; 2
    5300:	59 f4       	brne	.+22     	; 0x5318 <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    5302:	80 91 69 00 	lds	r24, 0x0069
    5306:	80 62       	ori	r24, 0x20	; 32
    5308:	80 93 69 00 	sts	0x0069, r24
    530c:	80 91 69 00 	lds	r24, 0x0069
    5310:	8f 7e       	andi	r24, 0xEF	; 239
    5312:	80 93 69 00 	sts	0x0069, r24
    5316:	12 c0       	rjmp	.+36     	; 0x533c <nrk_ext_int_configure+0x10e>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    5318:	63 30       	cpi	r22, 0x03	; 3
    531a:	81 f4       	brne	.+32     	; 0x533c <nrk_ext_int_configure+0x10e>
    531c:	80 91 69 00 	lds	r24, 0x0069
    5320:	80 63       	ori	r24, 0x30	; 48
    5322:	f7 cf       	rjmp	.-18     	; 0x5312 <nrk_ext_int_configure+0xe4>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    5324:	83 50       	subi	r24, 0x03	; 3
    5326:	88 30       	cpi	r24, 0x08	; 8
    5328:	58 f4       	brcc	.+22     	; 0x5340 <nrk_ext_int_configure+0x112>
	PCICR |= BM(PCIE0);	
    532a:	80 91 68 00 	lds	r24, 0x0068
    532e:	81 60       	ori	r24, 0x01	; 1
    5330:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    5334:	50 93 c3 0d 	sts	0x0DC3, r21
    5338:	40 93 c2 0d 	sts	0x0DC2, r20
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
	return NRK_OK;
    533c:	81 e0       	ldi	r24, 0x01	; 1
    533e:	08 95       	ret
if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
	PCICR |= BM(PCIE0);	
	pc_int0_callback=callback_func;
	return NRK_OK;
	}
return NRK_ERROR;
    5340:	8f ef       	ldi	r24, 0xFF	; 255
}
    5342:	08 95       	ret

00005344 <__vector_9>:

#ifndef NRK_DISABLE_EXT_INT
SIGNAL(PCINT0_vect) {
    5344:	1f 92       	push	r1
    5346:	0f 92       	push	r0
    5348:	0f b6       	in	r0, 0x3f	; 63
    534a:	0f 92       	push	r0
    534c:	0b b6       	in	r0, 0x3b	; 59
    534e:	0f 92       	push	r0
    5350:	11 24       	eor	r1, r1
    5352:	2f 93       	push	r18
    5354:	3f 93       	push	r19
    5356:	4f 93       	push	r20
    5358:	5f 93       	push	r21
    535a:	6f 93       	push	r22
    535c:	7f 93       	push	r23
    535e:	8f 93       	push	r24
    5360:	9f 93       	push	r25
    5362:	af 93       	push	r26
    5364:	bf 93       	push	r27
    5366:	ef 93       	push	r30
    5368:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    536a:	e0 91 c2 0d 	lds	r30, 0x0DC2
    536e:	f0 91 c3 0d 	lds	r31, 0x0DC3
    5372:	30 97       	sbiw	r30, 0x00	; 0
    5374:	11 f0       	breq	.+4      	; 0x537a <__vector_9+0x36>
    5376:	09 95       	icall
    5378:	04 c0       	rjmp	.+8      	; 0x5382 <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    537a:	8a e0       	ldi	r24, 0x0A	; 10
    537c:	60 e0       	ldi	r22, 0x00	; 0
    537e:	0e 94 0c 18 	call	0x3018	; 0x3018 <nrk_kernel_error_add>
	return;  	
}
    5382:	ff 91       	pop	r31
    5384:	ef 91       	pop	r30
    5386:	bf 91       	pop	r27
    5388:	af 91       	pop	r26
    538a:	9f 91       	pop	r25
    538c:	8f 91       	pop	r24
    538e:	7f 91       	pop	r23
    5390:	6f 91       	pop	r22
    5392:	5f 91       	pop	r21
    5394:	4f 91       	pop	r20
    5396:	3f 91       	pop	r19
    5398:	2f 91       	pop	r18
    539a:	0f 90       	pop	r0
    539c:	0b be       	out	0x3b, r0	; 59
    539e:	0f 90       	pop	r0
    53a0:	0f be       	out	0x3f, r0	; 63
    53a2:	0f 90       	pop	r0
    53a4:	1f 90       	pop	r1
    53a6:	18 95       	reti

000053a8 <__vector_1>:


SIGNAL(INT0_vect) {
    53a8:	1f 92       	push	r1
    53aa:	0f 92       	push	r0
    53ac:	0f b6       	in	r0, 0x3f	; 63
    53ae:	0f 92       	push	r0
    53b0:	0b b6       	in	r0, 0x3b	; 59
    53b2:	0f 92       	push	r0
    53b4:	11 24       	eor	r1, r1
    53b6:	2f 93       	push	r18
    53b8:	3f 93       	push	r19
    53ba:	4f 93       	push	r20
    53bc:	5f 93       	push	r21
    53be:	6f 93       	push	r22
    53c0:	7f 93       	push	r23
    53c2:	8f 93       	push	r24
    53c4:	9f 93       	push	r25
    53c6:	af 93       	push	r26
    53c8:	bf 93       	push	r27
    53ca:	ef 93       	push	r30
    53cc:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    53ce:	e0 91 be 0d 	lds	r30, 0x0DBE
    53d2:	f0 91 bf 0d 	lds	r31, 0x0DBF
    53d6:	30 97       	sbiw	r30, 0x00	; 0
    53d8:	11 f0       	breq	.+4      	; 0x53de <__vector_1+0x36>
    53da:	09 95       	icall
    53dc:	04 c0       	rjmp	.+8      	; 0x53e6 <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    53de:	8a e0       	ldi	r24, 0x0A	; 10
    53e0:	60 e0       	ldi	r22, 0x00	; 0
    53e2:	0e 94 0c 18 	call	0x3018	; 0x3018 <nrk_kernel_error_add>
	return;  	
}
    53e6:	ff 91       	pop	r31
    53e8:	ef 91       	pop	r30
    53ea:	bf 91       	pop	r27
    53ec:	af 91       	pop	r26
    53ee:	9f 91       	pop	r25
    53f0:	8f 91       	pop	r24
    53f2:	7f 91       	pop	r23
    53f4:	6f 91       	pop	r22
    53f6:	5f 91       	pop	r21
    53f8:	4f 91       	pop	r20
    53fa:	3f 91       	pop	r19
    53fc:	2f 91       	pop	r18
    53fe:	0f 90       	pop	r0
    5400:	0b be       	out	0x3b, r0	; 59
    5402:	0f 90       	pop	r0
    5404:	0f be       	out	0x3f, r0	; 63
    5406:	0f 90       	pop	r0
    5408:	1f 90       	pop	r1
    540a:	18 95       	reti

0000540c <__vector_2>:

SIGNAL(INT1_vect) {
    540c:	1f 92       	push	r1
    540e:	0f 92       	push	r0
    5410:	0f b6       	in	r0, 0x3f	; 63
    5412:	0f 92       	push	r0
    5414:	0b b6       	in	r0, 0x3b	; 59
    5416:	0f 92       	push	r0
    5418:	11 24       	eor	r1, r1
    541a:	2f 93       	push	r18
    541c:	3f 93       	push	r19
    541e:	4f 93       	push	r20
    5420:	5f 93       	push	r21
    5422:	6f 93       	push	r22
    5424:	7f 93       	push	r23
    5426:	8f 93       	push	r24
    5428:	9f 93       	push	r25
    542a:	af 93       	push	r26
    542c:	bf 93       	push	r27
    542e:	ef 93       	push	r30
    5430:	ff 93       	push	r31
	if(ext_int1_callback!=NULL) ext_int1_callback();
    5432:	e0 91 bc 0d 	lds	r30, 0x0DBC
    5436:	f0 91 bd 0d 	lds	r31, 0x0DBD
    543a:	30 97       	sbiw	r30, 0x00	; 0
    543c:	11 f0       	breq	.+4      	; 0x5442 <__vector_2+0x36>
    543e:	09 95       	icall
    5440:	04 c0       	rjmp	.+8      	; 0x544a <__vector_2+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5442:	8a e0       	ldi	r24, 0x0A	; 10
    5444:	60 e0       	ldi	r22, 0x00	; 0
    5446:	0e 94 0c 18 	call	0x3018	; 0x3018 <nrk_kernel_error_add>
	return;  	
}
    544a:	ff 91       	pop	r31
    544c:	ef 91       	pop	r30
    544e:	bf 91       	pop	r27
    5450:	af 91       	pop	r26
    5452:	9f 91       	pop	r25
    5454:	8f 91       	pop	r24
    5456:	7f 91       	pop	r23
    5458:	6f 91       	pop	r22
    545a:	5f 91       	pop	r21
    545c:	4f 91       	pop	r20
    545e:	3f 91       	pop	r19
    5460:	2f 91       	pop	r18
    5462:	0f 90       	pop	r0
    5464:	0b be       	out	0x3b, r0	; 59
    5466:	0f 90       	pop	r0
    5468:	0f be       	out	0x3f, r0	; 63
    546a:	0f 90       	pop	r0
    546c:	1f 90       	pop	r1
    546e:	18 95       	reti

00005470 <__vector_3>:

SIGNAL(INT2_vect) {
    5470:	1f 92       	push	r1
    5472:	0f 92       	push	r0
    5474:	0f b6       	in	r0, 0x3f	; 63
    5476:	0f 92       	push	r0
    5478:	0b b6       	in	r0, 0x3b	; 59
    547a:	0f 92       	push	r0
    547c:	11 24       	eor	r1, r1
    547e:	2f 93       	push	r18
    5480:	3f 93       	push	r19
    5482:	4f 93       	push	r20
    5484:	5f 93       	push	r21
    5486:	6f 93       	push	r22
    5488:	7f 93       	push	r23
    548a:	8f 93       	push	r24
    548c:	9f 93       	push	r25
    548e:	af 93       	push	r26
    5490:	bf 93       	push	r27
    5492:	ef 93       	push	r30
    5494:	ff 93       	push	r31
	if(ext_int2_callback!=NULL) ext_int2_callback();
    5496:	e0 91 c0 0d 	lds	r30, 0x0DC0
    549a:	f0 91 c1 0d 	lds	r31, 0x0DC1
    549e:	30 97       	sbiw	r30, 0x00	; 0
    54a0:	11 f0       	breq	.+4      	; 0x54a6 <__vector_3+0x36>
    54a2:	09 95       	icall
    54a4:	04 c0       	rjmp	.+8      	; 0x54ae <__vector_3+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    54a6:	8a e0       	ldi	r24, 0x0A	; 10
    54a8:	60 e0       	ldi	r22, 0x00	; 0
    54aa:	0e 94 0c 18 	call	0x3018	; 0x3018 <nrk_kernel_error_add>
	return;  	
}
    54ae:	ff 91       	pop	r31
    54b0:	ef 91       	pop	r30
    54b2:	bf 91       	pop	r27
    54b4:	af 91       	pop	r26
    54b6:	9f 91       	pop	r25
    54b8:	8f 91       	pop	r24
    54ba:	7f 91       	pop	r23
    54bc:	6f 91       	pop	r22
    54be:	5f 91       	pop	r21
    54c0:	4f 91       	pop	r20
    54c2:	3f 91       	pop	r19
    54c4:	2f 91       	pop	r18
    54c6:	0f 90       	pop	r0
    54c8:	0b be       	out	0x3b, r0	; 59
    54ca:	0f 90       	pop	r0
    54cc:	0f be       	out	0x3f, r0	; 63
    54ce:	0f 90       	pop	r0
    54d0:	1f 90       	pop	r1
    54d2:	18 95       	reti

000054d4 <nrk_watchdog_disable>:
#include <nrk.h>
#include <avr/wdt.h>

void nrk_watchdog_disable()
{
nrk_int_disable();
    54d4:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    54d8:	a8 95       	wdr

void nrk_watchdog_disable()
{
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    54da:	84 b7       	in	r24, 0x34	; 52
    54dc:	87 7f       	andi	r24, 0xF7	; 247
    54de:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    54e0:	e0 e6       	ldi	r30, 0x60	; 96
    54e2:	f0 e0       	ldi	r31, 0x00	; 0
    54e4:	80 81       	ld	r24, Z
    54e6:	88 61       	ori	r24, 0x18	; 24
    54e8:	80 83       	st	Z, r24
WDTCSR = 0;
    54ea:	10 82       	st	Z, r1
nrk_int_enable();
    54ec:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <nrk_int_enable>
}
    54f0:	08 95       	ret

000054f2 <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
    54f2:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    54f6:	a8 95       	wdr
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    54f8:	84 b7       	in	r24, 0x34	; 52
    54fa:	87 7f       	andi	r24, 0xF7	; 247
    54fc:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    54fe:	e0 e6       	ldi	r30, 0x60	; 96
    5500:	f0 e0       	ldi	r31, 0x00	; 0
    5502:	80 81       	ld	r24, Z
    5504:	88 61       	ori	r24, 0x18	; 24
    5506:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    5508:	8d e0       	ldi	r24, 0x0D	; 13
    550a:	80 83       	st	Z, r24
nrk_int_enable();
    550c:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <nrk_int_enable>
}
    5510:	08 95       	ret

00005512 <nrk_watchdog_check>:

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    5512:	04 b6       	in	r0, 0x34	; 52
    5514:	03 fc       	sbrc	r0, 3
    5516:	02 c0       	rjmp	.+4      	; 0x551c <nrk_watchdog_check+0xa>
    5518:	81 e0       	ldi	r24, 0x01	; 1
    551a:	08 95       	ret
return NRK_ERROR;
    551c:	8f ef       	ldi	r24, 0xFF	; 255
}
    551e:	08 95       	ret

00005520 <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    5520:	a8 95       	wdr

}
    5522:	08 95       	ret

00005524 <nrk_battery_save>:
        nrk_led_clr(2);
        nrk_led_clr(3);
        SET_VREG_INACTIVE();
        nrk_sleep();
#endif
}
    5524:	08 95       	ret

00005526 <nrk_sleep>:

void nrk_sleep()
{
    //PRR0 = 0xff;
    //PRR1 = 0xff;
    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    5526:	83 b7       	in	r24, 0x33	; 51
    5528:	81 7f       	andi	r24, 0xF1	; 241
    552a:	86 60       	ori	r24, 0x06	; 6
    552c:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    552e:	83 b7       	in	r24, 0x33	; 51
    5530:	81 60       	ori	r24, 0x01	; 1
    5532:	83 bf       	out	0x33, r24	; 51
    5534:	88 95       	sleep
    5536:	83 b7       	in	r24, 0x33	; 51
    5538:	8e 7f       	andi	r24, 0xFE	; 254
    553a:	83 bf       	out	0x33, r24	; 51

}
    553c:	08 95       	ret

0000553e <nrk_idle>:

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    553e:	83 b7       	in	r24, 0x33	; 51
    5540:	81 7f       	andi	r24, 0xF1	; 241
    5542:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    5544:	83 b7       	in	r24, 0x33	; 51
    5546:	81 60       	ori	r24, 0x01	; 1
    5548:	83 bf       	out	0x33, r24	; 51
    554a:	88 95       	sleep
    554c:	83 b7       	in	r24, 0x33	; 51
    554e:	8e 7f       	andi	r24, 0xFE	; 254
    5550:	83 bf       	out	0x33, r24	; 51

}
    5552:	08 95       	ret

00005554 <nrk_task_set_entry_function>:

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    5554:	fc 01       	movw	r30, r24
    5556:	76 83       	std	Z+6, r23	; 0x06
    5558:	65 83       	std	Z+5, r22	; 0x05
}
    555a:	08 95       	ret

0000555c <nrk_task_set_stk>:

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    555c:	ef 92       	push	r14
    555e:	ff 92       	push	r15
    5560:	0f 93       	push	r16
    5562:	1f 93       	push	r17
    5564:	cf 93       	push	r28
    5566:	df 93       	push	r29
    5568:	ec 01       	movw	r28, r24
    556a:	8b 01       	movw	r16, r22
    556c:	7a 01       	movw	r14, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    556e:	40 32       	cpi	r20, 0x20	; 32
    5570:	51 05       	cpc	r21, r1
    5572:	18 f4       	brcc	.+6      	; 0x557a <nrk_task_set_stk+0x1e>
    5574:	81 e1       	ldi	r24, 0x11	; 17
    5576:	0e 94 13 18 	call	0x3026	; 0x3026 <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    557a:	08 94       	sec
    557c:	e1 08       	sbc	r14, r1
    557e:	f1 08       	sbc	r15, r1
    5580:	e0 0e       	add	r14, r16
    5582:	f1 1e       	adc	r15, r17
    5584:	fa 82       	std	Y+2, r15	; 0x02
    5586:	e9 82       	std	Y+1, r14	; 0x01
task->Pbos = (void *) &stk_base[0];
    5588:	1c 83       	std	Y+4, r17	; 0x04
    558a:	0b 83       	std	Y+3, r16	; 0x03

}
    558c:	df 91       	pop	r29
    558e:	cf 91       	pop	r28
    5590:	1f 91       	pop	r17
    5592:	0f 91       	pop	r16
    5594:	ff 90       	pop	r15
    5596:	ef 90       	pop	r14
    5598:	08 95       	ret

0000559a <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    559a:	25 e5       	ldi	r18, 0x55	; 85
    559c:	fa 01       	movw	r30, r20
    559e:	20 83       	st	Z, r18
    stk    = (unsigned int *)ptos;          /* Load stack pointer */
    55a0:	fb 01       	movw	r30, r22
    *(--stk) = 0x4748;   // G H                      
    *(--stk) = 0x4546;   // E F                    
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    55a2:	32 97       	sbiw	r30, 0x02	; 2
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    55a4:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    55a6:	81 83       	std	Z+1, r24	; 0x01
	
    *(--stk) = 0;
    55a8:	12 92       	st	-Z, r1
    55aa:	12 92       	st	-Z, r1
    *(--stk) = 0;       
    55ac:	12 92       	st	-Z, r1
    55ae:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    55b0:	12 92       	st	-Z, r1
    55b2:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    55b4:	12 92       	st	-Z, r1
    55b6:	12 92       	st	-Z, r1
    *(--stk) = 0;                         
    55b8:	12 92       	st	-Z, r1
    55ba:	12 92       	st	-Z, r1
    *(--stk) = 0;                         
    55bc:	12 92       	st	-Z, r1
    55be:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    55c0:	12 92       	st	-Z, r1
    55c2:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    55c4:	12 92       	st	-Z, r1
    55c6:	12 92       	st	-Z, r1

    *(--stk) = 0; 
    55c8:	12 92       	st	-Z, r1
    55ca:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    55cc:	12 92       	st	-Z, r1
    55ce:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    55d0:	12 92       	st	-Z, r1
    55d2:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    55d4:	12 92       	st	-Z, r1
    55d6:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    55d8:	12 92       	st	-Z, r1
    55da:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    55dc:	12 92       	st	-Z, r1
    55de:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    55e0:	12 92       	st	-Z, r1
    55e2:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    55e4:	12 92       	st	-Z, r1
    55e6:	12 92       	st	-Z, r1
    *(--stk) = 0;
    55e8:	12 92       	st	-Z, r1
    55ea:	12 92       	st	-Z, r1


    return ((void *)stk);
}
    55ec:	cf 01       	movw	r24, r30
    55ee:	08 95       	ret

000055f0 <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    55f0:	85 e5       	ldi	r24, 0x55	; 85
    55f2:	80 93 7e 41 	sts	0x417E, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    55f6:	ee ef       	ldi	r30, 0xFE	; 254
    55f8:	f1 e4       	ldi	r31, 0x41	; 65
    55fa:	f0 93 70 0a 	sts	0x0A70, r31
    55fe:	e0 93 6f 0a 	sts	0x0A6F, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    5602:	85 e5       	ldi	r24, 0x55	; 85
    5604:	97 e1       	ldi	r25, 0x17	; 23
    5606:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    5608:	80 93 ff 41 	sts	0x41FF, r24

}
    560c:	08 95       	ret

0000560e <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    560e:	85 e5       	ldi	r24, 0x55	; 85
    5610:	97 e1       	ldi	r25, 0x17	; 23
    5612:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    5616:	80 93 ff 41 	sts	0x41FF, r24
}
    561a:	08 95       	ret

0000561c <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    561c:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <_nrk_setup_timer>
  nrk_int_enable();  
    5620:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <nrk_int_enable>
	
}
    5624:	08 95       	ret

00005626 <nrk_start_high_ready_task>:

.global nrk_start_high_ready_task 

nrk_start_high_ready_task:

	lds r26,nrk_high_ready_TCB		
    5626:	a0 91 86 0d 	lds	r26, 0x0D86
	lds r27,nrk_high_ready_TCB+1
    562a:	b0 91 87 0d 	lds	r27, 0x0D87

    	;x points to &OSTCB[x]
    
	ld r28,x+
    562e:	cd 91       	ld	r28, X+
	out __SP_L__, r28
    5630:	cd bf       	out	0x3d, r28	; 61
	ld r29,x+
    5632:	dd 91       	ld	r29, X+
	out __SP_H__, r29
    5634:	de bf       	out	0x3e, r29	; 62
  
	pop r31	
    5636:	ff 91       	pop	r31
	pop r30
    5638:	ef 91       	pop	r30
	pop r29
    563a:	df 91       	pop	r29
	pop r28
    563c:	cf 91       	pop	r28
	pop r27
    563e:	bf 91       	pop	r27
	pop r26
    5640:	af 91       	pop	r26
	pop r25
    5642:	9f 91       	pop	r25
	pop r24			
    5644:	8f 91       	pop	r24
	pop r23
    5646:	7f 91       	pop	r23
	pop r22
    5648:	6f 91       	pop	r22
	pop r21
    564a:	5f 91       	pop	r21
	pop r20	
    564c:	4f 91       	pop	r20
	pop r19
    564e:	3f 91       	pop	r19
	pop r18	
    5650:	2f 91       	pop	r18
	pop r17
    5652:	1f 91       	pop	r17
	pop r16
    5654:	0f 91       	pop	r16
	pop r15
    5656:	ff 90       	pop	r15
	pop r14
    5658:	ef 90       	pop	r14
	pop r13
    565a:	df 90       	pop	r13
	pop r12
    565c:	cf 90       	pop	r12
	pop r11
    565e:	bf 90       	pop	r11
	pop r10
    5660:	af 90       	pop	r10
	pop r9
    5662:	9f 90       	pop	r9
	pop r8
    5664:	8f 90       	pop	r8
	pop r7
    5666:	7f 90       	pop	r7
	pop r6
    5668:	6f 90       	pop	r6
	pop r5
    566a:	5f 90       	pop	r5
	pop r4
    566c:	4f 90       	pop	r4
	pop r3
    566e:	3f 90       	pop	r3
	pop r2
    5670:	2f 90       	pop	r2
	pop r1
    5672:	1f 90       	pop	r1
	pop r0
    5674:	0f 90       	pop	r0
	out __SREG__, r0
    5676:	0f be       	out	0x3f, r0	; 63
	pop r0	
    5678:	0f 90       	pop	r0
	   
    	reti 
    567a:	18 95       	reti

0000567c <__udivdi3>:
    567c:	a8 e3       	ldi	r26, 0x38	; 56
    567e:	b0 e0       	ldi	r27, 0x00	; 0
    5680:	e4 e4       	ldi	r30, 0x44	; 68
    5682:	fb e2       	ldi	r31, 0x2B	; 43
    5684:	0c 94 52 33 	jmp	0x66a4	; 0x66a4 <__prologue_saves__>
    5688:	29 83       	std	Y+1, r18	; 0x01
    568a:	3a 83       	std	Y+2, r19	; 0x02
    568c:	4b 83       	std	Y+3, r20	; 0x03
    568e:	5c 83       	std	Y+4, r21	; 0x04
    5690:	6d 83       	std	Y+5, r22	; 0x05
    5692:	7e 83       	std	Y+6, r23	; 0x06
    5694:	8f 83       	std	Y+7, r24	; 0x07
    5696:	98 87       	std	Y+8, r25	; 0x08
    5698:	a9 86       	std	Y+9, r10	; 0x09
    569a:	ba 86       	std	Y+10, r11	; 0x0a
    569c:	cb 86       	std	Y+11, r12	; 0x0b
    569e:	dc 86       	std	Y+12, r13	; 0x0c
    56a0:	ed 86       	std	Y+13, r14	; 0x0d
    56a2:	fe 86       	std	Y+14, r15	; 0x0e
    56a4:	0f 87       	std	Y+15, r16	; 0x0f
    56a6:	18 8b       	std	Y+16, r17	; 0x10
    56a8:	e9 84       	ldd	r14, Y+9	; 0x09
    56aa:	fa 84       	ldd	r15, Y+10	; 0x0a
    56ac:	0b 85       	ldd	r16, Y+11	; 0x0b
    56ae:	1c 85       	ldd	r17, Y+12	; 0x0c
    56b0:	2d 85       	ldd	r18, Y+13	; 0x0d
    56b2:	3e 85       	ldd	r19, Y+14	; 0x0e
    56b4:	4f 85       	ldd	r20, Y+15	; 0x0f
    56b6:	58 89       	ldd	r21, Y+16	; 0x10
    56b8:	29 80       	ldd	r2, Y+1	; 0x01
    56ba:	3a 80       	ldd	r3, Y+2	; 0x02
    56bc:	4b 80       	ldd	r4, Y+3	; 0x03
    56be:	5c 80       	ldd	r5, Y+4	; 0x04
    56c0:	2d a2       	std	Y+37, r2	; 0x25
    56c2:	3e a2       	std	Y+38, r3	; 0x26
    56c4:	4f a2       	std	Y+39, r4	; 0x27
    56c6:	58 a6       	std	Y+40, r5	; 0x28
    56c8:	ad 80       	ldd	r10, Y+5	; 0x05
    56ca:	be 80       	ldd	r11, Y+6	; 0x06
    56cc:	cf 80       	ldd	r12, Y+7	; 0x07
    56ce:	d8 84       	ldd	r13, Y+8	; 0x08
    56d0:	21 15       	cp	r18, r1
    56d2:	31 05       	cpc	r19, r1
    56d4:	41 05       	cpc	r20, r1
    56d6:	51 05       	cpc	r21, r1
    56d8:	09 f0       	breq	.+2      	; 0x56dc <__udivdi3+0x60>
    56da:	be c3       	rjmp	.+1916   	; 0x5e58 <__udivdi3+0x7dc>
    56dc:	ae 14       	cp	r10, r14
    56de:	bf 04       	cpc	r11, r15
    56e0:	c0 06       	cpc	r12, r16
    56e2:	d1 06       	cpc	r13, r17
    56e4:	08 f0       	brcs	.+2      	; 0x56e8 <__udivdi3+0x6c>
    56e6:	4f c1       	rjmp	.+670    	; 0x5986 <__udivdi3+0x30a>
    56e8:	20 e0       	ldi	r18, 0x00	; 0
    56ea:	e2 16       	cp	r14, r18
    56ec:	20 e0       	ldi	r18, 0x00	; 0
    56ee:	f2 06       	cpc	r15, r18
    56f0:	21 e0       	ldi	r18, 0x01	; 1
    56f2:	02 07       	cpc	r16, r18
    56f4:	20 e0       	ldi	r18, 0x00	; 0
    56f6:	12 07       	cpc	r17, r18
    56f8:	58 f4       	brcc	.+22     	; 0x5710 <__udivdi3+0x94>
    56fa:	3f ef       	ldi	r19, 0xFF	; 255
    56fc:	e3 16       	cp	r14, r19
    56fe:	f1 04       	cpc	r15, r1
    5700:	01 05       	cpc	r16, r1
    5702:	11 05       	cpc	r17, r1
    5704:	09 f0       	breq	.+2      	; 0x5708 <__udivdi3+0x8c>
    5706:	90 f4       	brcc	.+36     	; 0x572c <__udivdi3+0xb0>
    5708:	20 e0       	ldi	r18, 0x00	; 0
    570a:	30 e0       	ldi	r19, 0x00	; 0
    570c:	a9 01       	movw	r20, r18
    570e:	17 c0       	rjmp	.+46     	; 0x573e <__udivdi3+0xc2>
    5710:	40 e0       	ldi	r20, 0x00	; 0
    5712:	e4 16       	cp	r14, r20
    5714:	40 e0       	ldi	r20, 0x00	; 0
    5716:	f4 06       	cpc	r15, r20
    5718:	40 e0       	ldi	r20, 0x00	; 0
    571a:	04 07       	cpc	r16, r20
    571c:	41 e0       	ldi	r20, 0x01	; 1
    571e:	14 07       	cpc	r17, r20
    5720:	50 f4       	brcc	.+20     	; 0x5736 <__udivdi3+0xba>
    5722:	20 e1       	ldi	r18, 0x10	; 16
    5724:	30 e0       	ldi	r19, 0x00	; 0
    5726:	40 e0       	ldi	r20, 0x00	; 0
    5728:	50 e0       	ldi	r21, 0x00	; 0
    572a:	09 c0       	rjmp	.+18     	; 0x573e <__udivdi3+0xc2>
    572c:	28 e0       	ldi	r18, 0x08	; 8
    572e:	30 e0       	ldi	r19, 0x00	; 0
    5730:	40 e0       	ldi	r20, 0x00	; 0
    5732:	50 e0       	ldi	r21, 0x00	; 0
    5734:	04 c0       	rjmp	.+8      	; 0x573e <__udivdi3+0xc2>
    5736:	28 e1       	ldi	r18, 0x18	; 24
    5738:	30 e0       	ldi	r19, 0x00	; 0
    573a:	40 e0       	ldi	r20, 0x00	; 0
    573c:	50 e0       	ldi	r21, 0x00	; 0
    573e:	d8 01       	movw	r26, r16
    5740:	c7 01       	movw	r24, r14
    5742:	02 2e       	mov	r0, r18
    5744:	04 c0       	rjmp	.+8      	; 0x574e <__udivdi3+0xd2>
    5746:	b6 95       	lsr	r27
    5748:	a7 95       	ror	r26
    574a:	97 95       	ror	r25
    574c:	87 95       	ror	r24
    574e:	0a 94       	dec	r0
    5750:	d2 f7       	brpl	.-12     	; 0x5746 <__udivdi3+0xca>
    5752:	83 57       	subi	r24, 0x73	; 115
    5754:	9c 4f       	sbci	r25, 0xFC	; 252
    5756:	dc 01       	movw	r26, r24
    5758:	6c 91       	ld	r22, X
    575a:	80 e2       	ldi	r24, 0x20	; 32
    575c:	90 e0       	ldi	r25, 0x00	; 0
    575e:	a0 e0       	ldi	r26, 0x00	; 0
    5760:	b0 e0       	ldi	r27, 0x00	; 0
    5762:	82 1b       	sub	r24, r18
    5764:	93 0b       	sbc	r25, r19
    5766:	a4 0b       	sbc	r26, r20
    5768:	b5 0b       	sbc	r27, r21
    576a:	86 1b       	sub	r24, r22
    576c:	91 09       	sbc	r25, r1
    576e:	a1 09       	sbc	r26, r1
    5770:	b1 09       	sbc	r27, r1
    5772:	00 97       	sbiw	r24, 0x00	; 0
    5774:	a1 05       	cpc	r26, r1
    5776:	b1 05       	cpc	r27, r1
    5778:	a1 f1       	breq	.+104    	; 0x57e2 <__udivdi3+0x166>
    577a:	08 2e       	mov	r0, r24
    577c:	04 c0       	rjmp	.+8      	; 0x5786 <__udivdi3+0x10a>
    577e:	ee 0c       	add	r14, r14
    5780:	ff 1c       	adc	r15, r15
    5782:	00 1f       	adc	r16, r16
    5784:	11 1f       	adc	r17, r17
    5786:	0a 94       	dec	r0
    5788:	d2 f7       	brpl	.-12     	; 0x577e <__udivdi3+0x102>
    578a:	a6 01       	movw	r20, r12
    578c:	95 01       	movw	r18, r10
    578e:	08 2e       	mov	r0, r24
    5790:	04 c0       	rjmp	.+8      	; 0x579a <__udivdi3+0x11e>
    5792:	22 0f       	add	r18, r18
    5794:	33 1f       	adc	r19, r19
    5796:	44 1f       	adc	r20, r20
    5798:	55 1f       	adc	r21, r21
    579a:	0a 94       	dec	r0
    579c:	d2 f7       	brpl	.-12     	; 0x5792 <__udivdi3+0x116>
    579e:	60 e2       	ldi	r22, 0x20	; 32
    57a0:	70 e0       	ldi	r23, 0x00	; 0
    57a2:	68 1b       	sub	r22, r24
    57a4:	79 0b       	sbc	r23, r25
    57a6:	ad a0       	ldd	r10, Y+37	; 0x25
    57a8:	be a0       	ldd	r11, Y+38	; 0x26
    57aa:	cf a0       	ldd	r12, Y+39	; 0x27
    57ac:	d8 a4       	ldd	r13, Y+40	; 0x28
    57ae:	04 c0       	rjmp	.+8      	; 0x57b8 <__udivdi3+0x13c>
    57b0:	d6 94       	lsr	r13
    57b2:	c7 94       	ror	r12
    57b4:	b7 94       	ror	r11
    57b6:	a7 94       	ror	r10
    57b8:	6a 95       	dec	r22
    57ba:	d2 f7       	brpl	.-12     	; 0x57b0 <__udivdi3+0x134>
    57bc:	a2 2a       	or	r10, r18
    57be:	b3 2a       	or	r11, r19
    57c0:	c4 2a       	or	r12, r20
    57c2:	d5 2a       	or	r13, r21
    57c4:	2d a0       	ldd	r2, Y+37	; 0x25
    57c6:	3e a0       	ldd	r3, Y+38	; 0x26
    57c8:	4f a0       	ldd	r4, Y+39	; 0x27
    57ca:	58 a4       	ldd	r5, Y+40	; 0x28
    57cc:	04 c0       	rjmp	.+8      	; 0x57d6 <__udivdi3+0x15a>
    57ce:	22 0c       	add	r2, r2
    57d0:	33 1c       	adc	r3, r3
    57d2:	44 1c       	adc	r4, r4
    57d4:	55 1c       	adc	r5, r5
    57d6:	8a 95       	dec	r24
    57d8:	d2 f7       	brpl	.-12     	; 0x57ce <__udivdi3+0x152>
    57da:	2d a2       	std	Y+37, r2	; 0x25
    57dc:	3e a2       	std	Y+38, r3	; 0x26
    57de:	4f a2       	std	Y+39, r4	; 0x27
    57e0:	58 a6       	std	Y+40, r5	; 0x28
    57e2:	38 01       	movw	r6, r16
    57e4:	88 24       	eor	r8, r8
    57e6:	99 24       	eor	r9, r9
    57e8:	a8 01       	movw	r20, r16
    57ea:	97 01       	movw	r18, r14
    57ec:	40 70       	andi	r20, 0x00	; 0
    57ee:	50 70       	andi	r21, 0x00	; 0
    57f0:	2d 8f       	std	Y+29, r18	; 0x1d
    57f2:	3e 8f       	std	Y+30, r19	; 0x1e
    57f4:	4f 8f       	std	Y+31, r20	; 0x1f
    57f6:	58 a3       	std	Y+32, r21	; 0x20
    57f8:	c6 01       	movw	r24, r12
    57fa:	b5 01       	movw	r22, r10
    57fc:	a4 01       	movw	r20, r8
    57fe:	93 01       	movw	r18, r6
    5800:	0e 94 30 33 	call	0x6660	; 0x6660 <__udivmodsi4>
    5804:	22 2e       	mov	r2, r18
    5806:	53 2e       	mov	r5, r19
    5808:	44 2e       	mov	r4, r20
    580a:	35 2e       	mov	r3, r21
    580c:	69 a3       	std	Y+33, r22	; 0x21
    580e:	7a a3       	std	Y+34, r23	; 0x22
    5810:	8b a3       	std	Y+35, r24	; 0x23
    5812:	9c a3       	std	Y+36, r25	; 0x24
    5814:	c6 01       	movw	r24, r12
    5816:	b5 01       	movw	r22, r10
    5818:	a4 01       	movw	r20, r8
    581a:	93 01       	movw	r18, r6
    581c:	0e 94 30 33 	call	0x6660	; 0x6660 <__udivmodsi4>
    5820:	82 2d       	mov	r24, r2
    5822:	95 2d       	mov	r25, r5
    5824:	a4 2d       	mov	r26, r4
    5826:	b3 2d       	mov	r27, r3
    5828:	89 8f       	std	Y+25, r24	; 0x19
    582a:	9a 8f       	std	Y+26, r25	; 0x1a
    582c:	ab 8f       	std	Y+27, r26	; 0x1b
    582e:	bc 8f       	std	Y+28, r27	; 0x1c
    5830:	bc 01       	movw	r22, r24
    5832:	cd 01       	movw	r24, r26
    5834:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5836:	3e 8d       	ldd	r19, Y+30	; 0x1e
    5838:	4f 8d       	ldd	r20, Y+31	; 0x1f
    583a:	58 a1       	ldd	r21, Y+32	; 0x20
    583c:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <__mulsi3>
    5840:	5b 01       	movw	r10, r22
    5842:	6c 01       	movw	r12, r24
    5844:	49 a1       	ldd	r20, Y+33	; 0x21
    5846:	5a a1       	ldd	r21, Y+34	; 0x22
    5848:	6b a1       	ldd	r22, Y+35	; 0x23
    584a:	7c a1       	ldd	r23, Y+36	; 0x24
    584c:	da 01       	movw	r26, r20
    584e:	99 27       	eor	r25, r25
    5850:	88 27       	eor	r24, r24
    5852:	2d a0       	ldd	r2, Y+37	; 0x25
    5854:	3e a0       	ldd	r3, Y+38	; 0x26
    5856:	4f a0       	ldd	r4, Y+39	; 0x27
    5858:	58 a4       	ldd	r5, Y+40	; 0x28
    585a:	92 01       	movw	r18, r4
    585c:	44 27       	eor	r20, r20
    585e:	55 27       	eor	r21, r21
    5860:	82 2b       	or	r24, r18
    5862:	93 2b       	or	r25, r19
    5864:	a4 2b       	or	r26, r20
    5866:	b5 2b       	or	r27, r21
    5868:	8a 15       	cp	r24, r10
    586a:	9b 05       	cpc	r25, r11
    586c:	ac 05       	cpc	r26, r12
    586e:	bd 05       	cpc	r27, r13
    5870:	30 f5       	brcc	.+76     	; 0x58be <__udivdi3+0x242>
    5872:	29 8d       	ldd	r18, Y+25	; 0x19
    5874:	3a 8d       	ldd	r19, Y+26	; 0x1a
    5876:	4b 8d       	ldd	r20, Y+27	; 0x1b
    5878:	5c 8d       	ldd	r21, Y+28	; 0x1c
    587a:	21 50       	subi	r18, 0x01	; 1
    587c:	30 40       	sbci	r19, 0x00	; 0
    587e:	40 40       	sbci	r20, 0x00	; 0
    5880:	50 40       	sbci	r21, 0x00	; 0
    5882:	29 8f       	std	Y+25, r18	; 0x19
    5884:	3a 8f       	std	Y+26, r19	; 0x1a
    5886:	4b 8f       	std	Y+27, r20	; 0x1b
    5888:	5c 8f       	std	Y+28, r21	; 0x1c
    588a:	8e 0d       	add	r24, r14
    588c:	9f 1d       	adc	r25, r15
    588e:	a0 1f       	adc	r26, r16
    5890:	b1 1f       	adc	r27, r17
    5892:	8e 15       	cp	r24, r14
    5894:	9f 05       	cpc	r25, r15
    5896:	a0 07       	cpc	r26, r16
    5898:	b1 07       	cpc	r27, r17
    589a:	88 f0       	brcs	.+34     	; 0x58be <__udivdi3+0x242>
    589c:	8a 15       	cp	r24, r10
    589e:	9b 05       	cpc	r25, r11
    58a0:	ac 05       	cpc	r26, r12
    58a2:	bd 05       	cpc	r27, r13
    58a4:	60 f4       	brcc	.+24     	; 0x58be <__udivdi3+0x242>
    58a6:	21 50       	subi	r18, 0x01	; 1
    58a8:	30 40       	sbci	r19, 0x00	; 0
    58aa:	40 40       	sbci	r20, 0x00	; 0
    58ac:	50 40       	sbci	r21, 0x00	; 0
    58ae:	29 8f       	std	Y+25, r18	; 0x19
    58b0:	3a 8f       	std	Y+26, r19	; 0x1a
    58b2:	4b 8f       	std	Y+27, r20	; 0x1b
    58b4:	5c 8f       	std	Y+28, r21	; 0x1c
    58b6:	8e 0d       	add	r24, r14
    58b8:	9f 1d       	adc	r25, r15
    58ba:	a0 1f       	adc	r26, r16
    58bc:	b1 1f       	adc	r27, r17
    58be:	ac 01       	movw	r20, r24
    58c0:	bd 01       	movw	r22, r26
    58c2:	4a 19       	sub	r20, r10
    58c4:	5b 09       	sbc	r21, r11
    58c6:	6c 09       	sbc	r22, r12
    58c8:	7d 09       	sbc	r23, r13
    58ca:	5a 01       	movw	r10, r20
    58cc:	6b 01       	movw	r12, r22
    58ce:	cb 01       	movw	r24, r22
    58d0:	ba 01       	movw	r22, r20
    58d2:	a4 01       	movw	r20, r8
    58d4:	93 01       	movw	r18, r6
    58d6:	0e 94 30 33 	call	0x6660	; 0x6660 <__udivmodsi4>
    58da:	22 2e       	mov	r2, r18
    58dc:	53 2e       	mov	r5, r19
    58de:	44 2e       	mov	r4, r20
    58e0:	35 2e       	mov	r3, r21
    58e2:	69 a3       	std	Y+33, r22	; 0x21
    58e4:	7a a3       	std	Y+34, r23	; 0x22
    58e6:	8b a3       	std	Y+35, r24	; 0x23
    58e8:	9c a3       	std	Y+36, r25	; 0x24
    58ea:	c6 01       	movw	r24, r12
    58ec:	b5 01       	movw	r22, r10
    58ee:	a4 01       	movw	r20, r8
    58f0:	93 01       	movw	r18, r6
    58f2:	0e 94 30 33 	call	0x6660	; 0x6660 <__udivmodsi4>
    58f6:	a2 2c       	mov	r10, r2
    58f8:	b5 2c       	mov	r11, r5
    58fa:	c4 2c       	mov	r12, r4
    58fc:	d3 2c       	mov	r13, r3
    58fe:	c6 01       	movw	r24, r12
    5900:	b5 01       	movw	r22, r10
    5902:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5904:	3e 8d       	ldd	r19, Y+30	; 0x1e
    5906:	4f 8d       	ldd	r20, Y+31	; 0x1f
    5908:	58 a1       	ldd	r21, Y+32	; 0x20
    590a:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <__mulsi3>
    590e:	3b 01       	movw	r6, r22
    5910:	4c 01       	movw	r8, r24
    5912:	69 a1       	ldd	r22, Y+33	; 0x21
    5914:	7a a1       	ldd	r23, Y+34	; 0x22
    5916:	8b a1       	ldd	r24, Y+35	; 0x23
    5918:	9c a1       	ldd	r25, Y+36	; 0x24
    591a:	ab 01       	movw	r20, r22
    591c:	33 27       	eor	r19, r19
    591e:	22 27       	eor	r18, r18
    5920:	8d a1       	ldd	r24, Y+37	; 0x25
    5922:	9e a1       	ldd	r25, Y+38	; 0x26
    5924:	af a1       	ldd	r26, Y+39	; 0x27
    5926:	b8 a5       	ldd	r27, Y+40	; 0x28
    5928:	a0 70       	andi	r26, 0x00	; 0
    592a:	b0 70       	andi	r27, 0x00	; 0
    592c:	28 2b       	or	r18, r24
    592e:	39 2b       	or	r19, r25
    5930:	4a 2b       	or	r20, r26
    5932:	5b 2b       	or	r21, r27
    5934:	26 15       	cp	r18, r6
    5936:	37 05       	cpc	r19, r7
    5938:	48 05       	cpc	r20, r8
    593a:	59 05       	cpc	r21, r9
    593c:	c0 f4       	brcc	.+48     	; 0x596e <__udivdi3+0x2f2>
    593e:	08 94       	sec
    5940:	a1 08       	sbc	r10, r1
    5942:	b1 08       	sbc	r11, r1
    5944:	c1 08       	sbc	r12, r1
    5946:	d1 08       	sbc	r13, r1
    5948:	2e 0d       	add	r18, r14
    594a:	3f 1d       	adc	r19, r15
    594c:	40 1f       	adc	r20, r16
    594e:	51 1f       	adc	r21, r17
    5950:	2e 15       	cp	r18, r14
    5952:	3f 05       	cpc	r19, r15
    5954:	40 07       	cpc	r20, r16
    5956:	51 07       	cpc	r21, r17
    5958:	50 f0       	brcs	.+20     	; 0x596e <__udivdi3+0x2f2>
    595a:	26 15       	cp	r18, r6
    595c:	37 05       	cpc	r19, r7
    595e:	48 05       	cpc	r20, r8
    5960:	59 05       	cpc	r21, r9
    5962:	28 f4       	brcc	.+10     	; 0x596e <__udivdi3+0x2f2>
    5964:	08 94       	sec
    5966:	a1 08       	sbc	r10, r1
    5968:	b1 08       	sbc	r11, r1
    596a:	c1 08       	sbc	r12, r1
    596c:	d1 08       	sbc	r13, r1
    596e:	89 8d       	ldd	r24, Y+25	; 0x19
    5970:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5972:	ab 8d       	ldd	r26, Y+27	; 0x1b
    5974:	bc 8d       	ldd	r27, Y+28	; 0x1c
    5976:	8c 01       	movw	r16, r24
    5978:	ff 24       	eor	r15, r15
    597a:	ee 24       	eor	r14, r14
    597c:	ea 28       	or	r14, r10
    597e:	fb 28       	or	r15, r11
    5980:	0c 29       	or	r16, r12
    5982:	1d 29       	or	r17, r13
    5984:	b3 c4       	rjmp	.+2406   	; 0x62ec <__udivdi3+0xc70>
    5986:	e1 14       	cp	r14, r1
    5988:	f1 04       	cpc	r15, r1
    598a:	01 05       	cpc	r16, r1
    598c:	11 05       	cpc	r17, r1
    598e:	59 f4       	brne	.+22     	; 0x59a6 <__udivdi3+0x32a>
    5990:	61 e0       	ldi	r22, 0x01	; 1
    5992:	70 e0       	ldi	r23, 0x00	; 0
    5994:	80 e0       	ldi	r24, 0x00	; 0
    5996:	90 e0       	ldi	r25, 0x00	; 0
    5998:	a8 01       	movw	r20, r16
    599a:	97 01       	movw	r18, r14
    599c:	0e 94 30 33 	call	0x6660	; 0x6660 <__udivmodsi4>
    59a0:	79 01       	movw	r14, r18
    59a2:	8a 01       	movw	r16, r20
    59a4:	10 c0       	rjmp	.+32     	; 0x59c6 <__udivdi3+0x34a>
    59a6:	90 e0       	ldi	r25, 0x00	; 0
    59a8:	e9 16       	cp	r14, r25
    59aa:	90 e0       	ldi	r25, 0x00	; 0
    59ac:	f9 06       	cpc	r15, r25
    59ae:	91 e0       	ldi	r25, 0x01	; 1
    59b0:	09 07       	cpc	r16, r25
    59b2:	90 e0       	ldi	r25, 0x00	; 0
    59b4:	19 07       	cpc	r17, r25
    59b6:	58 f4       	brcc	.+22     	; 0x59ce <__udivdi3+0x352>
    59b8:	af ef       	ldi	r26, 0xFF	; 255
    59ba:	ea 16       	cp	r14, r26
    59bc:	f1 04       	cpc	r15, r1
    59be:	01 05       	cpc	r16, r1
    59c0:	11 05       	cpc	r17, r1
    59c2:	09 f0       	breq	.+2      	; 0x59c6 <__udivdi3+0x34a>
    59c4:	90 f4       	brcc	.+36     	; 0x59ea <__udivdi3+0x36e>
    59c6:	20 e0       	ldi	r18, 0x00	; 0
    59c8:	30 e0       	ldi	r19, 0x00	; 0
    59ca:	a9 01       	movw	r20, r18
    59cc:	17 c0       	rjmp	.+46     	; 0x59fc <__udivdi3+0x380>
    59ce:	b0 e0       	ldi	r27, 0x00	; 0
    59d0:	eb 16       	cp	r14, r27
    59d2:	b0 e0       	ldi	r27, 0x00	; 0
    59d4:	fb 06       	cpc	r15, r27
    59d6:	b0 e0       	ldi	r27, 0x00	; 0
    59d8:	0b 07       	cpc	r16, r27
    59da:	b1 e0       	ldi	r27, 0x01	; 1
    59dc:	1b 07       	cpc	r17, r27
    59de:	50 f4       	brcc	.+20     	; 0x59f4 <__udivdi3+0x378>
    59e0:	20 e1       	ldi	r18, 0x10	; 16
    59e2:	30 e0       	ldi	r19, 0x00	; 0
    59e4:	40 e0       	ldi	r20, 0x00	; 0
    59e6:	50 e0       	ldi	r21, 0x00	; 0
    59e8:	09 c0       	rjmp	.+18     	; 0x59fc <__udivdi3+0x380>
    59ea:	28 e0       	ldi	r18, 0x08	; 8
    59ec:	30 e0       	ldi	r19, 0x00	; 0
    59ee:	40 e0       	ldi	r20, 0x00	; 0
    59f0:	50 e0       	ldi	r21, 0x00	; 0
    59f2:	04 c0       	rjmp	.+8      	; 0x59fc <__udivdi3+0x380>
    59f4:	28 e1       	ldi	r18, 0x18	; 24
    59f6:	30 e0       	ldi	r19, 0x00	; 0
    59f8:	40 e0       	ldi	r20, 0x00	; 0
    59fa:	50 e0       	ldi	r21, 0x00	; 0
    59fc:	d8 01       	movw	r26, r16
    59fe:	c7 01       	movw	r24, r14
    5a00:	02 2e       	mov	r0, r18
    5a02:	04 c0       	rjmp	.+8      	; 0x5a0c <__udivdi3+0x390>
    5a04:	b6 95       	lsr	r27
    5a06:	a7 95       	ror	r26
    5a08:	97 95       	ror	r25
    5a0a:	87 95       	ror	r24
    5a0c:	0a 94       	dec	r0
    5a0e:	d2 f7       	brpl	.-12     	; 0x5a04 <__udivdi3+0x388>
    5a10:	83 57       	subi	r24, 0x73	; 115
    5a12:	9c 4f       	sbci	r25, 0xFC	; 252
    5a14:	fc 01       	movw	r30, r24
    5a16:	80 81       	ld	r24, Z
    5a18:	28 0f       	add	r18, r24
    5a1a:	31 1d       	adc	r19, r1
    5a1c:	41 1d       	adc	r20, r1
    5a1e:	51 1d       	adc	r21, r1
    5a20:	80 e2       	ldi	r24, 0x20	; 32
    5a22:	90 e0       	ldi	r25, 0x00	; 0
    5a24:	a0 e0       	ldi	r26, 0x00	; 0
    5a26:	b0 e0       	ldi	r27, 0x00	; 0
    5a28:	82 1b       	sub	r24, r18
    5a2a:	93 0b       	sbc	r25, r19
    5a2c:	a4 0b       	sbc	r26, r20
    5a2e:	b5 0b       	sbc	r27, r21
    5a30:	61 f4       	brne	.+24     	; 0x5a4a <__udivdi3+0x3ce>
    5a32:	15 01       	movw	r2, r10
    5a34:	26 01       	movw	r4, r12
    5a36:	2e 18       	sub	r2, r14
    5a38:	3f 08       	sbc	r3, r15
    5a3a:	40 0a       	sbc	r4, r16
    5a3c:	51 0a       	sbc	r5, r17
    5a3e:	81 e0       	ldi	r24, 0x01	; 1
    5a40:	a8 2e       	mov	r10, r24
    5a42:	b1 2c       	mov	r11, r1
    5a44:	c1 2c       	mov	r12, r1
    5a46:	d1 2c       	mov	r13, r1
    5a48:	29 c1       	rjmp	.+594    	; 0x5c9c <__udivdi3+0x620>
    5a4a:	08 2e       	mov	r0, r24
    5a4c:	04 c0       	rjmp	.+8      	; 0x5a56 <__udivdi3+0x3da>
    5a4e:	ee 0c       	add	r14, r14
    5a50:	ff 1c       	adc	r15, r15
    5a52:	00 1f       	adc	r16, r16
    5a54:	11 1f       	adc	r17, r17
    5a56:	0a 94       	dec	r0
    5a58:	d2 f7       	brpl	.-12     	; 0x5a4e <__udivdi3+0x3d2>
    5a5a:	15 01       	movw	r2, r10
    5a5c:	26 01       	movw	r4, r12
    5a5e:	02 2e       	mov	r0, r18
    5a60:	04 c0       	rjmp	.+8      	; 0x5a6a <__udivdi3+0x3ee>
    5a62:	56 94       	lsr	r5
    5a64:	47 94       	ror	r4
    5a66:	37 94       	ror	r3
    5a68:	27 94       	ror	r2
    5a6a:	0a 94       	dec	r0
    5a6c:	d2 f7       	brpl	.-12     	; 0x5a62 <__udivdi3+0x3e6>
    5a6e:	29 8e       	std	Y+25, r2	; 0x19
    5a70:	3a 8e       	std	Y+26, r3	; 0x1a
    5a72:	4b 8e       	std	Y+27, r4	; 0x1b
    5a74:	5c 8e       	std	Y+28, r5	; 0x1c
    5a76:	b6 01       	movw	r22, r12
    5a78:	a5 01       	movw	r20, r10
    5a7a:	08 2e       	mov	r0, r24
    5a7c:	04 c0       	rjmp	.+8      	; 0x5a86 <__udivdi3+0x40a>
    5a7e:	44 0f       	add	r20, r20
    5a80:	55 1f       	adc	r21, r21
    5a82:	66 1f       	adc	r22, r22
    5a84:	77 1f       	adc	r23, r23
    5a86:	0a 94       	dec	r0
    5a88:	d2 f7       	brpl	.-12     	; 0x5a7e <__udivdi3+0x402>
    5a8a:	4d 8f       	std	Y+29, r20	; 0x1d
    5a8c:	5e 8f       	std	Y+30, r21	; 0x1e
    5a8e:	6f 8f       	std	Y+31, r22	; 0x1f
    5a90:	78 a3       	std	Y+32, r23	; 0x20
    5a92:	2d a0       	ldd	r2, Y+37	; 0x25
    5a94:	3e a0       	ldd	r3, Y+38	; 0x26
    5a96:	4f a0       	ldd	r4, Y+39	; 0x27
    5a98:	58 a4       	ldd	r5, Y+40	; 0x28
    5a9a:	04 c0       	rjmp	.+8      	; 0x5aa4 <__udivdi3+0x428>
    5a9c:	56 94       	lsr	r5
    5a9e:	47 94       	ror	r4
    5aa0:	37 94       	ror	r3
    5aa2:	27 94       	ror	r2
    5aa4:	2a 95       	dec	r18
    5aa6:	d2 f7       	brpl	.-12     	; 0x5a9c <__udivdi3+0x420>
    5aa8:	ad 8c       	ldd	r10, Y+29	; 0x1d
    5aaa:	be 8c       	ldd	r11, Y+30	; 0x1e
    5aac:	cf 8c       	ldd	r12, Y+31	; 0x1f
    5aae:	d8 a0       	ldd	r13, Y+32	; 0x20
    5ab0:	a2 28       	or	r10, r2
    5ab2:	b3 28       	or	r11, r3
    5ab4:	c4 28       	or	r12, r4
    5ab6:	d5 28       	or	r13, r5
    5ab8:	ad 8e       	std	Y+29, r10	; 0x1d
    5aba:	be 8e       	std	Y+30, r11	; 0x1e
    5abc:	cf 8e       	std	Y+31, r12	; 0x1f
    5abe:	d8 a2       	std	Y+32, r13	; 0x20
    5ac0:	2d a1       	ldd	r18, Y+37	; 0x25
    5ac2:	3e a1       	ldd	r19, Y+38	; 0x26
    5ac4:	4f a1       	ldd	r20, Y+39	; 0x27
    5ac6:	58 a5       	ldd	r21, Y+40	; 0x28
    5ac8:	04 c0       	rjmp	.+8      	; 0x5ad2 <__udivdi3+0x456>
    5aca:	22 0f       	add	r18, r18
    5acc:	33 1f       	adc	r19, r19
    5ace:	44 1f       	adc	r20, r20
    5ad0:	55 1f       	adc	r21, r21
    5ad2:	8a 95       	dec	r24
    5ad4:	d2 f7       	brpl	.-12     	; 0x5aca <__udivdi3+0x44e>
    5ad6:	2d a3       	std	Y+37, r18	; 0x25
    5ad8:	3e a3       	std	Y+38, r19	; 0x26
    5ada:	4f a3       	std	Y+39, r20	; 0x27
    5adc:	58 a7       	std	Y+40, r21	; 0x28
    5ade:	38 01       	movw	r6, r16
    5ae0:	88 24       	eor	r8, r8
    5ae2:	99 24       	eor	r9, r9
    5ae4:	b8 01       	movw	r22, r16
    5ae6:	a7 01       	movw	r20, r14
    5ae8:	60 70       	andi	r22, 0x00	; 0
    5aea:	70 70       	andi	r23, 0x00	; 0
    5aec:	49 a3       	std	Y+33, r20	; 0x21
    5aee:	5a a3       	std	Y+34, r21	; 0x22
    5af0:	6b a3       	std	Y+35, r22	; 0x23
    5af2:	7c a3       	std	Y+36, r23	; 0x24
    5af4:	69 8d       	ldd	r22, Y+25	; 0x19
    5af6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5af8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5afa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5afc:	a4 01       	movw	r20, r8
    5afe:	93 01       	movw	r18, r6
    5b00:	0e 94 30 33 	call	0x6660	; 0x6660 <__udivmodsi4>
    5b04:	22 2e       	mov	r2, r18
    5b06:	53 2e       	mov	r5, r19
    5b08:	44 2e       	mov	r4, r20
    5b0a:	35 2e       	mov	r3, r21
    5b0c:	69 a7       	std	Y+41, r22	; 0x29
    5b0e:	7a a7       	std	Y+42, r23	; 0x2a
    5b10:	8b a7       	std	Y+43, r24	; 0x2b
    5b12:	9c a7       	std	Y+44, r25	; 0x2c
    5b14:	69 8d       	ldd	r22, Y+25	; 0x19
    5b16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5b18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5b1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5b1c:	a4 01       	movw	r20, r8
    5b1e:	93 01       	movw	r18, r6
    5b20:	0e 94 30 33 	call	0x6660	; 0x6660 <__udivmodsi4>
    5b24:	a2 2c       	mov	r10, r2
    5b26:	b5 2c       	mov	r11, r5
    5b28:	c4 2c       	mov	r12, r4
    5b2a:	d3 2c       	mov	r13, r3
    5b2c:	a9 8e       	std	Y+25, r10	; 0x19
    5b2e:	ba 8e       	std	Y+26, r11	; 0x1a
    5b30:	cb 8e       	std	Y+27, r12	; 0x1b
    5b32:	dc 8e       	std	Y+28, r13	; 0x1c
    5b34:	c6 01       	movw	r24, r12
    5b36:	b5 01       	movw	r22, r10
    5b38:	29 a1       	ldd	r18, Y+33	; 0x21
    5b3a:	3a a1       	ldd	r19, Y+34	; 0x22
    5b3c:	4b a1       	ldd	r20, Y+35	; 0x23
    5b3e:	5c a1       	ldd	r21, Y+36	; 0x24
    5b40:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <__mulsi3>
    5b44:	5b 01       	movw	r10, r22
    5b46:	6c 01       	movw	r12, r24
    5b48:	29 a4       	ldd	r2, Y+41	; 0x29
    5b4a:	3a a4       	ldd	r3, Y+42	; 0x2a
    5b4c:	4b a4       	ldd	r4, Y+43	; 0x2b
    5b4e:	5c a4       	ldd	r5, Y+44	; 0x2c
    5b50:	d1 01       	movw	r26, r2
    5b52:	99 27       	eor	r25, r25
    5b54:	88 27       	eor	r24, r24
    5b56:	2d 8c       	ldd	r2, Y+29	; 0x1d
    5b58:	3e 8c       	ldd	r3, Y+30	; 0x1e
    5b5a:	4f 8c       	ldd	r4, Y+31	; 0x1f
    5b5c:	58 a0       	ldd	r5, Y+32	; 0x20
    5b5e:	92 01       	movw	r18, r4
    5b60:	44 27       	eor	r20, r20
    5b62:	55 27       	eor	r21, r21
    5b64:	82 2b       	or	r24, r18
    5b66:	93 2b       	or	r25, r19
    5b68:	a4 2b       	or	r26, r20
    5b6a:	b5 2b       	or	r27, r21
    5b6c:	8a 15       	cp	r24, r10
    5b6e:	9b 05       	cpc	r25, r11
    5b70:	ac 05       	cpc	r26, r12
    5b72:	bd 05       	cpc	r27, r13
    5b74:	30 f5       	brcc	.+76     	; 0x5bc2 <__udivdi3+0x546>
    5b76:	29 8d       	ldd	r18, Y+25	; 0x19
    5b78:	3a 8d       	ldd	r19, Y+26	; 0x1a
    5b7a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    5b7c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    5b7e:	21 50       	subi	r18, 0x01	; 1
    5b80:	30 40       	sbci	r19, 0x00	; 0
    5b82:	40 40       	sbci	r20, 0x00	; 0
    5b84:	50 40       	sbci	r21, 0x00	; 0
    5b86:	29 8f       	std	Y+25, r18	; 0x19
    5b88:	3a 8f       	std	Y+26, r19	; 0x1a
    5b8a:	4b 8f       	std	Y+27, r20	; 0x1b
    5b8c:	5c 8f       	std	Y+28, r21	; 0x1c
    5b8e:	8e 0d       	add	r24, r14
    5b90:	9f 1d       	adc	r25, r15
    5b92:	a0 1f       	adc	r26, r16
    5b94:	b1 1f       	adc	r27, r17
    5b96:	8e 15       	cp	r24, r14
    5b98:	9f 05       	cpc	r25, r15
    5b9a:	a0 07       	cpc	r26, r16
    5b9c:	b1 07       	cpc	r27, r17
    5b9e:	88 f0       	brcs	.+34     	; 0x5bc2 <__udivdi3+0x546>
    5ba0:	8a 15       	cp	r24, r10
    5ba2:	9b 05       	cpc	r25, r11
    5ba4:	ac 05       	cpc	r26, r12
    5ba6:	bd 05       	cpc	r27, r13
    5ba8:	60 f4       	brcc	.+24     	; 0x5bc2 <__udivdi3+0x546>
    5baa:	21 50       	subi	r18, 0x01	; 1
    5bac:	30 40       	sbci	r19, 0x00	; 0
    5bae:	40 40       	sbci	r20, 0x00	; 0
    5bb0:	50 40       	sbci	r21, 0x00	; 0
    5bb2:	29 8f       	std	Y+25, r18	; 0x19
    5bb4:	3a 8f       	std	Y+26, r19	; 0x1a
    5bb6:	4b 8f       	std	Y+27, r20	; 0x1b
    5bb8:	5c 8f       	std	Y+28, r21	; 0x1c
    5bba:	8e 0d       	add	r24, r14
    5bbc:	9f 1d       	adc	r25, r15
    5bbe:	a0 1f       	adc	r26, r16
    5bc0:	b1 1f       	adc	r27, r17
    5bc2:	ac 01       	movw	r20, r24
    5bc4:	bd 01       	movw	r22, r26
    5bc6:	4a 19       	sub	r20, r10
    5bc8:	5b 09       	sbc	r21, r11
    5bca:	6c 09       	sbc	r22, r12
    5bcc:	7d 09       	sbc	r23, r13
    5bce:	5a 01       	movw	r10, r20
    5bd0:	6b 01       	movw	r12, r22
    5bd2:	cb 01       	movw	r24, r22
    5bd4:	ba 01       	movw	r22, r20
    5bd6:	a4 01       	movw	r20, r8
    5bd8:	93 01       	movw	r18, r6
    5bda:	0e 94 30 33 	call	0x6660	; 0x6660 <__udivmodsi4>
    5bde:	22 2e       	mov	r2, r18
    5be0:	53 2e       	mov	r5, r19
    5be2:	44 2e       	mov	r4, r20
    5be4:	35 2e       	mov	r3, r21
    5be6:	69 a7       	std	Y+41, r22	; 0x29
    5be8:	7a a7       	std	Y+42, r23	; 0x2a
    5bea:	8b a7       	std	Y+43, r24	; 0x2b
    5bec:	9c a7       	std	Y+44, r25	; 0x2c
    5bee:	c6 01       	movw	r24, r12
    5bf0:	b5 01       	movw	r22, r10
    5bf2:	a4 01       	movw	r20, r8
    5bf4:	93 01       	movw	r18, r6
    5bf6:	0e 94 30 33 	call	0x6660	; 0x6660 <__udivmodsi4>
    5bfa:	62 2c       	mov	r6, r2
    5bfc:	75 2c       	mov	r7, r5
    5bfe:	84 2c       	mov	r8, r4
    5c00:	93 2c       	mov	r9, r3
    5c02:	c4 01       	movw	r24, r8
    5c04:	b3 01       	movw	r22, r6
    5c06:	29 a1       	ldd	r18, Y+33	; 0x21
    5c08:	3a a1       	ldd	r19, Y+34	; 0x22
    5c0a:	4b a1       	ldd	r20, Y+35	; 0x23
    5c0c:	5c a1       	ldd	r21, Y+36	; 0x24
    5c0e:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <__mulsi3>
    5c12:	9b 01       	movw	r18, r22
    5c14:	ac 01       	movw	r20, r24
    5c16:	69 a5       	ldd	r22, Y+41	; 0x29
    5c18:	7a a5       	ldd	r23, Y+42	; 0x2a
    5c1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    5c1c:	9c a5       	ldd	r25, Y+44	; 0x2c
    5c1e:	6b 01       	movw	r12, r22
    5c20:	bb 24       	eor	r11, r11
    5c22:	aa 24       	eor	r10, r10
    5c24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5c26:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5c28:	af 8d       	ldd	r26, Y+31	; 0x1f
    5c2a:	b8 a1       	ldd	r27, Y+32	; 0x20
    5c2c:	a0 70       	andi	r26, 0x00	; 0
    5c2e:	b0 70       	andi	r27, 0x00	; 0
    5c30:	a8 2a       	or	r10, r24
    5c32:	b9 2a       	or	r11, r25
    5c34:	ca 2a       	or	r12, r26
    5c36:	db 2a       	or	r13, r27
    5c38:	a2 16       	cp	r10, r18
    5c3a:	b3 06       	cpc	r11, r19
    5c3c:	c4 06       	cpc	r12, r20
    5c3e:	d5 06       	cpc	r13, r21
    5c40:	e0 f4       	brcc	.+56     	; 0x5c7a <__udivdi3+0x5fe>
    5c42:	08 94       	sec
    5c44:	61 08       	sbc	r6, r1
    5c46:	71 08       	sbc	r7, r1
    5c48:	81 08       	sbc	r8, r1
    5c4a:	91 08       	sbc	r9, r1
    5c4c:	ae 0c       	add	r10, r14
    5c4e:	bf 1c       	adc	r11, r15
    5c50:	c0 1e       	adc	r12, r16
    5c52:	d1 1e       	adc	r13, r17
    5c54:	ae 14       	cp	r10, r14
    5c56:	bf 04       	cpc	r11, r15
    5c58:	c0 06       	cpc	r12, r16
    5c5a:	d1 06       	cpc	r13, r17
    5c5c:	70 f0       	brcs	.+28     	; 0x5c7a <__udivdi3+0x5fe>
    5c5e:	a2 16       	cp	r10, r18
    5c60:	b3 06       	cpc	r11, r19
    5c62:	c4 06       	cpc	r12, r20
    5c64:	d5 06       	cpc	r13, r21
    5c66:	48 f4       	brcc	.+18     	; 0x5c7a <__udivdi3+0x5fe>
    5c68:	08 94       	sec
    5c6a:	61 08       	sbc	r6, r1
    5c6c:	71 08       	sbc	r7, r1
    5c6e:	81 08       	sbc	r8, r1
    5c70:	91 08       	sbc	r9, r1
    5c72:	ae 0c       	add	r10, r14
    5c74:	bf 1c       	adc	r11, r15
    5c76:	c0 1e       	adc	r12, r16
    5c78:	d1 1e       	adc	r13, r17
    5c7a:	15 01       	movw	r2, r10
    5c7c:	26 01       	movw	r4, r12
    5c7e:	22 1a       	sub	r2, r18
    5c80:	33 0a       	sbc	r3, r19
    5c82:	44 0a       	sbc	r4, r20
    5c84:	55 0a       	sbc	r5, r21
    5c86:	89 8d       	ldd	r24, Y+25	; 0x19
    5c88:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5c8a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    5c8c:	bc 8d       	ldd	r27, Y+28	; 0x1c
    5c8e:	6c 01       	movw	r12, r24
    5c90:	bb 24       	eor	r11, r11
    5c92:	aa 24       	eor	r10, r10
    5c94:	a6 28       	or	r10, r6
    5c96:	b7 28       	or	r11, r7
    5c98:	c8 28       	or	r12, r8
    5c9a:	d9 28       	or	r13, r9
    5c9c:	98 01       	movw	r18, r16
    5c9e:	44 27       	eor	r20, r20
    5ca0:	55 27       	eor	r21, r21
    5ca2:	2d 8f       	std	Y+29, r18	; 0x1d
    5ca4:	3e 8f       	std	Y+30, r19	; 0x1e
    5ca6:	4f 8f       	std	Y+31, r20	; 0x1f
    5ca8:	58 a3       	std	Y+32, r21	; 0x20
    5caa:	b8 01       	movw	r22, r16
    5cac:	a7 01       	movw	r20, r14
    5cae:	60 70       	andi	r22, 0x00	; 0
    5cb0:	70 70       	andi	r23, 0x00	; 0
    5cb2:	49 a3       	std	Y+33, r20	; 0x21
    5cb4:	5a a3       	std	Y+34, r21	; 0x22
    5cb6:	6b a3       	std	Y+35, r22	; 0x23
    5cb8:	7c a3       	std	Y+36, r23	; 0x24
    5cba:	c2 01       	movw	r24, r4
    5cbc:	b1 01       	movw	r22, r2
    5cbe:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5cc0:	3e 8d       	ldd	r19, Y+30	; 0x1e
    5cc2:	4f 8d       	ldd	r20, Y+31	; 0x1f
    5cc4:	58 a1       	ldd	r21, Y+32	; 0x20
    5cc6:	0e 94 30 33 	call	0x6660	; 0x6660 <__udivmodsi4>
    5cca:	62 2e       	mov	r6, r18
    5ccc:	93 2e       	mov	r9, r19
    5cce:	84 2e       	mov	r8, r20
    5cd0:	75 2e       	mov	r7, r21
    5cd2:	69 a7       	std	Y+41, r22	; 0x29
    5cd4:	7a a7       	std	Y+42, r23	; 0x2a
    5cd6:	8b a7       	std	Y+43, r24	; 0x2b
    5cd8:	9c a7       	std	Y+44, r25	; 0x2c
    5cda:	c2 01       	movw	r24, r4
    5cdc:	b1 01       	movw	r22, r2
    5cde:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5ce0:	3e 8d       	ldd	r19, Y+30	; 0x1e
    5ce2:	4f 8d       	ldd	r20, Y+31	; 0x1f
    5ce4:	58 a1       	ldd	r21, Y+32	; 0x20
    5ce6:	0e 94 30 33 	call	0x6660	; 0x6660 <__udivmodsi4>
    5cea:	86 2d       	mov	r24, r6
    5cec:	99 2d       	mov	r25, r9
    5cee:	a8 2d       	mov	r26, r8
    5cf0:	b7 2d       	mov	r27, r7
    5cf2:	89 8f       	std	Y+25, r24	; 0x19
    5cf4:	9a 8f       	std	Y+26, r25	; 0x1a
    5cf6:	ab 8f       	std	Y+27, r26	; 0x1b
    5cf8:	bc 8f       	std	Y+28, r27	; 0x1c
    5cfa:	bc 01       	movw	r22, r24
    5cfc:	cd 01       	movw	r24, r26
    5cfe:	29 a1       	ldd	r18, Y+33	; 0x21
    5d00:	3a a1       	ldd	r19, Y+34	; 0x22
    5d02:	4b a1       	ldd	r20, Y+35	; 0x23
    5d04:	5c a1       	ldd	r21, Y+36	; 0x24
    5d06:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <__mulsi3>
    5d0a:	3b 01       	movw	r6, r22
    5d0c:	4c 01       	movw	r8, r24
    5d0e:	29 a4       	ldd	r2, Y+41	; 0x29
    5d10:	3a a4       	ldd	r3, Y+42	; 0x2a
    5d12:	4b a4       	ldd	r4, Y+43	; 0x2b
    5d14:	5c a4       	ldd	r5, Y+44	; 0x2c
    5d16:	d1 01       	movw	r26, r2
    5d18:	99 27       	eor	r25, r25
    5d1a:	88 27       	eor	r24, r24
    5d1c:	2d a0       	ldd	r2, Y+37	; 0x25
    5d1e:	3e a0       	ldd	r3, Y+38	; 0x26
    5d20:	4f a0       	ldd	r4, Y+39	; 0x27
    5d22:	58 a4       	ldd	r5, Y+40	; 0x28
    5d24:	92 01       	movw	r18, r4
    5d26:	44 27       	eor	r20, r20
    5d28:	55 27       	eor	r21, r21
    5d2a:	82 2b       	or	r24, r18
    5d2c:	93 2b       	or	r25, r19
    5d2e:	a4 2b       	or	r26, r20
    5d30:	b5 2b       	or	r27, r21
    5d32:	86 15       	cp	r24, r6
    5d34:	97 05       	cpc	r25, r7
    5d36:	a8 05       	cpc	r26, r8
    5d38:	b9 05       	cpc	r27, r9
    5d3a:	30 f5       	brcc	.+76     	; 0x5d88 <__udivdi3+0x70c>
    5d3c:	29 8d       	ldd	r18, Y+25	; 0x19
    5d3e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    5d40:	4b 8d       	ldd	r20, Y+27	; 0x1b
    5d42:	5c 8d       	ldd	r21, Y+28	; 0x1c
    5d44:	21 50       	subi	r18, 0x01	; 1
    5d46:	30 40       	sbci	r19, 0x00	; 0
    5d48:	40 40       	sbci	r20, 0x00	; 0
    5d4a:	50 40       	sbci	r21, 0x00	; 0
    5d4c:	29 8f       	std	Y+25, r18	; 0x19
    5d4e:	3a 8f       	std	Y+26, r19	; 0x1a
    5d50:	4b 8f       	std	Y+27, r20	; 0x1b
    5d52:	5c 8f       	std	Y+28, r21	; 0x1c
    5d54:	8e 0d       	add	r24, r14
    5d56:	9f 1d       	adc	r25, r15
    5d58:	a0 1f       	adc	r26, r16
    5d5a:	b1 1f       	adc	r27, r17
    5d5c:	8e 15       	cp	r24, r14
    5d5e:	9f 05       	cpc	r25, r15
    5d60:	a0 07       	cpc	r26, r16
    5d62:	b1 07       	cpc	r27, r17
    5d64:	88 f0       	brcs	.+34     	; 0x5d88 <__udivdi3+0x70c>
    5d66:	86 15       	cp	r24, r6
    5d68:	97 05       	cpc	r25, r7
    5d6a:	a8 05       	cpc	r26, r8
    5d6c:	b9 05       	cpc	r27, r9
    5d6e:	60 f4       	brcc	.+24     	; 0x5d88 <__udivdi3+0x70c>
    5d70:	21 50       	subi	r18, 0x01	; 1
    5d72:	30 40       	sbci	r19, 0x00	; 0
    5d74:	40 40       	sbci	r20, 0x00	; 0
    5d76:	50 40       	sbci	r21, 0x00	; 0
    5d78:	29 8f       	std	Y+25, r18	; 0x19
    5d7a:	3a 8f       	std	Y+26, r19	; 0x1a
    5d7c:	4b 8f       	std	Y+27, r20	; 0x1b
    5d7e:	5c 8f       	std	Y+28, r21	; 0x1c
    5d80:	8e 0d       	add	r24, r14
    5d82:	9f 1d       	adc	r25, r15
    5d84:	a0 1f       	adc	r26, r16
    5d86:	b1 1f       	adc	r27, r17
    5d88:	ac 01       	movw	r20, r24
    5d8a:	bd 01       	movw	r22, r26
    5d8c:	46 19       	sub	r20, r6
    5d8e:	57 09       	sbc	r21, r7
    5d90:	68 09       	sbc	r22, r8
    5d92:	79 09       	sbc	r23, r9
    5d94:	3a 01       	movw	r6, r20
    5d96:	4b 01       	movw	r8, r22
    5d98:	cb 01       	movw	r24, r22
    5d9a:	ba 01       	movw	r22, r20
    5d9c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5d9e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    5da0:	4f 8d       	ldd	r20, Y+31	; 0x1f
    5da2:	58 a1       	ldd	r21, Y+32	; 0x20
    5da4:	0e 94 30 33 	call	0x6660	; 0x6660 <__udivmodsi4>
    5da8:	52 2e       	mov	r5, r18
    5daa:	43 2e       	mov	r4, r19
    5dac:	34 2e       	mov	r3, r20
    5dae:	25 2e       	mov	r2, r21
    5db0:	69 a7       	std	Y+41, r22	; 0x29
    5db2:	7a a7       	std	Y+42, r23	; 0x2a
    5db4:	8b a7       	std	Y+43, r24	; 0x2b
    5db6:	9c a7       	std	Y+44, r25	; 0x2c
    5db8:	c4 01       	movw	r24, r8
    5dba:	b3 01       	movw	r22, r6
    5dbc:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5dbe:	3e 8d       	ldd	r19, Y+30	; 0x1e
    5dc0:	4f 8d       	ldd	r20, Y+31	; 0x1f
    5dc2:	58 a1       	ldd	r21, Y+32	; 0x20
    5dc4:	0e 94 30 33 	call	0x6660	; 0x6660 <__udivmodsi4>
    5dc8:	65 2c       	mov	r6, r5
    5dca:	74 2c       	mov	r7, r4
    5dcc:	83 2c       	mov	r8, r3
    5dce:	92 2c       	mov	r9, r2
    5dd0:	c4 01       	movw	r24, r8
    5dd2:	b3 01       	movw	r22, r6
    5dd4:	29 a1       	ldd	r18, Y+33	; 0x21
    5dd6:	3a a1       	ldd	r19, Y+34	; 0x22
    5dd8:	4b a1       	ldd	r20, Y+35	; 0x23
    5dda:	5c a1       	ldd	r21, Y+36	; 0x24
    5ddc:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <__mulsi3>
    5de0:	1b 01       	movw	r2, r22
    5de2:	2c 01       	movw	r4, r24
    5de4:	69 a5       	ldd	r22, Y+41	; 0x29
    5de6:	7a a5       	ldd	r23, Y+42	; 0x2a
    5de8:	8b a5       	ldd	r24, Y+43	; 0x2b
    5dea:	9c a5       	ldd	r25, Y+44	; 0x2c
    5dec:	ab 01       	movw	r20, r22
    5dee:	33 27       	eor	r19, r19
    5df0:	22 27       	eor	r18, r18
    5df2:	8d a1       	ldd	r24, Y+37	; 0x25
    5df4:	9e a1       	ldd	r25, Y+38	; 0x26
    5df6:	af a1       	ldd	r26, Y+39	; 0x27
    5df8:	b8 a5       	ldd	r27, Y+40	; 0x28
    5dfa:	a0 70       	andi	r26, 0x00	; 0
    5dfc:	b0 70       	andi	r27, 0x00	; 0
    5dfe:	28 2b       	or	r18, r24
    5e00:	39 2b       	or	r19, r25
    5e02:	4a 2b       	or	r20, r26
    5e04:	5b 2b       	or	r21, r27
    5e06:	22 15       	cp	r18, r2
    5e08:	33 05       	cpc	r19, r3
    5e0a:	44 05       	cpc	r20, r4
    5e0c:	55 05       	cpc	r21, r5
    5e0e:	c0 f4       	brcc	.+48     	; 0x5e40 <__udivdi3+0x7c4>
    5e10:	08 94       	sec
    5e12:	61 08       	sbc	r6, r1
    5e14:	71 08       	sbc	r7, r1
    5e16:	81 08       	sbc	r8, r1
    5e18:	91 08       	sbc	r9, r1
    5e1a:	2e 0d       	add	r18, r14
    5e1c:	3f 1d       	adc	r19, r15
    5e1e:	40 1f       	adc	r20, r16
    5e20:	51 1f       	adc	r21, r17
    5e22:	2e 15       	cp	r18, r14
    5e24:	3f 05       	cpc	r19, r15
    5e26:	40 07       	cpc	r20, r16
    5e28:	51 07       	cpc	r21, r17
    5e2a:	50 f0       	brcs	.+20     	; 0x5e40 <__udivdi3+0x7c4>
    5e2c:	22 15       	cp	r18, r2
    5e2e:	33 05       	cpc	r19, r3
    5e30:	44 05       	cpc	r20, r4
    5e32:	55 05       	cpc	r21, r5
    5e34:	28 f4       	brcc	.+10     	; 0x5e40 <__udivdi3+0x7c4>
    5e36:	08 94       	sec
    5e38:	61 08       	sbc	r6, r1
    5e3a:	71 08       	sbc	r7, r1
    5e3c:	81 08       	sbc	r8, r1
    5e3e:	91 08       	sbc	r9, r1
    5e40:	89 8d       	ldd	r24, Y+25	; 0x19
    5e42:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5e44:	ab 8d       	ldd	r26, Y+27	; 0x1b
    5e46:	bc 8d       	ldd	r27, Y+28	; 0x1c
    5e48:	8c 01       	movw	r16, r24
    5e4a:	ff 24       	eor	r15, r15
    5e4c:	ee 24       	eor	r14, r14
    5e4e:	e6 28       	or	r14, r6
    5e50:	f7 28       	or	r15, r7
    5e52:	08 29       	or	r16, r8
    5e54:	19 29       	or	r17, r9
    5e56:	4d c2       	rjmp	.+1178   	; 0x62f2 <__udivdi3+0xc76>
    5e58:	a2 16       	cp	r10, r18
    5e5a:	b3 06       	cpc	r11, r19
    5e5c:	c4 06       	cpc	r12, r20
    5e5e:	d5 06       	cpc	r13, r21
    5e60:	08 f4       	brcc	.+2      	; 0x5e64 <__udivdi3+0x7e8>
    5e62:	34 c2       	rjmp	.+1128   	; 0x62cc <__udivdi3+0xc50>
    5e64:	20 30       	cpi	r18, 0x00	; 0
    5e66:	90 e0       	ldi	r25, 0x00	; 0
    5e68:	39 07       	cpc	r19, r25
    5e6a:	91 e0       	ldi	r25, 0x01	; 1
    5e6c:	49 07       	cpc	r20, r25
    5e6e:	90 e0       	ldi	r25, 0x00	; 0
    5e70:	59 07       	cpc	r21, r25
    5e72:	50 f4       	brcc	.+20     	; 0x5e88 <__udivdi3+0x80c>
    5e74:	2f 3f       	cpi	r18, 0xFF	; 255
    5e76:	31 05       	cpc	r19, r1
    5e78:	41 05       	cpc	r20, r1
    5e7a:	51 05       	cpc	r21, r1
    5e7c:	09 f0       	breq	.+2      	; 0x5e80 <__udivdi3+0x804>
    5e7e:	90 f4       	brcc	.+36     	; 0x5ea4 <__udivdi3+0x828>
    5e80:	66 24       	eor	r6, r6
    5e82:	77 24       	eor	r7, r7
    5e84:	43 01       	movw	r8, r6
    5e86:	19 c0       	rjmp	.+50     	; 0x5eba <__udivdi3+0x83e>
    5e88:	20 30       	cpi	r18, 0x00	; 0
    5e8a:	a0 e0       	ldi	r26, 0x00	; 0
    5e8c:	3a 07       	cpc	r19, r26
    5e8e:	a0 e0       	ldi	r26, 0x00	; 0
    5e90:	4a 07       	cpc	r20, r26
    5e92:	a1 e0       	ldi	r26, 0x01	; 1
    5e94:	5a 07       	cpc	r21, r26
    5e96:	60 f4       	brcc	.+24     	; 0x5eb0 <__udivdi3+0x834>
    5e98:	90 e1       	ldi	r25, 0x10	; 16
    5e9a:	69 2e       	mov	r6, r25
    5e9c:	71 2c       	mov	r7, r1
    5e9e:	81 2c       	mov	r8, r1
    5ea0:	91 2c       	mov	r9, r1
    5ea2:	0b c0       	rjmp	.+22     	; 0x5eba <__udivdi3+0x83e>
    5ea4:	88 e0       	ldi	r24, 0x08	; 8
    5ea6:	68 2e       	mov	r6, r24
    5ea8:	71 2c       	mov	r7, r1
    5eaa:	81 2c       	mov	r8, r1
    5eac:	91 2c       	mov	r9, r1
    5eae:	05 c0       	rjmp	.+10     	; 0x5eba <__udivdi3+0x83e>
    5eb0:	b8 e1       	ldi	r27, 0x18	; 24
    5eb2:	6b 2e       	mov	r6, r27
    5eb4:	71 2c       	mov	r7, r1
    5eb6:	81 2c       	mov	r8, r1
    5eb8:	91 2c       	mov	r9, r1
    5eba:	da 01       	movw	r26, r20
    5ebc:	c9 01       	movw	r24, r18
    5ebe:	06 2c       	mov	r0, r6
    5ec0:	04 c0       	rjmp	.+8      	; 0x5eca <__udivdi3+0x84e>
    5ec2:	b6 95       	lsr	r27
    5ec4:	a7 95       	ror	r26
    5ec6:	97 95       	ror	r25
    5ec8:	87 95       	ror	r24
    5eca:	0a 94       	dec	r0
    5ecc:	d2 f7       	brpl	.-12     	; 0x5ec2 <__udivdi3+0x846>
    5ece:	83 57       	subi	r24, 0x73	; 115
    5ed0:	9c 4f       	sbci	r25, 0xFC	; 252
    5ed2:	fc 01       	movw	r30, r24
    5ed4:	80 81       	ld	r24, Z
    5ed6:	68 0e       	add	r6, r24
    5ed8:	71 1c       	adc	r7, r1
    5eda:	81 1c       	adc	r8, r1
    5edc:	91 1c       	adc	r9, r1
    5ede:	80 e2       	ldi	r24, 0x20	; 32
    5ee0:	90 e0       	ldi	r25, 0x00	; 0
    5ee2:	a0 e0       	ldi	r26, 0x00	; 0
    5ee4:	b0 e0       	ldi	r27, 0x00	; 0
    5ee6:	86 19       	sub	r24, r6
    5ee8:	97 09       	sbc	r25, r7
    5eea:	a8 09       	sbc	r26, r8
    5eec:	b9 09       	sbc	r27, r9
    5eee:	89 f4       	brne	.+34     	; 0x5f12 <__udivdi3+0x896>
    5ef0:	2a 15       	cp	r18, r10
    5ef2:	3b 05       	cpc	r19, r11
    5ef4:	4c 05       	cpc	r20, r12
    5ef6:	5d 05       	cpc	r21, r13
    5ef8:	08 f4       	brcc	.+2      	; 0x5efc <__udivdi3+0x880>
    5efa:	ef c1       	rjmp	.+990    	; 0x62da <__udivdi3+0xc5e>
    5efc:	2d a0       	ldd	r2, Y+37	; 0x25
    5efe:	3e a0       	ldd	r3, Y+38	; 0x26
    5f00:	4f a0       	ldd	r4, Y+39	; 0x27
    5f02:	58 a4       	ldd	r5, Y+40	; 0x28
    5f04:	2e 14       	cp	r2, r14
    5f06:	3f 04       	cpc	r3, r15
    5f08:	40 06       	cpc	r4, r16
    5f0a:	51 06       	cpc	r5, r17
    5f0c:	08 f0       	brcs	.+2      	; 0x5f10 <__udivdi3+0x894>
    5f0e:	e5 c1       	rjmp	.+970    	; 0x62da <__udivdi3+0xc5e>
    5f10:	dd c1       	rjmp	.+954    	; 0x62cc <__udivdi3+0xc50>
    5f12:	89 a7       	std	Y+41, r24	; 0x29
    5f14:	19 01       	movw	r2, r18
    5f16:	2a 01       	movw	r4, r20
    5f18:	04 c0       	rjmp	.+8      	; 0x5f22 <__udivdi3+0x8a6>
    5f1a:	22 0c       	add	r2, r2
    5f1c:	33 1c       	adc	r3, r3
    5f1e:	44 1c       	adc	r4, r4
    5f20:	55 1c       	adc	r5, r5
    5f22:	8a 95       	dec	r24
    5f24:	d2 f7       	brpl	.-12     	; 0x5f1a <__udivdi3+0x89e>
    5f26:	d8 01       	movw	r26, r16
    5f28:	c7 01       	movw	r24, r14
    5f2a:	06 2c       	mov	r0, r6
    5f2c:	04 c0       	rjmp	.+8      	; 0x5f36 <__udivdi3+0x8ba>
    5f2e:	b6 95       	lsr	r27
    5f30:	a7 95       	ror	r26
    5f32:	97 95       	ror	r25
    5f34:	87 95       	ror	r24
    5f36:	0a 94       	dec	r0
    5f38:	d2 f7       	brpl	.-12     	; 0x5f2e <__udivdi3+0x8b2>
    5f3a:	28 2a       	or	r2, r24
    5f3c:	39 2a       	or	r3, r25
    5f3e:	4a 2a       	or	r4, r26
    5f40:	5b 2a       	or	r5, r27
    5f42:	a8 01       	movw	r20, r16
    5f44:	97 01       	movw	r18, r14
    5f46:	09 a4       	ldd	r0, Y+41	; 0x29
    5f48:	04 c0       	rjmp	.+8      	; 0x5f52 <__udivdi3+0x8d6>
    5f4a:	22 0f       	add	r18, r18
    5f4c:	33 1f       	adc	r19, r19
    5f4e:	44 1f       	adc	r20, r20
    5f50:	55 1f       	adc	r21, r21
    5f52:	0a 94       	dec	r0
    5f54:	d2 f7       	brpl	.-12     	; 0x5f4a <__udivdi3+0x8ce>
    5f56:	29 ab       	std	Y+49, r18	; 0x31
    5f58:	3a ab       	std	Y+50, r19	; 0x32
    5f5a:	4b ab       	std	Y+51, r20	; 0x33
    5f5c:	5c ab       	std	Y+52, r21	; 0x34
    5f5e:	86 01       	movw	r16, r12
    5f60:	75 01       	movw	r14, r10
    5f62:	06 2c       	mov	r0, r6
    5f64:	04 c0       	rjmp	.+8      	; 0x5f6e <__udivdi3+0x8f2>
    5f66:	16 95       	lsr	r17
    5f68:	07 95       	ror	r16
    5f6a:	f7 94       	ror	r15
    5f6c:	e7 94       	ror	r14
    5f6e:	0a 94       	dec	r0
    5f70:	d2 f7       	brpl	.-12     	; 0x5f66 <__udivdi3+0x8ea>
    5f72:	b6 01       	movw	r22, r12
    5f74:	a5 01       	movw	r20, r10
    5f76:	09 a4       	ldd	r0, Y+41	; 0x29
    5f78:	04 c0       	rjmp	.+8      	; 0x5f82 <__udivdi3+0x906>
    5f7a:	44 0f       	add	r20, r20
    5f7c:	55 1f       	adc	r21, r21
    5f7e:	66 1f       	adc	r22, r22
    5f80:	77 1f       	adc	r23, r23
    5f82:	0a 94       	dec	r0
    5f84:	d2 f7       	brpl	.-12     	; 0x5f7a <__udivdi3+0x8fe>
    5f86:	4d 8f       	std	Y+29, r20	; 0x1d
    5f88:	5e 8f       	std	Y+30, r21	; 0x1e
    5f8a:	6f 8f       	std	Y+31, r22	; 0x1f
    5f8c:	78 a3       	std	Y+32, r23	; 0x20
    5f8e:	6d a1       	ldd	r22, Y+37	; 0x25
    5f90:	7e a1       	ldd	r23, Y+38	; 0x26
    5f92:	8f a1       	ldd	r24, Y+39	; 0x27
    5f94:	98 a5       	ldd	r25, Y+40	; 0x28
    5f96:	04 c0       	rjmp	.+8      	; 0x5fa0 <__udivdi3+0x924>
    5f98:	96 95       	lsr	r25
    5f9a:	87 95       	ror	r24
    5f9c:	77 95       	ror	r23
    5f9e:	67 95       	ror	r22
    5fa0:	6a 94       	dec	r6
    5fa2:	d2 f7       	brpl	.-12     	; 0x5f98 <__udivdi3+0x91c>
    5fa4:	3b 01       	movw	r6, r22
    5fa6:	4c 01       	movw	r8, r24
    5fa8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5faa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5fac:	af 8d       	ldd	r26, Y+31	; 0x1f
    5fae:	b8 a1       	ldd	r27, Y+32	; 0x20
    5fb0:	86 29       	or	r24, r6
    5fb2:	97 29       	or	r25, r7
    5fb4:	a8 29       	or	r26, r8
    5fb6:	b9 29       	or	r27, r9
    5fb8:	8d 8f       	std	Y+29, r24	; 0x1d
    5fba:	9e 8f       	std	Y+30, r25	; 0x1e
    5fbc:	af 8f       	std	Y+31, r26	; 0x1f
    5fbe:	b8 a3       	std	Y+32, r27	; 0x20
    5fc0:	52 01       	movw	r10, r4
    5fc2:	cc 24       	eor	r12, r12
    5fc4:	dd 24       	eor	r13, r13
    5fc6:	a9 a2       	std	Y+33, r10	; 0x21
    5fc8:	ba a2       	std	Y+34, r11	; 0x22
    5fca:	cb a2       	std	Y+35, r12	; 0x23
    5fcc:	dc a2       	std	Y+36, r13	; 0x24
    5fce:	a2 01       	movw	r20, r4
    5fd0:	91 01       	movw	r18, r2
    5fd2:	40 70       	andi	r20, 0x00	; 0
    5fd4:	50 70       	andi	r21, 0x00	; 0
    5fd6:	2d ab       	std	Y+53, r18	; 0x35
    5fd8:	3e ab       	std	Y+54, r19	; 0x36
    5fda:	4f ab       	std	Y+55, r20	; 0x37
    5fdc:	58 af       	std	Y+56, r21	; 0x38
    5fde:	c8 01       	movw	r24, r16
    5fe0:	b7 01       	movw	r22, r14
    5fe2:	a6 01       	movw	r20, r12
    5fe4:	95 01       	movw	r18, r10
    5fe6:	0e 94 30 33 	call	0x6660	; 0x6660 <__udivmodsi4>
    5fea:	62 2e       	mov	r6, r18
    5fec:	a3 2e       	mov	r10, r19
    5fee:	d4 2e       	mov	r13, r20
    5ff0:	c5 2e       	mov	r12, r21
    5ff2:	6d a7       	std	Y+45, r22	; 0x2d
    5ff4:	7e a7       	std	Y+46, r23	; 0x2e
    5ff6:	8f a7       	std	Y+47, r24	; 0x2f
    5ff8:	98 ab       	std	Y+48, r25	; 0x30
    5ffa:	c8 01       	movw	r24, r16
    5ffc:	b7 01       	movw	r22, r14
    5ffe:	29 a1       	ldd	r18, Y+33	; 0x21
    6000:	3a a1       	ldd	r19, Y+34	; 0x22
    6002:	4b a1       	ldd	r20, Y+35	; 0x23
    6004:	5c a1       	ldd	r21, Y+36	; 0x24
    6006:	0e 94 30 33 	call	0x6660	; 0x6660 <__udivmodsi4>
    600a:	e6 2c       	mov	r14, r6
    600c:	fa 2c       	mov	r15, r10
    600e:	0d 2d       	mov	r16, r13
    6010:	1c 2d       	mov	r17, r12
    6012:	e9 8e       	std	Y+25, r14	; 0x19
    6014:	fa 8e       	std	Y+26, r15	; 0x1a
    6016:	0b 8f       	std	Y+27, r16	; 0x1b
    6018:	1c 8f       	std	Y+28, r17	; 0x1c
    601a:	c8 01       	movw	r24, r16
    601c:	b7 01       	movw	r22, r14
    601e:	2d a9       	ldd	r18, Y+53	; 0x35
    6020:	3e a9       	ldd	r19, Y+54	; 0x36
    6022:	4f a9       	ldd	r20, Y+55	; 0x37
    6024:	58 ad       	ldd	r21, Y+56	; 0x38
    6026:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <__mulsi3>
    602a:	ad a4       	ldd	r10, Y+45	; 0x2d
    602c:	be a4       	ldd	r11, Y+46	; 0x2e
    602e:	cf a4       	ldd	r12, Y+47	; 0x2f
    6030:	d8 a8       	ldd	r13, Y+48	; 0x30
    6032:	85 01       	movw	r16, r10
    6034:	ff 24       	eor	r15, r15
    6036:	ee 24       	eor	r14, r14
    6038:	ad 8c       	ldd	r10, Y+29	; 0x1d
    603a:	be 8c       	ldd	r11, Y+30	; 0x1e
    603c:	cf 8c       	ldd	r12, Y+31	; 0x1f
    603e:	d8 a0       	ldd	r13, Y+32	; 0x20
    6040:	96 01       	movw	r18, r12
    6042:	44 27       	eor	r20, r20
    6044:	55 27       	eor	r21, r21
    6046:	e2 2a       	or	r14, r18
    6048:	f3 2a       	or	r15, r19
    604a:	04 2b       	or	r16, r20
    604c:	15 2b       	or	r17, r21
    604e:	e6 16       	cp	r14, r22
    6050:	f7 06       	cpc	r15, r23
    6052:	08 07       	cpc	r16, r24
    6054:	19 07       	cpc	r17, r25
    6056:	30 f5       	brcc	.+76     	; 0x60a4 <__udivdi3+0xa28>
    6058:	29 8d       	ldd	r18, Y+25	; 0x19
    605a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    605c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    605e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    6060:	21 50       	subi	r18, 0x01	; 1
    6062:	30 40       	sbci	r19, 0x00	; 0
    6064:	40 40       	sbci	r20, 0x00	; 0
    6066:	50 40       	sbci	r21, 0x00	; 0
    6068:	29 8f       	std	Y+25, r18	; 0x19
    606a:	3a 8f       	std	Y+26, r19	; 0x1a
    606c:	4b 8f       	std	Y+27, r20	; 0x1b
    606e:	5c 8f       	std	Y+28, r21	; 0x1c
    6070:	e2 0c       	add	r14, r2
    6072:	f3 1c       	adc	r15, r3
    6074:	04 1d       	adc	r16, r4
    6076:	15 1d       	adc	r17, r5
    6078:	e2 14       	cp	r14, r2
    607a:	f3 04       	cpc	r15, r3
    607c:	04 05       	cpc	r16, r4
    607e:	15 05       	cpc	r17, r5
    6080:	88 f0       	brcs	.+34     	; 0x60a4 <__udivdi3+0xa28>
    6082:	e6 16       	cp	r14, r22
    6084:	f7 06       	cpc	r15, r23
    6086:	08 07       	cpc	r16, r24
    6088:	19 07       	cpc	r17, r25
    608a:	60 f4       	brcc	.+24     	; 0x60a4 <__udivdi3+0xa28>
    608c:	21 50       	subi	r18, 0x01	; 1
    608e:	30 40       	sbci	r19, 0x00	; 0
    6090:	40 40       	sbci	r20, 0x00	; 0
    6092:	50 40       	sbci	r21, 0x00	; 0
    6094:	29 8f       	std	Y+25, r18	; 0x19
    6096:	3a 8f       	std	Y+26, r19	; 0x1a
    6098:	4b 8f       	std	Y+27, r20	; 0x1b
    609a:	5c 8f       	std	Y+28, r21	; 0x1c
    609c:	e2 0c       	add	r14, r2
    609e:	f3 1c       	adc	r15, r3
    60a0:	04 1d       	adc	r16, r4
    60a2:	15 1d       	adc	r17, r5
    60a4:	e6 1a       	sub	r14, r22
    60a6:	f7 0a       	sbc	r15, r23
    60a8:	08 0b       	sbc	r16, r24
    60aa:	19 0b       	sbc	r17, r25
    60ac:	c8 01       	movw	r24, r16
    60ae:	b7 01       	movw	r22, r14
    60b0:	29 a1       	ldd	r18, Y+33	; 0x21
    60b2:	3a a1       	ldd	r19, Y+34	; 0x22
    60b4:	4b a1       	ldd	r20, Y+35	; 0x23
    60b6:	5c a1       	ldd	r21, Y+36	; 0x24
    60b8:	0e 94 30 33 	call	0x6660	; 0x6660 <__udivmodsi4>
    60bc:	a2 2e       	mov	r10, r18
    60be:	d3 2e       	mov	r13, r19
    60c0:	c4 2e       	mov	r12, r20
    60c2:	b5 2e       	mov	r11, r21
    60c4:	6d a7       	std	Y+45, r22	; 0x2d
    60c6:	7e a7       	std	Y+46, r23	; 0x2e
    60c8:	8f a7       	std	Y+47, r24	; 0x2f
    60ca:	98 ab       	std	Y+48, r25	; 0x30
    60cc:	c8 01       	movw	r24, r16
    60ce:	b7 01       	movw	r22, r14
    60d0:	29 a1       	ldd	r18, Y+33	; 0x21
    60d2:	3a a1       	ldd	r19, Y+34	; 0x22
    60d4:	4b a1       	ldd	r20, Y+35	; 0x23
    60d6:	5c a1       	ldd	r21, Y+36	; 0x24
    60d8:	0e 94 30 33 	call	0x6660	; 0x6660 <__udivmodsi4>
    60dc:	6a 2c       	mov	r6, r10
    60de:	7d 2c       	mov	r7, r13
    60e0:	8c 2c       	mov	r8, r12
    60e2:	9b 2c       	mov	r9, r11
    60e4:	c4 01       	movw	r24, r8
    60e6:	b3 01       	movw	r22, r6
    60e8:	2d a9       	ldd	r18, Y+53	; 0x35
    60ea:	3e a9       	ldd	r19, Y+54	; 0x36
    60ec:	4f a9       	ldd	r20, Y+55	; 0x37
    60ee:	58 ad       	ldd	r21, Y+56	; 0x38
    60f0:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <__mulsi3>
    60f4:	9b 01       	movw	r18, r22
    60f6:	ac 01       	movw	r20, r24
    60f8:	ad a4       	ldd	r10, Y+45	; 0x2d
    60fa:	be a4       	ldd	r11, Y+46	; 0x2e
    60fc:	cf a4       	ldd	r12, Y+47	; 0x2f
    60fe:	d8 a8       	ldd	r13, Y+48	; 0x30
    6100:	d5 01       	movw	r26, r10
    6102:	99 27       	eor	r25, r25
    6104:	88 27       	eor	r24, r24
    6106:	ad 8c       	ldd	r10, Y+29	; 0x1d
    6108:	be 8c       	ldd	r11, Y+30	; 0x1e
    610a:	cf 8c       	ldd	r12, Y+31	; 0x1f
    610c:	d8 a0       	ldd	r13, Y+32	; 0x20
    610e:	6f ef       	ldi	r22, 0xFF	; 255
    6110:	e6 2e       	mov	r14, r22
    6112:	6f ef       	ldi	r22, 0xFF	; 255
    6114:	f6 2e       	mov	r15, r22
    6116:	01 2d       	mov	r16, r1
    6118:	11 2d       	mov	r17, r1
    611a:	ae 20       	and	r10, r14
    611c:	bf 20       	and	r11, r15
    611e:	c0 22       	and	r12, r16
    6120:	d1 22       	and	r13, r17
    6122:	8a 29       	or	r24, r10
    6124:	9b 29       	or	r25, r11
    6126:	ac 29       	or	r26, r12
    6128:	bd 29       	or	r27, r13
    612a:	82 17       	cp	r24, r18
    612c:	93 07       	cpc	r25, r19
    612e:	a4 07       	cpc	r26, r20
    6130:	b5 07       	cpc	r27, r21
    6132:	e0 f4       	brcc	.+56     	; 0x616c <__udivdi3+0xaf0>
    6134:	08 94       	sec
    6136:	61 08       	sbc	r6, r1
    6138:	71 08       	sbc	r7, r1
    613a:	81 08       	sbc	r8, r1
    613c:	91 08       	sbc	r9, r1
    613e:	82 0d       	add	r24, r2
    6140:	93 1d       	adc	r25, r3
    6142:	a4 1d       	adc	r26, r4
    6144:	b5 1d       	adc	r27, r5
    6146:	82 15       	cp	r24, r2
    6148:	93 05       	cpc	r25, r3
    614a:	a4 05       	cpc	r26, r4
    614c:	b5 05       	cpc	r27, r5
    614e:	70 f0       	brcs	.+28     	; 0x616c <__udivdi3+0xaf0>
    6150:	82 17       	cp	r24, r18
    6152:	93 07       	cpc	r25, r19
    6154:	a4 07       	cpc	r26, r20
    6156:	b5 07       	cpc	r27, r21
    6158:	48 f4       	brcc	.+18     	; 0x616c <__udivdi3+0xaf0>
    615a:	08 94       	sec
    615c:	61 08       	sbc	r6, r1
    615e:	71 08       	sbc	r7, r1
    6160:	81 08       	sbc	r8, r1
    6162:	91 08       	sbc	r9, r1
    6164:	82 0d       	add	r24, r2
    6166:	93 1d       	adc	r25, r3
    6168:	a4 1d       	adc	r26, r4
    616a:	b5 1d       	adc	r27, r5
    616c:	1c 01       	movw	r2, r24
    616e:	2d 01       	movw	r4, r26
    6170:	22 1a       	sub	r2, r18
    6172:	33 0a       	sbc	r3, r19
    6174:	44 0a       	sbc	r4, r20
    6176:	55 0a       	sbc	r5, r21
    6178:	2d 8e       	std	Y+29, r2	; 0x1d
    617a:	3e 8e       	std	Y+30, r3	; 0x1e
    617c:	4f 8e       	std	Y+31, r4	; 0x1f
    617e:	58 a2       	std	Y+32, r5	; 0x20
    6180:	a9 8c       	ldd	r10, Y+25	; 0x19
    6182:	ba 8c       	ldd	r11, Y+26	; 0x1a
    6184:	cb 8c       	ldd	r12, Y+27	; 0x1b
    6186:	dc 8c       	ldd	r13, Y+28	; 0x1c
    6188:	85 01       	movw	r16, r10
    618a:	ff 24       	eor	r15, r15
    618c:	ee 24       	eor	r14, r14
    618e:	e6 28       	or	r14, r6
    6190:	f7 28       	or	r15, r7
    6192:	08 29       	or	r16, r8
    6194:	19 29       	or	r17, r9
    6196:	af ef       	ldi	r26, 0xFF	; 255
    6198:	aa 2e       	mov	r10, r26
    619a:	af ef       	ldi	r26, 0xFF	; 255
    619c:	ba 2e       	mov	r11, r26
    619e:	c1 2c       	mov	r12, r1
    61a0:	d1 2c       	mov	r13, r1
    61a2:	ae 20       	and	r10, r14
    61a4:	bf 20       	and	r11, r15
    61a6:	c0 22       	and	r12, r16
    61a8:	d1 22       	and	r13, r17
    61aa:	18 01       	movw	r2, r16
    61ac:	44 24       	eor	r4, r4
    61ae:	55 24       	eor	r5, r5
    61b0:	69 a8       	ldd	r6, Y+49	; 0x31
    61b2:	7a a8       	ldd	r7, Y+50	; 0x32
    61b4:	8b a8       	ldd	r8, Y+51	; 0x33
    61b6:	9c a8       	ldd	r9, Y+52	; 0x34
    61b8:	2f ef       	ldi	r18, 0xFF	; 255
    61ba:	3f ef       	ldi	r19, 0xFF	; 255
    61bc:	40 e0       	ldi	r20, 0x00	; 0
    61be:	50 e0       	ldi	r21, 0x00	; 0
    61c0:	62 22       	and	r6, r18
    61c2:	73 22       	and	r7, r19
    61c4:	84 22       	and	r8, r20
    61c6:	95 22       	and	r9, r21
    61c8:	69 a9       	ldd	r22, Y+49	; 0x31
    61ca:	7a a9       	ldd	r23, Y+50	; 0x32
    61cc:	8b a9       	ldd	r24, Y+51	; 0x33
    61ce:	9c a9       	ldd	r25, Y+52	; 0x34
    61d0:	ac 01       	movw	r20, r24
    61d2:	66 27       	eor	r22, r22
    61d4:	77 27       	eor	r23, r23
    61d6:	49 8f       	std	Y+25, r20	; 0x19
    61d8:	5a 8f       	std	Y+26, r21	; 0x1a
    61da:	6b 8f       	std	Y+27, r22	; 0x1b
    61dc:	7c 8f       	std	Y+28, r23	; 0x1c
    61de:	c6 01       	movw	r24, r12
    61e0:	b5 01       	movw	r22, r10
    61e2:	a4 01       	movw	r20, r8
    61e4:	93 01       	movw	r18, r6
    61e6:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <__mulsi3>
    61ea:	69 a3       	std	Y+33, r22	; 0x21
    61ec:	7a a3       	std	Y+34, r23	; 0x22
    61ee:	8b a3       	std	Y+35, r24	; 0x23
    61f0:	9c a3       	std	Y+36, r25	; 0x24
    61f2:	c6 01       	movw	r24, r12
    61f4:	b5 01       	movw	r22, r10
    61f6:	29 8d       	ldd	r18, Y+25	; 0x19
    61f8:	3a 8d       	ldd	r19, Y+26	; 0x1a
    61fa:	4b 8d       	ldd	r20, Y+27	; 0x1b
    61fc:	5c 8d       	ldd	r21, Y+28	; 0x1c
    61fe:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <__mulsi3>
    6202:	5b 01       	movw	r10, r22
    6204:	6c 01       	movw	r12, r24
    6206:	c2 01       	movw	r24, r4
    6208:	b1 01       	movw	r22, r2
    620a:	a4 01       	movw	r20, r8
    620c:	93 01       	movw	r18, r6
    620e:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <__mulsi3>
    6212:	3b 01       	movw	r6, r22
    6214:	4c 01       	movw	r8, r24
    6216:	c2 01       	movw	r24, r4
    6218:	b1 01       	movw	r22, r2
    621a:	29 8d       	ldd	r18, Y+25	; 0x19
    621c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    621e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    6220:	5c 8d       	ldd	r21, Y+28	; 0x1c
    6222:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <__mulsi3>
    6226:	9b 01       	movw	r18, r22
    6228:	ac 01       	movw	r20, r24
    622a:	a6 0c       	add	r10, r6
    622c:	b7 1c       	adc	r11, r7
    622e:	c8 1c       	adc	r12, r8
    6230:	d9 1c       	adc	r13, r9
    6232:	29 a0       	ldd	r2, Y+33	; 0x21
    6234:	3a a0       	ldd	r3, Y+34	; 0x22
    6236:	4b a0       	ldd	r4, Y+35	; 0x23
    6238:	5c a0       	ldd	r5, Y+36	; 0x24
    623a:	c2 01       	movw	r24, r4
    623c:	aa 27       	eor	r26, r26
    623e:	bb 27       	eor	r27, r27
    6240:	a8 0e       	add	r10, r24
    6242:	b9 1e       	adc	r11, r25
    6244:	ca 1e       	adc	r12, r26
    6246:	db 1e       	adc	r13, r27
    6248:	a6 14       	cp	r10, r6
    624a:	b7 04       	cpc	r11, r7
    624c:	c8 04       	cpc	r12, r8
    624e:	d9 04       	cpc	r13, r9
    6250:	20 f4       	brcc	.+8      	; 0x625a <__udivdi3+0xbde>
    6252:	20 50       	subi	r18, 0x00	; 0
    6254:	30 40       	sbci	r19, 0x00	; 0
    6256:	4f 4f       	sbci	r20, 0xFF	; 255
    6258:	5f 4f       	sbci	r21, 0xFF	; 255
    625a:	c6 01       	movw	r24, r12
    625c:	aa 27       	eor	r26, r26
    625e:	bb 27       	eor	r27, r27
    6260:	82 0f       	add	r24, r18
    6262:	93 1f       	adc	r25, r19
    6264:	a4 1f       	adc	r26, r20
    6266:	b5 1f       	adc	r27, r21
    6268:	2d 8d       	ldd	r18, Y+29	; 0x1d
    626a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    626c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    626e:	58 a1       	ldd	r21, Y+32	; 0x20
    6270:	28 17       	cp	r18, r24
    6272:	39 07       	cpc	r19, r25
    6274:	4a 07       	cpc	r20, r26
    6276:	5b 07       	cpc	r21, r27
    6278:	18 f1       	brcs	.+70     	; 0x62c0 <__udivdi3+0xc44>
    627a:	82 17       	cp	r24, r18
    627c:	93 07       	cpc	r25, r19
    627e:	a4 07       	cpc	r26, r20
    6280:	b5 07       	cpc	r27, r21
    6282:	a1 f5       	brne	.+104    	; 0x62ec <__udivdi3+0xc70>
    6284:	65 01       	movw	r12, r10
    6286:	bb 24       	eor	r11, r11
    6288:	aa 24       	eor	r10, r10
    628a:	89 a1       	ldd	r24, Y+33	; 0x21
    628c:	9a a1       	ldd	r25, Y+34	; 0x22
    628e:	ab a1       	ldd	r26, Y+35	; 0x23
    6290:	bc a1       	ldd	r27, Y+36	; 0x24
    6292:	a0 70       	andi	r26, 0x00	; 0
    6294:	b0 70       	andi	r27, 0x00	; 0
    6296:	a8 0e       	add	r10, r24
    6298:	b9 1e       	adc	r11, r25
    629a:	ca 1e       	adc	r12, r26
    629c:	db 1e       	adc	r13, r27
    629e:	8d a1       	ldd	r24, Y+37	; 0x25
    62a0:	9e a1       	ldd	r25, Y+38	; 0x26
    62a2:	af a1       	ldd	r26, Y+39	; 0x27
    62a4:	b8 a5       	ldd	r27, Y+40	; 0x28
    62a6:	09 a4       	ldd	r0, Y+41	; 0x29
    62a8:	04 c0       	rjmp	.+8      	; 0x62b2 <__udivdi3+0xc36>
    62aa:	88 0f       	add	r24, r24
    62ac:	99 1f       	adc	r25, r25
    62ae:	aa 1f       	adc	r26, r26
    62b0:	bb 1f       	adc	r27, r27
    62b2:	0a 94       	dec	r0
    62b4:	d2 f7       	brpl	.-12     	; 0x62aa <__udivdi3+0xc2e>
    62b6:	8a 15       	cp	r24, r10
    62b8:	9b 05       	cpc	r25, r11
    62ba:	ac 05       	cpc	r26, r12
    62bc:	bd 05       	cpc	r27, r13
    62be:	b0 f4       	brcc	.+44     	; 0x62ec <__udivdi3+0xc70>
    62c0:	08 94       	sec
    62c2:	e1 08       	sbc	r14, r1
    62c4:	f1 08       	sbc	r15, r1
    62c6:	01 09       	sbc	r16, r1
    62c8:	11 09       	sbc	r17, r1
    62ca:	10 c0       	rjmp	.+32     	; 0x62ec <__udivdi3+0xc70>
    62cc:	aa 24       	eor	r10, r10
    62ce:	bb 24       	eor	r11, r11
    62d0:	65 01       	movw	r12, r10
    62d2:	ee 24       	eor	r14, r14
    62d4:	ff 24       	eor	r15, r15
    62d6:	87 01       	movw	r16, r14
    62d8:	0c c0       	rjmp	.+24     	; 0x62f2 <__udivdi3+0xc76>
    62da:	aa 24       	eor	r10, r10
    62dc:	bb 24       	eor	r11, r11
    62de:	65 01       	movw	r12, r10
    62e0:	81 e0       	ldi	r24, 0x01	; 1
    62e2:	e8 2e       	mov	r14, r24
    62e4:	f1 2c       	mov	r15, r1
    62e6:	01 2d       	mov	r16, r1
    62e8:	11 2d       	mov	r17, r1
    62ea:	03 c0       	rjmp	.+6      	; 0x62f2 <__udivdi3+0xc76>
    62ec:	aa 24       	eor	r10, r10
    62ee:	bb 24       	eor	r11, r11
    62f0:	65 01       	movw	r12, r10
    62f2:	fe 01       	movw	r30, r28
    62f4:	71 96       	adiw	r30, 0x11	; 17
    62f6:	88 e0       	ldi	r24, 0x08	; 8
    62f8:	df 01       	movw	r26, r30
    62fa:	1d 92       	st	X+, r1
    62fc:	8a 95       	dec	r24
    62fe:	e9 f7       	brne	.-6      	; 0x62fa <__udivdi3+0xc7e>
    6300:	e9 8a       	std	Y+17, r14	; 0x11
    6302:	fa 8a       	std	Y+18, r15	; 0x12
    6304:	0b 8b       	std	Y+19, r16	; 0x13
    6306:	1c 8b       	std	Y+20, r17	; 0x14
    6308:	ad 8a       	std	Y+21, r10	; 0x15
    630a:	be 8a       	std	Y+22, r11	; 0x16
    630c:	cf 8a       	std	Y+23, r12	; 0x17
    630e:	d8 8e       	std	Y+24, r13	; 0x18
    6310:	2e 2d       	mov	r18, r14
    6312:	3a 89       	ldd	r19, Y+18	; 0x12
    6314:	4b 89       	ldd	r20, Y+19	; 0x13
    6316:	5c 89       	ldd	r21, Y+20	; 0x14
    6318:	6a 2d       	mov	r22, r10
    631a:	7e 89       	ldd	r23, Y+22	; 0x16
    631c:	8f 89       	ldd	r24, Y+23	; 0x17
    631e:	98 8d       	ldd	r25, Y+24	; 0x18
    6320:	e8 96       	adiw	r28, 0x38	; 56
    6322:	e2 e1       	ldi	r30, 0x12	; 18
    6324:	0c 94 6e 33 	jmp	0x66dc	; 0x66dc <__epilogue_restores__>

00006328 <vfprintf>:
    6328:	6f 92       	push	r6
    632a:	7f 92       	push	r7
    632c:	8f 92       	push	r8
    632e:	9f 92       	push	r9
    6330:	af 92       	push	r10
    6332:	bf 92       	push	r11
    6334:	cf 92       	push	r12
    6336:	df 92       	push	r13
    6338:	ef 92       	push	r14
    633a:	ff 92       	push	r15
    633c:	0f 93       	push	r16
    633e:	1f 93       	push	r17
    6340:	df 93       	push	r29
    6342:	cf 93       	push	r28
    6344:	cd b7       	in	r28, 0x3d	; 61
    6346:	de b7       	in	r29, 0x3e	; 62
    6348:	2c 97       	sbiw	r28, 0x0c	; 12
    634a:	0f b6       	in	r0, 0x3f	; 63
    634c:	f8 94       	cli
    634e:	de bf       	out	0x3e, r29	; 62
    6350:	0f be       	out	0x3f, r0	; 63
    6352:	cd bf       	out	0x3d, r28	; 61
    6354:	6c 01       	movw	r12, r24
    6356:	3b 01       	movw	r6, r22
    6358:	8a 01       	movw	r16, r20
    635a:	fc 01       	movw	r30, r24
    635c:	17 82       	std	Z+7, r1	; 0x07
    635e:	16 82       	std	Z+6, r1	; 0x06
    6360:	83 81       	ldd	r24, Z+3	; 0x03
    6362:	81 fd       	sbrc	r24, 1
    6364:	03 c0       	rjmp	.+6      	; 0x636c <vfprintf+0x44>
    6366:	1e c1       	rjmp	.+572    	; 0x65a4 <vfprintf+0x27c>
    6368:	85 01       	movw	r16, r10
    636a:	04 c0       	rjmp	.+8      	; 0x6374 <vfprintf+0x4c>
    636c:	4e 01       	movw	r8, r28
    636e:	08 94       	sec
    6370:	81 1c       	adc	r8, r1
    6372:	91 1c       	adc	r9, r1
    6374:	f6 01       	movw	r30, r12
    6376:	e3 80       	ldd	r14, Z+3	; 0x03
    6378:	f3 01       	movw	r30, r6
    637a:	e3 fc       	sbrc	r14, 3
    637c:	85 91       	lpm	r24, Z+
    637e:	e3 fe       	sbrs	r14, 3
    6380:	81 91       	ld	r24, Z+
    6382:	3f 01       	movw	r6, r30
    6384:	88 23       	and	r24, r24
    6386:	09 f4       	brne	.+2      	; 0x638a <vfprintf+0x62>
    6388:	09 c1       	rjmp	.+530    	; 0x659c <vfprintf+0x274>
    638a:	85 32       	cpi	r24, 0x25	; 37
    638c:	51 f4       	brne	.+20     	; 0x63a2 <vfprintf+0x7a>
    638e:	e3 fc       	sbrc	r14, 3
    6390:	25 91       	lpm	r18, Z+
    6392:	e3 fe       	sbrs	r14, 3
    6394:	21 91       	ld	r18, Z+
    6396:	3f 01       	movw	r6, r30
    6398:	25 32       	cpi	r18, 0x25	; 37
    639a:	11 f0       	breq	.+4      	; 0x63a0 <vfprintf+0x78>
    639c:	ff 24       	eor	r15, r15
    639e:	23 c0       	rjmp	.+70     	; 0x63e6 <vfprintf+0xbe>
    63a0:	85 e2       	ldi	r24, 0x25	; 37
    63a2:	90 e0       	ldi	r25, 0x00	; 0
    63a4:	b6 01       	movw	r22, r12
    63a6:	0e 94 88 34 	call	0x6910	; 0x6910 <fputc>
    63aa:	58 01       	movw	r10, r16
    63ac:	dd cf       	rjmp	.-70     	; 0x6368 <vfprintf+0x40>
    63ae:	22 23       	and	r18, r18
    63b0:	09 f4       	brne	.+2      	; 0x63b4 <vfprintf+0x8c>
    63b2:	89 c0       	rjmp	.+274    	; 0x64c6 <vfprintf+0x19e>
    63b4:	89 ef       	ldi	r24, 0xF9	; 249
    63b6:	94 e0       	ldi	r25, 0x04	; 4
    63b8:	62 2f       	mov	r22, r18
    63ba:	70 e0       	ldi	r23, 0x00	; 0
    63bc:	2c 87       	std	Y+12, r18	; 0x0c
    63be:	0e 94 e7 33 	call	0x67ce	; 0x67ce <strchr_P>
    63c2:	2c 85       	ldd	r18, Y+12	; 0x0c
    63c4:	00 97       	sbiw	r24, 0x00	; 0
    63c6:	49 f4       	brne	.+18     	; 0x63da <vfprintf+0xb2>
    63c8:	23 32       	cpi	r18, 0x23	; 35
    63ca:	19 f4       	brne	.+6      	; 0x63d2 <vfprintf+0xaa>
    63cc:	f0 e1       	ldi	r31, 0x10	; 16
    63ce:	ff 2a       	or	r15, r31
    63d0:	04 c0       	rjmp	.+8      	; 0x63da <vfprintf+0xb2>
    63d2:	2c 36       	cpi	r18, 0x6C	; 108
    63d4:	69 f4       	brne	.+26     	; 0x63f0 <vfprintf+0xc8>
    63d6:	20 e8       	ldi	r18, 0x80	; 128
    63d8:	f2 2a       	or	r15, r18
    63da:	f3 01       	movw	r30, r6
    63dc:	e3 fc       	sbrc	r14, 3
    63de:	25 91       	lpm	r18, Z+
    63e0:	e3 fe       	sbrs	r14, 3
    63e2:	21 91       	ld	r18, Z+
    63e4:	3f 01       	movw	r6, r30
    63e6:	f7 fe       	sbrs	r15, 7
    63e8:	e2 cf       	rjmp	.-60     	; 0x63ae <vfprintf+0x86>
    63ea:	22 23       	and	r18, r18
    63ec:	09 f4       	brne	.+2      	; 0x63f0 <vfprintf+0xc8>
    63ee:	3f c0       	rjmp	.+126    	; 0x646e <vfprintf+0x146>
    63f0:	82 ef       	ldi	r24, 0xF2	; 242
    63f2:	94 e0       	ldi	r25, 0x04	; 4
    63f4:	62 2f       	mov	r22, r18
    63f6:	70 e0       	ldi	r23, 0x00	; 0
    63f8:	2c 87       	std	Y+12, r18	; 0x0c
    63fa:	0e 94 e7 33 	call	0x67ce	; 0x67ce <strchr_P>
    63fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    6400:	00 97       	sbiw	r24, 0x00	; 0
    6402:	41 f0       	breq	.+16     	; 0x6414 <vfprintf+0xec>
    6404:	64 e0       	ldi	r22, 0x04	; 4
    6406:	a6 2e       	mov	r10, r22
    6408:	b1 2c       	mov	r11, r1
    640a:	a0 0e       	add	r10, r16
    640c:	b1 1e       	adc	r11, r17
    640e:	8f e3       	ldi	r24, 0x3F	; 63
    6410:	90 e0       	ldi	r25, 0x00	; 0
    6412:	0f c0       	rjmp	.+30     	; 0x6432 <vfprintf+0x10a>
    6414:	23 36       	cpi	r18, 0x63	; 99
    6416:	29 f0       	breq	.+10     	; 0x6422 <vfprintf+0xfa>
    6418:	23 37       	cpi	r18, 0x73	; 115
    641a:	89 f0       	breq	.+34     	; 0x643e <vfprintf+0x116>
    641c:	23 35       	cpi	r18, 0x53	; 83
    641e:	29 f5       	brne	.+74     	; 0x646a <vfprintf+0x142>
    6420:	0c c0       	rjmp	.+24     	; 0x643a <vfprintf+0x112>
    6422:	52 e0       	ldi	r21, 0x02	; 2
    6424:	a5 2e       	mov	r10, r21
    6426:	b1 2c       	mov	r11, r1
    6428:	a0 0e       	add	r10, r16
    642a:	b1 1e       	adc	r11, r17
    642c:	f8 01       	movw	r30, r16
    642e:	80 81       	ld	r24, Z
    6430:	91 81       	ldd	r25, Z+1	; 0x01
    6432:	b6 01       	movw	r22, r12
    6434:	0e 94 88 34 	call	0x6910	; 0x6910 <fputc>
    6438:	97 cf       	rjmp	.-210    	; 0x6368 <vfprintf+0x40>
    643a:	f1 e0       	ldi	r31, 0x01	; 1
    643c:	ff 2a       	or	r15, r31
    643e:	42 e0       	ldi	r20, 0x02	; 2
    6440:	a4 2e       	mov	r10, r20
    6442:	b1 2c       	mov	r11, r1
    6444:	a0 0e       	add	r10, r16
    6446:	b1 1e       	adc	r11, r17
    6448:	f8 01       	movw	r30, r16
    644a:	00 81       	ld	r16, Z
    644c:	11 81       	ldd	r17, Z+1	; 0x01
    644e:	04 c0       	rjmp	.+8      	; 0x6458 <vfprintf+0x130>
    6450:	90 e0       	ldi	r25, 0x00	; 0
    6452:	b6 01       	movw	r22, r12
    6454:	0e 94 88 34 	call	0x6910	; 0x6910 <fputc>
    6458:	f8 01       	movw	r30, r16
    645a:	f0 fc       	sbrc	r15, 0
    645c:	85 91       	lpm	r24, Z+
    645e:	f0 fe       	sbrs	r15, 0
    6460:	81 91       	ld	r24, Z+
    6462:	8f 01       	movw	r16, r30
    6464:	88 23       	and	r24, r24
    6466:	a1 f7       	brne	.-24     	; 0x6450 <vfprintf+0x128>
    6468:	7f cf       	rjmp	.-258    	; 0x6368 <vfprintf+0x40>
    646a:	24 36       	cpi	r18, 0x64	; 100
    646c:	11 f0       	breq	.+4      	; 0x6472 <vfprintf+0x14a>
    646e:	29 36       	cpi	r18, 0x69	; 105
    6470:	51 f5       	brne	.+84     	; 0x64c6 <vfprintf+0x19e>
    6472:	f7 fe       	sbrs	r15, 7
    6474:	0b c0       	rjmp	.+22     	; 0x648c <vfprintf+0x164>
    6476:	34 e0       	ldi	r19, 0x04	; 4
    6478:	a3 2e       	mov	r10, r19
    647a:	b1 2c       	mov	r11, r1
    647c:	a0 0e       	add	r10, r16
    647e:	b1 1e       	adc	r11, r17
    6480:	f8 01       	movw	r30, r16
    6482:	60 81       	ld	r22, Z
    6484:	71 81       	ldd	r23, Z+1	; 0x01
    6486:	82 81       	ldd	r24, Z+2	; 0x02
    6488:	93 81       	ldd	r25, Z+3	; 0x03
    648a:	0c c0       	rjmp	.+24     	; 0x64a4 <vfprintf+0x17c>
    648c:	22 e0       	ldi	r18, 0x02	; 2
    648e:	a2 2e       	mov	r10, r18
    6490:	b1 2c       	mov	r11, r1
    6492:	a0 0e       	add	r10, r16
    6494:	b1 1e       	adc	r11, r17
    6496:	f8 01       	movw	r30, r16
    6498:	60 81       	ld	r22, Z
    649a:	71 81       	ldd	r23, Z+1	; 0x01
    649c:	88 27       	eor	r24, r24
    649e:	77 fd       	sbrc	r23, 7
    64a0:	80 95       	com	r24
    64a2:	98 2f       	mov	r25, r24
    64a4:	ff ee       	ldi	r31, 0xEF	; 239
    64a6:	ff 22       	and	r15, r31
    64a8:	97 ff       	sbrs	r25, 7
    64aa:	09 c0       	rjmp	.+18     	; 0x64be <vfprintf+0x196>
    64ac:	90 95       	com	r25
    64ae:	80 95       	com	r24
    64b0:	70 95       	com	r23
    64b2:	61 95       	neg	r22
    64b4:	7f 4f       	sbci	r23, 0xFF	; 255
    64b6:	8f 4f       	sbci	r24, 0xFF	; 255
    64b8:	9f 4f       	sbci	r25, 0xFF	; 255
    64ba:	20 e4       	ldi	r18, 0x40	; 64
    64bc:	f2 2a       	or	r15, r18
    64be:	a4 01       	movw	r20, r8
    64c0:	2a e0       	ldi	r18, 0x0A	; 10
    64c2:	30 e0       	ldi	r19, 0x00	; 0
    64c4:	3b c0       	rjmp	.+118    	; 0x653c <vfprintf+0x214>
    64c6:	20 37       	cpi	r18, 0x70	; 112
    64c8:	99 f0       	breq	.+38     	; 0x64f0 <vfprintf+0x1c8>
    64ca:	21 37       	cpi	r18, 0x71	; 113
    64cc:	30 f4       	brcc	.+12     	; 0x64da <vfprintf+0x1b2>
    64ce:	28 35       	cpi	r18, 0x58	; 88
    64d0:	b1 f0       	breq	.+44     	; 0x64fe <vfprintf+0x1d6>
    64d2:	2f 36       	cpi	r18, 0x6F	; 111
    64d4:	09 f0       	breq	.+2      	; 0x64d8 <vfprintf+0x1b0>
    64d6:	62 c0       	rjmp	.+196    	; 0x659c <vfprintf+0x274>
    64d8:	17 c0       	rjmp	.+46     	; 0x6508 <vfprintf+0x1e0>
    64da:	25 37       	cpi	r18, 0x75	; 117
    64dc:	21 f0       	breq	.+8      	; 0x64e6 <vfprintf+0x1be>
    64de:	28 37       	cpi	r18, 0x78	; 120
    64e0:	09 f0       	breq	.+2      	; 0x64e4 <vfprintf+0x1bc>
    64e2:	5c c0       	rjmp	.+184    	; 0x659c <vfprintf+0x274>
    64e4:	07 c0       	rjmp	.+14     	; 0x64f4 <vfprintf+0x1cc>
    64e6:	8f ee       	ldi	r24, 0xEF	; 239
    64e8:	f8 22       	and	r15, r24
    64ea:	2a e0       	ldi	r18, 0x0A	; 10
    64ec:	30 e0       	ldi	r19, 0x00	; 0
    64ee:	0e c0       	rjmp	.+28     	; 0x650c <vfprintf+0x1e4>
    64f0:	e0 e1       	ldi	r30, 0x10	; 16
    64f2:	fe 2a       	or	r15, r30
    64f4:	f4 e2       	ldi	r31, 0x24	; 36
    64f6:	ff 2a       	or	r15, r31
    64f8:	20 e1       	ldi	r18, 0x10	; 16
    64fa:	30 e0       	ldi	r19, 0x00	; 0
    64fc:	07 c0       	rjmp	.+14     	; 0x650c <vfprintf+0x1e4>
    64fe:	24 e0       	ldi	r18, 0x04	; 4
    6500:	f2 2a       	or	r15, r18
    6502:	20 e1       	ldi	r18, 0x10	; 16
    6504:	32 e0       	ldi	r19, 0x02	; 2
    6506:	02 c0       	rjmp	.+4      	; 0x650c <vfprintf+0x1e4>
    6508:	28 e0       	ldi	r18, 0x08	; 8
    650a:	30 e0       	ldi	r19, 0x00	; 0
    650c:	f7 fe       	sbrs	r15, 7
    650e:	0b c0       	rjmp	.+22     	; 0x6526 <vfprintf+0x1fe>
    6510:	94 e0       	ldi	r25, 0x04	; 4
    6512:	a9 2e       	mov	r10, r25
    6514:	b1 2c       	mov	r11, r1
    6516:	a0 0e       	add	r10, r16
    6518:	b1 1e       	adc	r11, r17
    651a:	f8 01       	movw	r30, r16
    651c:	60 81       	ld	r22, Z
    651e:	71 81       	ldd	r23, Z+1	; 0x01
    6520:	82 81       	ldd	r24, Z+2	; 0x02
    6522:	93 81       	ldd	r25, Z+3	; 0x03
    6524:	0a c0       	rjmp	.+20     	; 0x653a <vfprintf+0x212>
    6526:	82 e0       	ldi	r24, 0x02	; 2
    6528:	a8 2e       	mov	r10, r24
    652a:	b1 2c       	mov	r11, r1
    652c:	a0 0e       	add	r10, r16
    652e:	b1 1e       	adc	r11, r17
    6530:	f8 01       	movw	r30, r16
    6532:	60 81       	ld	r22, Z
    6534:	71 81       	ldd	r23, Z+1	; 0x01
    6536:	80 e0       	ldi	r24, 0x00	; 0
    6538:	90 e0       	ldi	r25, 0x00	; 0
    653a:	a4 01       	movw	r20, r8
    653c:	0e 94 34 35 	call	0x6a68	; 0x6a68 <__ultoa_invert>
    6540:	e8 2e       	mov	r14, r24
    6542:	e8 18       	sub	r14, r8
    6544:	0f 2d       	mov	r16, r15
    6546:	10 e0       	ldi	r17, 0x00	; 0
    6548:	f6 fe       	sbrs	r15, 6
    654a:	05 c0       	rjmp	.+10     	; 0x6556 <vfprintf+0x22e>
    654c:	8d e2       	ldi	r24, 0x2D	; 45
    654e:	90 e0       	ldi	r25, 0x00	; 0
    6550:	b6 01       	movw	r22, r12
    6552:	0e 94 88 34 	call	0x6910	; 0x6910 <fputc>
    6556:	04 ff       	sbrs	r16, 4
    6558:	15 c0       	rjmp	.+42     	; 0x6584 <vfprintf+0x25c>
    655a:	fe 01       	movw	r30, r28
    655c:	ee 0d       	add	r30, r14
    655e:	f1 1d       	adc	r31, r1
    6560:	80 81       	ld	r24, Z
    6562:	80 33       	cpi	r24, 0x30	; 48
    6564:	79 f0       	breq	.+30     	; 0x6584 <vfprintf+0x25c>
    6566:	80 e3       	ldi	r24, 0x30	; 48
    6568:	90 e0       	ldi	r25, 0x00	; 0
    656a:	b6 01       	movw	r22, r12
    656c:	0e 94 88 34 	call	0x6910	; 0x6910 <fputc>
    6570:	02 ff       	sbrs	r16, 2
    6572:	08 c0       	rjmp	.+16     	; 0x6584 <vfprintf+0x25c>
    6574:	c8 01       	movw	r24, r16
    6576:	80 72       	andi	r24, 0x20	; 32
    6578:	90 70       	andi	r25, 0x00	; 0
    657a:	88 5a       	subi	r24, 0xA8	; 168
    657c:	9f 4f       	sbci	r25, 0xFF	; 255
    657e:	b6 01       	movw	r22, r12
    6580:	0e 94 88 34 	call	0x6910	; 0x6910 <fputc>
    6584:	ea 94       	dec	r14
    6586:	f4 01       	movw	r30, r8
    6588:	ee 0d       	add	r30, r14
    658a:	f1 1d       	adc	r31, r1
    658c:	80 81       	ld	r24, Z
    658e:	90 e0       	ldi	r25, 0x00	; 0
    6590:	b6 01       	movw	r22, r12
    6592:	0e 94 88 34 	call	0x6910	; 0x6910 <fputc>
    6596:	ee 20       	and	r14, r14
    6598:	a9 f7       	brne	.-22     	; 0x6584 <vfprintf+0x25c>
    659a:	e6 ce       	rjmp	.-564    	; 0x6368 <vfprintf+0x40>
    659c:	f6 01       	movw	r30, r12
    659e:	26 81       	ldd	r18, Z+6	; 0x06
    65a0:	37 81       	ldd	r19, Z+7	; 0x07
    65a2:	02 c0       	rjmp	.+4      	; 0x65a8 <vfprintf+0x280>
    65a4:	2f ef       	ldi	r18, 0xFF	; 255
    65a6:	3f ef       	ldi	r19, 0xFF	; 255
    65a8:	c9 01       	movw	r24, r18
    65aa:	2c 96       	adiw	r28, 0x0c	; 12
    65ac:	0f b6       	in	r0, 0x3f	; 63
    65ae:	f8 94       	cli
    65b0:	de bf       	out	0x3e, r29	; 62
    65b2:	0f be       	out	0x3f, r0	; 63
    65b4:	cd bf       	out	0x3d, r28	; 61
    65b6:	cf 91       	pop	r28
    65b8:	df 91       	pop	r29
    65ba:	1f 91       	pop	r17
    65bc:	0f 91       	pop	r16
    65be:	ff 90       	pop	r15
    65c0:	ef 90       	pop	r14
    65c2:	df 90       	pop	r13
    65c4:	cf 90       	pop	r12
    65c6:	bf 90       	pop	r11
    65c8:	af 90       	pop	r10
    65ca:	9f 90       	pop	r9
    65cc:	8f 90       	pop	r8
    65ce:	7f 90       	pop	r7
    65d0:	6f 90       	pop	r6
    65d2:	08 95       	ret

000065d4 <__mulsi3>:
    65d4:	62 9f       	mul	r22, r18
    65d6:	d0 01       	movw	r26, r0
    65d8:	73 9f       	mul	r23, r19
    65da:	f0 01       	movw	r30, r0
    65dc:	82 9f       	mul	r24, r18
    65de:	e0 0d       	add	r30, r0
    65e0:	f1 1d       	adc	r31, r1
    65e2:	64 9f       	mul	r22, r20
    65e4:	e0 0d       	add	r30, r0
    65e6:	f1 1d       	adc	r31, r1
    65e8:	92 9f       	mul	r25, r18
    65ea:	f0 0d       	add	r31, r0
    65ec:	83 9f       	mul	r24, r19
    65ee:	f0 0d       	add	r31, r0
    65f0:	74 9f       	mul	r23, r20
    65f2:	f0 0d       	add	r31, r0
    65f4:	65 9f       	mul	r22, r21
    65f6:	f0 0d       	add	r31, r0
    65f8:	99 27       	eor	r25, r25
    65fa:	72 9f       	mul	r23, r18
    65fc:	b0 0d       	add	r27, r0
    65fe:	e1 1d       	adc	r30, r1
    6600:	f9 1f       	adc	r31, r25
    6602:	63 9f       	mul	r22, r19
    6604:	b0 0d       	add	r27, r0
    6606:	e1 1d       	adc	r30, r1
    6608:	f9 1f       	adc	r31, r25
    660a:	bd 01       	movw	r22, r26
    660c:	cf 01       	movw	r24, r30
    660e:	11 24       	eor	r1, r1
    6610:	08 95       	ret

00006612 <__udivmodhi4>:
    6612:	aa 1b       	sub	r26, r26
    6614:	bb 1b       	sub	r27, r27
    6616:	51 e1       	ldi	r21, 0x11	; 17
    6618:	07 c0       	rjmp	.+14     	; 0x6628 <__udivmodhi4_ep>

0000661a <__udivmodhi4_loop>:
    661a:	aa 1f       	adc	r26, r26
    661c:	bb 1f       	adc	r27, r27
    661e:	a6 17       	cp	r26, r22
    6620:	b7 07       	cpc	r27, r23
    6622:	10 f0       	brcs	.+4      	; 0x6628 <__udivmodhi4_ep>
    6624:	a6 1b       	sub	r26, r22
    6626:	b7 0b       	sbc	r27, r23

00006628 <__udivmodhi4_ep>:
    6628:	88 1f       	adc	r24, r24
    662a:	99 1f       	adc	r25, r25
    662c:	5a 95       	dec	r21
    662e:	a9 f7       	brne	.-22     	; 0x661a <__udivmodhi4_loop>
    6630:	80 95       	com	r24
    6632:	90 95       	com	r25
    6634:	bc 01       	movw	r22, r24
    6636:	cd 01       	movw	r24, r26
    6638:	08 95       	ret

0000663a <__divmodhi4>:
    663a:	97 fb       	bst	r25, 7
    663c:	09 2e       	mov	r0, r25
    663e:	07 26       	eor	r0, r23
    6640:	0a d0       	rcall	.+20     	; 0x6656 <__divmodhi4_neg1>
    6642:	77 fd       	sbrc	r23, 7
    6644:	04 d0       	rcall	.+8      	; 0x664e <__divmodhi4_neg2>
    6646:	e5 df       	rcall	.-54     	; 0x6612 <__udivmodhi4>
    6648:	06 d0       	rcall	.+12     	; 0x6656 <__divmodhi4_neg1>
    664a:	00 20       	and	r0, r0
    664c:	1a f4       	brpl	.+6      	; 0x6654 <__divmodhi4_exit>

0000664e <__divmodhi4_neg2>:
    664e:	70 95       	com	r23
    6650:	61 95       	neg	r22
    6652:	7f 4f       	sbci	r23, 0xFF	; 255

00006654 <__divmodhi4_exit>:
    6654:	08 95       	ret

00006656 <__divmodhi4_neg1>:
    6656:	f6 f7       	brtc	.-4      	; 0x6654 <__divmodhi4_exit>
    6658:	90 95       	com	r25
    665a:	81 95       	neg	r24
    665c:	9f 4f       	sbci	r25, 0xFF	; 255
    665e:	08 95       	ret

00006660 <__udivmodsi4>:
    6660:	a1 e2       	ldi	r26, 0x21	; 33
    6662:	1a 2e       	mov	r1, r26
    6664:	aa 1b       	sub	r26, r26
    6666:	bb 1b       	sub	r27, r27
    6668:	fd 01       	movw	r30, r26
    666a:	0d c0       	rjmp	.+26     	; 0x6686 <__udivmodsi4_ep>

0000666c <__udivmodsi4_loop>:
    666c:	aa 1f       	adc	r26, r26
    666e:	bb 1f       	adc	r27, r27
    6670:	ee 1f       	adc	r30, r30
    6672:	ff 1f       	adc	r31, r31
    6674:	a2 17       	cp	r26, r18
    6676:	b3 07       	cpc	r27, r19
    6678:	e4 07       	cpc	r30, r20
    667a:	f5 07       	cpc	r31, r21
    667c:	20 f0       	brcs	.+8      	; 0x6686 <__udivmodsi4_ep>
    667e:	a2 1b       	sub	r26, r18
    6680:	b3 0b       	sbc	r27, r19
    6682:	e4 0b       	sbc	r30, r20
    6684:	f5 0b       	sbc	r31, r21

00006686 <__udivmodsi4_ep>:
    6686:	66 1f       	adc	r22, r22
    6688:	77 1f       	adc	r23, r23
    668a:	88 1f       	adc	r24, r24
    668c:	99 1f       	adc	r25, r25
    668e:	1a 94       	dec	r1
    6690:	69 f7       	brne	.-38     	; 0x666c <__udivmodsi4_loop>
    6692:	60 95       	com	r22
    6694:	70 95       	com	r23
    6696:	80 95       	com	r24
    6698:	90 95       	com	r25
    669a:	9b 01       	movw	r18, r22
    669c:	ac 01       	movw	r20, r24
    669e:	bd 01       	movw	r22, r26
    66a0:	cf 01       	movw	r24, r30
    66a2:	08 95       	ret

000066a4 <__prologue_saves__>:
    66a4:	2f 92       	push	r2
    66a6:	3f 92       	push	r3
    66a8:	4f 92       	push	r4
    66aa:	5f 92       	push	r5
    66ac:	6f 92       	push	r6
    66ae:	7f 92       	push	r7
    66b0:	8f 92       	push	r8
    66b2:	9f 92       	push	r9
    66b4:	af 92       	push	r10
    66b6:	bf 92       	push	r11
    66b8:	cf 92       	push	r12
    66ba:	df 92       	push	r13
    66bc:	ef 92       	push	r14
    66be:	ff 92       	push	r15
    66c0:	0f 93       	push	r16
    66c2:	1f 93       	push	r17
    66c4:	cf 93       	push	r28
    66c6:	df 93       	push	r29
    66c8:	cd b7       	in	r28, 0x3d	; 61
    66ca:	de b7       	in	r29, 0x3e	; 62
    66cc:	ca 1b       	sub	r28, r26
    66ce:	db 0b       	sbc	r29, r27
    66d0:	0f b6       	in	r0, 0x3f	; 63
    66d2:	f8 94       	cli
    66d4:	de bf       	out	0x3e, r29	; 62
    66d6:	0f be       	out	0x3f, r0	; 63
    66d8:	cd bf       	out	0x3d, r28	; 61
    66da:	09 94       	ijmp

000066dc <__epilogue_restores__>:
    66dc:	2a 88       	ldd	r2, Y+18	; 0x12
    66de:	39 88       	ldd	r3, Y+17	; 0x11
    66e0:	48 88       	ldd	r4, Y+16	; 0x10
    66e2:	5f 84       	ldd	r5, Y+15	; 0x0f
    66e4:	6e 84       	ldd	r6, Y+14	; 0x0e
    66e6:	7d 84       	ldd	r7, Y+13	; 0x0d
    66e8:	8c 84       	ldd	r8, Y+12	; 0x0c
    66ea:	9b 84       	ldd	r9, Y+11	; 0x0b
    66ec:	aa 84       	ldd	r10, Y+10	; 0x0a
    66ee:	b9 84       	ldd	r11, Y+9	; 0x09
    66f0:	c8 84       	ldd	r12, Y+8	; 0x08
    66f2:	df 80       	ldd	r13, Y+7	; 0x07
    66f4:	ee 80       	ldd	r14, Y+6	; 0x06
    66f6:	fd 80       	ldd	r15, Y+5	; 0x05
    66f8:	0c 81       	ldd	r16, Y+4	; 0x04
    66fa:	1b 81       	ldd	r17, Y+3	; 0x03
    66fc:	aa 81       	ldd	r26, Y+2	; 0x02
    66fe:	b9 81       	ldd	r27, Y+1	; 0x01
    6700:	ce 0f       	add	r28, r30
    6702:	d1 1d       	adc	r29, r1
    6704:	0f b6       	in	r0, 0x3f	; 63
    6706:	f8 94       	cli
    6708:	de bf       	out	0x3e, r29	; 62
    670a:	0f be       	out	0x3f, r0	; 63
    670c:	cd bf       	out	0x3d, r28	; 61
    670e:	ed 01       	movw	r28, r26
    6710:	08 95       	ret

00006712 <do_rand>:
    6712:	af 92       	push	r10
    6714:	bf 92       	push	r11
    6716:	cf 92       	push	r12
    6718:	df 92       	push	r13
    671a:	ef 92       	push	r14
    671c:	ff 92       	push	r15
    671e:	0f 93       	push	r16
    6720:	1f 93       	push	r17
    6722:	cf 93       	push	r28
    6724:	df 93       	push	r29
    6726:	ec 01       	movw	r28, r24
    6728:	68 81       	ld	r22, Y
    672a:	79 81       	ldd	r23, Y+1	; 0x01
    672c:	8a 81       	ldd	r24, Y+2	; 0x02
    672e:	9b 81       	ldd	r25, Y+3	; 0x03
    6730:	61 15       	cp	r22, r1
    6732:	71 05       	cpc	r23, r1
    6734:	81 05       	cpc	r24, r1
    6736:	91 05       	cpc	r25, r1
    6738:	21 f4       	brne	.+8      	; 0x6742 <do_rand+0x30>
    673a:	64 e2       	ldi	r22, 0x24	; 36
    673c:	79 ed       	ldi	r23, 0xD9	; 217
    673e:	8b e5       	ldi	r24, 0x5B	; 91
    6740:	97 e0       	ldi	r25, 0x07	; 7
    6742:	2d e1       	ldi	r18, 0x1D	; 29
    6744:	33 ef       	ldi	r19, 0xF3	; 243
    6746:	41 e0       	ldi	r20, 0x01	; 1
    6748:	50 e0       	ldi	r21, 0x00	; 0
    674a:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <__divmodsi4>
    674e:	79 01       	movw	r14, r18
    6750:	8a 01       	movw	r16, r20
    6752:	27 ea       	ldi	r18, 0xA7	; 167
    6754:	31 e4       	ldi	r19, 0x41	; 65
    6756:	40 e0       	ldi	r20, 0x00	; 0
    6758:	50 e0       	ldi	r21, 0x00	; 0
    675a:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <__mulsi3>
    675e:	5b 01       	movw	r10, r22
    6760:	6c 01       	movw	r12, r24
    6762:	c8 01       	movw	r24, r16
    6764:	b7 01       	movw	r22, r14
    6766:	2c ee       	ldi	r18, 0xEC	; 236
    6768:	34 ef       	ldi	r19, 0xF4	; 244
    676a:	4f ef       	ldi	r20, 0xFF	; 255
    676c:	5f ef       	ldi	r21, 0xFF	; 255
    676e:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <__mulsi3>
    6772:	6a 0d       	add	r22, r10
    6774:	7b 1d       	adc	r23, r11
    6776:	8c 1d       	adc	r24, r12
    6778:	9d 1d       	adc	r25, r13
    677a:	97 ff       	sbrs	r25, 7
    677c:	04 c0       	rjmp	.+8      	; 0x6786 <do_rand+0x74>
    677e:	61 50       	subi	r22, 0x01	; 1
    6780:	70 40       	sbci	r23, 0x00	; 0
    6782:	80 40       	sbci	r24, 0x00	; 0
    6784:	90 48       	sbci	r25, 0x80	; 128
    6786:	68 83       	st	Y, r22
    6788:	79 83       	std	Y+1, r23	; 0x01
    678a:	8a 83       	std	Y+2, r24	; 0x02
    678c:	9b 83       	std	Y+3, r25	; 0x03
    678e:	7f 77       	andi	r23, 0x7F	; 127
    6790:	cb 01       	movw	r24, r22
    6792:	df 91       	pop	r29
    6794:	cf 91       	pop	r28
    6796:	1f 91       	pop	r17
    6798:	0f 91       	pop	r16
    679a:	ff 90       	pop	r15
    679c:	ef 90       	pop	r14
    679e:	df 90       	pop	r13
    67a0:	cf 90       	pop	r12
    67a2:	bf 90       	pop	r11
    67a4:	af 90       	pop	r10
    67a6:	08 95       	ret

000067a8 <rand_r>:
    67a8:	0e 94 89 33 	call	0x6712	; 0x6712 <do_rand>
    67ac:	08 95       	ret

000067ae <rand>:
    67ae:	8d e8       	ldi	r24, 0x8D	; 141
    67b0:	94 e0       	ldi	r25, 0x04	; 4
    67b2:	0e 94 89 33 	call	0x6712	; 0x6712 <do_rand>
    67b6:	08 95       	ret

000067b8 <srand>:
    67b8:	a0 e0       	ldi	r26, 0x00	; 0
    67ba:	b0 e0       	ldi	r27, 0x00	; 0
    67bc:	80 93 8d 04 	sts	0x048D, r24
    67c0:	90 93 8e 04 	sts	0x048E, r25
    67c4:	a0 93 8f 04 	sts	0x048F, r26
    67c8:	b0 93 90 04 	sts	0x0490, r27
    67cc:	08 95       	ret

000067ce <strchr_P>:
    67ce:	fc 01       	movw	r30, r24
    67d0:	05 90       	lpm	r0, Z+
    67d2:	06 16       	cp	r0, r22
    67d4:	21 f0       	breq	.+8      	; 0x67de <strchr_P+0x10>
    67d6:	00 20       	and	r0, r0
    67d8:	d9 f7       	brne	.-10     	; 0x67d0 <strchr_P+0x2>
    67da:	c0 01       	movw	r24, r0
    67dc:	08 95       	ret
    67de:	31 97       	sbiw	r30, 0x01	; 1
    67e0:	cf 01       	movw	r24, r30
    67e2:	08 95       	ret

000067e4 <memcpy>:
    67e4:	fb 01       	movw	r30, r22
    67e6:	dc 01       	movw	r26, r24
    67e8:	02 c0       	rjmp	.+4      	; 0x67ee <memcpy+0xa>
    67ea:	01 90       	ld	r0, Z+
    67ec:	0d 92       	st	X+, r0
    67ee:	41 50       	subi	r20, 0x01	; 1
    67f0:	50 40       	sbci	r21, 0x00	; 0
    67f2:	d8 f7       	brcc	.-10     	; 0x67ea <memcpy+0x6>
    67f4:	08 95       	ret

000067f6 <fdevopen>:
    67f6:	0f 93       	push	r16
    67f8:	1f 93       	push	r17
    67fa:	cf 93       	push	r28
    67fc:	df 93       	push	r29
    67fe:	8c 01       	movw	r16, r24
    6800:	eb 01       	movw	r28, r22
    6802:	00 97       	sbiw	r24, 0x00	; 0
    6804:	11 f4       	brne	.+4      	; 0x680a <fdevopen+0x14>
    6806:	20 97       	sbiw	r28, 0x00	; 0
    6808:	c9 f1       	breq	.+114    	; 0x687c <fdevopen+0x86>
    680a:	81 e0       	ldi	r24, 0x01	; 1
    680c:	90 e0       	ldi	r25, 0x00	; 0
    680e:	6e e0       	ldi	r22, 0x0E	; 14
    6810:	70 e0       	ldi	r23, 0x00	; 0
    6812:	0e 94 a8 35 	call	0x6b50	; 0x6b50 <calloc>
    6816:	fc 01       	movw	r30, r24
    6818:	9c 01       	movw	r18, r24
    681a:	00 97       	sbiw	r24, 0x00	; 0
    681c:	89 f1       	breq	.+98     	; 0x6880 <fdevopen+0x8a>
    681e:	80 e8       	ldi	r24, 0x80	; 128
    6820:	83 83       	std	Z+3, r24	; 0x03
    6822:	20 97       	sbiw	r28, 0x00	; 0
    6824:	71 f0       	breq	.+28     	; 0x6842 <fdevopen+0x4c>
    6826:	d3 87       	std	Z+11, r29	; 0x0b
    6828:	c2 87       	std	Z+10, r28	; 0x0a
    682a:	81 e8       	ldi	r24, 0x81	; 129
    682c:	83 83       	std	Z+3, r24	; 0x03
    682e:	80 91 c4 0d 	lds	r24, 0x0DC4
    6832:	90 91 c5 0d 	lds	r25, 0x0DC5
    6836:	00 97       	sbiw	r24, 0x00	; 0
    6838:	21 f4       	brne	.+8      	; 0x6842 <fdevopen+0x4c>
    683a:	f0 93 c5 0d 	sts	0x0DC5, r31
    683e:	e0 93 c4 0d 	sts	0x0DC4, r30
    6842:	01 15       	cp	r16, r1
    6844:	11 05       	cpc	r17, r1
    6846:	e1 f0       	breq	.+56     	; 0x6880 <fdevopen+0x8a>
    6848:	11 87       	std	Z+9, r17	; 0x09
    684a:	00 87       	std	Z+8, r16	; 0x08
    684c:	83 81       	ldd	r24, Z+3	; 0x03
    684e:	82 60       	ori	r24, 0x02	; 2
    6850:	83 83       	std	Z+3, r24	; 0x03
    6852:	80 91 c6 0d 	lds	r24, 0x0DC6
    6856:	90 91 c7 0d 	lds	r25, 0x0DC7
    685a:	00 97       	sbiw	r24, 0x00	; 0
    685c:	89 f4       	brne	.+34     	; 0x6880 <fdevopen+0x8a>
    685e:	f0 93 c7 0d 	sts	0x0DC7, r31
    6862:	e0 93 c6 0d 	sts	0x0DC6, r30
    6866:	80 91 c8 0d 	lds	r24, 0x0DC8
    686a:	90 91 c9 0d 	lds	r25, 0x0DC9
    686e:	00 97       	sbiw	r24, 0x00	; 0
    6870:	39 f4       	brne	.+14     	; 0x6880 <fdevopen+0x8a>
    6872:	f0 93 c9 0d 	sts	0x0DC9, r31
    6876:	e0 93 c8 0d 	sts	0x0DC8, r30
    687a:	02 c0       	rjmp	.+4      	; 0x6880 <fdevopen+0x8a>
    687c:	20 e0       	ldi	r18, 0x00	; 0
    687e:	30 e0       	ldi	r19, 0x00	; 0
    6880:	c9 01       	movw	r24, r18
    6882:	df 91       	pop	r29
    6884:	cf 91       	pop	r28
    6886:	1f 91       	pop	r17
    6888:	0f 91       	pop	r16
    688a:	08 95       	ret

0000688c <fgetc>:
    688c:	cf 93       	push	r28
    688e:	df 93       	push	r29
    6890:	ec 01       	movw	r28, r24
    6892:	3b 81       	ldd	r19, Y+3	; 0x03
    6894:	30 ff       	sbrs	r19, 0
    6896:	36 c0       	rjmp	.+108    	; 0x6904 <fgetc+0x78>
    6898:	36 ff       	sbrs	r19, 6
    689a:	09 c0       	rjmp	.+18     	; 0x68ae <fgetc+0x22>
    689c:	3f 7b       	andi	r19, 0xBF	; 191
    689e:	3b 83       	std	Y+3, r19	; 0x03
    68a0:	8e 81       	ldd	r24, Y+6	; 0x06
    68a2:	9f 81       	ldd	r25, Y+7	; 0x07
    68a4:	01 96       	adiw	r24, 0x01	; 1
    68a6:	9f 83       	std	Y+7, r25	; 0x07
    68a8:	8e 83       	std	Y+6, r24	; 0x06
    68aa:	2a 81       	ldd	r18, Y+2	; 0x02
    68ac:	29 c0       	rjmp	.+82     	; 0x6900 <fgetc+0x74>
    68ae:	32 ff       	sbrs	r19, 2
    68b0:	0f c0       	rjmp	.+30     	; 0x68d0 <fgetc+0x44>
    68b2:	e8 81       	ld	r30, Y
    68b4:	f9 81       	ldd	r31, Y+1	; 0x01
    68b6:	80 81       	ld	r24, Z
    68b8:	99 27       	eor	r25, r25
    68ba:	87 fd       	sbrc	r24, 7
    68bc:	90 95       	com	r25
    68be:	00 97       	sbiw	r24, 0x00	; 0
    68c0:	19 f4       	brne	.+6      	; 0x68c8 <fgetc+0x3c>
    68c2:	30 62       	ori	r19, 0x20	; 32
    68c4:	3b 83       	std	Y+3, r19	; 0x03
    68c6:	1e c0       	rjmp	.+60     	; 0x6904 <fgetc+0x78>
    68c8:	31 96       	adiw	r30, 0x01	; 1
    68ca:	f9 83       	std	Y+1, r31	; 0x01
    68cc:	e8 83       	st	Y, r30
    68ce:	11 c0       	rjmp	.+34     	; 0x68f2 <fgetc+0x66>
    68d0:	ea 85       	ldd	r30, Y+10	; 0x0a
    68d2:	fb 85       	ldd	r31, Y+11	; 0x0b
    68d4:	ce 01       	movw	r24, r28
    68d6:	09 95       	icall
    68d8:	97 ff       	sbrs	r25, 7
    68da:	0b c0       	rjmp	.+22     	; 0x68f2 <fgetc+0x66>
    68dc:	2b 81       	ldd	r18, Y+3	; 0x03
    68de:	3f ef       	ldi	r19, 0xFF	; 255
    68e0:	8f 3f       	cpi	r24, 0xFF	; 255
    68e2:	93 07       	cpc	r25, r19
    68e4:	11 f4       	brne	.+4      	; 0x68ea <fgetc+0x5e>
    68e6:	80 e1       	ldi	r24, 0x10	; 16
    68e8:	01 c0       	rjmp	.+2      	; 0x68ec <fgetc+0x60>
    68ea:	80 e2       	ldi	r24, 0x20	; 32
    68ec:	82 2b       	or	r24, r18
    68ee:	8b 83       	std	Y+3, r24	; 0x03
    68f0:	09 c0       	rjmp	.+18     	; 0x6904 <fgetc+0x78>
    68f2:	2e 81       	ldd	r18, Y+6	; 0x06
    68f4:	3f 81       	ldd	r19, Y+7	; 0x07
    68f6:	2f 5f       	subi	r18, 0xFF	; 255
    68f8:	3f 4f       	sbci	r19, 0xFF	; 255
    68fa:	3f 83       	std	Y+7, r19	; 0x07
    68fc:	2e 83       	std	Y+6, r18	; 0x06
    68fe:	28 2f       	mov	r18, r24
    6900:	30 e0       	ldi	r19, 0x00	; 0
    6902:	02 c0       	rjmp	.+4      	; 0x6908 <fgetc+0x7c>
    6904:	2f ef       	ldi	r18, 0xFF	; 255
    6906:	3f ef       	ldi	r19, 0xFF	; 255
    6908:	c9 01       	movw	r24, r18
    690a:	df 91       	pop	r29
    690c:	cf 91       	pop	r28
    690e:	08 95       	ret

00006910 <fputc>:
    6910:	0f 93       	push	r16
    6912:	1f 93       	push	r17
    6914:	cf 93       	push	r28
    6916:	df 93       	push	r29
    6918:	8c 01       	movw	r16, r24
    691a:	eb 01       	movw	r28, r22
    691c:	8b 81       	ldd	r24, Y+3	; 0x03
    691e:	81 ff       	sbrs	r24, 1
    6920:	1b c0       	rjmp	.+54     	; 0x6958 <fputc+0x48>
    6922:	82 ff       	sbrs	r24, 2
    6924:	0d c0       	rjmp	.+26     	; 0x6940 <fputc+0x30>
    6926:	2e 81       	ldd	r18, Y+6	; 0x06
    6928:	3f 81       	ldd	r19, Y+7	; 0x07
    692a:	8c 81       	ldd	r24, Y+4	; 0x04
    692c:	9d 81       	ldd	r25, Y+5	; 0x05
    692e:	28 17       	cp	r18, r24
    6930:	39 07       	cpc	r19, r25
    6932:	64 f4       	brge	.+24     	; 0x694c <fputc+0x3c>
    6934:	e8 81       	ld	r30, Y
    6936:	f9 81       	ldd	r31, Y+1	; 0x01
    6938:	01 93       	st	Z+, r16
    693a:	f9 83       	std	Y+1, r31	; 0x01
    693c:	e8 83       	st	Y, r30
    693e:	06 c0       	rjmp	.+12     	; 0x694c <fputc+0x3c>
    6940:	e8 85       	ldd	r30, Y+8	; 0x08
    6942:	f9 85       	ldd	r31, Y+9	; 0x09
    6944:	80 2f       	mov	r24, r16
    6946:	09 95       	icall
    6948:	00 97       	sbiw	r24, 0x00	; 0
    694a:	31 f4       	brne	.+12     	; 0x6958 <fputc+0x48>
    694c:	8e 81       	ldd	r24, Y+6	; 0x06
    694e:	9f 81       	ldd	r25, Y+7	; 0x07
    6950:	01 96       	adiw	r24, 0x01	; 1
    6952:	9f 83       	std	Y+7, r25	; 0x07
    6954:	8e 83       	std	Y+6, r24	; 0x06
    6956:	02 c0       	rjmp	.+4      	; 0x695c <fputc+0x4c>
    6958:	0f ef       	ldi	r16, 0xFF	; 255
    695a:	1f ef       	ldi	r17, 0xFF	; 255
    695c:	c8 01       	movw	r24, r16
    695e:	df 91       	pop	r29
    6960:	cf 91       	pop	r28
    6962:	1f 91       	pop	r17
    6964:	0f 91       	pop	r16
    6966:	08 95       	ret

00006968 <printf>:
    6968:	df 93       	push	r29
    696a:	cf 93       	push	r28
    696c:	cd b7       	in	r28, 0x3d	; 61
    696e:	de b7       	in	r29, 0x3e	; 62
    6970:	fe 01       	movw	r30, r28
    6972:	35 96       	adiw	r30, 0x05	; 5
    6974:	61 91       	ld	r22, Z+
    6976:	71 91       	ld	r23, Z+
    6978:	80 91 c6 0d 	lds	r24, 0x0DC6
    697c:	90 91 c7 0d 	lds	r25, 0x0DC7
    6980:	af 01       	movw	r20, r30
    6982:	0e 94 94 31 	call	0x6328	; 0x6328 <vfprintf>
    6986:	cf 91       	pop	r28
    6988:	df 91       	pop	r29
    698a:	08 95       	ret

0000698c <putchar>:
    698c:	60 91 c6 0d 	lds	r22, 0x0DC6
    6990:	70 91 c7 0d 	lds	r23, 0x0DC7
    6994:	0e 94 88 34 	call	0x6910	; 0x6910 <fputc>
    6998:	08 95       	ret

0000699a <puts>:
    699a:	ef 92       	push	r14
    699c:	ff 92       	push	r15
    699e:	0f 93       	push	r16
    69a0:	1f 93       	push	r17
    69a2:	cf 93       	push	r28
    69a4:	df 93       	push	r29
    69a6:	8c 01       	movw	r16, r24
    69a8:	e0 91 c6 0d 	lds	r30, 0x0DC6
    69ac:	f0 91 c7 0d 	lds	r31, 0x0DC7
    69b0:	83 81       	ldd	r24, Z+3	; 0x03
    69b2:	81 ff       	sbrs	r24, 1
    69b4:	1f c0       	rjmp	.+62     	; 0x69f4 <puts+0x5a>
    69b6:	c0 e0       	ldi	r28, 0x00	; 0
    69b8:	d0 e0       	ldi	r29, 0x00	; 0
    69ba:	0a c0       	rjmp	.+20     	; 0x69d0 <puts+0x36>
    69bc:	db 01       	movw	r26, r22
    69be:	18 96       	adiw	r26, 0x08	; 8
    69c0:	ed 91       	ld	r30, X+
    69c2:	fc 91       	ld	r31, X
    69c4:	19 97       	sbiw	r26, 0x09	; 9
    69c6:	09 95       	icall
    69c8:	00 97       	sbiw	r24, 0x00	; 0
    69ca:	11 f0       	breq	.+4      	; 0x69d0 <puts+0x36>
    69cc:	cf ef       	ldi	r28, 0xFF	; 255
    69ce:	df ef       	ldi	r29, 0xFF	; 255
    69d0:	f8 01       	movw	r30, r16
    69d2:	81 91       	ld	r24, Z+
    69d4:	8f 01       	movw	r16, r30
    69d6:	60 91 c6 0d 	lds	r22, 0x0DC6
    69da:	70 91 c7 0d 	lds	r23, 0x0DC7
    69de:	88 23       	and	r24, r24
    69e0:	69 f7       	brne	.-38     	; 0x69bc <puts+0x22>
    69e2:	db 01       	movw	r26, r22
    69e4:	18 96       	adiw	r26, 0x08	; 8
    69e6:	ed 91       	ld	r30, X+
    69e8:	fc 91       	ld	r31, X
    69ea:	19 97       	sbiw	r26, 0x09	; 9
    69ec:	8a e0       	ldi	r24, 0x0A	; 10
    69ee:	09 95       	icall
    69f0:	00 97       	sbiw	r24, 0x00	; 0
    69f2:	11 f0       	breq	.+4      	; 0x69f8 <puts+0x5e>
    69f4:	cf ef       	ldi	r28, 0xFF	; 255
    69f6:	df ef       	ldi	r29, 0xFF	; 255
    69f8:	ce 01       	movw	r24, r28
    69fa:	df 91       	pop	r29
    69fc:	cf 91       	pop	r28
    69fe:	1f 91       	pop	r17
    6a00:	0f 91       	pop	r16
    6a02:	ff 90       	pop	r15
    6a04:	ef 90       	pop	r14
    6a06:	08 95       	ret

00006a08 <sprintf>:
    6a08:	0f 93       	push	r16
    6a0a:	1f 93       	push	r17
    6a0c:	df 93       	push	r29
    6a0e:	cf 93       	push	r28
    6a10:	cd b7       	in	r28, 0x3d	; 61
    6a12:	de b7       	in	r29, 0x3e	; 62
    6a14:	2e 97       	sbiw	r28, 0x0e	; 14
    6a16:	0f b6       	in	r0, 0x3f	; 63
    6a18:	f8 94       	cli
    6a1a:	de bf       	out	0x3e, r29	; 62
    6a1c:	0f be       	out	0x3f, r0	; 63
    6a1e:	cd bf       	out	0x3d, r28	; 61
    6a20:	0d 89       	ldd	r16, Y+21	; 0x15
    6a22:	1e 89       	ldd	r17, Y+22	; 0x16
    6a24:	86 e0       	ldi	r24, 0x06	; 6
    6a26:	8c 83       	std	Y+4, r24	; 0x04
    6a28:	1a 83       	std	Y+2, r17	; 0x02
    6a2a:	09 83       	std	Y+1, r16	; 0x01
    6a2c:	8f ef       	ldi	r24, 0xFF	; 255
    6a2e:	9f e7       	ldi	r25, 0x7F	; 127
    6a30:	9e 83       	std	Y+6, r25	; 0x06
    6a32:	8d 83       	std	Y+5, r24	; 0x05
    6a34:	9e 01       	movw	r18, r28
    6a36:	27 5e       	subi	r18, 0xE7	; 231
    6a38:	3f 4f       	sbci	r19, 0xFF	; 255
    6a3a:	ce 01       	movw	r24, r28
    6a3c:	01 96       	adiw	r24, 0x01	; 1
    6a3e:	6f 89       	ldd	r22, Y+23	; 0x17
    6a40:	78 8d       	ldd	r23, Y+24	; 0x18
    6a42:	a9 01       	movw	r20, r18
    6a44:	0e 94 94 31 	call	0x6328	; 0x6328 <vfprintf>
    6a48:	ef 81       	ldd	r30, Y+7	; 0x07
    6a4a:	f8 85       	ldd	r31, Y+8	; 0x08
    6a4c:	e0 0f       	add	r30, r16
    6a4e:	f1 1f       	adc	r31, r17
    6a50:	10 82       	st	Z, r1
    6a52:	2e 96       	adiw	r28, 0x0e	; 14
    6a54:	0f b6       	in	r0, 0x3f	; 63
    6a56:	f8 94       	cli
    6a58:	de bf       	out	0x3e, r29	; 62
    6a5a:	0f be       	out	0x3f, r0	; 63
    6a5c:	cd bf       	out	0x3d, r28	; 61
    6a5e:	cf 91       	pop	r28
    6a60:	df 91       	pop	r29
    6a62:	1f 91       	pop	r17
    6a64:	0f 91       	pop	r16
    6a66:	08 95       	ret

00006a68 <__ultoa_invert>:
    6a68:	fa 01       	movw	r30, r20
    6a6a:	aa 27       	eor	r26, r26
    6a6c:	28 30       	cpi	r18, 0x08	; 8
    6a6e:	51 f1       	breq	.+84     	; 0x6ac4 <__ultoa_invert+0x5c>
    6a70:	20 31       	cpi	r18, 0x10	; 16
    6a72:	81 f1       	breq	.+96     	; 0x6ad4 <__ultoa_invert+0x6c>
    6a74:	e8 94       	clt
    6a76:	6f 93       	push	r22
    6a78:	6e 7f       	andi	r22, 0xFE	; 254
    6a7a:	6e 5f       	subi	r22, 0xFE	; 254
    6a7c:	7f 4f       	sbci	r23, 0xFF	; 255
    6a7e:	8f 4f       	sbci	r24, 0xFF	; 255
    6a80:	9f 4f       	sbci	r25, 0xFF	; 255
    6a82:	af 4f       	sbci	r26, 0xFF	; 255
    6a84:	b1 e0       	ldi	r27, 0x01	; 1
    6a86:	3e d0       	rcall	.+124    	; 0x6b04 <__ultoa_invert+0x9c>
    6a88:	b4 e0       	ldi	r27, 0x04	; 4
    6a8a:	3c d0       	rcall	.+120    	; 0x6b04 <__ultoa_invert+0x9c>
    6a8c:	67 0f       	add	r22, r23
    6a8e:	78 1f       	adc	r23, r24
    6a90:	89 1f       	adc	r24, r25
    6a92:	9a 1f       	adc	r25, r26
    6a94:	a1 1d       	adc	r26, r1
    6a96:	68 0f       	add	r22, r24
    6a98:	79 1f       	adc	r23, r25
    6a9a:	8a 1f       	adc	r24, r26
    6a9c:	91 1d       	adc	r25, r1
    6a9e:	a1 1d       	adc	r26, r1
    6aa0:	6a 0f       	add	r22, r26
    6aa2:	71 1d       	adc	r23, r1
    6aa4:	81 1d       	adc	r24, r1
    6aa6:	91 1d       	adc	r25, r1
    6aa8:	a1 1d       	adc	r26, r1
    6aaa:	20 d0       	rcall	.+64     	; 0x6aec <__ultoa_invert+0x84>
    6aac:	09 f4       	brne	.+2      	; 0x6ab0 <__ultoa_invert+0x48>
    6aae:	68 94       	set
    6ab0:	3f 91       	pop	r19
    6ab2:	2a e0       	ldi	r18, 0x0A	; 10
    6ab4:	26 9f       	mul	r18, r22
    6ab6:	11 24       	eor	r1, r1
    6ab8:	30 19       	sub	r19, r0
    6aba:	30 5d       	subi	r19, 0xD0	; 208
    6abc:	31 93       	st	Z+, r19
    6abe:	de f6       	brtc	.-74     	; 0x6a76 <__ultoa_invert+0xe>
    6ac0:	cf 01       	movw	r24, r30
    6ac2:	08 95       	ret
    6ac4:	46 2f       	mov	r20, r22
    6ac6:	47 70       	andi	r20, 0x07	; 7
    6ac8:	40 5d       	subi	r20, 0xD0	; 208
    6aca:	41 93       	st	Z+, r20
    6acc:	b3 e0       	ldi	r27, 0x03	; 3
    6ace:	0f d0       	rcall	.+30     	; 0x6aee <__ultoa_invert+0x86>
    6ad0:	c9 f7       	brne	.-14     	; 0x6ac4 <__ultoa_invert+0x5c>
    6ad2:	f6 cf       	rjmp	.-20     	; 0x6ac0 <__ultoa_invert+0x58>
    6ad4:	46 2f       	mov	r20, r22
    6ad6:	4f 70       	andi	r20, 0x0F	; 15
    6ad8:	40 5d       	subi	r20, 0xD0	; 208
    6ada:	4a 33       	cpi	r20, 0x3A	; 58
    6adc:	18 f0       	brcs	.+6      	; 0x6ae4 <__ultoa_invert+0x7c>
    6ade:	49 5d       	subi	r20, 0xD9	; 217
    6ae0:	31 fd       	sbrc	r19, 1
    6ae2:	40 52       	subi	r20, 0x20	; 32
    6ae4:	41 93       	st	Z+, r20
    6ae6:	02 d0       	rcall	.+4      	; 0x6aec <__ultoa_invert+0x84>
    6ae8:	a9 f7       	brne	.-22     	; 0x6ad4 <__ultoa_invert+0x6c>
    6aea:	ea cf       	rjmp	.-44     	; 0x6ac0 <__ultoa_invert+0x58>
    6aec:	b4 e0       	ldi	r27, 0x04	; 4
    6aee:	a6 95       	lsr	r26
    6af0:	97 95       	ror	r25
    6af2:	87 95       	ror	r24
    6af4:	77 95       	ror	r23
    6af6:	67 95       	ror	r22
    6af8:	ba 95       	dec	r27
    6afa:	c9 f7       	brne	.-14     	; 0x6aee <__ultoa_invert+0x86>
    6afc:	00 97       	sbiw	r24, 0x00	; 0
    6afe:	61 05       	cpc	r22, r1
    6b00:	71 05       	cpc	r23, r1
    6b02:	08 95       	ret
    6b04:	9b 01       	movw	r18, r22
    6b06:	ac 01       	movw	r20, r24
    6b08:	0a 2e       	mov	r0, r26
    6b0a:	06 94       	lsr	r0
    6b0c:	57 95       	ror	r21
    6b0e:	47 95       	ror	r20
    6b10:	37 95       	ror	r19
    6b12:	27 95       	ror	r18
    6b14:	ba 95       	dec	r27
    6b16:	c9 f7       	brne	.-14     	; 0x6b0a <__ultoa_invert+0xa2>
    6b18:	62 0f       	add	r22, r18
    6b1a:	73 1f       	adc	r23, r19
    6b1c:	84 1f       	adc	r24, r20
    6b1e:	95 1f       	adc	r25, r21
    6b20:	a0 1d       	adc	r26, r0
    6b22:	08 95       	ret

00006b24 <__eerd_byte_m128rfa1>:
    6b24:	f9 99       	sbic	0x1f, 1	; 31
    6b26:	fe cf       	rjmp	.-4      	; 0x6b24 <__eerd_byte_m128rfa1>
    6b28:	92 bd       	out	0x22, r25	; 34
    6b2a:	81 bd       	out	0x21, r24	; 33
    6b2c:	f8 9a       	sbi	0x1f, 0	; 31
    6b2e:	99 27       	eor	r25, r25
    6b30:	80 b5       	in	r24, 0x20	; 32
    6b32:	08 95       	ret

00006b34 <__eewr_byte_m128rfa1>:
    6b34:	26 2f       	mov	r18, r22

00006b36 <__eewr_r18_m128rfa1>:
    6b36:	f9 99       	sbic	0x1f, 1	; 31
    6b38:	fe cf       	rjmp	.-4      	; 0x6b36 <__eewr_r18_m128rfa1>
    6b3a:	1f ba       	out	0x1f, r1	; 31
    6b3c:	92 bd       	out	0x22, r25	; 34
    6b3e:	81 bd       	out	0x21, r24	; 33
    6b40:	20 bd       	out	0x20, r18	; 32
    6b42:	0f b6       	in	r0, 0x3f	; 63
    6b44:	f8 94       	cli
    6b46:	fa 9a       	sbi	0x1f, 2	; 31
    6b48:	f9 9a       	sbi	0x1f, 1	; 31
    6b4a:	0f be       	out	0x3f, r0	; 63
    6b4c:	01 96       	adiw	r24, 0x01	; 1
    6b4e:	08 95       	ret

00006b50 <calloc>:
    6b50:	ef 92       	push	r14
    6b52:	ff 92       	push	r15
    6b54:	0f 93       	push	r16
    6b56:	1f 93       	push	r17
    6b58:	cf 93       	push	r28
    6b5a:	df 93       	push	r29
    6b5c:	68 9f       	mul	r22, r24
    6b5e:	80 01       	movw	r16, r0
    6b60:	69 9f       	mul	r22, r25
    6b62:	10 0d       	add	r17, r0
    6b64:	78 9f       	mul	r23, r24
    6b66:	10 0d       	add	r17, r0
    6b68:	11 24       	eor	r1, r1
    6b6a:	c8 01       	movw	r24, r16
    6b6c:	0e 94 cd 35 	call	0x6b9a	; 0x6b9a <malloc>
    6b70:	e8 2e       	mov	r14, r24
    6b72:	e7 01       	movw	r28, r14
    6b74:	7e 01       	movw	r14, r28
    6b76:	f9 2e       	mov	r15, r25
    6b78:	e7 01       	movw	r28, r14
    6b7a:	20 97       	sbiw	r28, 0x00	; 0
    6b7c:	31 f0       	breq	.+12     	; 0x6b8a <calloc+0x3a>
    6b7e:	8e 2d       	mov	r24, r14
    6b80:	60 e0       	ldi	r22, 0x00	; 0
    6b82:	70 e0       	ldi	r23, 0x00	; 0
    6b84:	a8 01       	movw	r20, r16
    6b86:	0e 94 00 37 	call	0x6e00	; 0x6e00 <memset>
    6b8a:	ce 01       	movw	r24, r28
    6b8c:	df 91       	pop	r29
    6b8e:	cf 91       	pop	r28
    6b90:	1f 91       	pop	r17
    6b92:	0f 91       	pop	r16
    6b94:	ff 90       	pop	r15
    6b96:	ef 90       	pop	r14
    6b98:	08 95       	ret

00006b9a <malloc>:
    6b9a:	cf 93       	push	r28
    6b9c:	df 93       	push	r29
    6b9e:	82 30       	cpi	r24, 0x02	; 2
    6ba0:	91 05       	cpc	r25, r1
    6ba2:	10 f4       	brcc	.+4      	; 0x6ba8 <malloc+0xe>
    6ba4:	82 e0       	ldi	r24, 0x02	; 2
    6ba6:	90 e0       	ldi	r25, 0x00	; 0
    6ba8:	e0 91 cc 0d 	lds	r30, 0x0DCC
    6bac:	f0 91 cd 0d 	lds	r31, 0x0DCD
    6bb0:	40 e0       	ldi	r20, 0x00	; 0
    6bb2:	50 e0       	ldi	r21, 0x00	; 0
    6bb4:	20 e0       	ldi	r18, 0x00	; 0
    6bb6:	30 e0       	ldi	r19, 0x00	; 0
    6bb8:	26 c0       	rjmp	.+76     	; 0x6c06 <malloc+0x6c>
    6bba:	60 81       	ld	r22, Z
    6bbc:	71 81       	ldd	r23, Z+1	; 0x01
    6bbe:	68 17       	cp	r22, r24
    6bc0:	79 07       	cpc	r23, r25
    6bc2:	e0 f0       	brcs	.+56     	; 0x6bfc <malloc+0x62>
    6bc4:	68 17       	cp	r22, r24
    6bc6:	79 07       	cpc	r23, r25
    6bc8:	81 f4       	brne	.+32     	; 0x6bea <malloc+0x50>
    6bca:	82 81       	ldd	r24, Z+2	; 0x02
    6bcc:	93 81       	ldd	r25, Z+3	; 0x03
    6bce:	21 15       	cp	r18, r1
    6bd0:	31 05       	cpc	r19, r1
    6bd2:	31 f0       	breq	.+12     	; 0x6be0 <malloc+0x46>
    6bd4:	d9 01       	movw	r26, r18
    6bd6:	13 96       	adiw	r26, 0x03	; 3
    6bd8:	9c 93       	st	X, r25
    6bda:	8e 93       	st	-X, r24
    6bdc:	12 97       	sbiw	r26, 0x02	; 2
    6bde:	2b c0       	rjmp	.+86     	; 0x6c36 <malloc+0x9c>
    6be0:	90 93 cd 0d 	sts	0x0DCD, r25
    6be4:	80 93 cc 0d 	sts	0x0DCC, r24
    6be8:	26 c0       	rjmp	.+76     	; 0x6c36 <malloc+0x9c>
    6bea:	41 15       	cp	r20, r1
    6bec:	51 05       	cpc	r21, r1
    6bee:	19 f0       	breq	.+6      	; 0x6bf6 <malloc+0x5c>
    6bf0:	64 17       	cp	r22, r20
    6bf2:	75 07       	cpc	r23, r21
    6bf4:	18 f4       	brcc	.+6      	; 0x6bfc <malloc+0x62>
    6bf6:	ab 01       	movw	r20, r22
    6bf8:	e9 01       	movw	r28, r18
    6bfa:	df 01       	movw	r26, r30
    6bfc:	9f 01       	movw	r18, r30
    6bfe:	72 81       	ldd	r23, Z+2	; 0x02
    6c00:	63 81       	ldd	r22, Z+3	; 0x03
    6c02:	e7 2f       	mov	r30, r23
    6c04:	f6 2f       	mov	r31, r22
    6c06:	30 97       	sbiw	r30, 0x00	; 0
    6c08:	c1 f6       	brne	.-80     	; 0x6bba <malloc+0x20>
    6c0a:	41 15       	cp	r20, r1
    6c0c:	51 05       	cpc	r21, r1
    6c0e:	01 f1       	breq	.+64     	; 0x6c50 <malloc+0xb6>
    6c10:	48 1b       	sub	r20, r24
    6c12:	59 0b       	sbc	r21, r25
    6c14:	44 30       	cpi	r20, 0x04	; 4
    6c16:	51 05       	cpc	r21, r1
    6c18:	80 f4       	brcc	.+32     	; 0x6c3a <malloc+0xa0>
    6c1a:	12 96       	adiw	r26, 0x02	; 2
    6c1c:	8d 91       	ld	r24, X+
    6c1e:	9c 91       	ld	r25, X
    6c20:	13 97       	sbiw	r26, 0x03	; 3
    6c22:	20 97       	sbiw	r28, 0x00	; 0
    6c24:	19 f0       	breq	.+6      	; 0x6c2c <malloc+0x92>
    6c26:	9b 83       	std	Y+3, r25	; 0x03
    6c28:	8a 83       	std	Y+2, r24	; 0x02
    6c2a:	04 c0       	rjmp	.+8      	; 0x6c34 <malloc+0x9a>
    6c2c:	90 93 cd 0d 	sts	0x0DCD, r25
    6c30:	80 93 cc 0d 	sts	0x0DCC, r24
    6c34:	fd 01       	movw	r30, r26
    6c36:	32 96       	adiw	r30, 0x02	; 2
    6c38:	46 c0       	rjmp	.+140    	; 0x6cc6 <malloc+0x12c>
    6c3a:	fd 01       	movw	r30, r26
    6c3c:	e4 0f       	add	r30, r20
    6c3e:	f5 1f       	adc	r31, r21
    6c40:	81 93       	st	Z+, r24
    6c42:	91 93       	st	Z+, r25
    6c44:	42 50       	subi	r20, 0x02	; 2
    6c46:	50 40       	sbci	r21, 0x00	; 0
    6c48:	11 96       	adiw	r26, 0x01	; 1
    6c4a:	5c 93       	st	X, r21
    6c4c:	4e 93       	st	-X, r20
    6c4e:	3b c0       	rjmp	.+118    	; 0x6cc6 <malloc+0x12c>
    6c50:	20 91 ca 0d 	lds	r18, 0x0DCA
    6c54:	30 91 cb 0d 	lds	r19, 0x0DCB
    6c58:	21 15       	cp	r18, r1
    6c5a:	31 05       	cpc	r19, r1
    6c5c:	41 f4       	brne	.+16     	; 0x6c6e <malloc+0xd4>
    6c5e:	20 91 93 04 	lds	r18, 0x0493
    6c62:	30 91 94 04 	lds	r19, 0x0494
    6c66:	30 93 cb 0d 	sts	0x0DCB, r19
    6c6a:	20 93 ca 0d 	sts	0x0DCA, r18
    6c6e:	20 91 95 04 	lds	r18, 0x0495
    6c72:	30 91 96 04 	lds	r19, 0x0496
    6c76:	21 15       	cp	r18, r1
    6c78:	31 05       	cpc	r19, r1
    6c7a:	41 f4       	brne	.+16     	; 0x6c8c <malloc+0xf2>
    6c7c:	2d b7       	in	r18, 0x3d	; 61
    6c7e:	3e b7       	in	r19, 0x3e	; 62
    6c80:	40 91 91 04 	lds	r20, 0x0491
    6c84:	50 91 92 04 	lds	r21, 0x0492
    6c88:	24 1b       	sub	r18, r20
    6c8a:	35 0b       	sbc	r19, r21
    6c8c:	e0 91 ca 0d 	lds	r30, 0x0DCA
    6c90:	f0 91 cb 0d 	lds	r31, 0x0DCB
    6c94:	e2 17       	cp	r30, r18
    6c96:	f3 07       	cpc	r31, r19
    6c98:	a0 f4       	brcc	.+40     	; 0x6cc2 <malloc+0x128>
    6c9a:	2e 1b       	sub	r18, r30
    6c9c:	3f 0b       	sbc	r19, r31
    6c9e:	28 17       	cp	r18, r24
    6ca0:	39 07       	cpc	r19, r25
    6ca2:	78 f0       	brcs	.+30     	; 0x6cc2 <malloc+0x128>
    6ca4:	ac 01       	movw	r20, r24
    6ca6:	4e 5f       	subi	r20, 0xFE	; 254
    6ca8:	5f 4f       	sbci	r21, 0xFF	; 255
    6caa:	24 17       	cp	r18, r20
    6cac:	35 07       	cpc	r19, r21
    6cae:	48 f0       	brcs	.+18     	; 0x6cc2 <malloc+0x128>
    6cb0:	4e 0f       	add	r20, r30
    6cb2:	5f 1f       	adc	r21, r31
    6cb4:	50 93 cb 0d 	sts	0x0DCB, r21
    6cb8:	40 93 ca 0d 	sts	0x0DCA, r20
    6cbc:	81 93       	st	Z+, r24
    6cbe:	91 93       	st	Z+, r25
    6cc0:	02 c0       	rjmp	.+4      	; 0x6cc6 <malloc+0x12c>
    6cc2:	e0 e0       	ldi	r30, 0x00	; 0
    6cc4:	f0 e0       	ldi	r31, 0x00	; 0
    6cc6:	cf 01       	movw	r24, r30
    6cc8:	df 91       	pop	r29
    6cca:	cf 91       	pop	r28
    6ccc:	08 95       	ret

00006cce <free>:
    6cce:	cf 93       	push	r28
    6cd0:	df 93       	push	r29
    6cd2:	00 97       	sbiw	r24, 0x00	; 0
    6cd4:	09 f4       	brne	.+2      	; 0x6cd8 <free+0xa>
    6cd6:	91 c0       	rjmp	.+290    	; 0x6dfa <free+0x12c>
    6cd8:	fc 01       	movw	r30, r24
    6cda:	32 97       	sbiw	r30, 0x02	; 2
    6cdc:	13 82       	std	Z+3, r1	; 0x03
    6cde:	12 82       	std	Z+2, r1	; 0x02
    6ce0:	60 91 cc 0d 	lds	r22, 0x0DCC
    6ce4:	70 91 cd 0d 	lds	r23, 0x0DCD
    6ce8:	61 15       	cp	r22, r1
    6cea:	71 05       	cpc	r23, r1
    6cec:	81 f4       	brne	.+32     	; 0x6d0e <free+0x40>
    6cee:	20 81       	ld	r18, Z
    6cf0:	31 81       	ldd	r19, Z+1	; 0x01
    6cf2:	28 0f       	add	r18, r24
    6cf4:	39 1f       	adc	r19, r25
    6cf6:	80 91 ca 0d 	lds	r24, 0x0DCA
    6cfa:	90 91 cb 0d 	lds	r25, 0x0DCB
    6cfe:	82 17       	cp	r24, r18
    6d00:	93 07       	cpc	r25, r19
    6d02:	99 f5       	brne	.+102    	; 0x6d6a <free+0x9c>
    6d04:	f0 93 cb 0d 	sts	0x0DCB, r31
    6d08:	e0 93 ca 0d 	sts	0x0DCA, r30
    6d0c:	76 c0       	rjmp	.+236    	; 0x6dfa <free+0x12c>
    6d0e:	db 01       	movw	r26, r22
    6d10:	80 e0       	ldi	r24, 0x00	; 0
    6d12:	90 e0       	ldi	r25, 0x00	; 0
    6d14:	02 c0       	rjmp	.+4      	; 0x6d1a <free+0x4c>
    6d16:	cd 01       	movw	r24, r26
    6d18:	d9 01       	movw	r26, r18
    6d1a:	ae 17       	cp	r26, r30
    6d1c:	bf 07       	cpc	r27, r31
    6d1e:	48 f4       	brcc	.+18     	; 0x6d32 <free+0x64>
    6d20:	12 96       	adiw	r26, 0x02	; 2
    6d22:	2d 91       	ld	r18, X+
    6d24:	3c 91       	ld	r19, X
    6d26:	13 97       	sbiw	r26, 0x03	; 3
    6d28:	21 15       	cp	r18, r1
    6d2a:	31 05       	cpc	r19, r1
    6d2c:	a1 f7       	brne	.-24     	; 0x6d16 <free+0x48>
    6d2e:	cd 01       	movw	r24, r26
    6d30:	21 c0       	rjmp	.+66     	; 0x6d74 <free+0xa6>
    6d32:	b3 83       	std	Z+3, r27	; 0x03
    6d34:	a2 83       	std	Z+2, r26	; 0x02
    6d36:	ef 01       	movw	r28, r30
    6d38:	49 91       	ld	r20, Y+
    6d3a:	59 91       	ld	r21, Y+
    6d3c:	9e 01       	movw	r18, r28
    6d3e:	24 0f       	add	r18, r20
    6d40:	35 1f       	adc	r19, r21
    6d42:	a2 17       	cp	r26, r18
    6d44:	b3 07       	cpc	r27, r19
    6d46:	79 f4       	brne	.+30     	; 0x6d66 <free+0x98>
    6d48:	2d 91       	ld	r18, X+
    6d4a:	3c 91       	ld	r19, X
    6d4c:	11 97       	sbiw	r26, 0x01	; 1
    6d4e:	24 0f       	add	r18, r20
    6d50:	35 1f       	adc	r19, r21
    6d52:	2e 5f       	subi	r18, 0xFE	; 254
    6d54:	3f 4f       	sbci	r19, 0xFF	; 255
    6d56:	31 83       	std	Z+1, r19	; 0x01
    6d58:	20 83       	st	Z, r18
    6d5a:	12 96       	adiw	r26, 0x02	; 2
    6d5c:	2d 91       	ld	r18, X+
    6d5e:	3c 91       	ld	r19, X
    6d60:	13 97       	sbiw	r26, 0x03	; 3
    6d62:	33 83       	std	Z+3, r19	; 0x03
    6d64:	22 83       	std	Z+2, r18	; 0x02
    6d66:	00 97       	sbiw	r24, 0x00	; 0
    6d68:	29 f4       	brne	.+10     	; 0x6d74 <free+0xa6>
    6d6a:	f0 93 cd 0d 	sts	0x0DCD, r31
    6d6e:	e0 93 cc 0d 	sts	0x0DCC, r30
    6d72:	43 c0       	rjmp	.+134    	; 0x6dfa <free+0x12c>
    6d74:	dc 01       	movw	r26, r24
    6d76:	13 96       	adiw	r26, 0x03	; 3
    6d78:	fc 93       	st	X, r31
    6d7a:	ee 93       	st	-X, r30
    6d7c:	12 97       	sbiw	r26, 0x02	; 2
    6d7e:	4d 91       	ld	r20, X+
    6d80:	5d 91       	ld	r21, X+
    6d82:	a4 0f       	add	r26, r20
    6d84:	b5 1f       	adc	r27, r21
    6d86:	ea 17       	cp	r30, r26
    6d88:	fb 07       	cpc	r31, r27
    6d8a:	69 f4       	brne	.+26     	; 0x6da6 <free+0xd8>
    6d8c:	20 81       	ld	r18, Z
    6d8e:	31 81       	ldd	r19, Z+1	; 0x01
    6d90:	24 0f       	add	r18, r20
    6d92:	35 1f       	adc	r19, r21
    6d94:	2e 5f       	subi	r18, 0xFE	; 254
    6d96:	3f 4f       	sbci	r19, 0xFF	; 255
    6d98:	ec 01       	movw	r28, r24
    6d9a:	39 83       	std	Y+1, r19	; 0x01
    6d9c:	28 83       	st	Y, r18
    6d9e:	22 81       	ldd	r18, Z+2	; 0x02
    6da0:	33 81       	ldd	r19, Z+3	; 0x03
    6da2:	3b 83       	std	Y+3, r19	; 0x03
    6da4:	2a 83       	std	Y+2, r18	; 0x02
    6da6:	e0 e0       	ldi	r30, 0x00	; 0
    6da8:	f0 e0       	ldi	r31, 0x00	; 0
    6daa:	02 c0       	rjmp	.+4      	; 0x6db0 <free+0xe2>
    6dac:	fb 01       	movw	r30, r22
    6dae:	bc 01       	movw	r22, r24
    6db0:	db 01       	movw	r26, r22
    6db2:	12 96       	adiw	r26, 0x02	; 2
    6db4:	8d 91       	ld	r24, X+
    6db6:	9c 91       	ld	r25, X
    6db8:	13 97       	sbiw	r26, 0x03	; 3
    6dba:	00 97       	sbiw	r24, 0x00	; 0
    6dbc:	b9 f7       	brne	.-18     	; 0x6dac <free+0xde>
    6dbe:	9b 01       	movw	r18, r22
    6dc0:	2e 5f       	subi	r18, 0xFE	; 254
    6dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    6dc4:	8d 91       	ld	r24, X+
    6dc6:	9c 91       	ld	r25, X
    6dc8:	11 97       	sbiw	r26, 0x01	; 1
    6dca:	82 0f       	add	r24, r18
    6dcc:	93 1f       	adc	r25, r19
    6dce:	40 91 ca 0d 	lds	r20, 0x0DCA
    6dd2:	50 91 cb 0d 	lds	r21, 0x0DCB
    6dd6:	48 17       	cp	r20, r24
    6dd8:	59 07       	cpc	r21, r25
    6dda:	79 f4       	brne	.+30     	; 0x6dfa <free+0x12c>
    6ddc:	30 97       	sbiw	r30, 0x00	; 0
    6dde:	29 f4       	brne	.+10     	; 0x6dea <free+0x11c>
    6de0:	10 92 cd 0d 	sts	0x0DCD, r1
    6de4:	10 92 cc 0d 	sts	0x0DCC, r1
    6de8:	02 c0       	rjmp	.+4      	; 0x6dee <free+0x120>
    6dea:	13 82       	std	Z+3, r1	; 0x03
    6dec:	12 82       	std	Z+2, r1	; 0x02
    6dee:	22 50       	subi	r18, 0x02	; 2
    6df0:	30 40       	sbci	r19, 0x00	; 0
    6df2:	30 93 cb 0d 	sts	0x0DCB, r19
    6df6:	20 93 ca 0d 	sts	0x0DCA, r18
    6dfa:	df 91       	pop	r29
    6dfc:	cf 91       	pop	r28
    6dfe:	08 95       	ret

00006e00 <memset>:
    6e00:	dc 01       	movw	r26, r24
    6e02:	01 c0       	rjmp	.+2      	; 0x6e06 <memset+0x6>
    6e04:	6d 93       	st	X+, r22
    6e06:	41 50       	subi	r20, 0x01	; 1
    6e08:	50 40       	sbci	r21, 0x00	; 0
    6e0a:	e0 f7       	brcc	.-8      	; 0x6e04 <memset+0x4>
    6e0c:	08 95       	ret

00006e0e <__divmodsi4>:
    6e0e:	97 fb       	bst	r25, 7
    6e10:	09 2e       	mov	r0, r25
    6e12:	05 26       	eor	r0, r21
    6e14:	0e d0       	rcall	.+28     	; 0x6e32 <__divmodsi4_neg1>
    6e16:	57 fd       	sbrc	r21, 7
    6e18:	04 d0       	rcall	.+8      	; 0x6e22 <__divmodsi4_neg2>
    6e1a:	22 dc       	rcall	.-1980   	; 0x6660 <__udivmodsi4>
    6e1c:	0a d0       	rcall	.+20     	; 0x6e32 <__divmodsi4_neg1>
    6e1e:	00 1c       	adc	r0, r0
    6e20:	38 f4       	brcc	.+14     	; 0x6e30 <__divmodsi4_exit>

00006e22 <__divmodsi4_neg2>:
    6e22:	50 95       	com	r21
    6e24:	40 95       	com	r20
    6e26:	30 95       	com	r19
    6e28:	21 95       	neg	r18
    6e2a:	3f 4f       	sbci	r19, 0xFF	; 255
    6e2c:	4f 4f       	sbci	r20, 0xFF	; 255
    6e2e:	5f 4f       	sbci	r21, 0xFF	; 255

00006e30 <__divmodsi4_exit>:
    6e30:	08 95       	ret

00006e32 <__divmodsi4_neg1>:
    6e32:	f6 f7       	brtc	.-4      	; 0x6e30 <__divmodsi4_exit>
    6e34:	90 95       	com	r25
    6e36:	80 95       	com	r24
    6e38:	70 95       	com	r23
    6e3a:	61 95       	neg	r22
    6e3c:	7f 4f       	sbci	r23, 0xFF	; 255
    6e3e:	8f 4f       	sbci	r24, 0xFF	; 255
    6e40:	9f 4f       	sbci	r25, 0xFF	; 255
    6e42:	08 95       	ret

00006e44 <_exit>:
    6e44:	f8 94       	cli

00006e46 <__stop_program>:
    6e46:	ff cf       	rjmp	.-2      	; 0x6e46 <__stop_program>
